# Copyright 2018 The Fuchsia Authors. All rights reserved.
# Use of this source code is governed by a BSD-style license that can be found in the LICENSE file.
#
# WARNING: This file is machine generated by fidlgen.

include <fidl/test/anonymous/c/fidl.h>
fidl_test_anonymous_SomeProtocol_SomeMethod_Error = fidl_test_anonymous_SomeProtocol_SomeMethod_Error_ERROR_ONE, fidl_test_anonymous_SomeProtocol_SomeMethod_Error_ERROR_TWO
fidl_test_anonymous_Op = fidl_test_anonymous_Op_ADD, fidl_test_anonymous_Op_MUL, fidl_test_anonymous_Op_DIV
fidl_test_anonymous_BitsMember = fidl_test_anonymous_BitsMember_BIT_ONE, fidl_test_anonymous_BitsMember_BIT_TWO
fidl_test_anonymous_Flags = fidl_test_anonymous_Flags_INLINE
fidl_test_anonymous_TableDataInLine {
       data int8
} [packed]
fidl_test_anonymous_TableDataOutOfLine {
       void void
} [packed]
fidl_test_anonymous_TableDataHandles {
       void void
} [packed]
fidl_test_anonymous_SomeProtocol_SomeMethod_ResponseInLine {
       bits_member flags[fidl_test_anonymous_BitsMember, int32]
} [packed]
fidl_test_anonymous_SomeProtocol_SomeMethod_ResponseOutOfLine {
       void void
} [packed]
fidl_test_anonymous_SomeProtocol_SomeMethod_ResponseHandles {
       void void
} [packed]
fidl_test_anonymous_OverrideTestInLine {
       op flags[fidl_test_anonymous_Op, int32]
       leftInLine fidl_test_anonymous_ExpressionInLine
       rightInLine fidl_test_anonymous_ExpressionInLine
} [packed]
fidl_test_anonymous_OverrideTestOutOfLine {
       void void
} [packed]
fidl_test_anonymous_OverrideTestHandles {
       void void
} [packed]
fidl_test_anonymous_UnionMemberInLine [
       union_data fidl_union_member[2, int8]
]
fidl_test_anonymous_UnionMemberOutOfLine [
       void void
][varlen]
fidl_test_anonymous_UnionMemberHandles [
       void void
][varlen]
fidl_test_anonymous_SomeProtocol_SomeMethod_ResultInLine [
       responseInLine fidl_union_member[1, fidl_test_anonymous_SomeProtocol_SomeMethod_ResponseInLine]
       err fidl_union_member[2, flags[fidl_test_anonymous_SomeProtocol_SomeMethod_Error, int32]]
]
fidl_test_anonymous_SomeProtocol_SomeMethod_ResultOutOfLine [
       responseOutOfLine fidl_test_anonymous_SomeProtocol_SomeMethod_ResponseOutOfLine
][varlen]
fidl_test_anonymous_SomeProtocol_SomeMethod_ResultHandles [
       response fidl_test_anonymous_SomeProtocol_SomeMethod_ResponseHandles
][varlen]
fidl_test_anonymous_ExpressionInLine [
       value fidl_union_member[1, int64]
       bin_opInLine fidl_union_member[2, fidl_test_anonymous_OverrideTestInLine]
        fidl_union_member[3, ]
]
fidl_test_anonymous_ExpressionOutOfLine [
       bin_opOutOfLine fidl_test_anonymous_OverrideTestOutOfLine
][varlen]
fidl_test_anonymous_ExpressionHandles [
       bin_op fidl_test_anonymous_OverrideTestHandles
][varlen]


fidl_test_anonymous_SomeProtocolSomeMethodRequest {
       hdr fidl_message_header[8941579241812366574]
       union_memberInLine fidl_test_anonymous_UnionMemberInLine
        
} [packed]
fidl_test_anonymous_SomeProtocolSomeMethodRequestHandles {
       void void
} [packed]
fidl_test_anonymous_SomeProtocolSomeMethodResponse {
       hdr fidl_message_header[8941579241812366574]
       resultInLine fidl_test_anonymous_SomeProtocol_SomeMethod_ResultInLine
       resultOutOfLine fidl_test_anonymous_SomeProtocol_SomeMethod_ResultOutOfLine
} [packed]
fidl_test_anonymous_SomeProtocolSomeMethodResponseHandles {
       result fidl_test_anonymous_SomeProtocol_SomeMethod_ResultHandles
} [packed]

resource zx_chan_fidl_test_anonymous_SomeProtocol_client[zx_chan]
resource zx_chan_fidl_test_anonymous_SomeProtocol_server[zx_chan]

zx_channel_create$fidl_test_anonymous_SomeProtocol(options const[0], out0 ptr[out, zx_chan_fidl_test_anonymous_SomeProtocol_client], out1 ptr[out, zx_chan_fidl_test_anonymous_SomeProtocol_server])
fdio_service_connect$fidl_test_anonymous_SomeProtocol(path ptr[in, string["/svc/"]], handle zx_chan_fidl_test_anonymous_SomeProtocol_server)
zx_channel_call$fidl_test_anonymous_SomeProtocolSomeMethod(handle zx_chan_fidl_test_anonymous_SomeProtocol_client, options const[0], deadline zx_time, args ptr[in, fidl_call_args[fidl_test_anonymous_SomeProtocolSomeMethodRequest, fidl_test_anonymous_SomeProtocolSomeMethodRequestHandles, array[int8, ZX_CHANNEL_MAX_MSG_BYTES], fidl_test_anonymous_SomeProtocolSomeMethodResponseHandles]], actual_bytes ptr[out, int32], actual_handles ptr[out, int32])

