# Copyright 2018 The Fuchsia Authors. All rights reserved.
# Use of this source code is governed by a BSD-style license that can be found in the LICENSE file.
#
# WARNING: This file is machine generated by fidlgen.

include <test/unknowninteractions/c/fidl.h>
test_unknowninteractions_Example_FlexibleTwoWay_ResponseInLine {
    padding int8
} [packed]
test_unknowninteractions_Example_FlexibleTwoWay_ResponseOutOfLine {
    void void
} [packed]
test_unknowninteractions_Example_FlexibleTwoWay_ResponseHandles {
    void void
} [packed]
test_unknowninteractions_Example_FlexibleTwoWay_ResultInLine [
    responseInLine fidl_union_member[1, test_unknowninteractions_Example_FlexibleTwoWay_ResponseInLine]
    transport_err fidl_union_member[3, int32]
]
test_unknowninteractions_Example_FlexibleTwoWay_ResultOutOfLine [
    responseOutOfLine test_unknowninteractions_Example_FlexibleTwoWay_ResponseOutOfLine
][varlen]
test_unknowninteractions_Example_FlexibleTwoWay_ResultHandles [
    response test_unknowninteractions_Example_FlexibleTwoWay_ResponseHandles
][varlen]


test_unknowninteractions_ExampleStrictOneWayRequest {
    hdr fidl_message_header[2276912608357927194]
} [packed]
test_unknowninteractions_ExampleStrictOneWayRequestHandles {
    void void
} [packed]
test_unknowninteractions_ExampleFlexibleOneWayRequest {
    hdr fidl_message_header[2309537410782500280]
} [packed]
test_unknowninteractions_ExampleFlexibleOneWayRequestHandles {
    void void
} [packed]
test_unknowninteractions_ExampleStrictTwoWayRequest {
    hdr fidl_message_header[4530909159434307973]
} [packed]
test_unknowninteractions_ExampleStrictTwoWayRequestHandles {
    void void
} [packed]
test_unknowninteractions_ExampleStrictTwoWayResponse {
    hdr fidl_message_header[4530909159434307973]
} [packed]
test_unknowninteractions_ExampleStrictTwoWayResponseHandles {
    void void
} [packed]
test_unknowninteractions_ExampleFlexibleTwoWayRequest {
    hdr fidl_message_header[9070032238358100524]
} [packed]
test_unknowninteractions_ExampleFlexibleTwoWayRequestHandles {
    void void
} [packed]
test_unknowninteractions_ExampleFlexibleTwoWayResponse {
    hdr fidl_message_header[9070032238358100524]
    resultInLine test_unknowninteractions_Example_FlexibleTwoWay_ResultInLine
    resultOutOfLine test_unknowninteractions_Example_FlexibleTwoWay_ResultOutOfLine
} [packed]
test_unknowninteractions_ExampleFlexibleTwoWayResponseHandles {
    result test_unknowninteractions_Example_FlexibleTwoWay_ResultHandles
} [packed]
test_unknowninteractions_ExampleStrictEventEvent {
    hdr fidl_message_header[2942732192976592869]
} [packed]
test_unknowninteractions_ExampleStrictEventEventHandles {
    void void
} [packed]
test_unknowninteractions_ExampleFlexibleEventEvent {
    hdr fidl_message_header[2065245206460174394]
} [packed]
test_unknowninteractions_ExampleFlexibleEventEventHandles {
    void void
} [packed]

resource zx_chan_test_unknowninteractions_Example_client[zx_chan]
resource zx_chan_test_unknowninteractions_Example_server[zx_chan]

zx_channel_create$test_unknowninteractions_Example(options const[0], out0 ptr[out, zx_chan_test_unknowninteractions_Example_client], out1 ptr[out, zx_chan_test_unknowninteractions_Example_server])
fdio_service_connect$test_unknowninteractions_Example(path ptr[in, string["/svc/"]], handle zx_chan_test_unknowninteractions_Example_server)
zx_channel_write$test_unknowninteractions_ExampleStrictOneWay(handle zx_chan_test_unknowninteractions_Example_client, options const[0], bytes ptr[in, test_unknowninteractions_ExampleStrictOneWayRequest], num_bytes bytesize[bytes], handles ptr[in, test_unknowninteractions_ExampleStrictOneWayRequestHandles], num_handles bytesize[handles])
zx_channel_write$test_unknowninteractions_ExampleFlexibleOneWay(handle zx_chan_test_unknowninteractions_Example_client, options const[0], bytes ptr[in, test_unknowninteractions_ExampleFlexibleOneWayRequest], num_bytes bytesize[bytes], handles ptr[in, test_unknowninteractions_ExampleFlexibleOneWayRequestHandles], num_handles bytesize[handles])
zx_channel_call$test_unknowninteractions_ExampleStrictTwoWay(handle zx_chan_test_unknowninteractions_Example_client, options const[0], deadline zx_time, args ptr[in, fidl_call_args[test_unknowninteractions_ExampleStrictTwoWayRequest, test_unknowninteractions_ExampleStrictTwoWayRequestHandles, array[int8, ZX_CHANNEL_MAX_MSG_BYTES], test_unknowninteractions_ExampleStrictTwoWayResponseHandles]], actual_bytes ptr[out, int32], actual_handles ptr[out, int32])
zx_channel_call$test_unknowninteractions_ExampleFlexibleTwoWay(handle zx_chan_test_unknowninteractions_Example_client, options const[0], deadline zx_time, args ptr[in, fidl_call_args[test_unknowninteractions_ExampleFlexibleTwoWayRequest, test_unknowninteractions_ExampleFlexibleTwoWayRequestHandles, array[int8, ZX_CHANNEL_MAX_MSG_BYTES], test_unknowninteractions_ExampleFlexibleTwoWayResponseHandles]], actual_bytes ptr[out, int32], actual_handles ptr[out, int32])
zx_channel_read$test_unknowninteractions_ExampleStrictEvent(handle zx_chan_test_unknowninteractions_Example_client, options const[0], bytes ptr[out, array[int8, ZX_CHANNEL_MAX_MSG_BYTES]], num_bytes bytesize[bytes], handles ptr[out, test_unknowninteractions_ExampleStrictEventEventHandles], num_handles bytesize[handles], actual_bytes ptr[out, int32], actual_handles ptr[out, int32])
zx_channel_read$test_unknowninteractions_ExampleFlexibleEvent(handle zx_chan_test_unknowninteractions_Example_client, options const[0], bytes ptr[out, array[int8, ZX_CHANNEL_MAX_MSG_BYTES]], num_bytes bytesize[bytes], handles ptr[out, test_unknowninteractions_ExampleFlexibleEventEventHandles], num_handles bytesize[handles], actual_bytes ptr[out, int32], actual_handles ptr[out, int32])

