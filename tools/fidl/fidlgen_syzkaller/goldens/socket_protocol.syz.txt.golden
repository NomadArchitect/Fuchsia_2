# Copyright 2018 The Fuchsia Authors. All rights reserved.
# Use of this source code is governed by a BSD-style license that can be found in the LICENSE file.
#
# WARNING: This file is machine generated by fidlgen.

include <fidl/test/socketprotocol/c/fidl.h>


fidl_test_socketprotocol_WithAndWithoutRequestResponseNoRequestNoResponseRequest {
       hdr fidl_message_header[6458717867077071333]
} [packed]
fidl_test_socketprotocol_WithAndWithoutRequestResponseNoRequestNoResponseRequestHandles {
       void void
} [packed]
fidl_test_socketprotocol_WithAndWithoutRequestResponseNoRequestEmptyResponseRequest {
       hdr fidl_message_header[1500216538659752669]
} [packed]
fidl_test_socketprotocol_WithAndWithoutRequestResponseNoRequestEmptyResponseRequestHandles {
       void void
} [packed]
fidl_test_socketprotocol_WithAndWithoutRequestResponseNoRequestEmptyResponseResponse {
       hdr fidl_message_header[1500216538659752669]
} [packed]
fidl_test_socketprotocol_WithAndWithoutRequestResponseNoRequestEmptyResponseResponseHandles {
       void void
} [packed]
fidl_test_socketprotocol_WithAndWithoutRequestResponseNoRequestWithResponseRequest {
       hdr fidl_message_header[4096394414503532493]
} [packed]
fidl_test_socketprotocol_WithAndWithoutRequestResponseNoRequestWithResponseRequestHandles {
       void void
} [packed]
fidl_test_socketprotocol_WithAndWithoutRequestResponseNoRequestWithResponseResponse {
       hdr fidl_message_header[4096394414503532493]
       retInLine fidl_string
       retOutOfLine fidl_aligned[stringnoz]
} [packed]
fidl_test_socketprotocol_WithAndWithoutRequestResponseNoRequestWithResponseResponseHandles {
       void void
} [packed]
fidl_test_socketprotocol_WithAndWithoutRequestResponseWithRequestNoResponseRequest {
       hdr fidl_message_header[3153049930443027759]
       argInLine fidl_string
       argOutOfLine fidl_aligned[stringnoz]
} [packed]
fidl_test_socketprotocol_WithAndWithoutRequestResponseWithRequestNoResponseRequestHandles {
       void void
} [packed]
fidl_test_socketprotocol_WithAndWithoutRequestResponseWithRequestEmptyResponseRequest {
       hdr fidl_message_header[2166952728171652732]
       argInLine fidl_string
       argOutOfLine fidl_aligned[stringnoz]
} [packed]
fidl_test_socketprotocol_WithAndWithoutRequestResponseWithRequestEmptyResponseRequestHandles {
       void void
} [packed]
fidl_test_socketprotocol_WithAndWithoutRequestResponseWithRequestEmptyResponseResponse {
       hdr fidl_message_header[2166952728171652732]
} [packed]
fidl_test_socketprotocol_WithAndWithoutRequestResponseWithRequestEmptyResponseResponseHandles {
       void void
} [packed]
fidl_test_socketprotocol_WithAndWithoutRequestResponseWithRequestWithResponseRequest {
       hdr fidl_message_header[4386901167710485649]
       argInLine fidl_string
       argOutOfLine fidl_aligned[stringnoz]
} [packed]
fidl_test_socketprotocol_WithAndWithoutRequestResponseWithRequestWithResponseRequestHandles {
       void void
} [packed]
fidl_test_socketprotocol_WithAndWithoutRequestResponseWithRequestWithResponseResponse {
       hdr fidl_message_header[4386901167710485649]
       retInLine fidl_string
       retOutOfLine fidl_aligned[stringnoz]
} [packed]
fidl_test_socketprotocol_WithAndWithoutRequestResponseWithRequestWithResponseResponseHandles {
       void void
} [packed]

resource zx_chan_fidl_test_socketprotocol_WithAndWithoutRequestResponse_client[zx_chan]
resource zx_chan_fidl_test_socketprotocol_WithAndWithoutRequestResponse_server[zx_chan]

zx_channel_create$fidl_test_socketprotocol_WithAndWithoutRequestResponse(options const[0], out0 ptr[out, zx_chan_fidl_test_socketprotocol_WithAndWithoutRequestResponse_client], out1 ptr[out, zx_chan_fidl_test_socketprotocol_WithAndWithoutRequestResponse_server])
fdio_service_connect$fidl_test_socketprotocol_WithAndWithoutRequestResponse(path ptr[in, string["/svc/"]], handle zx_chan_fidl_test_socketprotocol_WithAndWithoutRequestResponse_server)
zx_channel_write$fidl_test_socketprotocol_WithAndWithoutRequestResponseNoRequestNoResponse(handle zx_chan_fidl_test_socketprotocol_WithAndWithoutRequestResponse_client, options const[0], bytes ptr[in, fidl_test_socketprotocol_WithAndWithoutRequestResponseNoRequestNoResponseRequest], num_bytes bytesize[bytes], handles ptr[in, fidl_test_socketprotocol_WithAndWithoutRequestResponseNoRequestNoResponseRequestHandles], num_handles bytesize[handles])
zx_channel_call$fidl_test_socketprotocol_WithAndWithoutRequestResponseNoRequestEmptyResponse(handle zx_chan_fidl_test_socketprotocol_WithAndWithoutRequestResponse_client, options const[0], deadline zx_time, args ptr[in, fidl_call_args[fidl_test_socketprotocol_WithAndWithoutRequestResponseNoRequestEmptyResponseRequest, fidl_test_socketprotocol_WithAndWithoutRequestResponseNoRequestEmptyResponseRequestHandles, array[int8, ZX_CHANNEL_MAX_MSG_BYTES], fidl_test_socketprotocol_WithAndWithoutRequestResponseNoRequestEmptyResponseResponseHandles]], actual_bytes ptr[out, int32], actual_handles ptr[out, int32])
zx_channel_call$fidl_test_socketprotocol_WithAndWithoutRequestResponseNoRequestWithResponse(handle zx_chan_fidl_test_socketprotocol_WithAndWithoutRequestResponse_client, options const[0], deadline zx_time, args ptr[in, fidl_call_args[fidl_test_socketprotocol_WithAndWithoutRequestResponseNoRequestWithResponseRequest, fidl_test_socketprotocol_WithAndWithoutRequestResponseNoRequestWithResponseRequestHandles, array[int8, ZX_CHANNEL_MAX_MSG_BYTES], fidl_test_socketprotocol_WithAndWithoutRequestResponseNoRequestWithResponseResponseHandles]], actual_bytes ptr[out, int32], actual_handles ptr[out, int32])
zx_channel_write$fidl_test_socketprotocol_WithAndWithoutRequestResponseWithRequestNoResponse(handle zx_chan_fidl_test_socketprotocol_WithAndWithoutRequestResponse_client, options const[0], bytes ptr[in, fidl_test_socketprotocol_WithAndWithoutRequestResponseWithRequestNoResponseRequest], num_bytes bytesize[bytes], handles ptr[in, fidl_test_socketprotocol_WithAndWithoutRequestResponseWithRequestNoResponseRequestHandles], num_handles bytesize[handles])
zx_channel_call$fidl_test_socketprotocol_WithAndWithoutRequestResponseWithRequestEmptyResponse(handle zx_chan_fidl_test_socketprotocol_WithAndWithoutRequestResponse_client, options const[0], deadline zx_time, args ptr[in, fidl_call_args[fidl_test_socketprotocol_WithAndWithoutRequestResponseWithRequestEmptyResponseRequest, fidl_test_socketprotocol_WithAndWithoutRequestResponseWithRequestEmptyResponseRequestHandles, array[int8, ZX_CHANNEL_MAX_MSG_BYTES], fidl_test_socketprotocol_WithAndWithoutRequestResponseWithRequestEmptyResponseResponseHandles]], actual_bytes ptr[out, int32], actual_handles ptr[out, int32])
zx_channel_call$fidl_test_socketprotocol_WithAndWithoutRequestResponseWithRequestWithResponse(handle zx_chan_fidl_test_socketprotocol_WithAndWithoutRequestResponse_client, options const[0], deadline zx_time, args ptr[in, fidl_call_args[fidl_test_socketprotocol_WithAndWithoutRequestResponseWithRequestWithResponseRequest, fidl_test_socketprotocol_WithAndWithoutRequestResponseWithRequestWithResponseRequestHandles, array[int8, ZX_CHANNEL_MAX_MSG_BYTES], fidl_test_socketprotocol_WithAndWithoutRequestResponseWithRequestWithResponseResponseHandles]], actual_bytes ptr[out, int32], actual_handles ptr[out, int32])

