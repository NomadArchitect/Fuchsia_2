{{/*
// Copyright 2022 The Fuchsia Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
*/}}

{{- define "Method:ReplySignature:Helper" -}}
{{- /* TODO(fxbug.dev/60240): Use `const T&` for value types. */}}
{{- if .HasResponsePayload }}{{ .ResponsePayload }}&& payload{{ end }}
{{- end }}



{{- define "Method:CompleterBase:MessagingHeader" }}
{{ EnsureNamespace "" }}
template<>
class {{ .NaturalCompleterBase }} : public ::fidl::CompleterBase {
 public:
  void Reply({{ template "Method:ReplySignature:Helper" . }});

 protected:
  using ::fidl::CompleterBase::CompleterBase;

 private:
  ::fidl::internal::NaturalServerMessenger messenger_{this};
};

template<>
struct {{ .NaturalMethodTypes }} {
  using Completer = fidl::Completer<{{ .NaturalCompleterBase }}>;
};
{{- end }}



{{- define "Method:CompleterBase:MessagingSource" }}
{{ EnsureNamespace "" }}
void {{ .NaturalCompleterBase.NoLeading }}::Reply({{ template "Method:ReplySignature:Helper" . }}) {
  ::fidl::Encoder _encoder{ {{ .OrdinalName }} };
  messenger_.SendReply(
      &{{ .Response.WireCodingTable }},
      ::fidl::internal::EncodeTransactionalMessageWithoutValidating(
          _encoder {{- if .HasResponsePayload }}, std::move(payload){{ end }}));
}
{{- end }}
