{{/*
// Copyright 2021 The Fuchsia Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
*/}}

{{- define "MethodResponseDeclaration" }}
{{- IfdefFuchsia -}}
{{- EnsureNamespace "" }}

template <>
class {{ .NaturalResponse }} final : public {{ .ResponseMessageBase }} {
 public:
  {{- with .NaturalResponse }}
  {{ .Self }}() = default;
  ~{{ .Self }}() = default;
  {{ .Self }}({{ .Self }}&&) noexcept = default;
  {{ .Self }}& operator=({{ .Self }}&&) noexcept = default;
  {{- end }}

  {{- if .HasResponsePayload }}
  {{ .NaturalResponse.Self }}({{ .ResponsePayload }} payload) : payload_(std::move(payload)) {}
  {{- end }}

  {{- if .Response.IsResource }}
    {{- with .NaturalResponse }}
  {{ .Self }}(const {{ .Self }}&) noexcept = delete;
  {{ .Self }}& operator=(const {{ .Self }}&) noexcept = delete;
    {{- end }}
  {{- else }}
    {{- /* TODO(fxbug.dev/82189): Generate copy constructors */}}
  {{- end }}

  {{- if .HasResponsePayload }}
  {{ .ResponsePayload }}* operator->() { return &payload_; }
  const {{ .ResponsePayload }}* operator->() const { return &payload_; }
  {{- end }}

 private:
  {{- if .HasResponsePayload }}
  {{ .ResponsePayload }} payload_;
  {{- end }}
};

template <>
struct {{ .ResponseMessageTraits }} final {
 public:
  static constexpr bool kHasPayload = {{ .HasResponsePayload }};
  {{- if .HasResponsePayload }}
  using Payload = {{ .ResponsePayload }};
  {{- end }}
};


{{- EndifFuchsia -}}
{{- end }}



{{- define "MethodResponseDefinition" }}

{{- end }}
