{{/*
// Copyright 2021 The Fuchsia Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
*/}}

{{- define "ProtocolEventHandlerDeclaration" }}
{{- EnsureNamespace "" }}
{{- IfdefFuchsia }}
template<>
class {{ .NaturalEventHandlerInterface }} {
 public:
  {{ .NaturalEventHandlerInterface.Self }}() = default;
  virtual ~{{ .NaturalEventHandlerInterface.Self }}() = default;
  {{- range .Events -}}
    {{- .Docs }}
    virtual void {{ .Name }}({{ .NaturalEvent }}&) {}
  {{- end }}
};


template<>
class {{ .NaturalAsyncEventHandler }}
    : public {{ .NaturalEventHandlerInterface }}, public ::fidl::internal::AsyncEventHandler {
 public:
  {{ .NaturalAsyncEventHandler.Self }}() = default;
};

template <>
class {{ .NaturalEventDispatcher }} final :
    public ::fidl::internal::IncomingEventDispatcher<{{ .NaturalAsyncEventHandler }}> {
 public:
  explicit {{ .NaturalEventDispatcher.Self }}({{ .NaturalAsyncEventHandler }}* event_handler)
      : IncomingEventDispatcher(event_handler) {}

 private:
  std::optional<::fidl::UnbindInfo> DispatchEvent(
      ::fidl::IncomingMessage& msg,
      internal::IncomingTransportContext transport_context) override;
};
{{- EndifFuchsia }}
{{- end }}



{{- define "ProtocolEventHandlerDefinition" }}
{{- EnsureNamespace "" }}
{{- IfdefFuchsia }}
std::optional<::fidl::UnbindInfo>
{{ .NaturalEventDispatcher.NoLeading }}::DispatchEvent(
    ::fidl::IncomingMessage& msg,
    ::fidl::internal::IncomingTransportContext transport_context) {
  {{- if .Events }}
  switch (msg.header()->ordinal) {
  {{- range .Events }}
    case {{ .OrdinalName }}:
    {
      ::fitx::result<::fidl::Error, {{ .NaturalEvent }}> decoded =
          {{ .NaturalEvent }}::DecodeTransactional(std::move(msg));
      if (decoded.is_error()) {
        return ::fidl::UnbindInfo(decoded.error_value());
      }
      if (event_handler()) {
        event_handler()->{{ .Name }}(decoded.value());
      }
      return std::nullopt;
    }
  {{- end }}
    default:
      break;
  }
  {{- end }}
  return ::fidl::UnbindInfo::UnknownOrdinal();
}

{{- EndifFuchsia }}
{{- end }}
