{{/*
// Copyright 2021 The Fuchsia Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
*/}}

{{- define "Method:Result:WireMessagingHeader" }}
{{- EnsureNamespace "" }}

{{ if .WireResultUnwrapType -}}
template<>
struct {{ .WireResultUnwrap }} {
  using Type = {{ .WireResultUnwrapType }};
};
{{- end }}

template<>
class [[nodiscard]] {{ .WireResult }} final : public {{ .BaseWireResult }} {
 public:
  {{ .WireResult.Self }}(
      {{ .Protocol.UnownedClientEnd }} client,
      {{ .WireTransactionalRequest }}* request
      {{- if .HasResponse }}, std::optional<zx::time> deadline = std::nullopt{{ end }}
  );

  explicit {{ .WireResult.Self }}(const ::fidl::Status& result) : {{ .BaseWireResult }}(result) {}
  {{ .WireResult.Self }}({{ .WireResult.Self }}&&) = delete;
  {{ .WireResult.Self }}(const {{ .WireResult.Self }}&) = delete;
  {{ .WireResult.Self }}& operator=({{ .WireResult.Self }}&&) = delete;
  {{ .WireResult.Self }}& operator=(const {{ .WireResult.Self }}&) = delete;
  ~{{ .WireResult.Self }}() = default;

  {{- if .HasResponse }}
   private:
    {{ .Response.ClientAllocationV1.BackingBufferType }} bytes_;
    ::fidl::DecodedValue<{{ .WireTransactionalResponse }}> decoded_;
  {{- end }}
};

{{- end }}



{{- define "Method:Result:WireMessagingSource" }}
{{- IfdefFuchsia -}}
{{- EnsureNamespace "" }}
{{ .WireResult }}::{{ .WireResult.Self }}(
    {{ .Protocol.UnownedClientEnd }} client,
    {{ .WireTransactionalRequest }}* request
    {{- if .HasResponse }}, std::optional<zx::time> deadline{{ end }}
) {
  FIDL_INTERNAL_DISABLE_AUTO_VAR_INIT
  ::fidl::unstable::OwnedEncodedMessage<{{ .WireTransactionalRequest }}, {{ .Transport.Type }}> request_message(
      ::fidl::internal::AllowUnownedInputRef{}, request);
  auto& outgoing = request_message.GetOutgoingMessage();

  {{- if .HasResponse }}
    {{ .IncomingMessageHandleStorageForResponse }} handle_storage;
    ::fidl::unstable::DecodedMessage<{{ .WireTransactionalResponse }}> decoded{
        outgoing.Call(
            client.handle(), handle_storage.view(bytes_.view()),
            deadline.has_value() ? fidl::CallOptions{.deadline = deadline->get()} : fidl::CallOptions{}
        )
    };
    SetStatus(decoded);
    if (ok()) {
      decoded_ = decoded.Take();

      ExtractValueFromDecoded(decoded_.pointer());
    }
  {{- else }}
    outgoing.Write(client.handle());
    SetStatus(outgoing);
  {{- end }}
}

{{- EndifFuchsia -}}
{{- end }}
