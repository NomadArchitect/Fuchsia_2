{{/*
// Copyright 2022 The Fuchsia Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
*/}}

{{- define "Method:Event:WireMessagingHeader" }}
{{- EnsureNamespace "" }}
{{- if .Response.IsResource }}
{{- IfdefFuchsia -}}
{{- end }}

{{- if .HasResponsePayload }}
  template<>
  struct {{ .WireEvent }} final {{- if .HasResponsePayload }} : public {{ .ResponsePayload }}{{ end }} {
  {{- range .ResponseAnonymousChildren }}
    using {{ .ScopedName }} = {{ .FlattenedName }};
  {{- end }}

    {{ if (and .ResponseFlattened .HasResponsePayload) }}
    explicit {{ .WireEvent.Self }}({{ .ResponsePayload }} base) : {{ .ResponsePayload }}(std::move(base)) {}
    {{- end }}

    {{- if .ResponseArgs }}
    explicit {{ .WireEvent.Self }}({{ RenderParams .ResponseArgs }}) : {{ .ResponsePayload }}
    {{- if .ResponseFlattened -}}
      { {{ RenderForwardStructParams .ResponseArgs }} }
    {{- else -}}
      ({{ RenderForwardParams .ResponseArgs }})
    {{- end -}}{}
    {{- end }}
    {{ .WireEvent.Self }}() = default;
  };

template <bool IsRecursive>
struct ::fidl::internal::WireCodingTraits<{{ .WireEvent }}, ::fidl::internal::WireCodingConstraintEmpty, IsRecursive>
  : public WireStructCodingTraitsBase<{{ .WireEvent }}, ::fidl::internal::WireCodingConstraintEmpty, IsRecursive> {
  static constexpr size_t inline_size = {{ .Response.TypeShapeV2.InlineSize }};

  static void Encode(
    internal::WireEncoder* encoder, {{ .WireEvent }}* value, ::fidl::internal::WirePosition position, RecursionDepth<IsRecursive> recursion_depth) {
    fidl::internal::WireCodingTraits<{{ .ResponsePayload }}, ::fidl::internal::WireCodingConstraintEmpty, IsRecursive>::Encode(
      encoder, value, position, recursion_depth);
  }
  static void Decode(
    internal::WireDecoder* decoder, ::fidl::internal::WirePosition position, RecursionDepth<IsRecursive> recursion_depth) {
    fidl::internal::WireCodingTraits<{{ .ResponsePayload }}, ::fidl::internal::WireCodingConstraintEmpty, IsRecursive>::Decode(
      decoder, position, recursion_depth);
  }
};
{{- end }}

template<>
struct {{ .WireTransactionalEvent }} final {
  FIDL_ALIGNDECL
  fidl_message_header_t header;

  {{ if .ResponseArgs }}
    {{ .WireEvent }} body;

    explicit {{ .WireTransactionalEvent.Self }}({{ RenderParams .ResponseArgs }})
    : body({{ .WireEvent }}({{ RenderForwardParams .ResponseArgs }})) {
      _InitHeader();
    }
  {{- end }}

  {{ .WireTransactionalEvent.Self }}() {
    _InitHeader();
  }

  {{- if .Response.IsResource }}
  void _CloseHandles() {
    {{- if .ResponseArgs }}
    body._CloseHandles();
    {{- end }}
  }
  {{- end }}

 private:
  void _InitHeader();
};

template <bool IsRecursive>
struct ::fidl::internal::WireCodingTraits<{{ .WireTransactionalEvent }}, ::fidl::internal::WireCodingConstraintEmpty, IsRecursive>
  : public WireStructCodingTraitsBase<{{ .WireTransactionalEvent }}, ::fidl::internal::WireCodingConstraintEmpty, IsRecursive> {
  static constexpr size_t inline_size = {{ .Response.TypeShapeV2.InlineSize }} + sizeof(fidl_message_header_t);

  static void Encode(
    internal::WireEncoder* encoder, {{ .WireTransactionalEvent }}* value, ::fidl::internal::WirePosition position, RecursionDepth<IsRecursive> recursion_depth) {
    *position.As<fidl_message_header_t>() = value->header;
    {{- if .HasResponsePayload }}
    WireCodingTraits<{{ .WireEvent }}, WireCodingConstraintEmpty, IsRecursive>::Encode(
        encoder, &value->body, position + sizeof(fidl_message_header_t), recursion_depth);
    {{- end }}
  }
  static void Decode(
    internal::WireDecoder* decoder, ::fidl::internal::WirePosition position, RecursionDepth<IsRecursive> recursion_depth) {
    {{- if .HasResponsePayload }}
    WireCodingTraits<{{ .WireEvent }}, WireCodingConstraintEmpty, IsRecursive>::Decode(
        decoder, position + sizeof(fidl_message_header_t), recursion_depth);
    {{- end }}
  }
};
{{- if .Response.IsResource }}
{{- EndifFuchsia -}}
{{- end }}
{{- end }}



{{- define "Method:Event:WireMessagingSource" }}
{{- EnsureNamespace "" }}
{{- if .Response.IsResource }}
{{- IfdefFuchsia -}}
{{- end }}

  void {{ .WireTransactionalEvent }}::_InitHeader() {
    ::fidl::InitTxnHeader(&header, 0, {{ .OrdinalName }}, {{ .DynamicFlagsName }});
  }
{{- if .Response.IsResource }}
{{- EndifFuchsia -}}
{{- end }}
{{- end }}



{{- define "Method:Event:NaturalMessagingHeader" }}
{{- IfdefFuchsia -}}
{{- EnsureNamespace "" }}

template <>
class {{ .NaturalEvent }} final
    {{- if .HasResponsePayload }} : public {{ .ResponsePayload }} {{ end }} {
 public:
  {{- if .HasResponsePayload }}
    using {{ .ResponsePayload }}::{{ .ResponsePayload.Self }};
    {{ .NaturalEvent.Self }}({{ .ResponsePayload }} v) : {{ .ResponsePayload.Self }}(std::move(v)) {}
  {{- end }}
};

{{- EndifFuchsia -}}
{{- end }}



{{- define "Method:Event:NaturalMessagingSource" }}
{{- end }}



{{- define "Method:Event:Traits:TypeConversionsHeader" }}
{{- if .HasResponsePayload }}
template <>
struct WireNaturalConversionTraits<{{ .WireEvent }}, {{ .NaturalEvent }}> {
  static {{ .NaturalEvent }} ToNatural({{ .WireEvent }} src);
  static {{ .WireEvent }} ToWire(fidl::AnyArena& arena, {{ .NaturalEvent }} src);
};

template <>
struct NaturalTypeForWireType<{{ .WireEvent }}> {
    using type = {{ .NaturalEvent }};
};
template <>
struct WireTypeForNaturalType<{{ .NaturalEvent }}> {
    using type = {{ .WireEvent }};
};
{{- end }}
{{- end }}



{{- define "Method:Event:Traits:TypeConversionsSource" }}
{{- if .HasResponsePayload }}
{{ .NaturalEvent }}  WireNaturalConversionTraits<{{ .WireEvent }}, {{ .NaturalEvent }}>::ToNatural({{ .WireEvent }} src) {
  {{- if .HasResponsePayload }}
  return {{ .NaturalEvent }}(
    WireNaturalConversionTraits<{{ .ResponsePayload.Wire }}, {{ .ResponsePayload }}>::ToNatural(std::move(src)));
  {{- else }}
  return {{ .NaturalEvent }}();
  {{- end }}
}

{{ .WireEvent }}  WireNaturalConversionTraits<{{ .WireEvent }}, {{ .NaturalEvent }}>::ToWire(fidl::AnyArena& arena, {{ .NaturalEvent }} src) {
  {{- if .HasResponsePayload }}
  return {{ .WireEvent }}(
    WireNaturalConversionTraits<{{ .ResponsePayload.Wire }}, {{ .ResponsePayload }}>::ToWire(arena, std::move(src)));
  {{- else }}
  return {{ .WireEvent }}();
  {{- end }}
}
{{- end }}
{{- end }}
