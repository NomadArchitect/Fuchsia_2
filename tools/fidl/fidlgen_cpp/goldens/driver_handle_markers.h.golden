// WARNING: This file is machine generated by fidlgen.

#pragma once

#include <lib/fidl/cpp/wire/internal/transport.h>
#include <lib/fidl/cpp/wire/unknown_interactions.h>

namespace test_driverhandle {

class DriverProtocol final {
  DriverProtocol() = delete;

 public:
  using Transport = ::fidl::internal::DriverTransport;

  static constexpr ::fidl::internal::Openness kOpenness = ::fidl::internal::Openness::kClosed;
};

class HandlesInProtocol final {
  HandlesInProtocol() = delete;

 public:
  using Transport = ::fidl::internal::DriverTransport;

  static constexpr ::fidl::internal::Openness kOpenness = ::fidl::internal::Openness::kClosed;
  class SendHandles final {
    SendHandles() = delete;

   public:
    using Protocol = ::test_driverhandle::HandlesInProtocol;
    static constexpr bool kHasRequest = true;
    static constexpr bool kHasRequestBody = true;
    static constexpr bool kHasResponse = false;
    static constexpr bool kHasResponseBody = false;

    static constexpr bool kHasNonEmptyPayload = false;
    static constexpr bool kHasDomainError = false;
    static constexpr bool kHasFrameworkError = false;
  };
};

}  // namespace test_driverhandle
namespace fidl {

template <>
struct IsProtocol<::test_driverhandle::DriverProtocol> : public std::true_type {};

template <>
struct IsProtocol<::test_driverhandle::HandlesInProtocol> : public std::true_type {};

}  // namespace fidl
