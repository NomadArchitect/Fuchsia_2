// WARNING: This file is machine generated by fidlgen.

#include <fidl/test.typealiases/cpp/natural_ostream.h>

std::ostream& fidl::ostream::Formatter<::test_typealiases::ObjType>::Format(std::ostream& os, const ::test_typealiases::ObjType& value) {
  os << "test_typealiases::ObjType";
  os << "::";
  switch (value) {
    case ::test_typealiases::ObjType::kNone:
      os << "kNone";
      break;
    case ::test_typealiases::ObjType::kChannel:
      os << "kChannel";
      break;
    default:
      os << "UNKNOWN(" << static_cast<uint32_t>(value) << ")";
  }
  return os;
}
std::ostream& fidl::ostream::Formatter<::test_typealiases::ExampleOfUseOfAliases>::Format(std::ostream& os, const ::test_typealiases::ExampleOfUseOfAliases& value) {
  os << "test_typealiases::ExampleOfUseOfAliases";
  os << "{ ";
  os << "field_of_u32";
  os << " = " << fidl::ostream::Formatted<uint32_t>(value.field_of_u32()) << ", ";
  os << "field_of_vec_of_strings";
  os << " = " << fidl::ostream::Formatted<::std::vector<::std::string>>(value.field_of_vec_of_strings()) << ", ";
  os << "field_of_vec_of_strings_at_most_nine";
  os << " = " << fidl::ostream::Formatted<::std::vector<::std::string>>(value.field_of_vec_of_strings_at_most_nine()) << ", ";
  os << "field_of_vec_of_strings_at_most_5";
  os << " = " << fidl::ostream::Formatted<::std::vector<::std::string>>(value.field_of_vec_of_strings_at_most_5()) << ", ";
  os << "field_of_vec_of_ref_me_at_most_5";
  os << " = " << fidl::ostream::Formatted<::std::vector<::test_someotherlibrary::ReferenceMe>>(value.field_of_vec_of_ref_me_at_most_5()) << ", ";
  os << "field_of_channel";
  os << " = " << fidl::ostream::Formatted<::zx::channel>(value.field_of_channel()) << ", ";
  os << "field_of_client_end";
  os << " = " << fidl::ostream::Formatted<::zx::channel>(value.field_of_client_end()) << ", ";
  os << "field_of_nullable_client_end";
  os << " = " << fidl::ostream::Formatted<::zx::channel>(value.field_of_nullable_client_end()) << ", ";
  os << "}";
  return os;
}

namespace test_typealiases {

std::ostream& operator<<(std::ostream& os, const ::test_typealiases::ObjType& value) {
  return fidl::ostream::Formatter<::test_typealiases::ObjType>::Format(os, value);
}

std::ostream& operator<<(std::ostream& os, const ::test_typealiases::ExampleOfUseOfAliases& value) {
  return fidl::ostream::Formatter<::test_typealiases::ExampleOfUseOfAliases>::Format(os, value);
}

}  // namespace test_typealiases
