// WARNING: This file is machine generated by fidlgen_cpp.

#include <test/requestflexibleenvelope/cpp/fidl_v2.h>

#ifdef __Fuchsia__

void ::test_requestflexibleenvelope::
    ProtocolRequestStrictResponseFlexibleRequest::EncodeWithoutValidating(
        ::fidl::Encoder& encoder, size_t offset) {
  encoder.Alloc(::fidl::EncodingInlineSize<
                ::test_requestflexibleenvelope::
                    ProtocolRequestStrictResponseFlexibleRequest,
                ::fidl::Encoder>(&encoder));
  ::fidl::CodingTraits<
      ::test_requestflexibleenvelope::
          ProtocolRequestStrictResponseFlexibleRequest>::Encode(&encoder, this,
                                                                offset);
}

::test_requestflexibleenvelope::ProtocolRequestStrictResponseFlexibleRequest::
    ProtocolRequestStrictResponseFlexibleRequest(::fidl::Decoder& decoder)
    : storage_({::fidl::DecodeAs<::test_requestflexibleenvelope::StrictFoo>(
          &decoder, 0)}) {}
#endif  // __Fuchsia__

#ifdef __Fuchsia__

void ::test_requestflexibleenvelope::
    ProtocolRequestFlexibleResponseStrictTopResponse::EncodeWithoutValidating(
        ::fidl::Encoder& encoder, size_t offset) {
  encoder.Alloc(::fidl::EncodingInlineSize<
                ::test_requestflexibleenvelope::
                    ProtocolRequestFlexibleResponseStrictTopResponse,
                ::fidl::Encoder>(&encoder));
  ::fidl::CodingTraits<
      ::test_requestflexibleenvelope::
          ProtocolRequestFlexibleResponseStrictTopResponse>::Encode(&encoder,
                                                                    this,
                                                                    offset);
}

::test_requestflexibleenvelope::
    ProtocolRequestFlexibleResponseStrictTopResponse::
        ProtocolRequestFlexibleResponseStrictTopResponse(
            ::fidl::Decoder& decoder)
    : storage_({::fidl::DecodeAs<::test_requestflexibleenvelope::StrictFoo>(
          &decoder, 0)}) {}
#endif  // __Fuchsia__

#ifdef __Fuchsia__

void ::test_requestflexibleenvelope::
    ProtocolRequestStrictResponseFlexibleTopResponse::EncodeWithoutValidating(
        ::fidl::Encoder& encoder, size_t offset) {
  encoder.Alloc(::fidl::EncodingInlineSize<
                ::test_requestflexibleenvelope::
                    ProtocolRequestStrictResponseFlexibleTopResponse,
                ::fidl::Encoder>(&encoder));
  ::fidl::CodingTraits<
      ::test_requestflexibleenvelope::
          ProtocolRequestStrictResponseFlexibleTopResponse>::Encode(&encoder,
                                                                    this,
                                                                    offset);
}

::test_requestflexibleenvelope::
    ProtocolRequestStrictResponseFlexibleTopResponse::
        ProtocolRequestStrictResponseFlexibleTopResponse(
            ::fidl::Decoder& decoder)
    : storage_({::fidl::DecodeAs<::test_requestflexibleenvelope::FlexibleFoo>(
          &decoder, 0)}) {}
#endif  // __Fuchsia__

#ifdef __Fuchsia__

void ::test_requestflexibleenvelope::
    ProtocolRequestFlexibleResponseStrictRequest::EncodeWithoutValidating(
        ::fidl::Encoder& encoder, size_t offset) {
  encoder.Alloc(::fidl::EncodingInlineSize<
                ::test_requestflexibleenvelope::
                    ProtocolRequestFlexibleResponseStrictRequest,
                ::fidl::Encoder>(&encoder));
  ::fidl::CodingTraits<
      ::test_requestflexibleenvelope::
          ProtocolRequestFlexibleResponseStrictRequest>::Encode(&encoder, this,
                                                                offset);
}

::test_requestflexibleenvelope::ProtocolRequestFlexibleResponseStrictRequest::
    ProtocolRequestFlexibleResponseStrictRequest(::fidl::Decoder& decoder)
    : storage_({::fidl::DecodeAs<::test_requestflexibleenvelope::FlexibleFoo>(
          &decoder, 0)}) {}
#endif  // __Fuchsia__

namespace test_requestflexibleenvelope {
[[maybe_unused]] constexpr inline uint64_t
    kProtocol_RequestStrictResponseFlexible_Ordinal = 700529454616207123lu;
[[maybe_unused]] constexpr inline uint64_t
    kProtocol_RequestFlexibleResponseStrict_Ordinal = 5191655763393883319lu;

#ifdef __Fuchsia__
}  // namespace test_requestflexibleenvelope
void fidl::internal::NaturalClientImpl<
    ::test_requestflexibleenvelope::Protocol>::
    RequestStrictResponseFlexible(
        ::test_requestflexibleenvelope::
            ProtocolRequestStrictResponseFlexibleRequest&& payload,
        ::fidl::ClientCallback<::test_requestflexibleenvelope::Protocol::
                                   RequestStrictResponseFlexible>&& _callback)
        const {
  ::fidl::Encoder _encoder{::test_requestflexibleenvelope::
                               kProtocol_RequestStrictResponseFlexible_Ordinal};
  return messenger().TwoWay(
      &::test::requestflexibleenvelope::_internal::
          test_requestflexibleenvelope_ProtocolRequestStrictResponseFlexibleRequestMessageTable,
      ::fidl::internal::EncodeTransactionalMessageWithoutValidating(
          _encoder, std::move(payload)),
      ::fidl::internal::MakeResponseContext<
          ::fidl::Response<::test_requestflexibleenvelope::Protocol::
                               RequestStrictResponseFlexible>,
          ::fidl::ClientCallback<::test_requestflexibleenvelope::Protocol::
                                     RequestStrictResponseFlexible>>(
          ::test_requestflexibleenvelope::
              kProtocol_RequestStrictResponseFlexible_Ordinal,
          std::move(_callback)));
}
void fidl::internal::NaturalClientImpl<
    ::test_requestflexibleenvelope::Protocol>::
    RequestStrictResponseFlexible(
        ::test_requestflexibleenvelope::
            ProtocolRequestStrictResponseFlexibleRequest&& payload,
        ::fidl::ClientResponseCallback<
            ::test_requestflexibleenvelope::Protocol::
                RequestStrictResponseFlexible>&& _callback) const {
  ::fidl::Encoder _encoder{::test_requestflexibleenvelope::
                               kProtocol_RequestStrictResponseFlexible_Ordinal};
  return messenger().TwoWay(
      &::test::requestflexibleenvelope::_internal::
          test_requestflexibleenvelope_ProtocolRequestStrictResponseFlexibleRequestMessageTable,
      ::fidl::internal::EncodeTransactionalMessageWithoutValidating(
          _encoder, std::move(payload)),
      ::fidl::internal::MakeResponseContext<
          ::fidl::Response<::test_requestflexibleenvelope::Protocol::
                               RequestStrictResponseFlexible>,
          ::fidl::ClientResponseCallback<
              ::test_requestflexibleenvelope::Protocol::
                  RequestStrictResponseFlexible>>(
          ::test_requestflexibleenvelope::
              kProtocol_RequestStrictResponseFlexible_Ordinal,
          std::move(_callback)));
}

void fidl::internal::NaturalClientImpl<
    ::test_requestflexibleenvelope::Protocol>::
    RequestFlexibleResponseStrict(
        ::test_requestflexibleenvelope::
            ProtocolRequestFlexibleResponseStrictRequest&& payload,
        ::fidl::ClientCallback<::test_requestflexibleenvelope::Protocol::
                                   RequestFlexibleResponseStrict>&& _callback)
        const {
  ::fidl::Encoder _encoder{::test_requestflexibleenvelope::
                               kProtocol_RequestFlexibleResponseStrict_Ordinal};
  return messenger().TwoWay(
      &::test::requestflexibleenvelope::_internal::
          test_requestflexibleenvelope_ProtocolRequestFlexibleResponseStrictRequestMessageTable,
      ::fidl::internal::EncodeTransactionalMessageWithoutValidating(
          _encoder, std::move(payload)),
      ::fidl::internal::MakeResponseContext<
          ::fidl::Response<::test_requestflexibleenvelope::Protocol::
                               RequestFlexibleResponseStrict>,
          ::fidl::ClientCallback<::test_requestflexibleenvelope::Protocol::
                                     RequestFlexibleResponseStrict>>(
          ::test_requestflexibleenvelope::
              kProtocol_RequestFlexibleResponseStrict_Ordinal,
          std::move(_callback)));
}
void fidl::internal::NaturalClientImpl<
    ::test_requestflexibleenvelope::Protocol>::
    RequestFlexibleResponseStrict(
        ::test_requestflexibleenvelope::
            ProtocolRequestFlexibleResponseStrictRequest&& payload,
        ::fidl::ClientResponseCallback<
            ::test_requestflexibleenvelope::Protocol::
                RequestFlexibleResponseStrict>&& _callback) const {
  ::fidl::Encoder _encoder{::test_requestflexibleenvelope::
                               kProtocol_RequestFlexibleResponseStrict_Ordinal};
  return messenger().TwoWay(
      &::test::requestflexibleenvelope::_internal::
          test_requestflexibleenvelope_ProtocolRequestFlexibleResponseStrictRequestMessageTable,
      ::fidl::internal::EncodeTransactionalMessageWithoutValidating(
          _encoder, std::move(payload)),
      ::fidl::internal::MakeResponseContext<
          ::fidl::Response<::test_requestflexibleenvelope::Protocol::
                               RequestFlexibleResponseStrict>,
          ::fidl::ClientResponseCallback<
              ::test_requestflexibleenvelope::Protocol::
                  RequestFlexibleResponseStrict>>(
          ::test_requestflexibleenvelope::
              kProtocol_RequestFlexibleResponseStrict_Ordinal,
          std::move(_callback)));
}
namespace test_requestflexibleenvelope {
#endif  // __Fuchsia__

}  // namespace test_requestflexibleenvelope
#ifdef __Fuchsia__

std::optional<::fidl::UnbindInfo> fidl::internal::NaturalEventDispatcher<
    ::test_requestflexibleenvelope::Protocol>::
    DispatchEvent(
        ::fidl::IncomingMessage& msg,
        ::fidl::internal::IncomingTransportContext transport_context) {
  return ::fidl::UnbindInfo::UnknownOrdinal();
}
#endif  // __Fuchsia__
