// WARNING: This file is machine generated by fidlgen_cpp.

#include <fidl/test/errorsyntax/cpp/fidl_v2.h>

#ifdef __Fuchsia__

void ::fidl_test_errorsyntax::
    ExampleUseOfErrorSyntax_CallWhichMayFail_Response::EncodeWithoutValidating(
        ::fidl::Encoder& encoder, size_t offset) {
  encoder.Alloc(::fidl::EncodingInlineSize<
                ::fidl_test_errorsyntax::
                    ExampleUseOfErrorSyntax_CallWhichMayFail_Response,
                ::fidl::Encoder>(&encoder));
  ::fidl::CodingTraits<
      ::fidl_test_errorsyntax::
          ExampleUseOfErrorSyntax_CallWhichMayFail_Response>::Encode(&encoder,
                                                                     this,
                                                                     offset);
}

::fidl_test_errorsyntax::ExampleUseOfErrorSyntax_CallWhichMayFail_Response::
    ExampleUseOfErrorSyntax_CallWhichMayFail_Response(::fidl::Decoder& decoder)
    : storage_({::fidl::DecodeAs<int64_t>(&decoder, 0)}) {}
#endif  // __Fuchsia__

#ifdef __Fuchsia__

void ::fidl_test_errorsyntax::
    ExampleUseOfErrorSyntaxCallWhichMayFailTopResponse::EncodeWithoutValidating(
        ::fidl::Encoder& encoder, size_t offset) {
  encoder.Alloc(::fidl::EncodingInlineSize<
                ::fidl_test_errorsyntax::
                    ExampleUseOfErrorSyntaxCallWhichMayFailTopResponse,
                ::fidl::Encoder>(&encoder));
  ::fidl::CodingTraits<
      ::fidl_test_errorsyntax::
          ExampleUseOfErrorSyntaxCallWhichMayFailTopResponse>::Encode(&encoder,
                                                                      this,
                                                                      offset);
}

::fidl_test_errorsyntax::ExampleUseOfErrorSyntaxCallWhichMayFailTopResponse::
    ExampleUseOfErrorSyntaxCallWhichMayFailTopResponse(::fidl::Decoder& decoder)
    : storage_({::fidl::DecodeAs<
          ::fidl_test_errorsyntax::
              ExampleUseOfErrorSyntax_CallWhichMayFail_Result>(&decoder, 0)}) {}
#endif  // __Fuchsia__

#ifdef __Fuchsia__

void ::fidl_test_errorsyntax::ExampleUseOfErrorSyntaxCallWhichMayFailRequest::
    EncodeWithoutValidating(::fidl::Encoder& encoder, size_t offset) {
  encoder.Alloc(::fidl::EncodingInlineSize<
                ::fidl_test_errorsyntax::
                    ExampleUseOfErrorSyntaxCallWhichMayFailRequest,
                ::fidl::Encoder>(&encoder));
  ::fidl::CodingTraits<
      ::fidl_test_errorsyntax::ExampleUseOfErrorSyntaxCallWhichMayFailRequest>::
      Encode(&encoder, this, offset);
}

::fidl_test_errorsyntax::ExampleUseOfErrorSyntaxCallWhichMayFailRequest::
    ExampleUseOfErrorSyntaxCallWhichMayFailRequest(::fidl::Decoder& decoder)
    : storage_({::fidl::DecodeAs<::std::string>(&decoder, 0)}) {}
#endif  // __Fuchsia__

namespace fidl_test_errorsyntax {
[[maybe_unused]] constexpr inline uint64_t
    kExampleUseOfErrorSyntax_ComposedCallWhichMayFail_Ordinal =
        8210161374538322484lu;
[[maybe_unused]] constexpr inline uint64_t
    kExampleUseOfErrorSyntax_CallWhichMayFail_Ordinal = 7435809829353441431lu;

#ifdef __Fuchsia__
}  // namespace fidl_test_errorsyntax
void fidl::internal::NaturalClientImpl<
    ::fidl_test_errorsyntax::ExampleUseOfErrorSyntax>::
    ComposedCallWhichMayFail(
        ::fidl_test_errorsyntax_parent::
            ParentUsesErrorSyntaxComposedCallWhichMayFailRequest&& payload,
        ::fidl::ClientCallback<
            ::fidl_test_errorsyntax::ExampleUseOfErrorSyntax::
                ComposedCallWhichMayFail>&& _callback) const {
  ::fidl::Encoder _encoder{
      ::fidl_test_errorsyntax::
          kExampleUseOfErrorSyntax_ComposedCallWhichMayFail_Ordinal};
  return messenger().TwoWay(
      &::fidl::test::errorsyntax::_internal::
          fidl_test_errorsyntax_ExampleUseOfErrorSyntaxComposedCallWhichMayFailRequestMessageTable,
      ::fidl::internal::EncodeTransactionalMessageWithoutValidating(
          _encoder, std::move(payload)),
      ::fidl::internal::MakeResponseContext<
          ::fidl::Response<::fidl_test_errorsyntax::ExampleUseOfErrorSyntax::
                               ComposedCallWhichMayFail>,
          ::fidl::ClientCallback<
              ::fidl_test_errorsyntax::ExampleUseOfErrorSyntax::
                  ComposedCallWhichMayFail>>(
          ::fidl_test_errorsyntax::
              kExampleUseOfErrorSyntax_ComposedCallWhichMayFail_Ordinal,
          std::move(_callback)));
}
void fidl::internal::NaturalClientImpl<
    ::fidl_test_errorsyntax::ExampleUseOfErrorSyntax>::
    ComposedCallWhichMayFail(
        ::fidl_test_errorsyntax_parent::
            ParentUsesErrorSyntaxComposedCallWhichMayFailRequest&& payload,
        ::fidl::ClientResponseCallback<
            ::fidl_test_errorsyntax::ExampleUseOfErrorSyntax::
                ComposedCallWhichMayFail>&& _callback) const {
  ::fidl::Encoder _encoder{
      ::fidl_test_errorsyntax::
          kExampleUseOfErrorSyntax_ComposedCallWhichMayFail_Ordinal};
  return messenger().TwoWay(
      &::fidl::test::errorsyntax::_internal::
          fidl_test_errorsyntax_ExampleUseOfErrorSyntaxComposedCallWhichMayFailRequestMessageTable,
      ::fidl::internal::EncodeTransactionalMessageWithoutValidating(
          _encoder, std::move(payload)),
      ::fidl::internal::MakeResponseContext<
          ::fidl::Response<::fidl_test_errorsyntax::ExampleUseOfErrorSyntax::
                               ComposedCallWhichMayFail>,
          ::fidl::ClientResponseCallback<
              ::fidl_test_errorsyntax::ExampleUseOfErrorSyntax::
                  ComposedCallWhichMayFail>>(
          ::fidl_test_errorsyntax::
              kExampleUseOfErrorSyntax_ComposedCallWhichMayFail_Ordinal,
          std::move(_callback)));
}

void fidl::internal::NaturalClientImpl<
    ::fidl_test_errorsyntax::ExampleUseOfErrorSyntax>::
    CallWhichMayFail(
        ::fidl_test_errorsyntax::
            ExampleUseOfErrorSyntaxCallWhichMayFailRequest&& payload,
        ::fidl::ClientCallback<::fidl_test_errorsyntax::
                                   ExampleUseOfErrorSyntax::CallWhichMayFail>&&
            _callback) const {
  ::fidl::Encoder _encoder{
      ::fidl_test_errorsyntax::
          kExampleUseOfErrorSyntax_CallWhichMayFail_Ordinal};
  return messenger().TwoWay(
      &::fidl::test::errorsyntax::_internal::
          fidl_test_errorsyntax_ExampleUseOfErrorSyntaxCallWhichMayFailRequestMessageTable,
      ::fidl::internal::EncodeTransactionalMessageWithoutValidating(
          _encoder, std::move(payload)),
      ::fidl::internal::MakeResponseContext<
          ::fidl::Response<::fidl_test_errorsyntax::ExampleUseOfErrorSyntax::
                               CallWhichMayFail>,
          ::fidl::ClientCallback<
              ::fidl_test_errorsyntax::ExampleUseOfErrorSyntax::
                  CallWhichMayFail>>(
          ::fidl_test_errorsyntax::
              kExampleUseOfErrorSyntax_CallWhichMayFail_Ordinal,
          std::move(_callback)));
}
void fidl::internal::NaturalClientImpl<
    ::fidl_test_errorsyntax::ExampleUseOfErrorSyntax>::
    CallWhichMayFail(
        ::fidl_test_errorsyntax::
            ExampleUseOfErrorSyntaxCallWhichMayFailRequest&& payload,
        ::fidl::ClientResponseCallback<
            ::fidl_test_errorsyntax::ExampleUseOfErrorSyntax::
                CallWhichMayFail>&& _callback) const {
  ::fidl::Encoder _encoder{
      ::fidl_test_errorsyntax::
          kExampleUseOfErrorSyntax_CallWhichMayFail_Ordinal};
  return messenger().TwoWay(
      &::fidl::test::errorsyntax::_internal::
          fidl_test_errorsyntax_ExampleUseOfErrorSyntaxCallWhichMayFailRequestMessageTable,
      ::fidl::internal::EncodeTransactionalMessageWithoutValidating(
          _encoder, std::move(payload)),
      ::fidl::internal::MakeResponseContext<
          ::fidl::Response<::fidl_test_errorsyntax::ExampleUseOfErrorSyntax::
                               CallWhichMayFail>,
          ::fidl::ClientResponseCallback<
              ::fidl_test_errorsyntax::ExampleUseOfErrorSyntax::
                  CallWhichMayFail>>(
          ::fidl_test_errorsyntax::
              kExampleUseOfErrorSyntax_CallWhichMayFail_Ordinal,
          std::move(_callback)));
}
namespace fidl_test_errorsyntax {
#endif  // __Fuchsia__

}  // namespace fidl_test_errorsyntax
