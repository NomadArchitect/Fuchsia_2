// WARNING: This file is machine generated by fidlgen_cpp.

#include <test/errorsyntax/cpp/fidl_v2.h>

namespace test_errorsyntax {
[[maybe_unused]] constexpr inline uint64_t
    kExampleUseOfErrorSyntax_ComposedCallWhichMayFail_Ordinal =
        3565108794310607393lu;
[[maybe_unused]] constexpr inline uint64_t
    kExampleUseOfErrorSyntax_CallWhichMayFail_Ordinal = 3757408930698888354lu;

#ifdef __Fuchsia__
}  // namespace test_errorsyntax
void fidl::internal::NaturalClientImpl<
    ::test_errorsyntax::ExampleUseOfErrorSyntax>::
    ComposedCallWhichMayFail(
        ::test_errorsyntax_parent::
            ParentUsesErrorSyntaxComposedCallWhichMayFailRequest&& payload,
        ::fidl::ClientCallback<::test_errorsyntax::ExampleUseOfErrorSyntax::
                                   ComposedCallWhichMayFail>&& _callback)
        const {
  ::fidl::Encoder _encoder{
      ::test_errorsyntax::
          kExampleUseOfErrorSyntax_ComposedCallWhichMayFail_Ordinal};
  return messenger().TwoWay(
      &::test_errorsyntax::
          test_errorsyntax_ExampleUseOfErrorSyntaxComposedCallWhichMayFailRequestMessageTable,
      ::fidl::internal::EncodeTransactionalMessageWithoutValidating(
          _encoder, std::move(payload)),
      ::fidl::internal::MakeResponseContext<
          ::fidl::Response<::test_errorsyntax::ExampleUseOfErrorSyntax::
                               ComposedCallWhichMayFail>,
          ::fidl::ClientCallback<::test_errorsyntax::ExampleUseOfErrorSyntax::
                                     ComposedCallWhichMayFail>>(
          ::test_errorsyntax::
              kExampleUseOfErrorSyntax_ComposedCallWhichMayFail_Ordinal,
          std::move(_callback)));
}
void fidl::internal::NaturalClientImpl<
    ::test_errorsyntax::ExampleUseOfErrorSyntax>::
    ComposedCallWhichMayFail(
        ::test_errorsyntax_parent::
            ParentUsesErrorSyntaxComposedCallWhichMayFailRequest&& payload,
        ::fidl::ClientResponseCallback<
            ::test_errorsyntax::ExampleUseOfErrorSyntax::
                ComposedCallWhichMayFail>&& _callback) const {
  ::fidl::Encoder _encoder{
      ::test_errorsyntax::
          kExampleUseOfErrorSyntax_ComposedCallWhichMayFail_Ordinal};
  return messenger().TwoWay(
      &::test_errorsyntax::
          test_errorsyntax_ExampleUseOfErrorSyntaxComposedCallWhichMayFailRequestMessageTable,
      ::fidl::internal::EncodeTransactionalMessageWithoutValidating(
          _encoder, std::move(payload)),
      ::fidl::internal::MakeResponseContext<
          ::fidl::Response<::test_errorsyntax::ExampleUseOfErrorSyntax::
                               ComposedCallWhichMayFail>,
          ::fidl::ClientResponseCallback<
              ::test_errorsyntax::ExampleUseOfErrorSyntax::
                  ComposedCallWhichMayFail>>(
          ::test_errorsyntax::
              kExampleUseOfErrorSyntax_ComposedCallWhichMayFail_Ordinal,
          std::move(_callback)));
}

void fidl::internal::NaturalClientImpl<
    ::test_errorsyntax::ExampleUseOfErrorSyntax>::
    CallWhichMayFail(
        ::test_errorsyntax::ExampleUseOfErrorSyntaxCallWhichMayFailRequest&&
            payload,
        ::fidl::ClientCallback<
            ::test_errorsyntax::ExampleUseOfErrorSyntax::CallWhichMayFail>&&
            _callback) const {
  ::fidl::Encoder _encoder{
      ::test_errorsyntax::kExampleUseOfErrorSyntax_CallWhichMayFail_Ordinal};
  return messenger().TwoWay(
      &::test_errorsyntax::
          test_errorsyntax_ExampleUseOfErrorSyntaxCallWhichMayFailRequestMessageTable,
      ::fidl::internal::EncodeTransactionalMessageWithoutValidating(
          _encoder, std::move(payload)),
      ::fidl::internal::MakeResponseContext<
          ::fidl::Response<
              ::test_errorsyntax::ExampleUseOfErrorSyntax::CallWhichMayFail>,
          ::fidl::ClientCallback<
              ::test_errorsyntax::ExampleUseOfErrorSyntax::CallWhichMayFail>>(
          ::test_errorsyntax::kExampleUseOfErrorSyntax_CallWhichMayFail_Ordinal,
          std::move(_callback)));
}
void fidl::internal::NaturalClientImpl<
    ::test_errorsyntax::ExampleUseOfErrorSyntax>::
    CallWhichMayFail(
        ::test_errorsyntax::ExampleUseOfErrorSyntaxCallWhichMayFailRequest&&
            payload,
        ::fidl::ClientResponseCallback<
            ::test_errorsyntax::ExampleUseOfErrorSyntax::CallWhichMayFail>&&
            _callback) const {
  ::fidl::Encoder _encoder{
      ::test_errorsyntax::kExampleUseOfErrorSyntax_CallWhichMayFail_Ordinal};
  return messenger().TwoWay(
      &::test_errorsyntax::
          test_errorsyntax_ExampleUseOfErrorSyntaxCallWhichMayFailRequestMessageTable,
      ::fidl::internal::EncodeTransactionalMessageWithoutValidating(
          _encoder, std::move(payload)),
      ::fidl::internal::MakeResponseContext<
          ::fidl::Response<
              ::test_errorsyntax::ExampleUseOfErrorSyntax::CallWhichMayFail>,
          ::fidl::ClientResponseCallback<
              ::test_errorsyntax::ExampleUseOfErrorSyntax::CallWhichMayFail>>(
          ::test_errorsyntax::kExampleUseOfErrorSyntax_CallWhichMayFail_Ordinal,
          std::move(_callback)));
}
namespace test_errorsyntax {
#endif  // __Fuchsia__

}  // namespace test_errorsyntax
#ifdef __Fuchsia__

std::optional<::fidl::UnbindInfo> fidl::internal::NaturalEventDispatcher<
    ::test_errorsyntax::ExampleUseOfErrorSyntax>::
    DispatchEvent(
        ::fidl::IncomingMessage& msg,
        ::fidl::internal::IncomingTransportContext transport_context) {
  return ::fidl::UnbindInfo::UnknownOrdinal();
}
#endif  // __Fuchsia__
