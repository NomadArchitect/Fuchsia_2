// WARNING: This file is machine generated by fidlgen_cpp.

#pragma once

#include <fidl/test.error/cpp/wire.h>
#include <lib/fidl/cpp/client.h>
#include <lib/fidl/cpp/internal/codable_base.h>
#include <lib/fidl/cpp/internal/message_extensions.h>
#include <lib/fidl/cpp/internal/natural_client_messenger.h>
#include <lib/fidl/cpp/natural_types.h>
#include <lib/fidl/cpp/unified_messaging.h>
#include <test/error/cpp/natural_types.h>

namespace test_error {
class Example_foo_Response;

class ExampleFooTopResponse;

class ExampleFooRequest;

using Example_foo_Result = ::test::error::Example_foo_Result;

}  // namespace test_error
template <>
struct ::fidl::internal::DesignatedInitializationProxy<
    ::test_error::Example_foo_Response>
    final {
 public:
  int64_t y = {};
};

namespace test_error {
class Example_foo_Response final
    : public ::fidl::internal::CodableBase<Example_foo_Response> {
 private:
  friend ::fidl::internal::CodableBase<Example_foo_Response>;
  Example_foo_Response(::fidl::Decoder& decoder);
  template <typename Payload>
  friend auto ::fidl::internal::EncodeTransactionalMessageWithoutValidating(
      ::fidl::Encoder& encoder, Payload&& payload)
      -> ::fidl::HLCPPOutgoingMessage;
  void EncodeWithoutValidating(::fidl::Encoder& encoder, size_t offset);

 public:
  Example_foo_Response() = default;
  Example_foo_Response(int64_t y) : storage_({y}) {}
  Example_foo_Response(::fidl::internal::DesignatedInitializationProxy<
                       ::test_error::Example_foo_Response>
                           storage)
      : storage_(std::move(storage)) {}
  ~Example_foo_Response() = default;
  Example_foo_Response(Example_foo_Response&&) noexcept = default;
  Example_foo_Response& operator=(Example_foo_Response&&) noexcept = default;

  const int64_t& y() const { return storage_.y; }

  int64_t& y() { return storage_.y; }

  Example_foo_Response& set_y(int64_t _value) {
    storage_.y = std::move(_value);
    return *this;
  }

 private:
  friend struct ::fidl::CodingTraits<::test_error::Example_foo_Response>;

  ::fidl::internal::DesignatedInitializationProxy<
      ::test_error::Example_foo_Response>
      storage_ = {};
};

}  // namespace test_error
template <>
struct ::fidl::internal::DesignatedInitializationProxy<
    ::test_error::ExampleFooTopResponse>
    final {
 public:
  ::test_error::Example_foo_Result result = {};
};

namespace test_error {
class ExampleFooTopResponse final
    : public ::fidl::internal::CodableBase<ExampleFooTopResponse> {
 private:
  friend ::fidl::internal::CodableBase<ExampleFooTopResponse>;
  ExampleFooTopResponse(::fidl::Decoder& decoder);
  template <typename Payload>
  friend auto ::fidl::internal::EncodeTransactionalMessageWithoutValidating(
      ::fidl::Encoder& encoder, Payload&& payload)
      -> ::fidl::HLCPPOutgoingMessage;
  void EncodeWithoutValidating(::fidl::Encoder& encoder, size_t offset);

 public:
  ExampleFooTopResponse() = default;
  ExampleFooTopResponse(::test_error::Example_foo_Result result)
      : storage_({std::move(result)}) {}
  ExampleFooTopResponse(::fidl::internal::DesignatedInitializationProxy<
                        ::test_error::ExampleFooTopResponse>
                            storage)
      : storage_(std::move(storage)) {}
  ~ExampleFooTopResponse() = default;
  ExampleFooTopResponse(ExampleFooTopResponse&&) noexcept = default;
  ExampleFooTopResponse& operator=(ExampleFooTopResponse&&) noexcept = default;

  const ::test_error::Example_foo_Result& result() const {
    return storage_.result;
  }

  ::test_error::Example_foo_Result& result() { return storage_.result; }

  ExampleFooTopResponse& set_result(::test_error::Example_foo_Result _value) {
    storage_.result = std::move(_value);
    return *this;
  }

 private:
  friend struct ::fidl::CodingTraits<::test_error::ExampleFooTopResponse>;

  ::fidl::internal::DesignatedInitializationProxy<
      ::test_error::ExampleFooTopResponse>
      storage_ = {};
};

}  // namespace test_error
template <>
struct ::fidl::internal::DesignatedInitializationProxy<
    ::test_error::ExampleFooRequest>
    final {
 public:
  ::std::string s = {};
};

namespace test_error {
class ExampleFooRequest final
    : public ::fidl::internal::CodableBase<ExampleFooRequest> {
 private:
  friend ::fidl::internal::CodableBase<ExampleFooRequest>;
  ExampleFooRequest(::fidl::Decoder& decoder);
  template <typename Payload>
  friend auto ::fidl::internal::EncodeTransactionalMessageWithoutValidating(
      ::fidl::Encoder& encoder, Payload&& payload)
      -> ::fidl::HLCPPOutgoingMessage;
  void EncodeWithoutValidating(::fidl::Encoder& encoder, size_t offset);

 public:
  ExampleFooRequest() = default;
  ExampleFooRequest(::std::string s) : storage_({std::move(s)}) {}
  ExampleFooRequest(::fidl::internal::DesignatedInitializationProxy<
                    ::test_error::ExampleFooRequest>
                        storage)
      : storage_(std::move(storage)) {}
  ~ExampleFooRequest() = default;
  ExampleFooRequest(ExampleFooRequest&&) noexcept = default;
  ExampleFooRequest& operator=(ExampleFooRequest&&) noexcept = default;

  const ::std::string& s() const { return storage_.s; }

  ::std::string& s() { return storage_.s; }

  ExampleFooRequest& set_s(::std::string _value) {
    storage_.s = std::move(_value);
    return *this;
  }

 private:
  friend struct ::fidl::CodingTraits<::test_error::ExampleFooRequest>;

  ::fidl::internal::DesignatedInitializationProxy<
      ::test_error::ExampleFooRequest>
      storage_ = {};
};

}  // namespace test_error
namespace fidl {
#ifdef __Fuchsia__
extern "C" const fidl_type_t test_error_Example_foo_ResponseTable;

template <>
struct IsFidlType<::test_error::Example_foo_Response> : public std::true_type {
};

template <>
struct ::fidl::internal::TypeTraits<::test_error::Example_foo_Response> final {
 public:
  static constexpr const fidl_type_t* kCodingTable =
      &test_error_Example_foo_ResponseTable;
};

template <>
struct CodingTraits<::test_error::Example_foo_Response> {
  static constexpr size_t inline_size_v1_no_ee = 8;
  static constexpr size_t inline_size_v2 = 8;

  template <class EncoderImpl>
  static void Encode(
      EncoderImpl* encoder, ::test_error::Example_foo_Response* value,
      size_t offset,
      cpp17::optional<HandleInformation> maybe_handle_info = cpp17::nullopt) {
    [[maybe_unused]] uint32_t field_offset;
    field_offset =
        encoder->wire_format() == ::fidl::internal::WireFormatVersion::kV1 ? 0
                                                                           : 0;
    ::fidl::Encode(encoder, &value->storage_.y, offset + field_offset);
  }

  template <typename DecoderImpl>
  static void Decode(DecoderImpl* decoder,
                     ::test_error::Example_foo_Response* value, size_t offset) {
    ::fidl::Decode(decoder, &value->storage_.y, offset + 0);
  }
};
#endif  // __Fuchsia__

#ifdef __Fuchsia__
extern "C" const fidl_type_t test_error_ExampleFooTopResponseTable;

template <>
struct IsFidlType<::test_error::ExampleFooTopResponse> : public std::true_type {
};

template <>
struct ::fidl::internal::TypeTraits<::test_error::ExampleFooTopResponse> final {
 public:
  static constexpr const fidl_type_t* kCodingTable =
      &test_error_ExampleFooTopResponseTable;
};

template <>
struct CodingTraits<::test_error::ExampleFooTopResponse> {
  static constexpr size_t inline_size_v1_no_ee = 24;
  static constexpr size_t inline_size_v2 = 16;

  template <class EncoderImpl>
  static void Encode(
      EncoderImpl* encoder, ::test_error::ExampleFooTopResponse* value,
      size_t offset,
      cpp17::optional<HandleInformation> maybe_handle_info = cpp17::nullopt) {
    [[maybe_unused]] uint32_t field_offset;
    field_offset =
        encoder->wire_format() == ::fidl::internal::WireFormatVersion::kV1 ? 0
                                                                           : 0;
    ::fidl::Encode(encoder, &value->storage_.result, offset + field_offset);
  }

  template <typename DecoderImpl>
  static void Decode(DecoderImpl* decoder,
                     ::test_error::ExampleFooTopResponse* value,
                     size_t offset) {
    ::fidl::Decode(decoder, &value->storage_.result, offset + 0);
  }
};
#endif  // __Fuchsia__

#ifdef __Fuchsia__
extern "C" const fidl_type_t test_error_ExampleFooRequestTable;

template <>
struct IsFidlType<::test_error::ExampleFooRequest> : public std::true_type {};

template <>
struct ::fidl::internal::TypeTraits<::test_error::ExampleFooRequest> final {
 public:
  static constexpr const fidl_type_t* kCodingTable =
      &test_error_ExampleFooRequestTable;
};

template <>
struct CodingTraits<::test_error::ExampleFooRequest> {
  static constexpr size_t inline_size_v1_no_ee = 16;
  static constexpr size_t inline_size_v2 = 16;

  template <class EncoderImpl>
  static void Encode(
      EncoderImpl* encoder, ::test_error::ExampleFooRequest* value,
      size_t offset,
      cpp17::optional<HandleInformation> maybe_handle_info = cpp17::nullopt) {
    [[maybe_unused]] uint32_t field_offset;
    field_offset =
        encoder->wire_format() == ::fidl::internal::WireFormatVersion::kV1 ? 0
                                                                           : 0;
    ::fidl::Encode(encoder, &value->storage_.s, offset + field_offset);
  }

  template <typename DecoderImpl>
  static void Decode(DecoderImpl* decoder,
                     ::test_error::ExampleFooRequest* value, size_t offset) {
    ::fidl::Decode(decoder, &value->storage_.s, offset + 0);
  }
};
#endif  // __Fuchsia__

#ifdef __Fuchsia__
}  // namespace fidl

template <>
class ::fidl::Response<::test_error::Example::Foo> final
    : public ::fidl::internal::MessageBase<
          ::fidl::Response<::test_error::Example::Foo>> {
 public:
  Response() = default;
  ~Response() = default;
  Response(Response&&) noexcept = default;
  Response& operator=(Response&&) noexcept = default;
  Response(::test_error::ExampleFooTopResponse payload)
      : payload_(std::move(payload)) {}
  ::test_error::ExampleFooTopResponse* operator->() { return &payload_; }
  const ::test_error::ExampleFooTopResponse* operator->() const {
    return &payload_;
  }
  ::test_error::ExampleFooTopResponse& operator*() { return payload_; }
  const ::test_error::ExampleFooTopResponse& operator*() const {
    return payload_;
  }

 private:
  ::test_error::ExampleFooTopResponse payload_;
};

template <>
struct ::fidl::internal::MessageTraits<
    ::fidl::Response<::test_error::Example::Foo>>
    final {
 public:
  static constexpr bool kHasPayload = true;
  using Payload = ::test_error::ExampleFooTopResponse;
};
namespace fidl {}  // namespace fidl
template <>
class ::fidl::internal::ClientCallbackTraits<::test_error::Example::Foo> final {
 public:
  ClientCallbackTraits() = delete;
  using ResultCallback = ::fit::callback<void(
      ::fitx::result<::fidl::Error,
                     ::fidl::Response<::test_error::Example::Foo>>&)>;
  using ResponseCallback =
      ::fit::callback<void(::fidl::Response<::test_error::Example::Foo>&)>;
};

template <>
class ::fidl::internal::NaturalClientImpl<::test_error::Example> final
    : public ::fidl::internal::NaturalClientBase {
 public:
  using NaturalClientBase::NaturalClientBase;
  void foo(
      ::test_error::ExampleFooRequest&& payload,
      ::fidl::ClientCallback<::test_error::Example::Foo>&& _callback) const;

  void foo(::test_error::ExampleFooRequest&& payload,
           ::fidl::ClientResponseCallback<::test_error::Example::Foo>&&
               _callback) const;
};
namespace fidl {
#endif  // __Fuchsia__

}  // namespace fidl
