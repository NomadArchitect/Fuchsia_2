// WARNING: This file is machine generated by fidlgen.

#pragma once

#include <fidl/test.driverservice/cpp/markers.h>
#include <fidl/test.driverservice/cpp/wire_types.h>
#include <lib/fidl_driver/cpp/wire_messaging.h>

#ifdef __Fuchsia__

#include <lib/fidl/cpp/wire/connect_service.h>
#include <lib/fidl/cpp/wire/server.h>
#include <lib/fidl/cpp/wire/service_handler_interface.h>
#include <lib/fidl/cpp/wire/sync_call.h>
#include <lib/fidl_driver/cpp/server.h>
#include <lib/fidl_driver/cpp/wire_client.h>

#endif  // __Fuchsia__

namespace test_driverservice {

class SomeDriverProtocol;

}  // namespace test_driverservice

#ifdef __Fuchsia__

template <>
struct ::fidl::internal::ProtocolDetails<::test_driverservice::SomeDriverProtocol> {
};

#endif  // __Fuchsia__

#ifdef __Fuchsia__

template <>
struct ::fidl::internal::WireServerDispatcher<::test_driverservice::SomeDriverProtocol> final {
  WireServerDispatcher() = delete;
  static ::fidl::DispatchResult TryDispatch(::fdf::WireServer<::test_driverservice::SomeDriverProtocol>* impl, ::fidl::IncomingMessage& msg,
                                            internal::MessageStorageViewBase* storage_view,
                                            ::fidl::Transaction* txn);
  static void Dispatch(::fdf::WireServer<::test_driverservice::SomeDriverProtocol>* impl, ::fidl::IncomingMessage&& msg,
                       internal::MessageStorageViewBase* storage_view,
                       ::fidl::Transaction* txn);

 private:
  static const ::fidl::internal::MethodEntry entries_[];
  static const ::fidl::internal::MethodEntry* entries_end_;
  static constexpr const ::fidl::internal::UnknownInteractionHandlerEntry& unknown_interaction_handler_entry_ =
      ::fidl::internal::UnknownInteractionHandlerEntry::kClosedProtocolHandlerEntry;
};

#endif  // __Fuchsia__

namespace fidl {

#ifdef __Fuchsia__
}  // namespace fidl

template <>
class ::fidl::internal::WireEventHandlerInterface<::test_driverservice::SomeDriverProtocol> : public ::fidl::internal::BaseEventHandlerInterface {
 public:
  WireEventHandlerInterface() = default;
  virtual ~WireEventHandlerInterface() = default;
};

template <>
class ::fdf::WireAsyncEventHandler<::test_driverservice::SomeDriverProtocol>
    : public ::fidl::internal::WireEventHandlerInterface<::test_driverservice::SomeDriverProtocol>, public ::fidl::internal::AsyncEventHandler {
 public:
  WireAsyncEventHandler() = default;
};

template <>
class ::fidl::internal::WireEventDispatcher<::test_driverservice::SomeDriverProtocol> final : public ::fidl::internal::IncomingEventDispatcher<::fidl::internal::WireEventHandlerInterface<::test_driverservice::SomeDriverProtocol>> {
 public:
  explicit WireEventDispatcher(::fidl::internal::WireEventHandlerInterface<::test_driverservice::SomeDriverProtocol>* event_handler)
      : IncomingEventDispatcher(event_handler) {}
};

template <>
class ::fidl::internal::WireSyncBufferClientImpl<::test_driverservice::SomeDriverProtocol> final : public ::fdf::internal::SyncEndpointBufferVeneer<::fidl::internal::WireSyncBufferClientImpl<::test_driverservice::SomeDriverProtocol>> {
 public:
 private:
  ::fdf::UnownedClientEnd<::test_driverservice::SomeDriverProtocol> _client_end() const {
    return ::fdf::UnownedClientEnd<::test_driverservice::SomeDriverProtocol>(
        _transport().get<::fidl::internal::DriverTransport>());
  }
};

// Pure-virtual interface to be implemented by a server.
// This interface uses typed channels (i.e. |::fdf::ClientEnd<::test_driverservice::SomeDriverProtocol>|
// and |::fdf::ServerEnd<::test_driverservice::SomeDriverProtocol>|).
template <>
class ::fdf::WireServer<::test_driverservice::SomeDriverProtocol> : public ::fidl::internal::IncomingMessageDispatcher {
 public:
  WireServer() = default;
  virtual ~WireServer() = default;

  // The FIDL protocol type that is implemented by this server.
  using _EnclosingProtocol = ::test_driverservice::SomeDriverProtocol;

 private:
  void dispatch_message(
      ::fidl::IncomingMessage&& msg, ::fidl::Transaction* txn,
      ::fidl::internal::MessageStorageViewBase* storage_view) final;
};
namespace fidl {

#endif  // __Fuchsia__

#ifdef __Fuchsia__
}  // namespace fidl

template <>
class ::fidl::internal::WireWeakOnewayBufferClientImpl<::test_driverservice::SomeDriverProtocol> : public ::fdf::internal::BufferClientImplBase {
 public:
  using BufferClientImplBase::BufferClientImplBase;
};

template <>
class ::fidl::internal::WireWeakAsyncBufferClientImpl<::test_driverservice::SomeDriverProtocol> final : public ::fidl::internal::WireWeakOnewayBufferClientImpl<::test_driverservice::SomeDriverProtocol> {
 public:
  using WireWeakOnewayBufferClientImpl::WireWeakOnewayBufferClientImpl;
};

template <>
class ::fidl::internal::WireWeakOnewayClientImpl<::test_driverservice::SomeDriverProtocol> : public ::fidl::internal::ClientImplBase {
 public:
  WireWeakOnewayClientImpl(fidl::internal::ClientBase* client_base, const fdf::Arena& arena)
      : ClientImplBase(client_base), arena_(arena) {}

 protected:
  const ::fdf::Arena& arena_;
};

template <>
class ::fidl::internal::WireWeakSyncClientImpl<::test_driverservice::SomeDriverProtocol> final : public ::fidl::internal::WireWeakOnewayClientImpl<::test_driverservice::SomeDriverProtocol> {
 public:
  using WireWeakOnewayClientImpl::WireWeakOnewayClientImpl;
};
namespace fidl {

#endif  // __Fuchsia__

}  // namespace fidl
