// WARNING: This file is machine generated by fidlgen_cpp.

#pragma once

#include <fidl/test.requestflexibleenvelope/cpp/natural_types.h>
#include <fidl/test.requestflexibleenvelope/cpp/wire.h>
#include <lib/fidl/cpp/client.h>
#include <lib/fidl/cpp/internal/codable_base.h>
#include <lib/fidl/cpp/internal/message_extensions.h>
#include <lib/fidl/cpp/internal/natural_client_messenger.h>
#include <lib/fidl/cpp/natural_types.h>
#include <lib/fidl/cpp/unified_messaging.h>

namespace fidl {

#ifdef __Fuchsia__
}  // namespace fidl

template <>
class ::fidl::Response<
    ::test_requestflexibleenvelope::Protocol::RequestStrictResponseFlexible>
    final : public ::fidl::internal::MessageBase<
                ::fidl::Response<::test_requestflexibleenvelope::Protocol::
                                     RequestStrictResponseFlexible>> {
 public:
  Response() = default;
  ~Response() = default;
  Response(Response&&) noexcept = default;
  Response& operator=(Response&&) noexcept = default;
  Response(::test_requestflexibleenvelope::
               ProtocolRequestStrictResponseFlexibleTopResponse payload)
      : payload_(std::move(payload)) {}
  ::test_requestflexibleenvelope::
      ProtocolRequestStrictResponseFlexibleTopResponse*
      operator->() {
    return &payload_;
  }
  const ::test_requestflexibleenvelope::
      ProtocolRequestStrictResponseFlexibleTopResponse*
      operator->() const {
    return &payload_;
  }
  ::test_requestflexibleenvelope::
      ProtocolRequestStrictResponseFlexibleTopResponse&
      operator*() {
    return payload_;
  }
  const ::test_requestflexibleenvelope::
      ProtocolRequestStrictResponseFlexibleTopResponse&
      operator*() const {
    return payload_;
  }

 private:
  ::test_requestflexibleenvelope::
      ProtocolRequestStrictResponseFlexibleTopResponse payload_;
};

template <>
struct ::fidl::internal::MessageTraits<::fidl::Response<
    ::test_requestflexibleenvelope::Protocol::RequestStrictResponseFlexible>>
    final {
 public:
  static constexpr bool kHasPayload = true;
  using Payload = ::test_requestflexibleenvelope::
      ProtocolRequestStrictResponseFlexibleTopResponse;
};
namespace fidl {}  // namespace fidl
template <>
class ::fidl::internal::ClientCallbackTraits<
    ::test_requestflexibleenvelope::Protocol::RequestStrictResponseFlexible>
    final {
 public:
  ClientCallbackTraits() = delete;
  using ResultCallback = ::fit::callback<void(
      ::fitx::result<::fidl::Error,
                     ::fidl::Response<::test_requestflexibleenvelope::Protocol::
                                          RequestStrictResponseFlexible>>&)>;
  using ResponseCallback = ::fit::callback<void(
      ::fidl::Response<::test_requestflexibleenvelope::Protocol::
                           RequestStrictResponseFlexible>&)>;
};

template <>
class ::fidl::Response<
    ::test_requestflexibleenvelope::Protocol::RequestFlexibleResponseStrict>
    final : public ::fidl::internal::MessageBase<
                ::fidl::Response<::test_requestflexibleenvelope::Protocol::
                                     RequestFlexibleResponseStrict>> {
 public:
  Response() = default;
  ~Response() = default;
  Response(Response&&) noexcept = default;
  Response& operator=(Response&&) noexcept = default;
  Response(::test_requestflexibleenvelope::
               ProtocolRequestFlexibleResponseStrictTopResponse payload)
      : payload_(std::move(payload)) {}
  ::test_requestflexibleenvelope::
      ProtocolRequestFlexibleResponseStrictTopResponse*
      operator->() {
    return &payload_;
  }
  const ::test_requestflexibleenvelope::
      ProtocolRequestFlexibleResponseStrictTopResponse*
      operator->() const {
    return &payload_;
  }
  ::test_requestflexibleenvelope::
      ProtocolRequestFlexibleResponseStrictTopResponse&
      operator*() {
    return payload_;
  }
  const ::test_requestflexibleenvelope::
      ProtocolRequestFlexibleResponseStrictTopResponse&
      operator*() const {
    return payload_;
  }

 private:
  ::test_requestflexibleenvelope::
      ProtocolRequestFlexibleResponseStrictTopResponse payload_;
};

template <>
struct ::fidl::internal::MessageTraits<::fidl::Response<
    ::test_requestflexibleenvelope::Protocol::RequestFlexibleResponseStrict>>
    final {
 public:
  static constexpr bool kHasPayload = true;
  using Payload = ::test_requestflexibleenvelope::
      ProtocolRequestFlexibleResponseStrictTopResponse;
};
template <>
class ::fidl::internal::ClientCallbackTraits<
    ::test_requestflexibleenvelope::Protocol::RequestFlexibleResponseStrict>
    final {
 public:
  ClientCallbackTraits() = delete;
  using ResultCallback = ::fit::callback<void(
      ::fitx::result<::fidl::Error,
                     ::fidl::Response<::test_requestflexibleenvelope::Protocol::
                                          RequestFlexibleResponseStrict>>&)>;
  using ResponseCallback = ::fit::callback<void(
      ::fidl::Response<::test_requestflexibleenvelope::Protocol::
                           RequestFlexibleResponseStrict>&)>;
};

template <>
class ::fidl::internal::NaturalClientImpl<
    ::test_requestflexibleenvelope::Protocol>
    final : public ::fidl::internal::NaturalClientBase {
 public:
  using NaturalClientBase::NaturalClientBase;
  void RequestStrictResponseFlexible(
      ::test_requestflexibleenvelope::
          ProtocolRequestStrictResponseFlexibleRequest&& payload,
      ::fidl::ClientCallback<::test_requestflexibleenvelope::Protocol::
                                 RequestStrictResponseFlexible>&& _callback)
      const;

  void RequestStrictResponseFlexible(
      ::test_requestflexibleenvelope::
          ProtocolRequestStrictResponseFlexibleRequest&& payload,
      ::fidl::ClientResponseCallback<::test_requestflexibleenvelope::Protocol::
                                         RequestStrictResponseFlexible>&&
          _callback) const;

  void RequestFlexibleResponseStrict(
      ::test_requestflexibleenvelope::
          ProtocolRequestFlexibleResponseStrictRequest&& payload,
      ::fidl::ClientCallback<::test_requestflexibleenvelope::Protocol::
                                 RequestFlexibleResponseStrict>&& _callback)
      const;

  void RequestFlexibleResponseStrict(
      ::test_requestflexibleenvelope::
          ProtocolRequestFlexibleResponseStrictRequest&& payload,
      ::fidl::ClientResponseCallback<::test_requestflexibleenvelope::Protocol::
                                         RequestFlexibleResponseStrict>&&
          _callback) const;
};
namespace fidl {
#endif  // __Fuchsia__

}  // namespace fidl
#ifdef __Fuchsia__

template <>
class ::fidl::internal::NaturalEventHandlerInterface<
    ::test_requestflexibleenvelope::Protocol> {
 public:
  NaturalEventHandlerInterface() = default;
  virtual ~NaturalEventHandlerInterface() = default;
};

template <>
class ::fidl::AsyncEventHandler<::test_requestflexibleenvelope::Protocol>
    : public ::fidl::internal::NaturalEventHandlerInterface<
          ::test_requestflexibleenvelope::Protocol>,
      public ::fidl::internal::AsyncEventHandler {
 public:
  AsyncEventHandler() = default;
};

template <>
class ::fidl::internal::NaturalEventDispatcher<
    ::test_requestflexibleenvelope::Protocol>
    final
    : public ::fidl::internal::IncomingEventDispatcher<
          ::fidl::AsyncEventHandler<::test_requestflexibleenvelope::Protocol>> {
 public:
  explicit NaturalEventDispatcher(
      ::fidl::AsyncEventHandler<::test_requestflexibleenvelope::Protocol>*
          event_handler)
      : IncomingEventDispatcher(event_handler) {}

 private:
  std::optional<::fidl::UnbindInfo> DispatchEvent(
      ::fidl::IncomingMessage& msg,
      internal::IncomingTransportContext transport_context) override;
};
#endif  // __Fuchsia__
