// WARNING: This file is machine generated by fidlgen.

#pragma once

#include <lib/fidl/cpp/wire/internal/transport.h>
#include <lib/fidl/cpp/wire/unknown_interactions.h>

namespace test_protocols {

class WithAndWithoutRequestResponse final {
  WithAndWithoutRequestResponse() = delete;

 public:
  using Transport = ::fidl::internal::ChannelTransport;

  static constexpr ::fidl::internal::Openness kOpenness = ::fidl::internal::Openness::kClosed;
  class NoRequestNoResponse final {
    NoRequestNoResponse() = delete;

   public:
    using Protocol = ::test_protocols::WithAndWithoutRequestResponse;
    static constexpr bool kHasRequest = true;
    static constexpr bool kHasResponse = false;

    static constexpr bool kHasNonEmptyPayload = false;
    static constexpr bool kHasApplicationError = false;
    static constexpr bool kHasTransportError = false;
  };
  class NoRequestEmptyResponse final {
    NoRequestEmptyResponse() = delete;

   public:
    using Protocol = ::test_protocols::WithAndWithoutRequestResponse;
    static constexpr bool kHasRequest = true;
    static constexpr bool kHasResponse = true;

    static constexpr bool kHasNonEmptyPayload = false;
    static constexpr bool kHasApplicationError = false;
    static constexpr bool kHasTransportError = false;
  };
  class NoRequestWithResponse final {
    NoRequestWithResponse() = delete;

   public:
    using Protocol = ::test_protocols::WithAndWithoutRequestResponse;
    static constexpr bool kHasRequest = true;
    static constexpr bool kHasResponse = true;

    static constexpr bool kHasNonEmptyPayload = true;
    static constexpr bool kHasApplicationError = false;
    static constexpr bool kHasTransportError = false;
  };
  class WithRequestNoResponse final {
    WithRequestNoResponse() = delete;

   public:
    using Protocol = ::test_protocols::WithAndWithoutRequestResponse;
    static constexpr bool kHasRequest = true;
    static constexpr bool kHasResponse = false;

    static constexpr bool kHasNonEmptyPayload = false;
    static constexpr bool kHasApplicationError = false;
    static constexpr bool kHasTransportError = false;
  };
  class WithRequestEmptyResponse final {
    WithRequestEmptyResponse() = delete;

   public:
    using Protocol = ::test_protocols::WithAndWithoutRequestResponse;
    static constexpr bool kHasRequest = true;
    static constexpr bool kHasResponse = true;

    static constexpr bool kHasNonEmptyPayload = false;
    static constexpr bool kHasApplicationError = false;
    static constexpr bool kHasTransportError = false;
  };
  class WithRequestWithResponse final {
    WithRequestWithResponse() = delete;

   public:
    using Protocol = ::test_protocols::WithAndWithoutRequestResponse;
    static constexpr bool kHasRequest = true;
    static constexpr bool kHasResponse = true;

    static constexpr bool kHasNonEmptyPayload = true;
    static constexpr bool kHasApplicationError = false;
    static constexpr bool kHasTransportError = false;
  };
  class OnEmptyResponse final {
    OnEmptyResponse() = delete;

   public:
    using Protocol = ::test_protocols::WithAndWithoutRequestResponse;
    static constexpr bool kHasRequest = false;
    static constexpr bool kHasResponse = true;

    static constexpr bool kHasNonEmptyPayload = false;
    static constexpr bool kHasApplicationError = false;
    static constexpr bool kHasTransportError = false;
  };
  class OnWithResponse final {
    OnWithResponse() = delete;

   public:
    using Protocol = ::test_protocols::WithAndWithoutRequestResponse;
    static constexpr bool kHasRequest = false;
    static constexpr bool kHasResponse = true;

    static constexpr bool kHasNonEmptyPayload = true;
    static constexpr bool kHasApplicationError = false;
    static constexpr bool kHasTransportError = false;
  };
};

class Transitional final {
  Transitional() = delete;

 public:
  using Transport = ::fidl::internal::ChannelTransport;

  static constexpr ::fidl::internal::Openness kOpenness = ::fidl::internal::Openness::kClosed;
  class Request final {
    Request() = delete;

   public:
    using Protocol = ::test_protocols::Transitional;
    static constexpr bool kHasRequest = true;
    static constexpr bool kHasResponse = true;

    static constexpr bool kHasNonEmptyPayload = true;
    static constexpr bool kHasApplicationError = false;
    static constexpr bool kHasTransportError = false;
  };
  class OneWay final {
    OneWay() = delete;

   public:
    using Protocol = ::test_protocols::Transitional;
    static constexpr bool kHasRequest = true;
    static constexpr bool kHasResponse = false;

    static constexpr bool kHasNonEmptyPayload = false;
    static constexpr bool kHasApplicationError = false;
    static constexpr bool kHasTransportError = false;
  };
  class Event final {
    Event() = delete;

   public:
    using Protocol = ::test_protocols::Transitional;
    static constexpr bool kHasRequest = false;
    static constexpr bool kHasResponse = true;

    static constexpr bool kHasNonEmptyPayload = true;
    static constexpr bool kHasApplicationError = false;
    static constexpr bool kHasTransportError = false;
  };
};

class WithProtocolEnds final {
  WithProtocolEnds() = delete;

 public:
  using Transport = ::fidl::internal::ChannelTransport;

  static constexpr ::fidl::internal::Openness kOpenness = ::fidl::internal::Openness::kClosed;
  class ClientEnds final {
    ClientEnds() = delete;

   public:
    using Protocol = ::test_protocols::WithProtocolEnds;
    static constexpr bool kHasRequest = true;
    static constexpr bool kHasResponse = true;

    static constexpr bool kHasNonEmptyPayload = true;
    static constexpr bool kHasApplicationError = false;
    static constexpr bool kHasTransportError = false;
  };
  class ServerEnds final {
    ServerEnds() = delete;

   public:
    using Protocol = ::test_protocols::WithProtocolEnds;
    static constexpr bool kHasRequest = true;
    static constexpr bool kHasResponse = true;

    static constexpr bool kHasNonEmptyPayload = true;
    static constexpr bool kHasApplicationError = false;
    static constexpr bool kHasTransportError = false;
  };
  class StructContainingEnds final {
    StructContainingEnds() = delete;

   public:
    using Protocol = ::test_protocols::WithProtocolEnds;
    static constexpr bool kHasRequest = true;
    static constexpr bool kHasResponse = true;

    static constexpr bool kHasNonEmptyPayload = true;
    static constexpr bool kHasApplicationError = false;
    static constexpr bool kHasTransportError = false;
  };
};

class MethodWithUnion final {
  MethodWithUnion() = delete;

 public:
  using Transport = ::fidl::internal::ChannelTransport;

  static constexpr ::fidl::internal::Openness kOpenness = ::fidl::internal::Openness::kClosed;
  class UnionMethod final {
    UnionMethod() = delete;

   public:
    using Protocol = ::test_protocols::MethodWithUnion;
    static constexpr bool kHasRequest = true;
    static constexpr bool kHasResponse = true;

    static constexpr bool kHasNonEmptyPayload = true;
    static constexpr bool kHasApplicationError = false;
    static constexpr bool kHasTransportError = false;
  };
};

class ManyParameters final {
  ManyParameters() = delete;

 public:
  using Transport = ::fidl::internal::ChannelTransport;

  static constexpr ::fidl::internal::Openness kOpenness = ::fidl::internal::Openness::kClosed;
  class Fifteen final {
    Fifteen() = delete;

   public:
    using Protocol = ::test_protocols::ManyParameters;
    static constexpr bool kHasRequest = true;
    static constexpr bool kHasResponse = false;

    static constexpr bool kHasNonEmptyPayload = false;
    static constexpr bool kHasApplicationError = false;
    static constexpr bool kHasTransportError = false;
  };
};

class HandleRightsProtocol final {
  HandleRightsProtocol() = delete;

 public:
  using Transport = ::fidl::internal::ChannelTransport;

  static constexpr ::fidl::internal::Openness kOpenness = ::fidl::internal::Openness::kClosed;
  class NoResponseMethod final {
    NoResponseMethod() = delete;

   public:
    using Protocol = ::test_protocols::HandleRightsProtocol;
    static constexpr bool kHasRequest = true;
    static constexpr bool kHasResponse = false;

    static constexpr bool kHasNonEmptyPayload = false;
    static constexpr bool kHasApplicationError = false;
    static constexpr bool kHasTransportError = false;
  };
  class ResponseMethod final {
    ResponseMethod() = delete;

   public:
    using Protocol = ::test_protocols::HandleRightsProtocol;
    static constexpr bool kHasRequest = true;
    static constexpr bool kHasResponse = true;

    static constexpr bool kHasNonEmptyPayload = true;
    static constexpr bool kHasApplicationError = false;
    static constexpr bool kHasTransportError = false;
  };
  class AnEvent final {
    AnEvent() = delete;

   public:
    using Protocol = ::test_protocols::HandleRightsProtocol;
    static constexpr bool kHasRequest = false;
    static constexpr bool kHasResponse = true;

    static constexpr bool kHasNonEmptyPayload = true;
    static constexpr bool kHasApplicationError = false;
    static constexpr bool kHasTransportError = false;
  };
};

class WithErrorSyntax final {
  WithErrorSyntax() = delete;

 public:
  using Transport = ::fidl::internal::ChannelTransport;

  static constexpr ::fidl::internal::Openness kOpenness = ::fidl::internal::Openness::kClosed;
  class ResponseAsStruct final {
    ResponseAsStruct() = delete;

   public:
    using Protocol = ::test_protocols::WithErrorSyntax;
    static constexpr bool kHasRequest = true;
    static constexpr bool kHasResponse = true;

    static constexpr bool kHasNonEmptyPayload = true;
    static constexpr bool kHasApplicationError = true;
    static constexpr bool kHasTransportError = false;
  };
  class ErrorAsPrimitive final {
    ErrorAsPrimitive() = delete;

   public:
    using Protocol = ::test_protocols::WithErrorSyntax;
    static constexpr bool kHasRequest = true;
    static constexpr bool kHasResponse = true;

    static constexpr bool kHasNonEmptyPayload = false;
    static constexpr bool kHasApplicationError = true;
    static constexpr bool kHasTransportError = false;
  };
  class ErrorAsEnum final {
    ErrorAsEnum() = delete;

   public:
    using Protocol = ::test_protocols::WithErrorSyntax;
    static constexpr bool kHasRequest = true;
    static constexpr bool kHasResponse = true;

    static constexpr bool kHasNonEmptyPayload = false;
    static constexpr bool kHasApplicationError = true;
    static constexpr bool kHasTransportError = false;
  };
  class HandleInResult final {
    HandleInResult() = delete;

   public:
    using Protocol = ::test_protocols::WithErrorSyntax;
    static constexpr bool kHasRequest = true;
    static constexpr bool kHasResponse = true;

    static constexpr bool kHasNonEmptyPayload = true;
    static constexpr bool kHasApplicationError = true;
    static constexpr bool kHasTransportError = false;
  };
};

class DiscoverableProtocol final {
  DiscoverableProtocol() = delete;

 public:
  using Transport = ::fidl::internal::ChannelTransport;

  static constexpr ::fidl::internal::Openness kOpenness = ::fidl::internal::Openness::kClosed;
  class Method final {
    Method() = delete;

   public:
    using Protocol = ::test_protocols::DiscoverableProtocol;
    static constexpr bool kHasRequest = true;
    static constexpr bool kHasResponse = false;

    static constexpr bool kHasNonEmptyPayload = false;
    static constexpr bool kHasApplicationError = false;
    static constexpr bool kHasTransportError = false;
  };
};

class ChannelProtocol final {
  ChannelProtocol() = delete;

 public:
  using Transport = ::fidl::internal::ChannelTransport;

  static constexpr ::fidl::internal::Openness kOpenness = ::fidl::internal::Openness::kClosed;
  class MethodA final {
    MethodA() = delete;

   public:
    using Protocol = ::test_protocols::ChannelProtocol;
    static constexpr bool kHasRequest = true;
    static constexpr bool kHasResponse = false;

    static constexpr bool kHasNonEmptyPayload = false;
    static constexpr bool kHasApplicationError = false;
    static constexpr bool kHasTransportError = false;
  };
  class EventA final {
    EventA() = delete;

   public:
    using Protocol = ::test_protocols::ChannelProtocol;
    static constexpr bool kHasRequest = false;
    static constexpr bool kHasResponse = true;

    static constexpr bool kHasNonEmptyPayload = true;
    static constexpr bool kHasApplicationError = false;
    static constexpr bool kHasTransportError = false;
  };
  class MethodB final {
    MethodB() = delete;

   public:
    using Protocol = ::test_protocols::ChannelProtocol;
    static constexpr bool kHasRequest = true;
    static constexpr bool kHasResponse = true;

    static constexpr bool kHasNonEmptyPayload = true;
    static constexpr bool kHasApplicationError = false;
    static constexpr bool kHasTransportError = false;
  };
  class TakeHandle final {
    TakeHandle() = delete;

   public:
    using Protocol = ::test_protocols::ChannelProtocol;
    static constexpr bool kHasRequest = true;
    static constexpr bool kHasResponse = true;

    static constexpr bool kHasNonEmptyPayload = false;
    static constexpr bool kHasApplicationError = false;
    static constexpr bool kHasTransportError = false;
  };
  class MutateSocket final {
    MutateSocket() = delete;

   public:
    using Protocol = ::test_protocols::ChannelProtocol;
    static constexpr bool kHasRequest = true;
    static constexpr bool kHasResponse = true;

    static constexpr bool kHasNonEmptyPayload = true;
    static constexpr bool kHasApplicationError = false;
    static constexpr bool kHasTransportError = false;
  };
};

class AnotherDiscoverableProtocol final {
  AnotherDiscoverableProtocol() = delete;

 public:
  using Transport = ::fidl::internal::ChannelTransport;

  static constexpr ::fidl::internal::Openness kOpenness = ::fidl::internal::Openness::kClosed;
};
}  // namespace test_protocols
