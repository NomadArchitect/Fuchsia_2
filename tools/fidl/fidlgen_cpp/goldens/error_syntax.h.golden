// WARNING: This file is machine generated by fidlgen_cpp.

#pragma once

#include <fidl/test.errorsyntax/cpp/natural_types.h>
#include <fidl/test.errorsyntax/cpp/wire.h>
#include <lib/fidl/cpp/client.h>
#include <lib/fidl/cpp/internal/codable_base.h>
#include <lib/fidl/cpp/internal/message_extensions.h>
#include <lib/fidl/cpp/internal/natural_client_messenger.h>
#include <lib/fidl/cpp/natural_types.h>
#include <lib/fidl/cpp/unified_messaging.h>
#include <test/errorsyntax/parent/cpp/fidl_v2.h>

namespace fidl {

#ifdef __Fuchsia__
}  // namespace fidl

template <>
class ::fidl::Response<
    ::test_errorsyntax::ExampleUseOfErrorSyntax::ComposedCallWhichMayFail>
    final : public ::fidl::internal::MessageBase<
                ::fidl::Response<::test_errorsyntax::ExampleUseOfErrorSyntax::
                                     ComposedCallWhichMayFail>> {
 public:
  Response() = default;
  ~Response() = default;
  Response(Response&&) noexcept = default;
  Response& operator=(Response&&) noexcept = default;
  Response(::test_errorsyntax_parent::
               ParentUsesErrorSyntaxComposedCallWhichMayFailTopResponse payload)
      : payload_(std::move(payload)) {}
  ::test_errorsyntax_parent::
      ParentUsesErrorSyntaxComposedCallWhichMayFailTopResponse*
      operator->() {
    return &payload_;
  }
  const ::test_errorsyntax_parent::
      ParentUsesErrorSyntaxComposedCallWhichMayFailTopResponse*
      operator->() const {
    return &payload_;
  }
  ::test_errorsyntax_parent::
      ParentUsesErrorSyntaxComposedCallWhichMayFailTopResponse&
      operator*() {
    return payload_;
  }
  const ::test_errorsyntax_parent::
      ParentUsesErrorSyntaxComposedCallWhichMayFailTopResponse&
      operator*() const {
    return payload_;
  }

 private:
  ::test_errorsyntax_parent::
      ParentUsesErrorSyntaxComposedCallWhichMayFailTopResponse payload_;
};

template <>
struct ::fidl::internal::MessageTraits<::fidl::Response<
    ::test_errorsyntax::ExampleUseOfErrorSyntax::ComposedCallWhichMayFail>>
    final {
 public:
  static constexpr bool kHasPayload = true;
  using Payload = ::test_errorsyntax_parent::
      ParentUsesErrorSyntaxComposedCallWhichMayFailTopResponse;
};
namespace fidl {}  // namespace fidl
template <>
class ::fidl::internal::ClientCallbackTraits<
    ::test_errorsyntax::ExampleUseOfErrorSyntax::ComposedCallWhichMayFail>
    final {
 public:
  ClientCallbackTraits() = delete;
  using ResultCallback = ::fit::callback<void(
      ::fitx::result<
          ::fidl::Error,
          ::fidl::Response<::test_errorsyntax::ExampleUseOfErrorSyntax::
                               ComposedCallWhichMayFail>>&)>;
  using ResponseCallback = ::fit::callback<void(
      ::fidl::Response<::test_errorsyntax::ExampleUseOfErrorSyntax::
                           ComposedCallWhichMayFail>&)>;
};

template <>
class ::fidl::Response<
    ::test_errorsyntax::ExampleUseOfErrorSyntax::CallWhichMayFail>
    final
    : public ::fidl::internal::MessageBase<::fidl::Response<
          ::test_errorsyntax::ExampleUseOfErrorSyntax::CallWhichMayFail>> {
 public:
  Response() = default;
  ~Response() = default;
  Response(Response&&) noexcept = default;
  Response& operator=(Response&&) noexcept = default;
  Response(
      ::test_errorsyntax::ExampleUseOfErrorSyntaxCallWhichMayFailTopResponse
          payload)
      : payload_(std::move(payload)) {}
  ::test_errorsyntax::ExampleUseOfErrorSyntaxCallWhichMayFailTopResponse*
  operator->() {
    return &payload_;
  }
  const ::test_errorsyntax::ExampleUseOfErrorSyntaxCallWhichMayFailTopResponse*
  operator->() const {
    return &payload_;
  }
  ::test_errorsyntax::ExampleUseOfErrorSyntaxCallWhichMayFailTopResponse&
  operator*() {
    return payload_;
  }
  const ::test_errorsyntax::ExampleUseOfErrorSyntaxCallWhichMayFailTopResponse&
  operator*() const {
    return payload_;
  }

 private:
  ::test_errorsyntax::ExampleUseOfErrorSyntaxCallWhichMayFailTopResponse
      payload_;
};

template <>
struct ::fidl::internal::MessageTraits<::fidl::Response<
    ::test_errorsyntax::ExampleUseOfErrorSyntax::CallWhichMayFail>>
    final {
 public:
  static constexpr bool kHasPayload = true;
  using Payload =
      ::test_errorsyntax::ExampleUseOfErrorSyntaxCallWhichMayFailTopResponse;
};
template <>
class ::fidl::internal::ClientCallbackTraits<
    ::test_errorsyntax::ExampleUseOfErrorSyntax::CallWhichMayFail>
    final {
 public:
  ClientCallbackTraits() = delete;
  using ResultCallback = ::fit::callback<void(
      ::fitx::result<
          ::fidl::Error,
          ::fidl::Response<::test_errorsyntax::ExampleUseOfErrorSyntax::
                               CallWhichMayFail>>&)>;
  using ResponseCallback = ::fit::callback<void(
      ::fidl::Response<
          ::test_errorsyntax::ExampleUseOfErrorSyntax::CallWhichMayFail>&)>;
};

template <>
class ::fidl::internal::NaturalClientImpl<
    ::test_errorsyntax::ExampleUseOfErrorSyntax>
    final : public ::fidl::internal::NaturalClientBase {
 public:
  using NaturalClientBase::NaturalClientBase;
  void ComposedCallWhichMayFail(
      ::test_errorsyntax_parent::
          ParentUsesErrorSyntaxComposedCallWhichMayFailRequest&& payload,
      ::fidl::ClientCallback<::test_errorsyntax::ExampleUseOfErrorSyntax::
                                 ComposedCallWhichMayFail>&& _callback) const;

  void ComposedCallWhichMayFail(
      ::test_errorsyntax_parent::
          ParentUsesErrorSyntaxComposedCallWhichMayFailRequest&& payload,
      ::fidl::ClientResponseCallback<
          ::test_errorsyntax::ExampleUseOfErrorSyntax::
              ComposedCallWhichMayFail>&& _callback) const;

  void CallWhichMayFail(
      ::test_errorsyntax::ExampleUseOfErrorSyntaxCallWhichMayFailRequest&&
          payload,
      ::fidl::ClientCallback<
          ::test_errorsyntax::ExampleUseOfErrorSyntax::CallWhichMayFail>&&
          _callback) const;

  void CallWhichMayFail(
      ::test_errorsyntax::ExampleUseOfErrorSyntaxCallWhichMayFailRequest&&
          payload,
      ::fidl::ClientResponseCallback<
          ::test_errorsyntax::ExampleUseOfErrorSyntax::CallWhichMayFail>&&
          _callback) const;
};
namespace fidl {
#endif  // __Fuchsia__

}  // namespace fidl
#ifdef __Fuchsia__

template <>
class ::fidl::internal::NaturalEventHandlerInterface<
    ::test_errorsyntax::ExampleUseOfErrorSyntax> {
 public:
  NaturalEventHandlerInterface() = default;
  virtual ~NaturalEventHandlerInterface() = default;
};

template <>
class ::fidl::AsyncEventHandler<::test_errorsyntax::ExampleUseOfErrorSyntax>
    : public ::fidl::internal::NaturalEventHandlerInterface<
          ::test_errorsyntax::ExampleUseOfErrorSyntax>,
      public ::fidl::internal::AsyncEventHandler {
 public:
  AsyncEventHandler() = default;
};

template <>
class ::fidl::internal::NaturalEventDispatcher<
    ::test_errorsyntax::ExampleUseOfErrorSyntax>
    final : public ::fidl::internal::IncomingEventDispatcher<
                ::fidl::AsyncEventHandler<
                    ::test_errorsyntax::ExampleUseOfErrorSyntax>> {
 public:
  explicit NaturalEventDispatcher(
      ::fidl::AsyncEventHandler<::test_errorsyntax::ExampleUseOfErrorSyntax>*
          event_handler)
      : IncomingEventDispatcher(event_handler) {}

 private:
  std::optional<::fidl::UnbindInfo> DispatchEvent(
      ::fidl::IncomingMessage& msg,
      internal::IncomingTransportContext transport_context) override;
};
#endif  // __Fuchsia__
