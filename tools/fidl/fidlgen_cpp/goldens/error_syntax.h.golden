// WARNING: This file is machine generated by fidlgen_cpp.

#pragma once

#include <fidl/test.errorsyntax/cpp/wire.h>
#include <lib/fidl/cpp/client.h>
#include <lib/fidl/cpp/internal/codable_base.h>
#include <lib/fidl/cpp/internal/message_extensions.h>
#include <lib/fidl/cpp/internal/natural_client_messenger.h>
#include <lib/fidl/cpp/natural_types.h>
#include <lib/fidl/cpp/unified_messaging.h>
#include <test/errorsyntax/cpp/natural_types.h>
#include <test/errorsyntax/parent/cpp/fidl_v2.h>

namespace test_errorsyntax {
class ExampleUseOfErrorSyntax_CallWhichMayFail_Response;

class ExampleUseOfErrorSyntaxCallWhichMayFailTopResponse;

class ExampleUseOfErrorSyntaxCallWhichMayFailRequest;

using ExampleUseOfErrorSyntax_CallWhichMayFail_Result =
    ::test::errorsyntax::ExampleUseOfErrorSyntax_CallWhichMayFail_Result;

}  // namespace test_errorsyntax
template <>
struct ::fidl::internal::DesignatedInitializationProxy<
    ::test_errorsyntax::ExampleUseOfErrorSyntax_CallWhichMayFail_Response>
    final {
 public:
  int64_t value = {};
};

namespace test_errorsyntax {
class ExampleUseOfErrorSyntax_CallWhichMayFail_Response final
    : public ::fidl::internal::CodableBase<
          ExampleUseOfErrorSyntax_CallWhichMayFail_Response> {
 private:
  friend ::fidl::internal::CodableBase<
      ExampleUseOfErrorSyntax_CallWhichMayFail_Response>;
  ExampleUseOfErrorSyntax_CallWhichMayFail_Response(::fidl::Decoder& decoder);
  template <typename Payload>
  friend auto ::fidl::internal::EncodeTransactionalMessageWithoutValidating(
      ::fidl::Encoder& encoder, Payload&& payload)
      -> ::fidl::HLCPPOutgoingMessage;
  void EncodeWithoutValidating(::fidl::Encoder& encoder, size_t offset);

 public:
  ExampleUseOfErrorSyntax_CallWhichMayFail_Response() = default;
  ExampleUseOfErrorSyntax_CallWhichMayFail_Response(int64_t value)
      : storage_({value}) {}
  ExampleUseOfErrorSyntax_CallWhichMayFail_Response(
      ::fidl::internal::DesignatedInitializationProxy<
          ::test_errorsyntax::ExampleUseOfErrorSyntax_CallWhichMayFail_Response>
          storage)
      : storage_(std::move(storage)) {}
  ~ExampleUseOfErrorSyntax_CallWhichMayFail_Response() = default;
  ExampleUseOfErrorSyntax_CallWhichMayFail_Response(
      ExampleUseOfErrorSyntax_CallWhichMayFail_Response&&) noexcept = default;
  ExampleUseOfErrorSyntax_CallWhichMayFail_Response& operator=(
      ExampleUseOfErrorSyntax_CallWhichMayFail_Response&&) noexcept = default;

  const int64_t& value() const { return storage_.value; }

  int64_t& value() { return storage_.value; }

  ExampleUseOfErrorSyntax_CallWhichMayFail_Response& set_value(int64_t _value) {
    storage_.value = std::move(_value);
    return *this;
  }

 private:
  friend struct ::fidl::CodingTraits<
      ::test_errorsyntax::ExampleUseOfErrorSyntax_CallWhichMayFail_Response>;

  ::fidl::internal::DesignatedInitializationProxy<
      ::test_errorsyntax::ExampleUseOfErrorSyntax_CallWhichMayFail_Response>
      storage_ = {};
};

}  // namespace test_errorsyntax
template <>
struct ::fidl::internal::DesignatedInitializationProxy<
    ::test_errorsyntax::ExampleUseOfErrorSyntaxCallWhichMayFailTopResponse>
    final {
 public:
  ::test_errorsyntax::ExampleUseOfErrorSyntax_CallWhichMayFail_Result result =
      {};
};

namespace test_errorsyntax {
class ExampleUseOfErrorSyntaxCallWhichMayFailTopResponse final
    : public ::fidl::internal::CodableBase<
          ExampleUseOfErrorSyntaxCallWhichMayFailTopResponse> {
 private:
  friend ::fidl::internal::CodableBase<
      ExampleUseOfErrorSyntaxCallWhichMayFailTopResponse>;
  ExampleUseOfErrorSyntaxCallWhichMayFailTopResponse(::fidl::Decoder& decoder);
  template <typename Payload>
  friend auto ::fidl::internal::EncodeTransactionalMessageWithoutValidating(
      ::fidl::Encoder& encoder, Payload&& payload)
      -> ::fidl::HLCPPOutgoingMessage;
  void EncodeWithoutValidating(::fidl::Encoder& encoder, size_t offset);

 public:
  ExampleUseOfErrorSyntaxCallWhichMayFailTopResponse() = default;
  ExampleUseOfErrorSyntaxCallWhichMayFailTopResponse(
      ::test_errorsyntax::ExampleUseOfErrorSyntax_CallWhichMayFail_Result
          result)
      : storage_({std::move(result)}) {}
  ExampleUseOfErrorSyntaxCallWhichMayFailTopResponse(
      ::fidl::internal::DesignatedInitializationProxy<
          ::test_errorsyntax::
              ExampleUseOfErrorSyntaxCallWhichMayFailTopResponse>
          storage)
      : storage_(std::move(storage)) {}
  ~ExampleUseOfErrorSyntaxCallWhichMayFailTopResponse() = default;
  ExampleUseOfErrorSyntaxCallWhichMayFailTopResponse(
      ExampleUseOfErrorSyntaxCallWhichMayFailTopResponse&&) noexcept = default;
  ExampleUseOfErrorSyntaxCallWhichMayFailTopResponse& operator=(
      ExampleUseOfErrorSyntaxCallWhichMayFailTopResponse&&) noexcept = default;

  const ::test_errorsyntax::ExampleUseOfErrorSyntax_CallWhichMayFail_Result&
  result() const {
    return storage_.result;
  }

  ::test_errorsyntax::ExampleUseOfErrorSyntax_CallWhichMayFail_Result&
  result() {
    return storage_.result;
  }

  ExampleUseOfErrorSyntaxCallWhichMayFailTopResponse& set_result(
      ::test_errorsyntax::ExampleUseOfErrorSyntax_CallWhichMayFail_Result
          _value) {
    storage_.result = std::move(_value);
    return *this;
  }

 private:
  friend struct ::fidl::CodingTraits<
      ::test_errorsyntax::ExampleUseOfErrorSyntaxCallWhichMayFailTopResponse>;

  ::fidl::internal::DesignatedInitializationProxy<
      ::test_errorsyntax::ExampleUseOfErrorSyntaxCallWhichMayFailTopResponse>
      storage_ = {};
};

}  // namespace test_errorsyntax
template <>
struct ::fidl::internal::DesignatedInitializationProxy<
    ::test_errorsyntax::ExampleUseOfErrorSyntaxCallWhichMayFailRequest>
    final {
 public:
  ::std::string s = {};
};

namespace test_errorsyntax {
class ExampleUseOfErrorSyntaxCallWhichMayFailRequest final
    : public ::fidl::internal::CodableBase<
          ExampleUseOfErrorSyntaxCallWhichMayFailRequest> {
 private:
  friend ::fidl::internal::CodableBase<
      ExampleUseOfErrorSyntaxCallWhichMayFailRequest>;
  ExampleUseOfErrorSyntaxCallWhichMayFailRequest(::fidl::Decoder& decoder);
  template <typename Payload>
  friend auto ::fidl::internal::EncodeTransactionalMessageWithoutValidating(
      ::fidl::Encoder& encoder, Payload&& payload)
      -> ::fidl::HLCPPOutgoingMessage;
  void EncodeWithoutValidating(::fidl::Encoder& encoder, size_t offset);

 public:
  ExampleUseOfErrorSyntaxCallWhichMayFailRequest() = default;
  ExampleUseOfErrorSyntaxCallWhichMayFailRequest(::std::string s)
      : storage_({std::move(s)}) {}
  ExampleUseOfErrorSyntaxCallWhichMayFailRequest(
      ::fidl::internal::DesignatedInitializationProxy<
          ::test_errorsyntax::ExampleUseOfErrorSyntaxCallWhichMayFailRequest>
          storage)
      : storage_(std::move(storage)) {}
  ~ExampleUseOfErrorSyntaxCallWhichMayFailRequest() = default;
  ExampleUseOfErrorSyntaxCallWhichMayFailRequest(
      ExampleUseOfErrorSyntaxCallWhichMayFailRequest&&) noexcept = default;
  ExampleUseOfErrorSyntaxCallWhichMayFailRequest& operator=(
      ExampleUseOfErrorSyntaxCallWhichMayFailRequest&&) noexcept = default;

  const ::std::string& s() const { return storage_.s; }

  ::std::string& s() { return storage_.s; }

  ExampleUseOfErrorSyntaxCallWhichMayFailRequest& set_s(::std::string _value) {
    storage_.s = std::move(_value);
    return *this;
  }

 private:
  friend struct ::fidl::CodingTraits<
      ::test_errorsyntax::ExampleUseOfErrorSyntaxCallWhichMayFailRequest>;

  ::fidl::internal::DesignatedInitializationProxy<
      ::test_errorsyntax::ExampleUseOfErrorSyntaxCallWhichMayFailRequest>
      storage_ = {};
};

}  // namespace test_errorsyntax
namespace fidl {
#ifdef __Fuchsia__
extern "C" const fidl_type_t
    test_errorsyntax_ExampleUseOfErrorSyntax_CallWhichMayFail_ResponseTable;

template <>
struct IsFidlType<
    ::test_errorsyntax::ExampleUseOfErrorSyntax_CallWhichMayFail_Response>
    : public std::true_type {};

template <>
struct ::fidl::internal::TypeTraits<
    ::test_errorsyntax::ExampleUseOfErrorSyntax_CallWhichMayFail_Response>
    final {
 public:
  static constexpr const fidl_type_t* kCodingTable =
      &test_errorsyntax_ExampleUseOfErrorSyntax_CallWhichMayFail_ResponseTable;
};

template <>
struct CodingTraits<
    ::test_errorsyntax::ExampleUseOfErrorSyntax_CallWhichMayFail_Response> {
  static constexpr size_t inline_size_v1_no_ee = 8;
  static constexpr size_t inline_size_v2 = 8;

  template <class EncoderImpl>
  static void Encode(
      EncoderImpl* encoder,
      ::test_errorsyntax::ExampleUseOfErrorSyntax_CallWhichMayFail_Response*
          value,
      size_t offset,
      cpp17::optional<HandleInformation> maybe_handle_info = cpp17::nullopt) {
    [[maybe_unused]] uint32_t field_offset;
    field_offset =
        encoder->wire_format() == ::fidl::internal::WireFormatVersion::kV1 ? 0
                                                                           : 0;
    ::fidl::Encode(encoder, &value->storage_.value, offset + field_offset);
  }

  template <typename DecoderImpl>
  static void Decode(
      DecoderImpl* decoder,
      ::test_errorsyntax::ExampleUseOfErrorSyntax_CallWhichMayFail_Response*
          value,
      size_t offset) {
    ::fidl::Decode(decoder, &value->storage_.value, offset + 0);
  }
};
#endif  // __Fuchsia__

#ifdef __Fuchsia__
extern "C" const fidl_type_t
    test_errorsyntax_ExampleUseOfErrorSyntaxCallWhichMayFailTopResponseTable;

template <>
struct IsFidlType<
    ::test_errorsyntax::ExampleUseOfErrorSyntaxCallWhichMayFailTopResponse>
    : public std::true_type {};

template <>
struct ::fidl::internal::TypeTraits<
    ::test_errorsyntax::ExampleUseOfErrorSyntaxCallWhichMayFailTopResponse>
    final {
 public:
  static constexpr const fidl_type_t* kCodingTable =
      &test_errorsyntax_ExampleUseOfErrorSyntaxCallWhichMayFailTopResponseTable;
};

template <>
struct CodingTraits<
    ::test_errorsyntax::ExampleUseOfErrorSyntaxCallWhichMayFailTopResponse> {
  static constexpr size_t inline_size_v1_no_ee = 24;
  static constexpr size_t inline_size_v2 = 16;

  template <class EncoderImpl>
  static void Encode(
      EncoderImpl* encoder,
      ::test_errorsyntax::ExampleUseOfErrorSyntaxCallWhichMayFailTopResponse*
          value,
      size_t offset,
      cpp17::optional<HandleInformation> maybe_handle_info = cpp17::nullopt) {
    [[maybe_unused]] uint32_t field_offset;
    field_offset =
        encoder->wire_format() == ::fidl::internal::WireFormatVersion::kV1 ? 0
                                                                           : 0;
    ::fidl::Encode(encoder, &value->storage_.result, offset + field_offset);
  }

  template <typename DecoderImpl>
  static void Decode(
      DecoderImpl* decoder,
      ::test_errorsyntax::ExampleUseOfErrorSyntaxCallWhichMayFailTopResponse*
          value,
      size_t offset) {
    ::fidl::Decode(decoder, &value->storage_.result, offset + 0);
  }
};
#endif  // __Fuchsia__

#ifdef __Fuchsia__
extern "C" const fidl_type_t
    test_errorsyntax_ExampleUseOfErrorSyntaxCallWhichMayFailRequestTable;

template <>
struct IsFidlType<
    ::test_errorsyntax::ExampleUseOfErrorSyntaxCallWhichMayFailRequest>
    : public std::true_type {};

template <>
struct ::fidl::internal::TypeTraits<
    ::test_errorsyntax::ExampleUseOfErrorSyntaxCallWhichMayFailRequest>
    final {
 public:
  static constexpr const fidl_type_t* kCodingTable =
      &test_errorsyntax_ExampleUseOfErrorSyntaxCallWhichMayFailRequestTable;
};

template <>
struct CodingTraits<
    ::test_errorsyntax::ExampleUseOfErrorSyntaxCallWhichMayFailRequest> {
  static constexpr size_t inline_size_v1_no_ee = 16;
  static constexpr size_t inline_size_v2 = 16;

  template <class EncoderImpl>
  static void Encode(
      EncoderImpl* encoder,
      ::test_errorsyntax::ExampleUseOfErrorSyntaxCallWhichMayFailRequest* value,
      size_t offset,
      cpp17::optional<HandleInformation> maybe_handle_info = cpp17::nullopt) {
    [[maybe_unused]] uint32_t field_offset;
    field_offset =
        encoder->wire_format() == ::fidl::internal::WireFormatVersion::kV1 ? 0
                                                                           : 0;
    ::fidl::Encode(encoder, &value->storage_.s, offset + field_offset);
  }

  template <typename DecoderImpl>
  static void Decode(
      DecoderImpl* decoder,
      ::test_errorsyntax::ExampleUseOfErrorSyntaxCallWhichMayFailRequest* value,
      size_t offset) {
    ::fidl::Decode(decoder, &value->storage_.s, offset + 0);
  }
};
#endif  // __Fuchsia__

#ifdef __Fuchsia__
}  // namespace fidl

template <>
class ::fidl::Response<
    ::test_errorsyntax::ExampleUseOfErrorSyntax::ComposedCallWhichMayFail>
    final : public ::fidl::internal::MessageBase<
                ::fidl::Response<::test_errorsyntax::ExampleUseOfErrorSyntax::
                                     ComposedCallWhichMayFail>> {
 public:
  Response() = default;
  ~Response() = default;
  Response(Response&&) noexcept = default;
  Response& operator=(Response&&) noexcept = default;
  Response(::test_errorsyntax_parent::
               ParentUsesErrorSyntaxComposedCallWhichMayFailTopResponse payload)
      : payload_(std::move(payload)) {}
  ::test_errorsyntax_parent::
      ParentUsesErrorSyntaxComposedCallWhichMayFailTopResponse*
      operator->() {
    return &payload_;
  }
  const ::test_errorsyntax_parent::
      ParentUsesErrorSyntaxComposedCallWhichMayFailTopResponse*
      operator->() const {
    return &payload_;
  }
  ::test_errorsyntax_parent::
      ParentUsesErrorSyntaxComposedCallWhichMayFailTopResponse&
      operator*() {
    return payload_;
  }
  const ::test_errorsyntax_parent::
      ParentUsesErrorSyntaxComposedCallWhichMayFailTopResponse&
      operator*() const {
    return payload_;
  }

 private:
  ::test_errorsyntax_parent::
      ParentUsesErrorSyntaxComposedCallWhichMayFailTopResponse payload_;
};

template <>
struct ::fidl::internal::MessageTraits<::fidl::Response<
    ::test_errorsyntax::ExampleUseOfErrorSyntax::ComposedCallWhichMayFail>>
    final {
 public:
  static constexpr bool kHasPayload = true;
  using Payload = ::test_errorsyntax_parent::
      ParentUsesErrorSyntaxComposedCallWhichMayFailTopResponse;
};
namespace fidl {}  // namespace fidl
template <>
class ::fidl::internal::ClientCallbackTraits<
    ::test_errorsyntax::ExampleUseOfErrorSyntax::ComposedCallWhichMayFail>
    final {
 public:
  ClientCallbackTraits() = delete;
  using ResultCallback = ::fit::callback<void(
      ::fitx::result<
          ::fidl::Error,
          ::fidl::Response<::test_errorsyntax::ExampleUseOfErrorSyntax::
                               ComposedCallWhichMayFail>>&)>;
  using ResponseCallback = ::fit::callback<void(
      ::fidl::Response<::test_errorsyntax::ExampleUseOfErrorSyntax::
                           ComposedCallWhichMayFail>&)>;
};

template <>
class ::fidl::Response<
    ::test_errorsyntax::ExampleUseOfErrorSyntax::CallWhichMayFail>
    final
    : public ::fidl::internal::MessageBase<::fidl::Response<
          ::test_errorsyntax::ExampleUseOfErrorSyntax::CallWhichMayFail>> {
 public:
  Response() = default;
  ~Response() = default;
  Response(Response&&) noexcept = default;
  Response& operator=(Response&&) noexcept = default;
  Response(
      ::test_errorsyntax::ExampleUseOfErrorSyntaxCallWhichMayFailTopResponse
          payload)
      : payload_(std::move(payload)) {}
  ::test_errorsyntax::ExampleUseOfErrorSyntaxCallWhichMayFailTopResponse*
  operator->() {
    return &payload_;
  }
  const ::test_errorsyntax::ExampleUseOfErrorSyntaxCallWhichMayFailTopResponse*
  operator->() const {
    return &payload_;
  }
  ::test_errorsyntax::ExampleUseOfErrorSyntaxCallWhichMayFailTopResponse&
  operator*() {
    return payload_;
  }
  const ::test_errorsyntax::ExampleUseOfErrorSyntaxCallWhichMayFailTopResponse&
  operator*() const {
    return payload_;
  }

 private:
  ::test_errorsyntax::ExampleUseOfErrorSyntaxCallWhichMayFailTopResponse
      payload_;
};

template <>
struct ::fidl::internal::MessageTraits<::fidl::Response<
    ::test_errorsyntax::ExampleUseOfErrorSyntax::CallWhichMayFail>>
    final {
 public:
  static constexpr bool kHasPayload = true;
  using Payload =
      ::test_errorsyntax::ExampleUseOfErrorSyntaxCallWhichMayFailTopResponse;
};
template <>
class ::fidl::internal::ClientCallbackTraits<
    ::test_errorsyntax::ExampleUseOfErrorSyntax::CallWhichMayFail>
    final {
 public:
  ClientCallbackTraits() = delete;
  using ResultCallback = ::fit::callback<void(
      ::fitx::result<
          ::fidl::Error,
          ::fidl::Response<::test_errorsyntax::ExampleUseOfErrorSyntax::
                               CallWhichMayFail>>&)>;
  using ResponseCallback = ::fit::callback<void(
      ::fidl::Response<
          ::test_errorsyntax::ExampleUseOfErrorSyntax::CallWhichMayFail>&)>;
};

template <>
class ::fidl::internal::NaturalClientImpl<
    ::test_errorsyntax::ExampleUseOfErrorSyntax>
    final : public ::fidl::internal::NaturalClientBase {
 public:
  using NaturalClientBase::NaturalClientBase;
  void ComposedCallWhichMayFail(
      ::test_errorsyntax_parent::
          ParentUsesErrorSyntaxComposedCallWhichMayFailRequest&& payload,
      ::fidl::ClientCallback<::test_errorsyntax::ExampleUseOfErrorSyntax::
                                 ComposedCallWhichMayFail>&& _callback) const;

  void ComposedCallWhichMayFail(
      ::test_errorsyntax_parent::
          ParentUsesErrorSyntaxComposedCallWhichMayFailRequest&& payload,
      ::fidl::ClientResponseCallback<
          ::test_errorsyntax::ExampleUseOfErrorSyntax::
              ComposedCallWhichMayFail>&& _callback) const;

  void CallWhichMayFail(
      ::test_errorsyntax::ExampleUseOfErrorSyntaxCallWhichMayFailRequest&&
          payload,
      ::fidl::ClientCallback<
          ::test_errorsyntax::ExampleUseOfErrorSyntax::CallWhichMayFail>&&
          _callback) const;

  void CallWhichMayFail(
      ::test_errorsyntax::ExampleUseOfErrorSyntaxCallWhichMayFailRequest&&
          payload,
      ::fidl::ClientResponseCallback<
          ::test_errorsyntax::ExampleUseOfErrorSyntax::CallWhichMayFail>&&
          _callback) const;
};
namespace fidl {
#endif  // __Fuchsia__

}  // namespace fidl
#ifdef __Fuchsia__

template <>
class ::fidl::internal::NaturalEventHandlerInterface<
    ::test_errorsyntax::ExampleUseOfErrorSyntax> {
 public:
  NaturalEventHandlerInterface() = default;
  virtual ~NaturalEventHandlerInterface() = default;
};

template <>
class ::fidl::AsyncEventHandler<::test_errorsyntax::ExampleUseOfErrorSyntax>
    : public ::fidl::internal::NaturalEventHandlerInterface<
          ::test_errorsyntax::ExampleUseOfErrorSyntax>,
      public ::fidl::internal::AsyncEventHandler {
 public:
  AsyncEventHandler() = default;
};

template <>
class ::fidl::internal::NaturalEventDispatcher<
    ::test_errorsyntax::ExampleUseOfErrorSyntax>
    final : public ::fidl::internal::IncomingEventDispatcher<
                ::fidl::AsyncEventHandler<
                    ::test_errorsyntax::ExampleUseOfErrorSyntax>> {
 public:
  explicit NaturalEventDispatcher(
      ::fidl::AsyncEventHandler<::test_errorsyntax::ExampleUseOfErrorSyntax>*
          event_handler)
      : IncomingEventDispatcher(event_handler) {}

 private:
  std::optional<::fidl::UnbindInfo> DispatchEvent(
      ::fidl::IncomingMessage& msg,
      internal::IncomingTransportContext transport_context) override;
};
#endif  // __Fuchsia__
