// WARNING: This file is machine generated by fidlgen_cpp.

#pragma once

#include <fidl/test.nullable/cpp/natural_types.h>
#include <fidl/test.nullable/cpp/wire.h>
#include <lib/fidl/cpp/client.h>
#include <lib/fidl/cpp/internal/codable_base.h>
#include <lib/fidl/cpp/internal/message_extensions.h>
#include <lib/fidl/cpp/internal/natural_client_messenger.h>
#include <lib/fidl/cpp/natural_types.h>
#include <lib/fidl/cpp/unified_messaging.h>

namespace fidl {

#ifdef __Fuchsia__
}  // namespace fidl

template <>
class ::fidl::Response<::test_nullable::SimpleProtocol::Add> final
    : public ::fidl::internal::MessageBase<
          ::fidl::Response<::test_nullable::SimpleProtocol::Add>> {
 public:
  Response() = default;
  ~Response() = default;
  Response(Response&&) noexcept = default;
  Response& operator=(Response&&) noexcept = default;
  Response(::test_nullable::SimpleProtocolAddTopResponse payload)
      : payload_(std::move(payload)) {}
  ::test_nullable::SimpleProtocolAddTopResponse* operator->() {
    return &payload_;
  }
  const ::test_nullable::SimpleProtocolAddTopResponse* operator->() const {
    return &payload_;
  }
  ::test_nullable::SimpleProtocolAddTopResponse& operator*() {
    return payload_;
  }
  const ::test_nullable::SimpleProtocolAddTopResponse& operator*() const {
    return payload_;
  }

 private:
  ::test_nullable::SimpleProtocolAddTopResponse payload_;
};

template <>
struct ::fidl::internal::MessageTraits<
    ::fidl::Response<::test_nullable::SimpleProtocol::Add>>
    final {
 public:
  static constexpr bool kHasPayload = true;
  using Payload = ::test_nullable::SimpleProtocolAddTopResponse;
};
namespace fidl {}  // namespace fidl
template <>
class ::fidl::internal::ClientCallbackTraits<
    ::test_nullable::SimpleProtocol::Add>
    final {
 public:
  ClientCallbackTraits() = delete;
  using ResultCallback = ::fit::callback<void(
      ::fitx::result<::fidl::Error,
                     ::fidl::Response<::test_nullable::SimpleProtocol::Add>>&)>;
  using ResponseCallback = ::fit::callback<void(
      ::fidl::Response<::test_nullable::SimpleProtocol::Add>&)>;
};

template <>
class ::fidl::internal::NaturalClientImpl<::test_nullable::SimpleProtocol> final
    : public ::fidl::internal::NaturalClientBase {
 public:
  using NaturalClientBase::NaturalClientBase;
  void Add(::test_nullable::SimpleProtocolAddRequest&& payload,
           ::fidl::ClientCallback<::test_nullable::SimpleProtocol::Add>&&
               _callback) const;

  void Add(
      ::test_nullable::SimpleProtocolAddRequest&& payload,
      ::fidl::ClientResponseCallback<::test_nullable::SimpleProtocol::Add>&&
          _callback) const;
};
namespace fidl {
#endif  // __Fuchsia__

}  // namespace fidl
#ifdef __Fuchsia__

template <>
class ::fidl::internal::NaturalEventHandlerInterface<
    ::test_nullable::SimpleProtocol> {
 public:
  NaturalEventHandlerInterface() = default;
  virtual ~NaturalEventHandlerInterface() = default;
};

template <>
class ::fidl::AsyncEventHandler<::test_nullable::SimpleProtocol>
    : public ::fidl::internal::NaturalEventHandlerInterface<
          ::test_nullable::SimpleProtocol>,
      public ::fidl::internal::AsyncEventHandler {
 public:
  AsyncEventHandler() = default;
};

template <>
class ::fidl::internal::NaturalEventDispatcher<::test_nullable::SimpleProtocol>
    final : public ::fidl::internal::IncomingEventDispatcher<
                ::fidl::AsyncEventHandler<::test_nullable::SimpleProtocol>> {
 public:
  explicit NaturalEventDispatcher(
      ::fidl::AsyncEventHandler<::test_nullable::SimpleProtocol>* event_handler)
      : IncomingEventDispatcher(event_handler) {}

 private:
  std::optional<::fidl::UnbindInfo> DispatchEvent(
      ::fidl::IncomingMessage& msg,
      internal::IncomingTransportContext transport_context) override;
};
#endif  // __Fuchsia__
