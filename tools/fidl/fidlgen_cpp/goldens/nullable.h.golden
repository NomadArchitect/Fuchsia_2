// WARNING: This file is machine generated by fidlgen_cpp.

#pragma once

#include <fidl/test.nullable/cpp/wire.h>
#include <lib/fidl/cpp/client.h>
#include <lib/fidl/cpp/internal/codable_base.h>
#include <lib/fidl/cpp/internal/message_extensions.h>
#include <lib/fidl/cpp/internal/natural_client_messenger.h>
#include <lib/fidl/cpp/natural_types.h>
#include <lib/fidl/cpp/unified_messaging.h>
#include <test/nullable/cpp/natural_types.h>

namespace test_nullable {
class StructWithNullableVector;

class StructWithNullableUnion;

class StructWithNullableStruct;

class StructWithNullableString;

class StructWithNullableRequest;

class StructWithNullableProtocol;

class StructWithNullableHandle;

class SimpleProtocolAddTopResponse;

class SimpleProtocolAddRequest;

class Int32Wrapper;

using SimpleUnion = ::test::nullable::SimpleUnion;

}  // namespace test_nullable
template <>
struct ::fidl::internal::DesignatedInitializationProxy<
    ::test_nullable::StructWithNullableVector>
    final {
 public:
  ::fidl::VectorPtr<int32_t> val = {};
};

namespace test_nullable {
class StructWithNullableVector final
    : public ::fidl::internal::CodableBase<StructWithNullableVector> {
 private:
  friend ::fidl::internal::CodableBase<StructWithNullableVector>;
  StructWithNullableVector(::fidl::Decoder& decoder);
  template <typename Payload>
  friend auto ::fidl::internal::EncodeTransactionalMessageWithoutValidating(
      ::fidl::Encoder& encoder, Payload&& payload)
      -> ::fidl::HLCPPOutgoingMessage;
  void EncodeWithoutValidating(::fidl::Encoder& encoder, size_t offset);

 public:
  StructWithNullableVector() = default;
  StructWithNullableVector(::fidl::VectorPtr<int32_t> val)
      : storage_({std::move(val)}) {}
  StructWithNullableVector(::fidl::internal::DesignatedInitializationProxy<
                           ::test_nullable::StructWithNullableVector>
                               storage)
      : storage_(std::move(storage)) {}
  ~StructWithNullableVector() = default;
  StructWithNullableVector(StructWithNullableVector&&) noexcept = default;
  StructWithNullableVector& operator=(StructWithNullableVector&&) noexcept =
      default;

  const ::fidl::VectorPtr<int32_t>& val() const { return storage_.val; }

  ::fidl::VectorPtr<int32_t>& val() { return storage_.val; }

  StructWithNullableVector& set_val(::fidl::VectorPtr<int32_t> _value) {
    storage_.val = std::move(_value);
    return *this;
  }

 private:
  friend struct ::fidl::CodingTraits<::test_nullable::StructWithNullableVector>;

  ::fidl::internal::DesignatedInitializationProxy<
      ::test_nullable::StructWithNullableVector>
      storage_ = {};
};

}  // namespace test_nullable
template <>
struct ::fidl::internal::DesignatedInitializationProxy<
    ::test_nullable::StructWithNullableUnion>
    final {
 public:
  ::std::unique_ptr<::test_nullable::SimpleUnion> val = {};
};

namespace test_nullable {
class StructWithNullableUnion final
    : public ::fidl::internal::CodableBase<StructWithNullableUnion> {
 private:
  friend ::fidl::internal::CodableBase<StructWithNullableUnion>;
  StructWithNullableUnion(::fidl::Decoder& decoder);
  template <typename Payload>
  friend auto ::fidl::internal::EncodeTransactionalMessageWithoutValidating(
      ::fidl::Encoder& encoder, Payload&& payload)
      -> ::fidl::HLCPPOutgoingMessage;
  void EncodeWithoutValidating(::fidl::Encoder& encoder, size_t offset);

 public:
  StructWithNullableUnion() = default;
  StructWithNullableUnion(::std::unique_ptr<::test_nullable::SimpleUnion> val)
      : storage_({std::move(val)}) {}
  StructWithNullableUnion(::fidl::internal::DesignatedInitializationProxy<
                          ::test_nullable::StructWithNullableUnion>
                              storage)
      : storage_(std::move(storage)) {}
  ~StructWithNullableUnion() = default;
  StructWithNullableUnion(StructWithNullableUnion&&) noexcept = default;
  StructWithNullableUnion& operator=(StructWithNullableUnion&&) noexcept =
      default;

  const ::std::unique_ptr<::test_nullable::SimpleUnion>& val() const {
    return storage_.val;
  }

  ::std::unique_ptr<::test_nullable::SimpleUnion>& val() {
    return storage_.val;
  }

  StructWithNullableUnion& set_val(
      ::std::unique_ptr<::test_nullable::SimpleUnion> _value) {
    storage_.val = std::move(_value);
    return *this;
  }

 private:
  friend struct ::fidl::CodingTraits<::test_nullable::StructWithNullableUnion>;

  ::fidl::internal::DesignatedInitializationProxy<
      ::test_nullable::StructWithNullableUnion>
      storage_ = {};
};

}  // namespace test_nullable
template <>
struct ::fidl::internal::DesignatedInitializationProxy<
    ::test_nullable::StructWithNullableStruct>
    final {
 public:
  ::std::unique_ptr<::test_nullable::Int32Wrapper> val = {};
};

namespace test_nullable {
class StructWithNullableStruct final
    : public ::fidl::internal::CodableBase<StructWithNullableStruct> {
 private:
  friend ::fidl::internal::CodableBase<StructWithNullableStruct>;
  StructWithNullableStruct(::fidl::Decoder& decoder);
  template <typename Payload>
  friend auto ::fidl::internal::EncodeTransactionalMessageWithoutValidating(
      ::fidl::Encoder& encoder, Payload&& payload)
      -> ::fidl::HLCPPOutgoingMessage;
  void EncodeWithoutValidating(::fidl::Encoder& encoder, size_t offset);

 public:
  StructWithNullableStruct() = default;
  StructWithNullableStruct(::std::unique_ptr<::test_nullable::Int32Wrapper> val)
      : storage_({std::move(val)}) {}
  StructWithNullableStruct(::fidl::internal::DesignatedInitializationProxy<
                           ::test_nullable::StructWithNullableStruct>
                               storage)
      : storage_(std::move(storage)) {}
  ~StructWithNullableStruct() = default;
  StructWithNullableStruct(StructWithNullableStruct&&) noexcept = default;
  StructWithNullableStruct& operator=(StructWithNullableStruct&&) noexcept =
      default;

  const ::std::unique_ptr<::test_nullable::Int32Wrapper>& val() const {
    return storage_.val;
  }

  ::std::unique_ptr<::test_nullable::Int32Wrapper>& val() {
    return storage_.val;
  }

  StructWithNullableStruct& set_val(
      ::std::unique_ptr<::test_nullable::Int32Wrapper> _value) {
    storage_.val = std::move(_value);
    return *this;
  }

 private:
  friend struct ::fidl::CodingTraits<::test_nullable::StructWithNullableStruct>;

  ::fidl::internal::DesignatedInitializationProxy<
      ::test_nullable::StructWithNullableStruct>
      storage_ = {};
};

}  // namespace test_nullable
template <>
struct ::fidl::internal::DesignatedInitializationProxy<
    ::test_nullable::StructWithNullableString>
    final {
 public:
  ::fidl::StringPtr val = {};
};

namespace test_nullable {
class StructWithNullableString final
    : public ::fidl::internal::CodableBase<StructWithNullableString> {
 private:
  friend ::fidl::internal::CodableBase<StructWithNullableString>;
  StructWithNullableString(::fidl::Decoder& decoder);
  template <typename Payload>
  friend auto ::fidl::internal::EncodeTransactionalMessageWithoutValidating(
      ::fidl::Encoder& encoder, Payload&& payload)
      -> ::fidl::HLCPPOutgoingMessage;
  void EncodeWithoutValidating(::fidl::Encoder& encoder, size_t offset);

 public:
  StructWithNullableString() = default;
  StructWithNullableString(::fidl::StringPtr val)
      : storage_({std::move(val)}) {}
  StructWithNullableString(::fidl::internal::DesignatedInitializationProxy<
                           ::test_nullable::StructWithNullableString>
                               storage)
      : storage_(std::move(storage)) {}
  ~StructWithNullableString() = default;
  StructWithNullableString(StructWithNullableString&&) noexcept = default;
  StructWithNullableString& operator=(StructWithNullableString&&) noexcept =
      default;

  const ::fidl::StringPtr& val() const { return storage_.val; }

  ::fidl::StringPtr& val() { return storage_.val; }

  StructWithNullableString& set_val(::fidl::StringPtr _value) {
    storage_.val = std::move(_value);
    return *this;
  }

 private:
  friend struct ::fidl::CodingTraits<::test_nullable::StructWithNullableString>;

  ::fidl::internal::DesignatedInitializationProxy<
      ::test_nullable::StructWithNullableString>
      storage_ = {};
};

}  // namespace test_nullable
template <>
struct ::fidl::internal::DesignatedInitializationProxy<
    ::test_nullable::StructWithNullableRequest>
    final {
 public:
  ::fidl::InterfaceRequest<::test::nullable::SimpleProtocol> val = {};
};

namespace test_nullable {
class StructWithNullableRequest final
    : public ::fidl::internal::CodableBase<StructWithNullableRequest> {
 private:
  friend ::fidl::internal::CodableBase<StructWithNullableRequest>;
  StructWithNullableRequest(::fidl::Decoder& decoder);
  template <typename Payload>
  friend auto ::fidl::internal::EncodeTransactionalMessageWithoutValidating(
      ::fidl::Encoder& encoder, Payload&& payload)
      -> ::fidl::HLCPPOutgoingMessage;
  void EncodeWithoutValidating(::fidl::Encoder& encoder, size_t offset);

 public:
  StructWithNullableRequest() = default;
  StructWithNullableRequest(
      ::fidl::InterfaceRequest<::test::nullable::SimpleProtocol>&& val)
      : storage_({std::move(val)}) {}
  StructWithNullableRequest(::fidl::internal::DesignatedInitializationProxy<
                            ::test_nullable::StructWithNullableRequest>
                                storage)
      : storage_(std::move(storage)) {}
  ~StructWithNullableRequest() = default;
  StructWithNullableRequest(StructWithNullableRequest&&) noexcept = default;
  StructWithNullableRequest& operator=(StructWithNullableRequest&&) noexcept =
      default;
  StructWithNullableRequest(const StructWithNullableRequest&) noexcept = delete;
  StructWithNullableRequest& operator=(
      const StructWithNullableRequest&) noexcept = delete;

  const ::fidl::InterfaceRequest<::test::nullable::SimpleProtocol>& val()
      const {
    return storage_.val;
  }

  ::fidl::InterfaceRequest<::test::nullable::SimpleProtocol>& val() {
    return storage_.val;
  }

  StructWithNullableRequest& set_val(
      ::fidl::InterfaceRequest<::test::nullable::SimpleProtocol> _value) {
    storage_.val = std::move(_value);
    return *this;
  }

 private:
  friend struct ::fidl::CodingTraits<
      ::test_nullable::StructWithNullableRequest>;

  ::fidl::internal::DesignatedInitializationProxy<
      ::test_nullable::StructWithNullableRequest>
      storage_ = {};
};

}  // namespace test_nullable
template <>
struct ::fidl::internal::DesignatedInitializationProxy<
    ::test_nullable::StructWithNullableProtocol>
    final {
 public:
  ::fidl::InterfaceHandle<::test::nullable::SimpleProtocol> val = {};
};

namespace test_nullable {
class StructWithNullableProtocol final
    : public ::fidl::internal::CodableBase<StructWithNullableProtocol> {
 private:
  friend ::fidl::internal::CodableBase<StructWithNullableProtocol>;
  StructWithNullableProtocol(::fidl::Decoder& decoder);
  template <typename Payload>
  friend auto ::fidl::internal::EncodeTransactionalMessageWithoutValidating(
      ::fidl::Encoder& encoder, Payload&& payload)
      -> ::fidl::HLCPPOutgoingMessage;
  void EncodeWithoutValidating(::fidl::Encoder& encoder, size_t offset);

 public:
  StructWithNullableProtocol() = default;
  StructWithNullableProtocol(
      ::fidl::InterfaceHandle<::test::nullable::SimpleProtocol>&& val)
      : storage_({std::move(val)}) {}
  StructWithNullableProtocol(::fidl::internal::DesignatedInitializationProxy<
                             ::test_nullable::StructWithNullableProtocol>
                                 storage)
      : storage_(std::move(storage)) {}
  ~StructWithNullableProtocol() = default;
  StructWithNullableProtocol(StructWithNullableProtocol&&) noexcept = default;
  StructWithNullableProtocol& operator=(StructWithNullableProtocol&&) noexcept =
      default;
  StructWithNullableProtocol(const StructWithNullableProtocol&) noexcept =
      delete;
  StructWithNullableProtocol& operator=(
      const StructWithNullableProtocol&) noexcept = delete;

  const ::fidl::InterfaceHandle<::test::nullable::SimpleProtocol>& val() const {
    return storage_.val;
  }

  ::fidl::InterfaceHandle<::test::nullable::SimpleProtocol>& val() {
    return storage_.val;
  }

  StructWithNullableProtocol& set_val(
      ::fidl::InterfaceHandle<::test::nullable::SimpleProtocol> _value) {
    storage_.val = std::move(_value);
    return *this;
  }

 private:
  friend struct ::fidl::CodingTraits<
      ::test_nullable::StructWithNullableProtocol>;

  ::fidl::internal::DesignatedInitializationProxy<
      ::test_nullable::StructWithNullableProtocol>
      storage_ = {};
};

}  // namespace test_nullable
template <>
struct ::fidl::internal::DesignatedInitializationProxy<
    ::test_nullable::StructWithNullableHandle>
    final {
 public:
  ::zx::vmo val = {};
};

namespace test_nullable {
class StructWithNullableHandle final
    : public ::fidl::internal::CodableBase<StructWithNullableHandle> {
 private:
  friend ::fidl::internal::CodableBase<StructWithNullableHandle>;
  StructWithNullableHandle(::fidl::Decoder& decoder);
  template <typename Payload>
  friend auto ::fidl::internal::EncodeTransactionalMessageWithoutValidating(
      ::fidl::Encoder& encoder, Payload&& payload)
      -> ::fidl::HLCPPOutgoingMessage;
  void EncodeWithoutValidating(::fidl::Encoder& encoder, size_t offset);

 public:
  StructWithNullableHandle() = default;
  StructWithNullableHandle(::zx::vmo&& val) : storage_({std::move(val)}) {}
  StructWithNullableHandle(::fidl::internal::DesignatedInitializationProxy<
                           ::test_nullable::StructWithNullableHandle>
                               storage)
      : storage_(std::move(storage)) {}
  ~StructWithNullableHandle() = default;
  StructWithNullableHandle(StructWithNullableHandle&&) noexcept = default;
  StructWithNullableHandle& operator=(StructWithNullableHandle&&) noexcept =
      default;
  StructWithNullableHandle(const StructWithNullableHandle&) noexcept = delete;
  StructWithNullableHandle& operator=(
      const StructWithNullableHandle&) noexcept = delete;

  const ::zx::vmo& val() const { return storage_.val; }

  ::zx::vmo& val() { return storage_.val; }

  StructWithNullableHandle& set_val(::zx::vmo _value) {
    storage_.val = std::move(_value);
    return *this;
  }

 private:
  friend struct ::fidl::CodingTraits<::test_nullable::StructWithNullableHandle>;

  ::fidl::internal::DesignatedInitializationProxy<
      ::test_nullable::StructWithNullableHandle>
      storage_ = {};
};

}  // namespace test_nullable
template <>
struct ::fidl::internal::DesignatedInitializationProxy<
    ::test_nullable::SimpleProtocolAddTopResponse>
    final {
 public:
  int32_t sum = {};
};

namespace test_nullable {
class SimpleProtocolAddTopResponse final
    : public ::fidl::internal::CodableBase<SimpleProtocolAddTopResponse> {
 private:
  friend ::fidl::internal::CodableBase<SimpleProtocolAddTopResponse>;
  SimpleProtocolAddTopResponse(::fidl::Decoder& decoder);
  template <typename Payload>
  friend auto ::fidl::internal::EncodeTransactionalMessageWithoutValidating(
      ::fidl::Encoder& encoder, Payload&& payload)
      -> ::fidl::HLCPPOutgoingMessage;
  void EncodeWithoutValidating(::fidl::Encoder& encoder, size_t offset);

 public:
  SimpleProtocolAddTopResponse() = default;
  SimpleProtocolAddTopResponse(int32_t sum) : storage_({sum}) {}
  SimpleProtocolAddTopResponse(::fidl::internal::DesignatedInitializationProxy<
                               ::test_nullable::SimpleProtocolAddTopResponse>
                                   storage)
      : storage_(std::move(storage)) {}
  ~SimpleProtocolAddTopResponse() = default;
  SimpleProtocolAddTopResponse(SimpleProtocolAddTopResponse&&) noexcept =
      default;
  SimpleProtocolAddTopResponse& operator=(
      SimpleProtocolAddTopResponse&&) noexcept = default;

  const int32_t& sum() const { return storage_.sum; }

  int32_t& sum() { return storage_.sum; }

  SimpleProtocolAddTopResponse& set_sum(int32_t _value) {
    storage_.sum = std::move(_value);
    return *this;
  }

 private:
  friend struct ::fidl::CodingTraits<
      ::test_nullable::SimpleProtocolAddTopResponse>;

  ::fidl::internal::DesignatedInitializationProxy<
      ::test_nullable::SimpleProtocolAddTopResponse>
      storage_ = {};
};

}  // namespace test_nullable
template <>
struct ::fidl::internal::DesignatedInitializationProxy<
    ::test_nullable::SimpleProtocolAddRequest>
    final {
 public:
  int32_t a = {};

  int32_t b = {};
};

namespace test_nullable {
class SimpleProtocolAddRequest final
    : public ::fidl::internal::CodableBase<SimpleProtocolAddRequest> {
 private:
  friend ::fidl::internal::CodableBase<SimpleProtocolAddRequest>;
  SimpleProtocolAddRequest(::fidl::Decoder& decoder);
  template <typename Payload>
  friend auto ::fidl::internal::EncodeTransactionalMessageWithoutValidating(
      ::fidl::Encoder& encoder, Payload&& payload)
      -> ::fidl::HLCPPOutgoingMessage;
  void EncodeWithoutValidating(::fidl::Encoder& encoder, size_t offset);

 public:
  SimpleProtocolAddRequest() = default;
  SimpleProtocolAddRequest(int32_t a, int32_t b) : storage_({a, b}) {}
  SimpleProtocolAddRequest(::fidl::internal::DesignatedInitializationProxy<
                           ::test_nullable::SimpleProtocolAddRequest>
                               storage)
      : storage_(std::move(storage)) {}
  ~SimpleProtocolAddRequest() = default;
  SimpleProtocolAddRequest(SimpleProtocolAddRequest&&) noexcept = default;
  SimpleProtocolAddRequest& operator=(SimpleProtocolAddRequest&&) noexcept =
      default;

  const int32_t& a() const { return storage_.a; }

  int32_t& a() { return storage_.a; }

  SimpleProtocolAddRequest& set_a(int32_t _value) {
    storage_.a = std::move(_value);
    return *this;
  }

  const int32_t& b() const { return storage_.b; }

  int32_t& b() { return storage_.b; }

  SimpleProtocolAddRequest& set_b(int32_t _value) {
    storage_.b = std::move(_value);
    return *this;
  }

 private:
  friend struct ::fidl::CodingTraits<::test_nullable::SimpleProtocolAddRequest>;

  ::fidl::internal::DesignatedInitializationProxy<
      ::test_nullable::SimpleProtocolAddRequest>
      storage_ = {};
};

}  // namespace test_nullable
template <>
struct ::fidl::internal::DesignatedInitializationProxy<
    ::test_nullable::Int32Wrapper>
    final {
 public:
  int32_t val = {};
};

namespace test_nullable {
class Int32Wrapper final : public ::fidl::internal::CodableBase<Int32Wrapper> {
 private:
  friend ::fidl::internal::CodableBase<Int32Wrapper>;
  Int32Wrapper(::fidl::Decoder& decoder);
  template <typename Payload>
  friend auto ::fidl::internal::EncodeTransactionalMessageWithoutValidating(
      ::fidl::Encoder& encoder, Payload&& payload)
      -> ::fidl::HLCPPOutgoingMessage;
  void EncodeWithoutValidating(::fidl::Encoder& encoder, size_t offset);

 public:
  Int32Wrapper() = default;
  Int32Wrapper(int32_t val) : storage_({val}) {}
  Int32Wrapper(::fidl::internal::DesignatedInitializationProxy<
               ::test_nullable::Int32Wrapper>
                   storage)
      : storage_(std::move(storage)) {}
  ~Int32Wrapper() = default;
  Int32Wrapper(Int32Wrapper&&) noexcept = default;
  Int32Wrapper& operator=(Int32Wrapper&&) noexcept = default;

  const int32_t& val() const { return storage_.val; }

  int32_t& val() { return storage_.val; }

  Int32Wrapper& set_val(int32_t _value) {
    storage_.val = std::move(_value);
    return *this;
  }

 private:
  friend struct ::fidl::CodingTraits<::test_nullable::Int32Wrapper>;

  ::fidl::internal::DesignatedInitializationProxy<::test_nullable::Int32Wrapper>
      storage_ = {};
};

}  // namespace test_nullable
namespace fidl {
#ifdef __Fuchsia__
extern "C" const fidl_type_t test_nullable_StructWithNullableVectorTable;

template <>
struct IsFidlType<::test_nullable::StructWithNullableVector>
    : public std::true_type {};

template <>
struct ::fidl::internal::TypeTraits<::test_nullable::StructWithNullableVector>
    final {
 public:
  static constexpr const fidl_type_t* kCodingTable =
      &test_nullable_StructWithNullableVectorTable;
};

template <>
struct CodingTraits<::test_nullable::StructWithNullableVector> {
  static constexpr size_t inline_size_v1_no_ee = 16;
  static constexpr size_t inline_size_v2 = 16;

  template <class EncoderImpl>
  static void Encode(
      EncoderImpl* encoder, ::test_nullable::StructWithNullableVector* value,
      size_t offset,
      cpp17::optional<HandleInformation> maybe_handle_info = cpp17::nullopt) {
    [[maybe_unused]] uint32_t field_offset;
    field_offset =
        encoder->wire_format() == ::fidl::internal::WireFormatVersion::kV1 ? 0
                                                                           : 0;
    ::fidl::Encode(encoder, &value->storage_.val, offset + field_offset);
  }

  template <typename DecoderImpl>
  static void Decode(DecoderImpl* decoder,
                     ::test_nullable::StructWithNullableVector* value,
                     size_t offset) {
    ::fidl::Decode(decoder, &value->storage_.val, offset + 0);
  }
};
#endif  // __Fuchsia__

#ifdef __Fuchsia__
extern "C" const fidl_type_t test_nullable_StructWithNullableUnionTable;

template <>
struct IsFidlType<::test_nullable::StructWithNullableUnion>
    : public std::true_type {};

template <>
struct ::fidl::internal::TypeTraits<::test_nullable::StructWithNullableUnion>
    final {
 public:
  static constexpr const fidl_type_t* kCodingTable =
      &test_nullable_StructWithNullableUnionTable;
};

template <>
struct CodingTraits<::test_nullable::StructWithNullableUnion> {
  static constexpr size_t inline_size_v1_no_ee = 24;
  static constexpr size_t inline_size_v2 = 16;

  template <class EncoderImpl>
  static void Encode(
      EncoderImpl* encoder, ::test_nullable::StructWithNullableUnion* value,
      size_t offset,
      cpp17::optional<HandleInformation> maybe_handle_info = cpp17::nullopt) {
    [[maybe_unused]] uint32_t field_offset;
    field_offset =
        encoder->wire_format() == ::fidl::internal::WireFormatVersion::kV1 ? 0
                                                                           : 0;
    ::fidl::Encode(encoder, &value->storage_.val, offset + field_offset);
  }

  template <typename DecoderImpl>
  static void Decode(DecoderImpl* decoder,
                     ::test_nullable::StructWithNullableUnion* value,
                     size_t offset) {
    ::fidl::Decode(decoder, &value->storage_.val, offset + 0);
  }
};
#endif  // __Fuchsia__

#ifdef __Fuchsia__
extern "C" const fidl_type_t test_nullable_StructWithNullableStructTable;

template <>
struct IsFidlType<::test_nullable::StructWithNullableStruct>
    : public std::true_type {};

template <>
struct ::fidl::internal::TypeTraits<::test_nullable::StructWithNullableStruct>
    final {
 public:
  static constexpr const fidl_type_t* kCodingTable =
      &test_nullable_StructWithNullableStructTable;
};

template <>
struct CodingTraits<::test_nullable::StructWithNullableStruct> {
  static constexpr size_t inline_size_v1_no_ee = 8;
  static constexpr size_t inline_size_v2 = 8;

  template <class EncoderImpl>
  static void Encode(
      EncoderImpl* encoder, ::test_nullable::StructWithNullableStruct* value,
      size_t offset,
      cpp17::optional<HandleInformation> maybe_handle_info = cpp17::nullopt) {
    [[maybe_unused]] uint32_t field_offset;
    field_offset =
        encoder->wire_format() == ::fidl::internal::WireFormatVersion::kV1 ? 0
                                                                           : 0;
    ::fidl::Encode(encoder, &value->storage_.val, offset + field_offset);
  }

  template <typename DecoderImpl>
  static void Decode(DecoderImpl* decoder,
                     ::test_nullable::StructWithNullableStruct* value,
                     size_t offset) {
    ::fidl::Decode(decoder, &value->storage_.val, offset + 0);
  }
};
#endif  // __Fuchsia__

#ifdef __Fuchsia__
extern "C" const fidl_type_t test_nullable_StructWithNullableStringTable;

template <>
struct IsFidlType<::test_nullable::StructWithNullableString>
    : public std::true_type {};

template <>
struct ::fidl::internal::TypeTraits<::test_nullable::StructWithNullableString>
    final {
 public:
  static constexpr const fidl_type_t* kCodingTable =
      &test_nullable_StructWithNullableStringTable;
};

template <>
struct CodingTraits<::test_nullable::StructWithNullableString> {
  static constexpr size_t inline_size_v1_no_ee = 16;
  static constexpr size_t inline_size_v2 = 16;

  template <class EncoderImpl>
  static void Encode(
      EncoderImpl* encoder, ::test_nullable::StructWithNullableString* value,
      size_t offset,
      cpp17::optional<HandleInformation> maybe_handle_info = cpp17::nullopt) {
    [[maybe_unused]] uint32_t field_offset;
    field_offset =
        encoder->wire_format() == ::fidl::internal::WireFormatVersion::kV1 ? 0
                                                                           : 0;
    ::fidl::Encode(encoder, &value->storage_.val, offset + field_offset);
  }

  template <typename DecoderImpl>
  static void Decode(DecoderImpl* decoder,
                     ::test_nullable::StructWithNullableString* value,
                     size_t offset) {
    ::fidl::Decode(decoder, &value->storage_.val, offset + 0);
  }
};
#endif  // __Fuchsia__

#ifdef __Fuchsia__
extern "C" const fidl_type_t test_nullable_StructWithNullableRequestTable;

template <>
struct IsResource<::test_nullable::StructWithNullableRequest>
    : public std::true_type {};
template <>
struct IsFidlType<::test_nullable::StructWithNullableRequest>
    : public std::true_type {};

template <>
struct ::fidl::internal::TypeTraits<::test_nullable::StructWithNullableRequest>
    final {
 public:
  static constexpr const fidl_type_t* kCodingTable =
      &test_nullable_StructWithNullableRequestTable;
};

template <>
struct CodingTraits<::test_nullable::StructWithNullableRequest> {
  static constexpr size_t inline_size_v1_no_ee = 4;
  static constexpr size_t inline_size_v2 = 4;

  template <class EncoderImpl>
  static void Encode(
      EncoderImpl* encoder, ::test_nullable::StructWithNullableRequest* value,
      size_t offset,
      cpp17::optional<HandleInformation> maybe_handle_info = cpp17::nullopt) {
    [[maybe_unused]] uint32_t field_offset;
    field_offset =
        encoder->wire_format() == ::fidl::internal::WireFormatVersion::kV1 ? 0
                                                                           : 0;
    ::fidl::Encode(encoder, &value->storage_.val, offset + field_offset,
                   ::fidl::HandleInformation{
                       .object_type = ZX_OBJ_TYPE_CHANNEL,
                       .rights = ZX_DEFAULT_CHANNEL_RIGHTS,
                   });
  }

  template <typename DecoderImpl>
  static void Decode(DecoderImpl* decoder,
                     ::test_nullable::StructWithNullableRequest* value,
                     size_t offset) {
    ::fidl::Decode(decoder, &value->storage_.val, offset + 0);
  }
};
#endif  // __Fuchsia__

#ifdef __Fuchsia__
extern "C" const fidl_type_t test_nullable_StructWithNullableProtocolTable;

template <>
struct IsResource<::test_nullable::StructWithNullableProtocol>
    : public std::true_type {};
template <>
struct IsFidlType<::test_nullable::StructWithNullableProtocol>
    : public std::true_type {};

template <>
struct ::fidl::internal::TypeTraits<::test_nullable::StructWithNullableProtocol>
    final {
 public:
  static constexpr const fidl_type_t* kCodingTable =
      &test_nullable_StructWithNullableProtocolTable;
};

template <>
struct CodingTraits<::test_nullable::StructWithNullableProtocol> {
  static constexpr size_t inline_size_v1_no_ee = 4;
  static constexpr size_t inline_size_v2 = 4;

  template <class EncoderImpl>
  static void Encode(
      EncoderImpl* encoder, ::test_nullable::StructWithNullableProtocol* value,
      size_t offset,
      cpp17::optional<HandleInformation> maybe_handle_info = cpp17::nullopt) {
    [[maybe_unused]] uint32_t field_offset;
    field_offset =
        encoder->wire_format() == ::fidl::internal::WireFormatVersion::kV1 ? 0
                                                                           : 0;
    ::fidl::Encode(encoder, &value->storage_.val, offset + field_offset,
                   ::fidl::HandleInformation{
                       .object_type = ZX_OBJ_TYPE_CHANNEL,
                       .rights = ZX_DEFAULT_CHANNEL_RIGHTS,
                   });
  }

  template <typename DecoderImpl>
  static void Decode(DecoderImpl* decoder,
                     ::test_nullable::StructWithNullableProtocol* value,
                     size_t offset) {
    ::fidl::Decode(decoder, &value->storage_.val, offset + 0);
  }
};
#endif  // __Fuchsia__

#ifdef __Fuchsia__
extern "C" const fidl_type_t test_nullable_StructWithNullableHandleTable;

template <>
struct IsResource<::test_nullable::StructWithNullableHandle>
    : public std::true_type {};
template <>
struct IsFidlType<::test_nullable::StructWithNullableHandle>
    : public std::true_type {};

template <>
struct ::fidl::internal::TypeTraits<::test_nullable::StructWithNullableHandle>
    final {
 public:
  static constexpr const fidl_type_t* kCodingTable =
      &test_nullable_StructWithNullableHandleTable;
};

template <>
struct CodingTraits<::test_nullable::StructWithNullableHandle> {
  static constexpr size_t inline_size_v1_no_ee = 4;
  static constexpr size_t inline_size_v2 = 4;

  template <class EncoderImpl>
  static void Encode(
      EncoderImpl* encoder, ::test_nullable::StructWithNullableHandle* value,
      size_t offset,
      cpp17::optional<HandleInformation> maybe_handle_info = cpp17::nullopt) {
    [[maybe_unused]] uint32_t field_offset;
    field_offset =
        encoder->wire_format() == ::fidl::internal::WireFormatVersion::kV1 ? 0
                                                                           : 0;
    ::fidl::Encode(encoder, &value->storage_.val, offset + field_offset,
                   ::fidl::HandleInformation{
                       .object_type = ZX_OBJ_TYPE_VMO,
                       .rights = 0x80000000,
                   });
  }

  template <typename DecoderImpl>
  static void Decode(DecoderImpl* decoder,
                     ::test_nullable::StructWithNullableHandle* value,
                     size_t offset) {
    ::fidl::Decode(decoder, &value->storage_.val, offset + 0);
  }
};
#endif  // __Fuchsia__

#ifdef __Fuchsia__
extern "C" const fidl_type_t test_nullable_SimpleProtocolAddTopResponseTable;

template <>
struct IsFidlType<::test_nullable::SimpleProtocolAddTopResponse>
    : public std::true_type {};

template <>
struct ::fidl::internal::TypeTraits<
    ::test_nullable::SimpleProtocolAddTopResponse>
    final {
 public:
  static constexpr const fidl_type_t* kCodingTable =
      &test_nullable_SimpleProtocolAddTopResponseTable;
};

template <>
struct CodingTraits<::test_nullable::SimpleProtocolAddTopResponse> {
  static constexpr size_t inline_size_v1_no_ee = 8;
  static constexpr size_t inline_size_v2 = 8;

  template <class EncoderImpl>
  static void Encode(
      EncoderImpl* encoder,
      ::test_nullable::SimpleProtocolAddTopResponse* value, size_t offset,
      cpp17::optional<HandleInformation> maybe_handle_info = cpp17::nullopt) {
    [[maybe_unused]] uint32_t field_offset;
    field_offset =
        encoder->wire_format() == ::fidl::internal::WireFormatVersion::kV1 ? 0
                                                                           : 0;
    ::fidl::Encode(encoder, &value->storage_.sum, offset + field_offset);
  }

  template <typename DecoderImpl>
  static void Decode(DecoderImpl* decoder,
                     ::test_nullable::SimpleProtocolAddTopResponse* value,
                     size_t offset) {
    ::fidl::Decode(decoder, &value->storage_.sum, offset + 0);
  }
};
#endif  // __Fuchsia__

#ifdef __Fuchsia__
extern "C" const fidl_type_t test_nullable_SimpleProtocolAddRequestTable;

template <>
struct IsFidlType<::test_nullable::SimpleProtocolAddRequest>
    : public std::true_type {};

template <>
struct ::fidl::internal::TypeTraits<::test_nullable::SimpleProtocolAddRequest>
    final {
 public:
  static constexpr const fidl_type_t* kCodingTable =
      &test_nullable_SimpleProtocolAddRequestTable;
};

template <>
struct CodingTraits<::test_nullable::SimpleProtocolAddRequest> {
  static constexpr size_t inline_size_v1_no_ee = 8;
  static constexpr size_t inline_size_v2 = 8;

  template <class EncoderImpl>
  static void Encode(
      EncoderImpl* encoder, ::test_nullable::SimpleProtocolAddRequest* value,
      size_t offset,
      cpp17::optional<HandleInformation> maybe_handle_info = cpp17::nullopt) {
    [[maybe_unused]] uint32_t field_offset;
    field_offset =
        encoder->wire_format() == ::fidl::internal::WireFormatVersion::kV1 ? 0
                                                                           : 0;
    ::fidl::Encode(encoder, &value->storage_.a, offset + field_offset);
    field_offset =
        encoder->wire_format() == ::fidl::internal::WireFormatVersion::kV1 ? 4
                                                                           : 4;
    ::fidl::Encode(encoder, &value->storage_.b, offset + field_offset);
  }

  template <typename DecoderImpl>
  static void Decode(DecoderImpl* decoder,
                     ::test_nullable::SimpleProtocolAddRequest* value,
                     size_t offset) {
    ::fidl::Decode(decoder, &value->storage_.a, offset + 0);
    ::fidl::Decode(decoder, &value->storage_.b, offset + 4);
  }
};
#endif  // __Fuchsia__

#ifdef __Fuchsia__
extern "C" const fidl_type_t test_nullable_Int32WrapperTable;

template <>
struct IsFidlType<::test_nullable::Int32Wrapper> : public std::true_type {};

template <>
struct ::fidl::internal::TypeTraits<::test_nullable::Int32Wrapper> final {
 public:
  static constexpr const fidl_type_t* kCodingTable =
      &test_nullable_Int32WrapperTable;
};

template <>
struct CodingTraits<::test_nullable::Int32Wrapper> {
  static constexpr size_t inline_size_v1_no_ee = 4;
  static constexpr size_t inline_size_v2 = 4;

  template <class EncoderImpl>
  static void Encode(
      EncoderImpl* encoder, ::test_nullable::Int32Wrapper* value, size_t offset,
      cpp17::optional<HandleInformation> maybe_handle_info = cpp17::nullopt) {
    [[maybe_unused]] uint32_t field_offset;
    field_offset =
        encoder->wire_format() == ::fidl::internal::WireFormatVersion::kV1 ? 0
                                                                           : 0;
    ::fidl::Encode(encoder, &value->storage_.val, offset + field_offset);
  }

  template <typename DecoderImpl>
  static void Decode(DecoderImpl* decoder, ::test_nullable::Int32Wrapper* value,
                     size_t offset) {
    ::fidl::Decode(decoder, &value->storage_.val, offset + 0);
  }
};
#endif  // __Fuchsia__

#ifdef __Fuchsia__
}  // namespace fidl

template <>
class ::fidl::Response<::test_nullable::SimpleProtocol::Add> final
    : public ::fidl::internal::MessageBase<
          ::fidl::Response<::test_nullable::SimpleProtocol::Add>> {
 public:
  Response() = default;
  ~Response() = default;
  Response(Response&&) noexcept = default;
  Response& operator=(Response&&) noexcept = default;
  Response(::test_nullable::SimpleProtocolAddTopResponse payload)
      : payload_(std::move(payload)) {}
  ::test_nullable::SimpleProtocolAddTopResponse* operator->() {
    return &payload_;
  }
  const ::test_nullable::SimpleProtocolAddTopResponse* operator->() const {
    return &payload_;
  }
  ::test_nullable::SimpleProtocolAddTopResponse& operator*() {
    return payload_;
  }
  const ::test_nullable::SimpleProtocolAddTopResponse& operator*() const {
    return payload_;
  }

 private:
  ::test_nullable::SimpleProtocolAddTopResponse payload_;
};

template <>
struct ::fidl::internal::MessageTraits<
    ::fidl::Response<::test_nullable::SimpleProtocol::Add>>
    final {
 public:
  static constexpr bool kHasPayload = true;
  using Payload = ::test_nullable::SimpleProtocolAddTopResponse;
};
namespace fidl {}  // namespace fidl
template <>
class ::fidl::internal::ClientCallbackTraits<
    ::test_nullable::SimpleProtocol::Add>
    final {
 public:
  ClientCallbackTraits() = delete;
  using ResultCallback = ::fit::callback<void(
      ::fitx::result<::fidl::Error,
                     ::fidl::Response<::test_nullable::SimpleProtocol::Add>>&)>;
  using ResponseCallback = ::fit::callback<void(
      ::fidl::Response<::test_nullable::SimpleProtocol::Add>&)>;
};

template <>
class ::fidl::internal::NaturalClientImpl<::test_nullable::SimpleProtocol> final
    : public ::fidl::internal::NaturalClientBase {
 public:
  using NaturalClientBase::NaturalClientBase;
  void Add(::test_nullable::SimpleProtocolAddRequest&& payload,
           ::fidl::ClientCallback<::test_nullable::SimpleProtocol::Add>&&
               _callback) const;

  void Add(
      ::test_nullable::SimpleProtocolAddRequest&& payload,
      ::fidl::ClientResponseCallback<::test_nullable::SimpleProtocol::Add>&&
          _callback) const;
};
namespace fidl {
#endif  // __Fuchsia__

}  // namespace fidl
