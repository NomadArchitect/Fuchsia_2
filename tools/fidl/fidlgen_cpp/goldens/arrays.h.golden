// WARNING: This file is machine generated by fidlgen_cpp.

#pragma once

#include <fidl/test.arrays/cpp/wire.h>
#include <lib/fidl/cpp/client.h>
#include <lib/fidl/cpp/internal/codable_base.h>
#include <lib/fidl/cpp/internal/message_extensions.h>
#include <lib/fidl/cpp/internal/natural_client_messenger.h>
#include <lib/fidl/cpp/natural_types.h>
#include <lib/fidl/cpp/unified_messaging.h>
#include <test/arrays/cpp/natural_types.h>

namespace test_arrays {
class StructSmallArray;

class StructLargeArray;

using UnionSmallArray = ::test::arrays::UnionSmallArray;

using UnionLargeArray = ::test::arrays::UnionLargeArray;

using TableSmallArray = ::test::arrays::TableSmallArray;

using TableLargeArray = ::test::arrays::TableLargeArray;

}  // namespace test_arrays
template <>
struct ::fidl::internal::DesignatedInitializationProxy<
    ::test_arrays::StructSmallArray>
    final {
 public:
  ::std::array<uint32_t, 2> a = {};
};

namespace test_arrays {
class StructSmallArray final
    : public ::fidl::internal::CodableBase<StructSmallArray> {
 private:
  friend ::fidl::internal::CodableBase<StructSmallArray>;
  StructSmallArray(::fidl::Decoder& decoder);
  template <typename Payload>
  friend auto ::fidl::internal::EncodeTransactionalMessageWithoutValidating(
      ::fidl::Encoder& encoder, Payload&& payload)
      -> ::fidl::HLCPPOutgoingMessage;
  void EncodeWithoutValidating(::fidl::Encoder& encoder, size_t offset);

 public:
  StructSmallArray() = default;
  StructSmallArray(::std::array<uint32_t, 2> a) : storage_({std::move(a)}) {}
  StructSmallArray(::fidl::internal::DesignatedInitializationProxy<
                   ::test_arrays::StructSmallArray>
                       storage)
      : storage_(std::move(storage)) {}
  ~StructSmallArray() = default;
  StructSmallArray(StructSmallArray&&) noexcept = default;
  StructSmallArray& operator=(StructSmallArray&&) noexcept = default;

  const ::std::array<uint32_t, 2>& a() const { return storage_.a; }

  ::std::array<uint32_t, 2>& a() { return storage_.a; }

  StructSmallArray& set_a(::std::array<uint32_t, 2> _value) {
    storage_.a = std::move(_value);
    return *this;
  }

 private:
  friend struct ::fidl::CodingTraits<::test_arrays::StructSmallArray>;

  ::fidl::internal::DesignatedInitializationProxy<
      ::test_arrays::StructSmallArray>
      storage_ = {};
};

}  // namespace test_arrays
template <>
struct ::fidl::internal::DesignatedInitializationProxy<
    ::test_arrays::StructLargeArray>
    final {
 public:
  ::std::array<uint32_t, 100> a = {};
};

namespace test_arrays {
class StructLargeArray final
    : public ::fidl::internal::CodableBase<StructLargeArray> {
 private:
  friend ::fidl::internal::CodableBase<StructLargeArray>;
  StructLargeArray(::fidl::Decoder& decoder);
  template <typename Payload>
  friend auto ::fidl::internal::EncodeTransactionalMessageWithoutValidating(
      ::fidl::Encoder& encoder, Payload&& payload)
      -> ::fidl::HLCPPOutgoingMessage;
  void EncodeWithoutValidating(::fidl::Encoder& encoder, size_t offset);

 public:
  StructLargeArray() = default;
  StructLargeArray(::std::array<uint32_t, 100> a) : storage_({std::move(a)}) {}
  StructLargeArray(::fidl::internal::DesignatedInitializationProxy<
                   ::test_arrays::StructLargeArray>
                       storage)
      : storage_(std::move(storage)) {}
  ~StructLargeArray() = default;
  StructLargeArray(StructLargeArray&&) noexcept = default;
  StructLargeArray& operator=(StructLargeArray&&) noexcept = default;

  const ::std::array<uint32_t, 100>& a() const { return storage_.a; }

  ::std::array<uint32_t, 100>& a() { return storage_.a; }

  StructLargeArray& set_a(::std::array<uint32_t, 100> _value) {
    storage_.a = std::move(_value);
    return *this;
  }

 private:
  friend struct ::fidl::CodingTraits<::test_arrays::StructLargeArray>;

  ::fidl::internal::DesignatedInitializationProxy<
      ::test_arrays::StructLargeArray>
      storage_ = {};
};

}  // namespace test_arrays
namespace fidl {
#ifdef __Fuchsia__
extern "C" const fidl_type_t test_arrays_StructSmallArrayTable;

template <>
struct IsFidlType<::test_arrays::StructSmallArray> : public std::true_type {};

template <>
struct ::fidl::internal::TypeTraits<::test_arrays::StructSmallArray> final {
 public:
  static constexpr const fidl_type_t* kCodingTable =
      &test_arrays_StructSmallArrayTable;
};

template <>
struct CodingTraits<::test_arrays::StructSmallArray> {
  static constexpr size_t inline_size_v1_no_ee = 8;
  static constexpr size_t inline_size_v2 = 8;

  template <class EncoderImpl>
  static void Encode(
      EncoderImpl* encoder, ::test_arrays::StructSmallArray* value,
      size_t offset,
      cpp17::optional<HandleInformation> maybe_handle_info = cpp17::nullopt) {
    [[maybe_unused]] uint32_t field_offset;
    field_offset =
        encoder->wire_format() == ::fidl::internal::WireFormatVersion::kV1 ? 0
                                                                           : 0;
    ::fidl::Encode(encoder, &value->storage_.a, offset + field_offset);
  }

  template <typename DecoderImpl>
  static void Decode(DecoderImpl* decoder,
                     ::test_arrays::StructSmallArray* value, size_t offset) {
    ::fidl::Decode(decoder, &value->storage_.a, offset + 0);
  }
};
#endif  // __Fuchsia__

#ifdef __Fuchsia__
extern "C" const fidl_type_t test_arrays_StructLargeArrayTable;

template <>
struct IsFidlType<::test_arrays::StructLargeArray> : public std::true_type {};

template <>
struct ::fidl::internal::TypeTraits<::test_arrays::StructLargeArray> final {
 public:
  static constexpr const fidl_type_t* kCodingTable =
      &test_arrays_StructLargeArrayTable;
};

template <>
struct CodingTraits<::test_arrays::StructLargeArray> {
  static constexpr size_t inline_size_v1_no_ee = 400;
  static constexpr size_t inline_size_v2 = 400;

  template <class EncoderImpl>
  static void Encode(
      EncoderImpl* encoder, ::test_arrays::StructLargeArray* value,
      size_t offset,
      cpp17::optional<HandleInformation> maybe_handle_info = cpp17::nullopt) {
    [[maybe_unused]] uint32_t field_offset;
    field_offset =
        encoder->wire_format() == ::fidl::internal::WireFormatVersion::kV1 ? 0
                                                                           : 0;
    ::fidl::Encode(encoder, &value->storage_.a, offset + field_offset);
  }

  template <typename DecoderImpl>
  static void Decode(DecoderImpl* decoder,
                     ::test_arrays::StructLargeArray* value, size_t offset) {
    ::fidl::Decode(decoder, &value->storage_.a, offset + 0);
  }
};
#endif  // __Fuchsia__

}  // namespace fidl
