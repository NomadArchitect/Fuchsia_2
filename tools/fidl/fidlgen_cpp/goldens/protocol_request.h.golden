// WARNING: This file is machine generated by fidlgen_cpp.

#pragma once

#include <fidl/test.protocolrequest/cpp/wire.h>
#include <lib/fidl/cpp/client.h>
#include <lib/fidl/cpp/internal/codable_base.h>
#include <lib/fidl/cpp/internal/message_extensions.h>
#include <lib/fidl/cpp/internal/natural_client_messenger.h>
#include <lib/fidl/cpp/natural_types.h>
#include <lib/fidl/cpp/unified_messaging.h>
#include <test/protocolrequest/cpp/natural_types.h>

namespace test_protocolrequest {
class ParentTakeChildRequestRequest;

class ParentTakeChildRequest;

class ParentGetChildTopResponse;

class ParentGetChildRequestTopResponse;

}  // namespace test_protocolrequest
template <>
struct ::fidl::internal::DesignatedInitializationProxy<
    ::test_protocolrequest::ParentTakeChildRequestRequest>
    final {
 public:
  ::fidl::InterfaceRequest<::test::protocolrequest::Child> r = {};
};

namespace test_protocolrequest {
class ParentTakeChildRequestRequest final
    : public ::fidl::internal::CodableBase<ParentTakeChildRequestRequest> {
 private:
  friend ::fidl::internal::CodableBase<ParentTakeChildRequestRequest>;
  ParentTakeChildRequestRequest(::fidl::Decoder& decoder);
  template <typename Payload>
  friend auto ::fidl::internal::EncodeTransactionalMessageWithoutValidating(
      ::fidl::Encoder& encoder, Payload&& payload)
      -> ::fidl::HLCPPOutgoingMessage;
  void EncodeWithoutValidating(::fidl::Encoder& encoder, size_t offset);

 public:
  ParentTakeChildRequestRequest() = default;
  ParentTakeChildRequestRequest(
      ::fidl::InterfaceRequest<::test::protocolrequest::Child>&& r)
      : storage_({std::move(r)}) {}
  ParentTakeChildRequestRequest(
      ::fidl::internal::DesignatedInitializationProxy<
          ::test_protocolrequest::ParentTakeChildRequestRequest>
          storage)
      : storage_(std::move(storage)) {}
  ~ParentTakeChildRequestRequest() = default;
  ParentTakeChildRequestRequest(ParentTakeChildRequestRequest&&) noexcept =
      default;
  ParentTakeChildRequestRequest& operator=(
      ParentTakeChildRequestRequest&&) noexcept = default;
  ParentTakeChildRequestRequest(const ParentTakeChildRequestRequest&) noexcept =
      delete;
  ParentTakeChildRequestRequest& operator=(
      const ParentTakeChildRequestRequest&) noexcept = delete;

  const ::fidl::InterfaceRequest<::test::protocolrequest::Child>& r() const {
    return storage_.r;
  }

  ::fidl::InterfaceRequest<::test::protocolrequest::Child>& r() {
    return storage_.r;
  }

  ParentTakeChildRequestRequest& set_r(
      ::fidl::InterfaceRequest<::test::protocolrequest::Child> _value) {
    storage_.r = std::move(_value);
    return *this;
  }

 private:
  friend struct ::fidl::CodingTraits<
      ::test_protocolrequest::ParentTakeChildRequestRequest>;

  ::fidl::internal::DesignatedInitializationProxy<
      ::test_protocolrequest::ParentTakeChildRequestRequest>
      storage_ = {};
};

}  // namespace test_protocolrequest
template <>
struct ::fidl::internal::DesignatedInitializationProxy<
    ::test_protocolrequest::ParentTakeChildRequest>
    final {
 public:
  ::fidl::InterfaceHandle<::test::protocolrequest::Child> c = {};
};

namespace test_protocolrequest {
class ParentTakeChildRequest final
    : public ::fidl::internal::CodableBase<ParentTakeChildRequest> {
 private:
  friend ::fidl::internal::CodableBase<ParentTakeChildRequest>;
  ParentTakeChildRequest(::fidl::Decoder& decoder);
  template <typename Payload>
  friend auto ::fidl::internal::EncodeTransactionalMessageWithoutValidating(
      ::fidl::Encoder& encoder, Payload&& payload)
      -> ::fidl::HLCPPOutgoingMessage;
  void EncodeWithoutValidating(::fidl::Encoder& encoder, size_t offset);

 public:
  ParentTakeChildRequest() = default;
  ParentTakeChildRequest(
      ::fidl::InterfaceHandle<::test::protocolrequest::Child>&& c)
      : storage_({std::move(c)}) {}
  ParentTakeChildRequest(::fidl::internal::DesignatedInitializationProxy<
                         ::test_protocolrequest::ParentTakeChildRequest>
                             storage)
      : storage_(std::move(storage)) {}
  ~ParentTakeChildRequest() = default;
  ParentTakeChildRequest(ParentTakeChildRequest&&) noexcept = default;
  ParentTakeChildRequest& operator=(ParentTakeChildRequest&&) noexcept =
      default;
  ParentTakeChildRequest(const ParentTakeChildRequest&) noexcept = delete;
  ParentTakeChildRequest& operator=(const ParentTakeChildRequest&) noexcept =
      delete;

  const ::fidl::InterfaceHandle<::test::protocolrequest::Child>& c() const {
    return storage_.c;
  }

  ::fidl::InterfaceHandle<::test::protocolrequest::Child>& c() {
    return storage_.c;
  }

  ParentTakeChildRequest& set_c(
      ::fidl::InterfaceHandle<::test::protocolrequest::Child> _value) {
    storage_.c = std::move(_value);
    return *this;
  }

 private:
  friend struct ::fidl::CodingTraits<
      ::test_protocolrequest::ParentTakeChildRequest>;

  ::fidl::internal::DesignatedInitializationProxy<
      ::test_protocolrequest::ParentTakeChildRequest>
      storage_ = {};
};

}  // namespace test_protocolrequest
template <>
struct ::fidl::internal::DesignatedInitializationProxy<
    ::test_protocolrequest::ParentGetChildTopResponse>
    final {
 public:
  ::fidl::InterfaceHandle<::test::protocolrequest::Child> c = {};
};

namespace test_protocolrequest {
class ParentGetChildTopResponse final
    : public ::fidl::internal::CodableBase<ParentGetChildTopResponse> {
 private:
  friend ::fidl::internal::CodableBase<ParentGetChildTopResponse>;
  ParentGetChildTopResponse(::fidl::Decoder& decoder);
  template <typename Payload>
  friend auto ::fidl::internal::EncodeTransactionalMessageWithoutValidating(
      ::fidl::Encoder& encoder, Payload&& payload)
      -> ::fidl::HLCPPOutgoingMessage;
  void EncodeWithoutValidating(::fidl::Encoder& encoder, size_t offset);

 public:
  ParentGetChildTopResponse() = default;
  ParentGetChildTopResponse(
      ::fidl::InterfaceHandle<::test::protocolrequest::Child>&& c)
      : storage_({std::move(c)}) {}
  ParentGetChildTopResponse(::fidl::internal::DesignatedInitializationProxy<
                            ::test_protocolrequest::ParentGetChildTopResponse>
                                storage)
      : storage_(std::move(storage)) {}
  ~ParentGetChildTopResponse() = default;
  ParentGetChildTopResponse(ParentGetChildTopResponse&&) noexcept = default;
  ParentGetChildTopResponse& operator=(ParentGetChildTopResponse&&) noexcept =
      default;
  ParentGetChildTopResponse(const ParentGetChildTopResponse&) noexcept = delete;
  ParentGetChildTopResponse& operator=(
      const ParentGetChildTopResponse&) noexcept = delete;

  const ::fidl::InterfaceHandle<::test::protocolrequest::Child>& c() const {
    return storage_.c;
  }

  ::fidl::InterfaceHandle<::test::protocolrequest::Child>& c() {
    return storage_.c;
  }

  ParentGetChildTopResponse& set_c(
      ::fidl::InterfaceHandle<::test::protocolrequest::Child> _value) {
    storage_.c = std::move(_value);
    return *this;
  }

 private:
  friend struct ::fidl::CodingTraits<
      ::test_protocolrequest::ParentGetChildTopResponse>;

  ::fidl::internal::DesignatedInitializationProxy<
      ::test_protocolrequest::ParentGetChildTopResponse>
      storage_ = {};
};

}  // namespace test_protocolrequest
template <>
struct ::fidl::internal::DesignatedInitializationProxy<
    ::test_protocolrequest::ParentGetChildRequestTopResponse>
    final {
 public:
  ::fidl::InterfaceRequest<::test::protocolrequest::Child> r = {};
};

namespace test_protocolrequest {
class ParentGetChildRequestTopResponse final
    : public ::fidl::internal::CodableBase<ParentGetChildRequestTopResponse> {
 private:
  friend ::fidl::internal::CodableBase<ParentGetChildRequestTopResponse>;
  ParentGetChildRequestTopResponse(::fidl::Decoder& decoder);
  template <typename Payload>
  friend auto ::fidl::internal::EncodeTransactionalMessageWithoutValidating(
      ::fidl::Encoder& encoder, Payload&& payload)
      -> ::fidl::HLCPPOutgoingMessage;
  void EncodeWithoutValidating(::fidl::Encoder& encoder, size_t offset);

 public:
  ParentGetChildRequestTopResponse() = default;
  ParentGetChildRequestTopResponse(
      ::fidl::InterfaceRequest<::test::protocolrequest::Child>&& r)
      : storage_({std::move(r)}) {}
  ParentGetChildRequestTopResponse(
      ::fidl::internal::DesignatedInitializationProxy<
          ::test_protocolrequest::ParentGetChildRequestTopResponse>
          storage)
      : storage_(std::move(storage)) {}
  ~ParentGetChildRequestTopResponse() = default;
  ParentGetChildRequestTopResponse(
      ParentGetChildRequestTopResponse&&) noexcept = default;
  ParentGetChildRequestTopResponse& operator=(
      ParentGetChildRequestTopResponse&&) noexcept = default;
  ParentGetChildRequestTopResponse(
      const ParentGetChildRequestTopResponse&) noexcept = delete;
  ParentGetChildRequestTopResponse& operator=(
      const ParentGetChildRequestTopResponse&) noexcept = delete;

  const ::fidl::InterfaceRequest<::test::protocolrequest::Child>& r() const {
    return storage_.r;
  }

  ::fidl::InterfaceRequest<::test::protocolrequest::Child>& r() {
    return storage_.r;
  }

  ParentGetChildRequestTopResponse& set_r(
      ::fidl::InterfaceRequest<::test::protocolrequest::Child> _value) {
    storage_.r = std::move(_value);
    return *this;
  }

 private:
  friend struct ::fidl::CodingTraits<
      ::test_protocolrequest::ParentGetChildRequestTopResponse>;

  ::fidl::internal::DesignatedInitializationProxy<
      ::test_protocolrequest::ParentGetChildRequestTopResponse>
      storage_ = {};
};

}  // namespace test_protocolrequest
namespace fidl {
#ifdef __Fuchsia__
extern "C" const fidl_type_t
    test_protocolrequest_ParentTakeChildRequestRequestTable;

template <>
struct IsResource<::test_protocolrequest::ParentTakeChildRequestRequest>
    : public std::true_type {};
template <>
struct IsFidlType<::test_protocolrequest::ParentTakeChildRequestRequest>
    : public std::true_type {};

template <>
struct ::fidl::internal::TypeTraits<
    ::test_protocolrequest::ParentTakeChildRequestRequest>
    final {
 public:
  static constexpr const fidl_type_t* kCodingTable =
      &test_protocolrequest_ParentTakeChildRequestRequestTable;
};

template <>
struct CodingTraits<::test_protocolrequest::ParentTakeChildRequestRequest> {
  static constexpr size_t inline_size_v1_no_ee = 8;
  static constexpr size_t inline_size_v2 = 8;

  template <class EncoderImpl>
  static void Encode(
      EncoderImpl* encoder,
      ::test_protocolrequest::ParentTakeChildRequestRequest* value,
      size_t offset,
      cpp17::optional<HandleInformation> maybe_handle_info = cpp17::nullopt) {
    [[maybe_unused]] uint32_t field_offset;
    field_offset =
        encoder->wire_format() == ::fidl::internal::WireFormatVersion::kV1 ? 0
                                                                           : 0;
    ::fidl::Encode(encoder, &value->storage_.r, offset + field_offset,
                   ::fidl::HandleInformation{
                       .object_type = ZX_OBJ_TYPE_CHANNEL,
                       .rights = ZX_DEFAULT_CHANNEL_RIGHTS,
                   });
  }

  template <typename DecoderImpl>
  static void Decode(
      DecoderImpl* decoder,
      ::test_protocolrequest::ParentTakeChildRequestRequest* value,
      size_t offset) {
    ::fidl::Decode(decoder, &value->storage_.r, offset + 0);
  }
};
#endif  // __Fuchsia__

#ifdef __Fuchsia__
extern "C" const fidl_type_t test_protocolrequest_ParentTakeChildRequestTable;

template <>
struct IsResource<::test_protocolrequest::ParentTakeChildRequest>
    : public std::true_type {};
template <>
struct IsFidlType<::test_protocolrequest::ParentTakeChildRequest>
    : public std::true_type {};

template <>
struct ::fidl::internal::TypeTraits<
    ::test_protocolrequest::ParentTakeChildRequest>
    final {
 public:
  static constexpr const fidl_type_t* kCodingTable =
      &test_protocolrequest_ParentTakeChildRequestTable;
};

template <>
struct CodingTraits<::test_protocolrequest::ParentTakeChildRequest> {
  static constexpr size_t inline_size_v1_no_ee = 8;
  static constexpr size_t inline_size_v2 = 8;

  template <class EncoderImpl>
  static void Encode(
      EncoderImpl* encoder,
      ::test_protocolrequest::ParentTakeChildRequest* value, size_t offset,
      cpp17::optional<HandleInformation> maybe_handle_info = cpp17::nullopt) {
    [[maybe_unused]] uint32_t field_offset;
    field_offset =
        encoder->wire_format() == ::fidl::internal::WireFormatVersion::kV1 ? 0
                                                                           : 0;
    ::fidl::Encode(encoder, &value->storage_.c, offset + field_offset,
                   ::fidl::HandleInformation{
                       .object_type = ZX_OBJ_TYPE_CHANNEL,
                       .rights = ZX_DEFAULT_CHANNEL_RIGHTS,
                   });
  }

  template <typename DecoderImpl>
  static void Decode(DecoderImpl* decoder,
                     ::test_protocolrequest::ParentTakeChildRequest* value,
                     size_t offset) {
    ::fidl::Decode(decoder, &value->storage_.c, offset + 0);
  }
};
#endif  // __Fuchsia__

#ifdef __Fuchsia__
extern "C" const fidl_type_t
    test_protocolrequest_ParentGetChildTopResponseTable;

template <>
struct IsResource<::test_protocolrequest::ParentGetChildTopResponse>
    : public std::true_type {};
template <>
struct IsFidlType<::test_protocolrequest::ParentGetChildTopResponse>
    : public std::true_type {};

template <>
struct ::fidl::internal::TypeTraits<
    ::test_protocolrequest::ParentGetChildTopResponse>
    final {
 public:
  static constexpr const fidl_type_t* kCodingTable =
      &test_protocolrequest_ParentGetChildTopResponseTable;
};

template <>
struct CodingTraits<::test_protocolrequest::ParentGetChildTopResponse> {
  static constexpr size_t inline_size_v1_no_ee = 8;
  static constexpr size_t inline_size_v2 = 8;

  template <class EncoderImpl>
  static void Encode(
      EncoderImpl* encoder,
      ::test_protocolrequest::ParentGetChildTopResponse* value, size_t offset,
      cpp17::optional<HandleInformation> maybe_handle_info = cpp17::nullopt) {
    [[maybe_unused]] uint32_t field_offset;
    field_offset =
        encoder->wire_format() == ::fidl::internal::WireFormatVersion::kV1 ? 0
                                                                           : 0;
    ::fidl::Encode(encoder, &value->storage_.c, offset + field_offset,
                   ::fidl::HandleInformation{
                       .object_type = ZX_OBJ_TYPE_CHANNEL,
                       .rights = ZX_DEFAULT_CHANNEL_RIGHTS,
                   });
  }

  template <typename DecoderImpl>
  static void Decode(DecoderImpl* decoder,
                     ::test_protocolrequest::ParentGetChildTopResponse* value,
                     size_t offset) {
    ::fidl::Decode(decoder, &value->storage_.c, offset + 0);
  }
};
#endif  // __Fuchsia__

#ifdef __Fuchsia__
extern "C" const fidl_type_t
    test_protocolrequest_ParentGetChildRequestTopResponseTable;

template <>
struct IsResource<::test_protocolrequest::ParentGetChildRequestTopResponse>
    : public std::true_type {};
template <>
struct IsFidlType<::test_protocolrequest::ParentGetChildRequestTopResponse>
    : public std::true_type {};

template <>
struct ::fidl::internal::TypeTraits<
    ::test_protocolrequest::ParentGetChildRequestTopResponse>
    final {
 public:
  static constexpr const fidl_type_t* kCodingTable =
      &test_protocolrequest_ParentGetChildRequestTopResponseTable;
};

template <>
struct CodingTraits<::test_protocolrequest::ParentGetChildRequestTopResponse> {
  static constexpr size_t inline_size_v1_no_ee = 8;
  static constexpr size_t inline_size_v2 = 8;

  template <class EncoderImpl>
  static void Encode(
      EncoderImpl* encoder,
      ::test_protocolrequest::ParentGetChildRequestTopResponse* value,
      size_t offset,
      cpp17::optional<HandleInformation> maybe_handle_info = cpp17::nullopt) {
    [[maybe_unused]] uint32_t field_offset;
    field_offset =
        encoder->wire_format() == ::fidl::internal::WireFormatVersion::kV1 ? 0
                                                                           : 0;
    ::fidl::Encode(encoder, &value->storage_.r, offset + field_offset,
                   ::fidl::HandleInformation{
                       .object_type = ZX_OBJ_TYPE_CHANNEL,
                       .rights = ZX_DEFAULT_CHANNEL_RIGHTS,
                   });
  }

  template <typename DecoderImpl>
  static void Decode(
      DecoderImpl* decoder,
      ::test_protocolrequest::ParentGetChildRequestTopResponse* value,
      size_t offset) {
    ::fidl::Decode(decoder, &value->storage_.r, offset + 0);
  }
};
#endif  // __Fuchsia__

#ifdef __Fuchsia__
}  // namespace fidl

template <>
class ::fidl::Response<::test_protocolrequest::Parent::GetChild> final
    : public ::fidl::internal::MessageBase<
          ::fidl::Response<::test_protocolrequest::Parent::GetChild>> {
 public:
  Response() = default;
  ~Response() = default;
  Response(Response&&) noexcept = default;
  Response& operator=(Response&&) noexcept = default;
  Response(::test_protocolrequest::ParentGetChildTopResponse payload)
      : payload_(std::move(payload)) {}
  Response(const Response&) noexcept = delete;
  Response& operator=(const Response&) noexcept = delete;
  ::test_protocolrequest::ParentGetChildTopResponse* operator->() {
    return &payload_;
  }
  const ::test_protocolrequest::ParentGetChildTopResponse* operator->() const {
    return &payload_;
  }
  ::test_protocolrequest::ParentGetChildTopResponse& operator*() {
    return payload_;
  }
  const ::test_protocolrequest::ParentGetChildTopResponse& operator*() const {
    return payload_;
  }

 private:
  ::test_protocolrequest::ParentGetChildTopResponse payload_;
};

template <>
struct ::fidl::internal::MessageTraits<
    ::fidl::Response<::test_protocolrequest::Parent::GetChild>>
    final {
 public:
  static constexpr bool kHasPayload = true;
  using Payload = ::test_protocolrequest::ParentGetChildTopResponse;
};
namespace fidl {}  // namespace fidl
template <>
class ::fidl::internal::ClientCallbackTraits<
    ::test_protocolrequest::Parent::GetChild>
    final {
 public:
  ClientCallbackTraits() = delete;
  using ResultCallback = ::fit::callback<void(
      ::fitx::result<
          ::fidl::Error,
          ::fidl::Response<::test_protocolrequest::Parent::GetChild>>&)>;
  using ResponseCallback = ::fit::callback<void(
      ::fidl::Response<::test_protocolrequest::Parent::GetChild>&)>;
};

template <>
class ::fidl::Response<::test_protocolrequest::Parent::GetChildRequest> final
    : public ::fidl::internal::MessageBase<
          ::fidl::Response<::test_protocolrequest::Parent::GetChildRequest>> {
 public:
  Response() = default;
  ~Response() = default;
  Response(Response&&) noexcept = default;
  Response& operator=(Response&&) noexcept = default;
  Response(::test_protocolrequest::ParentGetChildRequestTopResponse payload)
      : payload_(std::move(payload)) {}
  Response(const Response&) noexcept = delete;
  Response& operator=(const Response&) noexcept = delete;
  ::test_protocolrequest::ParentGetChildRequestTopResponse* operator->() {
    return &payload_;
  }
  const ::test_protocolrequest::ParentGetChildRequestTopResponse* operator->()
      const {
    return &payload_;
  }
  ::test_protocolrequest::ParentGetChildRequestTopResponse& operator*() {
    return payload_;
  }
  const ::test_protocolrequest::ParentGetChildRequestTopResponse& operator*()
      const {
    return payload_;
  }

 private:
  ::test_protocolrequest::ParentGetChildRequestTopResponse payload_;
};

template <>
struct ::fidl::internal::MessageTraits<
    ::fidl::Response<::test_protocolrequest::Parent::GetChildRequest>>
    final {
 public:
  static constexpr bool kHasPayload = true;
  using Payload = ::test_protocolrequest::ParentGetChildRequestTopResponse;
};
template <>
class ::fidl::internal::ClientCallbackTraits<
    ::test_protocolrequest::Parent::GetChildRequest>
    final {
 public:
  ClientCallbackTraits() = delete;
  using ResultCallback = ::fit::callback<void(
      ::fitx::result<
          ::fidl::Error,
          ::fidl::Response<::test_protocolrequest::Parent::GetChildRequest>>&)>;
  using ResponseCallback = ::fit::callback<void(
      ::fidl::Response<::test_protocolrequest::Parent::GetChildRequest>&)>;
};

template <>
class ::fidl::internal::NaturalClientImpl<::test_protocolrequest::Parent> final
    : public ::fidl::internal::NaturalClientBase {
 public:
  using NaturalClientBase::NaturalClientBase;
  void GetChild(
      ::fidl::ClientCallback<::test_protocolrequest::Parent::GetChild>&&
          _callback) const;

  void GetChild(
      ::fidl::ClientResponseCallback<::test_protocolrequest::Parent::GetChild>&&
          _callback) const;

  void GetChildRequest(
      ::fidl::ClientCallback<::test_protocolrequest::Parent::GetChildRequest>&&
          _callback) const;

  void GetChildRequest(
      ::fidl::ClientResponseCallback<
          ::test_protocolrequest::Parent::GetChildRequest>&& _callback) const;

  ::fitx::result<::fidl::Error> TakeChild(
      ::test_protocolrequest::ParentTakeChildRequest&& payload) const;

  ::fitx::result<::fidl::Error> TakeChildRequest(
      ::test_protocolrequest::ParentTakeChildRequestRequest&& payload) const;
};
namespace fidl {
#endif  // __Fuchsia__

}  // namespace fidl
#ifdef __Fuchsia__

template <>
class ::fidl::internal::NaturalEventHandlerInterface<
    ::test_protocolrequest::Parent> {
 public:
  NaturalEventHandlerInterface() = default;
  virtual ~NaturalEventHandlerInterface() = default;
};

template <>
class ::fidl::AsyncEventHandler<::test_protocolrequest::Parent>
    : public ::fidl::internal::NaturalEventHandlerInterface<
          ::test_protocolrequest::Parent>,
      public ::fidl::internal::AsyncEventHandler {
 public:
  AsyncEventHandler() = default;
};

template <>
class ::fidl::internal::NaturalEventDispatcher<::test_protocolrequest::Parent>
    final : public ::fidl::internal::IncomingEventDispatcher<
                ::fidl::AsyncEventHandler<::test_protocolrequest::Parent>> {
 public:
  explicit NaturalEventDispatcher(
      ::fidl::AsyncEventHandler<::test_protocolrequest::Parent>* event_handler)
      : IncomingEventDispatcher(event_handler) {}

 private:
  std::optional<::fidl::UnbindInfo> DispatchEvent(
      ::fidl::IncomingMessage& msg,
      internal::IncomingTransportContext transport_context) override;
};
#endif  // __Fuchsia__

#ifdef __Fuchsia__

template <>
class ::fidl::internal::NaturalClientImpl<::test_protocolrequest::Child> final
    : public ::fidl::internal::NaturalClientBase {
 public:
  using NaturalClientBase::NaturalClientBase;
};
#endif  // __Fuchsia__

#ifdef __Fuchsia__

template <>
class ::fidl::internal::NaturalEventHandlerInterface<
    ::test_protocolrequest::Child> {
 public:
  NaturalEventHandlerInterface() = default;
  virtual ~NaturalEventHandlerInterface() = default;
};

template <>
class ::fidl::AsyncEventHandler<::test_protocolrequest::Child>
    : public ::fidl::internal::NaturalEventHandlerInterface<
          ::test_protocolrequest::Child>,
      public ::fidl::internal::AsyncEventHandler {
 public:
  AsyncEventHandler() = default;
};

template <>
class ::fidl::internal::NaturalEventDispatcher<::test_protocolrequest::Child>
    final : public ::fidl::internal::IncomingEventDispatcher<
                ::fidl::AsyncEventHandler<::test_protocolrequest::Child>> {
 public:
  explicit NaturalEventDispatcher(
      ::fidl::AsyncEventHandler<::test_protocolrequest::Child>* event_handler)
      : IncomingEventDispatcher(event_handler) {}

 private:
  std::optional<::fidl::UnbindInfo> DispatchEvent(
      ::fidl::IncomingMessage& msg,
      internal::IncomingTransportContext transport_context) override;
};
#endif  // __Fuchsia__
