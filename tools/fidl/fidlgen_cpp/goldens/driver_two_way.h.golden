// WARNING: This file is machine generated by fidlgen_cpp.

#pragma once

#include <fidl/fidl.test.drivertwoway/cpp/wire.h>
#include <fidl/test/drivertwoway/cpp/natural_types.h>
#include <lib/fidl/cpp/client.h>
#include <lib/fidl/cpp/internal/codable_base.h>
#include <lib/fidl/cpp/internal/message_extensions.h>
#include <lib/fidl/cpp/internal/natural_client_messenger.h>
#include <lib/fidl/cpp/natural_types.h>
#include <lib/fidl/cpp/unified_messaging.h>

namespace fidl_test_drivertwoway {
class TwoWayAddTopResponse;

class TwoWayAddRequest;

}  // namespace fidl_test_drivertwoway
template <>
struct ::fidl::internal::DesignatedInitializationProxy<
    ::fidl_test_drivertwoway::TwoWayAddTopResponse>
    final {
 public:
  uint16_t sum = {};
};

namespace fidl_test_drivertwoway {
class TwoWayAddTopResponse final
    : public ::fidl::internal::CodableBase<TwoWayAddTopResponse> {
 private:
  friend ::fidl::internal::CodableBase<TwoWayAddTopResponse>;
  TwoWayAddTopResponse(::fidl::Decoder& decoder);
  template <typename Payload>
  friend auto ::fidl::internal::EncodeTransactionalMessageWithoutValidating(
      ::fidl::Encoder& encoder, Payload&& payload)
      -> ::fidl::HLCPPOutgoingMessage;
  void EncodeWithoutValidating(::fidl::Encoder& encoder, size_t offset);

 public:
  TwoWayAddTopResponse() = default;
  TwoWayAddTopResponse(uint16_t sum) : storage_({sum}) {}
  TwoWayAddTopResponse(::fidl::internal::DesignatedInitializationProxy<
                       ::fidl_test_drivertwoway::TwoWayAddTopResponse>
                           storage)
      : storage_(std::move(storage)) {}
  ~TwoWayAddTopResponse() = default;
  TwoWayAddTopResponse(TwoWayAddTopResponse&&) noexcept = default;
  TwoWayAddTopResponse& operator=(TwoWayAddTopResponse&&) noexcept = default;

  const uint16_t& sum() const { return storage_.sum; }

  TwoWayAddTopResponse& set_sum(uint16_t _value) {
    storage_.sum = std::move(_value);
    return *this;
  }

 private:
  friend struct ::fidl::CodingTraits<
      ::fidl_test_drivertwoway::TwoWayAddTopResponse>;

  ::fidl::internal::DesignatedInitializationProxy<
      ::fidl_test_drivertwoway::TwoWayAddTopResponse>
      storage_ = {};
};

}  // namespace fidl_test_drivertwoway
template <>
struct ::fidl::internal::DesignatedInitializationProxy<
    ::fidl_test_drivertwoway::TwoWayAddRequest>
    final {
 public:
  uint16_t addend1 = {};

  uint16_t addend2 = {};
};

namespace fidl_test_drivertwoway {
class TwoWayAddRequest final
    : public ::fidl::internal::CodableBase<TwoWayAddRequest> {
 private:
  friend ::fidl::internal::CodableBase<TwoWayAddRequest>;
  TwoWayAddRequest(::fidl::Decoder& decoder);
  template <typename Payload>
  friend auto ::fidl::internal::EncodeTransactionalMessageWithoutValidating(
      ::fidl::Encoder& encoder, Payload&& payload)
      -> ::fidl::HLCPPOutgoingMessage;
  void EncodeWithoutValidating(::fidl::Encoder& encoder, size_t offset);

 public:
  TwoWayAddRequest() = default;
  TwoWayAddRequest(uint16_t addend1, uint16_t addend2)
      : storage_({addend1, addend2}) {}
  TwoWayAddRequest(::fidl::internal::DesignatedInitializationProxy<
                   ::fidl_test_drivertwoway::TwoWayAddRequest>
                       storage)
      : storage_(std::move(storage)) {}
  ~TwoWayAddRequest() = default;
  TwoWayAddRequest(TwoWayAddRequest&&) noexcept = default;
  TwoWayAddRequest& operator=(TwoWayAddRequest&&) noexcept = default;

  const uint16_t& addend1() const { return storage_.addend1; }

  TwoWayAddRequest& set_addend1(uint16_t _value) {
    storage_.addend1 = std::move(_value);
    return *this;
  }

  const uint16_t& addend2() const { return storage_.addend2; }

  TwoWayAddRequest& set_addend2(uint16_t _value) {
    storage_.addend2 = std::move(_value);
    return *this;
  }

 private:
  friend struct ::fidl::CodingTraits<
      ::fidl_test_drivertwoway::TwoWayAddRequest>;

  ::fidl::internal::DesignatedInitializationProxy<
      ::fidl_test_drivertwoway::TwoWayAddRequest>
      storage_ = {};
};

}  // namespace fidl_test_drivertwoway
namespace fidl {
#ifdef __Fuchsia__
extern "C" const fidl_type_t fidl_test_drivertwoway_TwoWayAddTopResponseTable;

template <>
struct IsFidlType<::fidl_test_drivertwoway::TwoWayAddTopResponse>
    : public std::true_type {};

template <>
struct ::fidl::internal::TypeTraits<
    ::fidl_test_drivertwoway::TwoWayAddTopResponse>
    final {
 public:
  static constexpr const fidl_type_t* kCodingTable =
      &fidl_test_drivertwoway_TwoWayAddTopResponseTable;
};

template <>
struct CodingTraits<::fidl_test_drivertwoway::TwoWayAddTopResponse> {
  static constexpr size_t inline_size_v1_no_ee = 8;
  static constexpr size_t inline_size_v2 = 8;

  template <class EncoderImpl>
  static void Encode(
      EncoderImpl* encoder,
      ::fidl_test_drivertwoway::TwoWayAddTopResponse* value, size_t offset,
      cpp17::optional<HandleInformation> maybe_handle_info = cpp17::nullopt) {
    [[maybe_unused]] uint32_t field_offset;
    field_offset =
        encoder->wire_format() == ::fidl::internal::WireFormatVersion::kV1 ? 0
                                                                           : 0;
    ::fidl::Encode(encoder, &value->storage_.sum, offset + field_offset);
  }

  template <typename DecoderImpl>
  static void Decode(DecoderImpl* decoder,
                     ::fidl_test_drivertwoway::TwoWayAddTopResponse* value,
                     size_t offset) {
    ::fidl::Decode(decoder, &value->storage_.sum, offset + 0);
  }
};
#endif  // __Fuchsia__

#ifdef __Fuchsia__
extern "C" const fidl_type_t fidl_test_drivertwoway_TwoWayAddRequestTable;

template <>
struct IsFidlType<::fidl_test_drivertwoway::TwoWayAddRequest>
    : public std::true_type {};

template <>
struct ::fidl::internal::TypeTraits<::fidl_test_drivertwoway::TwoWayAddRequest>
    final {
 public:
  static constexpr const fidl_type_t* kCodingTable =
      &fidl_test_drivertwoway_TwoWayAddRequestTable;
};

template <>
struct CodingTraits<::fidl_test_drivertwoway::TwoWayAddRequest> {
  static constexpr size_t inline_size_v1_no_ee = 8;
  static constexpr size_t inline_size_v2 = 8;

  template <class EncoderImpl>
  static void Encode(
      EncoderImpl* encoder, ::fidl_test_drivertwoway::TwoWayAddRequest* value,
      size_t offset,
      cpp17::optional<HandleInformation> maybe_handle_info = cpp17::nullopt) {
    [[maybe_unused]] uint32_t field_offset;
    field_offset =
        encoder->wire_format() == ::fidl::internal::WireFormatVersion::kV1 ? 0
                                                                           : 0;
    ::fidl::Encode(encoder, &value->storage_.addend1, offset + field_offset);
    field_offset =
        encoder->wire_format() == ::fidl::internal::WireFormatVersion::kV1 ? 2
                                                                           : 2;
    ::fidl::Encode(encoder, &value->storage_.addend2, offset + field_offset);
  }

  template <typename DecoderImpl>
  static void Decode(DecoderImpl* decoder,
                     ::fidl_test_drivertwoway::TwoWayAddRequest* value,
                     size_t offset) {
    ::fidl::Decode(decoder, &value->storage_.addend1, offset + 0);
    ::fidl::Decode(decoder, &value->storage_.addend2, offset + 2);
  }
};
#endif  // __Fuchsia__

}  // namespace fidl
