// WARNING: This file is machine generated by fidlgen.

#pragma once

#include <fidl/test.someotherlibrary/cpp/hlcpp_conversion.h>
#include <fidl/test.typealiases/cpp/natural_types.h>
#include <lib/fidl/cpp/hlcpp_conversion.h>
#include <lib/fidl/cpp/wire/internal/transport_channel.h>
#include <test/typealiases/cpp/fidl.h>
namespace fidl {
namespace internal {
template <>
struct NaturalToHLCPPTraits<::test_typealiases::ObjType> : public NaturalToHLCPPTraitsEnum<::test_typealiases::ObjType, ::test::typealiases::obj_type> {};
template <>
struct HLCPPToNaturalTraits<::test::typealiases::obj_type> : public HLCPPToNaturalTraitsEnum<::test::typealiases::obj_type, ::test_typealiases::ObjType> {};

template <>
struct NaturalToHLCPPTraits<::test_typealiases::ExampleOfUseOfAliases> {
  using HLCPPType = ::test::typealiases::ExampleOfUseOfAliases;
  static inline ::test::typealiases::ExampleOfUseOfAliases Convert(::test_typealiases::ExampleOfUseOfAliases&&);
};
template <>
struct HLCPPToNaturalTraits<::test::typealiases::ExampleOfUseOfAliases> {
  using NaturalType = ::test_typealiases::ExampleOfUseOfAliases;
  static inline ::test_typealiases::ExampleOfUseOfAliases Convert(::test::typealiases::ExampleOfUseOfAliases&&);
};

::test::typealiases::ExampleOfUseOfAliases NaturalToHLCPPTraits<::test_typealiases::ExampleOfUseOfAliases>::Convert(::test_typealiases::ExampleOfUseOfAliases&& value) {
  ::test::typealiases::ExampleOfUseOfAliases hlcpp;
  hlcpp.field_of_u32 = ::fidl::NaturalToHLCPP(std::move(value.field_of_u32()));
  hlcpp.field_of_vec_of_strings = ::fidl::NaturalToHLCPP(std::move(value.field_of_vec_of_strings()));
  hlcpp.field_of_vec_of_strings_at_most_nine = ::fidl::NaturalToHLCPP(std::move(value.field_of_vec_of_strings_at_most_nine()));
  hlcpp.field_of_vec_of_strings_at_most_5 = ::fidl::NaturalToHLCPP(std::move(value.field_of_vec_of_strings_at_most_5()));
  hlcpp.field_of_vec_of_ref_me_at_most_5 = ::fidl::NaturalToHLCPP(std::move(value.field_of_vec_of_ref_me_at_most_5()));
  hlcpp.field_of_channel = ::fidl::NaturalToHLCPP(std::move(value.field_of_channel()));
  hlcpp.field_of_client_end = ::fidl::NaturalToHLCPP(std::move(value.field_of_client_end()));
  hlcpp.field_of_nullable_client_end = ::fidl::NaturalToHLCPP(std::move(value.field_of_nullable_client_end()));
  return hlcpp;
}

::test_typealiases::ExampleOfUseOfAliases HLCPPToNaturalTraits<::test::typealiases::ExampleOfUseOfAliases>::Convert(::test::typealiases::ExampleOfUseOfAliases&& value) {
  return ::test_typealiases::ExampleOfUseOfAliases{{
      .field_of_u32 = ::fidl::HLCPPToNatural(std::move(value.field_of_u32)),
      .field_of_vec_of_strings = ::fidl::HLCPPToNatural(std::move(value.field_of_vec_of_strings)),
      .field_of_vec_of_strings_at_most_nine = ::fidl::HLCPPToNatural(std::move(value.field_of_vec_of_strings_at_most_nine)),
      .field_of_vec_of_strings_at_most_5 = ::fidl::HLCPPToNatural(std::move(value.field_of_vec_of_strings_at_most_5)),
      .field_of_vec_of_ref_me_at_most_5 = ::fidl::HLCPPToNatural(std::move(value.field_of_vec_of_ref_me_at_most_5)),
      .field_of_channel = ::fidl::HLCPPToNatural(std::move(value.field_of_channel)),
      .field_of_client_end = ::fidl::HLCPPToNatural(std::move(value.field_of_client_end)),
      .field_of_nullable_client_end = ::fidl::HLCPPToNatural(std::move(value.field_of_nullable_client_end)),
  }};
}

}  // namespace internal
}  // namespace fidl
