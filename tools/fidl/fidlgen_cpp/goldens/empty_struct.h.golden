// WARNING: This file is machine generated by fidlgen_cpp.

#pragma once

#include <fidl/test.emptystruct/cpp/wire.h>
#include <lib/fidl/cpp/client.h>
#include <lib/fidl/cpp/internal/codable_base.h>
#include <lib/fidl/cpp/internal/message_extensions.h>
#include <lib/fidl/cpp/internal/natural_client_messenger.h>
#include <lib/fidl/cpp/natural_types.h>
#include <lib/fidl/cpp/unified_messaging.h>
#include <test/emptystruct/cpp/natural_types.h>

namespace test_emptystruct {
class Empty;

class EmptyProtocolSendRequest;

class EmptyProtocolSendAndReceiveTopResponse;

class EmptyProtocolSendAndReceiveRequest;

class EmptyProtocolReceiveRequest;

}  // namespace test_emptystruct
template <>
struct ::fidl::internal::DesignatedInitializationProxy<
    ::test_emptystruct::Empty>
    final {
 public:
  uint8_t __reserved = 0u;
};

namespace test_emptystruct {
class Empty final : public ::fidl::internal::CodableBase<Empty> {
 private:
  friend ::fidl::internal::CodableBase<Empty>;
  Empty(::fidl::Decoder& decoder);
  template <typename Payload>
  friend auto ::fidl::internal::EncodeTransactionalMessageWithoutValidating(
      ::fidl::Encoder& encoder, Payload&& payload)
      -> ::fidl::HLCPPOutgoingMessage;
  void EncodeWithoutValidating(::fidl::Encoder& encoder, size_t offset);

 public:
  Empty() = default;
  Empty(uint8_t __reserved) : storage_({__reserved}) {}
  Empty(
      ::fidl::internal::DesignatedInitializationProxy<::test_emptystruct::Empty>
          storage)
      : storage_(std::move(storage)) {}
  ~Empty() = default;
  Empty(Empty&&) noexcept = default;
  Empty& operator=(Empty&&) noexcept = default;

  const uint8_t& __reserved() const { return storage_.__reserved; }

  uint8_t& __reserved() { return storage_.__reserved; }

  Empty& set___reserved(uint8_t _value) {
    storage_.__reserved = std::move(_value);
    return *this;
  }

 private:
  friend struct ::fidl::CodingTraits<::test_emptystruct::Empty>;

  ::fidl::internal::DesignatedInitializationProxy<::test_emptystruct::Empty>
      storage_ = {};
};

}  // namespace test_emptystruct
template <>
struct ::fidl::internal::DesignatedInitializationProxy<
    ::test_emptystruct::EmptyProtocolSendRequest>
    final {
 public:
  ::test_emptystruct::Empty e = {};
};

namespace test_emptystruct {
class EmptyProtocolSendRequest final
    : public ::fidl::internal::CodableBase<EmptyProtocolSendRequest> {
 private:
  friend ::fidl::internal::CodableBase<EmptyProtocolSendRequest>;
  EmptyProtocolSendRequest(::fidl::Decoder& decoder);
  template <typename Payload>
  friend auto ::fidl::internal::EncodeTransactionalMessageWithoutValidating(
      ::fidl::Encoder& encoder, Payload&& payload)
      -> ::fidl::HLCPPOutgoingMessage;
  void EncodeWithoutValidating(::fidl::Encoder& encoder, size_t offset);

 public:
  EmptyProtocolSendRequest() = default;
  EmptyProtocolSendRequest(::test_emptystruct::Empty e)
      : storage_({std::move(e)}) {}
  EmptyProtocolSendRequest(::fidl::internal::DesignatedInitializationProxy<
                           ::test_emptystruct::EmptyProtocolSendRequest>
                               storage)
      : storage_(std::move(storage)) {}
  ~EmptyProtocolSendRequest() = default;
  EmptyProtocolSendRequest(EmptyProtocolSendRequest&&) noexcept = default;
  EmptyProtocolSendRequest& operator=(EmptyProtocolSendRequest&&) noexcept =
      default;

  const ::test_emptystruct::Empty& e() const { return storage_.e; }

  ::test_emptystruct::Empty& e() { return storage_.e; }

  EmptyProtocolSendRequest& set_e(::test_emptystruct::Empty _value) {
    storage_.e = std::move(_value);
    return *this;
  }

 private:
  friend struct ::fidl::CodingTraits<
      ::test_emptystruct::EmptyProtocolSendRequest>;

  ::fidl::internal::DesignatedInitializationProxy<
      ::test_emptystruct::EmptyProtocolSendRequest>
      storage_ = {};
};

}  // namespace test_emptystruct
template <>
struct ::fidl::internal::DesignatedInitializationProxy<
    ::test_emptystruct::EmptyProtocolSendAndReceiveTopResponse>
    final {
 public:
  ::test_emptystruct::Empty e = {};
};

namespace test_emptystruct {
class EmptyProtocolSendAndReceiveTopResponse final
    : public ::fidl::internal::CodableBase<
          EmptyProtocolSendAndReceiveTopResponse> {
 private:
  friend ::fidl::internal::CodableBase<EmptyProtocolSendAndReceiveTopResponse>;
  EmptyProtocolSendAndReceiveTopResponse(::fidl::Decoder& decoder);
  template <typename Payload>
  friend auto ::fidl::internal::EncodeTransactionalMessageWithoutValidating(
      ::fidl::Encoder& encoder, Payload&& payload)
      -> ::fidl::HLCPPOutgoingMessage;
  void EncodeWithoutValidating(::fidl::Encoder& encoder, size_t offset);

 public:
  EmptyProtocolSendAndReceiveTopResponse() = default;
  EmptyProtocolSendAndReceiveTopResponse(::test_emptystruct::Empty e)
      : storage_({std::move(e)}) {}
  EmptyProtocolSendAndReceiveTopResponse(
      ::fidl::internal::DesignatedInitializationProxy<
          ::test_emptystruct::EmptyProtocolSendAndReceiveTopResponse>
          storage)
      : storage_(std::move(storage)) {}
  ~EmptyProtocolSendAndReceiveTopResponse() = default;
  EmptyProtocolSendAndReceiveTopResponse(
      EmptyProtocolSendAndReceiveTopResponse&&) noexcept = default;
  EmptyProtocolSendAndReceiveTopResponse& operator=(
      EmptyProtocolSendAndReceiveTopResponse&&) noexcept = default;

  const ::test_emptystruct::Empty& e() const { return storage_.e; }

  ::test_emptystruct::Empty& e() { return storage_.e; }

  EmptyProtocolSendAndReceiveTopResponse& set_e(
      ::test_emptystruct::Empty _value) {
    storage_.e = std::move(_value);
    return *this;
  }

 private:
  friend struct ::fidl::CodingTraits<
      ::test_emptystruct::EmptyProtocolSendAndReceiveTopResponse>;

  ::fidl::internal::DesignatedInitializationProxy<
      ::test_emptystruct::EmptyProtocolSendAndReceiveTopResponse>
      storage_ = {};
};

}  // namespace test_emptystruct
template <>
struct ::fidl::internal::DesignatedInitializationProxy<
    ::test_emptystruct::EmptyProtocolSendAndReceiveRequest>
    final {
 public:
  ::test_emptystruct::Empty e = {};
};

namespace test_emptystruct {
class EmptyProtocolSendAndReceiveRequest final
    : public ::fidl::internal::CodableBase<EmptyProtocolSendAndReceiveRequest> {
 private:
  friend ::fidl::internal::CodableBase<EmptyProtocolSendAndReceiveRequest>;
  EmptyProtocolSendAndReceiveRequest(::fidl::Decoder& decoder);
  template <typename Payload>
  friend auto ::fidl::internal::EncodeTransactionalMessageWithoutValidating(
      ::fidl::Encoder& encoder, Payload&& payload)
      -> ::fidl::HLCPPOutgoingMessage;
  void EncodeWithoutValidating(::fidl::Encoder& encoder, size_t offset);

 public:
  EmptyProtocolSendAndReceiveRequest() = default;
  EmptyProtocolSendAndReceiveRequest(::test_emptystruct::Empty e)
      : storage_({std::move(e)}) {}
  EmptyProtocolSendAndReceiveRequest(
      ::fidl::internal::DesignatedInitializationProxy<
          ::test_emptystruct::EmptyProtocolSendAndReceiveRequest>
          storage)
      : storage_(std::move(storage)) {}
  ~EmptyProtocolSendAndReceiveRequest() = default;
  EmptyProtocolSendAndReceiveRequest(
      EmptyProtocolSendAndReceiveRequest&&) noexcept = default;
  EmptyProtocolSendAndReceiveRequest& operator=(
      EmptyProtocolSendAndReceiveRequest&&) noexcept = default;

  const ::test_emptystruct::Empty& e() const { return storage_.e; }

  ::test_emptystruct::Empty& e() { return storage_.e; }

  EmptyProtocolSendAndReceiveRequest& set_e(::test_emptystruct::Empty _value) {
    storage_.e = std::move(_value);
    return *this;
  }

 private:
  friend struct ::fidl::CodingTraits<
      ::test_emptystruct::EmptyProtocolSendAndReceiveRequest>;

  ::fidl::internal::DesignatedInitializationProxy<
      ::test_emptystruct::EmptyProtocolSendAndReceiveRequest>
      storage_ = {};
};

}  // namespace test_emptystruct
template <>
struct ::fidl::internal::DesignatedInitializationProxy<
    ::test_emptystruct::EmptyProtocolReceiveRequest>
    final {
 public:
  ::test_emptystruct::Empty e = {};
};

namespace test_emptystruct {
class EmptyProtocolReceiveRequest final
    : public ::fidl::internal::CodableBase<EmptyProtocolReceiveRequest> {
 private:
  friend ::fidl::internal::CodableBase<EmptyProtocolReceiveRequest>;
  EmptyProtocolReceiveRequest(::fidl::Decoder& decoder);
  template <typename Payload>
  friend auto ::fidl::internal::EncodeTransactionalMessageWithoutValidating(
      ::fidl::Encoder& encoder, Payload&& payload)
      -> ::fidl::HLCPPOutgoingMessage;
  void EncodeWithoutValidating(::fidl::Encoder& encoder, size_t offset);

 public:
  EmptyProtocolReceiveRequest() = default;
  EmptyProtocolReceiveRequest(::test_emptystruct::Empty e)
      : storage_({std::move(e)}) {}
  EmptyProtocolReceiveRequest(::fidl::internal::DesignatedInitializationProxy<
                              ::test_emptystruct::EmptyProtocolReceiveRequest>
                                  storage)
      : storage_(std::move(storage)) {}
  ~EmptyProtocolReceiveRequest() = default;
  EmptyProtocolReceiveRequest(EmptyProtocolReceiveRequest&&) noexcept = default;
  EmptyProtocolReceiveRequest& operator=(
      EmptyProtocolReceiveRequest&&) noexcept = default;

  const ::test_emptystruct::Empty& e() const { return storage_.e; }

  ::test_emptystruct::Empty& e() { return storage_.e; }

  EmptyProtocolReceiveRequest& set_e(::test_emptystruct::Empty _value) {
    storage_.e = std::move(_value);
    return *this;
  }

 private:
  friend struct ::fidl::CodingTraits<
      ::test_emptystruct::EmptyProtocolReceiveRequest>;

  ::fidl::internal::DesignatedInitializationProxy<
      ::test_emptystruct::EmptyProtocolReceiveRequest>
      storage_ = {};
};

}  // namespace test_emptystruct
namespace fidl {
#ifdef __Fuchsia__
extern "C" const fidl_type_t test_emptystruct_EmptyTable;

template <>
struct IsFidlType<::test_emptystruct::Empty> : public std::true_type {};

template <>
struct ::fidl::internal::TypeTraits<::test_emptystruct::Empty> final {
 public:
  static constexpr const fidl_type_t* kCodingTable =
      &test_emptystruct_EmptyTable;
};

template <>
struct CodingTraits<::test_emptystruct::Empty> {
  static constexpr size_t inline_size_v1_no_ee = 1;
  static constexpr size_t inline_size_v2 = 1;

  template <class EncoderImpl>
  static void Encode(
      EncoderImpl* encoder, ::test_emptystruct::Empty* value, size_t offset,
      cpp17::optional<HandleInformation> maybe_handle_info = cpp17::nullopt) {
    [[maybe_unused]] uint32_t field_offset;
    field_offset =
        encoder->wire_format() == ::fidl::internal::WireFormatVersion::kV1 ? 0
                                                                           : 0;
    ::fidl::Encode(encoder, &value->storage_.__reserved, offset + field_offset);
  }

  template <typename DecoderImpl>
  static void Decode(DecoderImpl* decoder, ::test_emptystruct::Empty* value,
                     size_t offset) {
    ::fidl::Decode(decoder, &value->storage_.__reserved, offset + 0);
  }
};
#endif  // __Fuchsia__

#ifdef __Fuchsia__
extern "C" const fidl_type_t test_emptystruct_EmptyProtocolSendRequestTable;

template <>
struct IsFidlType<::test_emptystruct::EmptyProtocolSendRequest>
    : public std::true_type {};

template <>
struct ::fidl::internal::TypeTraits<
    ::test_emptystruct::EmptyProtocolSendRequest>
    final {
 public:
  static constexpr const fidl_type_t* kCodingTable =
      &test_emptystruct_EmptyProtocolSendRequestTable;
};

template <>
struct CodingTraits<::test_emptystruct::EmptyProtocolSendRequest> {
  static constexpr size_t inline_size_v1_no_ee = 8;
  static constexpr size_t inline_size_v2 = 8;

  template <class EncoderImpl>
  static void Encode(
      EncoderImpl* encoder, ::test_emptystruct::EmptyProtocolSendRequest* value,
      size_t offset,
      cpp17::optional<HandleInformation> maybe_handle_info = cpp17::nullopt) {
    [[maybe_unused]] uint32_t field_offset;
    field_offset =
        encoder->wire_format() == ::fidl::internal::WireFormatVersion::kV1 ? 0
                                                                           : 0;
    ::fidl::Encode(encoder, &value->storage_.e, offset + field_offset);
  }

  template <typename DecoderImpl>
  static void Decode(DecoderImpl* decoder,
                     ::test_emptystruct::EmptyProtocolSendRequest* value,
                     size_t offset) {
    ::fidl::Decode(decoder, &value->storage_.e, offset + 0);
  }
};
#endif  // __Fuchsia__

#ifdef __Fuchsia__
extern "C" const fidl_type_t
    test_emptystruct_EmptyProtocolSendAndReceiveTopResponseTable;

template <>
struct IsFidlType<::test_emptystruct::EmptyProtocolSendAndReceiveTopResponse>
    : public std::true_type {};

template <>
struct ::fidl::internal::TypeTraits<
    ::test_emptystruct::EmptyProtocolSendAndReceiveTopResponse>
    final {
 public:
  static constexpr const fidl_type_t* kCodingTable =
      &test_emptystruct_EmptyProtocolSendAndReceiveTopResponseTable;
};

template <>
struct CodingTraits<
    ::test_emptystruct::EmptyProtocolSendAndReceiveTopResponse> {
  static constexpr size_t inline_size_v1_no_ee = 8;
  static constexpr size_t inline_size_v2 = 8;

  template <class EncoderImpl>
  static void Encode(
      EncoderImpl* encoder,
      ::test_emptystruct::EmptyProtocolSendAndReceiveTopResponse* value,
      size_t offset,
      cpp17::optional<HandleInformation> maybe_handle_info = cpp17::nullopt) {
    [[maybe_unused]] uint32_t field_offset;
    field_offset =
        encoder->wire_format() == ::fidl::internal::WireFormatVersion::kV1 ? 0
                                                                           : 0;
    ::fidl::Encode(encoder, &value->storage_.e, offset + field_offset);
  }

  template <typename DecoderImpl>
  static void Decode(
      DecoderImpl* decoder,
      ::test_emptystruct::EmptyProtocolSendAndReceiveTopResponse* value,
      size_t offset) {
    ::fidl::Decode(decoder, &value->storage_.e, offset + 0);
  }
};
#endif  // __Fuchsia__

#ifdef __Fuchsia__
extern "C" const fidl_type_t
    test_emptystruct_EmptyProtocolSendAndReceiveRequestTable;

template <>
struct IsFidlType<::test_emptystruct::EmptyProtocolSendAndReceiveRequest>
    : public std::true_type {};

template <>
struct ::fidl::internal::TypeTraits<
    ::test_emptystruct::EmptyProtocolSendAndReceiveRequest>
    final {
 public:
  static constexpr const fidl_type_t* kCodingTable =
      &test_emptystruct_EmptyProtocolSendAndReceiveRequestTable;
};

template <>
struct CodingTraits<::test_emptystruct::EmptyProtocolSendAndReceiveRequest> {
  static constexpr size_t inline_size_v1_no_ee = 8;
  static constexpr size_t inline_size_v2 = 8;

  template <class EncoderImpl>
  static void Encode(
      EncoderImpl* encoder,
      ::test_emptystruct::EmptyProtocolSendAndReceiveRequest* value,
      size_t offset,
      cpp17::optional<HandleInformation> maybe_handle_info = cpp17::nullopt) {
    [[maybe_unused]] uint32_t field_offset;
    field_offset =
        encoder->wire_format() == ::fidl::internal::WireFormatVersion::kV1 ? 0
                                                                           : 0;
    ::fidl::Encode(encoder, &value->storage_.e, offset + field_offset);
  }

  template <typename DecoderImpl>
  static void Decode(
      DecoderImpl* decoder,
      ::test_emptystruct::EmptyProtocolSendAndReceiveRequest* value,
      size_t offset) {
    ::fidl::Decode(decoder, &value->storage_.e, offset + 0);
  }
};
#endif  // __Fuchsia__

#ifdef __Fuchsia__
extern "C" const fidl_type_t test_emptystruct_EmptyProtocolReceiveRequestTable;

template <>
struct IsFidlType<::test_emptystruct::EmptyProtocolReceiveRequest>
    : public std::true_type {};

template <>
struct ::fidl::internal::TypeTraits<
    ::test_emptystruct::EmptyProtocolReceiveRequest>
    final {
 public:
  static constexpr const fidl_type_t* kCodingTable =
      &test_emptystruct_EmptyProtocolReceiveRequestTable;
};

template <>
struct CodingTraits<::test_emptystruct::EmptyProtocolReceiveRequest> {
  static constexpr size_t inline_size_v1_no_ee = 8;
  static constexpr size_t inline_size_v2 = 8;

  template <class EncoderImpl>
  static void Encode(
      EncoderImpl* encoder,
      ::test_emptystruct::EmptyProtocolReceiveRequest* value, size_t offset,
      cpp17::optional<HandleInformation> maybe_handle_info = cpp17::nullopt) {
    [[maybe_unused]] uint32_t field_offset;
    field_offset =
        encoder->wire_format() == ::fidl::internal::WireFormatVersion::kV1 ? 0
                                                                           : 0;
    ::fidl::Encode(encoder, &value->storage_.e, offset + field_offset);
  }

  template <typename DecoderImpl>
  static void Decode(DecoderImpl* decoder,
                     ::test_emptystruct::EmptyProtocolReceiveRequest* value,
                     size_t offset) {
    ::fidl::Decode(decoder, &value->storage_.e, offset + 0);
  }
};
#endif  // __Fuchsia__

#ifdef __Fuchsia__
}  // namespace fidl

template <>
class ::fidl::Response<::test_emptystruct::EmptyProtocol::SendAndReceive> final
    : public ::fidl::internal::MessageBase<
          ::fidl::Response<::test_emptystruct::EmptyProtocol::SendAndReceive>> {
 public:
  Response() = default;
  ~Response() = default;
  Response(Response&&) noexcept = default;
  Response& operator=(Response&&) noexcept = default;
  Response(::test_emptystruct::EmptyProtocolSendAndReceiveTopResponse payload)
      : payload_(std::move(payload)) {}
  ::test_emptystruct::EmptyProtocolSendAndReceiveTopResponse* operator->() {
    return &payload_;
  }
  const ::test_emptystruct::EmptyProtocolSendAndReceiveTopResponse* operator->()
      const {
    return &payload_;
  }
  ::test_emptystruct::EmptyProtocolSendAndReceiveTopResponse& operator*() {
    return payload_;
  }
  const ::test_emptystruct::EmptyProtocolSendAndReceiveTopResponse& operator*()
      const {
    return payload_;
  }

 private:
  ::test_emptystruct::EmptyProtocolSendAndReceiveTopResponse payload_;
};

template <>
struct ::fidl::internal::MessageTraits<
    ::fidl::Response<::test_emptystruct::EmptyProtocol::SendAndReceive>>
    final {
 public:
  static constexpr bool kHasPayload = true;
  using Payload = ::test_emptystruct::EmptyProtocolSendAndReceiveTopResponse;
};
namespace fidl {}  // namespace fidl
template <>
class ::fidl::internal::ClientCallbackTraits<
    ::test_emptystruct::EmptyProtocol::SendAndReceive>
    final {
 public:
  ClientCallbackTraits() = delete;
  using ResultCallback = ::fit::callback<void(
      ::fitx::result<::fidl::Error,
                     ::fidl::Response<
                         ::test_emptystruct::EmptyProtocol::SendAndReceive>>&)>;
  using ResponseCallback = ::fit::callback<void(
      ::fidl::Response<::test_emptystruct::EmptyProtocol::SendAndReceive>&)>;
};

template <>
class ::fidl::internal::NaturalClientImpl<::test_emptystruct::EmptyProtocol>
    final : public ::fidl::internal::NaturalClientBase {
 public:
  using NaturalClientBase::NaturalClientBase;
  void SendAndReceive(
      ::test_emptystruct::EmptyProtocolSendAndReceiveRequest&& payload,
      ::fidl::ClientCallback<
          ::test_emptystruct::EmptyProtocol::SendAndReceive>&& _callback) const;

  void SendAndReceive(
      ::test_emptystruct::EmptyProtocolSendAndReceiveRequest&& payload,
      ::fidl::ClientResponseCallback<
          ::test_emptystruct::EmptyProtocol::SendAndReceive>&& _callback) const;

  ::fitx::result<::fidl::Error> Send(
      ::test_emptystruct::EmptyProtocolSendRequest&& payload) const;
};
namespace fidl {
#endif  // __Fuchsia__

}  // namespace fidl
