// WARNING: This file is machine generated by fidlgen_cpp.

#pragma once

#include <fidl/test.emptystruct/cpp/natural_types.h>
#include <fidl/test.emptystruct/cpp/wire.h>
#include <lib/fidl/cpp/client.h>
#include <lib/fidl/cpp/internal/codable_base.h>
#include <lib/fidl/cpp/internal/message_extensions.h>
#include <lib/fidl/cpp/internal/natural_client_messenger.h>
#include <lib/fidl/cpp/natural_types.h>
#include <lib/fidl/cpp/unified_messaging.h>

namespace fidl {

#ifdef __Fuchsia__
}  // namespace fidl

template <>
class ::fidl::Event<::test_emptystruct::EmptyProtocol::Receive> final
    : public ::fidl::internal::MessageBase<
          ::fidl::Event<::test_emptystruct::EmptyProtocol::Receive>> {
 public:
  Event() = default;
  ~Event() = default;
  Event(Event&&) noexcept = default;
  Event& operator=(Event&&) noexcept = default;
  Event(::test_emptystruct::EmptyProtocolReceiveRequest payload)
      : payload_(std::move(payload)) {}
  ::test_emptystruct::EmptyProtocolReceiveRequest* operator->() {
    return &payload_;
  }
  const ::test_emptystruct::EmptyProtocolReceiveRequest* operator->() const {
    return &payload_;
  }
  ::test_emptystruct::EmptyProtocolReceiveRequest& operator*() {
    return payload_;
  }
  const ::test_emptystruct::EmptyProtocolReceiveRequest& operator*() const {
    return payload_;
  }

 private:
  ::test_emptystruct::EmptyProtocolReceiveRequest payload_;
};

template <>
struct ::fidl::internal::MessageTraits<
    ::fidl::Event<::test_emptystruct::EmptyProtocol::Receive>>
    final {
 public:
  static constexpr bool kHasPayload = true;
  using Payload = ::test_emptystruct::EmptyProtocolReceiveRequest;
};
namespace fidl {}  // namespace fidl

template <>
class ::fidl::Response<::test_emptystruct::EmptyProtocol::SendAndReceive> final
    : public ::fidl::internal::MessageBase<
          ::fidl::Response<::test_emptystruct::EmptyProtocol::SendAndReceive>> {
 public:
  Response() = default;
  ~Response() = default;
  Response(Response&&) noexcept = default;
  Response& operator=(Response&&) noexcept = default;
  Response(::test_emptystruct::EmptyProtocolSendAndReceiveTopResponse payload)
      : payload_(std::move(payload)) {}
  ::test_emptystruct::EmptyProtocolSendAndReceiveTopResponse* operator->() {
    return &payload_;
  }
  const ::test_emptystruct::EmptyProtocolSendAndReceiveTopResponse* operator->()
      const {
    return &payload_;
  }
  ::test_emptystruct::EmptyProtocolSendAndReceiveTopResponse& operator*() {
    return payload_;
  }
  const ::test_emptystruct::EmptyProtocolSendAndReceiveTopResponse& operator*()
      const {
    return payload_;
  }

 private:
  ::test_emptystruct::EmptyProtocolSendAndReceiveTopResponse payload_;
};

template <>
struct ::fidl::internal::MessageTraits<
    ::fidl::Response<::test_emptystruct::EmptyProtocol::SendAndReceive>>
    final {
 public:
  static constexpr bool kHasPayload = true;
  using Payload = ::test_emptystruct::EmptyProtocolSendAndReceiveTopResponse;
};
namespace fidl {}  // namespace fidl
template <>
class ::fidl::internal::ClientCallbackTraits<
    ::test_emptystruct::EmptyProtocol::SendAndReceive>
    final {
 public:
  ClientCallbackTraits() = delete;
  using ResultCallback = ::fit::callback<void(
      ::fitx::result<::fidl::Error,
                     ::fidl::Response<
                         ::test_emptystruct::EmptyProtocol::SendAndReceive>>&)>;
  using ResponseCallback = ::fit::callback<void(
      ::fidl::Response<::test_emptystruct::EmptyProtocol::SendAndReceive>&)>;
};

template <>
class ::fidl::internal::NaturalClientImpl<::test_emptystruct::EmptyProtocol>
    final : public ::fidl::internal::NaturalClientBase {
 public:
  using NaturalClientBase::NaturalClientBase;
  void SendAndReceive(
      ::test_emptystruct::EmptyProtocolSendAndReceiveRequest&& payload,
      ::fidl::ClientCallback<
          ::test_emptystruct::EmptyProtocol::SendAndReceive>&& _callback) const;

  void SendAndReceive(
      ::test_emptystruct::EmptyProtocolSendAndReceiveRequest&& payload,
      ::fidl::ClientResponseCallback<
          ::test_emptystruct::EmptyProtocol::SendAndReceive>&& _callback) const;

  ::fitx::result<::fidl::Error> Send(
      ::test_emptystruct::EmptyProtocolSendRequest&& payload) const;
};
namespace fidl {
#endif  // __Fuchsia__

}  // namespace fidl
#ifdef __Fuchsia__

template <>
class ::fidl::internal::NaturalEventHandlerInterface<
    ::test_emptystruct::EmptyProtocol> {
 public:
  NaturalEventHandlerInterface() = default;
  virtual ~NaturalEventHandlerInterface() = default;
  virtual void Receive(
      ::fidl::Event<::test_emptystruct::EmptyProtocol::Receive>&) {}
};

template <>
class ::fidl::AsyncEventHandler<::test_emptystruct::EmptyProtocol>
    : public ::fidl::internal::NaturalEventHandlerInterface<
          ::test_emptystruct::EmptyProtocol>,
      public ::fidl::internal::AsyncEventHandler {
 public:
  AsyncEventHandler() = default;
};

template <>
class ::fidl::internal::NaturalEventDispatcher<
    ::test_emptystruct::EmptyProtocol>
    final : public ::fidl::internal::IncomingEventDispatcher<
                ::fidl::AsyncEventHandler<::test_emptystruct::EmptyProtocol>> {
 public:
  explicit NaturalEventDispatcher(
      ::fidl::AsyncEventHandler<::test_emptystruct::EmptyProtocol>*
          event_handler)
      : IncomingEventDispatcher(event_handler) {}

 private:
  std::optional<::fidl::UnbindInfo> DispatchEvent(
      ::fidl::IncomingMessage& msg,
      internal::IncomingTransportContext transport_context) override;
};
#endif  // __Fuchsia__
