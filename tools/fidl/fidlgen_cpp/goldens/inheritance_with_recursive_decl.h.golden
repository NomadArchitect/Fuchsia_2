// WARNING: This file is machine generated by fidlgen_cpp.

#pragma once

#include <fidl/test.inheritancewithrecursivedecl/cpp/wire.h>
#include <lib/fidl/cpp/client.h>
#include <lib/fidl/cpp/internal/codable_base.h>
#include <lib/fidl/cpp/internal/message_extensions.h>
#include <lib/fidl/cpp/internal/natural_client_messenger.h>
#include <lib/fidl/cpp/natural_types.h>
#include <lib/fidl/cpp/unified_messaging.h>
#include <test/inheritancewithrecursivedecl/cpp/natural_types.h>

namespace test_inheritancewithrecursivedecl {
class ParentFirstRequest;

class ChildSecondRequest;

}  // namespace test_inheritancewithrecursivedecl
template <>
struct ::fidl::internal::DesignatedInitializationProxy<
    ::test_inheritancewithrecursivedecl::ParentFirstRequest>
    final {
 public:
  ::fidl::InterfaceRequest<::test::inheritancewithrecursivedecl::Parent>
      request = {};
};

namespace test_inheritancewithrecursivedecl {
class ParentFirstRequest final
    : public ::fidl::internal::CodableBase<ParentFirstRequest> {
 private:
  friend ::fidl::internal::CodableBase<ParentFirstRequest>;
  ParentFirstRequest(::fidl::Decoder& decoder);
  template <typename Payload>
  friend auto ::fidl::internal::EncodeTransactionalMessageWithoutValidating(
      ::fidl::Encoder& encoder, Payload&& payload)
      -> ::fidl::HLCPPOutgoingMessage;
  void EncodeWithoutValidating(::fidl::Encoder& encoder, size_t offset);

 public:
  ParentFirstRequest() = default;
  ParentFirstRequest(
      ::fidl::InterfaceRequest<::test::inheritancewithrecursivedecl::Parent>&&
          request)
      : storage_({std::move(request)}) {}
  ParentFirstRequest(::fidl::internal::DesignatedInitializationProxy<
                     ::test_inheritancewithrecursivedecl::ParentFirstRequest>
                         storage)
      : storage_(std::move(storage)) {}
  ~ParentFirstRequest() = default;
  ParentFirstRequest(ParentFirstRequest&&) noexcept = default;
  ParentFirstRequest& operator=(ParentFirstRequest&&) noexcept = default;
  ParentFirstRequest(const ParentFirstRequest&) noexcept = delete;
  ParentFirstRequest& operator=(const ParentFirstRequest&) noexcept = delete;

  const ::fidl::InterfaceRequest<::test::inheritancewithrecursivedecl::Parent>&
  request() const {
    return storage_.request;
  }

  ::fidl::InterfaceRequest<::test::inheritancewithrecursivedecl::Parent>&
  request() {
    return storage_.request;
  }

  ParentFirstRequest& set_request(
      ::fidl::InterfaceRequest<::test::inheritancewithrecursivedecl::Parent>
          _value) {
    storage_.request = std::move(_value);
    return *this;
  }

 private:
  friend struct ::fidl::CodingTraits<
      ::test_inheritancewithrecursivedecl::ParentFirstRequest>;

  ::fidl::internal::DesignatedInitializationProxy<
      ::test_inheritancewithrecursivedecl::ParentFirstRequest>
      storage_ = {};
};

}  // namespace test_inheritancewithrecursivedecl
template <>
struct ::fidl::internal::DesignatedInitializationProxy<
    ::test_inheritancewithrecursivedecl::ChildSecondRequest>
    final {
 public:
  ::fidl::InterfaceRequest<::test::inheritancewithrecursivedecl::Parent>
      request = {};
};

namespace test_inheritancewithrecursivedecl {
class ChildSecondRequest final
    : public ::fidl::internal::CodableBase<ChildSecondRequest> {
 private:
  friend ::fidl::internal::CodableBase<ChildSecondRequest>;
  ChildSecondRequest(::fidl::Decoder& decoder);
  template <typename Payload>
  friend auto ::fidl::internal::EncodeTransactionalMessageWithoutValidating(
      ::fidl::Encoder& encoder, Payload&& payload)
      -> ::fidl::HLCPPOutgoingMessage;
  void EncodeWithoutValidating(::fidl::Encoder& encoder, size_t offset);

 public:
  ChildSecondRequest() = default;
  ChildSecondRequest(
      ::fidl::InterfaceRequest<::test::inheritancewithrecursivedecl::Parent>&&
          request)
      : storage_({std::move(request)}) {}
  ChildSecondRequest(::fidl::internal::DesignatedInitializationProxy<
                     ::test_inheritancewithrecursivedecl::ChildSecondRequest>
                         storage)
      : storage_(std::move(storage)) {}
  ~ChildSecondRequest() = default;
  ChildSecondRequest(ChildSecondRequest&&) noexcept = default;
  ChildSecondRequest& operator=(ChildSecondRequest&&) noexcept = default;
  ChildSecondRequest(const ChildSecondRequest&) noexcept = delete;
  ChildSecondRequest& operator=(const ChildSecondRequest&) noexcept = delete;

  const ::fidl::InterfaceRequest<::test::inheritancewithrecursivedecl::Parent>&
  request() const {
    return storage_.request;
  }

  ::fidl::InterfaceRequest<::test::inheritancewithrecursivedecl::Parent>&
  request() {
    return storage_.request;
  }

  ChildSecondRequest& set_request(
      ::fidl::InterfaceRequest<::test::inheritancewithrecursivedecl::Parent>
          _value) {
    storage_.request = std::move(_value);
    return *this;
  }

 private:
  friend struct ::fidl::CodingTraits<
      ::test_inheritancewithrecursivedecl::ChildSecondRequest>;

  ::fidl::internal::DesignatedInitializationProxy<
      ::test_inheritancewithrecursivedecl::ChildSecondRequest>
      storage_ = {};
};

}  // namespace test_inheritancewithrecursivedecl
namespace fidl {
#ifdef __Fuchsia__
extern "C" const fidl_type_t
    test_inheritancewithrecursivedecl_ParentFirstRequestTable;

template <>
struct IsResource<::test_inheritancewithrecursivedecl::ParentFirstRequest>
    : public std::true_type {};
template <>
struct IsFidlType<::test_inheritancewithrecursivedecl::ParentFirstRequest>
    : public std::true_type {};

template <>
struct ::fidl::internal::TypeTraits<
    ::test_inheritancewithrecursivedecl::ParentFirstRequest>
    final {
 public:
  static constexpr const fidl_type_t* kCodingTable =
      &test_inheritancewithrecursivedecl_ParentFirstRequestTable;
};

template <>
struct CodingTraits<::test_inheritancewithrecursivedecl::ParentFirstRequest> {
  static constexpr size_t inline_size_v1_no_ee = 8;
  static constexpr size_t inline_size_v2 = 8;

  template <class EncoderImpl>
  static void Encode(
      EncoderImpl* encoder,
      ::test_inheritancewithrecursivedecl::ParentFirstRequest* value,
      size_t offset,
      cpp17::optional<HandleInformation> maybe_handle_info = cpp17::nullopt) {
    [[maybe_unused]] uint32_t field_offset;
    field_offset =
        encoder->wire_format() == ::fidl::internal::WireFormatVersion::kV1 ? 0
                                                                           : 0;
    ::fidl::Encode(encoder, &value->storage_.request, offset + field_offset,
                   ::fidl::HandleInformation{
                       .object_type = ZX_OBJ_TYPE_CHANNEL,
                       .rights = ZX_DEFAULT_CHANNEL_RIGHTS,
                   });
  }

  template <typename DecoderImpl>
  static void Decode(
      DecoderImpl* decoder,
      ::test_inheritancewithrecursivedecl::ParentFirstRequest* value,
      size_t offset) {
    ::fidl::Decode(decoder, &value->storage_.request, offset + 0);
  }
};
#endif  // __Fuchsia__

#ifdef __Fuchsia__
extern "C" const fidl_type_t
    test_inheritancewithrecursivedecl_ChildSecondRequestTable;

template <>
struct IsResource<::test_inheritancewithrecursivedecl::ChildSecondRequest>
    : public std::true_type {};
template <>
struct IsFidlType<::test_inheritancewithrecursivedecl::ChildSecondRequest>
    : public std::true_type {};

template <>
struct ::fidl::internal::TypeTraits<
    ::test_inheritancewithrecursivedecl::ChildSecondRequest>
    final {
 public:
  static constexpr const fidl_type_t* kCodingTable =
      &test_inheritancewithrecursivedecl_ChildSecondRequestTable;
};

template <>
struct CodingTraits<::test_inheritancewithrecursivedecl::ChildSecondRequest> {
  static constexpr size_t inline_size_v1_no_ee = 8;
  static constexpr size_t inline_size_v2 = 8;

  template <class EncoderImpl>
  static void Encode(
      EncoderImpl* encoder,
      ::test_inheritancewithrecursivedecl::ChildSecondRequest* value,
      size_t offset,
      cpp17::optional<HandleInformation> maybe_handle_info = cpp17::nullopt) {
    [[maybe_unused]] uint32_t field_offset;
    field_offset =
        encoder->wire_format() == ::fidl::internal::WireFormatVersion::kV1 ? 0
                                                                           : 0;
    ::fidl::Encode(encoder, &value->storage_.request, offset + field_offset,
                   ::fidl::HandleInformation{
                       .object_type = ZX_OBJ_TYPE_CHANNEL,
                       .rights = ZX_DEFAULT_CHANNEL_RIGHTS,
                   });
  }

  template <typename DecoderImpl>
  static void Decode(
      DecoderImpl* decoder,
      ::test_inheritancewithrecursivedecl::ChildSecondRequest* value,
      size_t offset) {
    ::fidl::Decode(decoder, &value->storage_.request, offset + 0);
  }
};
#endif  // __Fuchsia__

#ifdef __Fuchsia__
}  // namespace fidl
template <>
class ::fidl::internal::NaturalClientImpl<
    ::test_inheritancewithrecursivedecl::Parent>
    final : public ::fidl::internal::NaturalClientBase {
 public:
  using NaturalClientBase::NaturalClientBase;
  ::fitx::result<::fidl::Error> First(
      ::test_inheritancewithrecursivedecl::ParentFirstRequest&& payload) const;
};
namespace fidl {
#endif  // __Fuchsia__

#ifdef __Fuchsia__
}  // namespace fidl
template <>
class ::fidl::internal::NaturalClientImpl<
    ::test_inheritancewithrecursivedecl::Child>
    final : public ::fidl::internal::NaturalClientBase {
 public:
  using NaturalClientBase::NaturalClientBase;
  ::fitx::result<::fidl::Error> First(
      ::test_inheritancewithrecursivedecl::ParentFirstRequest&& payload) const;

  ::fitx::result<::fidl::Error> Second(
      ::test_inheritancewithrecursivedecl::ChildSecondRequest&& payload) const;
};
namespace fidl {
#endif  // __Fuchsia__

}  // namespace fidl
