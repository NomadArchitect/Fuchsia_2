// WARNING: This file is machine generated by fidlgen.

#pragma once

#include <lib/fidl/cpp/wire/internal/transport.h>
#include <lib/fidl/cpp/wire/unknown_interactions.h>

namespace test_protocolrequest {

class Child final {
  Child() = delete;

 public:
  using Transport = ::fidl::internal::ChannelTransport;

  static constexpr ::fidl::internal::Openness kOpenness = ::fidl::internal::Openness::kClosed;
};

class Parent final {
  Parent() = delete;

 public:
  using Transport = ::fidl::internal::ChannelTransport;

  static constexpr ::fidl::internal::Openness kOpenness = ::fidl::internal::Openness::kClosed;
  class GetChild final {
    GetChild() = delete;

   public:
    using Protocol = ::test_protocolrequest::Parent;
    static constexpr bool kHasRequest = true;
    static constexpr bool kHasRequestBody = false;
    static constexpr bool kHasResponse = true;
    static constexpr bool kHasResponseBody = true;

    static constexpr bool kHasNonEmptyPayload = true;
    static constexpr bool kHasDomainError = false;
    static constexpr bool kHasFrameworkError = false;
  };
  class GetChildRequest final {
    GetChildRequest() = delete;

   public:
    using Protocol = ::test_protocolrequest::Parent;
    static constexpr bool kHasRequest = true;
    static constexpr bool kHasRequestBody = false;
    static constexpr bool kHasResponse = true;
    static constexpr bool kHasResponseBody = true;

    static constexpr bool kHasNonEmptyPayload = true;
    static constexpr bool kHasDomainError = false;
    static constexpr bool kHasFrameworkError = false;
  };
  class TakeChild final {
    TakeChild() = delete;

   public:
    using Protocol = ::test_protocolrequest::Parent;
    static constexpr bool kHasRequest = true;
    static constexpr bool kHasRequestBody = true;
    static constexpr bool kHasResponse = false;
    static constexpr bool kHasResponseBody = false;

    static constexpr bool kHasNonEmptyPayload = false;
    static constexpr bool kHasDomainError = false;
    static constexpr bool kHasFrameworkError = false;
  };
  class TakeChildRequest final {
    TakeChildRequest() = delete;

   public:
    using Protocol = ::test_protocolrequest::Parent;
    static constexpr bool kHasRequest = true;
    static constexpr bool kHasRequestBody = true;
    static constexpr bool kHasResponse = false;
    static constexpr bool kHasResponseBody = false;

    static constexpr bool kHasNonEmptyPayload = false;
    static constexpr bool kHasDomainError = false;
    static constexpr bool kHasFrameworkError = false;
  };
};

}  // namespace test_protocolrequest
namespace fidl {

template <>
struct IsProtocol<::test_protocolrequest::Child> : public std::true_type {};

template <>
struct IsProtocol<::test_protocolrequest::Parent> : public std::true_type {};

}  // namespace fidl
