// WARNING: This file is machine generated by fidlgen_cpp.

#include <test/union/cpp/fidl_v2.h>

namespace test_union {
[[maybe_unused]] constexpr inline uint64_t
    kTestProtocol_StrictXUnionHenceResponseMayBeStackAllocated_Ordinal =
        582913180652179677lu;
[[maybe_unused]] constexpr inline uint64_t
    kTestProtocol_FlexibleXUnionHenceResponseMustBeHeapAllocated_Ordinal =
        7698084639218919941lu;

#ifdef __Fuchsia__
}  // namespace test_union
void fidl::internal::NaturalClientImpl<::test_union::TestProtocol>::
    StrictXUnionHenceResponseMayBeStackAllocated(
        ::fidl::ClientCallback<
            ::test_union::TestProtocol::
                StrictXUnionHenceResponseMayBeStackAllocated>&& _callback)
        const {
  ::fidl::Encoder _encoder{
      ::test_union::
          kTestProtocol_StrictXUnionHenceResponseMayBeStackAllocated_Ordinal};
  return messenger().TwoWay(
      &::test_union::
          test_union_TestProtocolStrictXUnionHenceResponseMayBeStackAllocatedRequestMessageTable,
      ::fidl::internal::EncodeTransactionalMessageWithoutValidating(_encoder),
      ::fidl::internal::MakeResponseContext<
          ::fidl::Response<::test_union::TestProtocol::
                               StrictXUnionHenceResponseMayBeStackAllocated>,
          ::fidl::ClientCallback<
              ::test_union::TestProtocol::
                  StrictXUnionHenceResponseMayBeStackAllocated>>(
          ::test_union::
              kTestProtocol_StrictXUnionHenceResponseMayBeStackAllocated_Ordinal,
          std::move(_callback)));
}
void fidl::internal::NaturalClientImpl<::test_union::TestProtocol>::
    StrictXUnionHenceResponseMayBeStackAllocated(
        ::fidl::ClientResponseCallback<
            ::test_union::TestProtocol::
                StrictXUnionHenceResponseMayBeStackAllocated>&& _callback)
        const {
  ::fidl::Encoder _encoder{
      ::test_union::
          kTestProtocol_StrictXUnionHenceResponseMayBeStackAllocated_Ordinal};
  return messenger().TwoWay(
      &::test_union::
          test_union_TestProtocolStrictXUnionHenceResponseMayBeStackAllocatedRequestMessageTable,
      ::fidl::internal::EncodeTransactionalMessageWithoutValidating(_encoder),
      ::fidl::internal::MakeResponseContext<
          ::fidl::Response<::test_union::TestProtocol::
                               StrictXUnionHenceResponseMayBeStackAllocated>,
          ::fidl::ClientResponseCallback<
              ::test_union::TestProtocol::
                  StrictXUnionHenceResponseMayBeStackAllocated>>(
          ::test_union::
              kTestProtocol_StrictXUnionHenceResponseMayBeStackAllocated_Ordinal,
          std::move(_callback)));
}

void fidl::internal::NaturalClientImpl<::test_union::TestProtocol>::
    FlexibleXUnionHenceResponseMustBeHeapAllocated(
        ::fidl::ClientCallback<
            ::test_union::TestProtocol::
                FlexibleXUnionHenceResponseMustBeHeapAllocated>&& _callback)
        const {
  ::fidl::Encoder _encoder{
      ::test_union::
          kTestProtocol_FlexibleXUnionHenceResponseMustBeHeapAllocated_Ordinal};
  return messenger().TwoWay(
      &::test_union::
          test_union_TestProtocolFlexibleXUnionHenceResponseMustBeHeapAllocatedRequestMessageTable,
      ::fidl::internal::EncodeTransactionalMessageWithoutValidating(_encoder),
      ::fidl::internal::MakeResponseContext<
          ::fidl::Response<::test_union::TestProtocol::
                               FlexibleXUnionHenceResponseMustBeHeapAllocated>,
          ::fidl::ClientCallback<
              ::test_union::TestProtocol::
                  FlexibleXUnionHenceResponseMustBeHeapAllocated>>(
          ::test_union::
              kTestProtocol_FlexibleXUnionHenceResponseMustBeHeapAllocated_Ordinal,
          std::move(_callback)));
}
void fidl::internal::NaturalClientImpl<::test_union::TestProtocol>::
    FlexibleXUnionHenceResponseMustBeHeapAllocated(
        ::fidl::ClientResponseCallback<
            ::test_union::TestProtocol::
                FlexibleXUnionHenceResponseMustBeHeapAllocated>&& _callback)
        const {
  ::fidl::Encoder _encoder{
      ::test_union::
          kTestProtocol_FlexibleXUnionHenceResponseMustBeHeapAllocated_Ordinal};
  return messenger().TwoWay(
      &::test_union::
          test_union_TestProtocolFlexibleXUnionHenceResponseMustBeHeapAllocatedRequestMessageTable,
      ::fidl::internal::EncodeTransactionalMessageWithoutValidating(_encoder),
      ::fidl::internal::MakeResponseContext<
          ::fidl::Response<::test_union::TestProtocol::
                               FlexibleXUnionHenceResponseMustBeHeapAllocated>,
          ::fidl::ClientResponseCallback<
              ::test_union::TestProtocol::
                  FlexibleXUnionHenceResponseMustBeHeapAllocated>>(
          ::test_union::
              kTestProtocol_FlexibleXUnionHenceResponseMustBeHeapAllocated_Ordinal,
          std::move(_callback)));
}
namespace test_union {
#endif  // __Fuchsia__

}  // namespace test_union
#ifdef __Fuchsia__

std::optional<::fidl::UnbindInfo> fidl::internal::
    NaturalEventDispatcher<::test_union::TestProtocol>::DispatchEvent(
        ::fidl::IncomingMessage& msg,
        ::fidl::internal::IncomingTransportContext transport_context) {
  return ::fidl::UnbindInfo::UnknownOrdinal();
}
#endif  // __Fuchsia__
