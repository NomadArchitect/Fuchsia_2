// WARNING: This file is machine generated by fidlgen_cpp.

#pragma once

#include <fidl/test.inheritance/cpp/wire.h>
#include <lib/fidl/cpp/client.h>
#include <lib/fidl/cpp/internal/codable_base.h>
#include <lib/fidl/cpp/internal/message_extensions.h>
#include <lib/fidl/cpp/internal/natural_client_messenger.h>
#include <lib/fidl/cpp/natural_types.h>
#include <lib/fidl/cpp/unified_messaging.h>
#include <test/inheritance/cpp/natural_types.h>

namespace test_inheritance {
class SuperFooTopResponse;

class SuperFooRequest;

}  // namespace test_inheritance
template <>
struct ::fidl::internal::DesignatedInitializationProxy<
    ::test_inheritance::SuperFooTopResponse>
    final {
 public:
  int64_t y = {};
};

namespace test_inheritance {
class SuperFooTopResponse final
    : public ::fidl::internal::CodableBase<SuperFooTopResponse> {
 private:
  friend ::fidl::internal::CodableBase<SuperFooTopResponse>;
  SuperFooTopResponse(::fidl::Decoder& decoder);
  template <typename Payload>
  friend auto ::fidl::internal::EncodeTransactionalMessageWithoutValidating(
      ::fidl::Encoder& encoder, Payload&& payload)
      -> ::fidl::HLCPPOutgoingMessage;
  void EncodeWithoutValidating(::fidl::Encoder& encoder, size_t offset);

 public:
  SuperFooTopResponse() = default;
  SuperFooTopResponse(int64_t y) : storage_({y}) {}
  SuperFooTopResponse(::fidl::internal::DesignatedInitializationProxy<
                      ::test_inheritance::SuperFooTopResponse>
                          storage)
      : storage_(std::move(storage)) {}
  ~SuperFooTopResponse() = default;
  SuperFooTopResponse(SuperFooTopResponse&&) noexcept = default;
  SuperFooTopResponse& operator=(SuperFooTopResponse&&) noexcept = default;

  const int64_t& y() const { return storage_.y; }

  int64_t& y() { return storage_.y; }

  SuperFooTopResponse& set_y(int64_t _value) {
    storage_.y = std::move(_value);
    return *this;
  }

 private:
  friend struct ::fidl::CodingTraits<::test_inheritance::SuperFooTopResponse>;

  ::fidl::internal::DesignatedInitializationProxy<
      ::test_inheritance::SuperFooTopResponse>
      storage_ = {};
};

}  // namespace test_inheritance
template <>
struct ::fidl::internal::DesignatedInitializationProxy<
    ::test_inheritance::SuperFooRequest>
    final {
 public:
  ::std::string s = {};
};

namespace test_inheritance {
class SuperFooRequest final
    : public ::fidl::internal::CodableBase<SuperFooRequest> {
 private:
  friend ::fidl::internal::CodableBase<SuperFooRequest>;
  SuperFooRequest(::fidl::Decoder& decoder);
  template <typename Payload>
  friend auto ::fidl::internal::EncodeTransactionalMessageWithoutValidating(
      ::fidl::Encoder& encoder, Payload&& payload)
      -> ::fidl::HLCPPOutgoingMessage;
  void EncodeWithoutValidating(::fidl::Encoder& encoder, size_t offset);

 public:
  SuperFooRequest() = default;
  SuperFooRequest(::std::string s) : storage_({std::move(s)}) {}
  SuperFooRequest(::fidl::internal::DesignatedInitializationProxy<
                  ::test_inheritance::SuperFooRequest>
                      storage)
      : storage_(std::move(storage)) {}
  ~SuperFooRequest() = default;
  SuperFooRequest(SuperFooRequest&&) noexcept = default;
  SuperFooRequest& operator=(SuperFooRequest&&) noexcept = default;

  const ::std::string& s() const { return storage_.s; }

  ::std::string& s() { return storage_.s; }

  SuperFooRequest& set_s(::std::string _value) {
    storage_.s = std::move(_value);
    return *this;
  }

 private:
  friend struct ::fidl::CodingTraits<::test_inheritance::SuperFooRequest>;

  ::fidl::internal::DesignatedInitializationProxy<
      ::test_inheritance::SuperFooRequest>
      storage_ = {};
};

}  // namespace test_inheritance
namespace fidl {
#ifdef __Fuchsia__
extern "C" const fidl_type_t test_inheritance_SuperFooTopResponseTable;

template <>
struct IsFidlType<::test_inheritance::SuperFooTopResponse>
    : public std::true_type {};

template <>
struct ::fidl::internal::TypeTraits<::test_inheritance::SuperFooTopResponse>
    final {
 public:
  static constexpr const fidl_type_t* kCodingTable =
      &test_inheritance_SuperFooTopResponseTable;
};

template <>
struct CodingTraits<::test_inheritance::SuperFooTopResponse> {
  static constexpr size_t inline_size_v1_no_ee = 8;
  static constexpr size_t inline_size_v2 = 8;

  template <class EncoderImpl>
  static void Encode(
      EncoderImpl* encoder, ::test_inheritance::SuperFooTopResponse* value,
      size_t offset,
      cpp17::optional<HandleInformation> maybe_handle_info = cpp17::nullopt) {
    [[maybe_unused]] uint32_t field_offset;
    field_offset =
        encoder->wire_format() == ::fidl::internal::WireFormatVersion::kV1 ? 0
                                                                           : 0;
    ::fidl::Encode(encoder, &value->storage_.y, offset + field_offset);
  }

  template <typename DecoderImpl>
  static void Decode(DecoderImpl* decoder,
                     ::test_inheritance::SuperFooTopResponse* value,
                     size_t offset) {
    ::fidl::Decode(decoder, &value->storage_.y, offset + 0);
  }
};
#endif  // __Fuchsia__

#ifdef __Fuchsia__
extern "C" const fidl_type_t test_inheritance_SuperFooRequestTable;

template <>
struct IsFidlType<::test_inheritance::SuperFooRequest> : public std::true_type {
};

template <>
struct ::fidl::internal::TypeTraits<::test_inheritance::SuperFooRequest> final {
 public:
  static constexpr const fidl_type_t* kCodingTable =
      &test_inheritance_SuperFooRequestTable;
};

template <>
struct CodingTraits<::test_inheritance::SuperFooRequest> {
  static constexpr size_t inline_size_v1_no_ee = 16;
  static constexpr size_t inline_size_v2 = 16;

  template <class EncoderImpl>
  static void Encode(
      EncoderImpl* encoder, ::test_inheritance::SuperFooRequest* value,
      size_t offset,
      cpp17::optional<HandleInformation> maybe_handle_info = cpp17::nullopt) {
    [[maybe_unused]] uint32_t field_offset;
    field_offset =
        encoder->wire_format() == ::fidl::internal::WireFormatVersion::kV1 ? 0
                                                                           : 0;
    ::fidl::Encode(encoder, &value->storage_.s, offset + field_offset);
  }

  template <typename DecoderImpl>
  static void Decode(DecoderImpl* decoder,
                     ::test_inheritance::SuperFooRequest* value,
                     size_t offset) {
    ::fidl::Decode(decoder, &value->storage_.s, offset + 0);
  }
};
#endif  // __Fuchsia__

#ifdef __Fuchsia__
}  // namespace fidl

template <>
class ::fidl::Response<::test_inheritance::Super::Foo> final
    : public ::fidl::internal::MessageBase<
          ::fidl::Response<::test_inheritance::Super::Foo>> {
 public:
  Response() = default;
  ~Response() = default;
  Response(Response&&) noexcept = default;
  Response& operator=(Response&&) noexcept = default;
  Response(::test_inheritance::SuperFooTopResponse payload)
      : payload_(std::move(payload)) {}
  ::test_inheritance::SuperFooTopResponse* operator->() { return &payload_; }
  const ::test_inheritance::SuperFooTopResponse* operator->() const {
    return &payload_;
  }
  ::test_inheritance::SuperFooTopResponse& operator*() { return payload_; }
  const ::test_inheritance::SuperFooTopResponse& operator*() const {
    return payload_;
  }

 private:
  ::test_inheritance::SuperFooTopResponse payload_;
};

template <>
struct ::fidl::internal::MessageTraits<
    ::fidl::Response<::test_inheritance::Super::Foo>>
    final {
 public:
  static constexpr bool kHasPayload = true;
  using Payload = ::test_inheritance::SuperFooTopResponse;
};
namespace fidl {}  // namespace fidl
template <>
class ::fidl::internal::ClientCallbackTraits<::test_inheritance::Super::Foo>
    final {
 public:
  ClientCallbackTraits() = delete;
  using ResultCallback = ::fit::callback<void(
      ::fitx::result<::fidl::Error,
                     ::fidl::Response<::test_inheritance::Super::Foo>>&)>;
  using ResponseCallback =
      ::fit::callback<void(::fidl::Response<::test_inheritance::Super::Foo>&)>;
};

template <>
class ::fidl::internal::NaturalClientImpl<::test_inheritance::Super> final
    : public ::fidl::internal::NaturalClientBase {
 public:
  using NaturalClientBase::NaturalClientBase;
  void foo(
      ::test_inheritance::SuperFooRequest&& payload,
      ::fidl::ClientCallback<::test_inheritance::Super::Foo>&& _callback) const;

  void foo(::test_inheritance::SuperFooRequest&& payload,
           ::fidl::ClientResponseCallback<::test_inheritance::Super::Foo>&&
               _callback) const;
};
namespace fidl {
#endif  // __Fuchsia__

#ifdef __Fuchsia__
}  // namespace fidl

template <>
class ::fidl::Response<::test_inheritance::Sub::Foo> final
    : public ::fidl::internal::MessageBase<
          ::fidl::Response<::test_inheritance::Sub::Foo>> {
 public:
  Response() = default;
  ~Response() = default;
  Response(Response&&) noexcept = default;
  Response& operator=(Response&&) noexcept = default;
  Response(::test_inheritance::SuperFooTopResponse payload)
      : payload_(std::move(payload)) {}
  ::test_inheritance::SuperFooTopResponse* operator->() { return &payload_; }
  const ::test_inheritance::SuperFooTopResponse* operator->() const {
    return &payload_;
  }
  ::test_inheritance::SuperFooTopResponse& operator*() { return payload_; }
  const ::test_inheritance::SuperFooTopResponse& operator*() const {
    return payload_;
  }

 private:
  ::test_inheritance::SuperFooTopResponse payload_;
};

template <>
struct ::fidl::internal::MessageTraits<
    ::fidl::Response<::test_inheritance::Sub::Foo>>
    final {
 public:
  static constexpr bool kHasPayload = true;
  using Payload = ::test_inheritance::SuperFooTopResponse;
};
namespace fidl {}  // namespace fidl
template <>
class ::fidl::internal::ClientCallbackTraits<::test_inheritance::Sub::Foo>
    final {
 public:
  ClientCallbackTraits() = delete;
  using ResultCallback = ::fit::callback<void(
      ::fitx::result<::fidl::Error,
                     ::fidl::Response<::test_inheritance::Sub::Foo>>&)>;
  using ResponseCallback =
      ::fit::callback<void(::fidl::Response<::test_inheritance::Sub::Foo>&)>;
};

template <>
class ::fidl::internal::NaturalClientImpl<::test_inheritance::Sub> final
    : public ::fidl::internal::NaturalClientBase {
 public:
  using NaturalClientBase::NaturalClientBase;
  void foo(
      ::test_inheritance::SuperFooRequest&& payload,
      ::fidl::ClientCallback<::test_inheritance::Sub::Foo>&& _callback) const;

  void foo(::test_inheritance::SuperFooRequest&& payload,
           ::fidl::ClientResponseCallback<::test_inheritance::Sub::Foo>&&
               _callback) const;
};
namespace fidl {
#endif  // __Fuchsia__

}  // namespace fidl
