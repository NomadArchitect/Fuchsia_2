// WARNING: This file is machine generated by fidlgen.

#pragma once

#include <fidl/test.protocolrequest/cpp/natural_types.h>
#include <lib/fidl/cpp/natural_ostream.h>

#include <iostream>

template <>
struct fidl::ostream::Formatter<::test_protocolrequest::ParentGetChildTopResponse> {
  static std::ostream& Format(std::ostream& os, const ::test_protocolrequest::ParentGetChildTopResponse& value);
};
std::ostream& operator<<(std::ostream& os, const ::test_protocolrequest::ParentGetChildTopResponse& value);
template <>
struct fidl::ostream::Formatter<::test_protocolrequest::ParentGetChildRequestTopResponse> {
  static std::ostream& Format(std::ostream& os, const ::test_protocolrequest::ParentGetChildRequestTopResponse& value);
};
std::ostream& operator<<(std::ostream& os, const ::test_protocolrequest::ParentGetChildRequestTopResponse& value);
template <>
struct fidl::ostream::Formatter<::test_protocolrequest::ParentTakeChildRequest> {
  static std::ostream& Format(std::ostream& os, const ::test_protocolrequest::ParentTakeChildRequest& value);
};
std::ostream& operator<<(std::ostream& os, const ::test_protocolrequest::ParentTakeChildRequest& value);
template <>
struct fidl::ostream::Formatter<::test_protocolrequest::ParentTakeChildRequestRequest> {
  static std::ostream& Format(std::ostream& os, const ::test_protocolrequest::ParentTakeChildRequestRequest& value);
};
std::ostream& operator<<(std::ostream& os, const ::test_protocolrequest::ParentTakeChildRequestRequest& value);
template <>
struct fidl::ostream::Formatter<::fidl::ClientEnd<::test_protocolrequest::Child>> {
  static std::ostream& Format(std::ostream& os, const ::fidl::ClientEnd<::test_protocolrequest::Child>& value) {
    return os << "ClientEnd<"
              << "test_protocolrequest::Child"
              << ">(" << value.channel().get() << ")";
  }
};
inline std::ostream& operator<<(std::ostream& os, const ::fidl::ClientEnd<::test_protocolrequest::Child>& value) {
  return fidl::ostream::Formatter<::fidl::ClientEnd<::test_protocolrequest::Child>>::Format(os, value);
}

template <>
struct fidl::ostream::Formatter<::fidl::ServerEnd<::test_protocolrequest::Child>> {
  static std::ostream& Format(std::ostream& os, const ::fidl::ServerEnd<::test_protocolrequest::Child>& value) {
    return os << "ServerEnd<"
              << "test_protocolrequest::Child"
              << ">(" << value.channel().get() << ")";
  }
};
inline std::ostream& operator<<(std::ostream& os, const ::fidl::ServerEnd<::test_protocolrequest::Child>& value) {
  return fidl::ostream::Formatter<::fidl::ServerEnd<::test_protocolrequest::Child>>::Format(os, value);
}
template <>
struct fidl::ostream::Formatter<::fidl::ClientEnd<::test_protocolrequest::Parent>> {
  static std::ostream& Format(std::ostream& os, const ::fidl::ClientEnd<::test_protocolrequest::Parent>& value) {
    return os << "ClientEnd<"
              << "test_protocolrequest::Parent"
              << ">(" << value.channel().get() << ")";
  }
};
inline std::ostream& operator<<(std::ostream& os, const ::fidl::ClientEnd<::test_protocolrequest::Parent>& value) {
  return fidl::ostream::Formatter<::fidl::ClientEnd<::test_protocolrequest::Parent>>::Format(os, value);
}

template <>
struct fidl::ostream::Formatter<::fidl::ServerEnd<::test_protocolrequest::Parent>> {
  static std::ostream& Format(std::ostream& os, const ::fidl::ServerEnd<::test_protocolrequest::Parent>& value) {
    return os << "ServerEnd<"
              << "test_protocolrequest::Parent"
              << ">(" << value.channel().get() << ")";
  }
};
inline std::ostream& operator<<(std::ostream& os, const ::fidl::ServerEnd<::test_protocolrequest::Parent>& value) {
  return fidl::ostream::Formatter<::fidl::ServerEnd<::test_protocolrequest::Parent>>::Format(os, value);
}
