// WARNING: This file is machine generated by fidlgen_cpp.

#include <fidl/test/encapsulatedstructs/cpp/fidl_v2.h>

#ifdef __Fuchsia__

void ::fidl_test_encapsulatedstructs::NonInlineStructTestStruct::
    EncodeWithoutValidating(::fidl::Encoder& encoder, size_t offset) {
  encoder.Alloc(::fidl::EncodingInlineSize<
                ::fidl_test_encapsulatedstructs::NonInlineStructTestStruct,
                ::fidl::Encoder>(&encoder));
  ::fidl::CodingTraits<::fidl_test_encapsulatedstructs::
                           NonInlineStructTestStruct>::Encode(&encoder, this,
                                                              offset);
}

::fidl_test_encapsulatedstructs::NonInlineStructTestStruct::
    NonInlineStructTestStruct(::fidl::Decoder& decoder)
    : storage_(
          {::fidl::DecodeAs<
               ::std::unique_ptr<::fidl_test_encapsulatedstructs::Int16Int8>>(
               &decoder, 0),
           ::fidl::DecodeAs<::zx::handle>(&decoder, 8)}) {}
#endif  // __Fuchsia__

#ifdef __Fuchsia__

void ::fidl_test_encapsulatedstructs::Int8Int32::EncodeWithoutValidating(
    ::fidl::Encoder& encoder, size_t offset) {
  encoder.Alloc(
      ::fidl::EncodingInlineSize<::fidl_test_encapsulatedstructs::Int8Int32,
                                 ::fidl::Encoder>(&encoder));
  ::fidl::CodingTraits<::fidl_test_encapsulatedstructs::Int8Int32>::Encode(
      &encoder, this, offset);
}

::fidl_test_encapsulatedstructs::Int8Int32::Int8Int32(::fidl::Decoder& decoder)
    : storage_({::fidl::DecodeAs<int8_t>(&decoder, 0),
                ::fidl::DecodeAs<int32_t>(&decoder, 4)}) {}
#endif  // __Fuchsia__

#ifdef __Fuchsia__

void ::fidl_test_encapsulatedstructs::Int16Int8::EncodeWithoutValidating(
    ::fidl::Encoder& encoder, size_t offset) {
  encoder.Alloc(
      ::fidl::EncodingInlineSize<::fidl_test_encapsulatedstructs::Int16Int8,
                                 ::fidl::Encoder>(&encoder));
  ::fidl::CodingTraits<::fidl_test_encapsulatedstructs::Int16Int8>::Encode(
      &encoder, this, offset);
}

::fidl_test_encapsulatedstructs::Int16Int8::Int16Int8(::fidl::Decoder& decoder)
    : storage_({::fidl::DecodeAs<int16_t>(&decoder, 0),
                ::fidl::DecodeAs<int8_t>(&decoder, 2)}) {}
#endif  // __Fuchsia__

#ifdef __Fuchsia__

void ::fidl_test_encapsulatedstructs::ArrayInt16Int8::EncodeWithoutValidating(
    ::fidl::Encoder& encoder, size_t offset) {
  encoder.Alloc(
      ::fidl::EncodingInlineSize<
          ::fidl_test_encapsulatedstructs::ArrayInt16Int8, ::fidl::Encoder>(
          &encoder));
  ::fidl::CodingTraits<::fidl_test_encapsulatedstructs::ArrayInt16Int8>::Encode(
      &encoder, this, offset);
}

::fidl_test_encapsulatedstructs::ArrayInt16Int8::ArrayInt16Int8(
    ::fidl::Decoder& decoder)
    : storage_({::fidl::DecodeAs<
          ::std::array<::fidl_test_encapsulatedstructs::Int16Int8, 3>>(&decoder,
                                                                       0)}) {}
#endif  // __Fuchsia__

#ifdef __Fuchsia__

void ::fidl_test_encapsulatedstructs::StructPaddingTestStruct::
    EncodeWithoutValidating(::fidl::Encoder& encoder, size_t offset) {
  encoder.Alloc(::fidl::EncodingInlineSize<
                ::fidl_test_encapsulatedstructs::StructPaddingTestStruct,
                ::fidl::Encoder>(&encoder));
  ::fidl::CodingTraits<::fidl_test_encapsulatedstructs::
                           StructPaddingTestStruct>::Encode(&encoder, this,
                                                            offset);
}

::fidl_test_encapsulatedstructs::StructPaddingTestStruct::
    StructPaddingTestStruct(::fidl::Decoder& decoder)
    : storage_(
          {::fidl::DecodeAs<::fidl_test_encapsulatedstructs::Int16Int8>(
               &decoder, 0),
           ::fidl::DecodeAs<::fidl_test_encapsulatedstructs::Int8Int32>(
               &decoder, 4),
           ::fidl::DecodeAs<::fidl_test_encapsulatedstructs::ArrayInt16Int8>(
               &decoder, 12)}) {}
#endif  // __Fuchsia__

#ifdef __Fuchsia__

void ::fidl_test_encapsulatedstructs::TopLevelStruct::EncodeWithoutValidating(
    ::fidl::Encoder& encoder, size_t offset) {
  encoder.Alloc(
      ::fidl::EncodingInlineSize<
          ::fidl_test_encapsulatedstructs::TopLevelStruct, ::fidl::Encoder>(
          &encoder));
  ::fidl::CodingTraits<::fidl_test_encapsulatedstructs::TopLevelStruct>::Encode(
      &encoder, this, offset);
}

::fidl_test_encapsulatedstructs::TopLevelStruct::TopLevelStruct(
    ::fidl::Decoder& decoder)
    : storage_({::fidl::DecodeAs<
                    ::fidl_test_encapsulatedstructs::StructPaddingTestStruct>(
                    &decoder, 0),
                ::fidl::DecodeAs<
                    ::fidl_test_encapsulatedstructs::NonInlineStructTestStruct>(
                    &decoder, 24)}) {}
#endif  // __Fuchsia__
