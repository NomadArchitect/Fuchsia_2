// WARNING: This file is machine generated by fidlgen_cpp.

#pragma once

#include <fidl/test.placementofattributes/cpp/wire.h>
#include <lib/fidl/cpp/client.h>
#include <lib/fidl/cpp/internal/codable_base.h>
#include <lib/fidl/cpp/internal/message_extensions.h>
#include <lib/fidl/cpp/internal/natural_client_messenger.h>
#include <lib/fidl/cpp/natural_types.h>
#include <lib/fidl/cpp/unified_messaging.h>
#include <test/exampleusing/cpp/fidl_v2.h>
#include <test/placementofattributes/cpp/natural_types.h>

namespace test_placementofattributes {
class ExampleStruct;

class ExampleProtocolMethodRequest;

using ExampleXUnion = ::test::placementofattributes::ExampleXUnion;

using ExampleUnion = ::test::placementofattributes::ExampleUnion;

using ExampleTable = ::test::placementofattributes::ExampleTable;

using ExampleEnum = ::test::placementofattributes::ExampleEnum;

using ExampleBits = ::test::placementofattributes::ExampleBits;
const static ExampleBits ExampleBitsMask =
    ::test::placementofattributes::ExampleBitsMask;

}  // namespace test_placementofattributes
template <>
struct ::fidl::internal::DesignatedInitializationProxy<
    ::test_placementofattributes::ExampleStruct>
    final {
 public:
  uint32_t member = {};
};

namespace test_placementofattributes {
class ExampleStruct final
    : public ::fidl::internal::CodableBase<ExampleStruct> {
 private:
  friend ::fidl::internal::CodableBase<ExampleStruct>;
  ExampleStruct(::fidl::Decoder& decoder);
  template <typename Payload>
  friend auto ::fidl::internal::EncodeTransactionalMessageWithoutValidating(
      ::fidl::Encoder& encoder, Payload&& payload)
      -> ::fidl::HLCPPOutgoingMessage;
  void EncodeWithoutValidating(::fidl::Encoder& encoder, size_t offset);

 public:
  ExampleStruct() = default;
  ExampleStruct(uint32_t member) : storage_({member}) {}
  ExampleStruct(::fidl::internal::DesignatedInitializationProxy<
                ::test_placementofattributes::ExampleStruct>
                    storage)
      : storage_(std::move(storage)) {}
  ~ExampleStruct() = default;
  ExampleStruct(ExampleStruct&&) noexcept = default;
  ExampleStruct& operator=(ExampleStruct&&) noexcept = default;

  const uint32_t& member() const { return storage_.member; }

  uint32_t& member() { return storage_.member; }

  ExampleStruct& set_member(uint32_t _value) {
    storage_.member = std::move(_value);
    return *this;
  }

 private:
  friend struct ::fidl::CodingTraits<
      ::test_placementofattributes::ExampleStruct>;

  ::fidl::internal::DesignatedInitializationProxy<
      ::test_placementofattributes::ExampleStruct>
      storage_ = {};
};

constexpr uint32_t EXAMPLE_CONST = ::test::placementofattributes::EXAMPLE_CONST;

}  // namespace test_placementofattributes
template <>
struct ::fidl::internal::DesignatedInitializationProxy<
    ::test_placementofattributes::ExampleProtocolMethodRequest>
    final {
 public:
  ::test_exampleusing::Empty arg = {};
};

namespace test_placementofattributes {
class ExampleProtocolMethodRequest final
    : public ::fidl::internal::CodableBase<ExampleProtocolMethodRequest> {
 private:
  friend ::fidl::internal::CodableBase<ExampleProtocolMethodRequest>;
  ExampleProtocolMethodRequest(::fidl::Decoder& decoder);
  template <typename Payload>
  friend auto ::fidl::internal::EncodeTransactionalMessageWithoutValidating(
      ::fidl::Encoder& encoder, Payload&& payload)
      -> ::fidl::HLCPPOutgoingMessage;
  void EncodeWithoutValidating(::fidl::Encoder& encoder, size_t offset);

 public:
  ExampleProtocolMethodRequest() = default;
  ExampleProtocolMethodRequest(::test_exampleusing::Empty arg)
      : storage_({std::move(arg)}) {}
  ExampleProtocolMethodRequest(
      ::fidl::internal::DesignatedInitializationProxy<
          ::test_placementofattributes::ExampleProtocolMethodRequest>
          storage)
      : storage_(std::move(storage)) {}
  ~ExampleProtocolMethodRequest() = default;
  ExampleProtocolMethodRequest(ExampleProtocolMethodRequest&&) noexcept =
      default;
  ExampleProtocolMethodRequest& operator=(
      ExampleProtocolMethodRequest&&) noexcept = default;

  const ::test_exampleusing::Empty& arg() const { return storage_.arg; }

  ::test_exampleusing::Empty& arg() { return storage_.arg; }

  ExampleProtocolMethodRequest& set_arg(::test_exampleusing::Empty _value) {
    storage_.arg = std::move(_value);
    return *this;
  }

 private:
  friend struct ::fidl::CodingTraits<
      ::test_placementofattributes::ExampleProtocolMethodRequest>;

  ::fidl::internal::DesignatedInitializationProxy<
      ::test_placementofattributes::ExampleProtocolMethodRequest>
      storage_ = {};
};

}  // namespace test_placementofattributes
namespace fidl {
#ifdef __Fuchsia__
extern "C" const fidl_type_t test_placementofattributes_ExampleStructTable;

template <>
struct IsFidlType<::test_placementofattributes::ExampleStruct>
    : public std::true_type {};

template <>
struct ::fidl::internal::TypeTraits<::test_placementofattributes::ExampleStruct>
    final {
 public:
  static constexpr const fidl_type_t* kCodingTable =
      &test_placementofattributes_ExampleStructTable;
};

template <>
struct CodingTraits<::test_placementofattributes::ExampleStruct> {
  static constexpr size_t inline_size_v1_no_ee = 4;
  static constexpr size_t inline_size_v2 = 4;

  template <class EncoderImpl>
  static void Encode(
      EncoderImpl* encoder, ::test_placementofattributes::ExampleStruct* value,
      size_t offset,
      cpp17::optional<HandleInformation> maybe_handle_info = cpp17::nullopt) {
    [[maybe_unused]] uint32_t field_offset;
    field_offset =
        encoder->wire_format() == ::fidl::internal::WireFormatVersion::kV1 ? 0
                                                                           : 0;
    ::fidl::Encode(encoder, &value->storage_.member, offset + field_offset);
  }

  template <typename DecoderImpl>
  static void Decode(DecoderImpl* decoder,
                     ::test_placementofattributes::ExampleStruct* value,
                     size_t offset) {
    ::fidl::Decode(decoder, &value->storage_.member, offset + 0);
  }
};
#endif  // __Fuchsia__

#ifdef __Fuchsia__
extern "C" const fidl_type_t
    test_placementofattributes_ExampleProtocolMethodRequestTable;

template <>
struct IsFidlType<::test_placementofattributes::ExampleProtocolMethodRequest>
    : public std::true_type {};

template <>
struct ::fidl::internal::TypeTraits<
    ::test_placementofattributes::ExampleProtocolMethodRequest>
    final {
 public:
  static constexpr const fidl_type_t* kCodingTable =
      &test_placementofattributes_ExampleProtocolMethodRequestTable;
};

template <>
struct CodingTraits<
    ::test_placementofattributes::ExampleProtocolMethodRequest> {
  static constexpr size_t inline_size_v1_no_ee = 8;
  static constexpr size_t inline_size_v2 = 8;

  template <class EncoderImpl>
  static void Encode(
      EncoderImpl* encoder,
      ::test_placementofattributes::ExampleProtocolMethodRequest* value,
      size_t offset,
      cpp17::optional<HandleInformation> maybe_handle_info = cpp17::nullopt) {
    [[maybe_unused]] uint32_t field_offset;
    field_offset =
        encoder->wire_format() == ::fidl::internal::WireFormatVersion::kV1 ? 0
                                                                           : 0;
    ::fidl::Encode(encoder, &value->storage_.arg, offset + field_offset);
  }

  template <typename DecoderImpl>
  static void Decode(
      DecoderImpl* decoder,
      ::test_placementofattributes::ExampleProtocolMethodRequest* value,
      size_t offset) {
    ::fidl::Decode(decoder, &value->storage_.arg, offset + 0);
  }
};
#endif  // __Fuchsia__

#ifdef __Fuchsia__
}  // namespace fidl
template <>
class ::fidl::internal::NaturalClientImpl<
    ::test_placementofattributes::ExampleProtocol>
    final : public ::fidl::internal::NaturalClientBase {
 public:
  using NaturalClientBase::NaturalClientBase;
  ::fitx::result<::fidl::Error> Method(
      ::test_placementofattributes::ExampleProtocolMethodRequest&& payload)
      const;
};
namespace fidl {
#endif  // __Fuchsia__

}  // namespace fidl
