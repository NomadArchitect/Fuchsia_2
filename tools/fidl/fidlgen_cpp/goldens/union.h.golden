// WARNING: This file is machine generated by fidlgen_cpp.

#pragma once

#include <fidl/test.union/cpp/natural_types.h>
#include <fidl/test.union/cpp/wire.h>
#include <lib/fidl/cpp/client.h>
#include <lib/fidl/cpp/internal/codable_base.h>
#include <lib/fidl/cpp/internal/message_extensions.h>
#include <lib/fidl/cpp/internal/natural_client_messenger.h>
#include <lib/fidl/cpp/natural_types.h>
#include <lib/fidl/cpp/unified_messaging.h>

namespace fidl {

#ifdef __Fuchsia__
}  // namespace fidl

template <>
class ::fidl::Response<
    ::test_union::TestProtocol::StrictXUnionHenceResponseMayBeStackAllocated>
    final
    : public ::fidl::internal::MessageBase<
          ::fidl::Response<::test_union::TestProtocol::
                               StrictXUnionHenceResponseMayBeStackAllocated>> {
 public:
  Response() = default;
  ~Response() = default;
  Response(Response&&) noexcept = default;
  Response& operator=(Response&&) noexcept = default;
  Response(
      ::test_union::
          TestProtocolStrictXUnionHenceResponseMayBeStackAllocatedTopResponse
              payload)
      : payload_(std::move(payload)) {}
  ::test_union::
      TestProtocolStrictXUnionHenceResponseMayBeStackAllocatedTopResponse*
      operator->() {
    return &payload_;
  }
  const ::test_union::
      TestProtocolStrictXUnionHenceResponseMayBeStackAllocatedTopResponse*
      operator->() const {
    return &payload_;
  }
  ::test_union::
      TestProtocolStrictXUnionHenceResponseMayBeStackAllocatedTopResponse&
      operator*() {
    return payload_;
  }
  const ::test_union::
      TestProtocolStrictXUnionHenceResponseMayBeStackAllocatedTopResponse&
      operator*() const {
    return payload_;
  }

 private:
  ::test_union::
      TestProtocolStrictXUnionHenceResponseMayBeStackAllocatedTopResponse
          payload_;
};

template <>
struct ::fidl::internal::MessageTraits<::fidl::Response<
    ::test_union::TestProtocol::StrictXUnionHenceResponseMayBeStackAllocated>>
    final {
 public:
  static constexpr bool kHasPayload = true;
  using Payload = ::test_union::
      TestProtocolStrictXUnionHenceResponseMayBeStackAllocatedTopResponse;
};
namespace fidl {}  // namespace fidl
template <>
class ::fidl::internal::ClientCallbackTraits<
    ::test_union::TestProtocol::StrictXUnionHenceResponseMayBeStackAllocated>
    final {
 public:
  ClientCallbackTraits() = delete;
  using ResultCallback = ::fit::callback<void(
      ::fitx::result<::fidl::Error,
                     ::fidl::Response<
                         ::test_union::TestProtocol::
                             StrictXUnionHenceResponseMayBeStackAllocated>>&)>;
  using ResponseCallback = ::fit::callback<void(
      ::fidl::Response<::test_union::TestProtocol::
                           StrictXUnionHenceResponseMayBeStackAllocated>&)>;
};

template <>
class ::fidl::Response<
    ::test_union::TestProtocol::FlexibleXUnionHenceResponseMustBeHeapAllocated>
    final : public ::fidl::internal::MessageBase<::fidl::Response<
                ::test_union::TestProtocol::
                    FlexibleXUnionHenceResponseMustBeHeapAllocated>> {
 public:
  Response() = default;
  ~Response() = default;
  Response(Response&&) noexcept = default;
  Response& operator=(Response&&) noexcept = default;
  Response(
      ::test_union::
          TestProtocolFlexibleXUnionHenceResponseMustBeHeapAllocatedTopResponse
              payload)
      : payload_(std::move(payload)) {}
  ::test_union::
      TestProtocolFlexibleXUnionHenceResponseMustBeHeapAllocatedTopResponse*
      operator->() {
    return &payload_;
  }
  const ::test_union::
      TestProtocolFlexibleXUnionHenceResponseMustBeHeapAllocatedTopResponse*
      operator->() const {
    return &payload_;
  }
  ::test_union::
      TestProtocolFlexibleXUnionHenceResponseMustBeHeapAllocatedTopResponse&
      operator*() {
    return payload_;
  }
  const ::test_union::
      TestProtocolFlexibleXUnionHenceResponseMustBeHeapAllocatedTopResponse&
      operator*() const {
    return payload_;
  }

 private:
  ::test_union::
      TestProtocolFlexibleXUnionHenceResponseMustBeHeapAllocatedTopResponse
          payload_;
};

template <>
struct ::fidl::internal::MessageTraits<::fidl::Response<
    ::test_union::TestProtocol::FlexibleXUnionHenceResponseMustBeHeapAllocated>>
    final {
 public:
  static constexpr bool kHasPayload = true;
  using Payload = ::test_union::
      TestProtocolFlexibleXUnionHenceResponseMustBeHeapAllocatedTopResponse;
};
template <>
class ::fidl::internal::ClientCallbackTraits<
    ::test_union::TestProtocol::FlexibleXUnionHenceResponseMustBeHeapAllocated>
    final {
 public:
  ClientCallbackTraits() = delete;
  using ResultCallback = ::fit::callback<void(
      ::fitx::result<
          ::fidl::Error,
          ::fidl::Response<
              ::test_union::TestProtocol::
                  FlexibleXUnionHenceResponseMustBeHeapAllocated>>&)>;
  using ResponseCallback = ::fit::callback<void(
      ::fidl::Response<::test_union::TestProtocol::
                           FlexibleXUnionHenceResponseMustBeHeapAllocated>&)>;
};

template <>
class ::fidl::internal::NaturalClientImpl<::test_union::TestProtocol> final
    : public ::fidl::internal::NaturalClientBase {
 public:
  using NaturalClientBase::NaturalClientBase;
  void StrictXUnionHenceResponseMayBeStackAllocated(
      ::fidl::ClientCallback<::test_union::TestProtocol::
                                 StrictXUnionHenceResponseMayBeStackAllocated>&&
          _callback) const;

  void StrictXUnionHenceResponseMayBeStackAllocated(
      ::fidl::ClientResponseCallback<
          ::test_union::TestProtocol::
              StrictXUnionHenceResponseMayBeStackAllocated>&& _callback) const;

  void FlexibleXUnionHenceResponseMustBeHeapAllocated(
      ::fidl::ClientCallback<
          ::test_union::TestProtocol::
              FlexibleXUnionHenceResponseMustBeHeapAllocated>&& _callback)
      const;

  void FlexibleXUnionHenceResponseMustBeHeapAllocated(
      ::fidl::ClientResponseCallback<
          ::test_union::TestProtocol::
              FlexibleXUnionHenceResponseMustBeHeapAllocated>&& _callback)
      const;
};
namespace fidl {
#endif  // __Fuchsia__

}  // namespace fidl
#ifdef __Fuchsia__

template <>
class ::fidl::internal::NaturalEventHandlerInterface<
    ::test_union::TestProtocol> {
 public:
  NaturalEventHandlerInterface() = default;
  virtual ~NaturalEventHandlerInterface() = default;
};

template <>
class ::fidl::AsyncEventHandler<::test_union::TestProtocol>
    : public ::fidl::internal::NaturalEventHandlerInterface<
          ::test_union::TestProtocol>,
      public ::fidl::internal::AsyncEventHandler {
 public:
  AsyncEventHandler() = default;
};

template <>
class ::fidl::internal::NaturalEventDispatcher<::test_union::TestProtocol> final
    : public ::fidl::internal::IncomingEventDispatcher<
          ::fidl::AsyncEventHandler<::test_union::TestProtocol>> {
 public:
  explicit NaturalEventDispatcher(
      ::fidl::AsyncEventHandler<::test_union::TestProtocol>* event_handler)
      : IncomingEventDispatcher(event_handler) {}

 private:
  std::optional<::fidl::UnbindInfo> DispatchEvent(
      ::fidl::IncomingMessage& msg,
      internal::IncomingTransportContext transport_context) override;
};
#endif  // __Fuchsia__
