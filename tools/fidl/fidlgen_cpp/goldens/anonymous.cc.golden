// WARNING: This file is machine generated by fidlgen_cpp.

#include <test/anonymous/cpp/fidl_v2.h>

namespace test_anonymous {
[[maybe_unused]] constexpr inline uint64_t kSomeProtocol_SomeMethod_Ordinal =
    2515914517457749720lu;

#ifdef __Fuchsia__
}  // namespace test_anonymous
void fidl::internal::NaturalClientImpl<::test_anonymous::SomeProtocol>::
    SomeMethod(
        ::test_anonymous::SomeProtocolSomeMethodRequest&& payload,
        ::fidl::ClientCallback<::test_anonymous::SomeProtocol::SomeMethod>&&
            _callback) const {
  ::fidl::Encoder _encoder{::test_anonymous::kSomeProtocol_SomeMethod_Ordinal};
  return messenger().TwoWay(
      &::test_anonymous::
          test_anonymous_SomeProtocolSomeMethodRequestMessageTable,
      ::fidl::internal::EncodeTransactionalMessageWithoutValidating(
          _encoder, std::move(payload)),
      ::fidl::internal::MakeResponseContext<
          ::fidl::Response<::test_anonymous::SomeProtocol::SomeMethod>,
          ::fidl::ClientCallback<::test_anonymous::SomeProtocol::SomeMethod>>(
          ::test_anonymous::kSomeProtocol_SomeMethod_Ordinal,
          std::move(_callback)));
}
void fidl::internal::NaturalClientImpl<::test_anonymous::SomeProtocol>::
    SomeMethod(
        ::test_anonymous::SomeProtocolSomeMethodRequest&& payload,
        ::fidl::ClientResponseCallback<
            ::test_anonymous::SomeProtocol::SomeMethod>&& _callback) const {
  ::fidl::Encoder _encoder{::test_anonymous::kSomeProtocol_SomeMethod_Ordinal};
  return messenger().TwoWay(
      &::test_anonymous::
          test_anonymous_SomeProtocolSomeMethodRequestMessageTable,
      ::fidl::internal::EncodeTransactionalMessageWithoutValidating(
          _encoder, std::move(payload)),
      ::fidl::internal::MakeResponseContext<
          ::fidl::Response<::test_anonymous::SomeProtocol::SomeMethod>,
          ::fidl::ClientResponseCallback<
              ::test_anonymous::SomeProtocol::SomeMethod>>(
          ::test_anonymous::kSomeProtocol_SomeMethod_Ordinal,
          std::move(_callback)));
}
namespace test_anonymous {
#endif  // __Fuchsia__

}  // namespace test_anonymous
#ifdef __Fuchsia__

std::optional<::fidl::UnbindInfo> fidl::internal::
    NaturalEventDispatcher<::test_anonymous::SomeProtocol>::DispatchEvent(
        ::fidl::IncomingMessage& msg,
        ::fidl::internal::IncomingTransportContext transport_context) {
  return ::fidl::UnbindInfo::UnknownOrdinal();
}
#endif  // __Fuchsia__
