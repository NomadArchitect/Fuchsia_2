// WARNING: This file is machine generated by fidlgen_cpp.

#include <fidl/test/anonymous/cpp/fidl_v2.h>

#ifdef __Fuchsia__

void ::fidl_test_anonymous::TableData::EncodeWithoutValidating(
    ::fidl::Encoder& encoder, size_t offset) {
  encoder.Alloc(::fidl::EncodingInlineSize<::fidl_test_anonymous::TableData,
                                           ::fidl::Encoder>(&encoder));
  ::fidl::CodingTraits<::fidl_test_anonymous::TableData>::Encode(&encoder, this,
                                                                 offset);
}

::fidl_test_anonymous::TableData::TableData(::fidl::Decoder& decoder)
    : storage_({::fidl::DecodeAs<uint8_t>(&decoder, 0)}) {}
#endif  // __Fuchsia__

#ifdef __Fuchsia__

void ::fidl_test_anonymous::SomeProtocolSomeMethodRequest::
    EncodeWithoutValidating(::fidl::Encoder& encoder, size_t offset) {
  encoder.Alloc(::fidl::EncodingInlineSize<
                ::fidl_test_anonymous::SomeProtocolSomeMethodRequest,
                ::fidl::Encoder>(&encoder));
  ::fidl::CodingTraits<
      ::fidl_test_anonymous::SomeProtocolSomeMethodRequest>::Encode(&encoder,
                                                                    this,
                                                                    offset);
}

::fidl_test_anonymous::SomeProtocolSomeMethodRequest::
    SomeProtocolSomeMethodRequest(::fidl::Decoder& decoder)
    : storage_(
          {::fidl::DecodeAs<::fidl_test_anonymous::UnionMember>(&decoder, 0),
           ::fidl::DecodeAs<::fidl_test_anonymous::TableMember>(&decoder,
                                                                16)}) {}
#endif  // __Fuchsia__

#ifdef __Fuchsia__

void ::fidl_test_anonymous::OverrideTest::EncodeWithoutValidating(
    ::fidl::Encoder& encoder, size_t offset) {
  encoder.Alloc(::fidl::EncodingInlineSize<::fidl_test_anonymous::OverrideTest,
                                           ::fidl::Encoder>(&encoder));
  ::fidl::CodingTraits<::fidl_test_anonymous::OverrideTest>::Encode(
      &encoder, this, offset);
}

::fidl_test_anonymous::OverrideTest::OverrideTest(::fidl::Decoder& decoder)
    : storage_({::fidl::DecodeAs<::fidl_test_anonymous::Op>(&decoder, 0),
                ::fidl::DecodeAs<
                    ::std::unique_ptr<::fidl_test_anonymous::Expression>>(
                    &decoder, 8),
                ::fidl::DecodeAs<
                    ::std::unique_ptr<::fidl_test_anonymous::Expression>>(
                    &decoder, 24)}) {}
#endif  // __Fuchsia__

#ifdef __Fuchsia__

void ::fidl_test_anonymous::SomeProtocol_SomeMethod_Response::
    EncodeWithoutValidating(::fidl::Encoder& encoder, size_t offset) {
  encoder.Alloc(::fidl::EncodingInlineSize<
                ::fidl_test_anonymous::SomeProtocol_SomeMethod_Response,
                ::fidl::Encoder>(&encoder));
  ::fidl::CodingTraits<
      ::fidl_test_anonymous::SomeProtocol_SomeMethod_Response>::Encode(&encoder,
                                                                       this,
                                                                       offset);
}

::fidl_test_anonymous::SomeProtocol_SomeMethod_Response::
    SomeProtocol_SomeMethod_Response(::fidl::Decoder& decoder)
    : storage_(
          {::fidl::DecodeAs<::fidl_test_anonymous::BitsMember>(&decoder, 0)}) {}
#endif  // __Fuchsia__

#ifdef __Fuchsia__

void ::fidl_test_anonymous::SomeProtocolSomeMethodTopResponse::
    EncodeWithoutValidating(::fidl::Encoder& encoder, size_t offset) {
  encoder.Alloc(::fidl::EncodingInlineSize<
                ::fidl_test_anonymous::SomeProtocolSomeMethodTopResponse,
                ::fidl::Encoder>(&encoder));
  ::fidl::CodingTraits<::fidl_test_anonymous::
                           SomeProtocolSomeMethodTopResponse>::Encode(&encoder,
                                                                      this,
                                                                      offset);
}

::fidl_test_anonymous::SomeProtocolSomeMethodTopResponse::
    SomeProtocolSomeMethodTopResponse(::fidl::Decoder& decoder)
    : storage_({::fidl::DecodeAs<
          ::fidl_test_anonymous::SomeProtocol_SomeMethod_Result>(&decoder,
                                                                 0)}) {}
#endif  // __Fuchsia__

#ifdef __Fuchsia__

#endif  // __Fuchsia__
