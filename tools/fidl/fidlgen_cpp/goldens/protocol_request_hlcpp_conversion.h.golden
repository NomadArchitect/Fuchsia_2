// WARNING: This file is machine generated by fidlgen.

#pragma once

#include <fidl/test.protocolrequest/cpp/natural_types.h>
#include <lib/fidl/cpp/hlcpp_conversion.h>
#include <lib/fidl/cpp/wire/internal/transport_channel.h>
#include <test/protocolrequest/cpp/fidl.h>

namespace fidl {
namespace internal {

template <>
struct NaturalToHLCPPTraits<fidl::ClientEnd<::test_protocolrequest::Parent>> {
  using HLCPPType = fidl::InterfaceHandle<::test::protocolrequest::Parent>;
  static inline fidl::InterfaceHandle<::test::protocolrequest::Parent> Convert(fidl::ClientEnd<::test_protocolrequest::Parent>&& c) {
    return fidl::InterfaceHandle<::test::protocolrequest::Parent>(c.TakeChannel());
  }
};

template <>
struct NaturalToHLCPPTraits<fidl::ServerEnd<::test_protocolrequest::Parent>> {
  using HLCPPType = fidl::InterfaceRequest<::test::protocolrequest::Parent>;
  static inline fidl::InterfaceRequest<::test::protocolrequest::Parent> Convert(fidl::ServerEnd<::test_protocolrequest::Parent>&& c) {
    return fidl::InterfaceRequest<::test::protocolrequest::Parent>(c.TakeChannel());
  }
};

template <>
struct HLCPPToNaturalTraits<fidl::InterfaceHandle<::test::protocolrequest::Parent>> {
  using NaturalType = fidl::ClientEnd<::test_protocolrequest::Parent>;
  static inline fidl::ClientEnd<::test_protocolrequest::Parent> Convert(fidl::InterfaceHandle<::test::protocolrequest::Parent>&& c) {
    return fidl::ClientEnd<::test_protocolrequest::Parent>(c.TakeChannel());
  }
};

template <>
struct HLCPPToNaturalTraits<fidl::InterfaceRequest<::test::protocolrequest::Parent>> {
  using NaturalType = fidl::ServerEnd<::test_protocolrequest::Parent>;
  static inline fidl::ServerEnd<::test_protocolrequest::Parent> Convert(fidl::InterfaceRequest<::test::protocolrequest::Parent>&& c) {
    return fidl::ServerEnd<::test_protocolrequest::Parent>(c.TakeChannel());
  }
};
template <>
struct NaturalToHLCPPTraits<fidl::ClientEnd<::test_protocolrequest::Child>> {
  using HLCPPType = fidl::InterfaceHandle<::test::protocolrequest::Child>;
  static inline fidl::InterfaceHandle<::test::protocolrequest::Child> Convert(fidl::ClientEnd<::test_protocolrequest::Child>&& c) {
    return fidl::InterfaceHandle<::test::protocolrequest::Child>(c.TakeChannel());
  }
};

template <>
struct NaturalToHLCPPTraits<fidl::ServerEnd<::test_protocolrequest::Child>> {
  using HLCPPType = fidl::InterfaceRequest<::test::protocolrequest::Child>;
  static inline fidl::InterfaceRequest<::test::protocolrequest::Child> Convert(fidl::ServerEnd<::test_protocolrequest::Child>&& c) {
    return fidl::InterfaceRequest<::test::protocolrequest::Child>(c.TakeChannel());
  }
};

template <>
struct HLCPPToNaturalTraits<fidl::InterfaceHandle<::test::protocolrequest::Child>> {
  using NaturalType = fidl::ClientEnd<::test_protocolrequest::Child>;
  static inline fidl::ClientEnd<::test_protocolrequest::Child> Convert(fidl::InterfaceHandle<::test::protocolrequest::Child>&& c) {
    return fidl::ClientEnd<::test_protocolrequest::Child>(c.TakeChannel());
  }
};

template <>
struct HLCPPToNaturalTraits<fidl::InterfaceRequest<::test::protocolrequest::Child>> {
  using NaturalType = fidl::ServerEnd<::test_protocolrequest::Child>;
  static inline fidl::ServerEnd<::test_protocolrequest::Child> Convert(fidl::InterfaceRequest<::test::protocolrequest::Child>&& c) {
    return fidl::ServerEnd<::test_protocolrequest::Child>(c.TakeChannel());
  }
};

template <>
struct NaturalToHLCPPTraits<::test_protocolrequest::ParentTakeChildRequestRequest> {
  using HLCPPType = ::test::protocolrequest::ParentTakeChildRequestRequest;
  static inline ::test::protocolrequest::ParentTakeChildRequestRequest Convert(::test_protocolrequest::ParentTakeChildRequestRequest&&);
};
template <>
struct HLCPPToNaturalTraits<::test::protocolrequest::ParentTakeChildRequestRequest> {
  using NaturalType = ::test_protocolrequest::ParentTakeChildRequestRequest;
  static inline ::test_protocolrequest::ParentTakeChildRequestRequest Convert(::test::protocolrequest::ParentTakeChildRequestRequest&&);
};
template <>
struct NaturalToHLCPPTraits<::test_protocolrequest::ParentTakeChildRequest> {
  using HLCPPType = ::test::protocolrequest::ParentTakeChildRequest;
  static inline ::test::protocolrequest::ParentTakeChildRequest Convert(::test_protocolrequest::ParentTakeChildRequest&&);
};
template <>
struct HLCPPToNaturalTraits<::test::protocolrequest::ParentTakeChildRequest> {
  using NaturalType = ::test_protocolrequest::ParentTakeChildRequest;
  static inline ::test_protocolrequest::ParentTakeChildRequest Convert(::test::protocolrequest::ParentTakeChildRequest&&);
};
template <>
struct NaturalToHLCPPTraits<::test_protocolrequest::ParentGetChildTopResponse> {
  using HLCPPType = ::test::protocolrequest::ParentGetChildTopResponse;
  static inline ::test::protocolrequest::ParentGetChildTopResponse Convert(::test_protocolrequest::ParentGetChildTopResponse&&);
};
template <>
struct HLCPPToNaturalTraits<::test::protocolrequest::ParentGetChildTopResponse> {
  using NaturalType = ::test_protocolrequest::ParentGetChildTopResponse;
  static inline ::test_protocolrequest::ParentGetChildTopResponse Convert(::test::protocolrequest::ParentGetChildTopResponse&&);
};
template <>
struct NaturalToHLCPPTraits<::test_protocolrequest::ParentGetChildRequestTopResponse> {
  using HLCPPType = ::test::protocolrequest::ParentGetChildRequestTopResponse;
  static inline ::test::protocolrequest::ParentGetChildRequestTopResponse Convert(::test_protocolrequest::ParentGetChildRequestTopResponse&&);
};
template <>
struct HLCPPToNaturalTraits<::test::protocolrequest::ParentGetChildRequestTopResponse> {
  using NaturalType = ::test_protocolrequest::ParentGetChildRequestTopResponse;
  static inline ::test_protocolrequest::ParentGetChildRequestTopResponse Convert(::test::protocolrequest::ParentGetChildRequestTopResponse&&);
};

::test::protocolrequest::ParentTakeChildRequestRequest NaturalToHLCPPTraits<::test_protocolrequest::ParentTakeChildRequestRequest>::Convert(::test_protocolrequest::ParentTakeChildRequestRequest&& value) {
  ::test::protocolrequest::ParentTakeChildRequestRequest hlcpp;
  hlcpp.r = ::fidl::NaturalToHLCPP(std::move(value.r()));
  return hlcpp;
}

::test_protocolrequest::ParentTakeChildRequestRequest HLCPPToNaturalTraits<::test::protocolrequest::ParentTakeChildRequestRequest>::Convert(::test::protocolrequest::ParentTakeChildRequestRequest&& value) {
  return ::test_protocolrequest::ParentTakeChildRequestRequest{{
      .r = ::fidl::HLCPPToNatural(std::move(value.r)),
  }};
}
::test::protocolrequest::ParentTakeChildRequest NaturalToHLCPPTraits<::test_protocolrequest::ParentTakeChildRequest>::Convert(::test_protocolrequest::ParentTakeChildRequest&& value) {
  ::test::protocolrequest::ParentTakeChildRequest hlcpp;
  hlcpp.c = ::fidl::NaturalToHLCPP(std::move(value.c()));
  return hlcpp;
}

::test_protocolrequest::ParentTakeChildRequest HLCPPToNaturalTraits<::test::protocolrequest::ParentTakeChildRequest>::Convert(::test::protocolrequest::ParentTakeChildRequest&& value) {
  return ::test_protocolrequest::ParentTakeChildRequest{{
      .c = ::fidl::HLCPPToNatural(std::move(value.c)),
  }};
}
::test::protocolrequest::ParentGetChildTopResponse NaturalToHLCPPTraits<::test_protocolrequest::ParentGetChildTopResponse>::Convert(::test_protocolrequest::ParentGetChildTopResponse&& value) {
  ::test::protocolrequest::ParentGetChildTopResponse hlcpp;
  hlcpp.c = ::fidl::NaturalToHLCPP(std::move(value.c()));
  return hlcpp;
}

::test_protocolrequest::ParentGetChildTopResponse HLCPPToNaturalTraits<::test::protocolrequest::ParentGetChildTopResponse>::Convert(::test::protocolrequest::ParentGetChildTopResponse&& value) {
  return ::test_protocolrequest::ParentGetChildTopResponse{{
      .c = ::fidl::HLCPPToNatural(std::move(value.c)),
  }};
}
::test::protocolrequest::ParentGetChildRequestTopResponse NaturalToHLCPPTraits<::test_protocolrequest::ParentGetChildRequestTopResponse>::Convert(::test_protocolrequest::ParentGetChildRequestTopResponse&& value) {
  ::test::protocolrequest::ParentGetChildRequestTopResponse hlcpp;
  hlcpp.r = ::fidl::NaturalToHLCPP(std::move(value.r()));
  return hlcpp;
}

::test_protocolrequest::ParentGetChildRequestTopResponse HLCPPToNaturalTraits<::test::protocolrequest::ParentGetChildRequestTopResponse>::Convert(::test::protocolrequest::ParentGetChildRequestTopResponse&& value) {
  return ::test_protocolrequest::ParentGetChildRequestTopResponse{{
      .r = ::fidl::HLCPPToNatural(std::move(value.r)),
  }};
}

}  // namespace internal
}  // namespace fidl
