// WARNING: This file is machine generated by fidlgen.

#pragma once

#include <fidl/test.service/cpp/markers.h>
#include <fidl/test.service/cpp/wire_types.h>
#include <lib/fidl_driver/cpp/wire_messaging.h>

#ifdef __Fuchsia__

#include <lib/fidl/cpp/wire/connect_service.h>
#include <lib/fidl/cpp/wire/server.h>
#include <lib/fidl/cpp/wire/service_handler_interface.h>
#include <lib/fidl/cpp/wire/sync_call.h>
#include <lib/fidl_driver/cpp/server.h>
#include <lib/fidl_driver/cpp/wire_client.h>

#endif  // __Fuchsia__

namespace test_service {

class EmptyService;

class EmptyService final {
  EmptyService() = default;

 public:
  static constexpr bool kIsService = true;
  static constexpr char Name[] = "test.service.EmptyService";

  // Client protocol for connecting to member protocols of a service instance.
  class ServiceClient final {
    ServiceClient() = delete;
#ifdef __Fuchsia__
   public:
    ServiceClient(::zx::channel dir, ::fidl::internal::ConnectMemberFunc connect_func) {
      (void)dir;
      (void)connect_func;
    }

   private:
#endif  // __Fuchsia__
  };

  // Facilitates member protocol registration for servers.
  class Handler final {
#ifdef __Fuchsia__
   public:
    // Constructs a FIDL Service-typed handler. Does not take ownership of |service_handler|.
    explicit Handler(::fidl::ServiceHandlerInterface* service_handler) { (void)service_handler; }

   private:
#endif  // __Fuchsia__
  };
};

}  // namespace test_service
namespace fidl {

}  // namespace fidl
