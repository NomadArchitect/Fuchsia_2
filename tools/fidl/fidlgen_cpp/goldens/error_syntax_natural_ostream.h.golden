// WARNING: This file is machine generated by fidlgen.

#pragma once

#include <fidl/test.errorsyntax.parent/cpp/natural_ostream.h>
#include <fidl/test.errorsyntax/cpp/natural_types.h>
#include <lib/fidl/cpp/natural_ostream.h>

#include <iostream>

template <>
struct fidl::ostream::Formatter<::test_errorsyntax::ExampleUseOfErrorSyntaxCallWhichMayFailRequest> {
  static std::ostream& Format(std::ostream& os, const ::test_errorsyntax::ExampleUseOfErrorSyntaxCallWhichMayFailRequest& value);
};
std::ostream& operator<<(std::ostream& os, const ::test_errorsyntax::ExampleUseOfErrorSyntaxCallWhichMayFailRequest& value);
template <>
struct fidl::ostream::Formatter<::test_errorsyntax::ExampleUseOfErrorSyntaxCallWhichMayFailResponse> {
  static std::ostream& Format(std::ostream& os, const ::test_errorsyntax::ExampleUseOfErrorSyntaxCallWhichMayFailResponse& value);
};
std::ostream& operator<<(std::ostream& os, const ::test_errorsyntax::ExampleUseOfErrorSyntaxCallWhichMayFailResponse& value);
template <>
struct fidl::ostream::Formatter<::test_errorsyntax::ExampleUseOfErrorSyntaxCallWhichMayFailResult> {
  static std::ostream& Format(std::ostream& os, const ::test_errorsyntax::ExampleUseOfErrorSyntaxCallWhichMayFailResult& value);
};
std::ostream& operator<<(std::ostream& os, const ::test_errorsyntax::ExampleUseOfErrorSyntaxCallWhichMayFailResult& value);
template <>
struct fidl::ostream::Formatter<::test_errorsyntax::ExampleUseOfErrorSyntaxCallWhichMayFailTopResponse> {
  static std::ostream& Format(std::ostream& os, const ::test_errorsyntax::ExampleUseOfErrorSyntaxCallWhichMayFailTopResponse& value);
};
std::ostream& operator<<(std::ostream& os, const ::test_errorsyntax::ExampleUseOfErrorSyntaxCallWhichMayFailTopResponse& value);
template <>
struct fidl::ostream::Formatter<::fidl::ClientEnd<::test_errorsyntax::ExampleUseOfErrorSyntax>> {
  static std::ostream& Format(std::ostream& os, const ::fidl::ClientEnd<::test_errorsyntax::ExampleUseOfErrorSyntax>& value) {
    return os << "ClientEnd<"
              << "test_errorsyntax::ExampleUseOfErrorSyntax"
              << ">(" << value.channel().get() << ")";
  }
};
inline std::ostream& operator<<(std::ostream& os, const ::fidl::ClientEnd<::test_errorsyntax::ExampleUseOfErrorSyntax>& value) {
  return fidl::ostream::Formatter<::fidl::ClientEnd<::test_errorsyntax::ExampleUseOfErrorSyntax>>::Format(os, value);
}

template <>
struct fidl::ostream::Formatter<::fidl::ServerEnd<::test_errorsyntax::ExampleUseOfErrorSyntax>> {
  static std::ostream& Format(std::ostream& os, const ::fidl::ServerEnd<::test_errorsyntax::ExampleUseOfErrorSyntax>& value) {
    return os << "ServerEnd<"
              << "test_errorsyntax::ExampleUseOfErrorSyntax"
              << ">(" << value.channel().get() << ")";
  }
};
inline std::ostream& operator<<(std::ostream& os, const ::fidl::ServerEnd<::test_errorsyntax::ExampleUseOfErrorSyntax>& value) {
  return fidl::ostream::Formatter<::fidl::ServerEnd<::test_errorsyntax::ExampleUseOfErrorSyntax>>::Format(os, value);
}
