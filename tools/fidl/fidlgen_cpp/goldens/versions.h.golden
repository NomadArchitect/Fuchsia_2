// WARNING: This file is machine generated by fidlgen_cpp.

#pragma once

#include <fidl/fidl.test.versions/cpp/wire.h>
#include <fidl/test/versions/cpp/natural_types.h>
#include <lib/fidl/cpp/client.h>
#include <lib/fidl/cpp/internal/codable_base.h>
#include <lib/fidl/cpp/internal/message_extensions.h>
#include <lib/fidl/cpp/internal/natural_client_messenger.h>
#include <lib/fidl/cpp/natural_types.h>
#include <lib/fidl/cpp/unified_messaging.h>

namespace fidl_test_versions {
class Struct;

using Union = ::fidl::test::versions::Union;

using Table = ::fidl::test::versions::Table;

using Enum = ::fidl::test::versions::Enum;

using Bits = ::fidl::test::versions::Bits;

}  // namespace fidl_test_versions
template <>
struct ::fidl::internal::DesignatedInitializationProxy<
    ::fidl_test_versions::Struct>
    final {
 public:
  uint32_t x = {};
};

namespace fidl_test_versions {
class Struct final : public ::fidl::internal::CodableBase<Struct> {
 private:
  friend ::fidl::internal::CodableBase<Struct>;
  Struct(::fidl::Decoder& decoder);
  template <typename Payload>
  friend auto ::fidl::internal::EncodeTransactionalMessageWithoutValidating(
      ::fidl::Encoder& encoder, Payload&& payload)
      -> ::fidl::HLCPPOutgoingMessage;
  void EncodeWithoutValidating(::fidl::Encoder& encoder, size_t offset);

 public:
  Struct() = default;
  Struct(uint32_t x) : storage_({x}) {}
  Struct(::fidl::internal::DesignatedInitializationProxy<
         ::fidl_test_versions::Struct>
             storage)
      : storage_(std::move(storage)) {}
  ~Struct() = default;
  Struct(Struct&&) noexcept = default;
  Struct& operator=(Struct&&) noexcept = default;

  const uint32_t& x() const { return storage_.x; }

  Struct& set_x(uint32_t _value) {
    storage_.x = std::move(_value);
    return *this;
  }

 private:
  friend struct ::fidl::CodingTraits<::fidl_test_versions::Struct>;

  ::fidl::internal::DesignatedInitializationProxy<::fidl_test_versions::Struct>
      storage_ = {};
};

constexpr uint32_t Const = ::fidl::test::versions::Const;

}  // namespace fidl_test_versions
namespace fidl {
#ifdef __Fuchsia__
extern "C" const fidl_type_t fidl_test_versions_StructTable;

template <>
struct IsFidlType<::fidl_test_versions::Struct> : public std::true_type {};

template <>
struct ::fidl::internal::TypeTraits<::fidl_test_versions::Struct> final {
 public:
  static constexpr const fidl_type_t* kCodingTable =
      &fidl_test_versions_StructTable;
};

template <>
struct CodingTraits<::fidl_test_versions::Struct> {
  static constexpr size_t inline_size_v1_no_ee = 4;
  static constexpr size_t inline_size_v2 = 4;

  template <class EncoderImpl>
  static void Encode(
      EncoderImpl* encoder, ::fidl_test_versions::Struct* value, size_t offset,
      cpp17::optional<HandleInformation> maybe_handle_info = cpp17::nullopt) {
    [[maybe_unused]] uint32_t field_offset;
    field_offset =
        encoder->wire_format() == ::fidl::internal::WireFormatVersion::kV1 ? 0
                                                                           : 0;
    ::fidl::Encode(encoder, &value->storage_.x, offset + field_offset);
  }

  template <typename DecoderImpl>
  static void Decode(DecoderImpl* decoder, ::fidl_test_versions::Struct* value,
                     size_t offset) {
    ::fidl::Decode(decoder, &value->storage_.x, offset + 0);
  }
};
#endif  // __Fuchsia__

#ifdef __Fuchsia__
}  // namespace fidl
template <>
class ::fidl::internal::NaturalClientImpl<::fidl_test_versions::OtherProtocol>
    final : public ::fidl::internal::NaturalClientBase {
 public:
  using NaturalClientBase::NaturalClientBase;
};
namespace fidl {
#endif  // __Fuchsia__

#ifdef __Fuchsia__
}  // namespace fidl
template <>
class ::fidl::internal::NaturalClientImpl<::fidl_test_versions::Protocol> final
    : public ::fidl::internal::NaturalClientBase {
 public:
  using NaturalClientBase::NaturalClientBase;
  ::fitx::result<::fidl::Error> Foo() const;
};
namespace fidl {
#endif  // __Fuchsia__

}  // namespace fidl
