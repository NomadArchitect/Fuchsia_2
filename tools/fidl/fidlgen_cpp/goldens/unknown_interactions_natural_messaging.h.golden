// WARNING: This file is machine generated by fidlgen_cpp.

#pragma once




#include <lib/fidl/cpp/client.h>
#include <lib/fidl/cpp/internal/thenable.h>
#include <lib/fidl/cpp/natural_types.h>
#include <lib/fidl/cpp/unified_messaging.h>
#include <lib/fidl/cpp/channel.h>
#include <lib/fidl/cpp/wire/unknown_interaction_handler.h>

#include <fidl/test.unknowninteractions/cpp/markers.h>
#include <fidl/test.unknowninteractions/cpp/natural_types.h>
#include <fidl/test.unknowninteractions/cpp/wire_messaging.h>



namespace fidl {



}  // namespace fidl

template<>
struct ::fidl::internal::NaturalMethodTypes<::test_unknowninteractions::UnknownInteractionsProtocol::StrictTwoWay> {
  using Completer = fidl::Completer<::fidl::internal::NaturalCompleterBase<::test_unknowninteractions::UnknownInteractionsProtocol::StrictTwoWay>>;

  using ResultCallback =
      ::fit::callback<void (::fidl::Result<::test_unknowninteractions::UnknownInteractionsProtocol::StrictTwoWay>&)>;

  
    static constexpr bool HasApplicationError = false;
    static constexpr bool HasTransportError = false;
  

  
    static constexpr bool IsAbsentBody = true;
  
};



template<>
struct ::fidl::internal::NaturalMethodTypes<::test_unknowninteractions::UnknownInteractionsProtocol::StrictTwoWayFields> {
  using Completer = fidl::Completer<::fidl::internal::NaturalCompleterBase<::test_unknowninteractions::UnknownInteractionsProtocol::StrictTwoWayFields>>;

  using ResultCallback =
      ::fit::callback<void (::fidl::Result<::test_unknowninteractions::UnknownInteractionsProtocol::StrictTwoWayFields>&)>;

  
    static constexpr bool HasApplicationError = false;
    static constexpr bool HasTransportError = false;
  

  
    static constexpr bool IsAbsentBody = false;
  
};



template<>
struct ::fidl::internal::NaturalMethodTypes<::test_unknowninteractions::UnknownInteractionsProtocol::StrictTwoWayUnion> {
  using Completer = fidl::Completer<::fidl::internal::NaturalCompleterBase<::test_unknowninteractions::UnknownInteractionsProtocol::StrictTwoWayUnion>>;

  using ResultCallback =
      ::fit::callback<void (::fidl::Result<::test_unknowninteractions::UnknownInteractionsProtocol::StrictTwoWayUnion>&)>;

  
    static constexpr bool HasApplicationError = false;
    static constexpr bool HasTransportError = false;
  

  
    static constexpr bool IsAbsentBody = false;
  
};



template<>
struct ::fidl::internal::NaturalMethodTypes<::test_unknowninteractions::UnknownInteractionsProtocol::StrictTwoWayTable> {
  using Completer = fidl::Completer<::fidl::internal::NaturalCompleterBase<::test_unknowninteractions::UnknownInteractionsProtocol::StrictTwoWayTable>>;

  using ResultCallback =
      ::fit::callback<void (::fidl::Result<::test_unknowninteractions::UnknownInteractionsProtocol::StrictTwoWayTable>&)>;

  
    static constexpr bool HasApplicationError = false;
    static constexpr bool HasTransportError = false;
  

  
    static constexpr bool IsAbsentBody = false;
  
};



template<>
struct ::fidl::internal::NaturalMethodTypes<::test_unknowninteractions::UnknownInteractionsProtocol::StrictTwoWayErr> {
  using Completer = fidl::Completer<::fidl::internal::NaturalCompleterBase<::test_unknowninteractions::UnknownInteractionsProtocol::StrictTwoWayErr>>;

  using ResultCallback =
      ::fit::callback<void (::fidl::Result<::test_unknowninteractions::UnknownInteractionsProtocol::StrictTwoWayErr>&)>;

  
    static constexpr bool HasApplicationError = true;
    static constexpr bool HasTransportError = false;
    
      static constexpr bool IsEmptyStructPayload = true;
    
  

  
    static constexpr bool IsAbsentBody = false;
  
};



template<>
struct ::fidl::internal::NaturalMethodTypes<::test_unknowninteractions::UnknownInteractionsProtocol::StrictTwoWayFieldsErr> {
  using Completer = fidl::Completer<::fidl::internal::NaturalCompleterBase<::test_unknowninteractions::UnknownInteractionsProtocol::StrictTwoWayFieldsErr>>;

  using ResultCallback =
      ::fit::callback<void (::fidl::Result<::test_unknowninteractions::UnknownInteractionsProtocol::StrictTwoWayFieldsErr>&)>;

  
    static constexpr bool HasApplicationError = true;
    static constexpr bool HasTransportError = false;
    
      static constexpr bool IsEmptyStructPayload = false;
    
  

  
    static constexpr bool IsAbsentBody = false;
  
};



template<>
struct ::fidl::internal::NaturalMethodTypes<::test_unknowninteractions::UnknownInteractionsProtocol::StrictTwoWayUnionErr> {
  using Completer = fidl::Completer<::fidl::internal::NaturalCompleterBase<::test_unknowninteractions::UnknownInteractionsProtocol::StrictTwoWayUnionErr>>;

  using ResultCallback =
      ::fit::callback<void (::fidl::Result<::test_unknowninteractions::UnknownInteractionsProtocol::StrictTwoWayUnionErr>&)>;

  
    static constexpr bool HasApplicationError = true;
    static constexpr bool HasTransportError = false;
    
      static constexpr bool IsEmptyStructPayload = false;
    
  

  
    static constexpr bool IsAbsentBody = false;
  
};



template<>
struct ::fidl::internal::NaturalMethodTypes<::test_unknowninteractions::UnknownInteractionsProtocol::StrictTwoWayTableErr> {
  using Completer = fidl::Completer<::fidl::internal::NaturalCompleterBase<::test_unknowninteractions::UnknownInteractionsProtocol::StrictTwoWayTableErr>>;

  using ResultCallback =
      ::fit::callback<void (::fidl::Result<::test_unknowninteractions::UnknownInteractionsProtocol::StrictTwoWayTableErr>&)>;

  
    static constexpr bool HasApplicationError = true;
    static constexpr bool HasTransportError = false;
    
      static constexpr bool IsEmptyStructPayload = false;
    
  

  
    static constexpr bool IsAbsentBody = false;
  
};



template<>
struct ::fidl::internal::NaturalMethodTypes<::test_unknowninteractions::UnknownInteractionsProtocol::FlexibleTwoWay> {
  using Completer = fidl::Completer<::fidl::internal::NaturalCompleterBase<::test_unknowninteractions::UnknownInteractionsProtocol::FlexibleTwoWay>>;

  using ResultCallback =
      ::fit::callback<void (::fidl::Result<::test_unknowninteractions::UnknownInteractionsProtocol::FlexibleTwoWay>&)>;

  
    static constexpr bool HasApplicationError = false;
    static constexpr bool HasTransportError = true;
    
      static constexpr bool IsEmptyStructPayload = true;
    
  

  
    static constexpr bool IsAbsentBody = false;
  
};



template<>
struct ::fidl::internal::NaturalMethodTypes<::test_unknowninteractions::UnknownInteractionsProtocol::FlexibleTwoWayFields> {
  using Completer = fidl::Completer<::fidl::internal::NaturalCompleterBase<::test_unknowninteractions::UnknownInteractionsProtocol::FlexibleTwoWayFields>>;

  using ResultCallback =
      ::fit::callback<void (::fidl::Result<::test_unknowninteractions::UnknownInteractionsProtocol::FlexibleTwoWayFields>&)>;

  
    static constexpr bool HasApplicationError = false;
    static constexpr bool HasTransportError = true;
    
      static constexpr bool IsEmptyStructPayload = false;
    
  

  
    static constexpr bool IsAbsentBody = false;
  
};



template<>
struct ::fidl::internal::NaturalMethodTypes<::test_unknowninteractions::UnknownInteractionsProtocol::FlexibleTwoWayUnion> {
  using Completer = fidl::Completer<::fidl::internal::NaturalCompleterBase<::test_unknowninteractions::UnknownInteractionsProtocol::FlexibleTwoWayUnion>>;

  using ResultCallback =
      ::fit::callback<void (::fidl::Result<::test_unknowninteractions::UnknownInteractionsProtocol::FlexibleTwoWayUnion>&)>;

  
    static constexpr bool HasApplicationError = false;
    static constexpr bool HasTransportError = true;
    
      static constexpr bool IsEmptyStructPayload = false;
    
  

  
    static constexpr bool IsAbsentBody = false;
  
};



template<>
struct ::fidl::internal::NaturalMethodTypes<::test_unknowninteractions::UnknownInteractionsProtocol::FlexibleTwoWayTable> {
  using Completer = fidl::Completer<::fidl::internal::NaturalCompleterBase<::test_unknowninteractions::UnknownInteractionsProtocol::FlexibleTwoWayTable>>;

  using ResultCallback =
      ::fit::callback<void (::fidl::Result<::test_unknowninteractions::UnknownInteractionsProtocol::FlexibleTwoWayTable>&)>;

  
    static constexpr bool HasApplicationError = false;
    static constexpr bool HasTransportError = true;
    
      static constexpr bool IsEmptyStructPayload = false;
    
  

  
    static constexpr bool IsAbsentBody = false;
  
};



template<>
struct ::fidl::internal::NaturalMethodTypes<::test_unknowninteractions::UnknownInteractionsProtocol::FlexibleTwoWayErr> {
  using Completer = fidl::Completer<::fidl::internal::NaturalCompleterBase<::test_unknowninteractions::UnknownInteractionsProtocol::FlexibleTwoWayErr>>;

  using ResultCallback =
      ::fit::callback<void (::fidl::Result<::test_unknowninteractions::UnknownInteractionsProtocol::FlexibleTwoWayErr>&)>;

  
    static constexpr bool HasApplicationError = true;
    static constexpr bool HasTransportError = true;
    
      static constexpr bool IsEmptyStructPayload = true;
    
  

  
    static constexpr bool IsAbsentBody = false;
  
};



template<>
struct ::fidl::internal::NaturalMethodTypes<::test_unknowninteractions::UnknownInteractionsProtocol::FlexibleTwoWayFieldsErr> {
  using Completer = fidl::Completer<::fidl::internal::NaturalCompleterBase<::test_unknowninteractions::UnknownInteractionsProtocol::FlexibleTwoWayFieldsErr>>;

  using ResultCallback =
      ::fit::callback<void (::fidl::Result<::test_unknowninteractions::UnknownInteractionsProtocol::FlexibleTwoWayFieldsErr>&)>;

  
    static constexpr bool HasApplicationError = true;
    static constexpr bool HasTransportError = true;
    
      static constexpr bool IsEmptyStructPayload = false;
    
  

  
    static constexpr bool IsAbsentBody = false;
  
};



template<>
struct ::fidl::internal::NaturalMethodTypes<::test_unknowninteractions::UnknownInteractionsProtocol::FlexibleTwoWayUnionErr> {
  using Completer = fidl::Completer<::fidl::internal::NaturalCompleterBase<::test_unknowninteractions::UnknownInteractionsProtocol::FlexibleTwoWayUnionErr>>;

  using ResultCallback =
      ::fit::callback<void (::fidl::Result<::test_unknowninteractions::UnknownInteractionsProtocol::FlexibleTwoWayUnionErr>&)>;

  
    static constexpr bool HasApplicationError = true;
    static constexpr bool HasTransportError = true;
    
      static constexpr bool IsEmptyStructPayload = false;
    
  

  
    static constexpr bool IsAbsentBody = false;
  
};



template<>
struct ::fidl::internal::NaturalMethodTypes<::test_unknowninteractions::UnknownInteractionsProtocol::FlexibleTwoWayTableErr> {
  using Completer = fidl::Completer<::fidl::internal::NaturalCompleterBase<::test_unknowninteractions::UnknownInteractionsProtocol::FlexibleTwoWayTableErr>>;

  using ResultCallback =
      ::fit::callback<void (::fidl::Result<::test_unknowninteractions::UnknownInteractionsProtocol::FlexibleTwoWayTableErr>&)>;

  
    static constexpr bool HasApplicationError = true;
    static constexpr bool HasTransportError = true;
    
      static constexpr bool IsEmptyStructPayload = false;
    
  

  
    static constexpr bool IsAbsentBody = false;
  
};
    
    
    
    
    
    
    
    namespace test_unknowninteractions {
__LOCAL extern "C" const fidl_type_t test_unknowninteractions_UnknownInteractionsProtocolStrictTwoWayFieldsResponseTable;
    
    
__LOCAL extern "C" const fidl_type_t test_unknowninteractions_UnknownInteractionsProtocolStrictTwoWayUnionResponseTable;
    
    
__LOCAL extern "C" const fidl_type_t test_unknowninteractions_UnknownInteractionsProtocolStrictTwoWayTableResponseTable;
    
    
__LOCAL extern "C" const fidl_type_t test_unknowninteractions_UnknownInteractionsProtocolStrictTwoWayErrTopResponseTable;
    
    
__LOCAL extern "C" const fidl_type_t test_unknowninteractions_UnknownInteractionsProtocolStrictTwoWayFieldsErrTopResponseTable;
    
    
__LOCAL extern "C" const fidl_type_t test_unknowninteractions_UnknownInteractionsProtocolStrictTwoWayUnionErrTopResponseTable;
    
    
__LOCAL extern "C" const fidl_type_t test_unknowninteractions_UnknownInteractionsProtocolStrictTwoWayTableErrTopResponseTable;
    
    
__LOCAL extern "C" const fidl_type_t test_unknowninteractions_UnknownInteractionsProtocolFlexibleTwoWayTopResponseTable;
    
    
__LOCAL extern "C" const fidl_type_t test_unknowninteractions_UnknownInteractionsProtocolFlexibleTwoWayFieldsTopResponseTable;
    
    
__LOCAL extern "C" const fidl_type_t test_unknowninteractions_UnknownInteractionsProtocolFlexibleTwoWayUnionTopResponseTable;
    
    
__LOCAL extern "C" const fidl_type_t test_unknowninteractions_UnknownInteractionsProtocolFlexibleTwoWayTableTopResponseTable;
    
    
__LOCAL extern "C" const fidl_type_t test_unknowninteractions_UnknownInteractionsProtocolFlexibleTwoWayErrTopResponseTable;
    
    
__LOCAL extern "C" const fidl_type_t test_unknowninteractions_UnknownInteractionsProtocolFlexibleTwoWayFieldsErrTopResponseTable;
    
    
__LOCAL extern "C" const fidl_type_t test_unknowninteractions_UnknownInteractionsProtocolFlexibleTwoWayUnionErrTopResponseTable;
    
    
__LOCAL extern "C" const fidl_type_t test_unknowninteractions_UnknownInteractionsProtocolFlexibleTwoWayTableErrTopResponseTable;
    
    
    
    
__LOCAL extern "C" const fidl_type_t test_unknowninteractions_UnknownInteractionsProtocolStrictEventFieldsRequestTable;
    
    
__LOCAL extern "C" const fidl_type_t test_unknowninteractions_UnknownInteractionsProtocolStrictEventUnionRequestTable;
    
    
__LOCAL extern "C" const fidl_type_t test_unknowninteractions_UnknownInteractionsProtocolStrictEventTableRequestTable;
    
    
__LOCAL extern "C" const fidl_type_t test_unknowninteractions_UnknownInteractionsProtocolStrictEventErrRequestTable;
    
    
__LOCAL extern "C" const fidl_type_t test_unknowninteractions_UnknownInteractionsProtocolStrictEventFieldsErrRequestTable;
    
    
__LOCAL extern "C" const fidl_type_t test_unknowninteractions_UnknownInteractionsProtocolStrictEventUnionErrRequestTable;
    
    
__LOCAL extern "C" const fidl_type_t test_unknowninteractions_UnknownInteractionsProtocolStrictEventTableErrRequestTable;
    
    
    
    
__LOCAL extern "C" const fidl_type_t test_unknowninteractions_UnknownInteractionsProtocolFlexibleEventFieldsRequestTable;
    
    
__LOCAL extern "C" const fidl_type_t test_unknowninteractions_UnknownInteractionsProtocolFlexibleEventUnionRequestTable;
    
    
__LOCAL extern "C" const fidl_type_t test_unknowninteractions_UnknownInteractionsProtocolFlexibleEventTableRequestTable;
    
    
__LOCAL extern "C" const fidl_type_t test_unknowninteractions_UnknownInteractionsProtocolFlexibleEventErrRequestTable;
    
    
__LOCAL extern "C" const fidl_type_t test_unknowninteractions_UnknownInteractionsProtocolFlexibleEventFieldsErrRequestTable;
    
    
__LOCAL extern "C" const fidl_type_t test_unknowninteractions_UnknownInteractionsProtocolFlexibleEventUnionErrRequestTable;
    
    
__LOCAL extern "C" const fidl_type_t test_unknowninteractions_UnknownInteractionsProtocolFlexibleEventTableErrRequestTable;

#ifdef __Fuchsia__
}  // namespace test_unknowninteractions


template <>
class ::fidl::Event<::test_unknowninteractions::UnknownInteractionsProtocol::StrictEvent> final {
 public:
};

template <>
struct ::fidl::internal::MessageTraits<::fidl::Event<::test_unknowninteractions::UnknownInteractionsProtocol::StrictEvent>> final {
 public:
  static constexpr bool kHasPayload = false;
};namespace test_unknowninteractions {
}  // namespace test_unknowninteractions


template <>
class ::fidl::Event<::test_unknowninteractions::UnknownInteractionsProtocol::StrictEventFields> final : public ::test_unknowninteractions::UnknownInteractionsProtocolStrictEventFieldsRequest  {
 public:
      using ::test_unknowninteractions::UnknownInteractionsProtocolStrictEventFieldsRequest::UnknownInteractionsProtocolStrictEventFieldsRequest;
      Event(::test_unknowninteractions::UnknownInteractionsProtocolStrictEventFieldsRequest v) : UnknownInteractionsProtocolStrictEventFieldsRequest(std::move(v)) {}
};

template <>
struct ::fidl::internal::MessageTraits<::fidl::Event<::test_unknowninteractions::UnknownInteractionsProtocol::StrictEventFields>> final {
 public:
  static constexpr bool kHasPayload = true;
  using Payload = ::test_unknowninteractions::UnknownInteractionsProtocolStrictEventFieldsRequest;
};namespace test_unknowninteractions {
}  // namespace test_unknowninteractions


template <>
class ::fidl::Event<::test_unknowninteractions::UnknownInteractionsProtocol::StrictEventUnion> final : public ::test_unknowninteractions::UnknownInteractionsProtocolStrictEventUnionRequest  {
 public:
      using ::test_unknowninteractions::UnknownInteractionsProtocolStrictEventUnionRequest::UnknownInteractionsProtocolStrictEventUnionRequest;
      Event(::test_unknowninteractions::UnknownInteractionsProtocolStrictEventUnionRequest v) : UnknownInteractionsProtocolStrictEventUnionRequest(std::move(v)) {}
};

template <>
struct ::fidl::internal::MessageTraits<::fidl::Event<::test_unknowninteractions::UnknownInteractionsProtocol::StrictEventUnion>> final {
 public:
  static constexpr bool kHasPayload = true;
  using Payload = ::test_unknowninteractions::UnknownInteractionsProtocolStrictEventUnionRequest;
};namespace test_unknowninteractions {
}  // namespace test_unknowninteractions


template <>
class ::fidl::Event<::test_unknowninteractions::UnknownInteractionsProtocol::StrictEventTable> final : public ::test_unknowninteractions::UnknownInteractionsProtocolStrictEventTableRequest  {
 public:
      using ::test_unknowninteractions::UnknownInteractionsProtocolStrictEventTableRequest::UnknownInteractionsProtocolStrictEventTableRequest;
      Event(::test_unknowninteractions::UnknownInteractionsProtocolStrictEventTableRequest v) : UnknownInteractionsProtocolStrictEventTableRequest(std::move(v)) {}
};

template <>
struct ::fidl::internal::MessageTraits<::fidl::Event<::test_unknowninteractions::UnknownInteractionsProtocol::StrictEventTable>> final {
 public:
  static constexpr bool kHasPayload = true;
  using Payload = ::test_unknowninteractions::UnknownInteractionsProtocolStrictEventTableRequest;
};namespace test_unknowninteractions {
}  // namespace test_unknowninteractions


template <>
class ::fidl::Event<::test_unknowninteractions::UnknownInteractionsProtocol::StrictEventErr> final : public ::fitx::result<int32_t>  {
 public:
      using ::fitx::result<int32_t>::result;
      Event(::fitx::result<int32_t> v) : result(std::move(v)) {}
      Event() = delete;
};

template <>
struct ::fidl::internal::MessageTraits<::fidl::Event<::test_unknowninteractions::UnknownInteractionsProtocol::StrictEventErr>> final {
 public:
  static constexpr bool kHasPayload = true;
  using Payload = ::test_unknowninteractions::UnknownInteractionsProtocolStrictEventErrRequest;
};
template <>
class ::fidl::internal::NaturalMessageConverter <::fidl::Event<::test_unknowninteractions::UnknownInteractionsProtocol::StrictEventErr>> {
  using DomainObject = ::test_unknowninteractions::UnknownInteractionsProtocolStrictEventErrRequest;

 public:
  static ::fidl::Event<::test_unknowninteractions::UnknownInteractionsProtocol::StrictEventErr> FromDomainObject(DomainObject o) {
    if (o.result().err().has_value()) {
      return ::fitx::error(std::move(o.result().err().value()));
    } else {
      ZX_DEBUG_ASSERT(o.result().response().has_value());
        return ::fitx::ok();
    }
  }

  static DomainObject IntoDomainObject(const ::fidl::Event<::test_unknowninteractions::UnknownInteractionsProtocol::StrictEventErr>& m) {
    if (m.is_error()) {
      return DomainObject{ { .result = ::test_unknowninteractions::UnknownInteractionsProtocolStrictEventErrResult::WithErr(m.error_value()) } };
    } else {
        return DomainObject{ { .result = ::test_unknowninteractions::UnknownInteractionsProtocolStrictEventErrResult::WithResponse({}) } };
    }
  }
};namespace test_unknowninteractions {
}  // namespace test_unknowninteractions


template <>
class ::fidl::Event<::test_unknowninteractions::UnknownInteractionsProtocol::StrictEventFieldsErr> final : public ::fitx::result<int32_t, ::test_unknowninteractions::UnknownInteractionsProtocolStrictEventFieldsErrResponse>  {
 public:
      using ::fitx::result<int32_t, ::test_unknowninteractions::UnknownInteractionsProtocolStrictEventFieldsErrResponse>::result;
      Event(::fitx::result<int32_t, ::test_unknowninteractions::UnknownInteractionsProtocolStrictEventFieldsErrResponse> v) : result(std::move(v)) {}
      Event() = delete;
};

template <>
struct ::fidl::internal::MessageTraits<::fidl::Event<::test_unknowninteractions::UnknownInteractionsProtocol::StrictEventFieldsErr>> final {
 public:
  static constexpr bool kHasPayload = true;
  using Payload = ::test_unknowninteractions::UnknownInteractionsProtocolStrictEventFieldsErrRequest;
};
template <>
class ::fidl::internal::NaturalMessageConverter <::fidl::Event<::test_unknowninteractions::UnknownInteractionsProtocol::StrictEventFieldsErr>> {
  using DomainObject = ::test_unknowninteractions::UnknownInteractionsProtocolStrictEventFieldsErrRequest;

 public:
  static ::fidl::Event<::test_unknowninteractions::UnknownInteractionsProtocol::StrictEventFieldsErr> FromDomainObject(DomainObject o) {
    if (o.result().err().has_value()) {
      return ::fitx::error(std::move(o.result().err().value()));
    } else {
      ZX_DEBUG_ASSERT(o.result().response().has_value());
        return ::fitx::ok(std::move(o.result().response().value()));
    }
  }

  static DomainObject IntoDomainObject(const ::fidl::Event<::test_unknowninteractions::UnknownInteractionsProtocol::StrictEventFieldsErr>& m) {
    if (m.is_error()) {
      return DomainObject{ { .result = ::test_unknowninteractions::UnknownInteractionsProtocolStrictEventFieldsErrResult::WithErr(m.error_value()) } };
    } else {
        return DomainObject{ { .result = ::test_unknowninteractions::UnknownInteractionsProtocolStrictEventFieldsErrResult::WithResponse(std::move(m.value())) } };
    }
  }
};namespace test_unknowninteractions {
}  // namespace test_unknowninteractions


template <>
class ::fidl::Event<::test_unknowninteractions::UnknownInteractionsProtocol::StrictEventUnionErr> final : public ::fitx::result<int32_t, ::test_unknowninteractions::UnknownInteractionsProtocolStrictEventUnionErrResponse>  {
 public:
      using ::fitx::result<int32_t, ::test_unknowninteractions::UnknownInteractionsProtocolStrictEventUnionErrResponse>::result;
      Event(::fitx::result<int32_t, ::test_unknowninteractions::UnknownInteractionsProtocolStrictEventUnionErrResponse> v) : result(std::move(v)) {}
      Event() = delete;
};

template <>
struct ::fidl::internal::MessageTraits<::fidl::Event<::test_unknowninteractions::UnknownInteractionsProtocol::StrictEventUnionErr>> final {
 public:
  static constexpr bool kHasPayload = true;
  using Payload = ::test_unknowninteractions::UnknownInteractionsProtocolStrictEventUnionErrRequest;
};
template <>
class ::fidl::internal::NaturalMessageConverter <::fidl::Event<::test_unknowninteractions::UnknownInteractionsProtocol::StrictEventUnionErr>> {
  using DomainObject = ::test_unknowninteractions::UnknownInteractionsProtocolStrictEventUnionErrRequest;

 public:
  static ::fidl::Event<::test_unknowninteractions::UnknownInteractionsProtocol::StrictEventUnionErr> FromDomainObject(DomainObject o) {
    if (o.result().err().has_value()) {
      return ::fitx::error(std::move(o.result().err().value()));
    } else {
      ZX_DEBUG_ASSERT(o.result().response().has_value());
        return ::fitx::ok(std::move(o.result().response().value()));
    }
  }

  static DomainObject IntoDomainObject(const ::fidl::Event<::test_unknowninteractions::UnknownInteractionsProtocol::StrictEventUnionErr>& m) {
    if (m.is_error()) {
      return DomainObject{ { .result = ::test_unknowninteractions::UnknownInteractionsProtocolStrictEventUnionErrResult::WithErr(m.error_value()) } };
    } else {
        return DomainObject{ { .result = ::test_unknowninteractions::UnknownInteractionsProtocolStrictEventUnionErrResult::WithResponse(std::move(m.value())) } };
    }
  }
};namespace test_unknowninteractions {
}  // namespace test_unknowninteractions


template <>
class ::fidl::Event<::test_unknowninteractions::UnknownInteractionsProtocol::StrictEventTableErr> final : public ::fitx::result<int32_t, ::test_unknowninteractions::UnknownInteractionsProtocolStrictEventTableErrResponse>  {
 public:
      using ::fitx::result<int32_t, ::test_unknowninteractions::UnknownInteractionsProtocolStrictEventTableErrResponse>::result;
      Event(::fitx::result<int32_t, ::test_unknowninteractions::UnknownInteractionsProtocolStrictEventTableErrResponse> v) : result(std::move(v)) {}
      Event() = delete;
};

template <>
struct ::fidl::internal::MessageTraits<::fidl::Event<::test_unknowninteractions::UnknownInteractionsProtocol::StrictEventTableErr>> final {
 public:
  static constexpr bool kHasPayload = true;
  using Payload = ::test_unknowninteractions::UnknownInteractionsProtocolStrictEventTableErrRequest;
};
template <>
class ::fidl::internal::NaturalMessageConverter <::fidl::Event<::test_unknowninteractions::UnknownInteractionsProtocol::StrictEventTableErr>> {
  using DomainObject = ::test_unknowninteractions::UnknownInteractionsProtocolStrictEventTableErrRequest;

 public:
  static ::fidl::Event<::test_unknowninteractions::UnknownInteractionsProtocol::StrictEventTableErr> FromDomainObject(DomainObject o) {
    if (o.result().err().has_value()) {
      return ::fitx::error(std::move(o.result().err().value()));
    } else {
      ZX_DEBUG_ASSERT(o.result().response().has_value());
        return ::fitx::ok(std::move(o.result().response().value()));
    }
  }

  static DomainObject IntoDomainObject(const ::fidl::Event<::test_unknowninteractions::UnknownInteractionsProtocol::StrictEventTableErr>& m) {
    if (m.is_error()) {
      return DomainObject{ { .result = ::test_unknowninteractions::UnknownInteractionsProtocolStrictEventTableErrResult::WithErr(m.error_value()) } };
    } else {
        return DomainObject{ { .result = ::test_unknowninteractions::UnknownInteractionsProtocolStrictEventTableErrResult::WithResponse(std::move(m.value())) } };
    }
  }
};namespace test_unknowninteractions {
}  // namespace test_unknowninteractions


template <>
class ::fidl::Event<::test_unknowninteractions::UnknownInteractionsProtocol::FlexibleEvent> final {
 public:
};

template <>
struct ::fidl::internal::MessageTraits<::fidl::Event<::test_unknowninteractions::UnknownInteractionsProtocol::FlexibleEvent>> final {
 public:
  static constexpr bool kHasPayload = false;
};namespace test_unknowninteractions {
}  // namespace test_unknowninteractions


template <>
class ::fidl::Event<::test_unknowninteractions::UnknownInteractionsProtocol::FlexibleEventFields> final : public ::test_unknowninteractions::UnknownInteractionsProtocolFlexibleEventFieldsRequest  {
 public:
      using ::test_unknowninteractions::UnknownInteractionsProtocolFlexibleEventFieldsRequest::UnknownInteractionsProtocolFlexibleEventFieldsRequest;
      Event(::test_unknowninteractions::UnknownInteractionsProtocolFlexibleEventFieldsRequest v) : UnknownInteractionsProtocolFlexibleEventFieldsRequest(std::move(v)) {}
};

template <>
struct ::fidl::internal::MessageTraits<::fidl::Event<::test_unknowninteractions::UnknownInteractionsProtocol::FlexibleEventFields>> final {
 public:
  static constexpr bool kHasPayload = true;
  using Payload = ::test_unknowninteractions::UnknownInteractionsProtocolFlexibleEventFieldsRequest;
};namespace test_unknowninteractions {
}  // namespace test_unknowninteractions


template <>
class ::fidl::Event<::test_unknowninteractions::UnknownInteractionsProtocol::FlexibleEventUnion> final : public ::test_unknowninteractions::UnknownInteractionsProtocolFlexibleEventUnionRequest  {
 public:
      using ::test_unknowninteractions::UnknownInteractionsProtocolFlexibleEventUnionRequest::UnknownInteractionsProtocolFlexibleEventUnionRequest;
      Event(::test_unknowninteractions::UnknownInteractionsProtocolFlexibleEventUnionRequest v) : UnknownInteractionsProtocolFlexibleEventUnionRequest(std::move(v)) {}
};

template <>
struct ::fidl::internal::MessageTraits<::fidl::Event<::test_unknowninteractions::UnknownInteractionsProtocol::FlexibleEventUnion>> final {
 public:
  static constexpr bool kHasPayload = true;
  using Payload = ::test_unknowninteractions::UnknownInteractionsProtocolFlexibleEventUnionRequest;
};namespace test_unknowninteractions {
}  // namespace test_unknowninteractions


template <>
class ::fidl::Event<::test_unknowninteractions::UnknownInteractionsProtocol::FlexibleEventTable> final : public ::test_unknowninteractions::UnknownInteractionsProtocolFlexibleEventTableRequest  {
 public:
      using ::test_unknowninteractions::UnknownInteractionsProtocolFlexibleEventTableRequest::UnknownInteractionsProtocolFlexibleEventTableRequest;
      Event(::test_unknowninteractions::UnknownInteractionsProtocolFlexibleEventTableRequest v) : UnknownInteractionsProtocolFlexibleEventTableRequest(std::move(v)) {}
};

template <>
struct ::fidl::internal::MessageTraits<::fidl::Event<::test_unknowninteractions::UnknownInteractionsProtocol::FlexibleEventTable>> final {
 public:
  static constexpr bool kHasPayload = true;
  using Payload = ::test_unknowninteractions::UnknownInteractionsProtocolFlexibleEventTableRequest;
};namespace test_unknowninteractions {
}  // namespace test_unknowninteractions


template <>
class ::fidl::Event<::test_unknowninteractions::UnknownInteractionsProtocol::FlexibleEventErr> final : public ::fitx::result<int32_t>  {
 public:
      using ::fitx::result<int32_t>::result;
      Event(::fitx::result<int32_t> v) : result(std::move(v)) {}
      Event() = delete;
};

template <>
struct ::fidl::internal::MessageTraits<::fidl::Event<::test_unknowninteractions::UnknownInteractionsProtocol::FlexibleEventErr>> final {
 public:
  static constexpr bool kHasPayload = true;
  using Payload = ::test_unknowninteractions::UnknownInteractionsProtocolFlexibleEventErrRequest;
};
template <>
class ::fidl::internal::NaturalMessageConverter <::fidl::Event<::test_unknowninteractions::UnknownInteractionsProtocol::FlexibleEventErr>> {
  using DomainObject = ::test_unknowninteractions::UnknownInteractionsProtocolFlexibleEventErrRequest;

 public:
  static ::fidl::Event<::test_unknowninteractions::UnknownInteractionsProtocol::FlexibleEventErr> FromDomainObject(DomainObject o) {
    if (o.result().err().has_value()) {
      return ::fitx::error(std::move(o.result().err().value()));
    } else {
      ZX_DEBUG_ASSERT(o.result().response().has_value());
        return ::fitx::ok();
    }
  }

  static DomainObject IntoDomainObject(const ::fidl::Event<::test_unknowninteractions::UnknownInteractionsProtocol::FlexibleEventErr>& m) {
    if (m.is_error()) {
      return DomainObject{ { .result = ::test_unknowninteractions::UnknownInteractionsProtocolFlexibleEventErrResult::WithErr(m.error_value()) } };
    } else {
        return DomainObject{ { .result = ::test_unknowninteractions::UnknownInteractionsProtocolFlexibleEventErrResult::WithResponse({}) } };
    }
  }
};namespace test_unknowninteractions {
}  // namespace test_unknowninteractions


template <>
class ::fidl::Event<::test_unknowninteractions::UnknownInteractionsProtocol::FlexibleEventFieldsErr> final : public ::fitx::result<int32_t, ::test_unknowninteractions::UnknownInteractionsProtocolFlexibleEventFieldsErrResponse>  {
 public:
      using ::fitx::result<int32_t, ::test_unknowninteractions::UnknownInteractionsProtocolFlexibleEventFieldsErrResponse>::result;
      Event(::fitx::result<int32_t, ::test_unknowninteractions::UnknownInteractionsProtocolFlexibleEventFieldsErrResponse> v) : result(std::move(v)) {}
      Event() = delete;
};

template <>
struct ::fidl::internal::MessageTraits<::fidl::Event<::test_unknowninteractions::UnknownInteractionsProtocol::FlexibleEventFieldsErr>> final {
 public:
  static constexpr bool kHasPayload = true;
  using Payload = ::test_unknowninteractions::UnknownInteractionsProtocolFlexibleEventFieldsErrRequest;
};
template <>
class ::fidl::internal::NaturalMessageConverter <::fidl::Event<::test_unknowninteractions::UnknownInteractionsProtocol::FlexibleEventFieldsErr>> {
  using DomainObject = ::test_unknowninteractions::UnknownInteractionsProtocolFlexibleEventFieldsErrRequest;

 public:
  static ::fidl::Event<::test_unknowninteractions::UnknownInteractionsProtocol::FlexibleEventFieldsErr> FromDomainObject(DomainObject o) {
    if (o.result().err().has_value()) {
      return ::fitx::error(std::move(o.result().err().value()));
    } else {
      ZX_DEBUG_ASSERT(o.result().response().has_value());
        return ::fitx::ok(std::move(o.result().response().value()));
    }
  }

  static DomainObject IntoDomainObject(const ::fidl::Event<::test_unknowninteractions::UnknownInteractionsProtocol::FlexibleEventFieldsErr>& m) {
    if (m.is_error()) {
      return DomainObject{ { .result = ::test_unknowninteractions::UnknownInteractionsProtocolFlexibleEventFieldsErrResult::WithErr(m.error_value()) } };
    } else {
        return DomainObject{ { .result = ::test_unknowninteractions::UnknownInteractionsProtocolFlexibleEventFieldsErrResult::WithResponse(std::move(m.value())) } };
    }
  }
};namespace test_unknowninteractions {
}  // namespace test_unknowninteractions


template <>
class ::fidl::Event<::test_unknowninteractions::UnknownInteractionsProtocol::FlexibleEventUnionErr> final : public ::fitx::result<int32_t, ::test_unknowninteractions::UnknownInteractionsProtocolFlexibleEventUnionErrResponse>  {
 public:
      using ::fitx::result<int32_t, ::test_unknowninteractions::UnknownInteractionsProtocolFlexibleEventUnionErrResponse>::result;
      Event(::fitx::result<int32_t, ::test_unknowninteractions::UnknownInteractionsProtocolFlexibleEventUnionErrResponse> v) : result(std::move(v)) {}
      Event() = delete;
};

template <>
struct ::fidl::internal::MessageTraits<::fidl::Event<::test_unknowninteractions::UnknownInteractionsProtocol::FlexibleEventUnionErr>> final {
 public:
  static constexpr bool kHasPayload = true;
  using Payload = ::test_unknowninteractions::UnknownInteractionsProtocolFlexibleEventUnionErrRequest;
};
template <>
class ::fidl::internal::NaturalMessageConverter <::fidl::Event<::test_unknowninteractions::UnknownInteractionsProtocol::FlexibleEventUnionErr>> {
  using DomainObject = ::test_unknowninteractions::UnknownInteractionsProtocolFlexibleEventUnionErrRequest;

 public:
  static ::fidl::Event<::test_unknowninteractions::UnknownInteractionsProtocol::FlexibleEventUnionErr> FromDomainObject(DomainObject o) {
    if (o.result().err().has_value()) {
      return ::fitx::error(std::move(o.result().err().value()));
    } else {
      ZX_DEBUG_ASSERT(o.result().response().has_value());
        return ::fitx::ok(std::move(o.result().response().value()));
    }
  }

  static DomainObject IntoDomainObject(const ::fidl::Event<::test_unknowninteractions::UnknownInteractionsProtocol::FlexibleEventUnionErr>& m) {
    if (m.is_error()) {
      return DomainObject{ { .result = ::test_unknowninteractions::UnknownInteractionsProtocolFlexibleEventUnionErrResult::WithErr(m.error_value()) } };
    } else {
        return DomainObject{ { .result = ::test_unknowninteractions::UnknownInteractionsProtocolFlexibleEventUnionErrResult::WithResponse(std::move(m.value())) } };
    }
  }
};namespace test_unknowninteractions {
}  // namespace test_unknowninteractions


template <>
class ::fidl::Event<::test_unknowninteractions::UnknownInteractionsProtocol::FlexibleEventTableErr> final : public ::fitx::result<int32_t, ::test_unknowninteractions::UnknownInteractionsProtocolFlexibleEventTableErrResponse>  {
 public:
      using ::fitx::result<int32_t, ::test_unknowninteractions::UnknownInteractionsProtocolFlexibleEventTableErrResponse>::result;
      Event(::fitx::result<int32_t, ::test_unknowninteractions::UnknownInteractionsProtocolFlexibleEventTableErrResponse> v) : result(std::move(v)) {}
      Event() = delete;
};

template <>
struct ::fidl::internal::MessageTraits<::fidl::Event<::test_unknowninteractions::UnknownInteractionsProtocol::FlexibleEventTableErr>> final {
 public:
  static constexpr bool kHasPayload = true;
  using Payload = ::test_unknowninteractions::UnknownInteractionsProtocolFlexibleEventTableErrRequest;
};
template <>
class ::fidl::internal::NaturalMessageConverter <::fidl::Event<::test_unknowninteractions::UnknownInteractionsProtocol::FlexibleEventTableErr>> {
  using DomainObject = ::test_unknowninteractions::UnknownInteractionsProtocolFlexibleEventTableErrRequest;

 public:
  static ::fidl::Event<::test_unknowninteractions::UnknownInteractionsProtocol::FlexibleEventTableErr> FromDomainObject(DomainObject o) {
    if (o.result().err().has_value()) {
      return ::fitx::error(std::move(o.result().err().value()));
    } else {
      ZX_DEBUG_ASSERT(o.result().response().has_value());
        return ::fitx::ok(std::move(o.result().response().value()));
    }
  }

  static DomainObject IntoDomainObject(const ::fidl::Event<::test_unknowninteractions::UnknownInteractionsProtocol::FlexibleEventTableErr>& m) {
    if (m.is_error()) {
      return DomainObject{ { .result = ::test_unknowninteractions::UnknownInteractionsProtocolFlexibleEventTableErrResult::WithErr(m.error_value()) } };
    } else {
        return DomainObject{ { .result = ::test_unknowninteractions::UnknownInteractionsProtocolFlexibleEventTableErrResult::WithResponse(std::move(m.value())) } };
    }
  }
};namespace test_unknowninteractions {
}  // namespace test_unknowninteractions


template <>
class ::fidl::Response<::test_unknowninteractions::UnknownInteractionsProtocol::StrictTwoWay> final {
 public:
};

template <>
struct ::fidl::internal::MessageTraits<::fidl::Response<::test_unknowninteractions::UnknownInteractionsProtocol::StrictTwoWay>> final {
 public:
  static constexpr bool kHasPayload = false;
};namespace test_unknowninteractions {
}  // namespace test_unknowninteractions

template <>
class ::fidl::Result<::test_unknowninteractions::UnknownInteractionsProtocol::StrictTwoWay> final : public ::fitx::result<::fidl::Error> {
 public:
  using ::fitx::result<::fidl::Error>::result;

 protected:
  Result() = default;
};



template <>
class ::fidl::Response<::test_unknowninteractions::UnknownInteractionsProtocol::StrictTwoWayFields> final : public ::test_unknowninteractions::UnknownInteractionsProtocolStrictTwoWayFieldsResponse  {
 public:
      using ::test_unknowninteractions::UnknownInteractionsProtocolStrictTwoWayFieldsResponse::UnknownInteractionsProtocolStrictTwoWayFieldsResponse;
      Response(::test_unknowninteractions::UnknownInteractionsProtocolStrictTwoWayFieldsResponse v) : UnknownInteractionsProtocolStrictTwoWayFieldsResponse(std::move(v)) {}
};

template <>
struct ::fidl::internal::MessageTraits<::fidl::Response<::test_unknowninteractions::UnknownInteractionsProtocol::StrictTwoWayFields>> final {
 public:
  static constexpr bool kHasPayload = true;
  using Payload = ::test_unknowninteractions::UnknownInteractionsProtocolStrictTwoWayFieldsResponse;
};


template <>
class ::fidl::Result<::test_unknowninteractions::UnknownInteractionsProtocol::StrictTwoWayFields> final : public ::fitx::result<::fidl::Error, ::test_unknowninteractions::UnknownInteractionsProtocolStrictTwoWayFieldsResponse> {
 public:
  using ::fitx::result<::fidl::Error, ::test_unknowninteractions::UnknownInteractionsProtocolStrictTwoWayFieldsResponse>::result;

 protected:
  Result() = default;
};



template <>
class ::fidl::Response<::test_unknowninteractions::UnknownInteractionsProtocol::StrictTwoWayUnion> final : public ::test_unknowninteractions::UnknownInteractionsProtocolStrictTwoWayUnionResponse  {
 public:
      using ::test_unknowninteractions::UnknownInteractionsProtocolStrictTwoWayUnionResponse::UnknownInteractionsProtocolStrictTwoWayUnionResponse;
      Response(::test_unknowninteractions::UnknownInteractionsProtocolStrictTwoWayUnionResponse v) : UnknownInteractionsProtocolStrictTwoWayUnionResponse(std::move(v)) {}
};

template <>
struct ::fidl::internal::MessageTraits<::fidl::Response<::test_unknowninteractions::UnknownInteractionsProtocol::StrictTwoWayUnion>> final {
 public:
  static constexpr bool kHasPayload = true;
  using Payload = ::test_unknowninteractions::UnknownInteractionsProtocolStrictTwoWayUnionResponse;
};


template <>
class ::fidl::Result<::test_unknowninteractions::UnknownInteractionsProtocol::StrictTwoWayUnion> final : public ::fitx::result<::fidl::Error, ::test_unknowninteractions::UnknownInteractionsProtocolStrictTwoWayUnionResponse> {
 public:
  using ::fitx::result<::fidl::Error, ::test_unknowninteractions::UnknownInteractionsProtocolStrictTwoWayUnionResponse>::result;

 protected:
  Result() = default;
};



template <>
class ::fidl::Response<::test_unknowninteractions::UnknownInteractionsProtocol::StrictTwoWayTable> final : public ::test_unknowninteractions::UnknownInteractionsProtocolStrictTwoWayTableResponse  {
 public:
      using ::test_unknowninteractions::UnknownInteractionsProtocolStrictTwoWayTableResponse::UnknownInteractionsProtocolStrictTwoWayTableResponse;
      Response(::test_unknowninteractions::UnknownInteractionsProtocolStrictTwoWayTableResponse v) : UnknownInteractionsProtocolStrictTwoWayTableResponse(std::move(v)) {}
};

template <>
struct ::fidl::internal::MessageTraits<::fidl::Response<::test_unknowninteractions::UnknownInteractionsProtocol::StrictTwoWayTable>> final {
 public:
  static constexpr bool kHasPayload = true;
  using Payload = ::test_unknowninteractions::UnknownInteractionsProtocolStrictTwoWayTableResponse;
};


template <>
class ::fidl::Result<::test_unknowninteractions::UnknownInteractionsProtocol::StrictTwoWayTable> final : public ::fitx::result<::fidl::Error, ::test_unknowninteractions::UnknownInteractionsProtocolStrictTwoWayTableResponse> {
 public:
  using ::fitx::result<::fidl::Error, ::test_unknowninteractions::UnknownInteractionsProtocolStrictTwoWayTableResponse>::result;

 protected:
  Result() = default;
};



template <>
class ::fidl::Response<::test_unknowninteractions::UnknownInteractionsProtocol::StrictTwoWayErr> final : public ::fitx::result<int32_t>  {
 public:
      using ::fitx::result<int32_t>::result;
      Response(::fitx::result<int32_t> v) : result(std::move(v)) {}
      Response() = delete;
};

template <>
struct ::fidl::internal::MessageTraits<::fidl::Response<::test_unknowninteractions::UnknownInteractionsProtocol::StrictTwoWayErr>> final {
 public:
  static constexpr bool kHasPayload = true;
  using Payload = ::test_unknowninteractions::UnknownInteractionsProtocolStrictTwoWayErrTopResponse;
};
template <>
class ::fidl::internal::NaturalMessageConverter <::fidl::Response<::test_unknowninteractions::UnknownInteractionsProtocol::StrictTwoWayErr>> {
  using DomainObject = ::test_unknowninteractions::UnknownInteractionsProtocolStrictTwoWayErrTopResponse;

 public:
  
  
  static ::fidl::Response<::test_unknowninteractions::UnknownInteractionsProtocol::StrictTwoWayErr> FromDomainObject(DomainObject o) {
    if (o.result().err().has_value()) {
      return ::fitx::error(std::move(o.result().err().value()));
    } else {
      ZX_DEBUG_ASSERT(o.result().response().has_value());
        return ::fitx::ok();
    }
  }
  

  static DomainObject IntoDomainObject(const ::fidl::Response<::test_unknowninteractions::UnknownInteractionsProtocol::StrictTwoWayErr>& m) {
    if (m.is_error()) {
      return DomainObject{ { .result = ::test_unknowninteractions::UnknownInteractionsProtocolStrictTwoWayErrResult::WithErr(m.error_value()) } };
    } else {
        return DomainObject{ { .result = ::test_unknowninteractions::UnknownInteractionsProtocolStrictTwoWayErrResult::WithResponse({}) } };
    }
  }
};


template <>
class ::fidl::Result<::test_unknowninteractions::UnknownInteractionsProtocol::StrictTwoWayErr> final : public ::fitx::result<::fidl::AnyErrorIn<::test_unknowninteractions::UnknownInteractionsProtocol::StrictTwoWayErr>> {
 public:
  using ::fitx::result<::fidl::AnyErrorIn<::test_unknowninteractions::UnknownInteractionsProtocol::StrictTwoWayErr>>::result;

 protected:
  Result() = default;
};



template <>
class ::fidl::Response<::test_unknowninteractions::UnknownInteractionsProtocol::StrictTwoWayFieldsErr> final : public ::fitx::result<int32_t, ::test_unknowninteractions::UnknownInteractionsProtocolStrictTwoWayFieldsErrResponse>  {
 public:
      using ::fitx::result<int32_t, ::test_unknowninteractions::UnknownInteractionsProtocolStrictTwoWayFieldsErrResponse>::result;
      Response(::fitx::result<int32_t, ::test_unknowninteractions::UnknownInteractionsProtocolStrictTwoWayFieldsErrResponse> v) : result(std::move(v)) {}
      Response() = delete;
};

template <>
struct ::fidl::internal::MessageTraits<::fidl::Response<::test_unknowninteractions::UnknownInteractionsProtocol::StrictTwoWayFieldsErr>> final {
 public:
  static constexpr bool kHasPayload = true;
  using Payload = ::test_unknowninteractions::UnknownInteractionsProtocolStrictTwoWayFieldsErrTopResponse;
};
template <>
class ::fidl::internal::NaturalMessageConverter <::fidl::Response<::test_unknowninteractions::UnknownInteractionsProtocol::StrictTwoWayFieldsErr>> {
  using DomainObject = ::test_unknowninteractions::UnknownInteractionsProtocolStrictTwoWayFieldsErrTopResponse;

 public:
  
  
  static ::fidl::Response<::test_unknowninteractions::UnknownInteractionsProtocol::StrictTwoWayFieldsErr> FromDomainObject(DomainObject o) {
    if (o.result().err().has_value()) {
      return ::fitx::error(std::move(o.result().err().value()));
    } else {
      ZX_DEBUG_ASSERT(o.result().response().has_value());
        return ::fitx::ok(std::move(o.result().response().value()));
    }
  }
  

  static DomainObject IntoDomainObject(const ::fidl::Response<::test_unknowninteractions::UnknownInteractionsProtocol::StrictTwoWayFieldsErr>& m) {
    if (m.is_error()) {
      return DomainObject{ { .result = ::test_unknowninteractions::UnknownInteractionsProtocolStrictTwoWayFieldsErrResult::WithErr(m.error_value()) } };
    } else {
        return DomainObject{ { .result = ::test_unknowninteractions::UnknownInteractionsProtocolStrictTwoWayFieldsErrResult::WithResponse(std::move(m.value())) } };
    }
  }
};


template <>
class ::fidl::Result<::test_unknowninteractions::UnknownInteractionsProtocol::StrictTwoWayFieldsErr> final : public ::fitx::result<::fidl::AnyErrorIn<::test_unknowninteractions::UnknownInteractionsProtocol::StrictTwoWayFieldsErr>, ::test_unknowninteractions::UnknownInteractionsProtocolStrictTwoWayFieldsErrResponse> {
 public:
  using ::fitx::result<::fidl::AnyErrorIn<::test_unknowninteractions::UnknownInteractionsProtocol::StrictTwoWayFieldsErr>, ::test_unknowninteractions::UnknownInteractionsProtocolStrictTwoWayFieldsErrResponse>::result;

 protected:
  Result() = default;
};



template <>
class ::fidl::Response<::test_unknowninteractions::UnknownInteractionsProtocol::StrictTwoWayUnionErr> final : public ::fitx::result<int32_t, ::test_unknowninteractions::UnknownInteractionsProtocolStrictTwoWayUnionErrResponse>  {
 public:
      using ::fitx::result<int32_t, ::test_unknowninteractions::UnknownInteractionsProtocolStrictTwoWayUnionErrResponse>::result;
      Response(::fitx::result<int32_t, ::test_unknowninteractions::UnknownInteractionsProtocolStrictTwoWayUnionErrResponse> v) : result(std::move(v)) {}
      Response() = delete;
};

template <>
struct ::fidl::internal::MessageTraits<::fidl::Response<::test_unknowninteractions::UnknownInteractionsProtocol::StrictTwoWayUnionErr>> final {
 public:
  static constexpr bool kHasPayload = true;
  using Payload = ::test_unknowninteractions::UnknownInteractionsProtocolStrictTwoWayUnionErrTopResponse;
};
template <>
class ::fidl::internal::NaturalMessageConverter <::fidl::Response<::test_unknowninteractions::UnknownInteractionsProtocol::StrictTwoWayUnionErr>> {
  using DomainObject = ::test_unknowninteractions::UnknownInteractionsProtocolStrictTwoWayUnionErrTopResponse;

 public:
  
  
  static ::fidl::Response<::test_unknowninteractions::UnknownInteractionsProtocol::StrictTwoWayUnionErr> FromDomainObject(DomainObject o) {
    if (o.result().err().has_value()) {
      return ::fitx::error(std::move(o.result().err().value()));
    } else {
      ZX_DEBUG_ASSERT(o.result().response().has_value());
        return ::fitx::ok(std::move(o.result().response().value()));
    }
  }
  

  static DomainObject IntoDomainObject(const ::fidl::Response<::test_unknowninteractions::UnknownInteractionsProtocol::StrictTwoWayUnionErr>& m) {
    if (m.is_error()) {
      return DomainObject{ { .result = ::test_unknowninteractions::UnknownInteractionsProtocolStrictTwoWayUnionErrResult::WithErr(m.error_value()) } };
    } else {
        return DomainObject{ { .result = ::test_unknowninteractions::UnknownInteractionsProtocolStrictTwoWayUnionErrResult::WithResponse(std::move(m.value())) } };
    }
  }
};


template <>
class ::fidl::Result<::test_unknowninteractions::UnknownInteractionsProtocol::StrictTwoWayUnionErr> final : public ::fitx::result<::fidl::AnyErrorIn<::test_unknowninteractions::UnknownInteractionsProtocol::StrictTwoWayUnionErr>, ::test_unknowninteractions::UnknownInteractionsProtocolStrictTwoWayUnionErrResponse> {
 public:
  using ::fitx::result<::fidl::AnyErrorIn<::test_unknowninteractions::UnknownInteractionsProtocol::StrictTwoWayUnionErr>, ::test_unknowninteractions::UnknownInteractionsProtocolStrictTwoWayUnionErrResponse>::result;

 protected:
  Result() = default;
};



template <>
class ::fidl::Response<::test_unknowninteractions::UnknownInteractionsProtocol::StrictTwoWayTableErr> final : public ::fitx::result<int32_t, ::test_unknowninteractions::UnknownInteractionsProtocolStrictTwoWayTableErrResponse>  {
 public:
      using ::fitx::result<int32_t, ::test_unknowninteractions::UnknownInteractionsProtocolStrictTwoWayTableErrResponse>::result;
      Response(::fitx::result<int32_t, ::test_unknowninteractions::UnknownInteractionsProtocolStrictTwoWayTableErrResponse> v) : result(std::move(v)) {}
      Response() = delete;
};

template <>
struct ::fidl::internal::MessageTraits<::fidl::Response<::test_unknowninteractions::UnknownInteractionsProtocol::StrictTwoWayTableErr>> final {
 public:
  static constexpr bool kHasPayload = true;
  using Payload = ::test_unknowninteractions::UnknownInteractionsProtocolStrictTwoWayTableErrTopResponse;
};
template <>
class ::fidl::internal::NaturalMessageConverter <::fidl::Response<::test_unknowninteractions::UnknownInteractionsProtocol::StrictTwoWayTableErr>> {
  using DomainObject = ::test_unknowninteractions::UnknownInteractionsProtocolStrictTwoWayTableErrTopResponse;

 public:
  
  
  static ::fidl::Response<::test_unknowninteractions::UnknownInteractionsProtocol::StrictTwoWayTableErr> FromDomainObject(DomainObject o) {
    if (o.result().err().has_value()) {
      return ::fitx::error(std::move(o.result().err().value()));
    } else {
      ZX_DEBUG_ASSERT(o.result().response().has_value());
        return ::fitx::ok(std::move(o.result().response().value()));
    }
  }
  

  static DomainObject IntoDomainObject(const ::fidl::Response<::test_unknowninteractions::UnknownInteractionsProtocol::StrictTwoWayTableErr>& m) {
    if (m.is_error()) {
      return DomainObject{ { .result = ::test_unknowninteractions::UnknownInteractionsProtocolStrictTwoWayTableErrResult::WithErr(m.error_value()) } };
    } else {
        return DomainObject{ { .result = ::test_unknowninteractions::UnknownInteractionsProtocolStrictTwoWayTableErrResult::WithResponse(std::move(m.value())) } };
    }
  }
};


template <>
class ::fidl::Result<::test_unknowninteractions::UnknownInteractionsProtocol::StrictTwoWayTableErr> final : public ::fitx::result<::fidl::AnyErrorIn<::test_unknowninteractions::UnknownInteractionsProtocol::StrictTwoWayTableErr>, ::test_unknowninteractions::UnknownInteractionsProtocolStrictTwoWayTableErrResponse> {
 public:
  using ::fitx::result<::fidl::AnyErrorIn<::test_unknowninteractions::UnknownInteractionsProtocol::StrictTwoWayTableErr>, ::test_unknowninteractions::UnknownInteractionsProtocolStrictTwoWayTableErrResponse>::result;

 protected:
  Result() = default;
};



template <>
class ::fidl::Response<::test_unknowninteractions::UnknownInteractionsProtocol::FlexibleTwoWay> final {
 public:
};

template <>
struct ::fidl::internal::MessageTraits<::fidl::Response<::test_unknowninteractions::UnknownInteractionsProtocol::FlexibleTwoWay>> final {
 public:
  static constexpr bool kHasPayload = true;
  using Payload = ::test_unknowninteractions::UnknownInteractionsProtocolFlexibleTwoWayTopResponse;
};
template <>
class ::fidl::internal::NaturalMessageConverter <::fidl::Response<::test_unknowninteractions::UnknownInteractionsProtocol::FlexibleTwoWay>> {
  using DomainObject = ::test_unknowninteractions::UnknownInteractionsProtocolFlexibleTwoWayTopResponse;

 public:
  

  static DomainObject IntoDomainObject() {
    
      return DomainObject{ { .result = ::test_unknowninteractions::UnknownInteractionsProtocolFlexibleTwoWayResult::WithResponse({}) } };
  }
};


template <>
class ::fidl::Result<::test_unknowninteractions::UnknownInteractionsProtocol::FlexibleTwoWay> final : public ::fitx::result<::fidl::Error> {
 public:
  using ::fitx::result<::fidl::Error>::result;

 protected:
  Result() = default;
};



template <>
class ::fidl::Response<::test_unknowninteractions::UnknownInteractionsProtocol::FlexibleTwoWayFields> final : public ::test_unknowninteractions::UnknownInteractionsProtocolFlexibleTwoWayFieldsResponse  {
 public:
      using ::test_unknowninteractions::UnknownInteractionsProtocolFlexibleTwoWayFieldsResponse::UnknownInteractionsProtocolFlexibleTwoWayFieldsResponse;
      Response(::test_unknowninteractions::UnknownInteractionsProtocolFlexibleTwoWayFieldsResponse v) : UnknownInteractionsProtocolFlexibleTwoWayFieldsResponse(std::move(v)) {}
};

template <>
struct ::fidl::internal::MessageTraits<::fidl::Response<::test_unknowninteractions::UnknownInteractionsProtocol::FlexibleTwoWayFields>> final {
 public:
  static constexpr bool kHasPayload = true;
  using Payload = ::test_unknowninteractions::UnknownInteractionsProtocolFlexibleTwoWayFieldsTopResponse;
};
template <>
class ::fidl::internal::NaturalMessageConverter <::fidl::Response<::test_unknowninteractions::UnknownInteractionsProtocol::FlexibleTwoWayFields>> {
  using DomainObject = ::test_unknowninteractions::UnknownInteractionsProtocolFlexibleTwoWayFieldsTopResponse;

 public:
  

  static DomainObject IntoDomainObject(const ::fidl::Response<::test_unknowninteractions::UnknownInteractionsProtocol::FlexibleTwoWayFields>& m) {
    
      return DomainObject{ { .result = ::test_unknowninteractions::UnknownInteractionsProtocolFlexibleTwoWayFieldsResult::WithResponse(std::move(m)) } };
  }
};


template <>
class ::fidl::Result<::test_unknowninteractions::UnknownInteractionsProtocol::FlexibleTwoWayFields> final : public ::fitx::result<::fidl::Error, ::test_unknowninteractions::UnknownInteractionsProtocolFlexibleTwoWayFieldsResponse> {
 public:
  using ::fitx::result<::fidl::Error, ::test_unknowninteractions::UnknownInteractionsProtocolFlexibleTwoWayFieldsResponse>::result;

 protected:
  Result() = default;
};



template <>
class ::fidl::Response<::test_unknowninteractions::UnknownInteractionsProtocol::FlexibleTwoWayUnion> final : public ::test_unknowninteractions::UnknownInteractionsProtocolFlexibleTwoWayUnionResponse  {
 public:
      using ::test_unknowninteractions::UnknownInteractionsProtocolFlexibleTwoWayUnionResponse::UnknownInteractionsProtocolFlexibleTwoWayUnionResponse;
      Response(::test_unknowninteractions::UnknownInteractionsProtocolFlexibleTwoWayUnionResponse v) : UnknownInteractionsProtocolFlexibleTwoWayUnionResponse(std::move(v)) {}
};

template <>
struct ::fidl::internal::MessageTraits<::fidl::Response<::test_unknowninteractions::UnknownInteractionsProtocol::FlexibleTwoWayUnion>> final {
 public:
  static constexpr bool kHasPayload = true;
  using Payload = ::test_unknowninteractions::UnknownInteractionsProtocolFlexibleTwoWayUnionTopResponse;
};
template <>
class ::fidl::internal::NaturalMessageConverter <::fidl::Response<::test_unknowninteractions::UnknownInteractionsProtocol::FlexibleTwoWayUnion>> {
  using DomainObject = ::test_unknowninteractions::UnknownInteractionsProtocolFlexibleTwoWayUnionTopResponse;

 public:
  

  static DomainObject IntoDomainObject(const ::fidl::Response<::test_unknowninteractions::UnknownInteractionsProtocol::FlexibleTwoWayUnion>& m) {
    
      return DomainObject{ { .result = ::test_unknowninteractions::UnknownInteractionsProtocolFlexibleTwoWayUnionResult::WithResponse(std::move(m)) } };
  }
};


template <>
class ::fidl::Result<::test_unknowninteractions::UnknownInteractionsProtocol::FlexibleTwoWayUnion> final : public ::fitx::result<::fidl::Error, ::test_unknowninteractions::UnknownInteractionsProtocolFlexibleTwoWayUnionResponse> {
 public:
  using ::fitx::result<::fidl::Error, ::test_unknowninteractions::UnknownInteractionsProtocolFlexibleTwoWayUnionResponse>::result;

 protected:
  Result() = default;
};



template <>
class ::fidl::Response<::test_unknowninteractions::UnknownInteractionsProtocol::FlexibleTwoWayTable> final : public ::test_unknowninteractions::UnknownInteractionsProtocolFlexibleTwoWayTableResponse  {
 public:
      using ::test_unknowninteractions::UnknownInteractionsProtocolFlexibleTwoWayTableResponse::UnknownInteractionsProtocolFlexibleTwoWayTableResponse;
      Response(::test_unknowninteractions::UnknownInteractionsProtocolFlexibleTwoWayTableResponse v) : UnknownInteractionsProtocolFlexibleTwoWayTableResponse(std::move(v)) {}
};

template <>
struct ::fidl::internal::MessageTraits<::fidl::Response<::test_unknowninteractions::UnknownInteractionsProtocol::FlexibleTwoWayTable>> final {
 public:
  static constexpr bool kHasPayload = true;
  using Payload = ::test_unknowninteractions::UnknownInteractionsProtocolFlexibleTwoWayTableTopResponse;
};
template <>
class ::fidl::internal::NaturalMessageConverter <::fidl::Response<::test_unknowninteractions::UnknownInteractionsProtocol::FlexibleTwoWayTable>> {
  using DomainObject = ::test_unknowninteractions::UnknownInteractionsProtocolFlexibleTwoWayTableTopResponse;

 public:
  

  static DomainObject IntoDomainObject(const ::fidl::Response<::test_unknowninteractions::UnknownInteractionsProtocol::FlexibleTwoWayTable>& m) {
    
      return DomainObject{ { .result = ::test_unknowninteractions::UnknownInteractionsProtocolFlexibleTwoWayTableResult::WithResponse(std::move(m)) } };
  }
};


template <>
class ::fidl::Result<::test_unknowninteractions::UnknownInteractionsProtocol::FlexibleTwoWayTable> final : public ::fitx::result<::fidl::Error, ::test_unknowninteractions::UnknownInteractionsProtocolFlexibleTwoWayTableResponse> {
 public:
  using ::fitx::result<::fidl::Error, ::test_unknowninteractions::UnknownInteractionsProtocolFlexibleTwoWayTableResponse>::result;

 protected:
  Result() = default;
};



template <>
class ::fidl::Response<::test_unknowninteractions::UnknownInteractionsProtocol::FlexibleTwoWayErr> final : public ::fitx::result<int32_t>  {
 public:
      using ::fitx::result<int32_t>::result;
      Response(::fitx::result<int32_t> v) : result(std::move(v)) {}
      Response() = delete;
};

template <>
struct ::fidl::internal::MessageTraits<::fidl::Response<::test_unknowninteractions::UnknownInteractionsProtocol::FlexibleTwoWayErr>> final {
 public:
  static constexpr bool kHasPayload = true;
  using Payload = ::test_unknowninteractions::UnknownInteractionsProtocolFlexibleTwoWayErrTopResponse;
};
template <>
class ::fidl::internal::NaturalMessageConverter <::fidl::Response<::test_unknowninteractions::UnknownInteractionsProtocol::FlexibleTwoWayErr>> {
  using DomainObject = ::test_unknowninteractions::UnknownInteractionsProtocolFlexibleTwoWayErrTopResponse;

 public:
  

  static DomainObject IntoDomainObject(const ::fidl::Response<::test_unknowninteractions::UnknownInteractionsProtocol::FlexibleTwoWayErr>& m) {
    if (m.is_error()) {
      return DomainObject{ { .result = ::test_unknowninteractions::UnknownInteractionsProtocolFlexibleTwoWayErrResult::WithErr(m.error_value()) } };
    } else {
        return DomainObject{ { .result = ::test_unknowninteractions::UnknownInteractionsProtocolFlexibleTwoWayErrResult::WithResponse({}) } };
    }
  }
};


template <>
class ::fidl::Result<::test_unknowninteractions::UnknownInteractionsProtocol::FlexibleTwoWayErr> final : public ::fitx::result<::fidl::AnyErrorIn<::test_unknowninteractions::UnknownInteractionsProtocol::FlexibleTwoWayErr>> {
 public:
  using ::fitx::result<::fidl::AnyErrorIn<::test_unknowninteractions::UnknownInteractionsProtocol::FlexibleTwoWayErr>>::result;

 protected:
  Result() = default;
};



template <>
class ::fidl::Response<::test_unknowninteractions::UnknownInteractionsProtocol::FlexibleTwoWayFieldsErr> final : public ::fitx::result<int32_t, ::test_unknowninteractions::UnknownInteractionsProtocolFlexibleTwoWayFieldsErrResponse>  {
 public:
      using ::fitx::result<int32_t, ::test_unknowninteractions::UnknownInteractionsProtocolFlexibleTwoWayFieldsErrResponse>::result;
      Response(::fitx::result<int32_t, ::test_unknowninteractions::UnknownInteractionsProtocolFlexibleTwoWayFieldsErrResponse> v) : result(std::move(v)) {}
      Response() = delete;
};

template <>
struct ::fidl::internal::MessageTraits<::fidl::Response<::test_unknowninteractions::UnknownInteractionsProtocol::FlexibleTwoWayFieldsErr>> final {
 public:
  static constexpr bool kHasPayload = true;
  using Payload = ::test_unknowninteractions::UnknownInteractionsProtocolFlexibleTwoWayFieldsErrTopResponse;
};
template <>
class ::fidl::internal::NaturalMessageConverter <::fidl::Response<::test_unknowninteractions::UnknownInteractionsProtocol::FlexibleTwoWayFieldsErr>> {
  using DomainObject = ::test_unknowninteractions::UnknownInteractionsProtocolFlexibleTwoWayFieldsErrTopResponse;

 public:
  

  static DomainObject IntoDomainObject(const ::fidl::Response<::test_unknowninteractions::UnknownInteractionsProtocol::FlexibleTwoWayFieldsErr>& m) {
    if (m.is_error()) {
      return DomainObject{ { .result = ::test_unknowninteractions::UnknownInteractionsProtocolFlexibleTwoWayFieldsErrResult::WithErr(m.error_value()) } };
    } else {
        return DomainObject{ { .result = ::test_unknowninteractions::UnknownInteractionsProtocolFlexibleTwoWayFieldsErrResult::WithResponse(std::move(m.value())) } };
    }
  }
};


template <>
class ::fidl::Result<::test_unknowninteractions::UnknownInteractionsProtocol::FlexibleTwoWayFieldsErr> final : public ::fitx::result<::fidl::AnyErrorIn<::test_unknowninteractions::UnknownInteractionsProtocol::FlexibleTwoWayFieldsErr>, ::test_unknowninteractions::UnknownInteractionsProtocolFlexibleTwoWayFieldsErrResponse> {
 public:
  using ::fitx::result<::fidl::AnyErrorIn<::test_unknowninteractions::UnknownInteractionsProtocol::FlexibleTwoWayFieldsErr>, ::test_unknowninteractions::UnknownInteractionsProtocolFlexibleTwoWayFieldsErrResponse>::result;

 protected:
  Result() = default;
};



template <>
class ::fidl::Response<::test_unknowninteractions::UnknownInteractionsProtocol::FlexibleTwoWayUnionErr> final : public ::fitx::result<int32_t, ::test_unknowninteractions::UnknownInteractionsProtocolFlexibleTwoWayUnionErrResponse>  {
 public:
      using ::fitx::result<int32_t, ::test_unknowninteractions::UnknownInteractionsProtocolFlexibleTwoWayUnionErrResponse>::result;
      Response(::fitx::result<int32_t, ::test_unknowninteractions::UnknownInteractionsProtocolFlexibleTwoWayUnionErrResponse> v) : result(std::move(v)) {}
      Response() = delete;
};

template <>
struct ::fidl::internal::MessageTraits<::fidl::Response<::test_unknowninteractions::UnknownInteractionsProtocol::FlexibleTwoWayUnionErr>> final {
 public:
  static constexpr bool kHasPayload = true;
  using Payload = ::test_unknowninteractions::UnknownInteractionsProtocolFlexibleTwoWayUnionErrTopResponse;
};
template <>
class ::fidl::internal::NaturalMessageConverter <::fidl::Response<::test_unknowninteractions::UnknownInteractionsProtocol::FlexibleTwoWayUnionErr>> {
  using DomainObject = ::test_unknowninteractions::UnknownInteractionsProtocolFlexibleTwoWayUnionErrTopResponse;

 public:
  

  static DomainObject IntoDomainObject(const ::fidl::Response<::test_unknowninteractions::UnknownInteractionsProtocol::FlexibleTwoWayUnionErr>& m) {
    if (m.is_error()) {
      return DomainObject{ { .result = ::test_unknowninteractions::UnknownInteractionsProtocolFlexibleTwoWayUnionErrResult::WithErr(m.error_value()) } };
    } else {
        return DomainObject{ { .result = ::test_unknowninteractions::UnknownInteractionsProtocolFlexibleTwoWayUnionErrResult::WithResponse(std::move(m.value())) } };
    }
  }
};


template <>
class ::fidl::Result<::test_unknowninteractions::UnknownInteractionsProtocol::FlexibleTwoWayUnionErr> final : public ::fitx::result<::fidl::AnyErrorIn<::test_unknowninteractions::UnknownInteractionsProtocol::FlexibleTwoWayUnionErr>, ::test_unknowninteractions::UnknownInteractionsProtocolFlexibleTwoWayUnionErrResponse> {
 public:
  using ::fitx::result<::fidl::AnyErrorIn<::test_unknowninteractions::UnknownInteractionsProtocol::FlexibleTwoWayUnionErr>, ::test_unknowninteractions::UnknownInteractionsProtocolFlexibleTwoWayUnionErrResponse>::result;

 protected:
  Result() = default;
};



template <>
class ::fidl::Response<::test_unknowninteractions::UnknownInteractionsProtocol::FlexibleTwoWayTableErr> final : public ::fitx::result<int32_t, ::test_unknowninteractions::UnknownInteractionsProtocolFlexibleTwoWayTableErrResponse>  {
 public:
      using ::fitx::result<int32_t, ::test_unknowninteractions::UnknownInteractionsProtocolFlexibleTwoWayTableErrResponse>::result;
      Response(::fitx::result<int32_t, ::test_unknowninteractions::UnknownInteractionsProtocolFlexibleTwoWayTableErrResponse> v) : result(std::move(v)) {}
      Response() = delete;
};

template <>
struct ::fidl::internal::MessageTraits<::fidl::Response<::test_unknowninteractions::UnknownInteractionsProtocol::FlexibleTwoWayTableErr>> final {
 public:
  static constexpr bool kHasPayload = true;
  using Payload = ::test_unknowninteractions::UnknownInteractionsProtocolFlexibleTwoWayTableErrTopResponse;
};
template <>
class ::fidl::internal::NaturalMessageConverter <::fidl::Response<::test_unknowninteractions::UnknownInteractionsProtocol::FlexibleTwoWayTableErr>> {
  using DomainObject = ::test_unknowninteractions::UnknownInteractionsProtocolFlexibleTwoWayTableErrTopResponse;

 public:
  

  static DomainObject IntoDomainObject(const ::fidl::Response<::test_unknowninteractions::UnknownInteractionsProtocol::FlexibleTwoWayTableErr>& m) {
    if (m.is_error()) {
      return DomainObject{ { .result = ::test_unknowninteractions::UnknownInteractionsProtocolFlexibleTwoWayTableErrResult::WithErr(m.error_value()) } };
    } else {
        return DomainObject{ { .result = ::test_unknowninteractions::UnknownInteractionsProtocolFlexibleTwoWayTableErrResult::WithResponse(std::move(m.value())) } };
    }
  }
};


template <>
class ::fidl::Result<::test_unknowninteractions::UnknownInteractionsProtocol::FlexibleTwoWayTableErr> final : public ::fitx::result<::fidl::AnyErrorIn<::test_unknowninteractions::UnknownInteractionsProtocol::FlexibleTwoWayTableErr>, ::test_unknowninteractions::UnknownInteractionsProtocolFlexibleTwoWayTableErrResponse> {
 public:
  using ::fitx::result<::fidl::AnyErrorIn<::test_unknowninteractions::UnknownInteractionsProtocol::FlexibleTwoWayTableErr>, ::test_unknowninteractions::UnknownInteractionsProtocolFlexibleTwoWayTableErrResponse>::result;

 protected:
  Result() = default;
};


template<>
class ::fidl::internal::NaturalClientImpl<::test_unknowninteractions::UnknownInteractionsProtocol> final : public ::fidl::internal::NaturalClientBase {
 public:
  using NaturalClientBase::NaturalClientBase;
  ::fidl::internal::NaturalThenable<::test_unknowninteractions::UnknownInteractionsProtocol::StrictTwoWay> StrictTwoWay() const;

  ::fidl::internal::NaturalThenable<::test_unknowninteractions::UnknownInteractionsProtocol::StrictTwoWayFields> StrictTwoWayFields() const;

  ::fidl::internal::NaturalThenable<::test_unknowninteractions::UnknownInteractionsProtocol::StrictTwoWayUnion> StrictTwoWayUnion() const;

  ::fidl::internal::NaturalThenable<::test_unknowninteractions::UnknownInteractionsProtocol::StrictTwoWayTable> StrictTwoWayTable() const;

  ::fidl::internal::NaturalThenable<::test_unknowninteractions::UnknownInteractionsProtocol::StrictTwoWayErr> StrictTwoWayErr() const;

  ::fidl::internal::NaturalThenable<::test_unknowninteractions::UnknownInteractionsProtocol::StrictTwoWayFieldsErr> StrictTwoWayFieldsErr() const;

  ::fidl::internal::NaturalThenable<::test_unknowninteractions::UnknownInteractionsProtocol::StrictTwoWayUnionErr> StrictTwoWayUnionErr() const;

  ::fidl::internal::NaturalThenable<::test_unknowninteractions::UnknownInteractionsProtocol::StrictTwoWayTableErr> StrictTwoWayTableErr() const;

  ::fidl::internal::NaturalThenable<::test_unknowninteractions::UnknownInteractionsProtocol::FlexibleTwoWay> FlexibleTwoWay() const;

  ::fidl::internal::NaturalThenable<::test_unknowninteractions::UnknownInteractionsProtocol::FlexibleTwoWayFields> FlexibleTwoWayFields() const;

  ::fidl::internal::NaturalThenable<::test_unknowninteractions::UnknownInteractionsProtocol::FlexibleTwoWayUnion> FlexibleTwoWayUnion() const;

  ::fidl::internal::NaturalThenable<::test_unknowninteractions::UnknownInteractionsProtocol::FlexibleTwoWayTable> FlexibleTwoWayTable() const;

  ::fidl::internal::NaturalThenable<::test_unknowninteractions::UnknownInteractionsProtocol::FlexibleTwoWayErr> FlexibleTwoWayErr() const;

  ::fidl::internal::NaturalThenable<::test_unknowninteractions::UnknownInteractionsProtocol::FlexibleTwoWayFieldsErr> FlexibleTwoWayFieldsErr() const;

  ::fidl::internal::NaturalThenable<::test_unknowninteractions::UnknownInteractionsProtocol::FlexibleTwoWayUnionErr> FlexibleTwoWayUnionErr() const;

  ::fidl::internal::NaturalThenable<::test_unknowninteractions::UnknownInteractionsProtocol::FlexibleTwoWayTableErr> FlexibleTwoWayTableErr() const;

  ::fitx::result<::fidl::Error> StrictOneWay() const;

  ::fitx::result<::fidl::Error> FlexibleOneWay() const;

};namespace test_unknowninteractions {

#endif  // __Fuchsia__

}  // namespace test_unknowninteractions

#ifdef __Fuchsia__


template <>
class ::fidl::internal::NaturalSyncClientImpl<::test_unknowninteractions::UnknownInteractionsProtocol> final
    : public ::fidl::internal::SyncEndpointManagedVeneer<::fidl::internal::NaturalSyncClientImpl<::test_unknowninteractions::UnknownInteractionsProtocol>> {
 public:
  
    
    ::fidl::Result<::test_unknowninteractions::UnknownInteractionsProtocol::StrictTwoWay> StrictTwoWay();

  
    
    ::fidl::Result<::test_unknowninteractions::UnknownInteractionsProtocol::StrictTwoWayFields> StrictTwoWayFields();

  
    
    ::fidl::Result<::test_unknowninteractions::UnknownInteractionsProtocol::StrictTwoWayUnion> StrictTwoWayUnion();

  
    
    ::fidl::Result<::test_unknowninteractions::UnknownInteractionsProtocol::StrictTwoWayTable> StrictTwoWayTable();

  
    
    ::fidl::Result<::test_unknowninteractions::UnknownInteractionsProtocol::StrictTwoWayErr> StrictTwoWayErr();

  
    
    ::fidl::Result<::test_unknowninteractions::UnknownInteractionsProtocol::StrictTwoWayFieldsErr> StrictTwoWayFieldsErr();

  
    
    ::fidl::Result<::test_unknowninteractions::UnknownInteractionsProtocol::StrictTwoWayUnionErr> StrictTwoWayUnionErr();

  
    
    ::fidl::Result<::test_unknowninteractions::UnknownInteractionsProtocol::StrictTwoWayTableErr> StrictTwoWayTableErr();

  
    
    ::fidl::Result<::test_unknowninteractions::UnknownInteractionsProtocol::FlexibleTwoWay> FlexibleTwoWay();

  
    
    ::fidl::Result<::test_unknowninteractions::UnknownInteractionsProtocol::FlexibleTwoWayFields> FlexibleTwoWayFields();

  
    
    ::fidl::Result<::test_unknowninteractions::UnknownInteractionsProtocol::FlexibleTwoWayUnion> FlexibleTwoWayUnion();

  
    
    ::fidl::Result<::test_unknowninteractions::UnknownInteractionsProtocol::FlexibleTwoWayTable> FlexibleTwoWayTable();

  
    
    ::fidl::Result<::test_unknowninteractions::UnknownInteractionsProtocol::FlexibleTwoWayErr> FlexibleTwoWayErr();

  
    
    ::fidl::Result<::test_unknowninteractions::UnknownInteractionsProtocol::FlexibleTwoWayFieldsErr> FlexibleTwoWayFieldsErr();

  
    
    ::fidl::Result<::test_unknowninteractions::UnknownInteractionsProtocol::FlexibleTwoWayUnionErr> FlexibleTwoWayUnionErr();

  
    
    ::fidl::Result<::test_unknowninteractions::UnknownInteractionsProtocol::FlexibleTwoWayTableErr> FlexibleTwoWayTableErr();

  

  
    
    ::fitx::result<::fidl::Error> StrictOneWay();

  
    
    ::fitx::result<::fidl::Error> FlexibleOneWay();

  

 private:
  ::fidl::UnownedClientEnd<::test_unknowninteractions::UnknownInteractionsProtocol> _client_end() const {
    return ::fidl::UnownedClientEnd<::test_unknowninteractions::UnknownInteractionsProtocol>(
      _transport().get<::fidl::internal::ChannelTransport>());
  }
};

#endif  // __Fuchsia__



#ifdef __Fuchsia__

template<>
class ::fidl::internal::NaturalEventHandlerInterface<::test_unknowninteractions::UnknownInteractionsProtocol> : public ::fidl::internal::BaseEventHandlerInterface, public ::fidl::UnknownEventHandler<::test_unknowninteractions::UnknownInteractionsProtocol> {
 public:
  NaturalEventHandlerInterface() = default;
  virtual ~NaturalEventHandlerInterface() = default;
    virtual void StrictEvent(::fidl::Event<::test_unknowninteractions::UnknownInteractionsProtocol::StrictEvent>&) = 0;
    virtual void StrictEventFields(::fidl::Event<::test_unknowninteractions::UnknownInteractionsProtocol::StrictEventFields>&) = 0;
    virtual void StrictEventUnion(::fidl::Event<::test_unknowninteractions::UnknownInteractionsProtocol::StrictEventUnion>&) = 0;
    virtual void StrictEventTable(::fidl::Event<::test_unknowninteractions::UnknownInteractionsProtocol::StrictEventTable>&) = 0;
    virtual void StrictEventErr(::fidl::Event<::test_unknowninteractions::UnknownInteractionsProtocol::StrictEventErr>&) = 0;
    virtual void StrictEventFieldsErr(::fidl::Event<::test_unknowninteractions::UnknownInteractionsProtocol::StrictEventFieldsErr>&) = 0;
    virtual void StrictEventUnionErr(::fidl::Event<::test_unknowninteractions::UnknownInteractionsProtocol::StrictEventUnionErr>&) = 0;
    virtual void StrictEventTableErr(::fidl::Event<::test_unknowninteractions::UnknownInteractionsProtocol::StrictEventTableErr>&) = 0;
    virtual void FlexibleEvent(::fidl::Event<::test_unknowninteractions::UnknownInteractionsProtocol::FlexibleEvent>&) = 0;
    virtual void FlexibleEventFields(::fidl::Event<::test_unknowninteractions::UnknownInteractionsProtocol::FlexibleEventFields>&) = 0;
    virtual void FlexibleEventUnion(::fidl::Event<::test_unknowninteractions::UnknownInteractionsProtocol::FlexibleEventUnion>&) = 0;
    virtual void FlexibleEventTable(::fidl::Event<::test_unknowninteractions::UnknownInteractionsProtocol::FlexibleEventTable>&) = 0;
    virtual void FlexibleEventErr(::fidl::Event<::test_unknowninteractions::UnknownInteractionsProtocol::FlexibleEventErr>&) = 0;
    virtual void FlexibleEventFieldsErr(::fidl::Event<::test_unknowninteractions::UnknownInteractionsProtocol::FlexibleEventFieldsErr>&) = 0;
    virtual void FlexibleEventUnionErr(::fidl::Event<::test_unknowninteractions::UnknownInteractionsProtocol::FlexibleEventUnionErr>&) = 0;
    virtual void FlexibleEventTableErr(::fidl::Event<::test_unknowninteractions::UnknownInteractionsProtocol::FlexibleEventTableErr>&) = 0;
};

template<>
class ::fidl::AsyncEventHandler<::test_unknowninteractions::UnknownInteractionsProtocol>
    : public ::fidl::internal::NaturalEventHandlerInterface<::test_unknowninteractions::UnknownInteractionsProtocol>, public ::fidl::internal::AsyncEventHandler {
 public:
  AsyncEventHandler() = default;
    void StrictEvent(::fidl::Event<::test_unknowninteractions::UnknownInteractionsProtocol::StrictEvent>&) override {}
    void StrictEventFields(::fidl::Event<::test_unknowninteractions::UnknownInteractionsProtocol::StrictEventFields>&) override {}
    void StrictEventUnion(::fidl::Event<::test_unknowninteractions::UnknownInteractionsProtocol::StrictEventUnion>&) override {}
    void StrictEventTable(::fidl::Event<::test_unknowninteractions::UnknownInteractionsProtocol::StrictEventTable>&) override {}
    void StrictEventErr(::fidl::Event<::test_unknowninteractions::UnknownInteractionsProtocol::StrictEventErr>&) override {}
    void StrictEventFieldsErr(::fidl::Event<::test_unknowninteractions::UnknownInteractionsProtocol::StrictEventFieldsErr>&) override {}
    void StrictEventUnionErr(::fidl::Event<::test_unknowninteractions::UnknownInteractionsProtocol::StrictEventUnionErr>&) override {}
    void StrictEventTableErr(::fidl::Event<::test_unknowninteractions::UnknownInteractionsProtocol::StrictEventTableErr>&) override {}
    void FlexibleEvent(::fidl::Event<::test_unknowninteractions::UnknownInteractionsProtocol::FlexibleEvent>&) override {}
    void FlexibleEventFields(::fidl::Event<::test_unknowninteractions::UnknownInteractionsProtocol::FlexibleEventFields>&) override {}
    void FlexibleEventUnion(::fidl::Event<::test_unknowninteractions::UnknownInteractionsProtocol::FlexibleEventUnion>&) override {}
    void FlexibleEventTable(::fidl::Event<::test_unknowninteractions::UnknownInteractionsProtocol::FlexibleEventTable>&) override {}
    void FlexibleEventErr(::fidl::Event<::test_unknowninteractions::UnknownInteractionsProtocol::FlexibleEventErr>&) override {}
    void FlexibleEventFieldsErr(::fidl::Event<::test_unknowninteractions::UnknownInteractionsProtocol::FlexibleEventFieldsErr>&) override {}
    void FlexibleEventUnionErr(::fidl::Event<::test_unknowninteractions::UnknownInteractionsProtocol::FlexibleEventUnionErr>&) override {}
    void FlexibleEventTableErr(::fidl::Event<::test_unknowninteractions::UnknownInteractionsProtocol::FlexibleEventTableErr>&) override {}
};


  template<>
  class ::fidl::SyncEventHandler<::test_unknowninteractions::UnknownInteractionsProtocol>
      : public ::fidl::internal::NaturalEventHandlerInterface<::test_unknowninteractions::UnknownInteractionsProtocol>, public ::fidl::internal::SyncEventHandler {
   public:
    SyncEventHandler() = default;

    // Handle all possible events defined in this protocol.
    // Blocks to consume exactly one message from the channel, then call the corresponding virtual
    // method.
    ::fidl::Status HandleOneEvent(
        ::fidl::UnownedClientEnd<::test_unknowninteractions::UnknownInteractionsProtocol> client_end);
  };

template <>
class ::fidl::internal::NaturalEventDispatcher<::test_unknowninteractions::UnknownInteractionsProtocol> final :
    public ::fidl::internal::IncomingEventDispatcher<::fidl::internal::NaturalEventHandlerInterface<::test_unknowninteractions::UnknownInteractionsProtocol>> {
 public:
  explicit NaturalEventDispatcher(::fidl::internal::NaturalEventHandlerInterface<::test_unknowninteractions::UnknownInteractionsProtocol>* event_handler)
      : IncomingEventDispatcher(event_handler) {}
    ::fidl::Status DispatchEvent(
        ::fidl::IncomingHeaderAndMessage& msg,
        internal::MessageStorageViewBase* storage_view) override;
};

#endif  // __Fuchsia__




#ifdef __Fuchsia__
template<>
class ::fidl::internal::NaturalWeakEventSender<::test_unknowninteractions::UnknownInteractionsProtocol> : public ::fidl::internal::WeakEventSenderBase {
 public:
  using WeakEventSenderBase::WeakEventSenderBase;

    ::fitx::result<::fidl::Error> StrictEvent();

  
    ::fitx::result<::fidl::Error> StrictEventFields(const ::fidl::Event<::test_unknowninteractions::UnknownInteractionsProtocol::StrictEventFields>& payload);

  
    ::fitx::result<::fidl::Error> StrictEventUnion(const ::fidl::Event<::test_unknowninteractions::UnknownInteractionsProtocol::StrictEventUnion>& payload);

  
    ::fitx::result<::fidl::Error> StrictEventTable(const ::fidl::Event<::test_unknowninteractions::UnknownInteractionsProtocol::StrictEventTable>& payload);

  
    ::fitx::result<::fidl::Error> StrictEventErr(const ::fidl::Event<::test_unknowninteractions::UnknownInteractionsProtocol::StrictEventErr>& payload);

  
    ::fitx::result<::fidl::Error> StrictEventFieldsErr(const ::fidl::Event<::test_unknowninteractions::UnknownInteractionsProtocol::StrictEventFieldsErr>& payload);

  
    ::fitx::result<::fidl::Error> StrictEventUnionErr(const ::fidl::Event<::test_unknowninteractions::UnknownInteractionsProtocol::StrictEventUnionErr>& payload);

  
    ::fitx::result<::fidl::Error> StrictEventTableErr(const ::fidl::Event<::test_unknowninteractions::UnknownInteractionsProtocol::StrictEventTableErr>& payload);

  
    ::fitx::result<::fidl::Error> FlexibleEvent();

  
    ::fitx::result<::fidl::Error> FlexibleEventFields(const ::fidl::Event<::test_unknowninteractions::UnknownInteractionsProtocol::FlexibleEventFields>& payload);

  
    ::fitx::result<::fidl::Error> FlexibleEventUnion(const ::fidl::Event<::test_unknowninteractions::UnknownInteractionsProtocol::FlexibleEventUnion>& payload);

  
    ::fitx::result<::fidl::Error> FlexibleEventTable(const ::fidl::Event<::test_unknowninteractions::UnknownInteractionsProtocol::FlexibleEventTable>& payload);

  
    ::fitx::result<::fidl::Error> FlexibleEventErr(const ::fidl::Event<::test_unknowninteractions::UnknownInteractionsProtocol::FlexibleEventErr>& payload);

  
    ::fitx::result<::fidl::Error> FlexibleEventFieldsErr(const ::fidl::Event<::test_unknowninteractions::UnknownInteractionsProtocol::FlexibleEventFieldsErr>& payload);

  
    ::fitx::result<::fidl::Error> FlexibleEventUnionErr(const ::fidl::Event<::test_unknowninteractions::UnknownInteractionsProtocol::FlexibleEventUnionErr>& payload);

  
    ::fitx::result<::fidl::Error> FlexibleEventTableErr(const ::fidl::Event<::test_unknowninteractions::UnknownInteractionsProtocol::FlexibleEventTableErr>& payload);

  
};

template<>
class ::fidl::internal::NaturalEventSender<::test_unknowninteractions::UnknownInteractionsProtocol>
    : public ::fidl::internal::SyncEndpointManagedVeneer<::fidl::internal::NaturalEventSender<::test_unknowninteractions::UnknownInteractionsProtocol>> {
 public:
  using SyncEndpointManagedVeneer::SyncEndpointManagedVeneer;

    ::fitx::result<::fidl::Error> StrictEvent();

  
    ::fitx::result<::fidl::Error> StrictEventFields(const ::fidl::Event<::test_unknowninteractions::UnknownInteractionsProtocol::StrictEventFields>& payload);

  
    ::fitx::result<::fidl::Error> StrictEventUnion(const ::fidl::Event<::test_unknowninteractions::UnknownInteractionsProtocol::StrictEventUnion>& payload);

  
    ::fitx::result<::fidl::Error> StrictEventTable(const ::fidl::Event<::test_unknowninteractions::UnknownInteractionsProtocol::StrictEventTable>& payload);

  
    ::fitx::result<::fidl::Error> StrictEventErr(const ::fidl::Event<::test_unknowninteractions::UnknownInteractionsProtocol::StrictEventErr>& payload);

  
    ::fitx::result<::fidl::Error> StrictEventFieldsErr(const ::fidl::Event<::test_unknowninteractions::UnknownInteractionsProtocol::StrictEventFieldsErr>& payload);

  
    ::fitx::result<::fidl::Error> StrictEventUnionErr(const ::fidl::Event<::test_unknowninteractions::UnknownInteractionsProtocol::StrictEventUnionErr>& payload);

  
    ::fitx::result<::fidl::Error> StrictEventTableErr(const ::fidl::Event<::test_unknowninteractions::UnknownInteractionsProtocol::StrictEventTableErr>& payload);

  
    ::fitx::result<::fidl::Error> FlexibleEvent();

  
    ::fitx::result<::fidl::Error> FlexibleEventFields(const ::fidl::Event<::test_unknowninteractions::UnknownInteractionsProtocol::FlexibleEventFields>& payload);

  
    ::fitx::result<::fidl::Error> FlexibleEventUnion(const ::fidl::Event<::test_unknowninteractions::UnknownInteractionsProtocol::FlexibleEventUnion>& payload);

  
    ::fitx::result<::fidl::Error> FlexibleEventTable(const ::fidl::Event<::test_unknowninteractions::UnknownInteractionsProtocol::FlexibleEventTable>& payload);

  
    ::fitx::result<::fidl::Error> FlexibleEventErr(const ::fidl::Event<::test_unknowninteractions::UnknownInteractionsProtocol::FlexibleEventErr>& payload);

  
    ::fitx::result<::fidl::Error> FlexibleEventFieldsErr(const ::fidl::Event<::test_unknowninteractions::UnknownInteractionsProtocol::FlexibleEventFieldsErr>& payload);

  
    ::fitx::result<::fidl::Error> FlexibleEventUnionErr(const ::fidl::Event<::test_unknowninteractions::UnknownInteractionsProtocol::FlexibleEventUnionErr>& payload);

  
    ::fitx::result<::fidl::Error> FlexibleEventTableErr(const ::fidl::Event<::test_unknowninteractions::UnknownInteractionsProtocol::FlexibleEventTableErr>& payload);

  
};

#endif  // __Fuchsia__


#ifdef __Fuchsia__



template <>
class ::fidl::Request<::test_unknowninteractions::UnknownInteractionsProtocol::StrictOneWay> final {
 public:
};

template <>
struct ::fidl::internal::MessageTraits<::fidl::Request<::test_unknowninteractions::UnknownInteractionsProtocol::StrictOneWay>> final {
 public:
  static constexpr bool kHasPayload = false;
};

#endif  // __Fuchsia__

#ifdef __Fuchsia__



template <>
class ::fidl::Request<::test_unknowninteractions::UnknownInteractionsProtocol::FlexibleOneWay> final {
 public:
};

template <>
struct ::fidl::internal::MessageTraits<::fidl::Request<::test_unknowninteractions::UnknownInteractionsProtocol::FlexibleOneWay>> final {
 public:
  static constexpr bool kHasPayload = false;
};

#endif  // __Fuchsia__

#ifdef __Fuchsia__



template <>
class ::fidl::Request<::test_unknowninteractions::UnknownInteractionsProtocol::StrictTwoWay> final {
 public:
};

template <>
struct ::fidl::internal::MessageTraits<::fidl::Request<::test_unknowninteractions::UnknownInteractionsProtocol::StrictTwoWay>> final {
 public:
  static constexpr bool kHasPayload = false;
};

#endif  // __Fuchsia__

#ifdef __Fuchsia__



template <>
class ::fidl::Request<::test_unknowninteractions::UnknownInteractionsProtocol::StrictTwoWayFields> final {
 public:
};

template <>
struct ::fidl::internal::MessageTraits<::fidl::Request<::test_unknowninteractions::UnknownInteractionsProtocol::StrictTwoWayFields>> final {
 public:
  static constexpr bool kHasPayload = false;
};

#endif  // __Fuchsia__

#ifdef __Fuchsia__



template <>
class ::fidl::Request<::test_unknowninteractions::UnknownInteractionsProtocol::StrictTwoWayUnion> final {
 public:
};

template <>
struct ::fidl::internal::MessageTraits<::fidl::Request<::test_unknowninteractions::UnknownInteractionsProtocol::StrictTwoWayUnion>> final {
 public:
  static constexpr bool kHasPayload = false;
};

#endif  // __Fuchsia__

#ifdef __Fuchsia__



template <>
class ::fidl::Request<::test_unknowninteractions::UnknownInteractionsProtocol::StrictTwoWayTable> final {
 public:
};

template <>
struct ::fidl::internal::MessageTraits<::fidl::Request<::test_unknowninteractions::UnknownInteractionsProtocol::StrictTwoWayTable>> final {
 public:
  static constexpr bool kHasPayload = false;
};

#endif  // __Fuchsia__

#ifdef __Fuchsia__



template <>
class ::fidl::Request<::test_unknowninteractions::UnknownInteractionsProtocol::StrictTwoWayErr> final {
 public:
};

template <>
struct ::fidl::internal::MessageTraits<::fidl::Request<::test_unknowninteractions::UnknownInteractionsProtocol::StrictTwoWayErr>> final {
 public:
  static constexpr bool kHasPayload = false;
};

#endif  // __Fuchsia__

#ifdef __Fuchsia__



template <>
class ::fidl::Request<::test_unknowninteractions::UnknownInteractionsProtocol::StrictTwoWayFieldsErr> final {
 public:
};

template <>
struct ::fidl::internal::MessageTraits<::fidl::Request<::test_unknowninteractions::UnknownInteractionsProtocol::StrictTwoWayFieldsErr>> final {
 public:
  static constexpr bool kHasPayload = false;
};

#endif  // __Fuchsia__

#ifdef __Fuchsia__



template <>
class ::fidl::Request<::test_unknowninteractions::UnknownInteractionsProtocol::StrictTwoWayUnionErr> final {
 public:
};

template <>
struct ::fidl::internal::MessageTraits<::fidl::Request<::test_unknowninteractions::UnknownInteractionsProtocol::StrictTwoWayUnionErr>> final {
 public:
  static constexpr bool kHasPayload = false;
};

#endif  // __Fuchsia__

#ifdef __Fuchsia__



template <>
class ::fidl::Request<::test_unknowninteractions::UnknownInteractionsProtocol::StrictTwoWayTableErr> final {
 public:
};

template <>
struct ::fidl::internal::MessageTraits<::fidl::Request<::test_unknowninteractions::UnknownInteractionsProtocol::StrictTwoWayTableErr>> final {
 public:
  static constexpr bool kHasPayload = false;
};

#endif  // __Fuchsia__

#ifdef __Fuchsia__



template <>
class ::fidl::Request<::test_unknowninteractions::UnknownInteractionsProtocol::FlexibleTwoWay> final {
 public:
};

template <>
struct ::fidl::internal::MessageTraits<::fidl::Request<::test_unknowninteractions::UnknownInteractionsProtocol::FlexibleTwoWay>> final {
 public:
  static constexpr bool kHasPayload = false;
};

#endif  // __Fuchsia__

#ifdef __Fuchsia__



template <>
class ::fidl::Request<::test_unknowninteractions::UnknownInteractionsProtocol::FlexibleTwoWayFields> final {
 public:
};

template <>
struct ::fidl::internal::MessageTraits<::fidl::Request<::test_unknowninteractions::UnknownInteractionsProtocol::FlexibleTwoWayFields>> final {
 public:
  static constexpr bool kHasPayload = false;
};

#endif  // __Fuchsia__

#ifdef __Fuchsia__



template <>
class ::fidl::Request<::test_unknowninteractions::UnknownInteractionsProtocol::FlexibleTwoWayUnion> final {
 public:
};

template <>
struct ::fidl::internal::MessageTraits<::fidl::Request<::test_unknowninteractions::UnknownInteractionsProtocol::FlexibleTwoWayUnion>> final {
 public:
  static constexpr bool kHasPayload = false;
};

#endif  // __Fuchsia__

#ifdef __Fuchsia__



template <>
class ::fidl::Request<::test_unknowninteractions::UnknownInteractionsProtocol::FlexibleTwoWayTable> final {
 public:
};

template <>
struct ::fidl::internal::MessageTraits<::fidl::Request<::test_unknowninteractions::UnknownInteractionsProtocol::FlexibleTwoWayTable>> final {
 public:
  static constexpr bool kHasPayload = false;
};

#endif  // __Fuchsia__

#ifdef __Fuchsia__



template <>
class ::fidl::Request<::test_unknowninteractions::UnknownInteractionsProtocol::FlexibleTwoWayErr> final {
 public:
};

template <>
struct ::fidl::internal::MessageTraits<::fidl::Request<::test_unknowninteractions::UnknownInteractionsProtocol::FlexibleTwoWayErr>> final {
 public:
  static constexpr bool kHasPayload = false;
};

#endif  // __Fuchsia__

#ifdef __Fuchsia__



template <>
class ::fidl::Request<::test_unknowninteractions::UnknownInteractionsProtocol::FlexibleTwoWayFieldsErr> final {
 public:
};

template <>
struct ::fidl::internal::MessageTraits<::fidl::Request<::test_unknowninteractions::UnknownInteractionsProtocol::FlexibleTwoWayFieldsErr>> final {
 public:
  static constexpr bool kHasPayload = false;
};

#endif  // __Fuchsia__

#ifdef __Fuchsia__



template <>
class ::fidl::Request<::test_unknowninteractions::UnknownInteractionsProtocol::FlexibleTwoWayUnionErr> final {
 public:
};

template <>
struct ::fidl::internal::MessageTraits<::fidl::Request<::test_unknowninteractions::UnknownInteractionsProtocol::FlexibleTwoWayUnionErr>> final {
 public:
  static constexpr bool kHasPayload = false;
};

#endif  // __Fuchsia__

#ifdef __Fuchsia__



template <>
class ::fidl::Request<::test_unknowninteractions::UnknownInteractionsProtocol::FlexibleTwoWayTableErr> final {
 public:
};

template <>
struct ::fidl::internal::MessageTraits<::fidl::Request<::test_unknowninteractions::UnknownInteractionsProtocol::FlexibleTwoWayTableErr>> final {
 public:
  static constexpr bool kHasPayload = false;
};

#endif  // __Fuchsia__



template<>
class ::fidl::internal::NaturalCompleterBase<::test_unknowninteractions::UnknownInteractionsProtocol::StrictTwoWay> : public ::fidl::CompleterBase {
 public:
  void Reply();

 protected:
  using ::fidl::CompleterBase::CompleterBase;
};


template<>
class ::fidl::internal::NaturalCompleterBase<::test_unknowninteractions::UnknownInteractionsProtocol::StrictTwoWayFields> : public ::fidl::CompleterBase {
 public:
  void Reply(const ::fidl::Response<::test_unknowninteractions::UnknownInteractionsProtocol::StrictTwoWayFields>& response);

 protected:
  using ::fidl::CompleterBase::CompleterBase;
};


template<>
class ::fidl::internal::NaturalCompleterBase<::test_unknowninteractions::UnknownInteractionsProtocol::StrictTwoWayUnion> : public ::fidl::CompleterBase {
 public:
  void Reply(const ::fidl::Response<::test_unknowninteractions::UnknownInteractionsProtocol::StrictTwoWayUnion>& response);

 protected:
  using ::fidl::CompleterBase::CompleterBase;
};


template<>
class ::fidl::internal::NaturalCompleterBase<::test_unknowninteractions::UnknownInteractionsProtocol::StrictTwoWayTable> : public ::fidl::CompleterBase {
 public:
  void Reply(const ::fidl::Response<::test_unknowninteractions::UnknownInteractionsProtocol::StrictTwoWayTable>& response);

 protected:
  using ::fidl::CompleterBase::CompleterBase;
};


template<>
class ::fidl::internal::NaturalCompleterBase<::test_unknowninteractions::UnknownInteractionsProtocol::StrictTwoWayErr> : public ::fidl::CompleterBase {
 public:
  void Reply(const ::fidl::Response<::test_unknowninteractions::UnknownInteractionsProtocol::StrictTwoWayErr>& response);

 protected:
  using ::fidl::CompleterBase::CompleterBase;
};


template<>
class ::fidl::internal::NaturalCompleterBase<::test_unknowninteractions::UnknownInteractionsProtocol::StrictTwoWayFieldsErr> : public ::fidl::CompleterBase {
 public:
  void Reply(const ::fidl::Response<::test_unknowninteractions::UnknownInteractionsProtocol::StrictTwoWayFieldsErr>& response);

 protected:
  using ::fidl::CompleterBase::CompleterBase;
};


template<>
class ::fidl::internal::NaturalCompleterBase<::test_unknowninteractions::UnknownInteractionsProtocol::StrictTwoWayUnionErr> : public ::fidl::CompleterBase {
 public:
  void Reply(const ::fidl::Response<::test_unknowninteractions::UnknownInteractionsProtocol::StrictTwoWayUnionErr>& response);

 protected:
  using ::fidl::CompleterBase::CompleterBase;
};


template<>
class ::fidl::internal::NaturalCompleterBase<::test_unknowninteractions::UnknownInteractionsProtocol::StrictTwoWayTableErr> : public ::fidl::CompleterBase {
 public:
  void Reply(const ::fidl::Response<::test_unknowninteractions::UnknownInteractionsProtocol::StrictTwoWayTableErr>& response);

 protected:
  using ::fidl::CompleterBase::CompleterBase;
};


template<>
class ::fidl::internal::NaturalCompleterBase<::test_unknowninteractions::UnknownInteractionsProtocol::FlexibleTwoWay> : public ::fidl::CompleterBase {
 public:
  void Reply();

 protected:
  using ::fidl::CompleterBase::CompleterBase;
};


template<>
class ::fidl::internal::NaturalCompleterBase<::test_unknowninteractions::UnknownInteractionsProtocol::FlexibleTwoWayFields> : public ::fidl::CompleterBase {
 public:
  void Reply(const ::fidl::Response<::test_unknowninteractions::UnknownInteractionsProtocol::FlexibleTwoWayFields>& response);

 protected:
  using ::fidl::CompleterBase::CompleterBase;
};


template<>
class ::fidl::internal::NaturalCompleterBase<::test_unknowninteractions::UnknownInteractionsProtocol::FlexibleTwoWayUnion> : public ::fidl::CompleterBase {
 public:
  void Reply(const ::fidl::Response<::test_unknowninteractions::UnknownInteractionsProtocol::FlexibleTwoWayUnion>& response);

 protected:
  using ::fidl::CompleterBase::CompleterBase;
};


template<>
class ::fidl::internal::NaturalCompleterBase<::test_unknowninteractions::UnknownInteractionsProtocol::FlexibleTwoWayTable> : public ::fidl::CompleterBase {
 public:
  void Reply(const ::fidl::Response<::test_unknowninteractions::UnknownInteractionsProtocol::FlexibleTwoWayTable>& response);

 protected:
  using ::fidl::CompleterBase::CompleterBase;
};


template<>
class ::fidl::internal::NaturalCompleterBase<::test_unknowninteractions::UnknownInteractionsProtocol::FlexibleTwoWayErr> : public ::fidl::CompleterBase {
 public:
  void Reply(const ::fidl::Response<::test_unknowninteractions::UnknownInteractionsProtocol::FlexibleTwoWayErr>& response);

 protected:
  using ::fidl::CompleterBase::CompleterBase;
};


template<>
class ::fidl::internal::NaturalCompleterBase<::test_unknowninteractions::UnknownInteractionsProtocol::FlexibleTwoWayFieldsErr> : public ::fidl::CompleterBase {
 public:
  void Reply(const ::fidl::Response<::test_unknowninteractions::UnknownInteractionsProtocol::FlexibleTwoWayFieldsErr>& response);

 protected:
  using ::fidl::CompleterBase::CompleterBase;
};


template<>
class ::fidl::internal::NaturalCompleterBase<::test_unknowninteractions::UnknownInteractionsProtocol::FlexibleTwoWayUnionErr> : public ::fidl::CompleterBase {
 public:
  void Reply(const ::fidl::Response<::test_unknowninteractions::UnknownInteractionsProtocol::FlexibleTwoWayUnionErr>& response);

 protected:
  using ::fidl::CompleterBase::CompleterBase;
};


template<>
class ::fidl::internal::NaturalCompleterBase<::test_unknowninteractions::UnknownInteractionsProtocol::FlexibleTwoWayTableErr> : public ::fidl::CompleterBase {
 public:
  void Reply(const ::fidl::Response<::test_unknowninteractions::UnknownInteractionsProtocol::FlexibleTwoWayTableErr>& response);

 protected:
  using ::fidl::CompleterBase::CompleterBase;
};

template<>
class ::fidl::Server<::test_unknowninteractions::UnknownInteractionsProtocol> : public ::fidl::internal::IncomingMessageDispatcher, public ::fidl::UnknownMethodHandler<::test_unknowninteractions::UnknownInteractionsProtocol> {
  public:
  Server() = default;
  virtual ~Server() = default;

  // The FIDL protocol type that is implemented by this server.
  using _EnclosingProtocol = ::test_unknowninteractions::UnknownInteractionsProtocol;


  using StrictOneWayRequest = ::fidl::Request<::test_unknowninteractions::UnknownInteractionsProtocol::StrictOneWay>;
  using StrictOneWayCompleter = ::fidl::internal::NaturalCompleter<::test_unknowninteractions::UnknownInteractionsProtocol::StrictOneWay>;

  
  virtual void StrictOneWay(StrictOneWayRequest& request, StrictOneWayCompleter::Sync& completer
  )= 0;

  using FlexibleOneWayRequest = ::fidl::Request<::test_unknowninteractions::UnknownInteractionsProtocol::FlexibleOneWay>;
  using FlexibleOneWayCompleter = ::fidl::internal::NaturalCompleter<::test_unknowninteractions::UnknownInteractionsProtocol::FlexibleOneWay>;

  
  virtual void FlexibleOneWay(FlexibleOneWayRequest& request, FlexibleOneWayCompleter::Sync& completer
  )= 0;

  using StrictTwoWayRequest = ::fidl::Request<::test_unknowninteractions::UnknownInteractionsProtocol::StrictTwoWay>;
  using StrictTwoWayCompleter = ::fidl::internal::NaturalCompleter<::test_unknowninteractions::UnknownInteractionsProtocol::StrictTwoWay>;

  
  virtual void StrictTwoWay(StrictTwoWayRequest& request, StrictTwoWayCompleter::Sync& completer
  )= 0;

  using StrictTwoWayFieldsRequest = ::fidl::Request<::test_unknowninteractions::UnknownInteractionsProtocol::StrictTwoWayFields>;
  using StrictTwoWayFieldsCompleter = ::fidl::internal::NaturalCompleter<::test_unknowninteractions::UnknownInteractionsProtocol::StrictTwoWayFields>;

  
  virtual void StrictTwoWayFields(StrictTwoWayFieldsRequest& request, StrictTwoWayFieldsCompleter::Sync& completer
  )= 0;

  using StrictTwoWayUnionRequest = ::fidl::Request<::test_unknowninteractions::UnknownInteractionsProtocol::StrictTwoWayUnion>;
  using StrictTwoWayUnionCompleter = ::fidl::internal::NaturalCompleter<::test_unknowninteractions::UnknownInteractionsProtocol::StrictTwoWayUnion>;

  
  virtual void StrictTwoWayUnion(StrictTwoWayUnionRequest& request, StrictTwoWayUnionCompleter::Sync& completer
  )= 0;

  using StrictTwoWayTableRequest = ::fidl::Request<::test_unknowninteractions::UnknownInteractionsProtocol::StrictTwoWayTable>;
  using StrictTwoWayTableCompleter = ::fidl::internal::NaturalCompleter<::test_unknowninteractions::UnknownInteractionsProtocol::StrictTwoWayTable>;

  
  virtual void StrictTwoWayTable(StrictTwoWayTableRequest& request, StrictTwoWayTableCompleter::Sync& completer
  )= 0;

  using StrictTwoWayErrRequest = ::fidl::Request<::test_unknowninteractions::UnknownInteractionsProtocol::StrictTwoWayErr>;
  using StrictTwoWayErrCompleter = ::fidl::internal::NaturalCompleter<::test_unknowninteractions::UnknownInteractionsProtocol::StrictTwoWayErr>;

  
  virtual void StrictTwoWayErr(StrictTwoWayErrRequest& request, StrictTwoWayErrCompleter::Sync& completer
  )= 0;

  using StrictTwoWayFieldsErrRequest = ::fidl::Request<::test_unknowninteractions::UnknownInteractionsProtocol::StrictTwoWayFieldsErr>;
  using StrictTwoWayFieldsErrCompleter = ::fidl::internal::NaturalCompleter<::test_unknowninteractions::UnknownInteractionsProtocol::StrictTwoWayFieldsErr>;

  
  virtual void StrictTwoWayFieldsErr(StrictTwoWayFieldsErrRequest& request, StrictTwoWayFieldsErrCompleter::Sync& completer
  )= 0;

  using StrictTwoWayUnionErrRequest = ::fidl::Request<::test_unknowninteractions::UnknownInteractionsProtocol::StrictTwoWayUnionErr>;
  using StrictTwoWayUnionErrCompleter = ::fidl::internal::NaturalCompleter<::test_unknowninteractions::UnknownInteractionsProtocol::StrictTwoWayUnionErr>;

  
  virtual void StrictTwoWayUnionErr(StrictTwoWayUnionErrRequest& request, StrictTwoWayUnionErrCompleter::Sync& completer
  )= 0;

  using StrictTwoWayTableErrRequest = ::fidl::Request<::test_unknowninteractions::UnknownInteractionsProtocol::StrictTwoWayTableErr>;
  using StrictTwoWayTableErrCompleter = ::fidl::internal::NaturalCompleter<::test_unknowninteractions::UnknownInteractionsProtocol::StrictTwoWayTableErr>;

  
  virtual void StrictTwoWayTableErr(StrictTwoWayTableErrRequest& request, StrictTwoWayTableErrCompleter::Sync& completer
  )= 0;

  using FlexibleTwoWayRequest = ::fidl::Request<::test_unknowninteractions::UnknownInteractionsProtocol::FlexibleTwoWay>;
  using FlexibleTwoWayCompleter = ::fidl::internal::NaturalCompleter<::test_unknowninteractions::UnknownInteractionsProtocol::FlexibleTwoWay>;

  
  virtual void FlexibleTwoWay(FlexibleTwoWayRequest& request, FlexibleTwoWayCompleter::Sync& completer
  )= 0;

  using FlexibleTwoWayFieldsRequest = ::fidl::Request<::test_unknowninteractions::UnknownInteractionsProtocol::FlexibleTwoWayFields>;
  using FlexibleTwoWayFieldsCompleter = ::fidl::internal::NaturalCompleter<::test_unknowninteractions::UnknownInteractionsProtocol::FlexibleTwoWayFields>;

  
  virtual void FlexibleTwoWayFields(FlexibleTwoWayFieldsRequest& request, FlexibleTwoWayFieldsCompleter::Sync& completer
  )= 0;

  using FlexibleTwoWayUnionRequest = ::fidl::Request<::test_unknowninteractions::UnknownInteractionsProtocol::FlexibleTwoWayUnion>;
  using FlexibleTwoWayUnionCompleter = ::fidl::internal::NaturalCompleter<::test_unknowninteractions::UnknownInteractionsProtocol::FlexibleTwoWayUnion>;

  
  virtual void FlexibleTwoWayUnion(FlexibleTwoWayUnionRequest& request, FlexibleTwoWayUnionCompleter::Sync& completer
  )= 0;

  using FlexibleTwoWayTableRequest = ::fidl::Request<::test_unknowninteractions::UnknownInteractionsProtocol::FlexibleTwoWayTable>;
  using FlexibleTwoWayTableCompleter = ::fidl::internal::NaturalCompleter<::test_unknowninteractions::UnknownInteractionsProtocol::FlexibleTwoWayTable>;

  
  virtual void FlexibleTwoWayTable(FlexibleTwoWayTableRequest& request, FlexibleTwoWayTableCompleter::Sync& completer
  )= 0;

  using FlexibleTwoWayErrRequest = ::fidl::Request<::test_unknowninteractions::UnknownInteractionsProtocol::FlexibleTwoWayErr>;
  using FlexibleTwoWayErrCompleter = ::fidl::internal::NaturalCompleter<::test_unknowninteractions::UnknownInteractionsProtocol::FlexibleTwoWayErr>;

  
  virtual void FlexibleTwoWayErr(FlexibleTwoWayErrRequest& request, FlexibleTwoWayErrCompleter::Sync& completer
  )= 0;

  using FlexibleTwoWayFieldsErrRequest = ::fidl::Request<::test_unknowninteractions::UnknownInteractionsProtocol::FlexibleTwoWayFieldsErr>;
  using FlexibleTwoWayFieldsErrCompleter = ::fidl::internal::NaturalCompleter<::test_unknowninteractions::UnknownInteractionsProtocol::FlexibleTwoWayFieldsErr>;

  
  virtual void FlexibleTwoWayFieldsErr(FlexibleTwoWayFieldsErrRequest& request, FlexibleTwoWayFieldsErrCompleter::Sync& completer
  )= 0;

  using FlexibleTwoWayUnionErrRequest = ::fidl::Request<::test_unknowninteractions::UnknownInteractionsProtocol::FlexibleTwoWayUnionErr>;
  using FlexibleTwoWayUnionErrCompleter = ::fidl::internal::NaturalCompleter<::test_unknowninteractions::UnknownInteractionsProtocol::FlexibleTwoWayUnionErr>;

  
  virtual void FlexibleTwoWayUnionErr(FlexibleTwoWayUnionErrRequest& request, FlexibleTwoWayUnionErrCompleter::Sync& completer
  )= 0;

  using FlexibleTwoWayTableErrRequest = ::fidl::Request<::test_unknowninteractions::UnknownInteractionsProtocol::FlexibleTwoWayTableErr>;
  using FlexibleTwoWayTableErrCompleter = ::fidl::internal::NaturalCompleter<::test_unknowninteractions::UnknownInteractionsProtocol::FlexibleTwoWayTableErr>;

  
  virtual void FlexibleTwoWayTableErr(FlexibleTwoWayTableErrRequest& request, FlexibleTwoWayTableErrCompleter::Sync& completer
  )= 0;


  private:
  void dispatch_message(
    ::fidl::IncomingHeaderAndMessage&& msg, ::fidl::Transaction* txn,
    ::fidl::internal::MessageStorageViewBase* storage_view) final;
};

#ifdef __Fuchsia__


template<>
struct ::fidl::internal::NaturalServerDispatcher<::test_unknowninteractions::UnknownInteractionsProtocol> final {
  NaturalServerDispatcher() = delete;
  static void Dispatch(::fidl::Server<::test_unknowninteractions::UnknownInteractionsProtocol>* impl, ::fidl::IncomingHeaderAndMessage&& msg,
                       internal::MessageStorageViewBase* storage_view,
                       ::fidl::Transaction* txn);

 private:
  static const ::fidl::internal::MethodEntry entries_[];
  static const ::fidl::internal::MethodEntry* entries_end_;
  static const ::fidl::internal::UnknownInteractionHandlerEntry unknown_interaction_handler_entry_;

};

#endif  // __Fuchsia__





template<>
struct ::fidl::internal::NaturalMethodTypes<::test_unknowninteractions::UnknownInteractionsAjarProtocol::StrictTwoWay> {
  using Completer = fidl::Completer<::fidl::internal::NaturalCompleterBase<::test_unknowninteractions::UnknownInteractionsAjarProtocol::StrictTwoWay>>;

  using ResultCallback =
      ::fit::callback<void (::fidl::Result<::test_unknowninteractions::UnknownInteractionsAjarProtocol::StrictTwoWay>&)>;

  
    static constexpr bool HasApplicationError = false;
    static constexpr bool HasTransportError = false;
  

  
    static constexpr bool IsAbsentBody = true;
  
};



template<>
struct ::fidl::internal::NaturalMethodTypes<::test_unknowninteractions::UnknownInteractionsAjarProtocol::StrictTwoWayFields> {
  using Completer = fidl::Completer<::fidl::internal::NaturalCompleterBase<::test_unknowninteractions::UnknownInteractionsAjarProtocol::StrictTwoWayFields>>;

  using ResultCallback =
      ::fit::callback<void (::fidl::Result<::test_unknowninteractions::UnknownInteractionsAjarProtocol::StrictTwoWayFields>&)>;

  
    static constexpr bool HasApplicationError = false;
    static constexpr bool HasTransportError = false;
  

  
    static constexpr bool IsAbsentBody = false;
  
};



template<>
struct ::fidl::internal::NaturalMethodTypes<::test_unknowninteractions::UnknownInteractionsAjarProtocol::StrictTwoWayUnion> {
  using Completer = fidl::Completer<::fidl::internal::NaturalCompleterBase<::test_unknowninteractions::UnknownInteractionsAjarProtocol::StrictTwoWayUnion>>;

  using ResultCallback =
      ::fit::callback<void (::fidl::Result<::test_unknowninteractions::UnknownInteractionsAjarProtocol::StrictTwoWayUnion>&)>;

  
    static constexpr bool HasApplicationError = false;
    static constexpr bool HasTransportError = false;
  

  
    static constexpr bool IsAbsentBody = false;
  
};



template<>
struct ::fidl::internal::NaturalMethodTypes<::test_unknowninteractions::UnknownInteractionsAjarProtocol::StrictTwoWayTable> {
  using Completer = fidl::Completer<::fidl::internal::NaturalCompleterBase<::test_unknowninteractions::UnknownInteractionsAjarProtocol::StrictTwoWayTable>>;

  using ResultCallback =
      ::fit::callback<void (::fidl::Result<::test_unknowninteractions::UnknownInteractionsAjarProtocol::StrictTwoWayTable>&)>;

  
    static constexpr bool HasApplicationError = false;
    static constexpr bool HasTransportError = false;
  

  
    static constexpr bool IsAbsentBody = false;
  
};



template<>
struct ::fidl::internal::NaturalMethodTypes<::test_unknowninteractions::UnknownInteractionsAjarProtocol::StrictTwoWayErr> {
  using Completer = fidl::Completer<::fidl::internal::NaturalCompleterBase<::test_unknowninteractions::UnknownInteractionsAjarProtocol::StrictTwoWayErr>>;

  using ResultCallback =
      ::fit::callback<void (::fidl::Result<::test_unknowninteractions::UnknownInteractionsAjarProtocol::StrictTwoWayErr>&)>;

  
    static constexpr bool HasApplicationError = true;
    static constexpr bool HasTransportError = false;
    
      static constexpr bool IsEmptyStructPayload = true;
    
  

  
    static constexpr bool IsAbsentBody = false;
  
};



template<>
struct ::fidl::internal::NaturalMethodTypes<::test_unknowninteractions::UnknownInteractionsAjarProtocol::StrictTwoWayFieldsErr> {
  using Completer = fidl::Completer<::fidl::internal::NaturalCompleterBase<::test_unknowninteractions::UnknownInteractionsAjarProtocol::StrictTwoWayFieldsErr>>;

  using ResultCallback =
      ::fit::callback<void (::fidl::Result<::test_unknowninteractions::UnknownInteractionsAjarProtocol::StrictTwoWayFieldsErr>&)>;

  
    static constexpr bool HasApplicationError = true;
    static constexpr bool HasTransportError = false;
    
      static constexpr bool IsEmptyStructPayload = false;
    
  

  
    static constexpr bool IsAbsentBody = false;
  
};



template<>
struct ::fidl::internal::NaturalMethodTypes<::test_unknowninteractions::UnknownInteractionsAjarProtocol::StrictTwoWayUnionErr> {
  using Completer = fidl::Completer<::fidl::internal::NaturalCompleterBase<::test_unknowninteractions::UnknownInteractionsAjarProtocol::StrictTwoWayUnionErr>>;

  using ResultCallback =
      ::fit::callback<void (::fidl::Result<::test_unknowninteractions::UnknownInteractionsAjarProtocol::StrictTwoWayUnionErr>&)>;

  
    static constexpr bool HasApplicationError = true;
    static constexpr bool HasTransportError = false;
    
      static constexpr bool IsEmptyStructPayload = false;
    
  

  
    static constexpr bool IsAbsentBody = false;
  
};



template<>
struct ::fidl::internal::NaturalMethodTypes<::test_unknowninteractions::UnknownInteractionsAjarProtocol::StrictTwoWayTableErr> {
  using Completer = fidl::Completer<::fidl::internal::NaturalCompleterBase<::test_unknowninteractions::UnknownInteractionsAjarProtocol::StrictTwoWayTableErr>>;

  using ResultCallback =
      ::fit::callback<void (::fidl::Result<::test_unknowninteractions::UnknownInteractionsAjarProtocol::StrictTwoWayTableErr>&)>;

  
    static constexpr bool HasApplicationError = true;
    static constexpr bool HasTransportError = false;
    
      static constexpr bool IsEmptyStructPayload = false;
    
  

  
    static constexpr bool IsAbsentBody = false;
  
};
    
    
    
    
    
    
    
    namespace test_unknowninteractions {
__LOCAL extern "C" const fidl_type_t test_unknowninteractions_UnknownInteractionsAjarProtocolStrictTwoWayFieldsResponseTable;
    
    
__LOCAL extern "C" const fidl_type_t test_unknowninteractions_UnknownInteractionsAjarProtocolStrictTwoWayUnionResponseTable;
    
    
__LOCAL extern "C" const fidl_type_t test_unknowninteractions_UnknownInteractionsAjarProtocolStrictTwoWayTableResponseTable;
    
    
__LOCAL extern "C" const fidl_type_t test_unknowninteractions_UnknownInteractionsAjarProtocolStrictTwoWayErrTopResponseTable;
    
    
__LOCAL extern "C" const fidl_type_t test_unknowninteractions_UnknownInteractionsAjarProtocolStrictTwoWayFieldsErrTopResponseTable;
    
    
__LOCAL extern "C" const fidl_type_t test_unknowninteractions_UnknownInteractionsAjarProtocolStrictTwoWayUnionErrTopResponseTable;
    
    
__LOCAL extern "C" const fidl_type_t test_unknowninteractions_UnknownInteractionsAjarProtocolStrictTwoWayTableErrTopResponseTable;
    
    
    
    
__LOCAL extern "C" const fidl_type_t test_unknowninteractions_UnknownInteractionsAjarProtocolStrictEventFieldsRequestTable;
    
    
__LOCAL extern "C" const fidl_type_t test_unknowninteractions_UnknownInteractionsAjarProtocolStrictEventUnionRequestTable;
    
    
__LOCAL extern "C" const fidl_type_t test_unknowninteractions_UnknownInteractionsAjarProtocolStrictEventTableRequestTable;
    
    
__LOCAL extern "C" const fidl_type_t test_unknowninteractions_UnknownInteractionsAjarProtocolStrictEventErrRequestTable;
    
    
__LOCAL extern "C" const fidl_type_t test_unknowninteractions_UnknownInteractionsAjarProtocolStrictEventFieldsErrRequestTable;
    
    
__LOCAL extern "C" const fidl_type_t test_unknowninteractions_UnknownInteractionsAjarProtocolStrictEventUnionErrRequestTable;
    
    
__LOCAL extern "C" const fidl_type_t test_unknowninteractions_UnknownInteractionsAjarProtocolStrictEventTableErrRequestTable;
    
    
    
    
__LOCAL extern "C" const fidl_type_t test_unknowninteractions_UnknownInteractionsAjarProtocolFlexibleEventFieldsRequestTable;
    
    
__LOCAL extern "C" const fidl_type_t test_unknowninteractions_UnknownInteractionsAjarProtocolFlexibleEventUnionRequestTable;
    
    
__LOCAL extern "C" const fidl_type_t test_unknowninteractions_UnknownInteractionsAjarProtocolFlexibleEventTableRequestTable;
    
    
__LOCAL extern "C" const fidl_type_t test_unknowninteractions_UnknownInteractionsAjarProtocolFlexibleEventErrRequestTable;
    
    
__LOCAL extern "C" const fidl_type_t test_unknowninteractions_UnknownInteractionsAjarProtocolFlexibleEventFieldsErrRequestTable;
    
    
__LOCAL extern "C" const fidl_type_t test_unknowninteractions_UnknownInteractionsAjarProtocolFlexibleEventUnionErrRequestTable;
    
    
__LOCAL extern "C" const fidl_type_t test_unknowninteractions_UnknownInteractionsAjarProtocolFlexibleEventTableErrRequestTable;

#ifdef __Fuchsia__
}  // namespace test_unknowninteractions


template <>
class ::fidl::Event<::test_unknowninteractions::UnknownInteractionsAjarProtocol::StrictEvent> final {
 public:
};

template <>
struct ::fidl::internal::MessageTraits<::fidl::Event<::test_unknowninteractions::UnknownInteractionsAjarProtocol::StrictEvent>> final {
 public:
  static constexpr bool kHasPayload = false;
};namespace test_unknowninteractions {
}  // namespace test_unknowninteractions


template <>
class ::fidl::Event<::test_unknowninteractions::UnknownInteractionsAjarProtocol::StrictEventFields> final : public ::test_unknowninteractions::UnknownInteractionsAjarProtocolStrictEventFieldsRequest  {
 public:
      using ::test_unknowninteractions::UnknownInteractionsAjarProtocolStrictEventFieldsRequest::UnknownInteractionsAjarProtocolStrictEventFieldsRequest;
      Event(::test_unknowninteractions::UnknownInteractionsAjarProtocolStrictEventFieldsRequest v) : UnknownInteractionsAjarProtocolStrictEventFieldsRequest(std::move(v)) {}
};

template <>
struct ::fidl::internal::MessageTraits<::fidl::Event<::test_unknowninteractions::UnknownInteractionsAjarProtocol::StrictEventFields>> final {
 public:
  static constexpr bool kHasPayload = true;
  using Payload = ::test_unknowninteractions::UnknownInteractionsAjarProtocolStrictEventFieldsRequest;
};namespace test_unknowninteractions {
}  // namespace test_unknowninteractions


template <>
class ::fidl::Event<::test_unknowninteractions::UnknownInteractionsAjarProtocol::StrictEventUnion> final : public ::test_unknowninteractions::UnknownInteractionsAjarProtocolStrictEventUnionRequest  {
 public:
      using ::test_unknowninteractions::UnknownInteractionsAjarProtocolStrictEventUnionRequest::UnknownInteractionsAjarProtocolStrictEventUnionRequest;
      Event(::test_unknowninteractions::UnknownInteractionsAjarProtocolStrictEventUnionRequest v) : UnknownInteractionsAjarProtocolStrictEventUnionRequest(std::move(v)) {}
};

template <>
struct ::fidl::internal::MessageTraits<::fidl::Event<::test_unknowninteractions::UnknownInteractionsAjarProtocol::StrictEventUnion>> final {
 public:
  static constexpr bool kHasPayload = true;
  using Payload = ::test_unknowninteractions::UnknownInteractionsAjarProtocolStrictEventUnionRequest;
};namespace test_unknowninteractions {
}  // namespace test_unknowninteractions


template <>
class ::fidl::Event<::test_unknowninteractions::UnknownInteractionsAjarProtocol::StrictEventTable> final : public ::test_unknowninteractions::UnknownInteractionsAjarProtocolStrictEventTableRequest  {
 public:
      using ::test_unknowninteractions::UnknownInteractionsAjarProtocolStrictEventTableRequest::UnknownInteractionsAjarProtocolStrictEventTableRequest;
      Event(::test_unknowninteractions::UnknownInteractionsAjarProtocolStrictEventTableRequest v) : UnknownInteractionsAjarProtocolStrictEventTableRequest(std::move(v)) {}
};

template <>
struct ::fidl::internal::MessageTraits<::fidl::Event<::test_unknowninteractions::UnknownInteractionsAjarProtocol::StrictEventTable>> final {
 public:
  static constexpr bool kHasPayload = true;
  using Payload = ::test_unknowninteractions::UnknownInteractionsAjarProtocolStrictEventTableRequest;
};namespace test_unknowninteractions {
}  // namespace test_unknowninteractions


template <>
class ::fidl::Event<::test_unknowninteractions::UnknownInteractionsAjarProtocol::StrictEventErr> final : public ::fitx::result<int32_t>  {
 public:
      using ::fitx::result<int32_t>::result;
      Event(::fitx::result<int32_t> v) : result(std::move(v)) {}
      Event() = delete;
};

template <>
struct ::fidl::internal::MessageTraits<::fidl::Event<::test_unknowninteractions::UnknownInteractionsAjarProtocol::StrictEventErr>> final {
 public:
  static constexpr bool kHasPayload = true;
  using Payload = ::test_unknowninteractions::UnknownInteractionsAjarProtocolStrictEventErrRequest;
};
template <>
class ::fidl::internal::NaturalMessageConverter <::fidl::Event<::test_unknowninteractions::UnknownInteractionsAjarProtocol::StrictEventErr>> {
  using DomainObject = ::test_unknowninteractions::UnknownInteractionsAjarProtocolStrictEventErrRequest;

 public:
  static ::fidl::Event<::test_unknowninteractions::UnknownInteractionsAjarProtocol::StrictEventErr> FromDomainObject(DomainObject o) {
    if (o.result().err().has_value()) {
      return ::fitx::error(std::move(o.result().err().value()));
    } else {
      ZX_DEBUG_ASSERT(o.result().response().has_value());
        return ::fitx::ok();
    }
  }

  static DomainObject IntoDomainObject(const ::fidl::Event<::test_unknowninteractions::UnknownInteractionsAjarProtocol::StrictEventErr>& m) {
    if (m.is_error()) {
      return DomainObject{ { .result = ::test_unknowninteractions::UnknownInteractionsAjarProtocolStrictEventErrResult::WithErr(m.error_value()) } };
    } else {
        return DomainObject{ { .result = ::test_unknowninteractions::UnknownInteractionsAjarProtocolStrictEventErrResult::WithResponse({}) } };
    }
  }
};namespace test_unknowninteractions {
}  // namespace test_unknowninteractions


template <>
class ::fidl::Event<::test_unknowninteractions::UnknownInteractionsAjarProtocol::StrictEventFieldsErr> final : public ::fitx::result<int32_t, ::test_unknowninteractions::UnknownInteractionsAjarProtocolStrictEventFieldsErrResponse>  {
 public:
      using ::fitx::result<int32_t, ::test_unknowninteractions::UnknownInteractionsAjarProtocolStrictEventFieldsErrResponse>::result;
      Event(::fitx::result<int32_t, ::test_unknowninteractions::UnknownInteractionsAjarProtocolStrictEventFieldsErrResponse> v) : result(std::move(v)) {}
      Event() = delete;
};

template <>
struct ::fidl::internal::MessageTraits<::fidl::Event<::test_unknowninteractions::UnknownInteractionsAjarProtocol::StrictEventFieldsErr>> final {
 public:
  static constexpr bool kHasPayload = true;
  using Payload = ::test_unknowninteractions::UnknownInteractionsAjarProtocolStrictEventFieldsErrRequest;
};
template <>
class ::fidl::internal::NaturalMessageConverter <::fidl::Event<::test_unknowninteractions::UnknownInteractionsAjarProtocol::StrictEventFieldsErr>> {
  using DomainObject = ::test_unknowninteractions::UnknownInteractionsAjarProtocolStrictEventFieldsErrRequest;

 public:
  static ::fidl::Event<::test_unknowninteractions::UnknownInteractionsAjarProtocol::StrictEventFieldsErr> FromDomainObject(DomainObject o) {
    if (o.result().err().has_value()) {
      return ::fitx::error(std::move(o.result().err().value()));
    } else {
      ZX_DEBUG_ASSERT(o.result().response().has_value());
        return ::fitx::ok(std::move(o.result().response().value()));
    }
  }

  static DomainObject IntoDomainObject(const ::fidl::Event<::test_unknowninteractions::UnknownInteractionsAjarProtocol::StrictEventFieldsErr>& m) {
    if (m.is_error()) {
      return DomainObject{ { .result = ::test_unknowninteractions::UnknownInteractionsAjarProtocolStrictEventFieldsErrResult::WithErr(m.error_value()) } };
    } else {
        return DomainObject{ { .result = ::test_unknowninteractions::UnknownInteractionsAjarProtocolStrictEventFieldsErrResult::WithResponse(std::move(m.value())) } };
    }
  }
};namespace test_unknowninteractions {
}  // namespace test_unknowninteractions


template <>
class ::fidl::Event<::test_unknowninteractions::UnknownInteractionsAjarProtocol::StrictEventUnionErr> final : public ::fitx::result<int32_t, ::test_unknowninteractions::UnknownInteractionsAjarProtocolStrictEventUnionErrResponse>  {
 public:
      using ::fitx::result<int32_t, ::test_unknowninteractions::UnknownInteractionsAjarProtocolStrictEventUnionErrResponse>::result;
      Event(::fitx::result<int32_t, ::test_unknowninteractions::UnknownInteractionsAjarProtocolStrictEventUnionErrResponse> v) : result(std::move(v)) {}
      Event() = delete;
};

template <>
struct ::fidl::internal::MessageTraits<::fidl::Event<::test_unknowninteractions::UnknownInteractionsAjarProtocol::StrictEventUnionErr>> final {
 public:
  static constexpr bool kHasPayload = true;
  using Payload = ::test_unknowninteractions::UnknownInteractionsAjarProtocolStrictEventUnionErrRequest;
};
template <>
class ::fidl::internal::NaturalMessageConverter <::fidl::Event<::test_unknowninteractions::UnknownInteractionsAjarProtocol::StrictEventUnionErr>> {
  using DomainObject = ::test_unknowninteractions::UnknownInteractionsAjarProtocolStrictEventUnionErrRequest;

 public:
  static ::fidl::Event<::test_unknowninteractions::UnknownInteractionsAjarProtocol::StrictEventUnionErr> FromDomainObject(DomainObject o) {
    if (o.result().err().has_value()) {
      return ::fitx::error(std::move(o.result().err().value()));
    } else {
      ZX_DEBUG_ASSERT(o.result().response().has_value());
        return ::fitx::ok(std::move(o.result().response().value()));
    }
  }

  static DomainObject IntoDomainObject(const ::fidl::Event<::test_unknowninteractions::UnknownInteractionsAjarProtocol::StrictEventUnionErr>& m) {
    if (m.is_error()) {
      return DomainObject{ { .result = ::test_unknowninteractions::UnknownInteractionsAjarProtocolStrictEventUnionErrResult::WithErr(m.error_value()) } };
    } else {
        return DomainObject{ { .result = ::test_unknowninteractions::UnknownInteractionsAjarProtocolStrictEventUnionErrResult::WithResponse(std::move(m.value())) } };
    }
  }
};namespace test_unknowninteractions {
}  // namespace test_unknowninteractions


template <>
class ::fidl::Event<::test_unknowninteractions::UnknownInteractionsAjarProtocol::StrictEventTableErr> final : public ::fitx::result<int32_t, ::test_unknowninteractions::UnknownInteractionsAjarProtocolStrictEventTableErrResponse>  {
 public:
      using ::fitx::result<int32_t, ::test_unknowninteractions::UnknownInteractionsAjarProtocolStrictEventTableErrResponse>::result;
      Event(::fitx::result<int32_t, ::test_unknowninteractions::UnknownInteractionsAjarProtocolStrictEventTableErrResponse> v) : result(std::move(v)) {}
      Event() = delete;
};

template <>
struct ::fidl::internal::MessageTraits<::fidl::Event<::test_unknowninteractions::UnknownInteractionsAjarProtocol::StrictEventTableErr>> final {
 public:
  static constexpr bool kHasPayload = true;
  using Payload = ::test_unknowninteractions::UnknownInteractionsAjarProtocolStrictEventTableErrRequest;
};
template <>
class ::fidl::internal::NaturalMessageConverter <::fidl::Event<::test_unknowninteractions::UnknownInteractionsAjarProtocol::StrictEventTableErr>> {
  using DomainObject = ::test_unknowninteractions::UnknownInteractionsAjarProtocolStrictEventTableErrRequest;

 public:
  static ::fidl::Event<::test_unknowninteractions::UnknownInteractionsAjarProtocol::StrictEventTableErr> FromDomainObject(DomainObject o) {
    if (o.result().err().has_value()) {
      return ::fitx::error(std::move(o.result().err().value()));
    } else {
      ZX_DEBUG_ASSERT(o.result().response().has_value());
        return ::fitx::ok(std::move(o.result().response().value()));
    }
  }

  static DomainObject IntoDomainObject(const ::fidl::Event<::test_unknowninteractions::UnknownInteractionsAjarProtocol::StrictEventTableErr>& m) {
    if (m.is_error()) {
      return DomainObject{ { .result = ::test_unknowninteractions::UnknownInteractionsAjarProtocolStrictEventTableErrResult::WithErr(m.error_value()) } };
    } else {
        return DomainObject{ { .result = ::test_unknowninteractions::UnknownInteractionsAjarProtocolStrictEventTableErrResult::WithResponse(std::move(m.value())) } };
    }
  }
};namespace test_unknowninteractions {
}  // namespace test_unknowninteractions


template <>
class ::fidl::Event<::test_unknowninteractions::UnknownInteractionsAjarProtocol::FlexibleEvent> final {
 public:
};

template <>
struct ::fidl::internal::MessageTraits<::fidl::Event<::test_unknowninteractions::UnknownInteractionsAjarProtocol::FlexibleEvent>> final {
 public:
  static constexpr bool kHasPayload = false;
};namespace test_unknowninteractions {
}  // namespace test_unknowninteractions


template <>
class ::fidl::Event<::test_unknowninteractions::UnknownInteractionsAjarProtocol::FlexibleEventFields> final : public ::test_unknowninteractions::UnknownInteractionsAjarProtocolFlexibleEventFieldsRequest  {
 public:
      using ::test_unknowninteractions::UnknownInteractionsAjarProtocolFlexibleEventFieldsRequest::UnknownInteractionsAjarProtocolFlexibleEventFieldsRequest;
      Event(::test_unknowninteractions::UnknownInteractionsAjarProtocolFlexibleEventFieldsRequest v) : UnknownInteractionsAjarProtocolFlexibleEventFieldsRequest(std::move(v)) {}
};

template <>
struct ::fidl::internal::MessageTraits<::fidl::Event<::test_unknowninteractions::UnknownInteractionsAjarProtocol::FlexibleEventFields>> final {
 public:
  static constexpr bool kHasPayload = true;
  using Payload = ::test_unknowninteractions::UnknownInteractionsAjarProtocolFlexibleEventFieldsRequest;
};namespace test_unknowninteractions {
}  // namespace test_unknowninteractions


template <>
class ::fidl::Event<::test_unknowninteractions::UnknownInteractionsAjarProtocol::FlexibleEventUnion> final : public ::test_unknowninteractions::UnknownInteractionsAjarProtocolFlexibleEventUnionRequest  {
 public:
      using ::test_unknowninteractions::UnknownInteractionsAjarProtocolFlexibleEventUnionRequest::UnknownInteractionsAjarProtocolFlexibleEventUnionRequest;
      Event(::test_unknowninteractions::UnknownInteractionsAjarProtocolFlexibleEventUnionRequest v) : UnknownInteractionsAjarProtocolFlexibleEventUnionRequest(std::move(v)) {}
};

template <>
struct ::fidl::internal::MessageTraits<::fidl::Event<::test_unknowninteractions::UnknownInteractionsAjarProtocol::FlexibleEventUnion>> final {
 public:
  static constexpr bool kHasPayload = true;
  using Payload = ::test_unknowninteractions::UnknownInteractionsAjarProtocolFlexibleEventUnionRequest;
};namespace test_unknowninteractions {
}  // namespace test_unknowninteractions


template <>
class ::fidl::Event<::test_unknowninteractions::UnknownInteractionsAjarProtocol::FlexibleEventTable> final : public ::test_unknowninteractions::UnknownInteractionsAjarProtocolFlexibleEventTableRequest  {
 public:
      using ::test_unknowninteractions::UnknownInteractionsAjarProtocolFlexibleEventTableRequest::UnknownInteractionsAjarProtocolFlexibleEventTableRequest;
      Event(::test_unknowninteractions::UnknownInteractionsAjarProtocolFlexibleEventTableRequest v) : UnknownInteractionsAjarProtocolFlexibleEventTableRequest(std::move(v)) {}
};

template <>
struct ::fidl::internal::MessageTraits<::fidl::Event<::test_unknowninteractions::UnknownInteractionsAjarProtocol::FlexibleEventTable>> final {
 public:
  static constexpr bool kHasPayload = true;
  using Payload = ::test_unknowninteractions::UnknownInteractionsAjarProtocolFlexibleEventTableRequest;
};namespace test_unknowninteractions {
}  // namespace test_unknowninteractions


template <>
class ::fidl::Event<::test_unknowninteractions::UnknownInteractionsAjarProtocol::FlexibleEventErr> final : public ::fitx::result<int32_t>  {
 public:
      using ::fitx::result<int32_t>::result;
      Event(::fitx::result<int32_t> v) : result(std::move(v)) {}
      Event() = delete;
};

template <>
struct ::fidl::internal::MessageTraits<::fidl::Event<::test_unknowninteractions::UnknownInteractionsAjarProtocol::FlexibleEventErr>> final {
 public:
  static constexpr bool kHasPayload = true;
  using Payload = ::test_unknowninteractions::UnknownInteractionsAjarProtocolFlexibleEventErrRequest;
};
template <>
class ::fidl::internal::NaturalMessageConverter <::fidl::Event<::test_unknowninteractions::UnknownInteractionsAjarProtocol::FlexibleEventErr>> {
  using DomainObject = ::test_unknowninteractions::UnknownInteractionsAjarProtocolFlexibleEventErrRequest;

 public:
  static ::fidl::Event<::test_unknowninteractions::UnknownInteractionsAjarProtocol::FlexibleEventErr> FromDomainObject(DomainObject o) {
    if (o.result().err().has_value()) {
      return ::fitx::error(std::move(o.result().err().value()));
    } else {
      ZX_DEBUG_ASSERT(o.result().response().has_value());
        return ::fitx::ok();
    }
  }

  static DomainObject IntoDomainObject(const ::fidl::Event<::test_unknowninteractions::UnknownInteractionsAjarProtocol::FlexibleEventErr>& m) {
    if (m.is_error()) {
      return DomainObject{ { .result = ::test_unknowninteractions::UnknownInteractionsAjarProtocolFlexibleEventErrResult::WithErr(m.error_value()) } };
    } else {
        return DomainObject{ { .result = ::test_unknowninteractions::UnknownInteractionsAjarProtocolFlexibleEventErrResult::WithResponse({}) } };
    }
  }
};namespace test_unknowninteractions {
}  // namespace test_unknowninteractions


template <>
class ::fidl::Event<::test_unknowninteractions::UnknownInteractionsAjarProtocol::FlexibleEventFieldsErr> final : public ::fitx::result<int32_t, ::test_unknowninteractions::UnknownInteractionsAjarProtocolFlexibleEventFieldsErrResponse>  {
 public:
      using ::fitx::result<int32_t, ::test_unknowninteractions::UnknownInteractionsAjarProtocolFlexibleEventFieldsErrResponse>::result;
      Event(::fitx::result<int32_t, ::test_unknowninteractions::UnknownInteractionsAjarProtocolFlexibleEventFieldsErrResponse> v) : result(std::move(v)) {}
      Event() = delete;
};

template <>
struct ::fidl::internal::MessageTraits<::fidl::Event<::test_unknowninteractions::UnknownInteractionsAjarProtocol::FlexibleEventFieldsErr>> final {
 public:
  static constexpr bool kHasPayload = true;
  using Payload = ::test_unknowninteractions::UnknownInteractionsAjarProtocolFlexibleEventFieldsErrRequest;
};
template <>
class ::fidl::internal::NaturalMessageConverter <::fidl::Event<::test_unknowninteractions::UnknownInteractionsAjarProtocol::FlexibleEventFieldsErr>> {
  using DomainObject = ::test_unknowninteractions::UnknownInteractionsAjarProtocolFlexibleEventFieldsErrRequest;

 public:
  static ::fidl::Event<::test_unknowninteractions::UnknownInteractionsAjarProtocol::FlexibleEventFieldsErr> FromDomainObject(DomainObject o) {
    if (o.result().err().has_value()) {
      return ::fitx::error(std::move(o.result().err().value()));
    } else {
      ZX_DEBUG_ASSERT(o.result().response().has_value());
        return ::fitx::ok(std::move(o.result().response().value()));
    }
  }

  static DomainObject IntoDomainObject(const ::fidl::Event<::test_unknowninteractions::UnknownInteractionsAjarProtocol::FlexibleEventFieldsErr>& m) {
    if (m.is_error()) {
      return DomainObject{ { .result = ::test_unknowninteractions::UnknownInteractionsAjarProtocolFlexibleEventFieldsErrResult::WithErr(m.error_value()) } };
    } else {
        return DomainObject{ { .result = ::test_unknowninteractions::UnknownInteractionsAjarProtocolFlexibleEventFieldsErrResult::WithResponse(std::move(m.value())) } };
    }
  }
};namespace test_unknowninteractions {
}  // namespace test_unknowninteractions


template <>
class ::fidl::Event<::test_unknowninteractions::UnknownInteractionsAjarProtocol::FlexibleEventUnionErr> final : public ::fitx::result<int32_t, ::test_unknowninteractions::UnknownInteractionsAjarProtocolFlexibleEventUnionErrResponse>  {
 public:
      using ::fitx::result<int32_t, ::test_unknowninteractions::UnknownInteractionsAjarProtocolFlexibleEventUnionErrResponse>::result;
      Event(::fitx::result<int32_t, ::test_unknowninteractions::UnknownInteractionsAjarProtocolFlexibleEventUnionErrResponse> v) : result(std::move(v)) {}
      Event() = delete;
};

template <>
struct ::fidl::internal::MessageTraits<::fidl::Event<::test_unknowninteractions::UnknownInteractionsAjarProtocol::FlexibleEventUnionErr>> final {
 public:
  static constexpr bool kHasPayload = true;
  using Payload = ::test_unknowninteractions::UnknownInteractionsAjarProtocolFlexibleEventUnionErrRequest;
};
template <>
class ::fidl::internal::NaturalMessageConverter <::fidl::Event<::test_unknowninteractions::UnknownInteractionsAjarProtocol::FlexibleEventUnionErr>> {
  using DomainObject = ::test_unknowninteractions::UnknownInteractionsAjarProtocolFlexibleEventUnionErrRequest;

 public:
  static ::fidl::Event<::test_unknowninteractions::UnknownInteractionsAjarProtocol::FlexibleEventUnionErr> FromDomainObject(DomainObject o) {
    if (o.result().err().has_value()) {
      return ::fitx::error(std::move(o.result().err().value()));
    } else {
      ZX_DEBUG_ASSERT(o.result().response().has_value());
        return ::fitx::ok(std::move(o.result().response().value()));
    }
  }

  static DomainObject IntoDomainObject(const ::fidl::Event<::test_unknowninteractions::UnknownInteractionsAjarProtocol::FlexibleEventUnionErr>& m) {
    if (m.is_error()) {
      return DomainObject{ { .result = ::test_unknowninteractions::UnknownInteractionsAjarProtocolFlexibleEventUnionErrResult::WithErr(m.error_value()) } };
    } else {
        return DomainObject{ { .result = ::test_unknowninteractions::UnknownInteractionsAjarProtocolFlexibleEventUnionErrResult::WithResponse(std::move(m.value())) } };
    }
  }
};namespace test_unknowninteractions {
}  // namespace test_unknowninteractions


template <>
class ::fidl::Event<::test_unknowninteractions::UnknownInteractionsAjarProtocol::FlexibleEventTableErr> final : public ::fitx::result<int32_t, ::test_unknowninteractions::UnknownInteractionsAjarProtocolFlexibleEventTableErrResponse>  {
 public:
      using ::fitx::result<int32_t, ::test_unknowninteractions::UnknownInteractionsAjarProtocolFlexibleEventTableErrResponse>::result;
      Event(::fitx::result<int32_t, ::test_unknowninteractions::UnknownInteractionsAjarProtocolFlexibleEventTableErrResponse> v) : result(std::move(v)) {}
      Event() = delete;
};

template <>
struct ::fidl::internal::MessageTraits<::fidl::Event<::test_unknowninteractions::UnknownInteractionsAjarProtocol::FlexibleEventTableErr>> final {
 public:
  static constexpr bool kHasPayload = true;
  using Payload = ::test_unknowninteractions::UnknownInteractionsAjarProtocolFlexibleEventTableErrRequest;
};
template <>
class ::fidl::internal::NaturalMessageConverter <::fidl::Event<::test_unknowninteractions::UnknownInteractionsAjarProtocol::FlexibleEventTableErr>> {
  using DomainObject = ::test_unknowninteractions::UnknownInteractionsAjarProtocolFlexibleEventTableErrRequest;

 public:
  static ::fidl::Event<::test_unknowninteractions::UnknownInteractionsAjarProtocol::FlexibleEventTableErr> FromDomainObject(DomainObject o) {
    if (o.result().err().has_value()) {
      return ::fitx::error(std::move(o.result().err().value()));
    } else {
      ZX_DEBUG_ASSERT(o.result().response().has_value());
        return ::fitx::ok(std::move(o.result().response().value()));
    }
  }

  static DomainObject IntoDomainObject(const ::fidl::Event<::test_unknowninteractions::UnknownInteractionsAjarProtocol::FlexibleEventTableErr>& m) {
    if (m.is_error()) {
      return DomainObject{ { .result = ::test_unknowninteractions::UnknownInteractionsAjarProtocolFlexibleEventTableErrResult::WithErr(m.error_value()) } };
    } else {
        return DomainObject{ { .result = ::test_unknowninteractions::UnknownInteractionsAjarProtocolFlexibleEventTableErrResult::WithResponse(std::move(m.value())) } };
    }
  }
};namespace test_unknowninteractions {
}  // namespace test_unknowninteractions


template <>
class ::fidl::Response<::test_unknowninteractions::UnknownInteractionsAjarProtocol::StrictTwoWay> final {
 public:
};

template <>
struct ::fidl::internal::MessageTraits<::fidl::Response<::test_unknowninteractions::UnknownInteractionsAjarProtocol::StrictTwoWay>> final {
 public:
  static constexpr bool kHasPayload = false;
};namespace test_unknowninteractions {
}  // namespace test_unknowninteractions

template <>
class ::fidl::Result<::test_unknowninteractions::UnknownInteractionsAjarProtocol::StrictTwoWay> final : public ::fitx::result<::fidl::Error> {
 public:
  using ::fitx::result<::fidl::Error>::result;

 protected:
  Result() = default;
};



template <>
class ::fidl::Response<::test_unknowninteractions::UnknownInteractionsAjarProtocol::StrictTwoWayFields> final : public ::test_unknowninteractions::UnknownInteractionsAjarProtocolStrictTwoWayFieldsResponse  {
 public:
      using ::test_unknowninteractions::UnknownInteractionsAjarProtocolStrictTwoWayFieldsResponse::UnknownInteractionsAjarProtocolStrictTwoWayFieldsResponse;
      Response(::test_unknowninteractions::UnknownInteractionsAjarProtocolStrictTwoWayFieldsResponse v) : UnknownInteractionsAjarProtocolStrictTwoWayFieldsResponse(std::move(v)) {}
};

template <>
struct ::fidl::internal::MessageTraits<::fidl::Response<::test_unknowninteractions::UnknownInteractionsAjarProtocol::StrictTwoWayFields>> final {
 public:
  static constexpr bool kHasPayload = true;
  using Payload = ::test_unknowninteractions::UnknownInteractionsAjarProtocolStrictTwoWayFieldsResponse;
};


template <>
class ::fidl::Result<::test_unknowninteractions::UnknownInteractionsAjarProtocol::StrictTwoWayFields> final : public ::fitx::result<::fidl::Error, ::test_unknowninteractions::UnknownInteractionsAjarProtocolStrictTwoWayFieldsResponse> {
 public:
  using ::fitx::result<::fidl::Error, ::test_unknowninteractions::UnknownInteractionsAjarProtocolStrictTwoWayFieldsResponse>::result;

 protected:
  Result() = default;
};



template <>
class ::fidl::Response<::test_unknowninteractions::UnknownInteractionsAjarProtocol::StrictTwoWayUnion> final : public ::test_unknowninteractions::UnknownInteractionsAjarProtocolStrictTwoWayUnionResponse  {
 public:
      using ::test_unknowninteractions::UnknownInteractionsAjarProtocolStrictTwoWayUnionResponse::UnknownInteractionsAjarProtocolStrictTwoWayUnionResponse;
      Response(::test_unknowninteractions::UnknownInteractionsAjarProtocolStrictTwoWayUnionResponse v) : UnknownInteractionsAjarProtocolStrictTwoWayUnionResponse(std::move(v)) {}
};

template <>
struct ::fidl::internal::MessageTraits<::fidl::Response<::test_unknowninteractions::UnknownInteractionsAjarProtocol::StrictTwoWayUnion>> final {
 public:
  static constexpr bool kHasPayload = true;
  using Payload = ::test_unknowninteractions::UnknownInteractionsAjarProtocolStrictTwoWayUnionResponse;
};


template <>
class ::fidl::Result<::test_unknowninteractions::UnknownInteractionsAjarProtocol::StrictTwoWayUnion> final : public ::fitx::result<::fidl::Error, ::test_unknowninteractions::UnknownInteractionsAjarProtocolStrictTwoWayUnionResponse> {
 public:
  using ::fitx::result<::fidl::Error, ::test_unknowninteractions::UnknownInteractionsAjarProtocolStrictTwoWayUnionResponse>::result;

 protected:
  Result() = default;
};



template <>
class ::fidl::Response<::test_unknowninteractions::UnknownInteractionsAjarProtocol::StrictTwoWayTable> final : public ::test_unknowninteractions::UnknownInteractionsAjarProtocolStrictTwoWayTableResponse  {
 public:
      using ::test_unknowninteractions::UnknownInteractionsAjarProtocolStrictTwoWayTableResponse::UnknownInteractionsAjarProtocolStrictTwoWayTableResponse;
      Response(::test_unknowninteractions::UnknownInteractionsAjarProtocolStrictTwoWayTableResponse v) : UnknownInteractionsAjarProtocolStrictTwoWayTableResponse(std::move(v)) {}
};

template <>
struct ::fidl::internal::MessageTraits<::fidl::Response<::test_unknowninteractions::UnknownInteractionsAjarProtocol::StrictTwoWayTable>> final {
 public:
  static constexpr bool kHasPayload = true;
  using Payload = ::test_unknowninteractions::UnknownInteractionsAjarProtocolStrictTwoWayTableResponse;
};


template <>
class ::fidl::Result<::test_unknowninteractions::UnknownInteractionsAjarProtocol::StrictTwoWayTable> final : public ::fitx::result<::fidl::Error, ::test_unknowninteractions::UnknownInteractionsAjarProtocolStrictTwoWayTableResponse> {
 public:
  using ::fitx::result<::fidl::Error, ::test_unknowninteractions::UnknownInteractionsAjarProtocolStrictTwoWayTableResponse>::result;

 protected:
  Result() = default;
};



template <>
class ::fidl::Response<::test_unknowninteractions::UnknownInteractionsAjarProtocol::StrictTwoWayErr> final : public ::fitx::result<int32_t>  {
 public:
      using ::fitx::result<int32_t>::result;
      Response(::fitx::result<int32_t> v) : result(std::move(v)) {}
      Response() = delete;
};

template <>
struct ::fidl::internal::MessageTraits<::fidl::Response<::test_unknowninteractions::UnknownInteractionsAjarProtocol::StrictTwoWayErr>> final {
 public:
  static constexpr bool kHasPayload = true;
  using Payload = ::test_unknowninteractions::UnknownInteractionsAjarProtocolStrictTwoWayErrTopResponse;
};
template <>
class ::fidl::internal::NaturalMessageConverter <::fidl::Response<::test_unknowninteractions::UnknownInteractionsAjarProtocol::StrictTwoWayErr>> {
  using DomainObject = ::test_unknowninteractions::UnknownInteractionsAjarProtocolStrictTwoWayErrTopResponse;

 public:
  
  
  static ::fidl::Response<::test_unknowninteractions::UnknownInteractionsAjarProtocol::StrictTwoWayErr> FromDomainObject(DomainObject o) {
    if (o.result().err().has_value()) {
      return ::fitx::error(std::move(o.result().err().value()));
    } else {
      ZX_DEBUG_ASSERT(o.result().response().has_value());
        return ::fitx::ok();
    }
  }
  

  static DomainObject IntoDomainObject(const ::fidl::Response<::test_unknowninteractions::UnknownInteractionsAjarProtocol::StrictTwoWayErr>& m) {
    if (m.is_error()) {
      return DomainObject{ { .result = ::test_unknowninteractions::UnknownInteractionsAjarProtocolStrictTwoWayErrResult::WithErr(m.error_value()) } };
    } else {
        return DomainObject{ { .result = ::test_unknowninteractions::UnknownInteractionsAjarProtocolStrictTwoWayErrResult::WithResponse({}) } };
    }
  }
};


template <>
class ::fidl::Result<::test_unknowninteractions::UnknownInteractionsAjarProtocol::StrictTwoWayErr> final : public ::fitx::result<::fidl::AnyErrorIn<::test_unknowninteractions::UnknownInteractionsAjarProtocol::StrictTwoWayErr>> {
 public:
  using ::fitx::result<::fidl::AnyErrorIn<::test_unknowninteractions::UnknownInteractionsAjarProtocol::StrictTwoWayErr>>::result;

 protected:
  Result() = default;
};



template <>
class ::fidl::Response<::test_unknowninteractions::UnknownInteractionsAjarProtocol::StrictTwoWayFieldsErr> final : public ::fitx::result<int32_t, ::test_unknowninteractions::UnknownInteractionsAjarProtocolStrictTwoWayFieldsErrResponse>  {
 public:
      using ::fitx::result<int32_t, ::test_unknowninteractions::UnknownInteractionsAjarProtocolStrictTwoWayFieldsErrResponse>::result;
      Response(::fitx::result<int32_t, ::test_unknowninteractions::UnknownInteractionsAjarProtocolStrictTwoWayFieldsErrResponse> v) : result(std::move(v)) {}
      Response() = delete;
};

template <>
struct ::fidl::internal::MessageTraits<::fidl::Response<::test_unknowninteractions::UnknownInteractionsAjarProtocol::StrictTwoWayFieldsErr>> final {
 public:
  static constexpr bool kHasPayload = true;
  using Payload = ::test_unknowninteractions::UnknownInteractionsAjarProtocolStrictTwoWayFieldsErrTopResponse;
};
template <>
class ::fidl::internal::NaturalMessageConverter <::fidl::Response<::test_unknowninteractions::UnknownInteractionsAjarProtocol::StrictTwoWayFieldsErr>> {
  using DomainObject = ::test_unknowninteractions::UnknownInteractionsAjarProtocolStrictTwoWayFieldsErrTopResponse;

 public:
  
  
  static ::fidl::Response<::test_unknowninteractions::UnknownInteractionsAjarProtocol::StrictTwoWayFieldsErr> FromDomainObject(DomainObject o) {
    if (o.result().err().has_value()) {
      return ::fitx::error(std::move(o.result().err().value()));
    } else {
      ZX_DEBUG_ASSERT(o.result().response().has_value());
        return ::fitx::ok(std::move(o.result().response().value()));
    }
  }
  

  static DomainObject IntoDomainObject(const ::fidl::Response<::test_unknowninteractions::UnknownInteractionsAjarProtocol::StrictTwoWayFieldsErr>& m) {
    if (m.is_error()) {
      return DomainObject{ { .result = ::test_unknowninteractions::UnknownInteractionsAjarProtocolStrictTwoWayFieldsErrResult::WithErr(m.error_value()) } };
    } else {
        return DomainObject{ { .result = ::test_unknowninteractions::UnknownInteractionsAjarProtocolStrictTwoWayFieldsErrResult::WithResponse(std::move(m.value())) } };
    }
  }
};


template <>
class ::fidl::Result<::test_unknowninteractions::UnknownInteractionsAjarProtocol::StrictTwoWayFieldsErr> final : public ::fitx::result<::fidl::AnyErrorIn<::test_unknowninteractions::UnknownInteractionsAjarProtocol::StrictTwoWayFieldsErr>, ::test_unknowninteractions::UnknownInteractionsAjarProtocolStrictTwoWayFieldsErrResponse> {
 public:
  using ::fitx::result<::fidl::AnyErrorIn<::test_unknowninteractions::UnknownInteractionsAjarProtocol::StrictTwoWayFieldsErr>, ::test_unknowninteractions::UnknownInteractionsAjarProtocolStrictTwoWayFieldsErrResponse>::result;

 protected:
  Result() = default;
};



template <>
class ::fidl::Response<::test_unknowninteractions::UnknownInteractionsAjarProtocol::StrictTwoWayUnionErr> final : public ::fitx::result<int32_t, ::test_unknowninteractions::UnknownInteractionsAjarProtocolStrictTwoWayUnionErrResponse>  {
 public:
      using ::fitx::result<int32_t, ::test_unknowninteractions::UnknownInteractionsAjarProtocolStrictTwoWayUnionErrResponse>::result;
      Response(::fitx::result<int32_t, ::test_unknowninteractions::UnknownInteractionsAjarProtocolStrictTwoWayUnionErrResponse> v) : result(std::move(v)) {}
      Response() = delete;
};

template <>
struct ::fidl::internal::MessageTraits<::fidl::Response<::test_unknowninteractions::UnknownInteractionsAjarProtocol::StrictTwoWayUnionErr>> final {
 public:
  static constexpr bool kHasPayload = true;
  using Payload = ::test_unknowninteractions::UnknownInteractionsAjarProtocolStrictTwoWayUnionErrTopResponse;
};
template <>
class ::fidl::internal::NaturalMessageConverter <::fidl::Response<::test_unknowninteractions::UnknownInteractionsAjarProtocol::StrictTwoWayUnionErr>> {
  using DomainObject = ::test_unknowninteractions::UnknownInteractionsAjarProtocolStrictTwoWayUnionErrTopResponse;

 public:
  
  
  static ::fidl::Response<::test_unknowninteractions::UnknownInteractionsAjarProtocol::StrictTwoWayUnionErr> FromDomainObject(DomainObject o) {
    if (o.result().err().has_value()) {
      return ::fitx::error(std::move(o.result().err().value()));
    } else {
      ZX_DEBUG_ASSERT(o.result().response().has_value());
        return ::fitx::ok(std::move(o.result().response().value()));
    }
  }
  

  static DomainObject IntoDomainObject(const ::fidl::Response<::test_unknowninteractions::UnknownInteractionsAjarProtocol::StrictTwoWayUnionErr>& m) {
    if (m.is_error()) {
      return DomainObject{ { .result = ::test_unknowninteractions::UnknownInteractionsAjarProtocolStrictTwoWayUnionErrResult::WithErr(m.error_value()) } };
    } else {
        return DomainObject{ { .result = ::test_unknowninteractions::UnknownInteractionsAjarProtocolStrictTwoWayUnionErrResult::WithResponse(std::move(m.value())) } };
    }
  }
};


template <>
class ::fidl::Result<::test_unknowninteractions::UnknownInteractionsAjarProtocol::StrictTwoWayUnionErr> final : public ::fitx::result<::fidl::AnyErrorIn<::test_unknowninteractions::UnknownInteractionsAjarProtocol::StrictTwoWayUnionErr>, ::test_unknowninteractions::UnknownInteractionsAjarProtocolStrictTwoWayUnionErrResponse> {
 public:
  using ::fitx::result<::fidl::AnyErrorIn<::test_unknowninteractions::UnknownInteractionsAjarProtocol::StrictTwoWayUnionErr>, ::test_unknowninteractions::UnknownInteractionsAjarProtocolStrictTwoWayUnionErrResponse>::result;

 protected:
  Result() = default;
};



template <>
class ::fidl::Response<::test_unknowninteractions::UnknownInteractionsAjarProtocol::StrictTwoWayTableErr> final : public ::fitx::result<int32_t, ::test_unknowninteractions::UnknownInteractionsAjarProtocolStrictTwoWayTableErrResponse>  {
 public:
      using ::fitx::result<int32_t, ::test_unknowninteractions::UnknownInteractionsAjarProtocolStrictTwoWayTableErrResponse>::result;
      Response(::fitx::result<int32_t, ::test_unknowninteractions::UnknownInteractionsAjarProtocolStrictTwoWayTableErrResponse> v) : result(std::move(v)) {}
      Response() = delete;
};

template <>
struct ::fidl::internal::MessageTraits<::fidl::Response<::test_unknowninteractions::UnknownInteractionsAjarProtocol::StrictTwoWayTableErr>> final {
 public:
  static constexpr bool kHasPayload = true;
  using Payload = ::test_unknowninteractions::UnknownInteractionsAjarProtocolStrictTwoWayTableErrTopResponse;
};
template <>
class ::fidl::internal::NaturalMessageConverter <::fidl::Response<::test_unknowninteractions::UnknownInteractionsAjarProtocol::StrictTwoWayTableErr>> {
  using DomainObject = ::test_unknowninteractions::UnknownInteractionsAjarProtocolStrictTwoWayTableErrTopResponse;

 public:
  
  
  static ::fidl::Response<::test_unknowninteractions::UnknownInteractionsAjarProtocol::StrictTwoWayTableErr> FromDomainObject(DomainObject o) {
    if (o.result().err().has_value()) {
      return ::fitx::error(std::move(o.result().err().value()));
    } else {
      ZX_DEBUG_ASSERT(o.result().response().has_value());
        return ::fitx::ok(std::move(o.result().response().value()));
    }
  }
  

  static DomainObject IntoDomainObject(const ::fidl::Response<::test_unknowninteractions::UnknownInteractionsAjarProtocol::StrictTwoWayTableErr>& m) {
    if (m.is_error()) {
      return DomainObject{ { .result = ::test_unknowninteractions::UnknownInteractionsAjarProtocolStrictTwoWayTableErrResult::WithErr(m.error_value()) } };
    } else {
        return DomainObject{ { .result = ::test_unknowninteractions::UnknownInteractionsAjarProtocolStrictTwoWayTableErrResult::WithResponse(std::move(m.value())) } };
    }
  }
};


template <>
class ::fidl::Result<::test_unknowninteractions::UnknownInteractionsAjarProtocol::StrictTwoWayTableErr> final : public ::fitx::result<::fidl::AnyErrorIn<::test_unknowninteractions::UnknownInteractionsAjarProtocol::StrictTwoWayTableErr>, ::test_unknowninteractions::UnknownInteractionsAjarProtocolStrictTwoWayTableErrResponse> {
 public:
  using ::fitx::result<::fidl::AnyErrorIn<::test_unknowninteractions::UnknownInteractionsAjarProtocol::StrictTwoWayTableErr>, ::test_unknowninteractions::UnknownInteractionsAjarProtocolStrictTwoWayTableErrResponse>::result;

 protected:
  Result() = default;
};


template<>
class ::fidl::internal::NaturalClientImpl<::test_unknowninteractions::UnknownInteractionsAjarProtocol> final : public ::fidl::internal::NaturalClientBase {
 public:
  using NaturalClientBase::NaturalClientBase;
  ::fidl::internal::NaturalThenable<::test_unknowninteractions::UnknownInteractionsAjarProtocol::StrictTwoWay> StrictTwoWay() const;

  ::fidl::internal::NaturalThenable<::test_unknowninteractions::UnknownInteractionsAjarProtocol::StrictTwoWayFields> StrictTwoWayFields() const;

  ::fidl::internal::NaturalThenable<::test_unknowninteractions::UnknownInteractionsAjarProtocol::StrictTwoWayUnion> StrictTwoWayUnion() const;

  ::fidl::internal::NaturalThenable<::test_unknowninteractions::UnknownInteractionsAjarProtocol::StrictTwoWayTable> StrictTwoWayTable() const;

  ::fidl::internal::NaturalThenable<::test_unknowninteractions::UnknownInteractionsAjarProtocol::StrictTwoWayErr> StrictTwoWayErr() const;

  ::fidl::internal::NaturalThenable<::test_unknowninteractions::UnknownInteractionsAjarProtocol::StrictTwoWayFieldsErr> StrictTwoWayFieldsErr() const;

  ::fidl::internal::NaturalThenable<::test_unknowninteractions::UnknownInteractionsAjarProtocol::StrictTwoWayUnionErr> StrictTwoWayUnionErr() const;

  ::fidl::internal::NaturalThenable<::test_unknowninteractions::UnknownInteractionsAjarProtocol::StrictTwoWayTableErr> StrictTwoWayTableErr() const;

  ::fitx::result<::fidl::Error> StrictOneWay() const;

  ::fitx::result<::fidl::Error> FlexibleOneWay() const;

};namespace test_unknowninteractions {

#endif  // __Fuchsia__

}  // namespace test_unknowninteractions

#ifdef __Fuchsia__


template <>
class ::fidl::internal::NaturalSyncClientImpl<::test_unknowninteractions::UnknownInteractionsAjarProtocol> final
    : public ::fidl::internal::SyncEndpointManagedVeneer<::fidl::internal::NaturalSyncClientImpl<::test_unknowninteractions::UnknownInteractionsAjarProtocol>> {
 public:
  
    
    ::fidl::Result<::test_unknowninteractions::UnknownInteractionsAjarProtocol::StrictTwoWay> StrictTwoWay();

  
    
    ::fidl::Result<::test_unknowninteractions::UnknownInteractionsAjarProtocol::StrictTwoWayFields> StrictTwoWayFields();

  
    
    ::fidl::Result<::test_unknowninteractions::UnknownInteractionsAjarProtocol::StrictTwoWayUnion> StrictTwoWayUnion();

  
    
    ::fidl::Result<::test_unknowninteractions::UnknownInteractionsAjarProtocol::StrictTwoWayTable> StrictTwoWayTable();

  
    
    ::fidl::Result<::test_unknowninteractions::UnknownInteractionsAjarProtocol::StrictTwoWayErr> StrictTwoWayErr();

  
    
    ::fidl::Result<::test_unknowninteractions::UnknownInteractionsAjarProtocol::StrictTwoWayFieldsErr> StrictTwoWayFieldsErr();

  
    
    ::fidl::Result<::test_unknowninteractions::UnknownInteractionsAjarProtocol::StrictTwoWayUnionErr> StrictTwoWayUnionErr();

  
    
    ::fidl::Result<::test_unknowninteractions::UnknownInteractionsAjarProtocol::StrictTwoWayTableErr> StrictTwoWayTableErr();

  

  
    
    ::fitx::result<::fidl::Error> StrictOneWay();

  
    
    ::fitx::result<::fidl::Error> FlexibleOneWay();

  

 private:
  ::fidl::UnownedClientEnd<::test_unknowninteractions::UnknownInteractionsAjarProtocol> _client_end() const {
    return ::fidl::UnownedClientEnd<::test_unknowninteractions::UnknownInteractionsAjarProtocol>(
      _transport().get<::fidl::internal::ChannelTransport>());
  }
};

#endif  // __Fuchsia__



#ifdef __Fuchsia__

template<>
class ::fidl::internal::NaturalEventHandlerInterface<::test_unknowninteractions::UnknownInteractionsAjarProtocol> : public ::fidl::internal::BaseEventHandlerInterface, public ::fidl::UnknownEventHandler<::test_unknowninteractions::UnknownInteractionsAjarProtocol> {
 public:
  NaturalEventHandlerInterface() = default;
  virtual ~NaturalEventHandlerInterface() = default;
    virtual void StrictEvent(::fidl::Event<::test_unknowninteractions::UnknownInteractionsAjarProtocol::StrictEvent>&) = 0;
    virtual void StrictEventFields(::fidl::Event<::test_unknowninteractions::UnknownInteractionsAjarProtocol::StrictEventFields>&) = 0;
    virtual void StrictEventUnion(::fidl::Event<::test_unknowninteractions::UnknownInteractionsAjarProtocol::StrictEventUnion>&) = 0;
    virtual void StrictEventTable(::fidl::Event<::test_unknowninteractions::UnknownInteractionsAjarProtocol::StrictEventTable>&) = 0;
    virtual void StrictEventErr(::fidl::Event<::test_unknowninteractions::UnknownInteractionsAjarProtocol::StrictEventErr>&) = 0;
    virtual void StrictEventFieldsErr(::fidl::Event<::test_unknowninteractions::UnknownInteractionsAjarProtocol::StrictEventFieldsErr>&) = 0;
    virtual void StrictEventUnionErr(::fidl::Event<::test_unknowninteractions::UnknownInteractionsAjarProtocol::StrictEventUnionErr>&) = 0;
    virtual void StrictEventTableErr(::fidl::Event<::test_unknowninteractions::UnknownInteractionsAjarProtocol::StrictEventTableErr>&) = 0;
    virtual void FlexibleEvent(::fidl::Event<::test_unknowninteractions::UnknownInteractionsAjarProtocol::FlexibleEvent>&) = 0;
    virtual void FlexibleEventFields(::fidl::Event<::test_unknowninteractions::UnknownInteractionsAjarProtocol::FlexibleEventFields>&) = 0;
    virtual void FlexibleEventUnion(::fidl::Event<::test_unknowninteractions::UnknownInteractionsAjarProtocol::FlexibleEventUnion>&) = 0;
    virtual void FlexibleEventTable(::fidl::Event<::test_unknowninteractions::UnknownInteractionsAjarProtocol::FlexibleEventTable>&) = 0;
    virtual void FlexibleEventErr(::fidl::Event<::test_unknowninteractions::UnknownInteractionsAjarProtocol::FlexibleEventErr>&) = 0;
    virtual void FlexibleEventFieldsErr(::fidl::Event<::test_unknowninteractions::UnknownInteractionsAjarProtocol::FlexibleEventFieldsErr>&) = 0;
    virtual void FlexibleEventUnionErr(::fidl::Event<::test_unknowninteractions::UnknownInteractionsAjarProtocol::FlexibleEventUnionErr>&) = 0;
    virtual void FlexibleEventTableErr(::fidl::Event<::test_unknowninteractions::UnknownInteractionsAjarProtocol::FlexibleEventTableErr>&) = 0;
};

template<>
class ::fidl::AsyncEventHandler<::test_unknowninteractions::UnknownInteractionsAjarProtocol>
    : public ::fidl::internal::NaturalEventHandlerInterface<::test_unknowninteractions::UnknownInteractionsAjarProtocol>, public ::fidl::internal::AsyncEventHandler {
 public:
  AsyncEventHandler() = default;
    void StrictEvent(::fidl::Event<::test_unknowninteractions::UnknownInteractionsAjarProtocol::StrictEvent>&) override {}
    void StrictEventFields(::fidl::Event<::test_unknowninteractions::UnknownInteractionsAjarProtocol::StrictEventFields>&) override {}
    void StrictEventUnion(::fidl::Event<::test_unknowninteractions::UnknownInteractionsAjarProtocol::StrictEventUnion>&) override {}
    void StrictEventTable(::fidl::Event<::test_unknowninteractions::UnknownInteractionsAjarProtocol::StrictEventTable>&) override {}
    void StrictEventErr(::fidl::Event<::test_unknowninteractions::UnknownInteractionsAjarProtocol::StrictEventErr>&) override {}
    void StrictEventFieldsErr(::fidl::Event<::test_unknowninteractions::UnknownInteractionsAjarProtocol::StrictEventFieldsErr>&) override {}
    void StrictEventUnionErr(::fidl::Event<::test_unknowninteractions::UnknownInteractionsAjarProtocol::StrictEventUnionErr>&) override {}
    void StrictEventTableErr(::fidl::Event<::test_unknowninteractions::UnknownInteractionsAjarProtocol::StrictEventTableErr>&) override {}
    void FlexibleEvent(::fidl::Event<::test_unknowninteractions::UnknownInteractionsAjarProtocol::FlexibleEvent>&) override {}
    void FlexibleEventFields(::fidl::Event<::test_unknowninteractions::UnknownInteractionsAjarProtocol::FlexibleEventFields>&) override {}
    void FlexibleEventUnion(::fidl::Event<::test_unknowninteractions::UnknownInteractionsAjarProtocol::FlexibleEventUnion>&) override {}
    void FlexibleEventTable(::fidl::Event<::test_unknowninteractions::UnknownInteractionsAjarProtocol::FlexibleEventTable>&) override {}
    void FlexibleEventErr(::fidl::Event<::test_unknowninteractions::UnknownInteractionsAjarProtocol::FlexibleEventErr>&) override {}
    void FlexibleEventFieldsErr(::fidl::Event<::test_unknowninteractions::UnknownInteractionsAjarProtocol::FlexibleEventFieldsErr>&) override {}
    void FlexibleEventUnionErr(::fidl::Event<::test_unknowninteractions::UnknownInteractionsAjarProtocol::FlexibleEventUnionErr>&) override {}
    void FlexibleEventTableErr(::fidl::Event<::test_unknowninteractions::UnknownInteractionsAjarProtocol::FlexibleEventTableErr>&) override {}
};


  template<>
  class ::fidl::SyncEventHandler<::test_unknowninteractions::UnknownInteractionsAjarProtocol>
      : public ::fidl::internal::NaturalEventHandlerInterface<::test_unknowninteractions::UnknownInteractionsAjarProtocol>, public ::fidl::internal::SyncEventHandler {
   public:
    SyncEventHandler() = default;

    // Handle all possible events defined in this protocol.
    // Blocks to consume exactly one message from the channel, then call the corresponding virtual
    // method.
    ::fidl::Status HandleOneEvent(
        ::fidl::UnownedClientEnd<::test_unknowninteractions::UnknownInteractionsAjarProtocol> client_end);
  };

template <>
class ::fidl::internal::NaturalEventDispatcher<::test_unknowninteractions::UnknownInteractionsAjarProtocol> final :
    public ::fidl::internal::IncomingEventDispatcher<::fidl::internal::NaturalEventHandlerInterface<::test_unknowninteractions::UnknownInteractionsAjarProtocol>> {
 public:
  explicit NaturalEventDispatcher(::fidl::internal::NaturalEventHandlerInterface<::test_unknowninteractions::UnknownInteractionsAjarProtocol>* event_handler)
      : IncomingEventDispatcher(event_handler) {}
    ::fidl::Status DispatchEvent(
        ::fidl::IncomingHeaderAndMessage& msg,
        internal::MessageStorageViewBase* storage_view) override;
};

#endif  // __Fuchsia__




#ifdef __Fuchsia__
template<>
class ::fidl::internal::NaturalWeakEventSender<::test_unknowninteractions::UnknownInteractionsAjarProtocol> : public ::fidl::internal::WeakEventSenderBase {
 public:
  using WeakEventSenderBase::WeakEventSenderBase;

    ::fitx::result<::fidl::Error> StrictEvent();

  
    ::fitx::result<::fidl::Error> StrictEventFields(const ::fidl::Event<::test_unknowninteractions::UnknownInteractionsAjarProtocol::StrictEventFields>& payload);

  
    ::fitx::result<::fidl::Error> StrictEventUnion(const ::fidl::Event<::test_unknowninteractions::UnknownInteractionsAjarProtocol::StrictEventUnion>& payload);

  
    ::fitx::result<::fidl::Error> StrictEventTable(const ::fidl::Event<::test_unknowninteractions::UnknownInteractionsAjarProtocol::StrictEventTable>& payload);

  
    ::fitx::result<::fidl::Error> StrictEventErr(const ::fidl::Event<::test_unknowninteractions::UnknownInteractionsAjarProtocol::StrictEventErr>& payload);

  
    ::fitx::result<::fidl::Error> StrictEventFieldsErr(const ::fidl::Event<::test_unknowninteractions::UnknownInteractionsAjarProtocol::StrictEventFieldsErr>& payload);

  
    ::fitx::result<::fidl::Error> StrictEventUnionErr(const ::fidl::Event<::test_unknowninteractions::UnknownInteractionsAjarProtocol::StrictEventUnionErr>& payload);

  
    ::fitx::result<::fidl::Error> StrictEventTableErr(const ::fidl::Event<::test_unknowninteractions::UnknownInteractionsAjarProtocol::StrictEventTableErr>& payload);

  
    ::fitx::result<::fidl::Error> FlexibleEvent();

  
    ::fitx::result<::fidl::Error> FlexibleEventFields(const ::fidl::Event<::test_unknowninteractions::UnknownInteractionsAjarProtocol::FlexibleEventFields>& payload);

  
    ::fitx::result<::fidl::Error> FlexibleEventUnion(const ::fidl::Event<::test_unknowninteractions::UnknownInteractionsAjarProtocol::FlexibleEventUnion>& payload);

  
    ::fitx::result<::fidl::Error> FlexibleEventTable(const ::fidl::Event<::test_unknowninteractions::UnknownInteractionsAjarProtocol::FlexibleEventTable>& payload);

  
    ::fitx::result<::fidl::Error> FlexibleEventErr(const ::fidl::Event<::test_unknowninteractions::UnknownInteractionsAjarProtocol::FlexibleEventErr>& payload);

  
    ::fitx::result<::fidl::Error> FlexibleEventFieldsErr(const ::fidl::Event<::test_unknowninteractions::UnknownInteractionsAjarProtocol::FlexibleEventFieldsErr>& payload);

  
    ::fitx::result<::fidl::Error> FlexibleEventUnionErr(const ::fidl::Event<::test_unknowninteractions::UnknownInteractionsAjarProtocol::FlexibleEventUnionErr>& payload);

  
    ::fitx::result<::fidl::Error> FlexibleEventTableErr(const ::fidl::Event<::test_unknowninteractions::UnknownInteractionsAjarProtocol::FlexibleEventTableErr>& payload);

  
};

template<>
class ::fidl::internal::NaturalEventSender<::test_unknowninteractions::UnknownInteractionsAjarProtocol>
    : public ::fidl::internal::SyncEndpointManagedVeneer<::fidl::internal::NaturalEventSender<::test_unknowninteractions::UnknownInteractionsAjarProtocol>> {
 public:
  using SyncEndpointManagedVeneer::SyncEndpointManagedVeneer;

    ::fitx::result<::fidl::Error> StrictEvent();

  
    ::fitx::result<::fidl::Error> StrictEventFields(const ::fidl::Event<::test_unknowninteractions::UnknownInteractionsAjarProtocol::StrictEventFields>& payload);

  
    ::fitx::result<::fidl::Error> StrictEventUnion(const ::fidl::Event<::test_unknowninteractions::UnknownInteractionsAjarProtocol::StrictEventUnion>& payload);

  
    ::fitx::result<::fidl::Error> StrictEventTable(const ::fidl::Event<::test_unknowninteractions::UnknownInteractionsAjarProtocol::StrictEventTable>& payload);

  
    ::fitx::result<::fidl::Error> StrictEventErr(const ::fidl::Event<::test_unknowninteractions::UnknownInteractionsAjarProtocol::StrictEventErr>& payload);

  
    ::fitx::result<::fidl::Error> StrictEventFieldsErr(const ::fidl::Event<::test_unknowninteractions::UnknownInteractionsAjarProtocol::StrictEventFieldsErr>& payload);

  
    ::fitx::result<::fidl::Error> StrictEventUnionErr(const ::fidl::Event<::test_unknowninteractions::UnknownInteractionsAjarProtocol::StrictEventUnionErr>& payload);

  
    ::fitx::result<::fidl::Error> StrictEventTableErr(const ::fidl::Event<::test_unknowninteractions::UnknownInteractionsAjarProtocol::StrictEventTableErr>& payload);

  
    ::fitx::result<::fidl::Error> FlexibleEvent();

  
    ::fitx::result<::fidl::Error> FlexibleEventFields(const ::fidl::Event<::test_unknowninteractions::UnknownInteractionsAjarProtocol::FlexibleEventFields>& payload);

  
    ::fitx::result<::fidl::Error> FlexibleEventUnion(const ::fidl::Event<::test_unknowninteractions::UnknownInteractionsAjarProtocol::FlexibleEventUnion>& payload);

  
    ::fitx::result<::fidl::Error> FlexibleEventTable(const ::fidl::Event<::test_unknowninteractions::UnknownInteractionsAjarProtocol::FlexibleEventTable>& payload);

  
    ::fitx::result<::fidl::Error> FlexibleEventErr(const ::fidl::Event<::test_unknowninteractions::UnknownInteractionsAjarProtocol::FlexibleEventErr>& payload);

  
    ::fitx::result<::fidl::Error> FlexibleEventFieldsErr(const ::fidl::Event<::test_unknowninteractions::UnknownInteractionsAjarProtocol::FlexibleEventFieldsErr>& payload);

  
    ::fitx::result<::fidl::Error> FlexibleEventUnionErr(const ::fidl::Event<::test_unknowninteractions::UnknownInteractionsAjarProtocol::FlexibleEventUnionErr>& payload);

  
    ::fitx::result<::fidl::Error> FlexibleEventTableErr(const ::fidl::Event<::test_unknowninteractions::UnknownInteractionsAjarProtocol::FlexibleEventTableErr>& payload);

  
};

#endif  // __Fuchsia__


#ifdef __Fuchsia__



template <>
class ::fidl::Request<::test_unknowninteractions::UnknownInteractionsAjarProtocol::StrictOneWay> final {
 public:
};

template <>
struct ::fidl::internal::MessageTraits<::fidl::Request<::test_unknowninteractions::UnknownInteractionsAjarProtocol::StrictOneWay>> final {
 public:
  static constexpr bool kHasPayload = false;
};

#endif  // __Fuchsia__

#ifdef __Fuchsia__



template <>
class ::fidl::Request<::test_unknowninteractions::UnknownInteractionsAjarProtocol::FlexibleOneWay> final {
 public:
};

template <>
struct ::fidl::internal::MessageTraits<::fidl::Request<::test_unknowninteractions::UnknownInteractionsAjarProtocol::FlexibleOneWay>> final {
 public:
  static constexpr bool kHasPayload = false;
};

#endif  // __Fuchsia__

#ifdef __Fuchsia__



template <>
class ::fidl::Request<::test_unknowninteractions::UnknownInteractionsAjarProtocol::StrictTwoWay> final {
 public:
};

template <>
struct ::fidl::internal::MessageTraits<::fidl::Request<::test_unknowninteractions::UnknownInteractionsAjarProtocol::StrictTwoWay>> final {
 public:
  static constexpr bool kHasPayload = false;
};

#endif  // __Fuchsia__

#ifdef __Fuchsia__



template <>
class ::fidl::Request<::test_unknowninteractions::UnknownInteractionsAjarProtocol::StrictTwoWayFields> final {
 public:
};

template <>
struct ::fidl::internal::MessageTraits<::fidl::Request<::test_unknowninteractions::UnknownInteractionsAjarProtocol::StrictTwoWayFields>> final {
 public:
  static constexpr bool kHasPayload = false;
};

#endif  // __Fuchsia__

#ifdef __Fuchsia__



template <>
class ::fidl::Request<::test_unknowninteractions::UnknownInteractionsAjarProtocol::StrictTwoWayUnion> final {
 public:
};

template <>
struct ::fidl::internal::MessageTraits<::fidl::Request<::test_unknowninteractions::UnknownInteractionsAjarProtocol::StrictTwoWayUnion>> final {
 public:
  static constexpr bool kHasPayload = false;
};

#endif  // __Fuchsia__

#ifdef __Fuchsia__



template <>
class ::fidl::Request<::test_unknowninteractions::UnknownInteractionsAjarProtocol::StrictTwoWayTable> final {
 public:
};

template <>
struct ::fidl::internal::MessageTraits<::fidl::Request<::test_unknowninteractions::UnknownInteractionsAjarProtocol::StrictTwoWayTable>> final {
 public:
  static constexpr bool kHasPayload = false;
};

#endif  // __Fuchsia__

#ifdef __Fuchsia__



template <>
class ::fidl::Request<::test_unknowninteractions::UnknownInteractionsAjarProtocol::StrictTwoWayErr> final {
 public:
};

template <>
struct ::fidl::internal::MessageTraits<::fidl::Request<::test_unknowninteractions::UnknownInteractionsAjarProtocol::StrictTwoWayErr>> final {
 public:
  static constexpr bool kHasPayload = false;
};

#endif  // __Fuchsia__

#ifdef __Fuchsia__



template <>
class ::fidl::Request<::test_unknowninteractions::UnknownInteractionsAjarProtocol::StrictTwoWayFieldsErr> final {
 public:
};

template <>
struct ::fidl::internal::MessageTraits<::fidl::Request<::test_unknowninteractions::UnknownInteractionsAjarProtocol::StrictTwoWayFieldsErr>> final {
 public:
  static constexpr bool kHasPayload = false;
};

#endif  // __Fuchsia__

#ifdef __Fuchsia__



template <>
class ::fidl::Request<::test_unknowninteractions::UnknownInteractionsAjarProtocol::StrictTwoWayUnionErr> final {
 public:
};

template <>
struct ::fidl::internal::MessageTraits<::fidl::Request<::test_unknowninteractions::UnknownInteractionsAjarProtocol::StrictTwoWayUnionErr>> final {
 public:
  static constexpr bool kHasPayload = false;
};

#endif  // __Fuchsia__

#ifdef __Fuchsia__



template <>
class ::fidl::Request<::test_unknowninteractions::UnknownInteractionsAjarProtocol::StrictTwoWayTableErr> final {
 public:
};

template <>
struct ::fidl::internal::MessageTraits<::fidl::Request<::test_unknowninteractions::UnknownInteractionsAjarProtocol::StrictTwoWayTableErr>> final {
 public:
  static constexpr bool kHasPayload = false;
};

#endif  // __Fuchsia__



template<>
class ::fidl::internal::NaturalCompleterBase<::test_unknowninteractions::UnknownInteractionsAjarProtocol::StrictTwoWay> : public ::fidl::CompleterBase {
 public:
  void Reply();

 protected:
  using ::fidl::CompleterBase::CompleterBase;
};


template<>
class ::fidl::internal::NaturalCompleterBase<::test_unknowninteractions::UnknownInteractionsAjarProtocol::StrictTwoWayFields> : public ::fidl::CompleterBase {
 public:
  void Reply(const ::fidl::Response<::test_unknowninteractions::UnknownInteractionsAjarProtocol::StrictTwoWayFields>& response);

 protected:
  using ::fidl::CompleterBase::CompleterBase;
};


template<>
class ::fidl::internal::NaturalCompleterBase<::test_unknowninteractions::UnknownInteractionsAjarProtocol::StrictTwoWayUnion> : public ::fidl::CompleterBase {
 public:
  void Reply(const ::fidl::Response<::test_unknowninteractions::UnknownInteractionsAjarProtocol::StrictTwoWayUnion>& response);

 protected:
  using ::fidl::CompleterBase::CompleterBase;
};


template<>
class ::fidl::internal::NaturalCompleterBase<::test_unknowninteractions::UnknownInteractionsAjarProtocol::StrictTwoWayTable> : public ::fidl::CompleterBase {
 public:
  void Reply(const ::fidl::Response<::test_unknowninteractions::UnknownInteractionsAjarProtocol::StrictTwoWayTable>& response);

 protected:
  using ::fidl::CompleterBase::CompleterBase;
};


template<>
class ::fidl::internal::NaturalCompleterBase<::test_unknowninteractions::UnknownInteractionsAjarProtocol::StrictTwoWayErr> : public ::fidl::CompleterBase {
 public:
  void Reply(const ::fidl::Response<::test_unknowninteractions::UnknownInteractionsAjarProtocol::StrictTwoWayErr>& response);

 protected:
  using ::fidl::CompleterBase::CompleterBase;
};


template<>
class ::fidl::internal::NaturalCompleterBase<::test_unknowninteractions::UnknownInteractionsAjarProtocol::StrictTwoWayFieldsErr> : public ::fidl::CompleterBase {
 public:
  void Reply(const ::fidl::Response<::test_unknowninteractions::UnknownInteractionsAjarProtocol::StrictTwoWayFieldsErr>& response);

 protected:
  using ::fidl::CompleterBase::CompleterBase;
};


template<>
class ::fidl::internal::NaturalCompleterBase<::test_unknowninteractions::UnknownInteractionsAjarProtocol::StrictTwoWayUnionErr> : public ::fidl::CompleterBase {
 public:
  void Reply(const ::fidl::Response<::test_unknowninteractions::UnknownInteractionsAjarProtocol::StrictTwoWayUnionErr>& response);

 protected:
  using ::fidl::CompleterBase::CompleterBase;
};


template<>
class ::fidl::internal::NaturalCompleterBase<::test_unknowninteractions::UnknownInteractionsAjarProtocol::StrictTwoWayTableErr> : public ::fidl::CompleterBase {
 public:
  void Reply(const ::fidl::Response<::test_unknowninteractions::UnknownInteractionsAjarProtocol::StrictTwoWayTableErr>& response);

 protected:
  using ::fidl::CompleterBase::CompleterBase;
};

template<>
class ::fidl::Server<::test_unknowninteractions::UnknownInteractionsAjarProtocol> : public ::fidl::internal::IncomingMessageDispatcher, public ::fidl::UnknownMethodHandler<::test_unknowninteractions::UnknownInteractionsAjarProtocol> {
  public:
  Server() = default;
  virtual ~Server() = default;

  // The FIDL protocol type that is implemented by this server.
  using _EnclosingProtocol = ::test_unknowninteractions::UnknownInteractionsAjarProtocol;


  using StrictOneWayRequest = ::fidl::Request<::test_unknowninteractions::UnknownInteractionsAjarProtocol::StrictOneWay>;
  using StrictOneWayCompleter = ::fidl::internal::NaturalCompleter<::test_unknowninteractions::UnknownInteractionsAjarProtocol::StrictOneWay>;

  
  virtual void StrictOneWay(StrictOneWayRequest& request, StrictOneWayCompleter::Sync& completer
  )= 0;

  using FlexibleOneWayRequest = ::fidl::Request<::test_unknowninteractions::UnknownInteractionsAjarProtocol::FlexibleOneWay>;
  using FlexibleOneWayCompleter = ::fidl::internal::NaturalCompleter<::test_unknowninteractions::UnknownInteractionsAjarProtocol::FlexibleOneWay>;

  
  virtual void FlexibleOneWay(FlexibleOneWayRequest& request, FlexibleOneWayCompleter::Sync& completer
  )= 0;

  using StrictTwoWayRequest = ::fidl::Request<::test_unknowninteractions::UnknownInteractionsAjarProtocol::StrictTwoWay>;
  using StrictTwoWayCompleter = ::fidl::internal::NaturalCompleter<::test_unknowninteractions::UnknownInteractionsAjarProtocol::StrictTwoWay>;

  
  virtual void StrictTwoWay(StrictTwoWayRequest& request, StrictTwoWayCompleter::Sync& completer
  )= 0;

  using StrictTwoWayFieldsRequest = ::fidl::Request<::test_unknowninteractions::UnknownInteractionsAjarProtocol::StrictTwoWayFields>;
  using StrictTwoWayFieldsCompleter = ::fidl::internal::NaturalCompleter<::test_unknowninteractions::UnknownInteractionsAjarProtocol::StrictTwoWayFields>;

  
  virtual void StrictTwoWayFields(StrictTwoWayFieldsRequest& request, StrictTwoWayFieldsCompleter::Sync& completer
  )= 0;

  using StrictTwoWayUnionRequest = ::fidl::Request<::test_unknowninteractions::UnknownInteractionsAjarProtocol::StrictTwoWayUnion>;
  using StrictTwoWayUnionCompleter = ::fidl::internal::NaturalCompleter<::test_unknowninteractions::UnknownInteractionsAjarProtocol::StrictTwoWayUnion>;

  
  virtual void StrictTwoWayUnion(StrictTwoWayUnionRequest& request, StrictTwoWayUnionCompleter::Sync& completer
  )= 0;

  using StrictTwoWayTableRequest = ::fidl::Request<::test_unknowninteractions::UnknownInteractionsAjarProtocol::StrictTwoWayTable>;
  using StrictTwoWayTableCompleter = ::fidl::internal::NaturalCompleter<::test_unknowninteractions::UnknownInteractionsAjarProtocol::StrictTwoWayTable>;

  
  virtual void StrictTwoWayTable(StrictTwoWayTableRequest& request, StrictTwoWayTableCompleter::Sync& completer
  )= 0;

  using StrictTwoWayErrRequest = ::fidl::Request<::test_unknowninteractions::UnknownInteractionsAjarProtocol::StrictTwoWayErr>;
  using StrictTwoWayErrCompleter = ::fidl::internal::NaturalCompleter<::test_unknowninteractions::UnknownInteractionsAjarProtocol::StrictTwoWayErr>;

  
  virtual void StrictTwoWayErr(StrictTwoWayErrRequest& request, StrictTwoWayErrCompleter::Sync& completer
  )= 0;

  using StrictTwoWayFieldsErrRequest = ::fidl::Request<::test_unknowninteractions::UnknownInteractionsAjarProtocol::StrictTwoWayFieldsErr>;
  using StrictTwoWayFieldsErrCompleter = ::fidl::internal::NaturalCompleter<::test_unknowninteractions::UnknownInteractionsAjarProtocol::StrictTwoWayFieldsErr>;

  
  virtual void StrictTwoWayFieldsErr(StrictTwoWayFieldsErrRequest& request, StrictTwoWayFieldsErrCompleter::Sync& completer
  )= 0;

  using StrictTwoWayUnionErrRequest = ::fidl::Request<::test_unknowninteractions::UnknownInteractionsAjarProtocol::StrictTwoWayUnionErr>;
  using StrictTwoWayUnionErrCompleter = ::fidl::internal::NaturalCompleter<::test_unknowninteractions::UnknownInteractionsAjarProtocol::StrictTwoWayUnionErr>;

  
  virtual void StrictTwoWayUnionErr(StrictTwoWayUnionErrRequest& request, StrictTwoWayUnionErrCompleter::Sync& completer
  )= 0;

  using StrictTwoWayTableErrRequest = ::fidl::Request<::test_unknowninteractions::UnknownInteractionsAjarProtocol::StrictTwoWayTableErr>;
  using StrictTwoWayTableErrCompleter = ::fidl::internal::NaturalCompleter<::test_unknowninteractions::UnknownInteractionsAjarProtocol::StrictTwoWayTableErr>;

  
  virtual void StrictTwoWayTableErr(StrictTwoWayTableErrRequest& request, StrictTwoWayTableErrCompleter::Sync& completer
  )= 0;


  private:
  void dispatch_message(
    ::fidl::IncomingHeaderAndMessage&& msg, ::fidl::Transaction* txn,
    ::fidl::internal::MessageStorageViewBase* storage_view) final;
};

#ifdef __Fuchsia__


template<>
struct ::fidl::internal::NaturalServerDispatcher<::test_unknowninteractions::UnknownInteractionsAjarProtocol> final {
  NaturalServerDispatcher() = delete;
  static void Dispatch(::fidl::Server<::test_unknowninteractions::UnknownInteractionsAjarProtocol>* impl, ::fidl::IncomingHeaderAndMessage&& msg,
                       internal::MessageStorageViewBase* storage_view,
                       ::fidl::Transaction* txn);

 private:
  static const ::fidl::internal::MethodEntry entries_[];
  static const ::fidl::internal::MethodEntry* entries_end_;
  static const ::fidl::internal::UnknownInteractionHandlerEntry unknown_interaction_handler_entry_;

};

#endif  // __Fuchsia__





template<>
struct ::fidl::internal::NaturalMethodTypes<::test_unknowninteractions::UnknownInteractionsClosedProtocol::StrictTwoWay> {
  using Completer = fidl::Completer<::fidl::internal::NaturalCompleterBase<::test_unknowninteractions::UnknownInteractionsClosedProtocol::StrictTwoWay>>;

  using ResultCallback =
      ::fit::callback<void (::fidl::Result<::test_unknowninteractions::UnknownInteractionsClosedProtocol::StrictTwoWay>&)>;

  
    static constexpr bool HasApplicationError = false;
    static constexpr bool HasTransportError = false;
  

  
    static constexpr bool IsAbsentBody = true;
  
};



template<>
struct ::fidl::internal::NaturalMethodTypes<::test_unknowninteractions::UnknownInteractionsClosedProtocol::StrictTwoWayFields> {
  using Completer = fidl::Completer<::fidl::internal::NaturalCompleterBase<::test_unknowninteractions::UnknownInteractionsClosedProtocol::StrictTwoWayFields>>;

  using ResultCallback =
      ::fit::callback<void (::fidl::Result<::test_unknowninteractions::UnknownInteractionsClosedProtocol::StrictTwoWayFields>&)>;

  
    static constexpr bool HasApplicationError = false;
    static constexpr bool HasTransportError = false;
  

  
    static constexpr bool IsAbsentBody = false;
  
};



template<>
struct ::fidl::internal::NaturalMethodTypes<::test_unknowninteractions::UnknownInteractionsClosedProtocol::StrictTwoWayUnion> {
  using Completer = fidl::Completer<::fidl::internal::NaturalCompleterBase<::test_unknowninteractions::UnknownInteractionsClosedProtocol::StrictTwoWayUnion>>;

  using ResultCallback =
      ::fit::callback<void (::fidl::Result<::test_unknowninteractions::UnknownInteractionsClosedProtocol::StrictTwoWayUnion>&)>;

  
    static constexpr bool HasApplicationError = false;
    static constexpr bool HasTransportError = false;
  

  
    static constexpr bool IsAbsentBody = false;
  
};



template<>
struct ::fidl::internal::NaturalMethodTypes<::test_unknowninteractions::UnknownInteractionsClosedProtocol::StrictTwoWayTable> {
  using Completer = fidl::Completer<::fidl::internal::NaturalCompleterBase<::test_unknowninteractions::UnknownInteractionsClosedProtocol::StrictTwoWayTable>>;

  using ResultCallback =
      ::fit::callback<void (::fidl::Result<::test_unknowninteractions::UnknownInteractionsClosedProtocol::StrictTwoWayTable>&)>;

  
    static constexpr bool HasApplicationError = false;
    static constexpr bool HasTransportError = false;
  

  
    static constexpr bool IsAbsentBody = false;
  
};



template<>
struct ::fidl::internal::NaturalMethodTypes<::test_unknowninteractions::UnknownInteractionsClosedProtocol::StrictTwoWayErr> {
  using Completer = fidl::Completer<::fidl::internal::NaturalCompleterBase<::test_unknowninteractions::UnknownInteractionsClosedProtocol::StrictTwoWayErr>>;

  using ResultCallback =
      ::fit::callback<void (::fidl::Result<::test_unknowninteractions::UnknownInteractionsClosedProtocol::StrictTwoWayErr>&)>;

  
    static constexpr bool HasApplicationError = true;
    static constexpr bool HasTransportError = false;
    
      static constexpr bool IsEmptyStructPayload = true;
    
  

  
    static constexpr bool IsAbsentBody = false;
  
};



template<>
struct ::fidl::internal::NaturalMethodTypes<::test_unknowninteractions::UnknownInteractionsClosedProtocol::StrictTwoWayFieldsErr> {
  using Completer = fidl::Completer<::fidl::internal::NaturalCompleterBase<::test_unknowninteractions::UnknownInteractionsClosedProtocol::StrictTwoWayFieldsErr>>;

  using ResultCallback =
      ::fit::callback<void (::fidl::Result<::test_unknowninteractions::UnknownInteractionsClosedProtocol::StrictTwoWayFieldsErr>&)>;

  
    static constexpr bool HasApplicationError = true;
    static constexpr bool HasTransportError = false;
    
      static constexpr bool IsEmptyStructPayload = false;
    
  

  
    static constexpr bool IsAbsentBody = false;
  
};



template<>
struct ::fidl::internal::NaturalMethodTypes<::test_unknowninteractions::UnknownInteractionsClosedProtocol::StrictTwoWayUnionErr> {
  using Completer = fidl::Completer<::fidl::internal::NaturalCompleterBase<::test_unknowninteractions::UnknownInteractionsClosedProtocol::StrictTwoWayUnionErr>>;

  using ResultCallback =
      ::fit::callback<void (::fidl::Result<::test_unknowninteractions::UnknownInteractionsClosedProtocol::StrictTwoWayUnionErr>&)>;

  
    static constexpr bool HasApplicationError = true;
    static constexpr bool HasTransportError = false;
    
      static constexpr bool IsEmptyStructPayload = false;
    
  

  
    static constexpr bool IsAbsentBody = false;
  
};



template<>
struct ::fidl::internal::NaturalMethodTypes<::test_unknowninteractions::UnknownInteractionsClosedProtocol::StrictTwoWayTableErr> {
  using Completer = fidl::Completer<::fidl::internal::NaturalCompleterBase<::test_unknowninteractions::UnknownInteractionsClosedProtocol::StrictTwoWayTableErr>>;

  using ResultCallback =
      ::fit::callback<void (::fidl::Result<::test_unknowninteractions::UnknownInteractionsClosedProtocol::StrictTwoWayTableErr>&)>;

  
    static constexpr bool HasApplicationError = true;
    static constexpr bool HasTransportError = false;
    
      static constexpr bool IsEmptyStructPayload = false;
    
  

  
    static constexpr bool IsAbsentBody = false;
  
};
    
    
    
    
    
    namespace test_unknowninteractions {
__LOCAL extern "C" const fidl_type_t test_unknowninteractions_UnknownInteractionsClosedProtocolStrictTwoWayFieldsResponseTable;
    
    
__LOCAL extern "C" const fidl_type_t test_unknowninteractions_UnknownInteractionsClosedProtocolStrictTwoWayUnionResponseTable;
    
    
__LOCAL extern "C" const fidl_type_t test_unknowninteractions_UnknownInteractionsClosedProtocolStrictTwoWayTableResponseTable;
    
    
__LOCAL extern "C" const fidl_type_t test_unknowninteractions_UnknownInteractionsClosedProtocolStrictTwoWayErrTopResponseTable;
    
    
__LOCAL extern "C" const fidl_type_t test_unknowninteractions_UnknownInteractionsClosedProtocolStrictTwoWayFieldsErrTopResponseTable;
    
    
__LOCAL extern "C" const fidl_type_t test_unknowninteractions_UnknownInteractionsClosedProtocolStrictTwoWayUnionErrTopResponseTable;
    
    
__LOCAL extern "C" const fidl_type_t test_unknowninteractions_UnknownInteractionsClosedProtocolStrictTwoWayTableErrTopResponseTable;
    
    
    
    
__LOCAL extern "C" const fidl_type_t test_unknowninteractions_UnknownInteractionsClosedProtocolStrictEventFieldsRequestTable;
    
    
__LOCAL extern "C" const fidl_type_t test_unknowninteractions_UnknownInteractionsClosedProtocolStrictEventUnionRequestTable;
    
    
__LOCAL extern "C" const fidl_type_t test_unknowninteractions_UnknownInteractionsClosedProtocolStrictEventTableRequestTable;
    
    
__LOCAL extern "C" const fidl_type_t test_unknowninteractions_UnknownInteractionsClosedProtocolStrictEventErrRequestTable;
    
    
__LOCAL extern "C" const fidl_type_t test_unknowninteractions_UnknownInteractionsClosedProtocolStrictEventFieldsErrRequestTable;
    
    
__LOCAL extern "C" const fidl_type_t test_unknowninteractions_UnknownInteractionsClosedProtocolStrictEventUnionErrRequestTable;
    
    
__LOCAL extern "C" const fidl_type_t test_unknowninteractions_UnknownInteractionsClosedProtocolStrictEventTableErrRequestTable;

#ifdef __Fuchsia__
}  // namespace test_unknowninteractions


template <>
class ::fidl::Event<::test_unknowninteractions::UnknownInteractionsClosedProtocol::StrictEvent> final {
 public:
};

template <>
struct ::fidl::internal::MessageTraits<::fidl::Event<::test_unknowninteractions::UnknownInteractionsClosedProtocol::StrictEvent>> final {
 public:
  static constexpr bool kHasPayload = false;
};namespace test_unknowninteractions {
}  // namespace test_unknowninteractions


template <>
class ::fidl::Event<::test_unknowninteractions::UnknownInteractionsClosedProtocol::StrictEventFields> final : public ::test_unknowninteractions::UnknownInteractionsClosedProtocolStrictEventFieldsRequest  {
 public:
      using ::test_unknowninteractions::UnknownInteractionsClosedProtocolStrictEventFieldsRequest::UnknownInteractionsClosedProtocolStrictEventFieldsRequest;
      Event(::test_unknowninteractions::UnknownInteractionsClosedProtocolStrictEventFieldsRequest v) : UnknownInteractionsClosedProtocolStrictEventFieldsRequest(std::move(v)) {}
};

template <>
struct ::fidl::internal::MessageTraits<::fidl::Event<::test_unknowninteractions::UnknownInteractionsClosedProtocol::StrictEventFields>> final {
 public:
  static constexpr bool kHasPayload = true;
  using Payload = ::test_unknowninteractions::UnknownInteractionsClosedProtocolStrictEventFieldsRequest;
};namespace test_unknowninteractions {
}  // namespace test_unknowninteractions


template <>
class ::fidl::Event<::test_unknowninteractions::UnknownInteractionsClosedProtocol::StrictEventUnion> final : public ::test_unknowninteractions::UnknownInteractionsClosedProtocolStrictEventUnionRequest  {
 public:
      using ::test_unknowninteractions::UnknownInteractionsClosedProtocolStrictEventUnionRequest::UnknownInteractionsClosedProtocolStrictEventUnionRequest;
      Event(::test_unknowninteractions::UnknownInteractionsClosedProtocolStrictEventUnionRequest v) : UnknownInteractionsClosedProtocolStrictEventUnionRequest(std::move(v)) {}
};

template <>
struct ::fidl::internal::MessageTraits<::fidl::Event<::test_unknowninteractions::UnknownInteractionsClosedProtocol::StrictEventUnion>> final {
 public:
  static constexpr bool kHasPayload = true;
  using Payload = ::test_unknowninteractions::UnknownInteractionsClosedProtocolStrictEventUnionRequest;
};namespace test_unknowninteractions {
}  // namespace test_unknowninteractions


template <>
class ::fidl::Event<::test_unknowninteractions::UnknownInteractionsClosedProtocol::StrictEventTable> final : public ::test_unknowninteractions::UnknownInteractionsClosedProtocolStrictEventTableRequest  {
 public:
      using ::test_unknowninteractions::UnknownInteractionsClosedProtocolStrictEventTableRequest::UnknownInteractionsClosedProtocolStrictEventTableRequest;
      Event(::test_unknowninteractions::UnknownInteractionsClosedProtocolStrictEventTableRequest v) : UnknownInteractionsClosedProtocolStrictEventTableRequest(std::move(v)) {}
};

template <>
struct ::fidl::internal::MessageTraits<::fidl::Event<::test_unknowninteractions::UnknownInteractionsClosedProtocol::StrictEventTable>> final {
 public:
  static constexpr bool kHasPayload = true;
  using Payload = ::test_unknowninteractions::UnknownInteractionsClosedProtocolStrictEventTableRequest;
};namespace test_unknowninteractions {
}  // namespace test_unknowninteractions


template <>
class ::fidl::Event<::test_unknowninteractions::UnknownInteractionsClosedProtocol::StrictEventErr> final : public ::fitx::result<int32_t>  {
 public:
      using ::fitx::result<int32_t>::result;
      Event(::fitx::result<int32_t> v) : result(std::move(v)) {}
      Event() = delete;
};

template <>
struct ::fidl::internal::MessageTraits<::fidl::Event<::test_unknowninteractions::UnknownInteractionsClosedProtocol::StrictEventErr>> final {
 public:
  static constexpr bool kHasPayload = true;
  using Payload = ::test_unknowninteractions::UnknownInteractionsClosedProtocolStrictEventErrRequest;
};
template <>
class ::fidl::internal::NaturalMessageConverter <::fidl::Event<::test_unknowninteractions::UnknownInteractionsClosedProtocol::StrictEventErr>> {
  using DomainObject = ::test_unknowninteractions::UnknownInteractionsClosedProtocolStrictEventErrRequest;

 public:
  static ::fidl::Event<::test_unknowninteractions::UnknownInteractionsClosedProtocol::StrictEventErr> FromDomainObject(DomainObject o) {
    if (o.result().err().has_value()) {
      return ::fitx::error(std::move(o.result().err().value()));
    } else {
      ZX_DEBUG_ASSERT(o.result().response().has_value());
        return ::fitx::ok();
    }
  }

  static DomainObject IntoDomainObject(const ::fidl::Event<::test_unknowninteractions::UnknownInteractionsClosedProtocol::StrictEventErr>& m) {
    if (m.is_error()) {
      return DomainObject{ { .result = ::test_unknowninteractions::UnknownInteractionsClosedProtocolStrictEventErrResult::WithErr(m.error_value()) } };
    } else {
        return DomainObject{ { .result = ::test_unknowninteractions::UnknownInteractionsClosedProtocolStrictEventErrResult::WithResponse({}) } };
    }
  }
};namespace test_unknowninteractions {
}  // namespace test_unknowninteractions


template <>
class ::fidl::Event<::test_unknowninteractions::UnknownInteractionsClosedProtocol::StrictEventFieldsErr> final : public ::fitx::result<int32_t, ::test_unknowninteractions::UnknownInteractionsClosedProtocolStrictEventFieldsErrResponse>  {
 public:
      using ::fitx::result<int32_t, ::test_unknowninteractions::UnknownInteractionsClosedProtocolStrictEventFieldsErrResponse>::result;
      Event(::fitx::result<int32_t, ::test_unknowninteractions::UnknownInteractionsClosedProtocolStrictEventFieldsErrResponse> v) : result(std::move(v)) {}
      Event() = delete;
};

template <>
struct ::fidl::internal::MessageTraits<::fidl::Event<::test_unknowninteractions::UnknownInteractionsClosedProtocol::StrictEventFieldsErr>> final {
 public:
  static constexpr bool kHasPayload = true;
  using Payload = ::test_unknowninteractions::UnknownInteractionsClosedProtocolStrictEventFieldsErrRequest;
};
template <>
class ::fidl::internal::NaturalMessageConverter <::fidl::Event<::test_unknowninteractions::UnknownInteractionsClosedProtocol::StrictEventFieldsErr>> {
  using DomainObject = ::test_unknowninteractions::UnknownInteractionsClosedProtocolStrictEventFieldsErrRequest;

 public:
  static ::fidl::Event<::test_unknowninteractions::UnknownInteractionsClosedProtocol::StrictEventFieldsErr> FromDomainObject(DomainObject o) {
    if (o.result().err().has_value()) {
      return ::fitx::error(std::move(o.result().err().value()));
    } else {
      ZX_DEBUG_ASSERT(o.result().response().has_value());
        return ::fitx::ok(std::move(o.result().response().value()));
    }
  }

  static DomainObject IntoDomainObject(const ::fidl::Event<::test_unknowninteractions::UnknownInteractionsClosedProtocol::StrictEventFieldsErr>& m) {
    if (m.is_error()) {
      return DomainObject{ { .result = ::test_unknowninteractions::UnknownInteractionsClosedProtocolStrictEventFieldsErrResult::WithErr(m.error_value()) } };
    } else {
        return DomainObject{ { .result = ::test_unknowninteractions::UnknownInteractionsClosedProtocolStrictEventFieldsErrResult::WithResponse(std::move(m.value())) } };
    }
  }
};namespace test_unknowninteractions {
}  // namespace test_unknowninteractions


template <>
class ::fidl::Event<::test_unknowninteractions::UnknownInteractionsClosedProtocol::StrictEventUnionErr> final : public ::fitx::result<int32_t, ::test_unknowninteractions::UnknownInteractionsClosedProtocolStrictEventUnionErrResponse>  {
 public:
      using ::fitx::result<int32_t, ::test_unknowninteractions::UnknownInteractionsClosedProtocolStrictEventUnionErrResponse>::result;
      Event(::fitx::result<int32_t, ::test_unknowninteractions::UnknownInteractionsClosedProtocolStrictEventUnionErrResponse> v) : result(std::move(v)) {}
      Event() = delete;
};

template <>
struct ::fidl::internal::MessageTraits<::fidl::Event<::test_unknowninteractions::UnknownInteractionsClosedProtocol::StrictEventUnionErr>> final {
 public:
  static constexpr bool kHasPayload = true;
  using Payload = ::test_unknowninteractions::UnknownInteractionsClosedProtocolStrictEventUnionErrRequest;
};
template <>
class ::fidl::internal::NaturalMessageConverter <::fidl::Event<::test_unknowninteractions::UnknownInteractionsClosedProtocol::StrictEventUnionErr>> {
  using DomainObject = ::test_unknowninteractions::UnknownInteractionsClosedProtocolStrictEventUnionErrRequest;

 public:
  static ::fidl::Event<::test_unknowninteractions::UnknownInteractionsClosedProtocol::StrictEventUnionErr> FromDomainObject(DomainObject o) {
    if (o.result().err().has_value()) {
      return ::fitx::error(std::move(o.result().err().value()));
    } else {
      ZX_DEBUG_ASSERT(o.result().response().has_value());
        return ::fitx::ok(std::move(o.result().response().value()));
    }
  }

  static DomainObject IntoDomainObject(const ::fidl::Event<::test_unknowninteractions::UnknownInteractionsClosedProtocol::StrictEventUnionErr>& m) {
    if (m.is_error()) {
      return DomainObject{ { .result = ::test_unknowninteractions::UnknownInteractionsClosedProtocolStrictEventUnionErrResult::WithErr(m.error_value()) } };
    } else {
        return DomainObject{ { .result = ::test_unknowninteractions::UnknownInteractionsClosedProtocolStrictEventUnionErrResult::WithResponse(std::move(m.value())) } };
    }
  }
};namespace test_unknowninteractions {
}  // namespace test_unknowninteractions


template <>
class ::fidl::Event<::test_unknowninteractions::UnknownInteractionsClosedProtocol::StrictEventTableErr> final : public ::fitx::result<int32_t, ::test_unknowninteractions::UnknownInteractionsClosedProtocolStrictEventTableErrResponse>  {
 public:
      using ::fitx::result<int32_t, ::test_unknowninteractions::UnknownInteractionsClosedProtocolStrictEventTableErrResponse>::result;
      Event(::fitx::result<int32_t, ::test_unknowninteractions::UnknownInteractionsClosedProtocolStrictEventTableErrResponse> v) : result(std::move(v)) {}
      Event() = delete;
};

template <>
struct ::fidl::internal::MessageTraits<::fidl::Event<::test_unknowninteractions::UnknownInteractionsClosedProtocol::StrictEventTableErr>> final {
 public:
  static constexpr bool kHasPayload = true;
  using Payload = ::test_unknowninteractions::UnknownInteractionsClosedProtocolStrictEventTableErrRequest;
};
template <>
class ::fidl::internal::NaturalMessageConverter <::fidl::Event<::test_unknowninteractions::UnknownInteractionsClosedProtocol::StrictEventTableErr>> {
  using DomainObject = ::test_unknowninteractions::UnknownInteractionsClosedProtocolStrictEventTableErrRequest;

 public:
  static ::fidl::Event<::test_unknowninteractions::UnknownInteractionsClosedProtocol::StrictEventTableErr> FromDomainObject(DomainObject o) {
    if (o.result().err().has_value()) {
      return ::fitx::error(std::move(o.result().err().value()));
    } else {
      ZX_DEBUG_ASSERT(o.result().response().has_value());
        return ::fitx::ok(std::move(o.result().response().value()));
    }
  }

  static DomainObject IntoDomainObject(const ::fidl::Event<::test_unknowninteractions::UnknownInteractionsClosedProtocol::StrictEventTableErr>& m) {
    if (m.is_error()) {
      return DomainObject{ { .result = ::test_unknowninteractions::UnknownInteractionsClosedProtocolStrictEventTableErrResult::WithErr(m.error_value()) } };
    } else {
        return DomainObject{ { .result = ::test_unknowninteractions::UnknownInteractionsClosedProtocolStrictEventTableErrResult::WithResponse(std::move(m.value())) } };
    }
  }
};namespace test_unknowninteractions {
}  // namespace test_unknowninteractions


template <>
class ::fidl::Response<::test_unknowninteractions::UnknownInteractionsClosedProtocol::StrictTwoWay> final {
 public:
};

template <>
struct ::fidl::internal::MessageTraits<::fidl::Response<::test_unknowninteractions::UnknownInteractionsClosedProtocol::StrictTwoWay>> final {
 public:
  static constexpr bool kHasPayload = false;
};namespace test_unknowninteractions {
}  // namespace test_unknowninteractions

template <>
class ::fidl::Result<::test_unknowninteractions::UnknownInteractionsClosedProtocol::StrictTwoWay> final : public ::fitx::result<::fidl::Error> {
 public:
  using ::fitx::result<::fidl::Error>::result;

 protected:
  Result() = default;
};



template <>
class ::fidl::Response<::test_unknowninteractions::UnknownInteractionsClosedProtocol::StrictTwoWayFields> final : public ::test_unknowninteractions::UnknownInteractionsClosedProtocolStrictTwoWayFieldsResponse  {
 public:
      using ::test_unknowninteractions::UnknownInteractionsClosedProtocolStrictTwoWayFieldsResponse::UnknownInteractionsClosedProtocolStrictTwoWayFieldsResponse;
      Response(::test_unknowninteractions::UnknownInteractionsClosedProtocolStrictTwoWayFieldsResponse v) : UnknownInteractionsClosedProtocolStrictTwoWayFieldsResponse(std::move(v)) {}
};

template <>
struct ::fidl::internal::MessageTraits<::fidl::Response<::test_unknowninteractions::UnknownInteractionsClosedProtocol::StrictTwoWayFields>> final {
 public:
  static constexpr bool kHasPayload = true;
  using Payload = ::test_unknowninteractions::UnknownInteractionsClosedProtocolStrictTwoWayFieldsResponse;
};


template <>
class ::fidl::Result<::test_unknowninteractions::UnknownInteractionsClosedProtocol::StrictTwoWayFields> final : public ::fitx::result<::fidl::Error, ::test_unknowninteractions::UnknownInteractionsClosedProtocolStrictTwoWayFieldsResponse> {
 public:
  using ::fitx::result<::fidl::Error, ::test_unknowninteractions::UnknownInteractionsClosedProtocolStrictTwoWayFieldsResponse>::result;

 protected:
  Result() = default;
};



template <>
class ::fidl::Response<::test_unknowninteractions::UnknownInteractionsClosedProtocol::StrictTwoWayUnion> final : public ::test_unknowninteractions::UnknownInteractionsClosedProtocolStrictTwoWayUnionResponse  {
 public:
      using ::test_unknowninteractions::UnknownInteractionsClosedProtocolStrictTwoWayUnionResponse::UnknownInteractionsClosedProtocolStrictTwoWayUnionResponse;
      Response(::test_unknowninteractions::UnknownInteractionsClosedProtocolStrictTwoWayUnionResponse v) : UnknownInteractionsClosedProtocolStrictTwoWayUnionResponse(std::move(v)) {}
};

template <>
struct ::fidl::internal::MessageTraits<::fidl::Response<::test_unknowninteractions::UnknownInteractionsClosedProtocol::StrictTwoWayUnion>> final {
 public:
  static constexpr bool kHasPayload = true;
  using Payload = ::test_unknowninteractions::UnknownInteractionsClosedProtocolStrictTwoWayUnionResponse;
};


template <>
class ::fidl::Result<::test_unknowninteractions::UnknownInteractionsClosedProtocol::StrictTwoWayUnion> final : public ::fitx::result<::fidl::Error, ::test_unknowninteractions::UnknownInteractionsClosedProtocolStrictTwoWayUnionResponse> {
 public:
  using ::fitx::result<::fidl::Error, ::test_unknowninteractions::UnknownInteractionsClosedProtocolStrictTwoWayUnionResponse>::result;

 protected:
  Result() = default;
};



template <>
class ::fidl::Response<::test_unknowninteractions::UnknownInteractionsClosedProtocol::StrictTwoWayTable> final : public ::test_unknowninteractions::UnknownInteractionsClosedProtocolStrictTwoWayTableResponse  {
 public:
      using ::test_unknowninteractions::UnknownInteractionsClosedProtocolStrictTwoWayTableResponse::UnknownInteractionsClosedProtocolStrictTwoWayTableResponse;
      Response(::test_unknowninteractions::UnknownInteractionsClosedProtocolStrictTwoWayTableResponse v) : UnknownInteractionsClosedProtocolStrictTwoWayTableResponse(std::move(v)) {}
};

template <>
struct ::fidl::internal::MessageTraits<::fidl::Response<::test_unknowninteractions::UnknownInteractionsClosedProtocol::StrictTwoWayTable>> final {
 public:
  static constexpr bool kHasPayload = true;
  using Payload = ::test_unknowninteractions::UnknownInteractionsClosedProtocolStrictTwoWayTableResponse;
};


template <>
class ::fidl::Result<::test_unknowninteractions::UnknownInteractionsClosedProtocol::StrictTwoWayTable> final : public ::fitx::result<::fidl::Error, ::test_unknowninteractions::UnknownInteractionsClosedProtocolStrictTwoWayTableResponse> {
 public:
  using ::fitx::result<::fidl::Error, ::test_unknowninteractions::UnknownInteractionsClosedProtocolStrictTwoWayTableResponse>::result;

 protected:
  Result() = default;
};



template <>
class ::fidl::Response<::test_unknowninteractions::UnknownInteractionsClosedProtocol::StrictTwoWayErr> final : public ::fitx::result<int32_t>  {
 public:
      using ::fitx::result<int32_t>::result;
      Response(::fitx::result<int32_t> v) : result(std::move(v)) {}
      Response() = delete;
};

template <>
struct ::fidl::internal::MessageTraits<::fidl::Response<::test_unknowninteractions::UnknownInteractionsClosedProtocol::StrictTwoWayErr>> final {
 public:
  static constexpr bool kHasPayload = true;
  using Payload = ::test_unknowninteractions::UnknownInteractionsClosedProtocolStrictTwoWayErrTopResponse;
};
template <>
class ::fidl::internal::NaturalMessageConverter <::fidl::Response<::test_unknowninteractions::UnknownInteractionsClosedProtocol::StrictTwoWayErr>> {
  using DomainObject = ::test_unknowninteractions::UnknownInteractionsClosedProtocolStrictTwoWayErrTopResponse;

 public:
  
  
  static ::fidl::Response<::test_unknowninteractions::UnknownInteractionsClosedProtocol::StrictTwoWayErr> FromDomainObject(DomainObject o) {
    if (o.result().err().has_value()) {
      return ::fitx::error(std::move(o.result().err().value()));
    } else {
      ZX_DEBUG_ASSERT(o.result().response().has_value());
        return ::fitx::ok();
    }
  }
  

  static DomainObject IntoDomainObject(const ::fidl::Response<::test_unknowninteractions::UnknownInteractionsClosedProtocol::StrictTwoWayErr>& m) {
    if (m.is_error()) {
      return DomainObject{ { .result = ::test_unknowninteractions::UnknownInteractionsClosedProtocolStrictTwoWayErrResult::WithErr(m.error_value()) } };
    } else {
        return DomainObject{ { .result = ::test_unknowninteractions::UnknownInteractionsClosedProtocolStrictTwoWayErrResult::WithResponse({}) } };
    }
  }
};


template <>
class ::fidl::Result<::test_unknowninteractions::UnknownInteractionsClosedProtocol::StrictTwoWayErr> final : public ::fitx::result<::fidl::AnyErrorIn<::test_unknowninteractions::UnknownInteractionsClosedProtocol::StrictTwoWayErr>> {
 public:
  using ::fitx::result<::fidl::AnyErrorIn<::test_unknowninteractions::UnknownInteractionsClosedProtocol::StrictTwoWayErr>>::result;

 protected:
  Result() = default;
};



template <>
class ::fidl::Response<::test_unknowninteractions::UnknownInteractionsClosedProtocol::StrictTwoWayFieldsErr> final : public ::fitx::result<int32_t, ::test_unknowninteractions::UnknownInteractionsClosedProtocolStrictTwoWayFieldsErrResponse>  {
 public:
      using ::fitx::result<int32_t, ::test_unknowninteractions::UnknownInteractionsClosedProtocolStrictTwoWayFieldsErrResponse>::result;
      Response(::fitx::result<int32_t, ::test_unknowninteractions::UnknownInteractionsClosedProtocolStrictTwoWayFieldsErrResponse> v) : result(std::move(v)) {}
      Response() = delete;
};

template <>
struct ::fidl::internal::MessageTraits<::fidl::Response<::test_unknowninteractions::UnknownInteractionsClosedProtocol::StrictTwoWayFieldsErr>> final {
 public:
  static constexpr bool kHasPayload = true;
  using Payload = ::test_unknowninteractions::UnknownInteractionsClosedProtocolStrictTwoWayFieldsErrTopResponse;
};
template <>
class ::fidl::internal::NaturalMessageConverter <::fidl::Response<::test_unknowninteractions::UnknownInteractionsClosedProtocol::StrictTwoWayFieldsErr>> {
  using DomainObject = ::test_unknowninteractions::UnknownInteractionsClosedProtocolStrictTwoWayFieldsErrTopResponse;

 public:
  
  
  static ::fidl::Response<::test_unknowninteractions::UnknownInteractionsClosedProtocol::StrictTwoWayFieldsErr> FromDomainObject(DomainObject o) {
    if (o.result().err().has_value()) {
      return ::fitx::error(std::move(o.result().err().value()));
    } else {
      ZX_DEBUG_ASSERT(o.result().response().has_value());
        return ::fitx::ok(std::move(o.result().response().value()));
    }
  }
  

  static DomainObject IntoDomainObject(const ::fidl::Response<::test_unknowninteractions::UnknownInteractionsClosedProtocol::StrictTwoWayFieldsErr>& m) {
    if (m.is_error()) {
      return DomainObject{ { .result = ::test_unknowninteractions::UnknownInteractionsClosedProtocolStrictTwoWayFieldsErrResult::WithErr(m.error_value()) } };
    } else {
        return DomainObject{ { .result = ::test_unknowninteractions::UnknownInteractionsClosedProtocolStrictTwoWayFieldsErrResult::WithResponse(std::move(m.value())) } };
    }
  }
};


template <>
class ::fidl::Result<::test_unknowninteractions::UnknownInteractionsClosedProtocol::StrictTwoWayFieldsErr> final : public ::fitx::result<::fidl::AnyErrorIn<::test_unknowninteractions::UnknownInteractionsClosedProtocol::StrictTwoWayFieldsErr>, ::test_unknowninteractions::UnknownInteractionsClosedProtocolStrictTwoWayFieldsErrResponse> {
 public:
  using ::fitx::result<::fidl::AnyErrorIn<::test_unknowninteractions::UnknownInteractionsClosedProtocol::StrictTwoWayFieldsErr>, ::test_unknowninteractions::UnknownInteractionsClosedProtocolStrictTwoWayFieldsErrResponse>::result;

 protected:
  Result() = default;
};



template <>
class ::fidl::Response<::test_unknowninteractions::UnknownInteractionsClosedProtocol::StrictTwoWayUnionErr> final : public ::fitx::result<int32_t, ::test_unknowninteractions::UnknownInteractionsClosedProtocolStrictTwoWayUnionErrResponse>  {
 public:
      using ::fitx::result<int32_t, ::test_unknowninteractions::UnknownInteractionsClosedProtocolStrictTwoWayUnionErrResponse>::result;
      Response(::fitx::result<int32_t, ::test_unknowninteractions::UnknownInteractionsClosedProtocolStrictTwoWayUnionErrResponse> v) : result(std::move(v)) {}
      Response() = delete;
};

template <>
struct ::fidl::internal::MessageTraits<::fidl::Response<::test_unknowninteractions::UnknownInteractionsClosedProtocol::StrictTwoWayUnionErr>> final {
 public:
  static constexpr bool kHasPayload = true;
  using Payload = ::test_unknowninteractions::UnknownInteractionsClosedProtocolStrictTwoWayUnionErrTopResponse;
};
template <>
class ::fidl::internal::NaturalMessageConverter <::fidl::Response<::test_unknowninteractions::UnknownInteractionsClosedProtocol::StrictTwoWayUnionErr>> {
  using DomainObject = ::test_unknowninteractions::UnknownInteractionsClosedProtocolStrictTwoWayUnionErrTopResponse;

 public:
  
  
  static ::fidl::Response<::test_unknowninteractions::UnknownInteractionsClosedProtocol::StrictTwoWayUnionErr> FromDomainObject(DomainObject o) {
    if (o.result().err().has_value()) {
      return ::fitx::error(std::move(o.result().err().value()));
    } else {
      ZX_DEBUG_ASSERT(o.result().response().has_value());
        return ::fitx::ok(std::move(o.result().response().value()));
    }
  }
  

  static DomainObject IntoDomainObject(const ::fidl::Response<::test_unknowninteractions::UnknownInteractionsClosedProtocol::StrictTwoWayUnionErr>& m) {
    if (m.is_error()) {
      return DomainObject{ { .result = ::test_unknowninteractions::UnknownInteractionsClosedProtocolStrictTwoWayUnionErrResult::WithErr(m.error_value()) } };
    } else {
        return DomainObject{ { .result = ::test_unknowninteractions::UnknownInteractionsClosedProtocolStrictTwoWayUnionErrResult::WithResponse(std::move(m.value())) } };
    }
  }
};


template <>
class ::fidl::Result<::test_unknowninteractions::UnknownInteractionsClosedProtocol::StrictTwoWayUnionErr> final : public ::fitx::result<::fidl::AnyErrorIn<::test_unknowninteractions::UnknownInteractionsClosedProtocol::StrictTwoWayUnionErr>, ::test_unknowninteractions::UnknownInteractionsClosedProtocolStrictTwoWayUnionErrResponse> {
 public:
  using ::fitx::result<::fidl::AnyErrorIn<::test_unknowninteractions::UnknownInteractionsClosedProtocol::StrictTwoWayUnionErr>, ::test_unknowninteractions::UnknownInteractionsClosedProtocolStrictTwoWayUnionErrResponse>::result;

 protected:
  Result() = default;
};



template <>
class ::fidl::Response<::test_unknowninteractions::UnknownInteractionsClosedProtocol::StrictTwoWayTableErr> final : public ::fitx::result<int32_t, ::test_unknowninteractions::UnknownInteractionsClosedProtocolStrictTwoWayTableErrResponse>  {
 public:
      using ::fitx::result<int32_t, ::test_unknowninteractions::UnknownInteractionsClosedProtocolStrictTwoWayTableErrResponse>::result;
      Response(::fitx::result<int32_t, ::test_unknowninteractions::UnknownInteractionsClosedProtocolStrictTwoWayTableErrResponse> v) : result(std::move(v)) {}
      Response() = delete;
};

template <>
struct ::fidl::internal::MessageTraits<::fidl::Response<::test_unknowninteractions::UnknownInteractionsClosedProtocol::StrictTwoWayTableErr>> final {
 public:
  static constexpr bool kHasPayload = true;
  using Payload = ::test_unknowninteractions::UnknownInteractionsClosedProtocolStrictTwoWayTableErrTopResponse;
};
template <>
class ::fidl::internal::NaturalMessageConverter <::fidl::Response<::test_unknowninteractions::UnknownInteractionsClosedProtocol::StrictTwoWayTableErr>> {
  using DomainObject = ::test_unknowninteractions::UnknownInteractionsClosedProtocolStrictTwoWayTableErrTopResponse;

 public:
  
  
  static ::fidl::Response<::test_unknowninteractions::UnknownInteractionsClosedProtocol::StrictTwoWayTableErr> FromDomainObject(DomainObject o) {
    if (o.result().err().has_value()) {
      return ::fitx::error(std::move(o.result().err().value()));
    } else {
      ZX_DEBUG_ASSERT(o.result().response().has_value());
        return ::fitx::ok(std::move(o.result().response().value()));
    }
  }
  

  static DomainObject IntoDomainObject(const ::fidl::Response<::test_unknowninteractions::UnknownInteractionsClosedProtocol::StrictTwoWayTableErr>& m) {
    if (m.is_error()) {
      return DomainObject{ { .result = ::test_unknowninteractions::UnknownInteractionsClosedProtocolStrictTwoWayTableErrResult::WithErr(m.error_value()) } };
    } else {
        return DomainObject{ { .result = ::test_unknowninteractions::UnknownInteractionsClosedProtocolStrictTwoWayTableErrResult::WithResponse(std::move(m.value())) } };
    }
  }
};


template <>
class ::fidl::Result<::test_unknowninteractions::UnknownInteractionsClosedProtocol::StrictTwoWayTableErr> final : public ::fitx::result<::fidl::AnyErrorIn<::test_unknowninteractions::UnknownInteractionsClosedProtocol::StrictTwoWayTableErr>, ::test_unknowninteractions::UnknownInteractionsClosedProtocolStrictTwoWayTableErrResponse> {
 public:
  using ::fitx::result<::fidl::AnyErrorIn<::test_unknowninteractions::UnknownInteractionsClosedProtocol::StrictTwoWayTableErr>, ::test_unknowninteractions::UnknownInteractionsClosedProtocolStrictTwoWayTableErrResponse>::result;

 protected:
  Result() = default;
};


template<>
class ::fidl::internal::NaturalClientImpl<::test_unknowninteractions::UnknownInteractionsClosedProtocol> final : public ::fidl::internal::NaturalClientBase {
 public:
  using NaturalClientBase::NaturalClientBase;
  ::fidl::internal::NaturalThenable<::test_unknowninteractions::UnknownInteractionsClosedProtocol::StrictTwoWay> StrictTwoWay() const;

  ::fidl::internal::NaturalThenable<::test_unknowninteractions::UnknownInteractionsClosedProtocol::StrictTwoWayFields> StrictTwoWayFields() const;

  ::fidl::internal::NaturalThenable<::test_unknowninteractions::UnknownInteractionsClosedProtocol::StrictTwoWayUnion> StrictTwoWayUnion() const;

  ::fidl::internal::NaturalThenable<::test_unknowninteractions::UnknownInteractionsClosedProtocol::StrictTwoWayTable> StrictTwoWayTable() const;

  ::fidl::internal::NaturalThenable<::test_unknowninteractions::UnknownInteractionsClosedProtocol::StrictTwoWayErr> StrictTwoWayErr() const;

  ::fidl::internal::NaturalThenable<::test_unknowninteractions::UnknownInteractionsClosedProtocol::StrictTwoWayFieldsErr> StrictTwoWayFieldsErr() const;

  ::fidl::internal::NaturalThenable<::test_unknowninteractions::UnknownInteractionsClosedProtocol::StrictTwoWayUnionErr> StrictTwoWayUnionErr() const;

  ::fidl::internal::NaturalThenable<::test_unknowninteractions::UnknownInteractionsClosedProtocol::StrictTwoWayTableErr> StrictTwoWayTableErr() const;

  ::fitx::result<::fidl::Error> StrictOneWay() const;

};namespace test_unknowninteractions {

#endif  // __Fuchsia__

}  // namespace test_unknowninteractions

#ifdef __Fuchsia__


template <>
class ::fidl::internal::NaturalSyncClientImpl<::test_unknowninteractions::UnknownInteractionsClosedProtocol> final
    : public ::fidl::internal::SyncEndpointManagedVeneer<::fidl::internal::NaturalSyncClientImpl<::test_unknowninteractions::UnknownInteractionsClosedProtocol>> {
 public:
  
    
    ::fidl::Result<::test_unknowninteractions::UnknownInteractionsClosedProtocol::StrictTwoWay> StrictTwoWay();

  
    
    ::fidl::Result<::test_unknowninteractions::UnknownInteractionsClosedProtocol::StrictTwoWayFields> StrictTwoWayFields();

  
    
    ::fidl::Result<::test_unknowninteractions::UnknownInteractionsClosedProtocol::StrictTwoWayUnion> StrictTwoWayUnion();

  
    
    ::fidl::Result<::test_unknowninteractions::UnknownInteractionsClosedProtocol::StrictTwoWayTable> StrictTwoWayTable();

  
    
    ::fidl::Result<::test_unknowninteractions::UnknownInteractionsClosedProtocol::StrictTwoWayErr> StrictTwoWayErr();

  
    
    ::fidl::Result<::test_unknowninteractions::UnknownInteractionsClosedProtocol::StrictTwoWayFieldsErr> StrictTwoWayFieldsErr();

  
    
    ::fidl::Result<::test_unknowninteractions::UnknownInteractionsClosedProtocol::StrictTwoWayUnionErr> StrictTwoWayUnionErr();

  
    
    ::fidl::Result<::test_unknowninteractions::UnknownInteractionsClosedProtocol::StrictTwoWayTableErr> StrictTwoWayTableErr();

  

  
    
    ::fitx::result<::fidl::Error> StrictOneWay();

  

 private:
  ::fidl::UnownedClientEnd<::test_unknowninteractions::UnknownInteractionsClosedProtocol> _client_end() const {
    return ::fidl::UnownedClientEnd<::test_unknowninteractions::UnknownInteractionsClosedProtocol>(
      _transport().get<::fidl::internal::ChannelTransport>());
  }
};

#endif  // __Fuchsia__



#ifdef __Fuchsia__

template<>
class ::fidl::internal::NaturalEventHandlerInterface<::test_unknowninteractions::UnknownInteractionsClosedProtocol> : public ::fidl::internal::BaseEventHandlerInterface {
 public:
  NaturalEventHandlerInterface() = default;
  virtual ~NaturalEventHandlerInterface() = default;
    virtual void StrictEvent(::fidl::Event<::test_unknowninteractions::UnknownInteractionsClosedProtocol::StrictEvent>&) = 0;
    virtual void StrictEventFields(::fidl::Event<::test_unknowninteractions::UnknownInteractionsClosedProtocol::StrictEventFields>&) = 0;
    virtual void StrictEventUnion(::fidl::Event<::test_unknowninteractions::UnknownInteractionsClosedProtocol::StrictEventUnion>&) = 0;
    virtual void StrictEventTable(::fidl::Event<::test_unknowninteractions::UnknownInteractionsClosedProtocol::StrictEventTable>&) = 0;
    virtual void StrictEventErr(::fidl::Event<::test_unknowninteractions::UnknownInteractionsClosedProtocol::StrictEventErr>&) = 0;
    virtual void StrictEventFieldsErr(::fidl::Event<::test_unknowninteractions::UnknownInteractionsClosedProtocol::StrictEventFieldsErr>&) = 0;
    virtual void StrictEventUnionErr(::fidl::Event<::test_unknowninteractions::UnknownInteractionsClosedProtocol::StrictEventUnionErr>&) = 0;
    virtual void StrictEventTableErr(::fidl::Event<::test_unknowninteractions::UnknownInteractionsClosedProtocol::StrictEventTableErr>&) = 0;
};

template<>
class ::fidl::AsyncEventHandler<::test_unknowninteractions::UnknownInteractionsClosedProtocol>
    : public ::fidl::internal::NaturalEventHandlerInterface<::test_unknowninteractions::UnknownInteractionsClosedProtocol>, public ::fidl::internal::AsyncEventHandler {
 public:
  AsyncEventHandler() = default;
    void StrictEvent(::fidl::Event<::test_unknowninteractions::UnknownInteractionsClosedProtocol::StrictEvent>&) override {}
    void StrictEventFields(::fidl::Event<::test_unknowninteractions::UnknownInteractionsClosedProtocol::StrictEventFields>&) override {}
    void StrictEventUnion(::fidl::Event<::test_unknowninteractions::UnknownInteractionsClosedProtocol::StrictEventUnion>&) override {}
    void StrictEventTable(::fidl::Event<::test_unknowninteractions::UnknownInteractionsClosedProtocol::StrictEventTable>&) override {}
    void StrictEventErr(::fidl::Event<::test_unknowninteractions::UnknownInteractionsClosedProtocol::StrictEventErr>&) override {}
    void StrictEventFieldsErr(::fidl::Event<::test_unknowninteractions::UnknownInteractionsClosedProtocol::StrictEventFieldsErr>&) override {}
    void StrictEventUnionErr(::fidl::Event<::test_unknowninteractions::UnknownInteractionsClosedProtocol::StrictEventUnionErr>&) override {}
    void StrictEventTableErr(::fidl::Event<::test_unknowninteractions::UnknownInteractionsClosedProtocol::StrictEventTableErr>&) override {}
};


  template<>
  class ::fidl::SyncEventHandler<::test_unknowninteractions::UnknownInteractionsClosedProtocol>
      : public ::fidl::internal::NaturalEventHandlerInterface<::test_unknowninteractions::UnknownInteractionsClosedProtocol>, public ::fidl::internal::SyncEventHandler {
   public:
    SyncEventHandler() = default;

    // Handle all possible events defined in this protocol.
    // Blocks to consume exactly one message from the channel, then call the corresponding virtual
    // method.
    ::fidl::Status HandleOneEvent(
        ::fidl::UnownedClientEnd<::test_unknowninteractions::UnknownInteractionsClosedProtocol> client_end);
  };

template <>
class ::fidl::internal::NaturalEventDispatcher<::test_unknowninteractions::UnknownInteractionsClosedProtocol> final :
    public ::fidl::internal::IncomingEventDispatcher<::fidl::internal::NaturalEventHandlerInterface<::test_unknowninteractions::UnknownInteractionsClosedProtocol>> {
 public:
  explicit NaturalEventDispatcher(::fidl::internal::NaturalEventHandlerInterface<::test_unknowninteractions::UnknownInteractionsClosedProtocol>* event_handler)
      : IncomingEventDispatcher(event_handler) {}
    ::fidl::Status DispatchEvent(
        ::fidl::IncomingHeaderAndMessage& msg,
        internal::MessageStorageViewBase* storage_view) override;
};

#endif  // __Fuchsia__




#ifdef __Fuchsia__
template<>
class ::fidl::internal::NaturalWeakEventSender<::test_unknowninteractions::UnknownInteractionsClosedProtocol> : public ::fidl::internal::WeakEventSenderBase {
 public:
  using WeakEventSenderBase::WeakEventSenderBase;

    ::fitx::result<::fidl::Error> StrictEvent();

  
    ::fitx::result<::fidl::Error> StrictEventFields(const ::fidl::Event<::test_unknowninteractions::UnknownInteractionsClosedProtocol::StrictEventFields>& payload);

  
    ::fitx::result<::fidl::Error> StrictEventUnion(const ::fidl::Event<::test_unknowninteractions::UnknownInteractionsClosedProtocol::StrictEventUnion>& payload);

  
    ::fitx::result<::fidl::Error> StrictEventTable(const ::fidl::Event<::test_unknowninteractions::UnknownInteractionsClosedProtocol::StrictEventTable>& payload);

  
    ::fitx::result<::fidl::Error> StrictEventErr(const ::fidl::Event<::test_unknowninteractions::UnknownInteractionsClosedProtocol::StrictEventErr>& payload);

  
    ::fitx::result<::fidl::Error> StrictEventFieldsErr(const ::fidl::Event<::test_unknowninteractions::UnknownInteractionsClosedProtocol::StrictEventFieldsErr>& payload);

  
    ::fitx::result<::fidl::Error> StrictEventUnionErr(const ::fidl::Event<::test_unknowninteractions::UnknownInteractionsClosedProtocol::StrictEventUnionErr>& payload);

  
    ::fitx::result<::fidl::Error> StrictEventTableErr(const ::fidl::Event<::test_unknowninteractions::UnknownInteractionsClosedProtocol::StrictEventTableErr>& payload);

  
};

template<>
class ::fidl::internal::NaturalEventSender<::test_unknowninteractions::UnknownInteractionsClosedProtocol>
    : public ::fidl::internal::SyncEndpointManagedVeneer<::fidl::internal::NaturalEventSender<::test_unknowninteractions::UnknownInteractionsClosedProtocol>> {
 public:
  using SyncEndpointManagedVeneer::SyncEndpointManagedVeneer;

    ::fitx::result<::fidl::Error> StrictEvent();

  
    ::fitx::result<::fidl::Error> StrictEventFields(const ::fidl::Event<::test_unknowninteractions::UnknownInteractionsClosedProtocol::StrictEventFields>& payload);

  
    ::fitx::result<::fidl::Error> StrictEventUnion(const ::fidl::Event<::test_unknowninteractions::UnknownInteractionsClosedProtocol::StrictEventUnion>& payload);

  
    ::fitx::result<::fidl::Error> StrictEventTable(const ::fidl::Event<::test_unknowninteractions::UnknownInteractionsClosedProtocol::StrictEventTable>& payload);

  
    ::fitx::result<::fidl::Error> StrictEventErr(const ::fidl::Event<::test_unknowninteractions::UnknownInteractionsClosedProtocol::StrictEventErr>& payload);

  
    ::fitx::result<::fidl::Error> StrictEventFieldsErr(const ::fidl::Event<::test_unknowninteractions::UnknownInteractionsClosedProtocol::StrictEventFieldsErr>& payload);

  
    ::fitx::result<::fidl::Error> StrictEventUnionErr(const ::fidl::Event<::test_unknowninteractions::UnknownInteractionsClosedProtocol::StrictEventUnionErr>& payload);

  
    ::fitx::result<::fidl::Error> StrictEventTableErr(const ::fidl::Event<::test_unknowninteractions::UnknownInteractionsClosedProtocol::StrictEventTableErr>& payload);

  
};

#endif  // __Fuchsia__


#ifdef __Fuchsia__



template <>
class ::fidl::Request<::test_unknowninteractions::UnknownInteractionsClosedProtocol::StrictOneWay> final {
 public:
};

template <>
struct ::fidl::internal::MessageTraits<::fidl::Request<::test_unknowninteractions::UnknownInteractionsClosedProtocol::StrictOneWay>> final {
 public:
  static constexpr bool kHasPayload = false;
};

#endif  // __Fuchsia__

#ifdef __Fuchsia__



template <>
class ::fidl::Request<::test_unknowninteractions::UnknownInteractionsClosedProtocol::StrictTwoWay> final {
 public:
};

template <>
struct ::fidl::internal::MessageTraits<::fidl::Request<::test_unknowninteractions::UnknownInteractionsClosedProtocol::StrictTwoWay>> final {
 public:
  static constexpr bool kHasPayload = false;
};

#endif  // __Fuchsia__

#ifdef __Fuchsia__



template <>
class ::fidl::Request<::test_unknowninteractions::UnknownInteractionsClosedProtocol::StrictTwoWayFields> final {
 public:
};

template <>
struct ::fidl::internal::MessageTraits<::fidl::Request<::test_unknowninteractions::UnknownInteractionsClosedProtocol::StrictTwoWayFields>> final {
 public:
  static constexpr bool kHasPayload = false;
};

#endif  // __Fuchsia__

#ifdef __Fuchsia__



template <>
class ::fidl::Request<::test_unknowninteractions::UnknownInteractionsClosedProtocol::StrictTwoWayUnion> final {
 public:
};

template <>
struct ::fidl::internal::MessageTraits<::fidl::Request<::test_unknowninteractions::UnknownInteractionsClosedProtocol::StrictTwoWayUnion>> final {
 public:
  static constexpr bool kHasPayload = false;
};

#endif  // __Fuchsia__

#ifdef __Fuchsia__



template <>
class ::fidl::Request<::test_unknowninteractions::UnknownInteractionsClosedProtocol::StrictTwoWayTable> final {
 public:
};

template <>
struct ::fidl::internal::MessageTraits<::fidl::Request<::test_unknowninteractions::UnknownInteractionsClosedProtocol::StrictTwoWayTable>> final {
 public:
  static constexpr bool kHasPayload = false;
};

#endif  // __Fuchsia__

#ifdef __Fuchsia__



template <>
class ::fidl::Request<::test_unknowninteractions::UnknownInteractionsClosedProtocol::StrictTwoWayErr> final {
 public:
};

template <>
struct ::fidl::internal::MessageTraits<::fidl::Request<::test_unknowninteractions::UnknownInteractionsClosedProtocol::StrictTwoWayErr>> final {
 public:
  static constexpr bool kHasPayload = false;
};

#endif  // __Fuchsia__

#ifdef __Fuchsia__



template <>
class ::fidl::Request<::test_unknowninteractions::UnknownInteractionsClosedProtocol::StrictTwoWayFieldsErr> final {
 public:
};

template <>
struct ::fidl::internal::MessageTraits<::fidl::Request<::test_unknowninteractions::UnknownInteractionsClosedProtocol::StrictTwoWayFieldsErr>> final {
 public:
  static constexpr bool kHasPayload = false;
};

#endif  // __Fuchsia__

#ifdef __Fuchsia__



template <>
class ::fidl::Request<::test_unknowninteractions::UnknownInteractionsClosedProtocol::StrictTwoWayUnionErr> final {
 public:
};

template <>
struct ::fidl::internal::MessageTraits<::fidl::Request<::test_unknowninteractions::UnknownInteractionsClosedProtocol::StrictTwoWayUnionErr>> final {
 public:
  static constexpr bool kHasPayload = false;
};

#endif  // __Fuchsia__

#ifdef __Fuchsia__



template <>
class ::fidl::Request<::test_unknowninteractions::UnknownInteractionsClosedProtocol::StrictTwoWayTableErr> final {
 public:
};

template <>
struct ::fidl::internal::MessageTraits<::fidl::Request<::test_unknowninteractions::UnknownInteractionsClosedProtocol::StrictTwoWayTableErr>> final {
 public:
  static constexpr bool kHasPayload = false;
};

#endif  // __Fuchsia__



template<>
class ::fidl::internal::NaturalCompleterBase<::test_unknowninteractions::UnknownInteractionsClosedProtocol::StrictTwoWay> : public ::fidl::CompleterBase {
 public:
  void Reply();

 protected:
  using ::fidl::CompleterBase::CompleterBase;
};


template<>
class ::fidl::internal::NaturalCompleterBase<::test_unknowninteractions::UnknownInteractionsClosedProtocol::StrictTwoWayFields> : public ::fidl::CompleterBase {
 public:
  void Reply(const ::fidl::Response<::test_unknowninteractions::UnknownInteractionsClosedProtocol::StrictTwoWayFields>& response);

 protected:
  using ::fidl::CompleterBase::CompleterBase;
};


template<>
class ::fidl::internal::NaturalCompleterBase<::test_unknowninteractions::UnknownInteractionsClosedProtocol::StrictTwoWayUnion> : public ::fidl::CompleterBase {
 public:
  void Reply(const ::fidl::Response<::test_unknowninteractions::UnknownInteractionsClosedProtocol::StrictTwoWayUnion>& response);

 protected:
  using ::fidl::CompleterBase::CompleterBase;
};


template<>
class ::fidl::internal::NaturalCompleterBase<::test_unknowninteractions::UnknownInteractionsClosedProtocol::StrictTwoWayTable> : public ::fidl::CompleterBase {
 public:
  void Reply(const ::fidl::Response<::test_unknowninteractions::UnknownInteractionsClosedProtocol::StrictTwoWayTable>& response);

 protected:
  using ::fidl::CompleterBase::CompleterBase;
};


template<>
class ::fidl::internal::NaturalCompleterBase<::test_unknowninteractions::UnknownInteractionsClosedProtocol::StrictTwoWayErr> : public ::fidl::CompleterBase {
 public:
  void Reply(const ::fidl::Response<::test_unknowninteractions::UnknownInteractionsClosedProtocol::StrictTwoWayErr>& response);

 protected:
  using ::fidl::CompleterBase::CompleterBase;
};


template<>
class ::fidl::internal::NaturalCompleterBase<::test_unknowninteractions::UnknownInteractionsClosedProtocol::StrictTwoWayFieldsErr> : public ::fidl::CompleterBase {
 public:
  void Reply(const ::fidl::Response<::test_unknowninteractions::UnknownInteractionsClosedProtocol::StrictTwoWayFieldsErr>& response);

 protected:
  using ::fidl::CompleterBase::CompleterBase;
};


template<>
class ::fidl::internal::NaturalCompleterBase<::test_unknowninteractions::UnknownInteractionsClosedProtocol::StrictTwoWayUnionErr> : public ::fidl::CompleterBase {
 public:
  void Reply(const ::fidl::Response<::test_unknowninteractions::UnknownInteractionsClosedProtocol::StrictTwoWayUnionErr>& response);

 protected:
  using ::fidl::CompleterBase::CompleterBase;
};


template<>
class ::fidl::internal::NaturalCompleterBase<::test_unknowninteractions::UnknownInteractionsClosedProtocol::StrictTwoWayTableErr> : public ::fidl::CompleterBase {
 public:
  void Reply(const ::fidl::Response<::test_unknowninteractions::UnknownInteractionsClosedProtocol::StrictTwoWayTableErr>& response);

 protected:
  using ::fidl::CompleterBase::CompleterBase;
};

template<>
class ::fidl::Server<::test_unknowninteractions::UnknownInteractionsClosedProtocol> : public ::fidl::internal::IncomingMessageDispatcher {
  public:
  Server() = default;
  virtual ~Server() = default;

  // The FIDL protocol type that is implemented by this server.
  using _EnclosingProtocol = ::test_unknowninteractions::UnknownInteractionsClosedProtocol;


  using StrictOneWayRequest = ::fidl::Request<::test_unknowninteractions::UnknownInteractionsClosedProtocol::StrictOneWay>;
  using StrictOneWayCompleter = ::fidl::internal::NaturalCompleter<::test_unknowninteractions::UnknownInteractionsClosedProtocol::StrictOneWay>;

  
  virtual void StrictOneWay(StrictOneWayRequest& request, StrictOneWayCompleter::Sync& completer
  )= 0;

  using StrictTwoWayRequest = ::fidl::Request<::test_unknowninteractions::UnknownInteractionsClosedProtocol::StrictTwoWay>;
  using StrictTwoWayCompleter = ::fidl::internal::NaturalCompleter<::test_unknowninteractions::UnknownInteractionsClosedProtocol::StrictTwoWay>;

  
  virtual void StrictTwoWay(StrictTwoWayRequest& request, StrictTwoWayCompleter::Sync& completer
  )= 0;

  using StrictTwoWayFieldsRequest = ::fidl::Request<::test_unknowninteractions::UnknownInteractionsClosedProtocol::StrictTwoWayFields>;
  using StrictTwoWayFieldsCompleter = ::fidl::internal::NaturalCompleter<::test_unknowninteractions::UnknownInteractionsClosedProtocol::StrictTwoWayFields>;

  
  virtual void StrictTwoWayFields(StrictTwoWayFieldsRequest& request, StrictTwoWayFieldsCompleter::Sync& completer
  )= 0;

  using StrictTwoWayUnionRequest = ::fidl::Request<::test_unknowninteractions::UnknownInteractionsClosedProtocol::StrictTwoWayUnion>;
  using StrictTwoWayUnionCompleter = ::fidl::internal::NaturalCompleter<::test_unknowninteractions::UnknownInteractionsClosedProtocol::StrictTwoWayUnion>;

  
  virtual void StrictTwoWayUnion(StrictTwoWayUnionRequest& request, StrictTwoWayUnionCompleter::Sync& completer
  )= 0;

  using StrictTwoWayTableRequest = ::fidl::Request<::test_unknowninteractions::UnknownInteractionsClosedProtocol::StrictTwoWayTable>;
  using StrictTwoWayTableCompleter = ::fidl::internal::NaturalCompleter<::test_unknowninteractions::UnknownInteractionsClosedProtocol::StrictTwoWayTable>;

  
  virtual void StrictTwoWayTable(StrictTwoWayTableRequest& request, StrictTwoWayTableCompleter::Sync& completer
  )= 0;

  using StrictTwoWayErrRequest = ::fidl::Request<::test_unknowninteractions::UnknownInteractionsClosedProtocol::StrictTwoWayErr>;
  using StrictTwoWayErrCompleter = ::fidl::internal::NaturalCompleter<::test_unknowninteractions::UnknownInteractionsClosedProtocol::StrictTwoWayErr>;

  
  virtual void StrictTwoWayErr(StrictTwoWayErrRequest& request, StrictTwoWayErrCompleter::Sync& completer
  )= 0;

  using StrictTwoWayFieldsErrRequest = ::fidl::Request<::test_unknowninteractions::UnknownInteractionsClosedProtocol::StrictTwoWayFieldsErr>;
  using StrictTwoWayFieldsErrCompleter = ::fidl::internal::NaturalCompleter<::test_unknowninteractions::UnknownInteractionsClosedProtocol::StrictTwoWayFieldsErr>;

  
  virtual void StrictTwoWayFieldsErr(StrictTwoWayFieldsErrRequest& request, StrictTwoWayFieldsErrCompleter::Sync& completer
  )= 0;

  using StrictTwoWayUnionErrRequest = ::fidl::Request<::test_unknowninteractions::UnknownInteractionsClosedProtocol::StrictTwoWayUnionErr>;
  using StrictTwoWayUnionErrCompleter = ::fidl::internal::NaturalCompleter<::test_unknowninteractions::UnknownInteractionsClosedProtocol::StrictTwoWayUnionErr>;

  
  virtual void StrictTwoWayUnionErr(StrictTwoWayUnionErrRequest& request, StrictTwoWayUnionErrCompleter::Sync& completer
  )= 0;

  using StrictTwoWayTableErrRequest = ::fidl::Request<::test_unknowninteractions::UnknownInteractionsClosedProtocol::StrictTwoWayTableErr>;
  using StrictTwoWayTableErrCompleter = ::fidl::internal::NaturalCompleter<::test_unknowninteractions::UnknownInteractionsClosedProtocol::StrictTwoWayTableErr>;

  
  virtual void StrictTwoWayTableErr(StrictTwoWayTableErrRequest& request, StrictTwoWayTableErrCompleter::Sync& completer
  )= 0;


  private:
  void dispatch_message(
    ::fidl::IncomingHeaderAndMessage&& msg, ::fidl::Transaction* txn,
    ::fidl::internal::MessageStorageViewBase* storage_view) final;
};

#ifdef __Fuchsia__


template<>
struct ::fidl::internal::NaturalServerDispatcher<::test_unknowninteractions::UnknownInteractionsClosedProtocol> final {
  NaturalServerDispatcher() = delete;
  static void Dispatch(::fidl::Server<::test_unknowninteractions::UnknownInteractionsClosedProtocol>* impl, ::fidl::IncomingHeaderAndMessage&& msg,
                       internal::MessageStorageViewBase* storage_view,
                       ::fidl::Transaction* txn);

 private:
  static const ::fidl::internal::MethodEntry entries_[];
  static const ::fidl::internal::MethodEntry* entries_end_;
  static constexpr const ::fidl::internal::UnknownInteractionHandlerEntry& unknown_interaction_handler_entry_ =
      ::fidl::internal::UnknownInteractionHandlerEntry::kClosedProtocolHandlerEntry;

};

#endif  // __Fuchsia__





