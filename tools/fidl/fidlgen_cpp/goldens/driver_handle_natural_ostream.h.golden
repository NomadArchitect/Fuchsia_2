// WARNING: This file is machine generated by fidlgen.

#pragma once

#include <fidl/test.driverhandle/cpp/natural_types.h>
#include <lib/fidl/cpp/natural_ostream.h>

#include <iostream>

template <>
struct fidl::ostream::Formatter<::test_driverhandle::ClientEndWrapper> {
  static std::ostream& Format(std::ostream& os, const ::test_driverhandle::ClientEndWrapper& value);
};
std::ostream& operator<<(std::ostream& os, const ::test_driverhandle::ClientEndWrapper& value);
template <>
struct fidl::ostream::Formatter<::test_driverhandle::ServerEndWrapper> {
  static std::ostream& Format(std::ostream& os, const ::test_driverhandle::ServerEndWrapper& value);
};
std::ostream& operator<<(std::ostream& os, const ::test_driverhandle::ServerEndWrapper& value);
template <>
struct fidl::ostream::Formatter<::test_driverhandle::T> {
  static std::ostream& Format(std::ostream& os, const ::test_driverhandle::T& value);
};
std::ostream& operator<<(std::ostream& os, const ::test_driverhandle::T& value);
template <>
struct fidl::ostream::Formatter<::test_driverhandle::HandlesInProtocolSendHandlesRequest> {
  static std::ostream& Format(std::ostream& os, const ::test_driverhandle::HandlesInProtocolSendHandlesRequest& value);
};
std::ostream& operator<<(std::ostream& os, const ::test_driverhandle::HandlesInProtocolSendHandlesRequest& value);
template <>
struct fidl::ostream::Formatter<::fdf::ClientEnd<::test_driverhandle::DriverProtocol>> {
  static std::ostream& Format(std::ostream& os, const ::fdf::ClientEnd<::test_driverhandle::DriverProtocol>& value) {
    return os << "ClientEnd<"
              << "test_driverhandle::DriverProtocol"
              << ">(" << value.channel().get() << ")";
  }
};
inline std::ostream& operator<<(std::ostream& os, const ::fdf::ClientEnd<::test_driverhandle::DriverProtocol>& value) {
  return fidl::ostream::Formatter<::fdf::ClientEnd<::test_driverhandle::DriverProtocol>>::Format(os, value);
}

template <>
struct fidl::ostream::Formatter<::fdf::ServerEnd<::test_driverhandle::DriverProtocol>> {
  static std::ostream& Format(std::ostream& os, const ::fdf::ServerEnd<::test_driverhandle::DriverProtocol>& value) {
    return os << "ServerEnd<"
              << "test_driverhandle::DriverProtocol"
              << ">(" << value.channel().get() << ")";
  }
};
inline std::ostream& operator<<(std::ostream& os, const ::fdf::ServerEnd<::test_driverhandle::DriverProtocol>& value) {
  return fidl::ostream::Formatter<::fdf::ServerEnd<::test_driverhandle::DriverProtocol>>::Format(os, value);
}
template <>
struct fidl::ostream::Formatter<::fdf::ClientEnd<::test_driverhandle::HandlesInProtocol>> {
  static std::ostream& Format(std::ostream& os, const ::fdf::ClientEnd<::test_driverhandle::HandlesInProtocol>& value) {
    return os << "ClientEnd<"
              << "test_driverhandle::HandlesInProtocol"
              << ">(" << value.channel().get() << ")";
  }
};
inline std::ostream& operator<<(std::ostream& os, const ::fdf::ClientEnd<::test_driverhandle::HandlesInProtocol>& value) {
  return fidl::ostream::Formatter<::fdf::ClientEnd<::test_driverhandle::HandlesInProtocol>>::Format(os, value);
}

template <>
struct fidl::ostream::Formatter<::fdf::ServerEnd<::test_driverhandle::HandlesInProtocol>> {
  static std::ostream& Format(std::ostream& os, const ::fdf::ServerEnd<::test_driverhandle::HandlesInProtocol>& value) {
    return os << "ServerEnd<"
              << "test_driverhandle::HandlesInProtocol"
              << ">(" << value.channel().get() << ")";
  }
};
inline std::ostream& operator<<(std::ostream& os, const ::fdf::ServerEnd<::test_driverhandle::HandlesInProtocol>& value) {
  return fidl::ostream::Formatter<::fdf::ServerEnd<::test_driverhandle::HandlesInProtocol>>::Format(os, value);
}
