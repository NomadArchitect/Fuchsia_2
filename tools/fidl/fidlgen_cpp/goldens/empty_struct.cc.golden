// WARNING: This file is machine generated by fidlgen_cpp.

#include <test/emptystruct/cpp/fidl_v2.h>

namespace test_emptystruct {
[[maybe_unused]] constexpr inline uint64_t kEmptyProtocol_Send_Ordinal =
    1378773277029173000lu;
[[maybe_unused]] constexpr inline uint64_t kEmptyProtocol_Receive_Ordinal =
    2301564782476583487lu;
[[maybe_unused]] constexpr inline uint64_t
    kEmptyProtocol_SendAndReceive_Ordinal = 534401212734647530lu;

#ifdef __Fuchsia__
}  // namespace test_emptystruct
void fidl::internal::NaturalClientImpl<::test_emptystruct::EmptyProtocol>::
    SendAndReceive(
        ::test_emptystruct::EmptyProtocolSendAndReceiveRequest&& payload,
        ::fidl::ClientCallback<
            ::test_emptystruct::EmptyProtocol::SendAndReceive>&& _callback)
        const {
  ::fidl::Encoder _encoder{
      ::test_emptystruct::kEmptyProtocol_SendAndReceive_Ordinal};
  return messenger().TwoWay(
      &::test_emptystruct::
          test_emptystruct_EmptyProtocolSendAndReceiveRequestMessageTable,
      ::fidl::internal::EncodeTransactionalMessageWithoutValidating(
          _encoder, std::move(payload)),
      ::fidl::internal::MakeResponseContext<
          ::fidl::Response<::test_emptystruct::EmptyProtocol::SendAndReceive>,
          ::fidl::ClientCallback<
              ::test_emptystruct::EmptyProtocol::SendAndReceive>>(
          ::test_emptystruct::kEmptyProtocol_SendAndReceive_Ordinal,
          std::move(_callback)));
}
void fidl::internal::NaturalClientImpl<::test_emptystruct::EmptyProtocol>::
    SendAndReceive(
        ::test_emptystruct::EmptyProtocolSendAndReceiveRequest&& payload,
        ::fidl::ClientResponseCallback<
            ::test_emptystruct::EmptyProtocol::SendAndReceive>&& _callback)
        const {
  ::fidl::Encoder _encoder{
      ::test_emptystruct::kEmptyProtocol_SendAndReceive_Ordinal};
  return messenger().TwoWay(
      &::test_emptystruct::
          test_emptystruct_EmptyProtocolSendAndReceiveRequestMessageTable,
      ::fidl::internal::EncodeTransactionalMessageWithoutValidating(
          _encoder, std::move(payload)),
      ::fidl::internal::MakeResponseContext<
          ::fidl::Response<::test_emptystruct::EmptyProtocol::SendAndReceive>,
          ::fidl::ClientResponseCallback<
              ::test_emptystruct::EmptyProtocol::SendAndReceive>>(
          ::test_emptystruct::kEmptyProtocol_SendAndReceive_Ordinal,
          std::move(_callback)));
}

::fitx::result<::fidl::Error>
fidl::internal::NaturalClientImpl<::test_emptystruct::EmptyProtocol>::Send(
    ::test_emptystruct::EmptyProtocolSendRequest&& payload) const {
  ::fidl::Encoder _encoder{::test_emptystruct::kEmptyProtocol_Send_Ordinal};
  ::fidl::Result result = messenger().OneWay(
      &::test_emptystruct::
          test_emptystruct_EmptyProtocolSendRequestMessageTable,
      ::fidl::internal::EncodeTransactionalMessageWithoutValidating(
          _encoder, std::move(payload)));
  return ::fidl::internal::ToFitxResult(result);
}
namespace test_emptystruct {
#endif  // __Fuchsia__

}  // namespace test_emptystruct
#ifdef __Fuchsia__

std::optional<::fidl::UnbindInfo> fidl::internal::
    NaturalEventDispatcher<::test_emptystruct::EmptyProtocol>::DispatchEvent(
        ::fidl::IncomingMessage& msg,
        ::fidl::internal::IncomingTransportContext transport_context) {
  switch (msg.header()->ordinal) {
    case ::test_emptystruct::kEmptyProtocol_Receive_Ordinal: {
      ::fitx::result<::fidl::Error,
                     ::fidl::Event<::test_emptystruct::EmptyProtocol::Receive>>
          decoded = ::fidl::Event<::test_emptystruct::EmptyProtocol::Receive>::
              DecodeTransactional(std::move(msg));
      if (decoded.is_error()) {
        return ::fidl::UnbindInfo(decoded.error_value());
      }
      if (event_handler()) {
        event_handler()->Receive(decoded.value());
      }
      return std::nullopt;
    }
    default:
      break;
  }
  return ::fidl::UnbindInfo::UnknownOrdinal();
}
#endif  // __Fuchsia__
