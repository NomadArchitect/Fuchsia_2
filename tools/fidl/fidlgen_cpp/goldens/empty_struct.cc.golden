// WARNING: This file is machine generated by fidlgen_cpp.

#include <test/emptystruct/cpp/fidl_v2.h>

#ifdef __Fuchsia__

void ::test_emptystruct::Empty::EncodeWithoutValidating(
    ::fidl::Encoder& encoder, size_t offset) {
  encoder.Alloc(
      ::fidl::EncodingInlineSize<::test_emptystruct::Empty, ::fidl::Encoder>(
          &encoder));
  ::fidl::CodingTraits<::test_emptystruct::Empty>::Encode(&encoder, this,
                                                          offset);
}

::test_emptystruct::Empty::Empty(::fidl::Decoder& decoder)
    : storage_({::fidl::DecodeAs<uint8_t>(&decoder, 0)}) {}
#endif  // __Fuchsia__

#ifdef __Fuchsia__

void ::test_emptystruct::EmptyProtocolSendRequest::EncodeWithoutValidating(
    ::fidl::Encoder& encoder, size_t offset) {
  encoder.Alloc(
      ::fidl::EncodingInlineSize<::test_emptystruct::EmptyProtocolSendRequest,
                                 ::fidl::Encoder>(&encoder));
  ::fidl::CodingTraits<::test_emptystruct::EmptyProtocolSendRequest>::Encode(
      &encoder, this, offset);
}

::test_emptystruct::EmptyProtocolSendRequest::EmptyProtocolSendRequest(
    ::fidl::Decoder& decoder)
    : storage_({::fidl::DecodeAs<::test_emptystruct::Empty>(&decoder, 0)}) {}
#endif  // __Fuchsia__

#ifdef __Fuchsia__

void ::test_emptystruct::EmptyProtocolSendAndReceiveTopResponse::
    EncodeWithoutValidating(::fidl::Encoder& encoder, size_t offset) {
  encoder.Alloc(::fidl::EncodingInlineSize<
                ::test_emptystruct::EmptyProtocolSendAndReceiveTopResponse,
                ::fidl::Encoder>(&encoder));
  ::fidl::CodingTraits<
      ::test_emptystruct::EmptyProtocolSendAndReceiveTopResponse>::
      Encode(&encoder, this, offset);
}

::test_emptystruct::EmptyProtocolSendAndReceiveTopResponse::
    EmptyProtocolSendAndReceiveTopResponse(::fidl::Decoder& decoder)
    : storage_({::fidl::DecodeAs<::test_emptystruct::Empty>(&decoder, 0)}) {}
#endif  // __Fuchsia__

#ifdef __Fuchsia__

void ::test_emptystruct::EmptyProtocolSendAndReceiveRequest::
    EncodeWithoutValidating(::fidl::Encoder& encoder, size_t offset) {
  encoder.Alloc(::fidl::EncodingInlineSize<
                ::test_emptystruct::EmptyProtocolSendAndReceiveRequest,
                ::fidl::Encoder>(&encoder));
  ::fidl::CodingTraits<
      ::test_emptystruct::EmptyProtocolSendAndReceiveRequest>::Encode(&encoder,
                                                                      this,
                                                                      offset);
}

::test_emptystruct::EmptyProtocolSendAndReceiveRequest::
    EmptyProtocolSendAndReceiveRequest(::fidl::Decoder& decoder)
    : storage_({::fidl::DecodeAs<::test_emptystruct::Empty>(&decoder, 0)}) {}
#endif  // __Fuchsia__

#ifdef __Fuchsia__

void ::test_emptystruct::EmptyProtocolReceiveRequest::EncodeWithoutValidating(
    ::fidl::Encoder& encoder, size_t offset) {
  encoder.Alloc(
      ::fidl::EncodingInlineSize<
          ::test_emptystruct::EmptyProtocolReceiveRequest, ::fidl::Encoder>(
          &encoder));
  ::fidl::CodingTraits<::test_emptystruct::EmptyProtocolReceiveRequest>::Encode(
      &encoder, this, offset);
}

::test_emptystruct::EmptyProtocolReceiveRequest::EmptyProtocolReceiveRequest(
    ::fidl::Decoder& decoder)
    : storage_({::fidl::DecodeAs<::test_emptystruct::Empty>(&decoder, 0)}) {}
#endif  // __Fuchsia__

namespace test_emptystruct {
[[maybe_unused]] constexpr inline uint64_t kEmptyProtocol_Send_Ordinal =
    1378773277029173000lu;
[[maybe_unused]] constexpr inline uint64_t kEmptyProtocol_Receive_Ordinal =
    2301564782476583487lu;
[[maybe_unused]] constexpr inline uint64_t
    kEmptyProtocol_SendAndReceive_Ordinal = 534401212734647530lu;

#ifdef __Fuchsia__
}  // namespace test_emptystruct
void fidl::internal::NaturalClientImpl<::test_emptystruct::EmptyProtocol>::
    SendAndReceive(
        ::test_emptystruct::EmptyProtocolSendAndReceiveRequest&& payload,
        ::fidl::ClientCallback<
            ::test_emptystruct::EmptyProtocol::SendAndReceive>&& _callback)
        const {
  ::fidl::Encoder _encoder{
      ::test_emptystruct::kEmptyProtocol_SendAndReceive_Ordinal};
  return messenger().TwoWay(
      &::test::emptystruct::_internal::
          test_emptystruct_EmptyProtocolSendAndReceiveRequestMessageTable,
      ::fidl::internal::EncodeTransactionalMessageWithoutValidating(
          _encoder, std::move(payload)),
      ::fidl::internal::MakeResponseContext<
          ::fidl::Response<::test_emptystruct::EmptyProtocol::SendAndReceive>,
          ::fidl::ClientCallback<
              ::test_emptystruct::EmptyProtocol::SendAndReceive>>(
          ::test_emptystruct::kEmptyProtocol_SendAndReceive_Ordinal,
          std::move(_callback)));
}
void fidl::internal::NaturalClientImpl<::test_emptystruct::EmptyProtocol>::
    SendAndReceive(
        ::test_emptystruct::EmptyProtocolSendAndReceiveRequest&& payload,
        ::fidl::ClientResponseCallback<
            ::test_emptystruct::EmptyProtocol::SendAndReceive>&& _callback)
        const {
  ::fidl::Encoder _encoder{
      ::test_emptystruct::kEmptyProtocol_SendAndReceive_Ordinal};
  return messenger().TwoWay(
      &::test::emptystruct::_internal::
          test_emptystruct_EmptyProtocolSendAndReceiveRequestMessageTable,
      ::fidl::internal::EncodeTransactionalMessageWithoutValidating(
          _encoder, std::move(payload)),
      ::fidl::internal::MakeResponseContext<
          ::fidl::Response<::test_emptystruct::EmptyProtocol::SendAndReceive>,
          ::fidl::ClientResponseCallback<
              ::test_emptystruct::EmptyProtocol::SendAndReceive>>(
          ::test_emptystruct::kEmptyProtocol_SendAndReceive_Ordinal,
          std::move(_callback)));
}

::fitx::result<::fidl::Error>
fidl::internal::NaturalClientImpl<::test_emptystruct::EmptyProtocol>::Send(
    ::test_emptystruct::EmptyProtocolSendRequest&& payload) const {
  ::fidl::Encoder _encoder{::test_emptystruct::kEmptyProtocol_Send_Ordinal};
  ::fidl::Result result = messenger().OneWay(
      &::test::emptystruct::_internal::
          test_emptystruct_EmptyProtocolSendRequestMessageTable,
      ::fidl::internal::EncodeTransactionalMessageWithoutValidating(
          _encoder, std::move(payload)));
  return ::fidl::internal::ToFitxResult(result);
}
namespace test_emptystruct {
#endif  // __Fuchsia__

}  // namespace test_emptystruct
