// WARNING: This file is machine generated by fidlgen.

#pragma once

#include "lib/fidl/cpp/internal/header.h"

//
// Domain objects declarations (i.e. "natural types" in unified bindings).
//
namespace test {
namespace unknowninteractions {
#ifdef __Fuchsia__

class Example;
using ExampleHandle = ::fidl::InterfaceHandle<Example>;
#endif  // __Fuchsia__

#ifdef __Fuchsia__

class Example_RequestEncoder {
 public:
  static ::fidl::HLCPPOutgoingMessage StrictOneWay(
      ::fidl::MessageEncoder* _encoder) {
    return _encoder->GetMessage();
  }
  static ::fidl::HLCPPOutgoingMessage FlexibleOneWay(
      ::fidl::MessageEncoder* _encoder) {
    return _encoder->GetMessage();
  }
  static ::fidl::HLCPPOutgoingMessage StrictTwoWay(
      ::fidl::MessageEncoder* _encoder) {
    return _encoder->GetMessage();
  }
  static ::fidl::HLCPPOutgoingMessage FlexibleTwoWay(
      ::fidl::MessageEncoder* _encoder) {
    return _encoder->GetMessage();
  }
};

class Example_ResponseEncoder {
 public:
  static ::fidl::HLCPPOutgoingMessage StrictTwoWay(
      ::fidl::MessageEncoder* _encoder) {
    return _encoder->GetMessage();
  }
  static ::fidl::HLCPPOutgoingMessage FlexibleTwoWay(
      ::fidl::MessageEncoder* _encoder) {
    return _encoder->GetMessage();
  }
  static ::fidl::HLCPPOutgoingMessage StrictEvent(
      ::fidl::MessageEncoder* _encoder) {
    return _encoder->GetMessage();
  }
  static ::fidl::HLCPPOutgoingMessage FlexibleEvent(
      ::fidl::MessageEncoder* _encoder) {
    return _encoder->GetMessage();
  }
};
#endif  // __Fuchsia__

}  // namespace unknowninteractions
}  // namespace test
namespace fidl {

//
// Proxies and stubs declarations
//
}  // namespace fidl
namespace test {
namespace unknowninteractions {
#ifdef __Fuchsia__

using ExamplePtr = ::fidl::InterfacePtr<Example>;
class Example_Proxy;
class Example_Stub;
class Example_EventSender;
class Example_Sync;
using ExampleSyncPtr = ::fidl::SynchronousInterfacePtr<Example>;
class Example_SyncProxy;

namespace internal {
constexpr uint64_t kExample_StrictOneWay_Ordinal = 0x1f9937f425c8491alu;
constexpr uint64_t kExample_FlexibleOneWay_Ordinal = 0x200d2009e52a95b8lu;
constexpr uint64_t kExample_StrictTwoWay_Ordinal = 0x3ee105dfeda54985lu;
constexpr uint64_t kExample_FlexibleTwoWay_Ordinal = 0x7ddf3a4404acfa2clu;
constexpr uint64_t kExample_StrictEvent_Ordinal = 0x28d6af569779dfe5lu;
constexpr uint64_t kExample_FlexibleEvent_Ordinal = 0x1ca93992b923103alu;
}  // namespace internal
#endif  // __Fuchsia__

#ifdef __Fuchsia__

class Example {
 public:
  using Proxy_ = ::test::unknowninteractions::Example_Proxy;
  using Stub_ = ::test::unknowninteractions::Example_Stub;
  using EventSender_ = ::test::unknowninteractions::Example_EventSender;
  using Sync_ = ::test::unknowninteractions::Example_Sync;
  virtual ~Example();

  virtual void StrictOneWay() = 0;

  virtual void FlexibleOneWay() = 0;
  using StrictTwoWayCallback = fit::function<void()>;

  virtual void StrictTwoWay(StrictTwoWayCallback callback) = 0;
  using FlexibleTwoWayCallback = fit::function<void()>;

  virtual void FlexibleTwoWay(FlexibleTwoWayCallback callback) = 0;
  using StrictEventCallback = fit::function<void()>;
  using FlexibleEventCallback = fit::function<void()>;
};

class Example_RequestDecoder {
 public:
  Example_RequestDecoder() = default;
  virtual ~Example_RequestDecoder() = default;
  static const fidl_type_t* GetType(uint64_t ordinal, bool* out_needs_response);
  virtual void StrictOneWay() = 0;
  virtual void FlexibleOneWay() = 0;
  virtual void StrictTwoWay() = 0;
  virtual void FlexibleTwoWay() = 0;
};

class Example_ResponseDecoder {
 public:
  Example_ResponseDecoder() = default;
  virtual ~Example_ResponseDecoder() = default;
  static const fidl_type_t* GetType(uint64_t ordinal);
  virtual void StrictTwoWay() = 0;
  virtual void FlexibleTwoWay() = 0;
  virtual void StrictEvent() = 0;
  virtual void FlexibleEvent() = 0;
};

class Example_EventSender {
 public:
  virtual ~Example_EventSender();
  virtual void StrictEvent() = 0;
  virtual void FlexibleEvent() = 0;
};

class Example_Sync {
 public:
  using Proxy_ = ::test::unknowninteractions::Example_SyncProxy;
  virtual ~Example_Sync();
  virtual zx_status_t StrictOneWay() = 0;
  virtual zx_status_t FlexibleOneWay() = 0;
  virtual zx_status_t StrictTwoWay() = 0;
  virtual zx_status_t FlexibleTwoWay() = 0;
};

class Example_Proxy final : public ::fidl::internal::Proxy, public Example {
 public:
  explicit Example_Proxy(::fidl::internal::ProxyController* controller);
  ~Example_Proxy() override;

  zx_status_t Dispatch_(::fidl::HLCPPIncomingMessage message) override;
  // cts-coverage-fidl-name:test.unknowninteractions/Example.StrictOneWay
  void StrictOneWay() override;
  // cts-coverage-fidl-name:test.unknowninteractions/Example.FlexibleOneWay
  void FlexibleOneWay() override;
  // cts-coverage-fidl-name:test.unknowninteractions/Example.StrictTwoWay
  void StrictTwoWay(StrictTwoWayCallback callback) override;
  // cts-coverage-fidl-name:test.unknowninteractions/Example.FlexibleTwoWay
  void FlexibleTwoWay(FlexibleTwoWayCallback callback) override;
  StrictEventCallback StrictEvent;
  FlexibleEventCallback FlexibleEvent;

 private:
  Example_Proxy(const ::test::unknowninteractions::Example_Proxy&) = delete;
  Example_Proxy& operator=(const ::test::unknowninteractions::Example_Proxy&) =
      delete;

  ::fidl::internal::ProxyController* controller_;
};

class Example_Stub final
    : public ::fidl::internal::Stub,
      public ::test::unknowninteractions::Example_EventSender {
 public:
  typedef class ::test::unknowninteractions::Example Example_clazz;
  explicit Example_Stub(
      ::test::unknowninteractions::Example_Stub::Example_clazz* impl);
  ~Example_Stub() override;

  zx_status_t Dispatch_(::fidl::HLCPPIncomingMessage message,
                        ::fidl::internal::PendingResponse response) override;
  void StrictEvent() override;
  void FlexibleEvent() override;

 private:
  ::test::unknowninteractions::Example_Stub::Example_clazz* impl_;
};

class Example_SyncProxy : public ::test::unknowninteractions::Example_Sync {
 public:
  explicit Example_SyncProxy(::zx::channel channel);
  ~Example_SyncProxy() override;
  // cts-coverage-fidl-name:test.unknowninteractions/Example.StrictOneWay
  zx_status_t StrictOneWay() override;
  // cts-coverage-fidl-name:test.unknowninteractions/Example.FlexibleOneWay
  zx_status_t FlexibleOneWay() override;
  // cts-coverage-fidl-name:test.unknowninteractions/Example.StrictTwoWay
  zx_status_t StrictTwoWay() override;
  // cts-coverage-fidl-name:test.unknowninteractions/Example.FlexibleTwoWay
  zx_status_t FlexibleTwoWay() override;

 private:
  ::fidl::internal::SynchronousProxy proxy_;
  friend class ::fidl::SynchronousInterfacePtr<Example>;
};
#endif  // __Fuchsia__

}  // namespace unknowninteractions
}  // namespace test
