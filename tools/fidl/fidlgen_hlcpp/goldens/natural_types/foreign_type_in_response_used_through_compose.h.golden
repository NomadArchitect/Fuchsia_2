// WARNING: This file is machine generated by fidlgen.

#pragma once

#include <test/bottom/cpp/natural_types.h>
#include <test/middle/cpp/natural_types.h>

#include "lib/fidl/cpp/internal/natural_types_header.h"

//
// Domain objects declarations (i.e. "natural types" in unified bindings).
//
namespace test {
namespace foreigntypeinresponseusedthroughcompose {
#ifdef __Fuchsia__

class Top;
using TopHandle = ::fidl::InterfaceHandle<Top>;
#endif  // __Fuchsia__

#ifdef __Fuchsia__

namespace _internal {
__LOCAL extern "C" const fidl_type_t
    test_foreigntypeinresponseusedthroughcompose_TopGetFooRequestMessageTable;

}  // namespace _internal
class Top_RequestEncoder {
 public:
  static ::fidl::HLCPPOutgoingMessage GetFoo(::fidl::Encoder* _encoder) {
    fidl_trace(WillHLCPPEncode);
    switch (_encoder->wire_format()) {
      case ::fidl::internal::WireFormatVersion::kV1:
        _encoder->Alloc(16 - sizeof(fidl_message_header_t));
        break;
      case ::fidl::internal::WireFormatVersion::kV2:
        _encoder->Alloc(16 - sizeof(fidl_message_header_t));
        break;
    }

    if (_encoder->wire_format() == ::fidl::internal::WireFormatVersion::kV1) {
    } else {
    }

    fidl_trace(
        DidHLCPPEncode,
        &::test::foreigntypeinresponseusedthroughcompose::_internal::
            test_foreigntypeinresponseusedthroughcompose_TopGetFooRequestMessageTable,
        _encoder->GetPtr<const char>(0), _encoder->CurrentLength(),
        _encoder->CurrentHandleCount());

    return _encoder->GetMessage();
  }
};
namespace _internal {
__LOCAL extern "C" const fidl_type_t
    test_foreigntypeinresponseusedthroughcompose_TopGetFooResponseMessageTable;

}  // namespace _internal
class Top_ResponseEncoder {
 public:
  static ::fidl::HLCPPOutgoingMessage GetFoo(::fidl::Encoder* _encoder,
                                             ::test::bottom::Foo* foo) {
    fidl_trace(WillHLCPPEncode);
    switch (_encoder->wire_format()) {
      case ::fidl::internal::WireFormatVersion::kV1:
        _encoder->Alloc(24 - sizeof(fidl_message_header_t));
        break;
      case ::fidl::internal::WireFormatVersion::kV2:
        _encoder->Alloc(24 - sizeof(fidl_message_header_t));
        break;
    }

    if (_encoder->wire_format() == ::fidl::internal::WireFormatVersion::kV1) {
      ::fidl::Encode(_encoder, foo, 16);

    } else {
      ::fidl::Encode(_encoder, foo, 16);
    }

    fidl_trace(
        DidHLCPPEncode,
        &::test::foreigntypeinresponseusedthroughcompose::_internal::
            test_foreigntypeinresponseusedthroughcompose_TopGetFooResponseMessageTable,
        _encoder->GetPtr<const char>(0), _encoder->CurrentLength(),
        _encoder->CurrentHandleCount());
    return _encoder->GetMessage();
  }
};
#endif  // __Fuchsia__

}  // namespace foreigntypeinresponseusedthroughcompose
}  // namespace test
namespace fidl {}  // namespace fidl
