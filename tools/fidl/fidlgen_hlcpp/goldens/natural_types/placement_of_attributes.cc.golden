// WARNING: This file is machine generated by fidlgen.

#include <fidl/test/placementofattributes/cpp/natural_types.h>

#include "lib/fidl/cpp/internal/natural_types_implementation.h"

//
// Domain objects definitions (i.e. "natural types" in unified bindings)
//
namespace fidl {
namespace test {
namespace placementofattributes {
extern "C" const fidl_type_t fidl_test_placementofattributes_ExampleXUnionTable;
const fidl_type_t* ExampleXUnion::FidlType =
    &fidl_test_placementofattributes_ExampleXUnionTable;

ExampleXUnion::ExampleXUnion() {}

ExampleXUnion::~ExampleXUnion() { Destroy(); }

ExampleXUnion::ExampleXUnion(ExampleXUnion&& other) : tag_(other.tag_) {
  switch (tag_) {
    case ::fidl::test::placementofattributes::ExampleXUnion::Tag::kVariant:
      variant_ = std::move(other.variant_);
      break;
    case static_cast<fidl_xunion_tag_t>(
        ::fidl::test::placementofattributes::ExampleXUnion::Tag::Invalid):
      break;
    default:
      new (&unknown_data_) decltype(unknown_data_);
      unknown_data_ = std::move(other.unknown_data_);
      break;
  }
}

ExampleXUnion& ExampleXUnion::operator=(ExampleXUnion&& other) {
  if (this != &other) {
    Destroy();
    tag_ = other.tag_;
    switch (tag_) {
      case ::fidl::test::placementofattributes::ExampleXUnion::Tag::kVariant:
        variant_ = std::move(other.variant_);
        break;
      case static_cast<fidl_xunion_tag_t>(
          ::fidl::test::placementofattributes::ExampleXUnion::Tag::Invalid):
        break;
      default:
        new (&unknown_data_) decltype(unknown_data_);
        unknown_data_ = std::move(other.unknown_data_);
        break;
    }
  }
  return *this;
}

ExampleXUnion ExampleXUnion::WithVariant(uint32_t&& val) {
  ExampleXUnion result;
  result.set_variant(std::move(val));
  return result;
}

void ExampleXUnion::Encode(
    ::fidl::Encoder* encoder, size_t offset,
    cpp17::optional<::fidl::HandleInformation> maybe_handle_info) {
  const size_t length_before = encoder->CurrentLength();
  const size_t handles_before = encoder->CurrentHandleCount();

  switch (Which()) {
    case ::fidl::test::placementofattributes::ExampleXUnion::Tag::kVariant: {
      switch (encoder->wire_format()) {
        case ::fidl::Encoder::WireFormat::V1: {
          ::fidl::Encode(
              encoder, &variant_,
              encoder->Alloc(
                  ::fidl::EncodingInlineSize<uint32_t, ::fidl::Encoder>(
                      encoder)));

          fidl_xunion_t* xunion = encoder->GetPtr<fidl_xunion_t>(offset);
          xunion->tag = tag_;
          xunion->envelope.num_bytes =
              static_cast<uint32_t>(encoder->CurrentLength() - length_before);
          xunion->envelope.num_handles = static_cast<uint32_t>(
              encoder->CurrentHandleCount() - handles_before);
          xunion->envelope.presence = FIDL_ALLOC_PRESENT;
          break;
        }
        case ::fidl::Encoder::WireFormat::V2: {
          if (::fidl::EncodingInlineSize<uint32_t>(encoder) <=
              FIDL_ENVELOPE_INLINING_SIZE_THRESHOLD) {
            ::fidl::Encode(encoder, &variant_,
                           offset + offsetof(fidl_xunion_v2_t, envelope));

            fidl_xunion_v2_t* xunion =
                encoder->GetPtr<fidl_xunion_v2_t>(offset);
            xunion->tag = tag_;
            xunion->envelope.num_handles = static_cast<uint16_t>(
                encoder->CurrentHandleCount() - handles_before);
            xunion->envelope.flags = FIDL_ENVELOPE_FLAGS_INLINING_MASK;
            break;
          }

          ::fidl::Encode(
              encoder, &variant_,
              encoder->Alloc(
                  ::fidl::EncodingInlineSize<uint32_t, ::fidl::Encoder>(
                      encoder)));

          fidl_xunion_v2_t* xunion = encoder->GetPtr<fidl_xunion_v2_t>(offset);
          xunion->tag = tag_;
          xunion->envelope.num_bytes =
              static_cast<uint32_t>(encoder->CurrentLength() - length_before);
          xunion->envelope.num_handles = static_cast<uint16_t>(
              encoder->CurrentHandleCount() - handles_before);
          xunion->envelope.flags = 0;
          break;
        }
      }
      break;
    }
    case ::fidl::test::placementofattributes::ExampleXUnion::Tag::kUnknown: {
      ::fidl::EncodeUnknownBytes(encoder, &unknown_data_,
                                 offset + offsetof(fidl_xunion_t, envelope));
      *encoder->GetPtr<uint64_t>(offset) = tag_;
      break;
    }
    default:
      break;
  }
}

void ExampleXUnion::Decode(::fidl::Decoder* _decoder, ExampleXUnion* value,
                           size_t offset) {
  fidl_xunion_t* xunion = _decoder->GetPtr<fidl_xunion_t>(offset);

  if (!xunion->envelope.data) {
    value->EnsureStorageInitialized(static_cast<fidl_xunion_tag_t>(
        ::fidl::test::placementofattributes::ExampleXUnion::Tag::Invalid));
    return;
  }

  value->EnsureStorageInitialized(xunion->tag);

  const size_t envelope_offset = _decoder->GetOffset(xunion->envelope.data);

  switch (value->tag_) {
    case ::fidl::test::placementofattributes::ExampleXUnion::Tag::kVariant:
      ::fidl::Decode(_decoder, &value->variant_, envelope_offset);
      break;
    default:

      value->unknown_data_.resize(xunion->envelope.num_bytes);
      ::fidl::DecodeUnknownBytesContents(_decoder, &value->unknown_data_,
                                         envelope_offset);
      break;
  }
}

zx_status_t ExampleXUnion::Clone(ExampleXUnion* result) const {
  result->Destroy();
  result->tag_ = tag_;
  switch (tag_) {
    case ::fidl::test::placementofattributes::ExampleXUnion::Tag::Invalid:
      return ZX_OK;
    case ::fidl::test::placementofattributes::ExampleXUnion::Tag::kVariant:
      return ::fidl::Clone(variant_, &result->variant_);
    default:
      new (&result->unknown_data_) decltype(unknown_data_);
      return ::fidl::Clone(unknown_data_, &result->unknown_data_);
      return ZX_OK;
  }
}

ExampleXUnion& ExampleXUnion::set_variant(uint32_t value) {
  EnsureStorageInitialized(
      ::fidl::test::placementofattributes::ExampleXUnion::Tag::kVariant);
  variant_ = std::move(value);
  return *this;
}
ExampleXUnion& ExampleXUnion::SetUnknownData(fidl_xunion_tag_t ordinal,
                                             std::vector<uint8_t> bytes) {
  EnsureStorageInitialized(ordinal);
  unknown_data_ = std::move(bytes);
  return *this;
}

void ExampleXUnion::Destroy() {
  switch (tag_) {
    case ::fidl::test::placementofattributes::ExampleXUnion::Tag::kVariant:
      break;

    case static_cast<fidl_xunion_tag_t>(
        ::fidl::test::placementofattributes::ExampleXUnion::Tag::Invalid):
      break;
    default:
      unknown_data_.~decltype(unknown_data_)();
      break;
  }
  tag_ = static_cast<fidl_xunion_tag_t>(
      ::fidl::test::placementofattributes::ExampleXUnion::Tag::Invalid);
}

void ExampleXUnion::EnsureStorageInitialized(::fidl_xunion_tag_t tag) {
  if (tag_ != tag) {
    Destroy();
    tag_ = tag;
    switch (tag_) {
      case static_cast<fidl_xunion_tag_t>(
          ::fidl::test::placementofattributes::ExampleXUnion::Tag::Invalid):
        break;
      case ::fidl::test::placementofattributes::ExampleXUnion::Tag::kVariant:
        new (&variant_) uint32_t();
        break;
      default:
        new (&unknown_data_) decltype(unknown_data_);
        break;
    }
  }
}

extern "C" const fidl_type_t fidl_test_placementofattributes_ExampleUnionTable;
const fidl_type_t* ExampleUnion::FidlType =
    &fidl_test_placementofattributes_ExampleUnionTable;

ExampleUnion::ExampleUnion() {}

ExampleUnion::~ExampleUnion() { Destroy(); }

ExampleUnion::ExampleUnion(ExampleUnion&& other) : tag_(other.tag_) {
  switch (tag_) {
    case ::fidl::test::placementofattributes::ExampleUnion::Tag::kVariant:
      variant_ = std::move(other.variant_);
      break;
    case static_cast<fidl_xunion_tag_t>(
        ::fidl::test::placementofattributes::ExampleUnion::Tag::Invalid):
      break;
  }
}

ExampleUnion& ExampleUnion::operator=(ExampleUnion&& other) {
  if (this != &other) {
    Destroy();
    tag_ = other.tag_;
    switch (tag_) {
      case ::fidl::test::placementofattributes::ExampleUnion::Tag::kVariant:
        variant_ = std::move(other.variant_);
        break;
      case static_cast<fidl_xunion_tag_t>(
          ::fidl::test::placementofattributes::ExampleUnion::Tag::Invalid):
        break;
    }
  }
  return *this;
}

ExampleUnion ExampleUnion::WithVariant(uint32_t&& val) {
  ExampleUnion result;
  result.set_variant(std::move(val));
  return result;
}

void ExampleUnion::Encode(
    ::fidl::Encoder* encoder, size_t offset,
    cpp17::optional<::fidl::HandleInformation> maybe_handle_info) {
  const size_t length_before = encoder->CurrentLength();
  const size_t handles_before = encoder->CurrentHandleCount();

  switch (Which()) {
    case ::fidl::test::placementofattributes::ExampleUnion::Tag::kVariant: {
      switch (encoder->wire_format()) {
        case ::fidl::Encoder::WireFormat::V1: {
          ::fidl::Encode(
              encoder, &variant_,
              encoder->Alloc(
                  ::fidl::EncodingInlineSize<uint32_t, ::fidl::Encoder>(
                      encoder)));

          fidl_xunion_t* xunion = encoder->GetPtr<fidl_xunion_t>(offset);
          xunion->tag = tag_;
          xunion->envelope.num_bytes =
              static_cast<uint32_t>(encoder->CurrentLength() - length_before);
          xunion->envelope.num_handles = static_cast<uint32_t>(
              encoder->CurrentHandleCount() - handles_before);
          xunion->envelope.presence = FIDL_ALLOC_PRESENT;
          break;
        }
        case ::fidl::Encoder::WireFormat::V2: {
          if (::fidl::EncodingInlineSize<uint32_t>(encoder) <=
              FIDL_ENVELOPE_INLINING_SIZE_THRESHOLD) {
            ::fidl::Encode(encoder, &variant_,
                           offset + offsetof(fidl_xunion_v2_t, envelope));

            fidl_xunion_v2_t* xunion =
                encoder->GetPtr<fidl_xunion_v2_t>(offset);
            xunion->tag = tag_;
            xunion->envelope.num_handles = static_cast<uint16_t>(
                encoder->CurrentHandleCount() - handles_before);
            xunion->envelope.flags = FIDL_ENVELOPE_FLAGS_INLINING_MASK;
            break;
          }

          ::fidl::Encode(
              encoder, &variant_,
              encoder->Alloc(
                  ::fidl::EncodingInlineSize<uint32_t, ::fidl::Encoder>(
                      encoder)));

          fidl_xunion_v2_t* xunion = encoder->GetPtr<fidl_xunion_v2_t>(offset);
          xunion->tag = tag_;
          xunion->envelope.num_bytes =
              static_cast<uint32_t>(encoder->CurrentLength() - length_before);
          xunion->envelope.num_handles = static_cast<uint16_t>(
              encoder->CurrentHandleCount() - handles_before);
          xunion->envelope.flags = 0;
          break;
        }
      }
      break;
    }
    default:
      break;
  }
}

void ExampleUnion::Decode(::fidl::Decoder* _decoder, ExampleUnion* value,
                          size_t offset) {
  fidl_xunion_t* xunion = _decoder->GetPtr<fidl_xunion_t>(offset);

  if (!xunion->envelope.data) {
    value->EnsureStorageInitialized(static_cast<fidl_xunion_tag_t>(
        ::fidl::test::placementofattributes::ExampleUnion::Tag::Invalid));
    return;
  }

  value->EnsureStorageInitialized(xunion->tag);

  const size_t envelope_offset = _decoder->GetOffset(xunion->envelope.data);

  switch (value->tag_) {
    case ::fidl::test::placementofattributes::ExampleUnion::Tag::kVariant:
      ::fidl::Decode(_decoder, &value->variant_, envelope_offset);
      break;
    default:
      break;
  }
}

zx_status_t ExampleUnion::Clone(ExampleUnion* result) const {
  result->Destroy();
  result->tag_ = tag_;
  switch (tag_) {
    case ::fidl::test::placementofattributes::ExampleUnion::Tag::Invalid:
      return ZX_OK;
    case ::fidl::test::placementofattributes::ExampleUnion::Tag::kVariant:
      return ::fidl::Clone(variant_, &result->variant_);
    default:
      return ZX_OK;
  }
}

ExampleUnion& ExampleUnion::set_variant(uint32_t value) {
  EnsureStorageInitialized(
      ::fidl::test::placementofattributes::ExampleUnion::Tag::kVariant);
  variant_ = std::move(value);
  return *this;
}

void ExampleUnion::Destroy() {
  switch (tag_) {
    case ::fidl::test::placementofattributes::ExampleUnion::Tag::kVariant:
      break;

    default:
      break;
  }
  tag_ = static_cast<fidl_xunion_tag_t>(
      ::fidl::test::placementofattributes::ExampleUnion::Tag::Invalid);
}

void ExampleUnion::EnsureStorageInitialized(::fidl_xunion_tag_t tag) {
  if (tag_ != tag) {
    Destroy();
    tag_ = tag;
    switch (tag_) {
      case static_cast<fidl_xunion_tag_t>(
          ::fidl::test::placementofattributes::ExampleUnion::Tag::Invalid):
        break;
      case ::fidl::test::placementofattributes::ExampleUnion::Tag::kVariant:
        new (&variant_) uint32_t();
        break;
      default:
        break;
    }
  }
}

extern "C" const fidl_type_t fidl_test_placementofattributes_ExampleTableTable;
const fidl_type_t* ExampleTable::FidlType =
    &fidl_test_placementofattributes_ExampleTableTable;

ExampleTable::ExampleTable() {}

ExampleTable::ExampleTable(ExampleTable&& other) {
  field_presence_ = other.field_presence_;
  if (field_presence_.IsSet<0>()) {
    Construct(&member_value_.value, std::move(other.member_value_.value));
  }
  _unknown_data = std::move(other._unknown_data);
}

ExampleTable::~ExampleTable() {
  if (field_presence_.IsSet<0>()) {
    Destruct(&member_value_.value);
  }
}

ExampleTable& ExampleTable::operator=(ExampleTable&& other) {
  if (other.field_presence_.IsSet<0>()) {
    if (field_presence_.IsSet<0>()) {
      member_value_.value = std::move(other.member_value_.value);
    } else {
      field_presence_.Set<0>();
      Construct(&member_value_.value, std::move(other.member_value_.value));
    }
  } else if (field_presence_.IsSet<0>()) {
    field_presence_.Clear<0>();
    Destruct(&member_value_.value);
  }
  _unknown_data = std::move(other._unknown_data);
  return *this;
}

bool ExampleTable::IsEmpty() const {
  return field_presence_.IsEmpty() && _unknown_data.size() == 0;
}

void ExampleTable::Encode(
    ::fidl::Encoder* _encoder, size_t _offset,
    cpp17::optional<::fidl::HandleInformation> maybe_handle_info) {
  size_t max_ordinal = MaxOrdinal();
  ::fidl::EncodeVectorPointer(_encoder, max_ordinal, _offset);
  if (max_ordinal == 0) return;
  size_t envelope_size =
      (_encoder->wire_format() == ::fidl::Encoder::WireFormat::V1)
          ? sizeof(fidl_envelope_t)
          : sizeof(fidl_envelope_v2_t);
  size_t base = _encoder->Alloc(max_ordinal * envelope_size);
  auto next_unknown = _unknown_data.begin();
  if (field_presence_.IsSet<0>()) {
    // Encode unknown fields that have an ordinal that should appear before this
    // field.
    while (next_unknown != _unknown_data.end() && next_unknown->first < 1) {
      size_t envelope_base = base + (next_unknown->first - 1) * envelope_size;
      ::fidl::EncodeUnknownBytes(_encoder, &next_unknown->second,
                                 envelope_base);
      std::advance(next_unknown, 1);
    }

    const size_t length_before = _encoder->CurrentLength();
    const size_t handles_before = _encoder->CurrentHandleCount();

    size_t envelope_base = base + (1 - 1) * envelope_size;
    switch (_encoder->wire_format()) {
      case ::fidl::Encoder::WireFormat::V1: {
        ::fidl::Encode(
            _encoder, &member_value_.value,
            _encoder->Alloc(
                ::fidl::EncodingInlineSize<uint32_t, ::fidl::Encoder>(
                    _encoder)));

        fidl_envelope_t* envelope =
            _encoder->GetPtr<fidl_envelope_t>(envelope_base);
        envelope->num_bytes =
            static_cast<uint32_t>(_encoder->CurrentLength() - length_before);
        envelope->num_handles = static_cast<uint32_t>(
            _encoder->CurrentHandleCount() - handles_before);
        envelope->presence = FIDL_ALLOC_PRESENT;
        break;
      }
      case ::fidl::Encoder::WireFormat::V2: {
        if (::fidl::EncodingInlineSize<uint32_t>(_encoder) <=
            FIDL_ENVELOPE_INLINING_SIZE_THRESHOLD) {
          ::fidl::Encode(_encoder, &member_value_.value, envelope_base);

          fidl_envelope_v2_t* envelope =
              _encoder->GetPtr<fidl_envelope_v2_t>(envelope_base);
          envelope->num_handles = static_cast<uint16_t>(
              _encoder->CurrentHandleCount() - handles_before);
          envelope->flags = FIDL_ENVELOPE_FLAGS_INLINING_MASK;
          break;
        }

        ::fidl::Encode(
            _encoder, &member_value_.value,
            _encoder->Alloc(
                ::fidl::EncodingInlineSize<uint32_t, ::fidl::Encoder>(
                    _encoder)));

        fidl_envelope_v2_t* envelope =
            _encoder->GetPtr<fidl_envelope_v2_t>(envelope_base);
        envelope->num_bytes =
            static_cast<uint32_t>(_encoder->CurrentLength() - length_before);
        envelope->num_handles = static_cast<uint16_t>(
            _encoder->CurrentHandleCount() - handles_before);
        envelope->flags = 0;
        break;
      }
    }
  }
  // Encode any remaining unknown fields (i.e. ones that have an ordinal outside
  // the range of known ordinals)
  for (auto curr = next_unknown; curr != _unknown_data.end(); ++curr) {
    size_t envelope_base = base + (curr->first - 1) * envelope_size;
    ::fidl::EncodeUnknownBytes(_encoder, &curr->second, envelope_base);
  }
}

void ExampleTable::Decode(::fidl::Decoder* _decoder, ExampleTable* _value,
                          size_t _offset) {
  fidl_vector_t* encoded = _decoder->GetPtr<fidl_vector_t>(_offset);
  size_t base;
  size_t count;
  if (!encoded->data) {
    goto clear_all;
  }

  base = _decoder->GetOffset(encoded->data);
  count = encoded->count;
  if (count >= 1) {
    size_t envelope_base = base + (1 - 1) * sizeof(fidl_envelope_t);
    uint64_t presence;
    ::fidl::Decode(_decoder, &presence,
                   envelope_base + offsetof(fidl_envelope_t, presence));
    if (presence != 0) {
      ::fidl::Decode(_decoder, _value->mutable_member(),
                     _decoder->GetOffset(presence));
    } else {
      _value->clear_member();
    }
  } else {
    goto done_1;
  }

  if (count > 1) {
    for (uint64_t ordinal = 1; ordinal <= count; ordinal++) {
      if (IsOrdinalKnown(ordinal)) continue;

      size_t envelope_base = base + (ordinal - 1) * sizeof(fidl_envelope_t);
      fidl_envelope_t* envelope =
          _decoder->GetPtr<fidl_envelope_t>(envelope_base);
      if (envelope->presence != 0) {
        auto result = _value->_unknown_data.emplace(
            std::piecewise_construct, std::forward_as_tuple(ordinal),
            std::forward_as_tuple());
        auto iter = result.first;
        iter->second.resize(envelope->num_bytes);
        ::fidl::DecodeUnknownBytesContents(_decoder, &iter->second,
                                           _decoder->GetOffset(envelope->data));
      }
    }
  }

  return;

  // Clear unset values.
clear_all:
done_1:
  _value->clear_member();
  return;
}

zx_status_t ExampleTable::Clone(ExampleTable* result) const {
  if (field_presence_.IsSet<0>()) {
    zx_status_t _status =
        ::fidl::Clone(member_value_.value, result->mutable_member());
    if (_status != ZX_OK) return _status;
  } else {
    result->clear_member();
  }
  return ::fidl::Clone(_unknown_data, &result->_unknown_data);
}

extern "C" const fidl_type_t fidl_test_placementofattributes_ExampleStructTable;
const fidl_type_t* ExampleStruct::FidlType =
    &fidl_test_placementofattributes_ExampleStructTable;

void ExampleStruct::Encode(
    ::fidl::Encoder* _encoder, size_t _offset,
    cpp17::optional<::fidl::HandleInformation> maybe_handle_info) {
  if (::fidl::IsMemcpyCompatible<ExampleStruct>::value) {
    memcpy(_encoder->template GetPtr<ExampleStruct>(_offset), this,
           sizeof(ExampleStruct));
  } else {
    if (_encoder->wire_format() == ::fidl::Encoder::WireFormat::V1) {
      ::fidl::Encode(_encoder, &member, _offset + 0);

    } else {
      ::fidl::Encode(_encoder, &member, _offset + 0);
    }
  }
}

void ExampleStruct::Decode(::fidl::Decoder* _decoder, ExampleStruct* _value,
                           size_t _offset) {
  if (::fidl::IsMemcpyCompatible<ExampleStruct>::value) {
    memcpy(_value, _decoder->template GetPtr<ExampleStruct>(_offset),
           sizeof(ExampleStruct));
  } else {
    ::fidl::Decode(_decoder, &_value->member, _offset + 0);
  }
}

zx_status_t ExampleStruct::Clone(ExampleStruct* _result) const {
  zx_status_t _status = ::fidl::Clone(member, &_result->member);
  if (_status != ZX_OK) return _status;
  return ZX_OK;
}

}  // namespace placementofattributes
}  // namespace test
}  // namespace fidl
