// WARNING: This file is machine generated by fidlgen.

#include <test/errorsyntax/cpp/natural_types.h>

#include "lib/fidl/cpp/internal/natural_types_implementation.h"

//
// Domain objects definitions (i.e. "natural types" in unified bindings)
//
namespace test {
namespace errorsyntax {
extern "C" const fidl_type_t
    test_errorsyntax_ExampleUseOfErrorSyntax_CallWhichMayFail_ResponseTable;
const fidl_type_t* ExampleUseOfErrorSyntax_CallWhichMayFail_Response::FidlType =
    &test_errorsyntax_ExampleUseOfErrorSyntax_CallWhichMayFail_ResponseTable;

void ExampleUseOfErrorSyntax_CallWhichMayFail_Response::Encode(
    ::fidl::Encoder* _encoder, size_t _offset,
    cpp17::optional<::fidl::HandleInformation> maybe_handle_info) {
  if (::fidl::IsMemcpyCompatible<
          ExampleUseOfErrorSyntax_CallWhichMayFail_Response>::value) {
    memcpy(_encoder->template GetPtr<
               ExampleUseOfErrorSyntax_CallWhichMayFail_Response>(_offset),
           this, sizeof(ExampleUseOfErrorSyntax_CallWhichMayFail_Response));
  } else {
    if (_encoder->wire_format() == ::fidl::internal::WireFormatVersion::kV1) {
      ::fidl::Encode(_encoder, &value, _offset + 0);

    } else {
      ::fidl::Encode(_encoder, &value, _offset + 0);
    }
  }
}

void ExampleUseOfErrorSyntax_CallWhichMayFail_Response::Decode(
    ::fidl::Decoder* _decoder,
    ExampleUseOfErrorSyntax_CallWhichMayFail_Response* _value, size_t _offset) {
  if (::fidl::IsMemcpyCompatible<
          ExampleUseOfErrorSyntax_CallWhichMayFail_Response>::value) {
    memcpy(_value,
           _decoder->template GetPtr<
               ExampleUseOfErrorSyntax_CallWhichMayFail_Response>(_offset),
           sizeof(ExampleUseOfErrorSyntax_CallWhichMayFail_Response));
  } else {
    ::fidl::Decode(_decoder, &_value->value, _offset + 0);
  }
}

zx_status_t ExampleUseOfErrorSyntax_CallWhichMayFail_Response::Clone(
    ExampleUseOfErrorSyntax_CallWhichMayFail_Response* _result) const {
  zx_status_t _status = ::fidl::Clone(value, &_result->value);
  if (_status != ZX_OK) return _status;
  return ZX_OK;
}

extern "C" const fidl_type_t
    test_errorsyntax_ExampleUseOfErrorSyntax_CallWhichMayFail_ResultTable;
const fidl_type_t* ExampleUseOfErrorSyntax_CallWhichMayFail_Result::FidlType =
    &test_errorsyntax_ExampleUseOfErrorSyntax_CallWhichMayFail_ResultTable;

ExampleUseOfErrorSyntax_CallWhichMayFail_Result::
    ExampleUseOfErrorSyntax_CallWhichMayFail_Result() {}

ExampleUseOfErrorSyntax_CallWhichMayFail_Result::
    ~ExampleUseOfErrorSyntax_CallWhichMayFail_Result() {
  Destroy();
}

ExampleUseOfErrorSyntax_CallWhichMayFail_Result::
    ExampleUseOfErrorSyntax_CallWhichMayFail_Result(
        ExampleUseOfErrorSyntax_CallWhichMayFail_Result&& other)
    : tag_(other.tag_) {
  switch (tag_) {
    case ::test::errorsyntax::ExampleUseOfErrorSyntax_CallWhichMayFail_Result::
        Tag::kResponse:
      new (&response_)::test::errorsyntax::
          ExampleUseOfErrorSyntax_CallWhichMayFail_Response();
      response_ = std::move(other.response_);
      break;
    case ::test::errorsyntax::ExampleUseOfErrorSyntax_CallWhichMayFail_Result::
        Tag::kErr:
      err_ = std::move(other.err_);
      break;
    case static_cast<fidl_xunion_tag_t>(
        ::test::errorsyntax::ExampleUseOfErrorSyntax_CallWhichMayFail_Result::
            Tag::Invalid):
      break;
  }
}

ExampleUseOfErrorSyntax_CallWhichMayFail_Result&
ExampleUseOfErrorSyntax_CallWhichMayFail_Result::operator=(
    ExampleUseOfErrorSyntax_CallWhichMayFail_Result&& other) {
  if (this != &other) {
    Destroy();
    tag_ = other.tag_;
    switch (tag_) {
      case ::test::errorsyntax::
          ExampleUseOfErrorSyntax_CallWhichMayFail_Result::Tag::kResponse:
        new (&response_)::test::errorsyntax::
            ExampleUseOfErrorSyntax_CallWhichMayFail_Response();
        response_ = std::move(other.response_);
        break;
      case ::test::errorsyntax::
          ExampleUseOfErrorSyntax_CallWhichMayFail_Result::Tag::kErr:
        err_ = std::move(other.err_);
        break;
      case static_cast<fidl_xunion_tag_t>(
          ::test::errorsyntax::ExampleUseOfErrorSyntax_CallWhichMayFail_Result::
              Tag::Invalid):
        break;
    }
  }
  return *this;
}

ExampleUseOfErrorSyntax_CallWhichMayFail_Result
ExampleUseOfErrorSyntax_CallWhichMayFail_Result::WithResponse(
    ::test::errorsyntax::ExampleUseOfErrorSyntax_CallWhichMayFail_Response&&
        val) {
  ExampleUseOfErrorSyntax_CallWhichMayFail_Result result;
  result.set_response(std::move(val));
  return result;
}
ExampleUseOfErrorSyntax_CallWhichMayFail_Result
ExampleUseOfErrorSyntax_CallWhichMayFail_Result::WithErr(uint32_t&& val) {
  ExampleUseOfErrorSyntax_CallWhichMayFail_Result result;
  result.set_err(std::move(val));
  return result;
}

void ExampleUseOfErrorSyntax_CallWhichMayFail_Result::Encode(
    ::fidl::Encoder* encoder, size_t offset,
    cpp17::optional<::fidl::HandleInformation> maybe_handle_info) {
  const size_t length_before = encoder->CurrentLength();
  const size_t handles_before = encoder->CurrentHandleCount();

  switch (Which()) {
    case ::test::errorsyntax::ExampleUseOfErrorSyntax_CallWhichMayFail_Result::
        Tag::kResponse: {
      switch (encoder->wire_format()) {
        case ::fidl::internal::WireFormatVersion::kV1: {
          ::fidl::Encode(
              encoder, &response_,
              encoder->Alloc(
                  ::fidl::EncodingInlineSize<
                      ::test::errorsyntax::
                          ExampleUseOfErrorSyntax_CallWhichMayFail_Response,
                      ::fidl::Encoder>(encoder)));

          fidl_xunion_t* xunion = encoder->GetPtr<fidl_xunion_t>(offset);
          xunion->tag = tag_;
          xunion->envelope.num_bytes =
              static_cast<uint32_t>(encoder->CurrentLength() - length_before);
          xunion->envelope.num_handles = static_cast<uint32_t>(
              encoder->CurrentHandleCount() - handles_before);
          xunion->envelope.presence = FIDL_ALLOC_PRESENT;
          break;
        }
        case ::fidl::internal::WireFormatVersion::kV2: {
          if (::fidl::EncodingInlineSize<
                  ::test::errorsyntax::
                      ExampleUseOfErrorSyntax_CallWhichMayFail_Response>(
                  encoder) <= FIDL_ENVELOPE_INLINING_SIZE_THRESHOLD) {
            ::fidl::Encode(encoder, &response_,
                           offset + offsetof(fidl_xunion_v2_t, envelope));

            fidl_xunion_v2_t* xunion =
                encoder->GetPtr<fidl_xunion_v2_t>(offset);
            xunion->tag = tag_;
            xunion->envelope.num_handles = static_cast<uint16_t>(
                encoder->CurrentHandleCount() - handles_before);
            xunion->envelope.flags = FIDL_ENVELOPE_FLAGS_INLINING_MASK;
            break;
          }

          ::fidl::Encode(
              encoder, &response_,
              encoder->Alloc(
                  ::fidl::EncodingInlineSize<
                      ::test::errorsyntax::
                          ExampleUseOfErrorSyntax_CallWhichMayFail_Response,
                      ::fidl::Encoder>(encoder)));

          fidl_xunion_v2_t* xunion = encoder->GetPtr<fidl_xunion_v2_t>(offset);
          xunion->tag = tag_;
          xunion->envelope.num_bytes =
              static_cast<uint32_t>(encoder->CurrentLength() - length_before);
          xunion->envelope.num_handles = static_cast<uint16_t>(
              encoder->CurrentHandleCount() - handles_before);
          xunion->envelope.flags = 0;
          break;
        }
      }
      break;
    }
    case ::test::errorsyntax::ExampleUseOfErrorSyntax_CallWhichMayFail_Result::
        Tag::kErr: {
      switch (encoder->wire_format()) {
        case ::fidl::internal::WireFormatVersion::kV1: {
          ::fidl::Encode(
              encoder, &err_,
              encoder->Alloc(
                  ::fidl::EncodingInlineSize<uint32_t, ::fidl::Encoder>(
                      encoder)));

          fidl_xunion_t* xunion = encoder->GetPtr<fidl_xunion_t>(offset);
          xunion->tag = tag_;
          xunion->envelope.num_bytes =
              static_cast<uint32_t>(encoder->CurrentLength() - length_before);
          xunion->envelope.num_handles = static_cast<uint32_t>(
              encoder->CurrentHandleCount() - handles_before);
          xunion->envelope.presence = FIDL_ALLOC_PRESENT;
          break;
        }
        case ::fidl::internal::WireFormatVersion::kV2: {
          if (::fidl::EncodingInlineSize<uint32_t>(encoder) <=
              FIDL_ENVELOPE_INLINING_SIZE_THRESHOLD) {
            ::fidl::Encode(encoder, &err_,
                           offset + offsetof(fidl_xunion_v2_t, envelope));

            fidl_xunion_v2_t* xunion =
                encoder->GetPtr<fidl_xunion_v2_t>(offset);
            xunion->tag = tag_;
            xunion->envelope.num_handles = static_cast<uint16_t>(
                encoder->CurrentHandleCount() - handles_before);
            xunion->envelope.flags = FIDL_ENVELOPE_FLAGS_INLINING_MASK;
            break;
          }

          ::fidl::Encode(
              encoder, &err_,
              encoder->Alloc(
                  ::fidl::EncodingInlineSize<uint32_t, ::fidl::Encoder>(
                      encoder)));

          fidl_xunion_v2_t* xunion = encoder->GetPtr<fidl_xunion_v2_t>(offset);
          xunion->tag = tag_;
          xunion->envelope.num_bytes =
              static_cast<uint32_t>(encoder->CurrentLength() - length_before);
          xunion->envelope.num_handles = static_cast<uint16_t>(
              encoder->CurrentHandleCount() - handles_before);
          xunion->envelope.flags = 0;
          break;
        }
      }
      break;
    }
    default:
      break;
  }
}

void ExampleUseOfErrorSyntax_CallWhichMayFail_Result::Decode(
    ::fidl::Decoder* _decoder,
    ExampleUseOfErrorSyntax_CallWhichMayFail_Result* value, size_t offset) {
  fidl_xunion_v2_t* xunion = _decoder->GetPtr<fidl_xunion_v2_t>(offset);

  if (xunion->envelope.num_bytes == 0 && xunion->envelope.num_handles == 0 &&
      xunion->envelope.flags == 0) {
    value->EnsureStorageInitialized(static_cast<fidl_xunion_tag_t>(
        ::test::errorsyntax::ExampleUseOfErrorSyntax_CallWhichMayFail_Result::
            Tag::Invalid));
    return;
  }

  value->EnsureStorageInitialized(xunion->tag);

  size_t value_offset = _decoder->EnvelopeValueOffset(&xunion->envelope);

  switch (value->tag_) {
    case ::test::errorsyntax::ExampleUseOfErrorSyntax_CallWhichMayFail_Result::
        Tag::kResponse: {
      new (&value->response_)::test::errorsyntax::
          ExampleUseOfErrorSyntax_CallWhichMayFail_Response();
      ::fidl::Decode(_decoder, &value->response_, value_offset);
      break;
    }
    case ::test::errorsyntax::ExampleUseOfErrorSyntax_CallWhichMayFail_Result::
        Tag::kErr: {
      ::fidl::Decode(_decoder, &value->err_, value_offset);
      break;
    }
    default: {
      break;
    }
  }
}

zx_status_t ExampleUseOfErrorSyntax_CallWhichMayFail_Result::Clone(
    ExampleUseOfErrorSyntax_CallWhichMayFail_Result* result) const {
  result->Destroy();
  result->tag_ = tag_;
  switch (tag_) {
    case ::test::errorsyntax::ExampleUseOfErrorSyntax_CallWhichMayFail_Result::
        Tag::Invalid:
      return ZX_OK;
    case ::test::errorsyntax::ExampleUseOfErrorSyntax_CallWhichMayFail_Result::
        Tag::kResponse:
      new (&result->response_)::test::errorsyntax::
          ExampleUseOfErrorSyntax_CallWhichMayFail_Response();
      return ::fidl::Clone(response_, &result->response_);
    case ::test::errorsyntax::ExampleUseOfErrorSyntax_CallWhichMayFail_Result::
        Tag::kErr:
      return ::fidl::Clone(err_, &result->err_);
    default:
      return ZX_OK;
  }
}

ExampleUseOfErrorSyntax_CallWhichMayFail_Result&
ExampleUseOfErrorSyntax_CallWhichMayFail_Result::set_response(
    ::test::errorsyntax::ExampleUseOfErrorSyntax_CallWhichMayFail_Response
        value) {
  EnsureStorageInitialized(
      ::test::errorsyntax::ExampleUseOfErrorSyntax_CallWhichMayFail_Result::
          Tag::kResponse);
  response_ = std::move(value);
  return *this;
}

ExampleUseOfErrorSyntax_CallWhichMayFail_Result&
ExampleUseOfErrorSyntax_CallWhichMayFail_Result::set_err(uint32_t value) {
  EnsureStorageInitialized(
      ::test::errorsyntax::ExampleUseOfErrorSyntax_CallWhichMayFail_Result::
          Tag::kErr);
  err_ = std::move(value);
  return *this;
}

void ExampleUseOfErrorSyntax_CallWhichMayFail_Result::Destroy() {
  switch (tag_) {
    case ::test::errorsyntax::ExampleUseOfErrorSyntax_CallWhichMayFail_Result::
        Tag::kResponse:
      response_.~decltype(response_)();
      break;
    case ::test::errorsyntax::ExampleUseOfErrorSyntax_CallWhichMayFail_Result::
        Tag::kErr:
      break;

    default:
      break;
  }
  tag_ = static_cast<fidl_xunion_tag_t>(
      ::test::errorsyntax::ExampleUseOfErrorSyntax_CallWhichMayFail_Result::
          Tag::Invalid);
}

void ExampleUseOfErrorSyntax_CallWhichMayFail_Result::EnsureStorageInitialized(
    ::fidl_xunion_tag_t tag) {
  if (tag_ != tag) {
    Destroy();
    tag_ = tag;
    switch (tag_) {
      case static_cast<fidl_xunion_tag_t>(
          ::test::errorsyntax::ExampleUseOfErrorSyntax_CallWhichMayFail_Result::
              Tag::Invalid):
        break;
      case ::test::errorsyntax::
          ExampleUseOfErrorSyntax_CallWhichMayFail_Result::Tag::kResponse:
        new (&response_)::test::errorsyntax::
            ExampleUseOfErrorSyntax_CallWhichMayFail_Response();
        break;
      case ::test::errorsyntax::
          ExampleUseOfErrorSyntax_CallWhichMayFail_Result::Tag::kErr:
        new (&err_) uint32_t();
        break;
      default:
        break;
    }
  }
}

}  // namespace errorsyntax
}  // namespace test
