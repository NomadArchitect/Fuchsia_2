// WARNING: This file is machine generated by fidlgen.

#pragma once

#include "lib/fidl/cpp/internal/natural_types_header.h"

//
// Domain objects declarations (i.e. "natural types" in unified bindings).
//
namespace fidl {
namespace test {
namespace service {
#ifdef __Fuchsia__
class SingleMemberService;
#endif  // __Fuchsia__

#ifdef __Fuchsia__

class SecondProtocol;
using SecondProtocolHandle = ::fidl::InterfaceHandle<SecondProtocol>;
#endif  // __Fuchsia__

#ifdef __Fuchsia__
class MultiHomogeneousMemberService;
#endif  // __Fuchsia__

#ifdef __Fuchsia__
class MultiHeterogeneousMemberService;
#endif  // __Fuchsia__

#ifdef __Fuchsia__

class FirstProtocol;
using FirstProtocolHandle = ::fidl::InterfaceHandle<FirstProtocol>;
#endif  // __Fuchsia__

#ifdef __Fuchsia__
class EmptyService;
#endif  // __Fuchsia__

#ifdef __Fuchsia__

namespace _internal {
__LOCAL extern "C" const fidl_type_t
    fidl_test_service_SecondProtocolMethodOnSecondRequestTable;

}  // namespace _internal
class SecondProtocol_RequestEncoder {
 public:
  static ::fidl::HLCPPOutgoingMessage MethodOnSecond(
      ::fidl::Encoder* _encoder) {
    fidl_trace(WillHLCPPEncode);
    switch (_encoder->wire_format()) {
      case FIDL_WIRE_FORMAT_VERSION_V1:
        _encoder->Alloc(16 - sizeof(fidl_message_header_t));
        break;
      case FIDL_WIRE_FORMAT_VERSION_V2:
        _encoder->Alloc(16 - sizeof(fidl_message_header_t));
        break;
    }

    if (_encoder->wire_format() == FIDL_WIRE_FORMAT_VERSION_V1) {
    } else {
    }

    fidl_trace(DidHLCPPEncode,
               &::fidl::test::service::_internal::
                   fidl_test_service_SecondProtocolMethodOnSecondRequestTable,
               _encoder->GetPtr<const char>(0), _encoder->CurrentLength(),
               _encoder->CurrentHandleCount());

    return _encoder->GetMessage();
  }
};

class SecondProtocol_ResponseEncoder {
 public:
};
#endif  // __Fuchsia__

#ifdef __Fuchsia__

namespace _internal {
__LOCAL extern "C" const fidl_type_t
    fidl_test_service_FirstProtocolMethodOnFirstRequestTable;

}  // namespace _internal
class FirstProtocol_RequestEncoder {
 public:
  static ::fidl::HLCPPOutgoingMessage MethodOnFirst(::fidl::Encoder* _encoder) {
    fidl_trace(WillHLCPPEncode);
    switch (_encoder->wire_format()) {
      case FIDL_WIRE_FORMAT_VERSION_V1:
        _encoder->Alloc(16 - sizeof(fidl_message_header_t));
        break;
      case FIDL_WIRE_FORMAT_VERSION_V2:
        _encoder->Alloc(16 - sizeof(fidl_message_header_t));
        break;
    }

    if (_encoder->wire_format() == FIDL_WIRE_FORMAT_VERSION_V1) {
    } else {
    }

    fidl_trace(DidHLCPPEncode,
               &::fidl::test::service::_internal::
                   fidl_test_service_FirstProtocolMethodOnFirstRequestTable,
               _encoder->GetPtr<const char>(0), _encoder->CurrentLength(),
               _encoder->CurrentHandleCount());

    return _encoder->GetMessage();
  }
};

class FirstProtocol_ResponseEncoder {
 public:
};
#endif  // __Fuchsia__

}  // namespace service
}  // namespace test

}  // namespace fidl
