// WARNING: This file is machine generated by fidlgen.

#pragma once

#include <fidl/test/errorsyntax/parent/cpp/natural_types.h>

#include "lib/fidl/cpp/internal/natural_types_header.h"

//
// Domain objects declarations (i.e. "natural types" in unified bindings).
//
namespace fidl {
namespace test {
namespace errorsyntax {
class ExampleUseOfErrorSyntax_CallWhichMayFail_Response;

class ExampleUseOfErrorSyntax_CallWhichMayFail_Result;

#ifdef __Fuchsia__

class ExampleUseOfErrorSyntax;
using ExampleUseOfErrorSyntaxHandle =
    ::fidl::InterfaceHandle<ExampleUseOfErrorSyntax>;
#endif  // __Fuchsia__

class ExampleUseOfErrorSyntax_CallWhichMayFail_Response final {
 public:
  static const fidl_type_t* FidlType;
  ExampleUseOfErrorSyntax_CallWhichMayFail_Response() = default;
  explicit ExampleUseOfErrorSyntax_CallWhichMayFail_Response(int64_t v)
      : value(std::move(v)) {}
  int64_t ResultValue_() { return std::move(value); }
  explicit ExampleUseOfErrorSyntax_CallWhichMayFail_Response(
      ::std::tuple<int64_t> _value_tuple) {
    std::tie(value) = std::move(_value_tuple);
  }
  operator ::std::tuple<int64_t>() && {
    return std::make_tuple(std::move(value));
  }

  int64_t value{};

  static inline ::std::unique_ptr<
      ExampleUseOfErrorSyntax_CallWhichMayFail_Response>
  New() {
    return ::std::make_unique<
        ExampleUseOfErrorSyntax_CallWhichMayFail_Response>();
  }

  void Encode(::fidl::Encoder* _encoder, size_t _offset,
              cpp17::optional<::fidl::HandleInformation> maybe_handle_info =
                  cpp17::nullopt);
  static void Decode(::fidl::Decoder* _decoder,
                     ExampleUseOfErrorSyntax_CallWhichMayFail_Response* value,
                     size_t _offset);
  zx_status_t Clone(
      ExampleUseOfErrorSyntax_CallWhichMayFail_Response* result) const;
};

inline zx_status_t Clone(
    const ::fidl::test::errorsyntax::
        ExampleUseOfErrorSyntax_CallWhichMayFail_Response& _value,
    ::fidl::test::errorsyntax::
        ExampleUseOfErrorSyntax_CallWhichMayFail_Response* _result) {
  return _value.Clone(_result);
}

using ExampleUseOfErrorSyntax_CallWhichMayFail_ResponsePtr =
    ::std::unique_ptr<ExampleUseOfErrorSyntax_CallWhichMayFail_Response>;

class ExampleUseOfErrorSyntax_CallWhichMayFail_Result final {
 public:
  static const fidl_type_t* FidlType;

  ExampleUseOfErrorSyntax_CallWhichMayFail_Result();
  ~ExampleUseOfErrorSyntax_CallWhichMayFail_Result();

  ExampleUseOfErrorSyntax_CallWhichMayFail_Result(
      ExampleUseOfErrorSyntax_CallWhichMayFail_Result&&);
  ExampleUseOfErrorSyntax_CallWhichMayFail_Result& operator=(
      ExampleUseOfErrorSyntax_CallWhichMayFail_Result&&);

  static ExampleUseOfErrorSyntax_CallWhichMayFail_Result WithResponse(
      ::fidl::test::errorsyntax::
          ExampleUseOfErrorSyntax_CallWhichMayFail_Response&&);
  static ExampleUseOfErrorSyntax_CallWhichMayFail_Result WithErr(uint32_t&&);

  enum __attribute__((enum_extensibility(closed))) Tag : fidl_xunion_tag_t {

    kResponse = 1,  // 0x1
    kErr = 2,       // 0x2
    Invalid = ::std::numeric_limits<::fidl_union_tag_t>::max(),
  };

  static inline ::std::unique_ptr<
      ExampleUseOfErrorSyntax_CallWhichMayFail_Result>
  New() {
    return ::std::make_unique<
        ExampleUseOfErrorSyntax_CallWhichMayFail_Result>();
  }

  void Encode(::fidl::Encoder* encoder, size_t offset,
              cpp17::optional<::fidl::HandleInformation> maybe_handle_info =
                  cpp17::nullopt);
  static void Decode(::fidl::Decoder* _decoder,
                     ExampleUseOfErrorSyntax_CallWhichMayFail_Result* value,
                     size_t offset);
  zx_status_t Clone(
      ExampleUseOfErrorSyntax_CallWhichMayFail_Result* result) const;

  bool has_invalid_tag() const { return tag_ == Invalid; }

  bool is_response() const {
    return tag_ ==
           ::fidl::test::errorsyntax::
               ExampleUseOfErrorSyntax_CallWhichMayFail_Result::Tag::kResponse;
  }

  ::fidl::test::errorsyntax::ExampleUseOfErrorSyntax_CallWhichMayFail_Response&
  response() {
    EnsureStorageInitialized(
        ::fidl::test::errorsyntax::
            ExampleUseOfErrorSyntax_CallWhichMayFail_Result::Tag::kResponse);
    return response_;
  }

  const ::fidl::test::errorsyntax::
      ExampleUseOfErrorSyntax_CallWhichMayFail_Response&
      response() const {
    ZX_ASSERT(is_response());
    return response_;
  }
  ExampleUseOfErrorSyntax_CallWhichMayFail_Result& set_response(
      ::fidl::test::errorsyntax::
          ExampleUseOfErrorSyntax_CallWhichMayFail_Response value);

  bool is_err() const {
    return tag_ ==
           ::fidl::test::errorsyntax::
               ExampleUseOfErrorSyntax_CallWhichMayFail_Result::Tag::kErr;
  }

  uint32_t& err() {
    EnsureStorageInitialized(
        ::fidl::test::errorsyntax::
            ExampleUseOfErrorSyntax_CallWhichMayFail_Result::Tag::kErr);
    return err_;
  }

  const uint32_t& err() const {
    ZX_ASSERT(is_err());
    return err_;
  }
  ExampleUseOfErrorSyntax_CallWhichMayFail_Result& set_err(uint32_t value);

  ::fidl::test::errorsyntax::ExampleUseOfErrorSyntax_CallWhichMayFail_Result::
      Tag
      Which() const {
    return ::fidl::test::errorsyntax::
        ExampleUseOfErrorSyntax_CallWhichMayFail_Result::Tag(tag_);
  }

  // You probably want to use Which() method instead of Ordinal(). Use Ordinal()
  // only when you need access to the raw integral ordinal value.
  fidl_xunion_tag_t Ordinal() const { return tag_; }

  friend ::fidl::Equality<::fidl::test::errorsyntax::
                              ExampleUseOfErrorSyntax_CallWhichMayFail_Result>;
  ExampleUseOfErrorSyntax_CallWhichMayFail_Result(
      fpromise::result<int64_t, uint32_t>&& result) {
    ZX_ASSERT(!result.is_pending());
    if (result.is_ok()) {
      set_response(::fidl::test::errorsyntax::
                       ExampleUseOfErrorSyntax_CallWhichMayFail_Response{
                           result.take_value()});
    } else {
      set_err(result.take_error());
    }
  }
  ExampleUseOfErrorSyntax_CallWhichMayFail_Result(
      fpromise::ok_result<int64_t>&& result)
      : ExampleUseOfErrorSyntax_CallWhichMayFail_Result(
            fpromise::result<int64_t, uint32_t>(std::move(result))) {}
  ExampleUseOfErrorSyntax_CallWhichMayFail_Result(
      fpromise::error_result<uint32_t>&& result)
      : ExampleUseOfErrorSyntax_CallWhichMayFail_Result(
            fpromise::result<int64_t, uint32_t>(std::move(result))) {}
  operator fpromise::result<int64_t, uint32_t>() && {
    if (is_err()) {
      return fpromise::error(err());
    }
    ::std::tuple<int64_t> value_tuple = std::move(response());
    return fpromise::ok(std::move(std::get<0>(value_tuple)));
  }

 private:
  void Destroy();
  void EnsureStorageInitialized(::fidl_xunion_tag_t tag);

  ::fidl_xunion_tag_t tag_ = static_cast<fidl_xunion_tag_t>(
      ::fidl::test::errorsyntax::
          ExampleUseOfErrorSyntax_CallWhichMayFail_Result::Tag::Invalid);
  union {
    ::fidl::test::errorsyntax::ExampleUseOfErrorSyntax_CallWhichMayFail_Response
        response_;
    uint32_t err_;
  };
};

inline zx_status_t Clone(
    const ::fidl::test::errorsyntax::
        ExampleUseOfErrorSyntax_CallWhichMayFail_Result& value,
    ::fidl::test::errorsyntax::ExampleUseOfErrorSyntax_CallWhichMayFail_Result*
        result) {
  return value.Clone(result);
}

using ExampleUseOfErrorSyntax_CallWhichMayFail_ResultPtr =
    ::std::unique_ptr<ExampleUseOfErrorSyntax_CallWhichMayFail_Result>;

#ifdef __Fuchsia__

namespace _internal {
__LOCAL extern "C" const fidl_type_t
    fidl_test_errorsyntax_ExampleUseOfErrorSyntaxComposedCallWhichMayFailRequestMessageTable;

__LOCAL extern "C" const fidl_type_t
    fidl_test_errorsyntax_ExampleUseOfErrorSyntaxCallWhichMayFailRequestMessageTable;

}  // namespace _internal
class ExampleUseOfErrorSyntax_RequestEncoder {
 public:
  static ::fidl::HLCPPOutgoingMessage ComposedCallWhichMayFail(
      ::fidl::Encoder* _encoder, ::std::string* s) {
    fidl_trace(WillHLCPPEncode);
    switch (_encoder->wire_format()) {
      case ::fidl::internal::WireFormatVersion::kV1:
        _encoder->Alloc(32 - sizeof(fidl_message_header_t));
        break;
      case ::fidl::internal::WireFormatVersion::kV2:
        _encoder->Alloc(32 - sizeof(fidl_message_header_t));
        break;
    }

    if (_encoder->wire_format() == ::fidl::internal::WireFormatVersion::kV1) {
      ::fidl::Encode(_encoder, s, 16);

    } else {
      ::fidl::Encode(_encoder, s, 16);
    }

    fidl_trace(
        DidHLCPPEncode,
        &::fidl::test::errorsyntax::_internal::
            fidl_test_errorsyntax_ExampleUseOfErrorSyntaxComposedCallWhichMayFailRequestMessageTable,
        _encoder->GetPtr<const char>(0), _encoder->CurrentLength(),
        _encoder->CurrentHandleCount());

    return _encoder->GetMessage();
  }
  static ::fidl::HLCPPOutgoingMessage CallWhichMayFail(
      ::fidl::Encoder* _encoder, ::std::string* s) {
    fidl_trace(WillHLCPPEncode);
    switch (_encoder->wire_format()) {
      case ::fidl::internal::WireFormatVersion::kV1:
        _encoder->Alloc(32 - sizeof(fidl_message_header_t));
        break;
      case ::fidl::internal::WireFormatVersion::kV2:
        _encoder->Alloc(32 - sizeof(fidl_message_header_t));
        break;
    }

    if (_encoder->wire_format() == ::fidl::internal::WireFormatVersion::kV1) {
      ::fidl::Encode(_encoder, s, 16);

    } else {
      ::fidl::Encode(_encoder, s, 16);
    }

    fidl_trace(
        DidHLCPPEncode,
        &::fidl::test::errorsyntax::_internal::
            fidl_test_errorsyntax_ExampleUseOfErrorSyntaxCallWhichMayFailRequestMessageTable,
        _encoder->GetPtr<const char>(0), _encoder->CurrentLength(),
        _encoder->CurrentHandleCount());

    return _encoder->GetMessage();
  }
};
namespace _internal {
__LOCAL extern "C" const fidl_type_t
    fidl_test_errorsyntax_ExampleUseOfErrorSyntaxComposedCallWhichMayFailResponseMessageTable;

__LOCAL extern "C" const fidl_type_t
    fidl_test_errorsyntax_ExampleUseOfErrorSyntaxCallWhichMayFailResponseMessageTable;

}  // namespace _internal
class ExampleUseOfErrorSyntax_ResponseEncoder {
 public:
  static ::fidl::HLCPPOutgoingMessage ComposedCallWhichMayFail(
      ::fidl::Encoder* _encoder,
      ::fidl::test::errorsyntax::parent::
          ParentUsesErrorSyntax_ComposedCallWhichMayFail_Result* result) {
    fidl_trace(WillHLCPPEncode);
    switch (_encoder->wire_format()) {
      case ::fidl::internal::WireFormatVersion::kV1:
        _encoder->Alloc(40 - sizeof(fidl_message_header_t));
        break;
      case ::fidl::internal::WireFormatVersion::kV2:
        _encoder->Alloc(32 - sizeof(fidl_message_header_t));
        break;
    }

    if (_encoder->wire_format() == ::fidl::internal::WireFormatVersion::kV1) {
      ::fidl::Encode(_encoder, result, 16);

    } else {
      ::fidl::Encode(_encoder, result, 16);
    }

    fidl_trace(
        DidHLCPPEncode,
        &::fidl::test::errorsyntax::_internal::
            fidl_test_errorsyntax_ExampleUseOfErrorSyntaxComposedCallWhichMayFailResponseMessageTable,
        _encoder->GetPtr<const char>(0), _encoder->CurrentLength(),
        _encoder->CurrentHandleCount());
    return _encoder->GetMessage();
  }
  static ::fidl::HLCPPOutgoingMessage CallWhichMayFail(
      ::fidl::Encoder* _encoder,
      ::fidl::test::errorsyntax::
          ExampleUseOfErrorSyntax_CallWhichMayFail_Result* result) {
    fidl_trace(WillHLCPPEncode);
    switch (_encoder->wire_format()) {
      case ::fidl::internal::WireFormatVersion::kV1:
        _encoder->Alloc(40 - sizeof(fidl_message_header_t));
        break;
      case ::fidl::internal::WireFormatVersion::kV2:
        _encoder->Alloc(32 - sizeof(fidl_message_header_t));
        break;
    }

    if (_encoder->wire_format() == ::fidl::internal::WireFormatVersion::kV1) {
      ::fidl::Encode(_encoder, result, 16);

    } else {
      ::fidl::Encode(_encoder, result, 16);
    }

    fidl_trace(
        DidHLCPPEncode,
        &::fidl::test::errorsyntax::_internal::
            fidl_test_errorsyntax_ExampleUseOfErrorSyntaxCallWhichMayFailResponseMessageTable,
        _encoder->GetPtr<const char>(0), _encoder->CurrentLength(),
        _encoder->CurrentHandleCount());
    return _encoder->GetMessage();
  }
};
#endif  // __Fuchsia__

}  // namespace errorsyntax
}  // namespace test
template <>
struct CodingTraits<::fidl::test::errorsyntax::
                        ExampleUseOfErrorSyntax_CallWhichMayFail_Response>
    : public EncodableCodingTraits<
          ::fidl::test::errorsyntax::
              ExampleUseOfErrorSyntax_CallWhichMayFail_Response,
          8, 8> {};

template <>
struct IsMemcpyCompatible<::fidl::test::errorsyntax::
                              ExampleUseOfErrorSyntax_CallWhichMayFail_Response>
    : public internal::BoolConstant<
          !HasPadding<
              ::fidl::test::errorsyntax::
                  ExampleUseOfErrorSyntax_CallWhichMayFail_Response>::value &&
          IsMemcpyCompatible<int64_t>::value> {};

inline zx_status_t Clone(
    const ::fidl::test::errorsyntax::
        ExampleUseOfErrorSyntax_CallWhichMayFail_Response& value,
    ::fidl::test::errorsyntax::
        ExampleUseOfErrorSyntax_CallWhichMayFail_Response* result) {
  return ::fidl::test::errorsyntax::Clone(value, result);
}

template <>
struct Equality<::fidl::test::errorsyntax::
                    ExampleUseOfErrorSyntax_CallWhichMayFail_Response> {
  bool operator()(
      const ::fidl::test::errorsyntax::
          ExampleUseOfErrorSyntax_CallWhichMayFail_Response& _lhs,
      const ::fidl::test::errorsyntax::
          ExampleUseOfErrorSyntax_CallWhichMayFail_Response& _rhs) const {
    if (!::fidl::Equals(_lhs.value, _rhs.value)) {
      return false;
    }
    return true;
  }
};
template <>
struct IsFidlXUnion<
    ::fidl::test::errorsyntax::ExampleUseOfErrorSyntax_CallWhichMayFail_Result>
    : public std::true_type {};

template <>
struct CodingTraits<
    ::fidl::test::errorsyntax::ExampleUseOfErrorSyntax_CallWhichMayFail_Result>
    : public EncodableCodingTraits<
          ::fidl::test::errorsyntax::
              ExampleUseOfErrorSyntax_CallWhichMayFail_Result,
          24, 16> {};

template <>
struct CodingTraits<
    std::unique_ptr<::fidl::test::errorsyntax::
                        ExampleUseOfErrorSyntax_CallWhichMayFail_Result>> {
  static constexpr size_t inline_size_v1_no_ee = 24;
  static constexpr size_t inline_size_v2 = 16;

  static void Encode(
      Encoder* encoder,
      std::unique_ptr<::fidl::test::errorsyntax::
                          ExampleUseOfErrorSyntax_CallWhichMayFail_Result>*
          value,
      size_t offset,
      cpp17::optional<::fidl::HandleInformation> maybe_handle_info) {
    auto&& p_xunion = *value;
    if (p_xunion) {
      p_xunion->Encode(encoder, offset);
    }
  }

  static void Decode(
      Decoder* _decoder,
      std::unique_ptr<::fidl::test::errorsyntax::
                          ExampleUseOfErrorSyntax_CallWhichMayFail_Result>*
          value,
      size_t offset) {
    fidl_xunion_t* encoded = _decoder->GetPtr<fidl_xunion_t>(offset);
    if (encoded->tag == 0) {
      value->reset(nullptr);
      return;
    }

    value->reset(new ::fidl::test::errorsyntax::
                     ExampleUseOfErrorSyntax_CallWhichMayFail_Result);

    ::fidl::test::errorsyntax::ExampleUseOfErrorSyntax_CallWhichMayFail_Result::
        Decode(_decoder, value->get(), offset);
  }
};

inline zx_status_t Clone(
    const ::fidl::test::errorsyntax::
        ExampleUseOfErrorSyntax_CallWhichMayFail_Result& value,
    ::fidl::test::errorsyntax::ExampleUseOfErrorSyntax_CallWhichMayFail_Result*
        result) {
  return ::fidl::test::errorsyntax::Clone(value, result);
}

template <>
struct Equality<::fidl::test::errorsyntax::
                    ExampleUseOfErrorSyntax_CallWhichMayFail_Result> {
  bool operator()(
      const ::fidl::test::errorsyntax::
          ExampleUseOfErrorSyntax_CallWhichMayFail_Result& _lhs,
      const ::fidl::test::errorsyntax::
          ExampleUseOfErrorSyntax_CallWhichMayFail_Result& _rhs) const {
    if (_lhs.Ordinal() != _rhs.Ordinal()) {
      return false;
    }

    switch (_lhs.Ordinal()) {
      case static_cast<fidl_xunion_tag_t>(
          ::fidl::test::errorsyntax::
              ExampleUseOfErrorSyntax_CallWhichMayFail_Result::Tag::Invalid):
        return true;
      case ::fidl::test::errorsyntax::
          ExampleUseOfErrorSyntax_CallWhichMayFail_Result::Tag::kResponse:
        return ::fidl::Equals(_lhs.response_, _rhs.response_);
      case ::fidl::test::errorsyntax::
          ExampleUseOfErrorSyntax_CallWhichMayFail_Result::Tag::kErr:
        return ::fidl::Equals(_lhs.err_, _rhs.err_);

      default:
        return false;
    }
  }
};

}  // namespace fidl
