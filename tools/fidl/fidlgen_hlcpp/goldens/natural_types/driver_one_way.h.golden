// WARNING: This file is machine generated by fidlgen.

#pragma once

#include "lib/fidl/cpp/internal/natural_types_header.h"

//
// Domain objects declarations (i.e. "natural types" in unified bindings).
//
namespace fidl {
namespace test {
namespace driveroneway {
class Payload;

class Payload final {
 public:
  static const fidl_type_t* FidlType;

  uint32_t value{};

  static inline ::std::unique_ptr<Payload> New() {
    return ::std::make_unique<Payload>();
  }

  void Encode(::fidl::Encoder* _encoder, size_t _offset,
              cpp17::optional<::fidl::HandleInformation> maybe_handle_info =
                  cpp17::nullopt);
  static void Decode(::fidl::Decoder* _decoder, Payload* value, size_t _offset);
  zx_status_t Clone(Payload* result) const;
};

inline zx_status_t Clone(const ::fidl::test::driveroneway::Payload& _value,
                         ::fidl::test::driveroneway::Payload* _result) {
  return _value.Clone(_result);
}

using PayloadPtr = ::std::unique_ptr<Payload>;

}  // namespace driveroneway
}  // namespace test
template <>
struct CodingTraits<::fidl::test::driveroneway::Payload>
    : public EncodableCodingTraits<::fidl::test::driveroneway::Payload, 4, 4> {
};

template <>
struct IsMemcpyCompatible<::fidl::test::driveroneway::Payload>
    : public internal::BoolConstant<
          !HasPadding<::fidl::test::driveroneway::Payload>::value &&
          IsMemcpyCompatible<uint32_t>::value> {};

inline zx_status_t Clone(const ::fidl::test::driveroneway::Payload& value,
                         ::fidl::test::driveroneway::Payload* result) {
  return ::fidl::test::driveroneway::Clone(value, result);
}

template <>
struct Equality<::fidl::test::driveroneway::Payload> {
  bool operator()(const ::fidl::test::driveroneway::Payload& _lhs,
                  const ::fidl::test::driveroneway::Payload& _rhs) const {
    if (!::fidl::Equals(_lhs.value, _rhs.value)) {
      return false;
    }
    return true;
  }
};

}  // namespace fidl
