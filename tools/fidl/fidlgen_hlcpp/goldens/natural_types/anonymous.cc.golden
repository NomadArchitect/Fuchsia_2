// WARNING: This file is machine generated by fidlgen.

#include <fidl/test/anonymous/cpp/natural_types.h>

#include "lib/fidl/cpp/internal/natural_types_implementation.h"

//
// Domain objects definitions (i.e. "natural types" in unified bindings)
//
namespace fidl {
namespace test {
namespace anonymous {
extern "C" const fidl_type_t fidl_test_anonymous_UnionMemberTable;
const fidl_type_t* UnionMember::FidlType =
    &fidl_test_anonymous_UnionMemberTable;

UnionMember::UnionMember() {}

UnionMember::~UnionMember() { Destroy(); }

UnionMember::UnionMember(UnionMember&& other) : tag_(other.tag_) {
  switch (tag_) {
    case ::fidl::test::anonymous::UnionMember::Tag::kUnionData:
      union_data_ = std::move(other.union_data_);
      break;
    case static_cast<fidl_xunion_tag_t>(
        ::fidl::test::anonymous::UnionMember::Tag::Invalid):
      break;
    default:
      new (&unknown_data_) decltype(unknown_data_);
      unknown_data_ = std::move(other.unknown_data_);
      break;
  }
}

UnionMember& UnionMember::operator=(UnionMember&& other) {
  if (this != &other) {
    Destroy();
    tag_ = other.tag_;
    switch (tag_) {
      case ::fidl::test::anonymous::UnionMember::Tag::kUnionData:
        union_data_ = std::move(other.union_data_);
        break;
      case static_cast<fidl_xunion_tag_t>(
          ::fidl::test::anonymous::UnionMember::Tag::Invalid):
        break;
      default:
        new (&unknown_data_) decltype(unknown_data_);
        unknown_data_ = std::move(other.unknown_data_);
        break;
    }
  }
  return *this;
}

UnionMember UnionMember::WithUnionData(uint8_t&& val) {
  UnionMember result;
  result.set_union_data(std::move(val));
  return result;
}

void UnionMember::Encode(
    ::fidl::Encoder* encoder, size_t offset,
    cpp17::optional<::fidl::HandleInformation> maybe_handle_info) {
  const size_t length_before = encoder->CurrentLength();
  const size_t handles_before = encoder->CurrentHandleCount();

  switch (Which()) {
    case ::fidl::test::anonymous::UnionMember::Tag::kUnionData: {
      switch (encoder->wire_format()) {
        case FIDL_WIRE_FORMAT_VERSION_V1: {
          ::fidl::Encode(
              encoder, &union_data_,
              encoder->Alloc(
                  ::fidl::EncodingInlineSize<uint8_t, ::fidl::Encoder>(
                      encoder)));

          fidl_xunion_t* xunion = encoder->GetPtr<fidl_xunion_t>(offset);
          xunion->tag = tag_;
          xunion->envelope.num_bytes =
              static_cast<uint32_t>(encoder->CurrentLength() - length_before);
          xunion->envelope.num_handles = static_cast<uint32_t>(
              encoder->CurrentHandleCount() - handles_before);
          xunion->envelope.presence = FIDL_ALLOC_PRESENT;
          break;
        }
        case FIDL_WIRE_FORMAT_VERSION_V2: {
          if (::fidl::EncodingInlineSize<uint8_t>(encoder) <=
              FIDL_ENVELOPE_INLINING_SIZE_THRESHOLD) {
            ::fidl::Encode(encoder, &union_data_,
                           offset + offsetof(fidl_xunion_v2_t, envelope));

            fidl_xunion_v2_t* xunion =
                encoder->GetPtr<fidl_xunion_v2_t>(offset);
            xunion->tag = tag_;
            xunion->envelope.num_handles = static_cast<uint16_t>(
                encoder->CurrentHandleCount() - handles_before);
            xunion->envelope.flags = FIDL_ENVELOPE_FLAGS_INLINING_MASK;
            break;
          }

          ::fidl::Encode(
              encoder, &union_data_,
              encoder->Alloc(
                  ::fidl::EncodingInlineSize<uint8_t, ::fidl::Encoder>(
                      encoder)));

          fidl_xunion_v2_t* xunion = encoder->GetPtr<fidl_xunion_v2_t>(offset);
          xunion->tag = tag_;
          xunion->envelope.num_bytes =
              static_cast<uint32_t>(encoder->CurrentLength() - length_before);
          xunion->envelope.num_handles = static_cast<uint16_t>(
              encoder->CurrentHandleCount() - handles_before);
          xunion->envelope.flags = 0;
          break;
        }
      }
      break;
    }
    case ::fidl::test::anonymous::UnionMember::Tag::kUnknown: {
      ::fidl::EncodeUnknownBytes(encoder, &unknown_data_,
                                 offset + offsetof(fidl_xunion_t, envelope));
      *encoder->GetPtr<uint64_t>(offset) = tag_;
      break;
    }
    default:
      break;
  }
}

void UnionMember::Decode(::fidl::Decoder* _decoder, UnionMember* value,
                         size_t offset) {
  fidl_xunion_t* xunion = _decoder->GetPtr<fidl_xunion_t>(offset);

  if (!xunion->envelope.data) {
    value->EnsureStorageInitialized(static_cast<fidl_xunion_tag_t>(
        ::fidl::test::anonymous::UnionMember::Tag::Invalid));
    return;
  }

  value->EnsureStorageInitialized(xunion->tag);

  const size_t envelope_offset = _decoder->GetOffset(xunion->envelope.data);

  switch (value->tag_) {
    case ::fidl::test::anonymous::UnionMember::Tag::kUnionData:
      ::fidl::Decode(_decoder, &value->union_data_, envelope_offset);
      break;
    default:

      value->unknown_data_.resize(xunion->envelope.num_bytes);
      ::fidl::DecodeUnknownBytesContents(_decoder, &value->unknown_data_,
                                         envelope_offset);
      break;
  }
}

zx_status_t UnionMember::Clone(UnionMember* result) const {
  result->Destroy();
  result->tag_ = tag_;
  switch (tag_) {
    case ::fidl::test::anonymous::UnionMember::Tag::Invalid:
      return ZX_OK;
    case ::fidl::test::anonymous::UnionMember::Tag::kUnionData:
      return ::fidl::Clone(union_data_, &result->union_data_);
    default:
      new (&result->unknown_data_) decltype(unknown_data_);
      return ::fidl::Clone(unknown_data_, &result->unknown_data_);
      return ZX_OK;
  }
}

UnionMember& UnionMember::set_union_data(uint8_t value) {
  EnsureStorageInitialized(
      ::fidl::test::anonymous::UnionMember::Tag::kUnionData);
  union_data_ = std::move(value);
  return *this;
}
UnionMember& UnionMember::SetUnknownData(fidl_xunion_tag_t ordinal,
                                         std::vector<uint8_t> bytes) {
  EnsureStorageInitialized(ordinal);
  unknown_data_ = std::move(bytes);
  return *this;
}

void UnionMember::Destroy() {
  switch (tag_) {
    case ::fidl::test::anonymous::UnionMember::Tag::kUnionData:
      break;

    case static_cast<fidl_xunion_tag_t>(
        ::fidl::test::anonymous::UnionMember::Tag::Invalid):
      break;
    default:
      unknown_data_.~decltype(unknown_data_)();
      break;
  }
  tag_ = static_cast<fidl_xunion_tag_t>(
      ::fidl::test::anonymous::UnionMember::Tag::Invalid);
}

void UnionMember::EnsureStorageInitialized(::fidl_xunion_tag_t tag) {
  if (tag_ != tag) {
    Destroy();
    tag_ = tag;
    switch (tag_) {
      case static_cast<fidl_xunion_tag_t>(
          ::fidl::test::anonymous::UnionMember::Tag::Invalid):
        break;
      case ::fidl::test::anonymous::UnionMember::Tag::kUnionData:
        new (&union_data_) uint8_t();
        break;
      default:
        new (&unknown_data_) decltype(unknown_data_);
        break;
    }
  }
}

extern "C" const fidl_type_t fidl_test_anonymous_TableDataTable;
const fidl_type_t* TableData::FidlType = &fidl_test_anonymous_TableDataTable;

void TableData::Encode(
    ::fidl::Encoder* _encoder, size_t _offset,
    cpp17::optional<::fidl::HandleInformation> maybe_handle_info) {
  if (::fidl::IsMemcpyCompatible<TableData>::value) {
    memcpy(_encoder->template GetPtr<TableData>(_offset), this,
           sizeof(TableData));
  } else {
    if (_encoder->wire_format() == FIDL_WIRE_FORMAT_VERSION_V1) {
      ::fidl::Encode(_encoder, &data, _offset + 0);

    } else {
      ::fidl::Encode(_encoder, &data, _offset + 0);
    }
  }
}

void TableData::Decode(::fidl::Decoder* _decoder, TableData* _value,
                       size_t _offset) {
  if (::fidl::IsMemcpyCompatible<TableData>::value) {
    memcpy(_value, _decoder->template GetPtr<TableData>(_offset),
           sizeof(TableData));
  } else {
    ::fidl::Decode(_decoder, &_value->data, _offset + 0);
  }
}

zx_status_t TableData::Clone(TableData* _result) const {
  zx_status_t _status = ::fidl::Clone(data, &_result->data);
  if (_status != ZX_OK) return _status;
  return ZX_OK;
}

extern "C" const fidl_type_t fidl_test_anonymous_TableMemberTable;
const fidl_type_t* TableMember::FidlType =
    &fidl_test_anonymous_TableMemberTable;

TableMember::TableMember() {}

TableMember::TableMember(TableMember&& other) {
  field_presence_ = other.field_presence_;
  if (field_presence_.IsSet<1>()) {
    Construct(&table_data_value_.value,
              std::move(other.table_data_value_.value));
  }
  _unknown_data = std::move(other._unknown_data);
}

TableMember::~TableMember() {
  if (field_presence_.IsSet<1>()) {
    Destruct(&table_data_value_.value);
  }
}

TableMember& TableMember::operator=(TableMember&& other) {
  if (other.field_presence_.IsSet<1>()) {
    if (field_presence_.IsSet<1>()) {
      table_data_value_.value = std::move(other.table_data_value_.value);
    } else {
      field_presence_.Set<1>();
      Construct(&table_data_value_.value,
                std::move(other.table_data_value_.value));
    }
  } else if (field_presence_.IsSet<1>()) {
    field_presence_.Clear<1>();
    Destruct(&table_data_value_.value);
  }
  _unknown_data = std::move(other._unknown_data);
  return *this;
}

bool TableMember::IsEmpty() const {
  return field_presence_.IsEmpty() && _unknown_data.size() == 0;
}

void TableMember::Encode(
    ::fidl::Encoder* _encoder, size_t _offset,
    cpp17::optional<::fidl::HandleInformation> maybe_handle_info) {
  size_t max_ordinal = MaxOrdinal();
  ::fidl::EncodeVectorPointer(_encoder, max_ordinal, _offset);
  if (max_ordinal == 0) return;
  size_t envelope_size =
      (_encoder->wire_format() == FIDL_WIRE_FORMAT_VERSION_V1)
          ? sizeof(fidl_envelope_t)
          : sizeof(fidl_envelope_v2_t);
  size_t base = _encoder->Alloc(max_ordinal * envelope_size);
  auto next_unknown = _unknown_data.begin();
  if (field_presence_.IsSet<1>()) {
    // Encode unknown fields that have an ordinal that should appear before this
    // field.
    while (next_unknown != _unknown_data.end() && next_unknown->first < 2) {
      size_t envelope_base = base + (next_unknown->first - 1) * envelope_size;
      ::fidl::EncodeUnknownBytes(_encoder, &next_unknown->second,
                                 envelope_base);
      std::advance(next_unknown, 1);
    }

    const size_t length_before = _encoder->CurrentLength();
    const size_t handles_before = _encoder->CurrentHandleCount();

    size_t envelope_base = base + (2 - 1) * envelope_size;
    switch (_encoder->wire_format()) {
      case FIDL_WIRE_FORMAT_VERSION_V1: {
        ::fidl::Encode(
            _encoder, &table_data_value_.value,
            _encoder->Alloc(::fidl::EncodingInlineSize<
                            ::std::vector<::fidl::test::anonymous::TableData>,
                            ::fidl::Encoder>(_encoder)));

        fidl_envelope_t* envelope =
            _encoder->GetPtr<fidl_envelope_t>(envelope_base);
        envelope->num_bytes =
            static_cast<uint32_t>(_encoder->CurrentLength() - length_before);
        envelope->num_handles = static_cast<uint32_t>(
            _encoder->CurrentHandleCount() - handles_before);
        envelope->presence = FIDL_ALLOC_PRESENT;
        break;
      }
      case FIDL_WIRE_FORMAT_VERSION_V2: {
        if (::fidl::EncodingInlineSize<
                ::std::vector<::fidl::test::anonymous::TableData>>(_encoder) <=
            FIDL_ENVELOPE_INLINING_SIZE_THRESHOLD) {
          ::fidl::Encode(_encoder, &table_data_value_.value, envelope_base);

          fidl_envelope_v2_t* envelope =
              _encoder->GetPtr<fidl_envelope_v2_t>(envelope_base);
          envelope->num_handles = static_cast<uint16_t>(
              _encoder->CurrentHandleCount() - handles_before);
          envelope->flags = FIDL_ENVELOPE_FLAGS_INLINING_MASK;
          break;
        }

        ::fidl::Encode(
            _encoder, &table_data_value_.value,
            _encoder->Alloc(::fidl::EncodingInlineSize<
                            ::std::vector<::fidl::test::anonymous::TableData>,
                            ::fidl::Encoder>(_encoder)));

        fidl_envelope_v2_t* envelope =
            _encoder->GetPtr<fidl_envelope_v2_t>(envelope_base);
        envelope->num_bytes =
            static_cast<uint32_t>(_encoder->CurrentLength() - length_before);
        envelope->num_handles = static_cast<uint16_t>(
            _encoder->CurrentHandleCount() - handles_before);
        envelope->flags = 0;
        break;
      }
    }
  }
  // Encode any remaining unknown fields (i.e. ones that have an ordinal outside
  // the range of known ordinals)
  for (auto curr = next_unknown; curr != _unknown_data.end(); ++curr) {
    size_t envelope_base = base + (curr->first - 1) * envelope_size;
    ::fidl::EncodeUnknownBytes(_encoder, &curr->second, envelope_base);
  }
}

void TableMember::Decode(::fidl::Decoder* _decoder, TableMember* _value,
                         size_t _offset) {
  fidl_vector_t* encoded = _decoder->GetPtr<fidl_vector_t>(_offset);
  size_t base;
  size_t count;
  if (!encoded->data) {
    goto clear_all;
  }

  base = _decoder->GetOffset(encoded->data);
  count = encoded->count;
  if (count >= 2) {
    size_t envelope_base = base + (2 - 1) * sizeof(fidl_envelope_t);
    uint64_t presence;
    ::fidl::Decode(_decoder, &presence,
                   envelope_base + offsetof(fidl_envelope_t, presence));
    if (presence != 0) {
      ::fidl::Decode(_decoder, _value->mutable_table_data(),
                     _decoder->GetOffset(presence));
    } else {
      _value->clear_table_data();
    }
  } else {
    goto done_2;
  }

  if (count > 1) {
    for (uint64_t ordinal = 1; ordinal <= count; ordinal++) {
      if (IsOrdinalKnown(ordinal)) continue;

      size_t envelope_base = base + (ordinal - 1) * sizeof(fidl_envelope_t);
      fidl_envelope_t* envelope =
          _decoder->GetPtr<fidl_envelope_t>(envelope_base);
      if (envelope->presence != 0) {
        auto result = _value->_unknown_data.emplace(
            std::piecewise_construct, std::forward_as_tuple(ordinal),
            std::forward_as_tuple());
        auto iter = result.first;
        iter->second.resize(envelope->num_bytes);
        ::fidl::DecodeUnknownBytesContents(_decoder, &iter->second,
                                           _decoder->GetOffset(envelope->data));
      }
    }
  }

  return;

  // Clear unset values.
clear_all:
done_2:
  _value->clear_table_data();
  return;
}

zx_status_t TableMember::Clone(TableMember* result) const {
  if (field_presence_.IsSet<1>()) {
    zx_status_t _status =
        ::fidl::Clone(table_data_value_.value, result->mutable_table_data());
    if (_status != ZX_OK) return _status;
  } else {
    result->clear_table_data();
  }
  return ::fidl::Clone(_unknown_data, &result->_unknown_data);
}

#if (__cplusplus < 201703)
constexpr const ::fidl::test::anonymous::SomeProtocol_SomeMethod_Error
    SomeProtocol_SomeMethod_Error::ERROR_ONE =
        ::fidl::test::anonymous::SomeProtocol_SomeMethod_Error(1u);
constexpr const ::fidl::test::anonymous::SomeProtocol_SomeMethod_Error
    SomeProtocol_SomeMethod_Error::ERROR_TWO =
        ::fidl::test::anonymous::SomeProtocol_SomeMethod_Error(2u);
#endif  // (__cplusplus < 201703)

#if (__cplusplus < 201703)
constexpr const ::fidl::test::anonymous::Op Op::ADD =
    ::fidl::test::anonymous::Op(1u);
constexpr const ::fidl::test::anonymous::Op Op::MUL =
    ::fidl::test::anonymous::Op(2u);
constexpr const ::fidl::test::anonymous::Op Op::DIV =
    ::fidl::test::anonymous::Op(3u);
#endif  // (__cplusplus < 201703)

extern "C" const fidl_type_t fidl_test_anonymous_BinOpTable;
const fidl_type_t* BinOp::FidlType = &fidl_test_anonymous_BinOpTable;

void BinOp::Encode(
    ::fidl::Encoder* _encoder, size_t _offset,
    cpp17::optional<::fidl::HandleInformation> maybe_handle_info) {
  if (::fidl::IsMemcpyCompatible<BinOp>::value) {
    memcpy(_encoder->template GetPtr<BinOp>(_offset), this, sizeof(BinOp));
  } else {
    if (_encoder->wire_format() == FIDL_WIRE_FORMAT_VERSION_V1) {
      ::fidl::Encode(_encoder, &op, _offset + 0);
      ::fidl::Encode(_encoder, &left, _offset + 8);
      ::fidl::Encode(_encoder, &right, _offset + 32);

    } else {
      ::fidl::Encode(_encoder, &op, _offset + 0);
      ::fidl::Encode(_encoder, &left, _offset + 8);
      ::fidl::Encode(_encoder, &right, _offset + 24);
    }
  }
}

void BinOp::Decode(::fidl::Decoder* _decoder, BinOp* _value, size_t _offset) {
  if (::fidl::IsMemcpyCompatible<BinOp>::value) {
    memcpy(_value, _decoder->template GetPtr<BinOp>(_offset), sizeof(BinOp));
  } else {
    ::fidl::Decode(_decoder, &_value->op, _offset + 0);
    ::fidl::Decode(_decoder, &_value->left, _offset + 8);
    ::fidl::Decode(_decoder, &_value->right, _offset + 32);
  }
}

zx_status_t BinOp::Clone(BinOp* _result) const {
  zx_status_t _status = ::fidl::Clone(op, &_result->op);
  if (_status != ZX_OK) return _status;
  _status = ::fidl::Clone(left, &_result->left);
  if (_status != ZX_OK) return _status;
  _status = ::fidl::Clone(right, &_result->right);
  if (_status != ZX_OK) return _status;
  return ZX_OK;
}

#if (__cplusplus < 201703)
constexpr const ::fidl::test::anonymous::Flags Flags::INLINE =
    ::fidl::test::anonymous::Flags(1u);
constexpr const ::fidl::test::anonymous::Flags Flags::kMask =
    ::fidl::test::anonymous::Flags(1u);

#endif  // (__cplusplus < 201703)

extern "C" const fidl_type_t fidl_test_anonymous_FunctionApplicationTable;
const fidl_type_t* FunctionApplication::FidlType =
    &fidl_test_anonymous_FunctionApplicationTable;

FunctionApplication::FunctionApplication() {}

FunctionApplication::FunctionApplication(FunctionApplication&& other) {
  field_presence_ = other.field_presence_;
  if (field_presence_.IsSet<0>()) {
    Construct(&func_value_.value, std::move(other.func_value_.value));
  }
  if (field_presence_.IsSet<2>()) {
    Construct(&args_value_.value, std::move(other.args_value_.value));
  }
  if (field_presence_.IsSet<3>()) {
    Construct(&flags_value_.value, std::move(other.flags_value_.value));
  }
  _unknown_data = std::move(other._unknown_data);
}

FunctionApplication::~FunctionApplication() {
  if (field_presence_.IsSet<0>()) {
    Destruct(&func_value_.value);
  }
  if (field_presence_.IsSet<2>()) {
    Destruct(&args_value_.value);
  }
  if (field_presence_.IsSet<3>()) {
    Destruct(&flags_value_.value);
  }
}

FunctionApplication& FunctionApplication::operator=(
    FunctionApplication&& other) {
  if (other.field_presence_.IsSet<0>()) {
    if (field_presence_.IsSet<0>()) {
      func_value_.value = std::move(other.func_value_.value);
    } else {
      field_presence_.Set<0>();
      Construct(&func_value_.value, std::move(other.func_value_.value));
    }
  } else if (field_presence_.IsSet<0>()) {
    field_presence_.Clear<0>();
    Destruct(&func_value_.value);
  }
  if (other.field_presence_.IsSet<2>()) {
    if (field_presence_.IsSet<2>()) {
      args_value_.value = std::move(other.args_value_.value);
    } else {
      field_presence_.Set<2>();
      Construct(&args_value_.value, std::move(other.args_value_.value));
    }
  } else if (field_presence_.IsSet<2>()) {
    field_presence_.Clear<2>();
    Destruct(&args_value_.value);
  }
  if (other.field_presence_.IsSet<3>()) {
    if (field_presence_.IsSet<3>()) {
      flags_value_.value = std::move(other.flags_value_.value);
    } else {
      field_presence_.Set<3>();
      Construct(&flags_value_.value, std::move(other.flags_value_.value));
    }
  } else if (field_presence_.IsSet<3>()) {
    field_presence_.Clear<3>();
    Destruct(&flags_value_.value);
  }
  _unknown_data = std::move(other._unknown_data);
  return *this;
}

bool FunctionApplication::IsEmpty() const {
  return field_presence_.IsEmpty() && _unknown_data.size() == 0;
}

void FunctionApplication::Encode(
    ::fidl::Encoder* _encoder, size_t _offset,
    cpp17::optional<::fidl::HandleInformation> maybe_handle_info) {
  size_t max_ordinal = MaxOrdinal();
  ::fidl::EncodeVectorPointer(_encoder, max_ordinal, _offset);
  if (max_ordinal == 0) return;
  size_t envelope_size =
      (_encoder->wire_format() == FIDL_WIRE_FORMAT_VERSION_V1)
          ? sizeof(fidl_envelope_t)
          : sizeof(fidl_envelope_v2_t);
  size_t base = _encoder->Alloc(max_ordinal * envelope_size);
  auto next_unknown = _unknown_data.begin();
  if (field_presence_.IsSet<0>()) {
    // Encode unknown fields that have an ordinal that should appear before this
    // field.
    while (next_unknown != _unknown_data.end() && next_unknown->first < 1) {
      size_t envelope_base = base + (next_unknown->first - 1) * envelope_size;
      ::fidl::EncodeUnknownBytes(_encoder, &next_unknown->second,
                                 envelope_base);
      std::advance(next_unknown, 1);
    }

    const size_t length_before = _encoder->CurrentLength();
    const size_t handles_before = _encoder->CurrentHandleCount();

    size_t envelope_base = base + (1 - 1) * envelope_size;
    switch (_encoder->wire_format()) {
      case FIDL_WIRE_FORMAT_VERSION_V1: {
        ::fidl::Encode(
            _encoder, &func_value_.value,
            _encoder->Alloc(
                ::fidl::EncodingInlineSize<::std::string, ::fidl::Encoder>(
                    _encoder)));

        fidl_envelope_t* envelope =
            _encoder->GetPtr<fidl_envelope_t>(envelope_base);
        envelope->num_bytes =
            static_cast<uint32_t>(_encoder->CurrentLength() - length_before);
        envelope->num_handles = static_cast<uint32_t>(
            _encoder->CurrentHandleCount() - handles_before);
        envelope->presence = FIDL_ALLOC_PRESENT;
        break;
      }
      case FIDL_WIRE_FORMAT_VERSION_V2: {
        if (::fidl::EncodingInlineSize<::std::string>(_encoder) <=
            FIDL_ENVELOPE_INLINING_SIZE_THRESHOLD) {
          ::fidl::Encode(_encoder, &func_value_.value, envelope_base);

          fidl_envelope_v2_t* envelope =
              _encoder->GetPtr<fidl_envelope_v2_t>(envelope_base);
          envelope->num_handles = static_cast<uint16_t>(
              _encoder->CurrentHandleCount() - handles_before);
          envelope->flags = FIDL_ENVELOPE_FLAGS_INLINING_MASK;
          break;
        }

        ::fidl::Encode(
            _encoder, &func_value_.value,
            _encoder->Alloc(
                ::fidl::EncodingInlineSize<::std::string, ::fidl::Encoder>(
                    _encoder)));

        fidl_envelope_v2_t* envelope =
            _encoder->GetPtr<fidl_envelope_v2_t>(envelope_base);
        envelope->num_bytes =
            static_cast<uint32_t>(_encoder->CurrentLength() - length_before);
        envelope->num_handles = static_cast<uint16_t>(
            _encoder->CurrentHandleCount() - handles_before);
        envelope->flags = 0;
        break;
      }
    }
  }
  if (field_presence_.IsSet<2>()) {
    // Encode unknown fields that have an ordinal that should appear before this
    // field.
    while (next_unknown != _unknown_data.end() && next_unknown->first < 3) {
      size_t envelope_base = base + (next_unknown->first - 1) * envelope_size;
      ::fidl::EncodeUnknownBytes(_encoder, &next_unknown->second,
                                 envelope_base);
      std::advance(next_unknown, 1);
    }

    const size_t length_before = _encoder->CurrentLength();
    const size_t handles_before = _encoder->CurrentHandleCount();

    size_t envelope_base = base + (3 - 1) * envelope_size;
    switch (_encoder->wire_format()) {
      case FIDL_WIRE_FORMAT_VERSION_V1: {
        ::fidl::Encode(
            _encoder, &args_value_.value,
            _encoder->Alloc(
                ::fidl::EncodingInlineSize<
                    ::std::vector<
                        ::std::unique_ptr<::fidl::test::anonymous::Expression>>,
                    ::fidl::Encoder>(_encoder)));

        fidl_envelope_t* envelope =
            _encoder->GetPtr<fidl_envelope_t>(envelope_base);
        envelope->num_bytes =
            static_cast<uint32_t>(_encoder->CurrentLength() - length_before);
        envelope->num_handles = static_cast<uint32_t>(
            _encoder->CurrentHandleCount() - handles_before);
        envelope->presence = FIDL_ALLOC_PRESENT;
        break;
      }
      case FIDL_WIRE_FORMAT_VERSION_V2: {
        if (::fidl::EncodingInlineSize<::std::vector<
                ::std::unique_ptr<::fidl::test::anonymous::Expression>>>(
                _encoder) <= FIDL_ENVELOPE_INLINING_SIZE_THRESHOLD) {
          ::fidl::Encode(_encoder, &args_value_.value, envelope_base);

          fidl_envelope_v2_t* envelope =
              _encoder->GetPtr<fidl_envelope_v2_t>(envelope_base);
          envelope->num_handles = static_cast<uint16_t>(
              _encoder->CurrentHandleCount() - handles_before);
          envelope->flags = FIDL_ENVELOPE_FLAGS_INLINING_MASK;
          break;
        }

        ::fidl::Encode(
            _encoder, &args_value_.value,
            _encoder->Alloc(
                ::fidl::EncodingInlineSize<
                    ::std::vector<
                        ::std::unique_ptr<::fidl::test::anonymous::Expression>>,
                    ::fidl::Encoder>(_encoder)));

        fidl_envelope_v2_t* envelope =
            _encoder->GetPtr<fidl_envelope_v2_t>(envelope_base);
        envelope->num_bytes =
            static_cast<uint32_t>(_encoder->CurrentLength() - length_before);
        envelope->num_handles = static_cast<uint16_t>(
            _encoder->CurrentHandleCount() - handles_before);
        envelope->flags = 0;
        break;
      }
    }
  }
  if (field_presence_.IsSet<3>()) {
    // Encode unknown fields that have an ordinal that should appear before this
    // field.
    while (next_unknown != _unknown_data.end() && next_unknown->first < 4) {
      size_t envelope_base = base + (next_unknown->first - 1) * envelope_size;
      ::fidl::EncodeUnknownBytes(_encoder, &next_unknown->second,
                                 envelope_base);
      std::advance(next_unknown, 1);
    }

    const size_t length_before = _encoder->CurrentLength();
    const size_t handles_before = _encoder->CurrentHandleCount();

    size_t envelope_base = base + (4 - 1) * envelope_size;
    switch (_encoder->wire_format()) {
      case FIDL_WIRE_FORMAT_VERSION_V1: {
        ::fidl::Encode(
            _encoder, &flags_value_.value,
            _encoder->Alloc(
                ::fidl::EncodingInlineSize<::fidl::test::anonymous::Flags,
                                           ::fidl::Encoder>(_encoder)));

        fidl_envelope_t* envelope =
            _encoder->GetPtr<fidl_envelope_t>(envelope_base);
        envelope->num_bytes =
            static_cast<uint32_t>(_encoder->CurrentLength() - length_before);
        envelope->num_handles = static_cast<uint32_t>(
            _encoder->CurrentHandleCount() - handles_before);
        envelope->presence = FIDL_ALLOC_PRESENT;
        break;
      }
      case FIDL_WIRE_FORMAT_VERSION_V2: {
        if (::fidl::EncodingInlineSize<::fidl::test::anonymous::Flags>(
                _encoder) <= FIDL_ENVELOPE_INLINING_SIZE_THRESHOLD) {
          ::fidl::Encode(_encoder, &flags_value_.value, envelope_base);

          fidl_envelope_v2_t* envelope =
              _encoder->GetPtr<fidl_envelope_v2_t>(envelope_base);
          envelope->num_handles = static_cast<uint16_t>(
              _encoder->CurrentHandleCount() - handles_before);
          envelope->flags = FIDL_ENVELOPE_FLAGS_INLINING_MASK;
          break;
        }

        ::fidl::Encode(
            _encoder, &flags_value_.value,
            _encoder->Alloc(
                ::fidl::EncodingInlineSize<::fidl::test::anonymous::Flags,
                                           ::fidl::Encoder>(_encoder)));

        fidl_envelope_v2_t* envelope =
            _encoder->GetPtr<fidl_envelope_v2_t>(envelope_base);
        envelope->num_bytes =
            static_cast<uint32_t>(_encoder->CurrentLength() - length_before);
        envelope->num_handles = static_cast<uint16_t>(
            _encoder->CurrentHandleCount() - handles_before);
        envelope->flags = 0;
        break;
      }
    }
  }
  // Encode any remaining unknown fields (i.e. ones that have an ordinal outside
  // the range of known ordinals)
  for (auto curr = next_unknown; curr != _unknown_data.end(); ++curr) {
    size_t envelope_base = base + (curr->first - 1) * envelope_size;
    ::fidl::EncodeUnknownBytes(_encoder, &curr->second, envelope_base);
  }
}

void FunctionApplication::Decode(::fidl::Decoder* _decoder,
                                 FunctionApplication* _value, size_t _offset) {
  fidl_vector_t* encoded = _decoder->GetPtr<fidl_vector_t>(_offset);
  size_t base;
  size_t count;
  if (!encoded->data) {
    goto clear_all;
  }

  base = _decoder->GetOffset(encoded->data);
  count = encoded->count;
  if (count >= 1) {
    size_t envelope_base = base + (1 - 1) * sizeof(fidl_envelope_t);
    uint64_t presence;
    ::fidl::Decode(_decoder, &presence,
                   envelope_base + offsetof(fidl_envelope_t, presence));
    if (presence != 0) {
      ::fidl::Decode(_decoder, _value->mutable_func(),
                     _decoder->GetOffset(presence));
    } else {
      _value->clear_func();
    }
  } else {
    goto done_1;
  }
  if (count >= 3) {
    size_t envelope_base = base + (3 - 1) * sizeof(fidl_envelope_t);
    uint64_t presence;
    ::fidl::Decode(_decoder, &presence,
                   envelope_base + offsetof(fidl_envelope_t, presence));
    if (presence != 0) {
      ::fidl::Decode(_decoder, _value->mutable_args(),
                     _decoder->GetOffset(presence));
    } else {
      _value->clear_args();
    }
  } else {
    goto done_3;
  }
  if (count >= 4) {
    size_t envelope_base = base + (4 - 1) * sizeof(fidl_envelope_t);
    uint64_t presence;
    ::fidl::Decode(_decoder, &presence,
                   envelope_base + offsetof(fidl_envelope_t, presence));
    if (presence != 0) {
      ::fidl::Decode(_decoder, _value->mutable_flags(),
                     _decoder->GetOffset(presence));
    } else {
      _value->clear_flags();
    }
  } else {
    goto done_4;
  }

  if (count > 3) {
    for (uint64_t ordinal = 1; ordinal <= count; ordinal++) {
      if (IsOrdinalKnown(ordinal)) continue;

      size_t envelope_base = base + (ordinal - 1) * sizeof(fidl_envelope_t);
      fidl_envelope_t* envelope =
          _decoder->GetPtr<fidl_envelope_t>(envelope_base);
      if (envelope->presence != 0) {
        auto result = _value->_unknown_data.emplace(
            std::piecewise_construct, std::forward_as_tuple(ordinal),
            std::forward_as_tuple());
        auto iter = result.first;
        iter->second.resize(envelope->num_bytes);
        ::fidl::DecodeUnknownBytesContents(_decoder, &iter->second,
                                           _decoder->GetOffset(envelope->data));
      }
    }
  }

  return;

  // Clear unset values.
clear_all:
done_1:
  _value->clear_func();
done_3:
  _value->clear_args();
done_4:
  _value->clear_flags();
  return;
}

zx_status_t FunctionApplication::Clone(FunctionApplication* result) const {
  if (field_presence_.IsSet<0>()) {
    zx_status_t _status =
        ::fidl::Clone(func_value_.value, result->mutable_func());
    if (_status != ZX_OK) return _status;
  } else {
    result->clear_func();
  }
  if (field_presence_.IsSet<2>()) {
    zx_status_t _status =
        ::fidl::Clone(args_value_.value, result->mutable_args());
    if (_status != ZX_OK) return _status;
  } else {
    result->clear_args();
  }
  if (field_presence_.IsSet<3>()) {
    zx_status_t _status =
        ::fidl::Clone(flags_value_.value, result->mutable_flags());
    if (_status != ZX_OK) return _status;
  } else {
    result->clear_flags();
  }
  return ::fidl::Clone(_unknown_data, &result->_unknown_data);
}

extern "C" const fidl_type_t fidl_test_anonymous_ExpressionTable;
const fidl_type_t* Expression::FidlType = &fidl_test_anonymous_ExpressionTable;

Expression::Expression() {}

Expression::~Expression() { Destroy(); }

Expression::Expression(Expression&& other) : tag_(other.tag_) {
  switch (tag_) {
    case ::fidl::test::anonymous::Expression::Tag::kValue:
      value_ = std::move(other.value_);
      break;
    case ::fidl::test::anonymous::Expression::Tag::kBinOp:
      new (&bin_op_)::fidl::test::anonymous::BinOp();
      bin_op_ = std::move(other.bin_op_);
      break;
    case ::fidl::test::anonymous::Expression::Tag::kFunctionApplication:
      new (
          &function_application_)::fidl::test::anonymous::FunctionApplication();
      function_application_ = std::move(other.function_application_);
      break;
    case static_cast<fidl_xunion_tag_t>(
        ::fidl::test::anonymous::Expression::Tag::Invalid):
      break;
    default:
      new (&unknown_data_) decltype(unknown_data_);
      unknown_data_ = std::move(other.unknown_data_);
      break;
  }
}

Expression& Expression::operator=(Expression&& other) {
  if (this != &other) {
    Destroy();
    tag_ = other.tag_;
    switch (tag_) {
      case ::fidl::test::anonymous::Expression::Tag::kValue:
        value_ = std::move(other.value_);
        break;
      case ::fidl::test::anonymous::Expression::Tag::kBinOp:
        new (&bin_op_)::fidl::test::anonymous::BinOp();
        bin_op_ = std::move(other.bin_op_);
        break;
      case ::fidl::test::anonymous::Expression::Tag::kFunctionApplication:
        new (&function_application_)::fidl::test::anonymous::
            FunctionApplication();
        function_application_ = std::move(other.function_application_);
        break;
      case static_cast<fidl_xunion_tag_t>(
          ::fidl::test::anonymous::Expression::Tag::Invalid):
        break;
      default:
        new (&unknown_data_) decltype(unknown_data_);
        unknown_data_ = std::move(other.unknown_data_);
        break;
    }
  }
  return *this;
}

Expression Expression::WithValue(uint64_t&& val) {
  Expression result;
  result.set_value(std::move(val));
  return result;
}
Expression Expression::WithBinOp(::fidl::test::anonymous::BinOp&& val) {
  Expression result;
  result.set_bin_op(std::move(val));
  return result;
}
Expression Expression::WithFunctionApplication(
    ::fidl::test::anonymous::FunctionApplication&& val) {
  Expression result;
  result.set_function_application(std::move(val));
  return result;
}

void Expression::Encode(
    ::fidl::Encoder* encoder, size_t offset,
    cpp17::optional<::fidl::HandleInformation> maybe_handle_info) {
  const size_t length_before = encoder->CurrentLength();
  const size_t handles_before = encoder->CurrentHandleCount();

  switch (Which()) {
    case ::fidl::test::anonymous::Expression::Tag::kValue: {
      switch (encoder->wire_format()) {
        case FIDL_WIRE_FORMAT_VERSION_V1: {
          ::fidl::Encode(
              encoder, &value_,
              encoder->Alloc(
                  ::fidl::EncodingInlineSize<uint64_t, ::fidl::Encoder>(
                      encoder)));

          fidl_xunion_t* xunion = encoder->GetPtr<fidl_xunion_t>(offset);
          xunion->tag = tag_;
          xunion->envelope.num_bytes =
              static_cast<uint32_t>(encoder->CurrentLength() - length_before);
          xunion->envelope.num_handles = static_cast<uint32_t>(
              encoder->CurrentHandleCount() - handles_before);
          xunion->envelope.presence = FIDL_ALLOC_PRESENT;
          break;
        }
        case FIDL_WIRE_FORMAT_VERSION_V2: {
          if (::fidl::EncodingInlineSize<uint64_t>(encoder) <=
              FIDL_ENVELOPE_INLINING_SIZE_THRESHOLD) {
            ::fidl::Encode(encoder, &value_,
                           offset + offsetof(fidl_xunion_v2_t, envelope));

            fidl_xunion_v2_t* xunion =
                encoder->GetPtr<fidl_xunion_v2_t>(offset);
            xunion->tag = tag_;
            xunion->envelope.num_handles = static_cast<uint16_t>(
                encoder->CurrentHandleCount() - handles_before);
            xunion->envelope.flags = FIDL_ENVELOPE_FLAGS_INLINING_MASK;
            break;
          }

          ::fidl::Encode(
              encoder, &value_,
              encoder->Alloc(
                  ::fidl::EncodingInlineSize<uint64_t, ::fidl::Encoder>(
                      encoder)));

          fidl_xunion_v2_t* xunion = encoder->GetPtr<fidl_xunion_v2_t>(offset);
          xunion->tag = tag_;
          xunion->envelope.num_bytes =
              static_cast<uint32_t>(encoder->CurrentLength() - length_before);
          xunion->envelope.num_handles = static_cast<uint16_t>(
              encoder->CurrentHandleCount() - handles_before);
          xunion->envelope.flags = 0;
          break;
        }
      }
      break;
    }
    case ::fidl::test::anonymous::Expression::Tag::kBinOp: {
      switch (encoder->wire_format()) {
        case FIDL_WIRE_FORMAT_VERSION_V1: {
          ::fidl::Encode(
              encoder, &bin_op_,
              encoder->Alloc(
                  ::fidl::EncodingInlineSize<::fidl::test::anonymous::BinOp,
                                             ::fidl::Encoder>(encoder)));

          fidl_xunion_t* xunion = encoder->GetPtr<fidl_xunion_t>(offset);
          xunion->tag = tag_;
          xunion->envelope.num_bytes =
              static_cast<uint32_t>(encoder->CurrentLength() - length_before);
          xunion->envelope.num_handles = static_cast<uint32_t>(
              encoder->CurrentHandleCount() - handles_before);
          xunion->envelope.presence = FIDL_ALLOC_PRESENT;
          break;
        }
        case FIDL_WIRE_FORMAT_VERSION_V2: {
          if (::fidl::EncodingInlineSize<::fidl::test::anonymous::BinOp>(
                  encoder) <= FIDL_ENVELOPE_INLINING_SIZE_THRESHOLD) {
            ::fidl::Encode(encoder, &bin_op_,
                           offset + offsetof(fidl_xunion_v2_t, envelope));

            fidl_xunion_v2_t* xunion =
                encoder->GetPtr<fidl_xunion_v2_t>(offset);
            xunion->tag = tag_;
            xunion->envelope.num_handles = static_cast<uint16_t>(
                encoder->CurrentHandleCount() - handles_before);
            xunion->envelope.flags = FIDL_ENVELOPE_FLAGS_INLINING_MASK;
            break;
          }

          ::fidl::Encode(
              encoder, &bin_op_,
              encoder->Alloc(
                  ::fidl::EncodingInlineSize<::fidl::test::anonymous::BinOp,
                                             ::fidl::Encoder>(encoder)));

          fidl_xunion_v2_t* xunion = encoder->GetPtr<fidl_xunion_v2_t>(offset);
          xunion->tag = tag_;
          xunion->envelope.num_bytes =
              static_cast<uint32_t>(encoder->CurrentLength() - length_before);
          xunion->envelope.num_handles = static_cast<uint16_t>(
              encoder->CurrentHandleCount() - handles_before);
          xunion->envelope.flags = 0;
          break;
        }
      }
      break;
    }
    case ::fidl::test::anonymous::Expression::Tag::kFunctionApplication: {
      switch (encoder->wire_format()) {
        case FIDL_WIRE_FORMAT_VERSION_V1: {
          ::fidl::Encode(
              encoder, &function_application_,
              encoder->Alloc(::fidl::EncodingInlineSize<
                             ::fidl::test::anonymous::FunctionApplication,
                             ::fidl::Encoder>(encoder)));

          fidl_xunion_t* xunion = encoder->GetPtr<fidl_xunion_t>(offset);
          xunion->tag = tag_;
          xunion->envelope.num_bytes =
              static_cast<uint32_t>(encoder->CurrentLength() - length_before);
          xunion->envelope.num_handles = static_cast<uint32_t>(
              encoder->CurrentHandleCount() - handles_before);
          xunion->envelope.presence = FIDL_ALLOC_PRESENT;
          break;
        }
        case FIDL_WIRE_FORMAT_VERSION_V2: {
          if (::fidl::EncodingInlineSize<
                  ::fidl::test::anonymous::FunctionApplication>(encoder) <=
              FIDL_ENVELOPE_INLINING_SIZE_THRESHOLD) {
            ::fidl::Encode(encoder, &function_application_,
                           offset + offsetof(fidl_xunion_v2_t, envelope));

            fidl_xunion_v2_t* xunion =
                encoder->GetPtr<fidl_xunion_v2_t>(offset);
            xunion->tag = tag_;
            xunion->envelope.num_handles = static_cast<uint16_t>(
                encoder->CurrentHandleCount() - handles_before);
            xunion->envelope.flags = FIDL_ENVELOPE_FLAGS_INLINING_MASK;
            break;
          }

          ::fidl::Encode(
              encoder, &function_application_,
              encoder->Alloc(::fidl::EncodingInlineSize<
                             ::fidl::test::anonymous::FunctionApplication,
                             ::fidl::Encoder>(encoder)));

          fidl_xunion_v2_t* xunion = encoder->GetPtr<fidl_xunion_v2_t>(offset);
          xunion->tag = tag_;
          xunion->envelope.num_bytes =
              static_cast<uint32_t>(encoder->CurrentLength() - length_before);
          xunion->envelope.num_handles = static_cast<uint16_t>(
              encoder->CurrentHandleCount() - handles_before);
          xunion->envelope.flags = 0;
          break;
        }
      }
      break;
    }
    case ::fidl::test::anonymous::Expression::Tag::kUnknown: {
      ::fidl::EncodeUnknownBytes(encoder, &unknown_data_,
                                 offset + offsetof(fidl_xunion_t, envelope));
      *encoder->GetPtr<uint64_t>(offset) = tag_;
      break;
    }
    default:
      break;
  }
}

void Expression::Decode(::fidl::Decoder* _decoder, Expression* value,
                        size_t offset) {
  fidl_xunion_t* xunion = _decoder->GetPtr<fidl_xunion_t>(offset);

  if (!xunion->envelope.data) {
    value->EnsureStorageInitialized(static_cast<fidl_xunion_tag_t>(
        ::fidl::test::anonymous::Expression::Tag::Invalid));
    return;
  }

  value->EnsureStorageInitialized(xunion->tag);

  const size_t envelope_offset = _decoder->GetOffset(xunion->envelope.data);

  switch (value->tag_) {
    case ::fidl::test::anonymous::Expression::Tag::kValue:
      ::fidl::Decode(_decoder, &value->value_, envelope_offset);
      break;
    case ::fidl::test::anonymous::Expression::Tag::kBinOp:
      new (&value->bin_op_)::fidl::test::anonymous::BinOp();
      ::fidl::Decode(_decoder, &value->bin_op_, envelope_offset);
      break;
    case ::fidl::test::anonymous::Expression::Tag::kFunctionApplication:
      new (&value->function_application_)::fidl::test::anonymous::
          FunctionApplication();
      ::fidl::Decode(_decoder, &value->function_application_, envelope_offset);
      break;
    default:

      value->unknown_data_.resize(xunion->envelope.num_bytes);
      ::fidl::DecodeUnknownBytesContents(_decoder, &value->unknown_data_,
                                         envelope_offset);
      break;
  }
}

zx_status_t Expression::Clone(Expression* result) const {
  result->Destroy();
  result->tag_ = tag_;
  switch (tag_) {
    case ::fidl::test::anonymous::Expression::Tag::Invalid:
      return ZX_OK;
    case ::fidl::test::anonymous::Expression::Tag::kValue:
      return ::fidl::Clone(value_, &result->value_);
    case ::fidl::test::anonymous::Expression::Tag::kBinOp:
      new (&result->bin_op_)::fidl::test::anonymous::BinOp();
      return ::fidl::Clone(bin_op_, &result->bin_op_);
    case ::fidl::test::anonymous::Expression::Tag::kFunctionApplication:
      new (&result->function_application_)::fidl::test::anonymous::
          FunctionApplication();
      return ::fidl::Clone(function_application_,
                           &result->function_application_);
    default:
      new (&result->unknown_data_) decltype(unknown_data_);
      return ::fidl::Clone(unknown_data_, &result->unknown_data_);
      return ZX_OK;
  }
}

Expression& Expression::set_value(uint64_t value) {
  EnsureStorageInitialized(::fidl::test::anonymous::Expression::Tag::kValue);
  value_ = std::move(value);
  return *this;
}

Expression& Expression::set_bin_op(::fidl::test::anonymous::BinOp value) {
  EnsureStorageInitialized(::fidl::test::anonymous::Expression::Tag::kBinOp);
  bin_op_ = std::move(value);
  return *this;
}

Expression& Expression::set_function_application(
    ::fidl::test::anonymous::FunctionApplication value) {
  EnsureStorageInitialized(
      ::fidl::test::anonymous::Expression::Tag::kFunctionApplication);
  function_application_ = std::move(value);
  return *this;
}
Expression& Expression::SetUnknownData(fidl_xunion_tag_t ordinal,
                                       std::vector<uint8_t> bytes) {
  EnsureStorageInitialized(ordinal);
  unknown_data_ = std::move(bytes);
  return *this;
}

void Expression::Destroy() {
  switch (tag_) {
    case ::fidl::test::anonymous::Expression::Tag::kValue:
      break;
    case ::fidl::test::anonymous::Expression::Tag::kBinOp:
      bin_op_.~decltype(bin_op_)();
      break;
    case ::fidl::test::anonymous::Expression::Tag::kFunctionApplication:
      function_application_.~decltype(function_application_)();
      break;

    case static_cast<fidl_xunion_tag_t>(
        ::fidl::test::anonymous::Expression::Tag::Invalid):
      break;
    default:
      unknown_data_.~decltype(unknown_data_)();
      break;
  }
  tag_ = static_cast<fidl_xunion_tag_t>(
      ::fidl::test::anonymous::Expression::Tag::Invalid);
}

void Expression::EnsureStorageInitialized(::fidl_xunion_tag_t tag) {
  if (tag_ != tag) {
    Destroy();
    tag_ = tag;
    switch (tag_) {
      case static_cast<fidl_xunion_tag_t>(
          ::fidl::test::anonymous::Expression::Tag::Invalid):
        break;
      case ::fidl::test::anonymous::Expression::Tag::kValue:
        new (&value_) uint64_t();
        break;
      case ::fidl::test::anonymous::Expression::Tag::kBinOp:
        new (&bin_op_)::fidl::test::anonymous::BinOp();
        break;
      case ::fidl::test::anonymous::Expression::Tag::kFunctionApplication:
        new (&function_application_)::fidl::test::anonymous::
            FunctionApplication();
        break;
      default:
        new (&unknown_data_) decltype(unknown_data_);
        break;
    }
  }
}

#if (__cplusplus < 201703)
constexpr const ::fidl::test::anonymous::BitsMember BitsMember::BIT_ONE =
    ::fidl::test::anonymous::BitsMember(1u);
constexpr const ::fidl::test::anonymous::BitsMember BitsMember::BIT_TWO =
    ::fidl::test::anonymous::BitsMember(2u);
constexpr const ::fidl::test::anonymous::BitsMember BitsMember::kMask =
    ::fidl::test::anonymous::BitsMember(3u);

#endif  // (__cplusplus < 201703)

extern "C" const fidl_type_t
    fidl_test_anonymous_SomeProtocol_SomeMethod_ResponseTable;
const fidl_type_t* SomeProtocol_SomeMethod_Response::FidlType =
    &fidl_test_anonymous_SomeProtocol_SomeMethod_ResponseTable;

void SomeProtocol_SomeMethod_Response::Encode(
    ::fidl::Encoder* _encoder, size_t _offset,
    cpp17::optional<::fidl::HandleInformation> maybe_handle_info) {
  if (::fidl::IsMemcpyCompatible<SomeProtocol_SomeMethod_Response>::value) {
    memcpy(_encoder->template GetPtr<SomeProtocol_SomeMethod_Response>(_offset),
           this, sizeof(SomeProtocol_SomeMethod_Response));
  } else {
    if (_encoder->wire_format() == FIDL_WIRE_FORMAT_VERSION_V1) {
      ::fidl::Encode(_encoder, &bits_member, _offset + 0);

    } else {
      ::fidl::Encode(_encoder, &bits_member, _offset + 0);
    }
  }
}

void SomeProtocol_SomeMethod_Response::Decode(
    ::fidl::Decoder* _decoder, SomeProtocol_SomeMethod_Response* _value,
    size_t _offset) {
  if (::fidl::IsMemcpyCompatible<SomeProtocol_SomeMethod_Response>::value) {
    memcpy(_value,
           _decoder->template GetPtr<SomeProtocol_SomeMethod_Response>(_offset),
           sizeof(SomeProtocol_SomeMethod_Response));
  } else {
    ::fidl::Decode(_decoder, &_value->bits_member, _offset + 0);
  }
}

zx_status_t SomeProtocol_SomeMethod_Response::Clone(
    SomeProtocol_SomeMethod_Response* _result) const {
  zx_status_t _status = ::fidl::Clone(bits_member, &_result->bits_member);
  if (_status != ZX_OK) return _status;
  return ZX_OK;
}

extern "C" const fidl_type_t
    fidl_test_anonymous_SomeProtocol_SomeMethod_ResultTable;
const fidl_type_t* SomeProtocol_SomeMethod_Result::FidlType =
    &fidl_test_anonymous_SomeProtocol_SomeMethod_ResultTable;

SomeProtocol_SomeMethod_Result::SomeProtocol_SomeMethod_Result() {}

SomeProtocol_SomeMethod_Result::~SomeProtocol_SomeMethod_Result() { Destroy(); }

SomeProtocol_SomeMethod_Result::SomeProtocol_SomeMethod_Result(
    SomeProtocol_SomeMethod_Result&& other)
    : tag_(other.tag_) {
  switch (tag_) {
    case ::fidl::test::anonymous::SomeProtocol_SomeMethod_Result::Tag::
        kResponse:
      new (&response_)::fidl::test::anonymous::
          SomeProtocol_SomeMethod_Response();
      response_ = std::move(other.response_);
      break;
    case ::fidl::test::anonymous::SomeProtocol_SomeMethod_Result::Tag::kErr:
      new (&err_)::fidl::test::anonymous::SomeProtocol_SomeMethod_Error();
      err_ = std::move(other.err_);
      break;
    case static_cast<fidl_xunion_tag_t>(
        ::fidl::test::anonymous::SomeProtocol_SomeMethod_Result::Tag::Invalid):
      break;
  }
}

SomeProtocol_SomeMethod_Result& SomeProtocol_SomeMethod_Result::operator=(
    SomeProtocol_SomeMethod_Result&& other) {
  if (this != &other) {
    Destroy();
    tag_ = other.tag_;
    switch (tag_) {
      case ::fidl::test::anonymous::SomeProtocol_SomeMethod_Result::Tag::
          kResponse:
        new (&response_)::fidl::test::anonymous::
            SomeProtocol_SomeMethod_Response();
        response_ = std::move(other.response_);
        break;
      case ::fidl::test::anonymous::SomeProtocol_SomeMethod_Result::Tag::kErr:
        new (&err_)::fidl::test::anonymous::SomeProtocol_SomeMethod_Error();
        err_ = std::move(other.err_);
        break;
      case static_cast<fidl_xunion_tag_t>(
          ::fidl::test::anonymous::SomeProtocol_SomeMethod_Result::Tag::
              Invalid):
        break;
    }
  }
  return *this;
}

SomeProtocol_SomeMethod_Result SomeProtocol_SomeMethod_Result::WithResponse(
    ::fidl::test::anonymous::SomeProtocol_SomeMethod_Response&& val) {
  SomeProtocol_SomeMethod_Result result;
  result.set_response(std::move(val));
  return result;
}
SomeProtocol_SomeMethod_Result SomeProtocol_SomeMethod_Result::WithErr(
    ::fidl::test::anonymous::SomeProtocol_SomeMethod_Error&& val) {
  SomeProtocol_SomeMethod_Result result;
  result.set_err(std::move(val));
  return result;
}

void SomeProtocol_SomeMethod_Result::Encode(
    ::fidl::Encoder* encoder, size_t offset,
    cpp17::optional<::fidl::HandleInformation> maybe_handle_info) {
  const size_t length_before = encoder->CurrentLength();
  const size_t handles_before = encoder->CurrentHandleCount();

  switch (Which()) {
    case ::fidl::test::anonymous::SomeProtocol_SomeMethod_Result::Tag::
        kResponse: {
      switch (encoder->wire_format()) {
        case FIDL_WIRE_FORMAT_VERSION_V1: {
          ::fidl::Encode(
              encoder, &response_,
              encoder->Alloc(
                  ::fidl::EncodingInlineSize<
                      ::fidl::test::anonymous::SomeProtocol_SomeMethod_Response,
                      ::fidl::Encoder>(encoder)));

          fidl_xunion_t* xunion = encoder->GetPtr<fidl_xunion_t>(offset);
          xunion->tag = tag_;
          xunion->envelope.num_bytes =
              static_cast<uint32_t>(encoder->CurrentLength() - length_before);
          xunion->envelope.num_handles = static_cast<uint32_t>(
              encoder->CurrentHandleCount() - handles_before);
          xunion->envelope.presence = FIDL_ALLOC_PRESENT;
          break;
        }
        case FIDL_WIRE_FORMAT_VERSION_V2: {
          if (::fidl::EncodingInlineSize<
                  ::fidl::test::anonymous::SomeProtocol_SomeMethod_Response>(
                  encoder) <= FIDL_ENVELOPE_INLINING_SIZE_THRESHOLD) {
            ::fidl::Encode(encoder, &response_,
                           offset + offsetof(fidl_xunion_v2_t, envelope));

            fidl_xunion_v2_t* xunion =
                encoder->GetPtr<fidl_xunion_v2_t>(offset);
            xunion->tag = tag_;
            xunion->envelope.num_handles = static_cast<uint16_t>(
                encoder->CurrentHandleCount() - handles_before);
            xunion->envelope.flags = FIDL_ENVELOPE_FLAGS_INLINING_MASK;
            break;
          }

          ::fidl::Encode(
              encoder, &response_,
              encoder->Alloc(
                  ::fidl::EncodingInlineSize<
                      ::fidl::test::anonymous::SomeProtocol_SomeMethod_Response,
                      ::fidl::Encoder>(encoder)));

          fidl_xunion_v2_t* xunion = encoder->GetPtr<fidl_xunion_v2_t>(offset);
          xunion->tag = tag_;
          xunion->envelope.num_bytes =
              static_cast<uint32_t>(encoder->CurrentLength() - length_before);
          xunion->envelope.num_handles = static_cast<uint16_t>(
              encoder->CurrentHandleCount() - handles_before);
          xunion->envelope.flags = 0;
          break;
        }
      }
      break;
    }
    case ::fidl::test::anonymous::SomeProtocol_SomeMethod_Result::Tag::kErr: {
      switch (encoder->wire_format()) {
        case FIDL_WIRE_FORMAT_VERSION_V1: {
          ::fidl::Encode(
              encoder, &err_,
              encoder->Alloc(
                  ::fidl::EncodingInlineSize<
                      ::fidl::test::anonymous::SomeProtocol_SomeMethod_Error,
                      ::fidl::Encoder>(encoder)));

          fidl_xunion_t* xunion = encoder->GetPtr<fidl_xunion_t>(offset);
          xunion->tag = tag_;
          xunion->envelope.num_bytes =
              static_cast<uint32_t>(encoder->CurrentLength() - length_before);
          xunion->envelope.num_handles = static_cast<uint32_t>(
              encoder->CurrentHandleCount() - handles_before);
          xunion->envelope.presence = FIDL_ALLOC_PRESENT;
          break;
        }
        case FIDL_WIRE_FORMAT_VERSION_V2: {
          if (::fidl::EncodingInlineSize<
                  ::fidl::test::anonymous::SomeProtocol_SomeMethod_Error>(
                  encoder) <= FIDL_ENVELOPE_INLINING_SIZE_THRESHOLD) {
            ::fidl::Encode(encoder, &err_,
                           offset + offsetof(fidl_xunion_v2_t, envelope));

            fidl_xunion_v2_t* xunion =
                encoder->GetPtr<fidl_xunion_v2_t>(offset);
            xunion->tag = tag_;
            xunion->envelope.num_handles = static_cast<uint16_t>(
                encoder->CurrentHandleCount() - handles_before);
            xunion->envelope.flags = FIDL_ENVELOPE_FLAGS_INLINING_MASK;
            break;
          }

          ::fidl::Encode(
              encoder, &err_,
              encoder->Alloc(
                  ::fidl::EncodingInlineSize<
                      ::fidl::test::anonymous::SomeProtocol_SomeMethod_Error,
                      ::fidl::Encoder>(encoder)));

          fidl_xunion_v2_t* xunion = encoder->GetPtr<fidl_xunion_v2_t>(offset);
          xunion->tag = tag_;
          xunion->envelope.num_bytes =
              static_cast<uint32_t>(encoder->CurrentLength() - length_before);
          xunion->envelope.num_handles = static_cast<uint16_t>(
              encoder->CurrentHandleCount() - handles_before);
          xunion->envelope.flags = 0;
          break;
        }
      }
      break;
    }
    default:
      break;
  }
}

void SomeProtocol_SomeMethod_Result::Decode(
    ::fidl::Decoder* _decoder, SomeProtocol_SomeMethod_Result* value,
    size_t offset) {
  fidl_xunion_t* xunion = _decoder->GetPtr<fidl_xunion_t>(offset);

  if (!xunion->envelope.data) {
    value->EnsureStorageInitialized(static_cast<fidl_xunion_tag_t>(
        ::fidl::test::anonymous::SomeProtocol_SomeMethod_Result::Tag::Invalid));
    return;
  }

  value->EnsureStorageInitialized(xunion->tag);

  const size_t envelope_offset = _decoder->GetOffset(xunion->envelope.data);

  switch (value->tag_) {
    case ::fidl::test::anonymous::SomeProtocol_SomeMethod_Result::Tag::
        kResponse:
      new (&value->response_)::fidl::test::anonymous::
          SomeProtocol_SomeMethod_Response();
      ::fidl::Decode(_decoder, &value->response_, envelope_offset);
      break;
    case ::fidl::test::anonymous::SomeProtocol_SomeMethod_Result::Tag::kErr:
      new (
          &value->err_)::fidl::test::anonymous::SomeProtocol_SomeMethod_Error();
      ::fidl::Decode(_decoder, &value->err_, envelope_offset);
      break;
    default:
      break;
  }
}

zx_status_t SomeProtocol_SomeMethod_Result::Clone(
    SomeProtocol_SomeMethod_Result* result) const {
  result->Destroy();
  result->tag_ = tag_;
  switch (tag_) {
    case ::fidl::test::anonymous::SomeProtocol_SomeMethod_Result::Tag::Invalid:
      return ZX_OK;
    case ::fidl::test::anonymous::SomeProtocol_SomeMethod_Result::Tag::
        kResponse:
      new (&result->response_)::fidl::test::anonymous::
          SomeProtocol_SomeMethod_Response();
      return ::fidl::Clone(response_, &result->response_);
    case ::fidl::test::anonymous::SomeProtocol_SomeMethod_Result::Tag::kErr:
      new (&result
                ->err_)::fidl::test::anonymous::SomeProtocol_SomeMethod_Error();
      return ::fidl::Clone(err_, &result->err_);
    default:
      return ZX_OK;
  }
}

SomeProtocol_SomeMethod_Result& SomeProtocol_SomeMethod_Result::set_response(
    ::fidl::test::anonymous::SomeProtocol_SomeMethod_Response value) {
  EnsureStorageInitialized(
      ::fidl::test::anonymous::SomeProtocol_SomeMethod_Result::Tag::kResponse);
  response_ = std::move(value);
  return *this;
}

SomeProtocol_SomeMethod_Result& SomeProtocol_SomeMethod_Result::set_err(
    ::fidl::test::anonymous::SomeProtocol_SomeMethod_Error value) {
  EnsureStorageInitialized(
      ::fidl::test::anonymous::SomeProtocol_SomeMethod_Result::Tag::kErr);
  err_ = std::move(value);
  return *this;
}

void SomeProtocol_SomeMethod_Result::Destroy() {
  switch (tag_) {
    case ::fidl::test::anonymous::SomeProtocol_SomeMethod_Result::Tag::
        kResponse:
      response_.~decltype(response_)();
      break;
    case ::fidl::test::anonymous::SomeProtocol_SomeMethod_Result::Tag::kErr:
      err_.~decltype(err_)();
      break;

    default:
      break;
  }
  tag_ = static_cast<fidl_xunion_tag_t>(
      ::fidl::test::anonymous::SomeProtocol_SomeMethod_Result::Tag::Invalid);
}

void SomeProtocol_SomeMethod_Result::EnsureStorageInitialized(
    ::fidl_xunion_tag_t tag) {
  if (tag_ != tag) {
    Destroy();
    tag_ = tag;
    switch (tag_) {
      case static_cast<fidl_xunion_tag_t>(
          ::fidl::test::anonymous::SomeProtocol_SomeMethod_Result::Tag::
              Invalid):
        break;
      case ::fidl::test::anonymous::SomeProtocol_SomeMethod_Result::Tag::
          kResponse:
        new (&response_)::fidl::test::anonymous::
            SomeProtocol_SomeMethod_Response();
        break;
      case ::fidl::test::anonymous::SomeProtocol_SomeMethod_Result::Tag::kErr:
        new (&err_)::fidl::test::anonymous::SomeProtocol_SomeMethod_Error();
        break;
      default:
        break;
    }
  }
}

}  // namespace anonymous
}  // namespace test
}  // namespace fidl
