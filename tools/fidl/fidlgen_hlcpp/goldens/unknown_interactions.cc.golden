// WARNING: This file is machine generated by fidlgen.

#include <test/unknowninteractions/cpp/fidl.h>

#include "lib/fidl/cpp/internal/implementation.h"

//
// Domain objects definitions (i.e. "natural types" in unified bindings)
//

//
// Proxies and stubs definitions
//
#ifdef __Fuchsia__

namespace test {
namespace unknowninteractions {
Example::~Example() = default;

const fidl_type_t* ::test::unknowninteractions::Example_RequestDecoder::GetType(
    uint64_t ordinal, bool* out_needs_response) {
  *out_needs_response = false;
  switch (ordinal) {
    case ::test::unknowninteractions::internal::kExample_StrictOneWay_Ordinal:
      return nullptr;
      ;
    case ::test::unknowninteractions::internal::kExample_FlexibleOneWay_Ordinal:
      return nullptr;
      ;
    case ::test::unknowninteractions::internal::kExample_StrictTwoWay_Ordinal:
      *out_needs_response = true;
      return nullptr;
      ;
    case ::test::unknowninteractions::internal::kExample_FlexibleTwoWay_Ordinal:
      *out_needs_response = true;
      return nullptr;
      ;
    default:
      return nullptr;
  }
}

const fidl_type_t* Example_ResponseDecoder::GetType(uint64_t ordinal) {
  switch (ordinal) {
    case ::test::unknowninteractions::internal::kExample_StrictTwoWay_Ordinal:
      return nullptr;
      ;
    case ::test::unknowninteractions::internal::kExample_FlexibleTwoWay_Ordinal:
      return nullptr;
      ;
    case ::test::unknowninteractions::internal::kExample_StrictEvent_Ordinal:
      return nullptr;
      ;
    case ::test::unknowninteractions::internal::kExample_FlexibleEvent_Ordinal:
      return nullptr;
      ;
    default:
      return nullptr;
  }
}

Example_EventSender::~Example_EventSender() = default;

Example_Sync::~Example_Sync() = default;

Example_Proxy::Example_Proxy(::fidl::internal::ProxyController* controller)
    : controller_(controller) {
  (void)controller_;
}

Example_Proxy::~Example_Proxy() = default;

zx_status_t Example_Proxy::Dispatch_(::fidl::HLCPPIncomingMessage message) {
  zx_status_t status = ZX_OK;
  switch (message.ordinal()) {
    case ::test::unknowninteractions::internal::kExample_StrictEvent_Ordinal: {
      if (!StrictEvent) {
        status = ZX_OK;
        break;
      }
      StrictEvent();
      break;
    }
    case ::test::unknowninteractions::internal::
        kExample_FlexibleEvent_Ordinal: {
      if (!FlexibleEvent) {
        status = ZX_OK;
        break;
      }
      FlexibleEvent();
      break;
    }
    default: {
      status = ZX_ERR_NOT_SUPPORTED;
      break;
    }
  }
  return status;
}

void Example_Proxy::StrictOneWay() {
  ::fidl::MessageEncoder _encoder(
      ::test::unknowninteractions::internal::kExample_StrictOneWay_Ordinal);
  const fidl_type_t* req_type = nullptr;
  controller_->Send(
      req_type,
      ::test::unknowninteractions::Example_RequestEncoder::StrictOneWay(
          &_encoder),
      nullptr);
}
void Example_Proxy::FlexibleOneWay() {
  ::fidl::MessageEncoder _encoder(
      ::test::unknowninteractions::internal::kExample_FlexibleOneWay_Ordinal);
  const fidl_type_t* req_type = nullptr;
  controller_->Send(
      req_type,
      ::test::unknowninteractions::Example_RequestEncoder::FlexibleOneWay(
          &_encoder),
      nullptr);
}
namespace {

::std::unique_ptr<::fidl::internal::SingleUseMessageHandler>
Example_StrictTwoWay_ResponseHandler(Example::StrictTwoWayCallback&& callback) {
  ZX_DEBUG_ASSERT_MSG(callback,
                      "Callback must not be empty for Example::StrictTwoWay\n");
  return ::std::make_unique<::fidl::internal::SingleUseMessageHandler>(
      [callback_ =
           std::move(callback)](::fidl::HLCPPIncomingMessage&& message) {
        callback_();
        return ZX_OK;
      },
      nullptr);
}

}  // namespace
void Example_Proxy::StrictTwoWay(StrictTwoWayCallback callback) {
  ::fidl::MessageEncoder _encoder(
      ::test::unknowninteractions::internal::kExample_StrictTwoWay_Ordinal);
  const fidl_type_t* req_type = nullptr;
  controller_->Send(
      req_type,
      ::test::unknowninteractions::Example_RequestEncoder::StrictTwoWay(
          &_encoder),
      Example_StrictTwoWay_ResponseHandler(std::move(callback)));
}
namespace {

::std::unique_ptr<::fidl::internal::SingleUseMessageHandler>
Example_FlexibleTwoWay_ResponseHandler(
    Example::FlexibleTwoWayCallback&& callback) {
  ZX_DEBUG_ASSERT_MSG(
      callback, "Callback must not be empty for Example::FlexibleTwoWay\n");
  return ::std::make_unique<::fidl::internal::SingleUseMessageHandler>(
      [callback_ =
           std::move(callback)](::fidl::HLCPPIncomingMessage&& message) {
        callback_();
        return ZX_OK;
      },
      nullptr);
}

}  // namespace
void Example_Proxy::FlexibleTwoWay(FlexibleTwoWayCallback callback) {
  ::fidl::MessageEncoder _encoder(
      ::test::unknowninteractions::internal::kExample_FlexibleTwoWay_Ordinal);
  const fidl_type_t* req_type = nullptr;
  controller_->Send(
      req_type,
      ::test::unknowninteractions::Example_RequestEncoder::FlexibleTwoWay(
          &_encoder),
      Example_FlexibleTwoWay_ResponseHandler(std::move(callback)));
}

Example_Stub::Example_Stub(
    ::test::unknowninteractions::Example_Stub::Example_clazz* impl)
    : impl_(impl) {
  (void)impl_;
}

Example_Stub::~Example_Stub() = default;

namespace {

class Example_StrictTwoWay_Responder final {
 public:
  Example_StrictTwoWay_Responder(::fidl::internal::PendingResponse response)
      : response_(std::move(response)) {}

  void operator()() {
    ::fidl::MessageEncoder _encoder(
        ::test::unknowninteractions::internal::kExample_StrictTwoWay_Ordinal);
    const fidl_type_t* resp_type = nullptr;
    response_.Send(
        resp_type,
        ::test::unknowninteractions::Example_ResponseEncoder::StrictTwoWay(
            &_encoder));
  }

 private:
  ::fidl::internal::PendingResponse response_;
};

class Example_FlexibleTwoWay_Responder final {
 public:
  Example_FlexibleTwoWay_Responder(::fidl::internal::PendingResponse response)
      : response_(std::move(response)) {}

  void operator()() {
    ::fidl::MessageEncoder _encoder(
        ::test::unknowninteractions::internal::kExample_FlexibleTwoWay_Ordinal);
    const fidl_type_t* resp_type = nullptr;
    response_.Send(
        resp_type,
        ::test::unknowninteractions::Example_ResponseEncoder::FlexibleTwoWay(
            &_encoder));
  }

 private:
  ::fidl::internal::PendingResponse response_;
};

}  // namespace

zx_status_t Example_Stub::Dispatch_(
    ::fidl::HLCPPIncomingMessage message,
    ::fidl::internal::PendingResponse response) {
  bool needs_response;
  const fidl_type_t* request_type =
      ::test::unknowninteractions::Example_RequestDecoder::GetType(
          message.ordinal(), &needs_response);
  if (!message.has_only_header()) {
    if (request_type == nullptr) {
      return ZX_ERR_NOT_SUPPORTED;
    }
    const char* error_msg = nullptr;
    zx_status_t status = message.Decode(request_type, &error_msg);
    if (status != ZX_OK) {
      FIDL_REPORT_DECODING_ERROR(message, request_type, error_msg);
      return status;
    }
  }

  if (response.needs_response() != needs_response) {
    if (needs_response) {
      FIDL_REPORT_DECODING_ERROR(message, request_type,
                                 "Message needing a response with no txid");
    } else {
      FIDL_REPORT_DECODING_ERROR(message, request_type,
                                 "Message not needing a response with a txid");
    }
    return ZX_ERR_INVALID_ARGS;
  }

  uint64_t ordinal = message.ordinal();
  switch (ordinal) {
    case ::test::unknowninteractions::internal::kExample_StrictOneWay_Ordinal: {
      impl_->StrictOneWay();
      break;
    }
    case ::test::unknowninteractions::internal::
        kExample_FlexibleOneWay_Ordinal: {
      impl_->FlexibleOneWay();
      break;
    }
    case ::test::unknowninteractions::internal::kExample_StrictTwoWay_Ordinal: {
      impl_->StrictTwoWay(Example_StrictTwoWay_Responder(std::move(response)));
      break;
    }
    case ::test::unknowninteractions::internal::
        kExample_FlexibleTwoWay_Ordinal: {
      impl_->FlexibleTwoWay(
          Example_FlexibleTwoWay_Responder(std::move(response)));
      break;
    }
    default: {
      return ZX_ERR_NOT_SUPPORTED;
    }
  }
  return ZX_OK;
}
void Example_Stub::StrictEvent() {
  ::fidl::MessageEncoder _encoder(
      ::test::unknowninteractions::internal::kExample_StrictEvent_Ordinal);
  const fidl_type_t* resp_type = nullptr;
  sender_()->Send(
      resp_type,
      ::test::unknowninteractions::Example_ResponseEncoder::StrictEvent(
          &_encoder));
}
void Example_Stub::FlexibleEvent() {
  ::fidl::MessageEncoder _encoder(
      ::test::unknowninteractions::internal::kExample_FlexibleEvent_Ordinal);
  const fidl_type_t* resp_type = nullptr;
  sender_()->Send(
      resp_type,
      ::test::unknowninteractions::Example_ResponseEncoder::FlexibleEvent(
          &_encoder));
}

Example_SyncProxy::Example_SyncProxy(::zx::channel channel)
    : proxy_(::std::move(channel)) {}

Example_SyncProxy::~Example_SyncProxy() = default;

zx_status_t Example_SyncProxy::StrictOneWay() {
  ::fidl::MessageEncoder _encoder(
      ::test::unknowninteractions::internal::kExample_StrictOneWay_Ordinal);
  const fidl_type_t* req_type = nullptr;
  return proxy_.Send(
      req_type,
      ::test::unknowninteractions::Example_RequestEncoder::StrictOneWay(
          &_encoder));
}

zx_status_t Example_SyncProxy::FlexibleOneWay() {
  ::fidl::MessageEncoder _encoder(
      ::test::unknowninteractions::internal::kExample_FlexibleOneWay_Ordinal);
  const fidl_type_t* req_type = nullptr;
  return proxy_.Send(
      req_type,
      ::test::unknowninteractions::Example_RequestEncoder::FlexibleOneWay(
          &_encoder));
}

zx_status_t Example_SyncProxy::StrictTwoWay() {
  ::fidl::MessageEncoder _encoder(
      ::test::unknowninteractions::internal::kExample_StrictTwoWay_Ordinal);
  ::fidl::IncomingMessageBuffer buffer_;
  ::fidl::HLCPPIncomingMessage response_ = buffer_.CreateEmptyIncomingMessage();
  const fidl_type_t* req_type = nullptr;
  const fidl_type_t* resp_type = nullptr;
  zx_status_t status_ = proxy_.Call(
      req_type, resp_type,
      ::test::unknowninteractions::Example_RequestEncoder::StrictTwoWay(
          &_encoder),
      &response_);
  if (status_ != ZX_OK) return status_;
  return ZX_OK;
}

zx_status_t Example_SyncProxy::FlexibleTwoWay() {
  ::fidl::MessageEncoder _encoder(
      ::test::unknowninteractions::internal::kExample_FlexibleTwoWay_Ordinal);
  ::fidl::IncomingMessageBuffer buffer_;
  ::fidl::HLCPPIncomingMessage response_ = buffer_.CreateEmptyIncomingMessage();
  const fidl_type_t* req_type = nullptr;
  const fidl_type_t* resp_type = nullptr;
  zx_status_t status_ = proxy_.Call(
      req_type, resp_type,
      ::test::unknowninteractions::Example_RequestEncoder::FlexibleTwoWay(
          &_encoder),
      &response_);
  if (status_ != ZX_OK) return status_;
  return ZX_OK;
}
}  // namespace unknowninteractions
}  // namespace test
#endif  // __Fuchsia__
