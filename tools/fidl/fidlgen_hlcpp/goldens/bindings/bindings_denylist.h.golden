// WARNING: This file is machine generated by fidlgen.

#pragma once

#include <test/dependent/cpp/fidl.h>

#include "lib/fidl/cpp/internal/header.h"

//
// Domain objects declarations (i.e. "natural types" in unified bindings).
//
namespace test {
namespace bindingsdenylist {
#ifdef __Fuchsia__

class ImportsSameNameContext;
using ImportsSameNameContextHandle =
    ::fidl::InterfaceHandle<ImportsSameNameContext>;
#endif  // __Fuchsia__

class ShouldNeverAppearInAnyBinding9;

class ShouldNeverAppearInAnyBinding8;

class ShouldNeverAppearInAnyBinding7;

class ShouldNeverAppearInAnyBinding6;

class ShouldNeverAppearInAnyBinding5;

class ShouldNeverAppearInAnyBinding4;

class Allowed_Denied_Response;

class Allowed_Denied_Result;

#ifdef __Fuchsia__

class Allowed;
using AllowedHandle = ::fidl::InterfaceHandle<Allowed>;
#endif  // __Fuchsia__

class ShouldNeverAppearInAnyBinding3;

class ShouldNeverAppearInAnyBinding2;

class ShouldNeverAppearInAnyBinding1;

#ifdef __Fuchsia__

class OnlyLibfuzzerAndDeps;
using OnlyLibfuzzerAndDepsHandle =
    ::fidl::InterfaceHandle<OnlyLibfuzzerAndDeps>;
#endif  // __Fuchsia__

#ifdef __Fuchsia__
class OnlyHlcpp;
#endif  // __Fuchsia__

#ifdef __Fuchsia__

class OnlyCppAndDeps;
using OnlyCppAndDepsHandle = ::fidl::InterfaceHandle<OnlyCppAndDeps>;
#endif  // __Fuchsia__

class MemberOnlyAppearsInImportingLibrary;

class OnlyAppearsInImportingLibrary;

class DenyEachBinding_OnlyDenySyzkaller_Response;

class DenyEachBinding_OnlyDenySyzkaller_Result;

class DenyEachBinding_OnlyDenyRust_Response;

class DenyEachBinding_OnlyDenyRust_Result;

class DenyEachBinding_OnlyDenyLibfuzzer_Response;

class DenyEachBinding_OnlyDenyLibfuzzer_Result;

class DenyEachBinding_OnlyDenyGo_Response;

class DenyEachBinding_OnlyDenyGo_Result;

class DenyEachBinding_OnlyDenyDart_Response;

class DenyEachBinding_OnlyDenyDart_Result;

class DenyEachBinding_OnlyDenyCpp_Response;

class DenyEachBinding_OnlyDenyCpp_Result;

#ifdef __Fuchsia__

class DenyEachBinding;
using DenyEachBindingHandle = ::fidl::InterfaceHandle<DenyEachBinding>;
#endif  // __Fuchsia__

#ifdef __Fuchsia__

namespace _internal {
__LOCAL extern "C" const fidl_type_t
    test_bindingsdenylist_ImportsSameNameContextUnattributedRequestMessageTable;

__LOCAL extern "C" const fidl_type_t
    test_bindingsdenylist_ImportsSameNameContextAlwaysAppearsInImportingLibraryRequestMessageTable;

}  // namespace _internal
class ImportsSameNameContext_RequestEncoder {
 public:
  static ::fidl::HLCPPOutgoingMessage Unattributed(::fidl::Encoder* _encoder) {
    fidl_trace(WillHLCPPEncode);
    switch (_encoder->wire_format()) {
      case ::fidl::internal::WireFormatVersion::kV1:
        _encoder->Alloc(16 - sizeof(fidl_message_header_t));
        break;
      case ::fidl::internal::WireFormatVersion::kV2:
        _encoder->Alloc(16 - sizeof(fidl_message_header_t));
        break;
    }

    if (_encoder->wire_format() == ::fidl::internal::WireFormatVersion::kV1) {
    } else {
    }

    fidl_trace(
        DidHLCPPEncode,
        &::test::bindingsdenylist::_internal::
            test_bindingsdenylist_ImportsSameNameContextUnattributedRequestMessageTable,
        _encoder->GetPtr<const char>(0), _encoder->CurrentLength(),
        _encoder->CurrentHandleCount());

    return _encoder->GetMessage();
  }
  static ::fidl::HLCPPOutgoingMessage AlwaysAppearsInImportingLibrary(
      ::fidl::Encoder* _encoder) {
    fidl_trace(WillHLCPPEncode);
    switch (_encoder->wire_format()) {
      case ::fidl::internal::WireFormatVersion::kV1:
        _encoder->Alloc(16 - sizeof(fidl_message_header_t));
        break;
      case ::fidl::internal::WireFormatVersion::kV2:
        _encoder->Alloc(16 - sizeof(fidl_message_header_t));
        break;
    }

    if (_encoder->wire_format() == ::fidl::internal::WireFormatVersion::kV1) {
    } else {
    }

    fidl_trace(
        DidHLCPPEncode,
        &::test::bindingsdenylist::_internal::
            test_bindingsdenylist_ImportsSameNameContextAlwaysAppearsInImportingLibraryRequestMessageTable,
        _encoder->GetPtr<const char>(0), _encoder->CurrentLength(),
        _encoder->CurrentHandleCount());

    return _encoder->GetMessage();
  }
};

class ImportsSameNameContext_ResponseEncoder {
 public:
};
#endif  // __Fuchsia__

class ShouldNeverAppearInAnyBinding9 final {
 public:
  static const fidl_type_t* FidlType;

  ShouldNeverAppearInAnyBinding9();
  ~ShouldNeverAppearInAnyBinding9();

  ShouldNeverAppearInAnyBinding9(ShouldNeverAppearInAnyBinding9&&);
  ShouldNeverAppearInAnyBinding9& operator=(ShouldNeverAppearInAnyBinding9&&);

  static ShouldNeverAppearInAnyBinding9 WithA(bool&&);

  enum __attribute__((enum_extensibility(closed))) Tag : fidl_xunion_tag_t {
    kUnknown = 0,

    kA = 1,  // 0x1
    Invalid = ::std::numeric_limits<::fidl_union_tag_t>::max(),
  };

  static inline ::std::unique_ptr<ShouldNeverAppearInAnyBinding9> New() {
    return ::std::make_unique<ShouldNeverAppearInAnyBinding9>();
  }

  void Encode(::fidl::Encoder* encoder, size_t offset,
              cpp17::optional<::fidl::HandleInformation> maybe_handle_info =
                  cpp17::nullopt);
  static void Decode(::fidl::Decoder* _decoder,
                     ShouldNeverAppearInAnyBinding9* value, size_t offset);
  zx_status_t Clone(ShouldNeverAppearInAnyBinding9* result) const;

  bool has_invalid_tag() const { return tag_ == Invalid; }

  bool is_a() const {
    return tag_ ==
           ::test::bindingsdenylist::ShouldNeverAppearInAnyBinding9::Tag::kA;
  }

  bool& a() {
    EnsureStorageInitialized(
        ::test::bindingsdenylist::ShouldNeverAppearInAnyBinding9::Tag::kA);
    return a_;
  }

  const bool& a() const {
    ZX_ASSERT(is_a());
    return a_;
  }
  ShouldNeverAppearInAnyBinding9& set_a(bool value);
  ShouldNeverAppearInAnyBinding9& SetUnknownData(fidl_xunion_tag_t ordinal,
                                                 std::vector<uint8_t> bytes);

  ::test::bindingsdenylist::ShouldNeverAppearInAnyBinding9::Tag Which() const {
    switch (tag_) {
      case ::test::bindingsdenylist::ShouldNeverAppearInAnyBinding9::Tag::
          Invalid:
      case ::test::bindingsdenylist::ShouldNeverAppearInAnyBinding9::Tag::kA:
        return ::test::bindingsdenylist::ShouldNeverAppearInAnyBinding9::Tag(
            tag_);
      default:
        return ::test::bindingsdenylist::ShouldNeverAppearInAnyBinding9::Tag::
            kUnknown;
    }
  }

  // You probably want to use Which() method instead of Ordinal(). Use Ordinal()
  // only when you need access to the raw integral ordinal value.
  fidl_xunion_tag_t Ordinal() const { return tag_; }
  const std::vector<uint8_t>* UnknownBytes() const {
    if (Which() != ::test::bindingsdenylist::ShouldNeverAppearInAnyBinding9::
                       Tag::kUnknown) {
      return nullptr;
    }
    return &unknown_data_;
  }

  friend ::fidl::Equality<
      ::test::bindingsdenylist::ShouldNeverAppearInAnyBinding9>;

 private:
  void Destroy();
  void EnsureStorageInitialized(::fidl_xunion_tag_t tag);

  ::fidl_xunion_tag_t tag_ = static_cast<fidl_xunion_tag_t>(
      ::test::bindingsdenylist::ShouldNeverAppearInAnyBinding9::Tag::Invalid);
  union {
    bool a_;
    std::vector<uint8_t> unknown_data_;
  };
};

inline zx_status_t Clone(
    const ::test::bindingsdenylist::ShouldNeverAppearInAnyBinding9& value,
    ::test::bindingsdenylist::ShouldNeverAppearInAnyBinding9* result) {
  return value.Clone(result);
}

using ShouldNeverAppearInAnyBinding9Ptr =
    ::std::unique_ptr<ShouldNeverAppearInAnyBinding9>;

class ShouldNeverAppearInAnyBinding8 final {
 public:
  static const fidl_type_t* FidlType;
  /// Returns whether no field is set.
  bool IsEmpty() const;

  const bool& a() const {
    ZX_ASSERT(field_presence_.IsSet<0>());
    return a_value_.value;
  }
  bool has_a() const { return field_presence_.IsSet<0>(); }

  bool* mutable_a() {
    if (!field_presence_.IsSet<0>()) {
      field_presence_.Set<0>();
      Construct(&a_value_.value);
    }
    return &a_value_.value;
  }
  ShouldNeverAppearInAnyBinding8& set_a(bool _value) {
    if (!field_presence_.IsSet<0>()) {
      field_presence_.Set<0>();
      Construct(&a_value_.value, std::move(_value));
    } else {
      a_value_.value = std::move(_value);
    }
    return *this;
  }
  void clear_a() {
    if (!field_presence_.IsSet<0>()) {
      return;
    }
    field_presence_.Clear<0>();
    Destruct(&a_value_.value);
  }

  const std::map<uint64_t, std::vector<uint8_t>>& UnknownData() const {
    return _unknown_data;
  }

  void SetUnknownDataEntry(uint32_t ordinal, std::vector<uint8_t>&& data) {
    auto ord = static_cast<uint64_t>(ordinal);
    ZX_ASSERT(!IsOrdinalKnown(ord));
    _unknown_data.insert({ord, std::move(data)});
  }

  ShouldNeverAppearInAnyBinding8();
  ShouldNeverAppearInAnyBinding8(ShouldNeverAppearInAnyBinding8&& other);
  ~ShouldNeverAppearInAnyBinding8();
  ShouldNeverAppearInAnyBinding8& operator=(
      ShouldNeverAppearInAnyBinding8&& other);

  static inline ::std::unique_ptr<ShouldNeverAppearInAnyBinding8> New() {
    return ::std::make_unique<ShouldNeverAppearInAnyBinding8>();
  }

  void Encode(::fidl::Encoder* _encoder, size_t _offset,
              cpp17::optional<::fidl::HandleInformation> maybe_handle_info =
                  cpp17::nullopt);
  static void Decode(::fidl::Decoder* _decoder,
                     ShouldNeverAppearInAnyBinding8* _value, size_t _offset);
  zx_status_t Clone(ShouldNeverAppearInAnyBinding8* _result) const;

 private:
  template <class T, class... Args>
  void Construct(T* p, Args&&... args) {
    new (p) T(std::forward<Args>(args)...);
  }

  template <class T>
  void Destruct(T* p) {
    p->~T();
  }

  size_t MaxOrdinal() const {
    size_t max_ordinal =
        static_cast<size_t>(field_presence_.MaxSetIndex()) + std::size_t{1};
    for (const auto& data : _unknown_data) {
      if (data.first > max_ordinal) {
        max_ordinal = data.first;
      }
    }
    return max_ordinal;
  }

  static bool IsOrdinalKnown(uint64_t ordinal) {
    switch (ordinal) {
      case 1:
        return true;
      default:
        return false;
    }
  }

  ::fidl::internal::BitSet<1> field_presence_;
  union ValueUnion_a {
    ValueUnion_a() {}
    ~ValueUnion_a() {}

    bool value;
  };
  ValueUnion_a a_value_;
  std::map<uint64_t, std::vector<uint8_t>> _unknown_data;
};

using ShouldNeverAppearInAnyBinding8Ptr =
    ::std::unique_ptr<ShouldNeverAppearInAnyBinding8>;

class ShouldNeverAppearInAnyBinding7 final {
 public:
  static const fidl_type_t* FidlType;

  bool a{};

  static inline ::std::unique_ptr<ShouldNeverAppearInAnyBinding7> New() {
    return ::std::make_unique<ShouldNeverAppearInAnyBinding7>();
  }

  void Encode(::fidl::Encoder* _encoder, size_t _offset,
              cpp17::optional<::fidl::HandleInformation> maybe_handle_info =
                  cpp17::nullopt);
  static void Decode(::fidl::Decoder* _decoder,
                     ShouldNeverAppearInAnyBinding7* value, size_t _offset);
  zx_status_t Clone(ShouldNeverAppearInAnyBinding7* result) const;
};

inline zx_status_t Clone(
    const ::test::bindingsdenylist::ShouldNeverAppearInAnyBinding7& _value,
    ::test::bindingsdenylist::ShouldNeverAppearInAnyBinding7* _result) {
  return _value.Clone(_result);
}

using ShouldNeverAppearInAnyBinding7Ptr =
    ::std::unique_ptr<ShouldNeverAppearInAnyBinding7>;

class ShouldNeverAppearInAnyBinding6 final {
 public:
  static const fidl_type_t* FidlType;

  ShouldNeverAppearInAnyBinding6();
  ~ShouldNeverAppearInAnyBinding6();

  ShouldNeverAppearInAnyBinding6(ShouldNeverAppearInAnyBinding6&&);
  ShouldNeverAppearInAnyBinding6& operator=(ShouldNeverAppearInAnyBinding6&&);

  static ShouldNeverAppearInAnyBinding6 WithA(bool&&);

  enum __attribute__((enum_extensibility(closed))) Tag : fidl_xunion_tag_t {
    kUnknown = 0,

    kA = 1,  // 0x1
    Invalid = ::std::numeric_limits<::fidl_union_tag_t>::max(),
  };

  static inline ::std::unique_ptr<ShouldNeverAppearInAnyBinding6> New() {
    return ::std::make_unique<ShouldNeverAppearInAnyBinding6>();
  }

  void Encode(::fidl::Encoder* encoder, size_t offset,
              cpp17::optional<::fidl::HandleInformation> maybe_handle_info =
                  cpp17::nullopt);
  static void Decode(::fidl::Decoder* _decoder,
                     ShouldNeverAppearInAnyBinding6* value, size_t offset);
  zx_status_t Clone(ShouldNeverAppearInAnyBinding6* result) const;

  bool has_invalid_tag() const { return tag_ == Invalid; }

  bool is_a() const {
    return tag_ ==
           ::test::bindingsdenylist::ShouldNeverAppearInAnyBinding6::Tag::kA;
  }

  bool& a() {
    EnsureStorageInitialized(
        ::test::bindingsdenylist::ShouldNeverAppearInAnyBinding6::Tag::kA);
    return a_;
  }

  const bool& a() const {
    ZX_ASSERT(is_a());
    return a_;
  }
  ShouldNeverAppearInAnyBinding6& set_a(bool value);
  ShouldNeverAppearInAnyBinding6& SetUnknownData(fidl_xunion_tag_t ordinal,
                                                 std::vector<uint8_t> bytes);

  ::test::bindingsdenylist::ShouldNeverAppearInAnyBinding6::Tag Which() const {
    switch (tag_) {
      case ::test::bindingsdenylist::ShouldNeverAppearInAnyBinding6::Tag::
          Invalid:
      case ::test::bindingsdenylist::ShouldNeverAppearInAnyBinding6::Tag::kA:
        return ::test::bindingsdenylist::ShouldNeverAppearInAnyBinding6::Tag(
            tag_);
      default:
        return ::test::bindingsdenylist::ShouldNeverAppearInAnyBinding6::Tag::
            kUnknown;
    }
  }

  // You probably want to use Which() method instead of Ordinal(). Use Ordinal()
  // only when you need access to the raw integral ordinal value.
  fidl_xunion_tag_t Ordinal() const { return tag_; }
  const std::vector<uint8_t>* UnknownBytes() const {
    if (Which() != ::test::bindingsdenylist::ShouldNeverAppearInAnyBinding6::
                       Tag::kUnknown) {
      return nullptr;
    }
    return &unknown_data_;
  }

  friend ::fidl::Equality<
      ::test::bindingsdenylist::ShouldNeverAppearInAnyBinding6>;

 private:
  void Destroy();
  void EnsureStorageInitialized(::fidl_xunion_tag_t tag);

  ::fidl_xunion_tag_t tag_ = static_cast<fidl_xunion_tag_t>(
      ::test::bindingsdenylist::ShouldNeverAppearInAnyBinding6::Tag::Invalid);
  union {
    bool a_;
    std::vector<uint8_t> unknown_data_;
  };
};

inline zx_status_t Clone(
    const ::test::bindingsdenylist::ShouldNeverAppearInAnyBinding6& value,
    ::test::bindingsdenylist::ShouldNeverAppearInAnyBinding6* result) {
  return value.Clone(result);
}

using ShouldNeverAppearInAnyBinding6Ptr =
    ::std::unique_ptr<ShouldNeverAppearInAnyBinding6>;

class ShouldNeverAppearInAnyBinding5 final {
 public:
  static const fidl_type_t* FidlType;
  /// Returns whether no field is set.
  bool IsEmpty() const;

  const bool& a() const {
    ZX_ASSERT(field_presence_.IsSet<0>());
    return a_value_.value;
  }
  bool has_a() const { return field_presence_.IsSet<0>(); }

  bool* mutable_a() {
    if (!field_presence_.IsSet<0>()) {
      field_presence_.Set<0>();
      Construct(&a_value_.value);
    }
    return &a_value_.value;
  }
  ShouldNeverAppearInAnyBinding5& set_a(bool _value) {
    if (!field_presence_.IsSet<0>()) {
      field_presence_.Set<0>();
      Construct(&a_value_.value, std::move(_value));
    } else {
      a_value_.value = std::move(_value);
    }
    return *this;
  }
  void clear_a() {
    if (!field_presence_.IsSet<0>()) {
      return;
    }
    field_presence_.Clear<0>();
    Destruct(&a_value_.value);
  }

  const std::map<uint64_t, std::vector<uint8_t>>& UnknownData() const {
    return _unknown_data;
  }

  void SetUnknownDataEntry(uint32_t ordinal, std::vector<uint8_t>&& data) {
    auto ord = static_cast<uint64_t>(ordinal);
    ZX_ASSERT(!IsOrdinalKnown(ord));
    _unknown_data.insert({ord, std::move(data)});
  }

  ShouldNeverAppearInAnyBinding5();
  ShouldNeverAppearInAnyBinding5(ShouldNeverAppearInAnyBinding5&& other);
  ~ShouldNeverAppearInAnyBinding5();
  ShouldNeverAppearInAnyBinding5& operator=(
      ShouldNeverAppearInAnyBinding5&& other);

  static inline ::std::unique_ptr<ShouldNeverAppearInAnyBinding5> New() {
    return ::std::make_unique<ShouldNeverAppearInAnyBinding5>();
  }

  void Encode(::fidl::Encoder* _encoder, size_t _offset,
              cpp17::optional<::fidl::HandleInformation> maybe_handle_info =
                  cpp17::nullopt);
  static void Decode(::fidl::Decoder* _decoder,
                     ShouldNeverAppearInAnyBinding5* _value, size_t _offset);
  zx_status_t Clone(ShouldNeverAppearInAnyBinding5* _result) const;

 private:
  template <class T, class... Args>
  void Construct(T* p, Args&&... args) {
    new (p) T(std::forward<Args>(args)...);
  }

  template <class T>
  void Destruct(T* p) {
    p->~T();
  }

  size_t MaxOrdinal() const {
    size_t max_ordinal =
        static_cast<size_t>(field_presence_.MaxSetIndex()) + std::size_t{1};
    for (const auto& data : _unknown_data) {
      if (data.first > max_ordinal) {
        max_ordinal = data.first;
      }
    }
    return max_ordinal;
  }

  static bool IsOrdinalKnown(uint64_t ordinal) {
    switch (ordinal) {
      case 1:
        return true;
      default:
        return false;
    }
  }

  ::fidl::internal::BitSet<1> field_presence_;
  union ValueUnion_a {
    ValueUnion_a() {}
    ~ValueUnion_a() {}

    bool value;
  };
  ValueUnion_a a_value_;
  std::map<uint64_t, std::vector<uint8_t>> _unknown_data;
};

using ShouldNeverAppearInAnyBinding5Ptr =
    ::std::unique_ptr<ShouldNeverAppearInAnyBinding5>;

class ShouldNeverAppearInAnyBinding4 final {
 public:
  static const fidl_type_t* FidlType;

  bool a{};

  static inline ::std::unique_ptr<ShouldNeverAppearInAnyBinding4> New() {
    return ::std::make_unique<ShouldNeverAppearInAnyBinding4>();
  }

  void Encode(::fidl::Encoder* _encoder, size_t _offset,
              cpp17::optional<::fidl::HandleInformation> maybe_handle_info =
                  cpp17::nullopt);
  static void Decode(::fidl::Decoder* _decoder,
                     ShouldNeverAppearInAnyBinding4* value, size_t _offset);
  zx_status_t Clone(ShouldNeverAppearInAnyBinding4* result) const;
};

inline zx_status_t Clone(
    const ::test::bindingsdenylist::ShouldNeverAppearInAnyBinding4& _value,
    ::test::bindingsdenylist::ShouldNeverAppearInAnyBinding4* _result) {
  return _value.Clone(_result);
}

using ShouldNeverAppearInAnyBinding4Ptr =
    ::std::unique_ptr<ShouldNeverAppearInAnyBinding4>;

class Allowed_Denied_Response final {
 public:
  static const fidl_type_t* FidlType;

  ::test::bindingsdenylist::ShouldNeverAppearInAnyBinding4
      should_never_appear_in_any_binding_4{};

  ::test::bindingsdenylist::ShouldNeverAppearInAnyBinding5
      should_never_appear_in_any_binding_5{};

  ::test::bindingsdenylist::ShouldNeverAppearInAnyBinding6
      should_never_appear_in_any_binding_6{};

  static inline ::std::unique_ptr<Allowed_Denied_Response> New() {
    return ::std::make_unique<Allowed_Denied_Response>();
  }

  void Encode(::fidl::Encoder* _encoder, size_t _offset,
              cpp17::optional<::fidl::HandleInformation> maybe_handle_info =
                  cpp17::nullopt);
  static void Decode(::fidl::Decoder* _decoder, Allowed_Denied_Response* value,
                     size_t _offset);
  zx_status_t Clone(Allowed_Denied_Response* result) const;
};

inline zx_status_t Clone(
    const ::test::bindingsdenylist::Allowed_Denied_Response& _value,
    ::test::bindingsdenylist::Allowed_Denied_Response* _result) {
  return _value.Clone(_result);
}

using Allowed_Denied_ResponsePtr = ::std::unique_ptr<Allowed_Denied_Response>;

class Allowed_Denied_Result final {
 public:
  static const fidl_type_t* FidlType;

  Allowed_Denied_Result();
  ~Allowed_Denied_Result();

  Allowed_Denied_Result(Allowed_Denied_Result&&);
  Allowed_Denied_Result& operator=(Allowed_Denied_Result&&);

  static Allowed_Denied_Result WithResponse(
      ::test::bindingsdenylist::Allowed_Denied_Response&&);
  static Allowed_Denied_Result WithErr(uint32_t&&);

  enum __attribute__((enum_extensibility(closed))) Tag : fidl_xunion_tag_t {

    kResponse = 1,  // 0x1
    kErr = 2,       // 0x2
    Invalid = ::std::numeric_limits<::fidl_union_tag_t>::max(),
  };

  static inline ::std::unique_ptr<Allowed_Denied_Result> New() {
    return ::std::make_unique<Allowed_Denied_Result>();
  }

  void Encode(::fidl::Encoder* encoder, size_t offset,
              cpp17::optional<::fidl::HandleInformation> maybe_handle_info =
                  cpp17::nullopt);
  static void Decode(::fidl::Decoder* _decoder, Allowed_Denied_Result* value,
                     size_t offset);
  zx_status_t Clone(Allowed_Denied_Result* result) const;

  bool has_invalid_tag() const { return tag_ == Invalid; }

  bool is_response() const {
    return tag_ ==
           ::test::bindingsdenylist::Allowed_Denied_Result::Tag::kResponse;
  }

  ::test::bindingsdenylist::Allowed_Denied_Response& response() {
    EnsureStorageInitialized(
        ::test::bindingsdenylist::Allowed_Denied_Result::Tag::kResponse);
    return response_;
  }

  const ::test::bindingsdenylist::Allowed_Denied_Response& response() const {
    ZX_ASSERT(is_response());
    return response_;
  }
  Allowed_Denied_Result& set_response(
      ::test::bindingsdenylist::Allowed_Denied_Response value);

  bool is_err() const {
    return tag_ == ::test::bindingsdenylist::Allowed_Denied_Result::Tag::kErr;
  }

  uint32_t& err() {
    EnsureStorageInitialized(
        ::test::bindingsdenylist::Allowed_Denied_Result::Tag::kErr);
    return err_;
  }

  const uint32_t& err() const {
    ZX_ASSERT(is_err());
    return err_;
  }
  Allowed_Denied_Result& set_err(uint32_t value);

  ::test::bindingsdenylist::Allowed_Denied_Result::Tag Which() const {
    return ::test::bindingsdenylist::Allowed_Denied_Result::Tag(tag_);
  }

  // You probably want to use Which() method instead of Ordinal(). Use Ordinal()
  // only when you need access to the raw integral ordinal value.
  fidl_xunion_tag_t Ordinal() const { return tag_; }

  friend ::fidl::Equality<::test::bindingsdenylist::Allowed_Denied_Result>;

 private:
  void Destroy();
  void EnsureStorageInitialized(::fidl_xunion_tag_t tag);

  ::fidl_xunion_tag_t tag_ = static_cast<fidl_xunion_tag_t>(
      ::test::bindingsdenylist::Allowed_Denied_Result::Tag::Invalid);
  union {
    ::test::bindingsdenylist::Allowed_Denied_Response response_;
    uint32_t err_;
  };
};

inline zx_status_t Clone(
    const ::test::bindingsdenylist::Allowed_Denied_Result& value,
    ::test::bindingsdenylist::Allowed_Denied_Result* result) {
  return value.Clone(result);
}

using Allowed_Denied_ResultPtr = ::std::unique_ptr<Allowed_Denied_Result>;

#ifdef __Fuchsia__

class Allowed_RequestEncoder {
 public:
};

class Allowed_ResponseEncoder {
 public:
};
#endif  // __Fuchsia__

class ShouldNeverAppearInAnyBinding3 final {
 public:
  static const fidl_type_t* FidlType;

  ShouldNeverAppearInAnyBinding3();
  ~ShouldNeverAppearInAnyBinding3();

  ShouldNeverAppearInAnyBinding3(ShouldNeverAppearInAnyBinding3&&);
  ShouldNeverAppearInAnyBinding3& operator=(ShouldNeverAppearInAnyBinding3&&);

  static ShouldNeverAppearInAnyBinding3 WithA(bool&&);

  enum __attribute__((enum_extensibility(closed))) Tag : fidl_xunion_tag_t {
    kUnknown = 0,

    kA = 1,  // 0x1
    Invalid = ::std::numeric_limits<::fidl_union_tag_t>::max(),
  };

  static inline ::std::unique_ptr<ShouldNeverAppearInAnyBinding3> New() {
    return ::std::make_unique<ShouldNeverAppearInAnyBinding3>();
  }

  void Encode(::fidl::Encoder* encoder, size_t offset,
              cpp17::optional<::fidl::HandleInformation> maybe_handle_info =
                  cpp17::nullopt);
  static void Decode(::fidl::Decoder* _decoder,
                     ShouldNeverAppearInAnyBinding3* value, size_t offset);
  zx_status_t Clone(ShouldNeverAppearInAnyBinding3* result) const;

  bool has_invalid_tag() const { return tag_ == Invalid; }

  bool is_a() const {
    return tag_ ==
           ::test::bindingsdenylist::ShouldNeverAppearInAnyBinding3::Tag::kA;
  }

  bool& a() {
    EnsureStorageInitialized(
        ::test::bindingsdenylist::ShouldNeverAppearInAnyBinding3::Tag::kA);
    return a_;
  }

  const bool& a() const {
    ZX_ASSERT(is_a());
    return a_;
  }
  ShouldNeverAppearInAnyBinding3& set_a(bool value);
  ShouldNeverAppearInAnyBinding3& SetUnknownData(fidl_xunion_tag_t ordinal,
                                                 std::vector<uint8_t> bytes);

  ::test::bindingsdenylist::ShouldNeverAppearInAnyBinding3::Tag Which() const {
    switch (tag_) {
      case ::test::bindingsdenylist::ShouldNeverAppearInAnyBinding3::Tag::
          Invalid:
      case ::test::bindingsdenylist::ShouldNeverAppearInAnyBinding3::Tag::kA:
        return ::test::bindingsdenylist::ShouldNeverAppearInAnyBinding3::Tag(
            tag_);
      default:
        return ::test::bindingsdenylist::ShouldNeverAppearInAnyBinding3::Tag::
            kUnknown;
    }
  }

  // You probably want to use Which() method instead of Ordinal(). Use Ordinal()
  // only when you need access to the raw integral ordinal value.
  fidl_xunion_tag_t Ordinal() const { return tag_; }
  const std::vector<uint8_t>* UnknownBytes() const {
    if (Which() != ::test::bindingsdenylist::ShouldNeverAppearInAnyBinding3::
                       Tag::kUnknown) {
      return nullptr;
    }
    return &unknown_data_;
  }

  friend ::fidl::Equality<
      ::test::bindingsdenylist::ShouldNeverAppearInAnyBinding3>;

 private:
  void Destroy();
  void EnsureStorageInitialized(::fidl_xunion_tag_t tag);

  ::fidl_xunion_tag_t tag_ = static_cast<fidl_xunion_tag_t>(
      ::test::bindingsdenylist::ShouldNeverAppearInAnyBinding3::Tag::Invalid);
  union {
    bool a_;
    std::vector<uint8_t> unknown_data_;
  };
};

inline zx_status_t Clone(
    const ::test::bindingsdenylist::ShouldNeverAppearInAnyBinding3& value,
    ::test::bindingsdenylist::ShouldNeverAppearInAnyBinding3* result) {
  return value.Clone(result);
}

using ShouldNeverAppearInAnyBinding3Ptr =
    ::std::unique_ptr<ShouldNeverAppearInAnyBinding3>;

class ShouldNeverAppearInAnyBinding2 final {
 public:
  static const fidl_type_t* FidlType;
  /// Returns whether no field is set.
  bool IsEmpty() const;

  const bool& a() const {
    ZX_ASSERT(field_presence_.IsSet<0>());
    return a_value_.value;
  }
  bool has_a() const { return field_presence_.IsSet<0>(); }

  bool* mutable_a() {
    if (!field_presence_.IsSet<0>()) {
      field_presence_.Set<0>();
      Construct(&a_value_.value);
    }
    return &a_value_.value;
  }
  ShouldNeverAppearInAnyBinding2& set_a(bool _value) {
    if (!field_presence_.IsSet<0>()) {
      field_presence_.Set<0>();
      Construct(&a_value_.value, std::move(_value));
    } else {
      a_value_.value = std::move(_value);
    }
    return *this;
  }
  void clear_a() {
    if (!field_presence_.IsSet<0>()) {
      return;
    }
    field_presence_.Clear<0>();
    Destruct(&a_value_.value);
  }

  const std::map<uint64_t, std::vector<uint8_t>>& UnknownData() const {
    return _unknown_data;
  }

  void SetUnknownDataEntry(uint32_t ordinal, std::vector<uint8_t>&& data) {
    auto ord = static_cast<uint64_t>(ordinal);
    ZX_ASSERT(!IsOrdinalKnown(ord));
    _unknown_data.insert({ord, std::move(data)});
  }

  ShouldNeverAppearInAnyBinding2();
  ShouldNeverAppearInAnyBinding2(ShouldNeverAppearInAnyBinding2&& other);
  ~ShouldNeverAppearInAnyBinding2();
  ShouldNeverAppearInAnyBinding2& operator=(
      ShouldNeverAppearInAnyBinding2&& other);

  static inline ::std::unique_ptr<ShouldNeverAppearInAnyBinding2> New() {
    return ::std::make_unique<ShouldNeverAppearInAnyBinding2>();
  }

  void Encode(::fidl::Encoder* _encoder, size_t _offset,
              cpp17::optional<::fidl::HandleInformation> maybe_handle_info =
                  cpp17::nullopt);
  static void Decode(::fidl::Decoder* _decoder,
                     ShouldNeverAppearInAnyBinding2* _value, size_t _offset);
  zx_status_t Clone(ShouldNeverAppearInAnyBinding2* _result) const;

 private:
  template <class T, class... Args>
  void Construct(T* p, Args&&... args) {
    new (p) T(std::forward<Args>(args)...);
  }

  template <class T>
  void Destruct(T* p) {
    p->~T();
  }

  size_t MaxOrdinal() const {
    size_t max_ordinal =
        static_cast<size_t>(field_presence_.MaxSetIndex()) + std::size_t{1};
    for (const auto& data : _unknown_data) {
      if (data.first > max_ordinal) {
        max_ordinal = data.first;
      }
    }
    return max_ordinal;
  }

  static bool IsOrdinalKnown(uint64_t ordinal) {
    switch (ordinal) {
      case 1:
        return true;
      default:
        return false;
    }
  }

  ::fidl::internal::BitSet<1> field_presence_;
  union ValueUnion_a {
    ValueUnion_a() {}
    ~ValueUnion_a() {}

    bool value;
  };
  ValueUnion_a a_value_;
  std::map<uint64_t, std::vector<uint8_t>> _unknown_data;
};

using ShouldNeverAppearInAnyBinding2Ptr =
    ::std::unique_ptr<ShouldNeverAppearInAnyBinding2>;

class ShouldNeverAppearInAnyBinding1 final {
 public:
  static const fidl_type_t* FidlType;

  bool a{};

  static inline ::std::unique_ptr<ShouldNeverAppearInAnyBinding1> New() {
    return ::std::make_unique<ShouldNeverAppearInAnyBinding1>();
  }

  void Encode(::fidl::Encoder* _encoder, size_t _offset,
              cpp17::optional<::fidl::HandleInformation> maybe_handle_info =
                  cpp17::nullopt);
  static void Decode(::fidl::Decoder* _decoder,
                     ShouldNeverAppearInAnyBinding1* value, size_t _offset);
  zx_status_t Clone(ShouldNeverAppearInAnyBinding1* result) const;
};

inline zx_status_t Clone(
    const ::test::bindingsdenylist::ShouldNeverAppearInAnyBinding1& _value,
    ::test::bindingsdenylist::ShouldNeverAppearInAnyBinding1* _result) {
  return _value.Clone(_result);
}

using ShouldNeverAppearInAnyBinding1Ptr =
    ::std::unique_ptr<ShouldNeverAppearInAnyBinding1>;

#ifdef __Fuchsia__

namespace _internal {
__LOCAL extern "C" const fidl_type_t
    test_bindingsdenylist_OnlyLibfuzzerAndDepsLibfuzzerNeedsNonemptyProtocolRequestMessageTable;

}  // namespace _internal
class OnlyLibfuzzerAndDeps_RequestEncoder {
 public:
  static ::fidl::HLCPPOutgoingMessage LibfuzzerNeedsNonemptyProtocol(
      ::fidl::Encoder* _encoder) {
    fidl_trace(WillHLCPPEncode);
    switch (_encoder->wire_format()) {
      case ::fidl::internal::WireFormatVersion::kV1:
        _encoder->Alloc(16 - sizeof(fidl_message_header_t));
        break;
      case ::fidl::internal::WireFormatVersion::kV2:
        _encoder->Alloc(16 - sizeof(fidl_message_header_t));
        break;
    }

    if (_encoder->wire_format() == ::fidl::internal::WireFormatVersion::kV1) {
    } else {
    }

    fidl_trace(
        DidHLCPPEncode,
        &::test::bindingsdenylist::_internal::
            test_bindingsdenylist_OnlyLibfuzzerAndDepsLibfuzzerNeedsNonemptyProtocolRequestMessageTable,
        _encoder->GetPtr<const char>(0), _encoder->CurrentLength(),
        _encoder->CurrentHandleCount());

    return _encoder->GetMessage();
  }
};
namespace _internal {
__LOCAL extern "C" const fidl_type_t
    test_bindingsdenylist_OnlyLibfuzzerAndDepsLibfuzzerNeedsNonemptyProtocolResponseMessageTable;

}  // namespace _internal
class OnlyLibfuzzerAndDeps_ResponseEncoder {
 public:
  static ::fidl::HLCPPOutgoingMessage LibfuzzerNeedsNonemptyProtocol(
      ::fidl::Encoder* _encoder) {
    fidl_trace(WillHLCPPEncode);
    switch (_encoder->wire_format()) {
      case ::fidl::internal::WireFormatVersion::kV1:
        _encoder->Alloc(16 - sizeof(fidl_message_header_t));
        break;
      case ::fidl::internal::WireFormatVersion::kV2:
        _encoder->Alloc(16 - sizeof(fidl_message_header_t));
        break;
    }

    if (_encoder->wire_format() == ::fidl::internal::WireFormatVersion::kV1) {
    } else {
    }

    fidl_trace(
        DidHLCPPEncode,
        &::test::bindingsdenylist::_internal::
            test_bindingsdenylist_OnlyLibfuzzerAndDepsLibfuzzerNeedsNonemptyProtocolResponseMessageTable,
        _encoder->GetPtr<const char>(0), _encoder->CurrentLength(),
        _encoder->CurrentHandleCount());
    return _encoder->GetMessage();
  }
};
#endif  // __Fuchsia__

#ifdef __Fuchsia__

class OnlyCppAndDeps_RequestEncoder {
 public:
};

class OnlyCppAndDeps_ResponseEncoder {
 public:
};
#endif  // __Fuchsia__

class MemberOnlyAppearsInImportingLibrary final {
 public:
  static const fidl_type_t* FidlType;

  bool a{};

  static inline ::std::unique_ptr<MemberOnlyAppearsInImportingLibrary> New() {
    return ::std::make_unique<MemberOnlyAppearsInImportingLibrary>();
  }

  void Encode(::fidl::Encoder* _encoder, size_t _offset,
              cpp17::optional<::fidl::HandleInformation> maybe_handle_info =
                  cpp17::nullopt);
  static void Decode(::fidl::Decoder* _decoder,
                     MemberOnlyAppearsInImportingLibrary* value,
                     size_t _offset);
  zx_status_t Clone(MemberOnlyAppearsInImportingLibrary* result) const;
};

inline zx_status_t Clone(
    const ::test::bindingsdenylist::MemberOnlyAppearsInImportingLibrary& _value,
    ::test::bindingsdenylist::MemberOnlyAppearsInImportingLibrary* _result) {
  return _value.Clone(_result);
}

using MemberOnlyAppearsInImportingLibraryPtr =
    ::std::unique_ptr<MemberOnlyAppearsInImportingLibrary>;

class OnlyAppearsInImportingLibrary final {
 public:
  static const fidl_type_t* FidlType;

  ::test::bindingsdenylist::MemberOnlyAppearsInImportingLibrary
      member_only_appears_in_importing_library{};

  static inline ::std::unique_ptr<OnlyAppearsInImportingLibrary> New() {
    return ::std::make_unique<OnlyAppearsInImportingLibrary>();
  }

  void Encode(::fidl::Encoder* _encoder, size_t _offset,
              cpp17::optional<::fidl::HandleInformation> maybe_handle_info =
                  cpp17::nullopt);
  static void Decode(::fidl::Decoder* _decoder,
                     OnlyAppearsInImportingLibrary* value, size_t _offset);
  zx_status_t Clone(OnlyAppearsInImportingLibrary* result) const;
};

inline zx_status_t Clone(
    const ::test::bindingsdenylist::OnlyAppearsInImportingLibrary& _value,
    ::test::bindingsdenylist::OnlyAppearsInImportingLibrary* _result) {
  return _value.Clone(_result);
}

using OnlyAppearsInImportingLibraryPtr =
    ::std::unique_ptr<OnlyAppearsInImportingLibrary>;

class DenyEachBinding_OnlyDenySyzkaller_Response final {
 public:
  static const fidl_type_t* FidlType;
  DenyEachBinding_OnlyDenySyzkaller_Response() = default;
  explicit DenyEachBinding_OnlyDenySyzkaller_Response(int32_t v)
      : b(std::move(v)) {}
  int32_t ResultValue_() { return std::move(b); }
  explicit DenyEachBinding_OnlyDenySyzkaller_Response(
      ::std::tuple<int32_t> _value_tuple) {
    std::tie(b) = std::move(_value_tuple);
  }
  operator ::std::tuple<int32_t>() && { return std::make_tuple(std::move(b)); }

  int32_t b{};

  static inline ::std::unique_ptr<DenyEachBinding_OnlyDenySyzkaller_Response>
  New() {
    return ::std::make_unique<DenyEachBinding_OnlyDenySyzkaller_Response>();
  }

  void Encode(::fidl::Encoder* _encoder, size_t _offset,
              cpp17::optional<::fidl::HandleInformation> maybe_handle_info =
                  cpp17::nullopt);
  static void Decode(::fidl::Decoder* _decoder,
                     DenyEachBinding_OnlyDenySyzkaller_Response* value,
                     size_t _offset);
  zx_status_t Clone(DenyEachBinding_OnlyDenySyzkaller_Response* result) const;
};

inline zx_status_t Clone(
    const ::test::bindingsdenylist::DenyEachBinding_OnlyDenySyzkaller_Response&
        _value,
    ::test::bindingsdenylist::DenyEachBinding_OnlyDenySyzkaller_Response*
        _result) {
  return _value.Clone(_result);
}

using DenyEachBinding_OnlyDenySyzkaller_ResponsePtr =
    ::std::unique_ptr<DenyEachBinding_OnlyDenySyzkaller_Response>;

class DenyEachBinding_OnlyDenySyzkaller_Result final {
 public:
  static const fidl_type_t* FidlType;

  DenyEachBinding_OnlyDenySyzkaller_Result();
  ~DenyEachBinding_OnlyDenySyzkaller_Result();

  DenyEachBinding_OnlyDenySyzkaller_Result(
      DenyEachBinding_OnlyDenySyzkaller_Result&&);
  DenyEachBinding_OnlyDenySyzkaller_Result& operator=(
      DenyEachBinding_OnlyDenySyzkaller_Result&&);

  static DenyEachBinding_OnlyDenySyzkaller_Result WithResponse(
      ::test::bindingsdenylist::DenyEachBinding_OnlyDenySyzkaller_Response&&);
  static DenyEachBinding_OnlyDenySyzkaller_Result WithErr(uint32_t&&);

  enum __attribute__((enum_extensibility(closed))) Tag : fidl_xunion_tag_t {

    kResponse = 1,  // 0x1
    kErr = 2,       // 0x2
    Invalid = ::std::numeric_limits<::fidl_union_tag_t>::max(),
  };

  static inline ::std::unique_ptr<DenyEachBinding_OnlyDenySyzkaller_Result>
  New() {
    return ::std::make_unique<DenyEachBinding_OnlyDenySyzkaller_Result>();
  }

  void Encode(::fidl::Encoder* encoder, size_t offset,
              cpp17::optional<::fidl::HandleInformation> maybe_handle_info =
                  cpp17::nullopt);
  static void Decode(::fidl::Decoder* _decoder,
                     DenyEachBinding_OnlyDenySyzkaller_Result* value,
                     size_t offset);
  zx_status_t Clone(DenyEachBinding_OnlyDenySyzkaller_Result* result) const;

  bool has_invalid_tag() const { return tag_ == Invalid; }

  bool is_response() const {
    return tag_ == ::test::bindingsdenylist::
                       DenyEachBinding_OnlyDenySyzkaller_Result::Tag::kResponse;
  }

  ::test::bindingsdenylist::DenyEachBinding_OnlyDenySyzkaller_Response&
  response() {
    EnsureStorageInitialized(
        ::test::bindingsdenylist::DenyEachBinding_OnlyDenySyzkaller_Result::
            Tag::kResponse);
    return response_;
  }

  const ::test::bindingsdenylist::DenyEachBinding_OnlyDenySyzkaller_Response&
  response() const {
    ZX_ASSERT(is_response());
    return response_;
  }
  DenyEachBinding_OnlyDenySyzkaller_Result& set_response(
      ::test::bindingsdenylist::DenyEachBinding_OnlyDenySyzkaller_Response
          value);

  bool is_err() const {
    return tag_ == ::test::bindingsdenylist::
                       DenyEachBinding_OnlyDenySyzkaller_Result::Tag::kErr;
  }

  uint32_t& err() {
    EnsureStorageInitialized(
        ::test::bindingsdenylist::DenyEachBinding_OnlyDenySyzkaller_Result::
            Tag::kErr);
    return err_;
  }

  const uint32_t& err() const {
    ZX_ASSERT(is_err());
    return err_;
  }
  DenyEachBinding_OnlyDenySyzkaller_Result& set_err(uint32_t value);

  ::test::bindingsdenylist::DenyEachBinding_OnlyDenySyzkaller_Result::Tag
  Which() const {
    return ::test::bindingsdenylist::DenyEachBinding_OnlyDenySyzkaller_Result::
        Tag(tag_);
  }

  // You probably want to use Which() method instead of Ordinal(). Use Ordinal()
  // only when you need access to the raw integral ordinal value.
  fidl_xunion_tag_t Ordinal() const { return tag_; }

  friend ::fidl::Equality<
      ::test::bindingsdenylist::DenyEachBinding_OnlyDenySyzkaller_Result>;
  DenyEachBinding_OnlyDenySyzkaller_Result(
      fpromise::result<int32_t, uint32_t>&& result) {
    ZX_ASSERT(!result.is_pending());
    if (result.is_ok()) {
      set_response(
          ::test::bindingsdenylist::DenyEachBinding_OnlyDenySyzkaller_Response{
              result.take_value()});
    } else {
      set_err(result.take_error());
    }
  }
  DenyEachBinding_OnlyDenySyzkaller_Result(
      fpromise::ok_result<int32_t>&& result)
      : DenyEachBinding_OnlyDenySyzkaller_Result(
            fpromise::result<int32_t, uint32_t>(std::move(result))) {}
  DenyEachBinding_OnlyDenySyzkaller_Result(
      fpromise::error_result<uint32_t>&& result)
      : DenyEachBinding_OnlyDenySyzkaller_Result(
            fpromise::result<int32_t, uint32_t>(std::move(result))) {}
  operator fpromise::result<int32_t, uint32_t>() && {
    if (is_err()) {
      return fpromise::error(err());
    }
    ::std::tuple<int32_t> value_tuple = std::move(response());
    return fpromise::ok(std::move(std::get<0>(value_tuple)));
  }

 private:
  void Destroy();
  void EnsureStorageInitialized(::fidl_xunion_tag_t tag);

  ::fidl_xunion_tag_t tag_ = static_cast<fidl_xunion_tag_t>(
      ::test::bindingsdenylist::DenyEachBinding_OnlyDenySyzkaller_Result::Tag::
          Invalid);
  union {
    ::test::bindingsdenylist::DenyEachBinding_OnlyDenySyzkaller_Response
        response_;
    uint32_t err_;
  };
};

inline zx_status_t Clone(
    const ::test::bindingsdenylist::DenyEachBinding_OnlyDenySyzkaller_Result&
        value,
    ::test::bindingsdenylist::DenyEachBinding_OnlyDenySyzkaller_Result*
        result) {
  return value.Clone(result);
}

using DenyEachBinding_OnlyDenySyzkaller_ResultPtr =
    ::std::unique_ptr<DenyEachBinding_OnlyDenySyzkaller_Result>;

class DenyEachBinding_OnlyDenyRust_Response final {
 public:
  static const fidl_type_t* FidlType;
  DenyEachBinding_OnlyDenyRust_Response() = default;
  explicit DenyEachBinding_OnlyDenyRust_Response(int32_t v) : b(std::move(v)) {}
  int32_t ResultValue_() { return std::move(b); }
  explicit DenyEachBinding_OnlyDenyRust_Response(
      ::std::tuple<int32_t> _value_tuple) {
    std::tie(b) = std::move(_value_tuple);
  }
  operator ::std::tuple<int32_t>() && { return std::make_tuple(std::move(b)); }

  int32_t b{};

  static inline ::std::unique_ptr<DenyEachBinding_OnlyDenyRust_Response> New() {
    return ::std::make_unique<DenyEachBinding_OnlyDenyRust_Response>();
  }

  void Encode(::fidl::Encoder* _encoder, size_t _offset,
              cpp17::optional<::fidl::HandleInformation> maybe_handle_info =
                  cpp17::nullopt);
  static void Decode(::fidl::Decoder* _decoder,
                     DenyEachBinding_OnlyDenyRust_Response* value,
                     size_t _offset);
  zx_status_t Clone(DenyEachBinding_OnlyDenyRust_Response* result) const;
};

inline zx_status_t Clone(
    const ::test::bindingsdenylist::DenyEachBinding_OnlyDenyRust_Response&
        _value,
    ::test::bindingsdenylist::DenyEachBinding_OnlyDenyRust_Response* _result) {
  return _value.Clone(_result);
}

using DenyEachBinding_OnlyDenyRust_ResponsePtr =
    ::std::unique_ptr<DenyEachBinding_OnlyDenyRust_Response>;

class DenyEachBinding_OnlyDenyRust_Result final {
 public:
  static const fidl_type_t* FidlType;

  DenyEachBinding_OnlyDenyRust_Result();
  ~DenyEachBinding_OnlyDenyRust_Result();

  DenyEachBinding_OnlyDenyRust_Result(DenyEachBinding_OnlyDenyRust_Result&&);
  DenyEachBinding_OnlyDenyRust_Result& operator=(
      DenyEachBinding_OnlyDenyRust_Result&&);

  static DenyEachBinding_OnlyDenyRust_Result WithResponse(
      ::test::bindingsdenylist::DenyEachBinding_OnlyDenyRust_Response&&);
  static DenyEachBinding_OnlyDenyRust_Result WithErr(uint32_t&&);

  enum __attribute__((enum_extensibility(closed))) Tag : fidl_xunion_tag_t {

    kResponse = 1,  // 0x1
    kErr = 2,       // 0x2
    Invalid = ::std::numeric_limits<::fidl_union_tag_t>::max(),
  };

  static inline ::std::unique_ptr<DenyEachBinding_OnlyDenyRust_Result> New() {
    return ::std::make_unique<DenyEachBinding_OnlyDenyRust_Result>();
  }

  void Encode(::fidl::Encoder* encoder, size_t offset,
              cpp17::optional<::fidl::HandleInformation> maybe_handle_info =
                  cpp17::nullopt);
  static void Decode(::fidl::Decoder* _decoder,
                     DenyEachBinding_OnlyDenyRust_Result* value, size_t offset);
  zx_status_t Clone(DenyEachBinding_OnlyDenyRust_Result* result) const;

  bool has_invalid_tag() const { return tag_ == Invalid; }

  bool is_response() const {
    return tag_ == ::test::bindingsdenylist::
                       DenyEachBinding_OnlyDenyRust_Result::Tag::kResponse;
  }

  ::test::bindingsdenylist::DenyEachBinding_OnlyDenyRust_Response& response() {
    EnsureStorageInitialized(
        ::test::bindingsdenylist::DenyEachBinding_OnlyDenyRust_Result::Tag::
            kResponse);
    return response_;
  }

  const ::test::bindingsdenylist::DenyEachBinding_OnlyDenyRust_Response&
  response() const {
    ZX_ASSERT(is_response());
    return response_;
  }
  DenyEachBinding_OnlyDenyRust_Result& set_response(
      ::test::bindingsdenylist::DenyEachBinding_OnlyDenyRust_Response value);

  bool is_err() const {
    return tag_ == ::test::bindingsdenylist::
                       DenyEachBinding_OnlyDenyRust_Result::Tag::kErr;
  }

  uint32_t& err() {
    EnsureStorageInitialized(
        ::test::bindingsdenylist::DenyEachBinding_OnlyDenyRust_Result::Tag::
            kErr);
    return err_;
  }

  const uint32_t& err() const {
    ZX_ASSERT(is_err());
    return err_;
  }
  DenyEachBinding_OnlyDenyRust_Result& set_err(uint32_t value);

  ::test::bindingsdenylist::DenyEachBinding_OnlyDenyRust_Result::Tag Which()
      const {
    return ::test::bindingsdenylist::DenyEachBinding_OnlyDenyRust_Result::Tag(
        tag_);
  }

  // You probably want to use Which() method instead of Ordinal(). Use Ordinal()
  // only when you need access to the raw integral ordinal value.
  fidl_xunion_tag_t Ordinal() const { return tag_; }

  friend ::fidl::Equality<
      ::test::bindingsdenylist::DenyEachBinding_OnlyDenyRust_Result>;
  DenyEachBinding_OnlyDenyRust_Result(
      fpromise::result<int32_t, uint32_t>&& result) {
    ZX_ASSERT(!result.is_pending());
    if (result.is_ok()) {
      set_response(
          ::test::bindingsdenylist::DenyEachBinding_OnlyDenyRust_Response{
              result.take_value()});
    } else {
      set_err(result.take_error());
    }
  }
  DenyEachBinding_OnlyDenyRust_Result(fpromise::ok_result<int32_t>&& result)
      : DenyEachBinding_OnlyDenyRust_Result(
            fpromise::result<int32_t, uint32_t>(std::move(result))) {}
  DenyEachBinding_OnlyDenyRust_Result(fpromise::error_result<uint32_t>&& result)
      : DenyEachBinding_OnlyDenyRust_Result(
            fpromise::result<int32_t, uint32_t>(std::move(result))) {}
  operator fpromise::result<int32_t, uint32_t>() && {
    if (is_err()) {
      return fpromise::error(err());
    }
    ::std::tuple<int32_t> value_tuple = std::move(response());
    return fpromise::ok(std::move(std::get<0>(value_tuple)));
  }

 private:
  void Destroy();
  void EnsureStorageInitialized(::fidl_xunion_tag_t tag);

  ::fidl_xunion_tag_t tag_ = static_cast<fidl_xunion_tag_t>(
      ::test::bindingsdenylist::DenyEachBinding_OnlyDenyRust_Result::Tag::
          Invalid);
  union {
    ::test::bindingsdenylist::DenyEachBinding_OnlyDenyRust_Response response_;
    uint32_t err_;
  };
};

inline zx_status_t Clone(
    const ::test::bindingsdenylist::DenyEachBinding_OnlyDenyRust_Result& value,
    ::test::bindingsdenylist::DenyEachBinding_OnlyDenyRust_Result* result) {
  return value.Clone(result);
}

using DenyEachBinding_OnlyDenyRust_ResultPtr =
    ::std::unique_ptr<DenyEachBinding_OnlyDenyRust_Result>;

class DenyEachBinding_OnlyDenyLibfuzzer_Response final {
 public:
  static const fidl_type_t* FidlType;
  DenyEachBinding_OnlyDenyLibfuzzer_Response() = default;
  explicit DenyEachBinding_OnlyDenyLibfuzzer_Response(int32_t v)
      : b(std::move(v)) {}
  int32_t ResultValue_() { return std::move(b); }
  explicit DenyEachBinding_OnlyDenyLibfuzzer_Response(
      ::std::tuple<int32_t> _value_tuple) {
    std::tie(b) = std::move(_value_tuple);
  }
  operator ::std::tuple<int32_t>() && { return std::make_tuple(std::move(b)); }

  int32_t b{};

  static inline ::std::unique_ptr<DenyEachBinding_OnlyDenyLibfuzzer_Response>
  New() {
    return ::std::make_unique<DenyEachBinding_OnlyDenyLibfuzzer_Response>();
  }

  void Encode(::fidl::Encoder* _encoder, size_t _offset,
              cpp17::optional<::fidl::HandleInformation> maybe_handle_info =
                  cpp17::nullopt);
  static void Decode(::fidl::Decoder* _decoder,
                     DenyEachBinding_OnlyDenyLibfuzzer_Response* value,
                     size_t _offset);
  zx_status_t Clone(DenyEachBinding_OnlyDenyLibfuzzer_Response* result) const;
};

inline zx_status_t Clone(
    const ::test::bindingsdenylist::DenyEachBinding_OnlyDenyLibfuzzer_Response&
        _value,
    ::test::bindingsdenylist::DenyEachBinding_OnlyDenyLibfuzzer_Response*
        _result) {
  return _value.Clone(_result);
}

using DenyEachBinding_OnlyDenyLibfuzzer_ResponsePtr =
    ::std::unique_ptr<DenyEachBinding_OnlyDenyLibfuzzer_Response>;

class DenyEachBinding_OnlyDenyLibfuzzer_Result final {
 public:
  static const fidl_type_t* FidlType;

  DenyEachBinding_OnlyDenyLibfuzzer_Result();
  ~DenyEachBinding_OnlyDenyLibfuzzer_Result();

  DenyEachBinding_OnlyDenyLibfuzzer_Result(
      DenyEachBinding_OnlyDenyLibfuzzer_Result&&);
  DenyEachBinding_OnlyDenyLibfuzzer_Result& operator=(
      DenyEachBinding_OnlyDenyLibfuzzer_Result&&);

  static DenyEachBinding_OnlyDenyLibfuzzer_Result WithResponse(
      ::test::bindingsdenylist::DenyEachBinding_OnlyDenyLibfuzzer_Response&&);
  static DenyEachBinding_OnlyDenyLibfuzzer_Result WithErr(uint32_t&&);

  enum __attribute__((enum_extensibility(closed))) Tag : fidl_xunion_tag_t {

    kResponse = 1,  // 0x1
    kErr = 2,       // 0x2
    Invalid = ::std::numeric_limits<::fidl_union_tag_t>::max(),
  };

  static inline ::std::unique_ptr<DenyEachBinding_OnlyDenyLibfuzzer_Result>
  New() {
    return ::std::make_unique<DenyEachBinding_OnlyDenyLibfuzzer_Result>();
  }

  void Encode(::fidl::Encoder* encoder, size_t offset,
              cpp17::optional<::fidl::HandleInformation> maybe_handle_info =
                  cpp17::nullopt);
  static void Decode(::fidl::Decoder* _decoder,
                     DenyEachBinding_OnlyDenyLibfuzzer_Result* value,
                     size_t offset);
  zx_status_t Clone(DenyEachBinding_OnlyDenyLibfuzzer_Result* result) const;

  bool has_invalid_tag() const { return tag_ == Invalid; }

  bool is_response() const {
    return tag_ == ::test::bindingsdenylist::
                       DenyEachBinding_OnlyDenyLibfuzzer_Result::Tag::kResponse;
  }

  ::test::bindingsdenylist::DenyEachBinding_OnlyDenyLibfuzzer_Response&
  response() {
    EnsureStorageInitialized(
        ::test::bindingsdenylist::DenyEachBinding_OnlyDenyLibfuzzer_Result::
            Tag::kResponse);
    return response_;
  }

  const ::test::bindingsdenylist::DenyEachBinding_OnlyDenyLibfuzzer_Response&
  response() const {
    ZX_ASSERT(is_response());
    return response_;
  }
  DenyEachBinding_OnlyDenyLibfuzzer_Result& set_response(
      ::test::bindingsdenylist::DenyEachBinding_OnlyDenyLibfuzzer_Response
          value);

  bool is_err() const {
    return tag_ == ::test::bindingsdenylist::
                       DenyEachBinding_OnlyDenyLibfuzzer_Result::Tag::kErr;
  }

  uint32_t& err() {
    EnsureStorageInitialized(
        ::test::bindingsdenylist::DenyEachBinding_OnlyDenyLibfuzzer_Result::
            Tag::kErr);
    return err_;
  }

  const uint32_t& err() const {
    ZX_ASSERT(is_err());
    return err_;
  }
  DenyEachBinding_OnlyDenyLibfuzzer_Result& set_err(uint32_t value);

  ::test::bindingsdenylist::DenyEachBinding_OnlyDenyLibfuzzer_Result::Tag
  Which() const {
    return ::test::bindingsdenylist::DenyEachBinding_OnlyDenyLibfuzzer_Result::
        Tag(tag_);
  }

  // You probably want to use Which() method instead of Ordinal(). Use Ordinal()
  // only when you need access to the raw integral ordinal value.
  fidl_xunion_tag_t Ordinal() const { return tag_; }

  friend ::fidl::Equality<
      ::test::bindingsdenylist::DenyEachBinding_OnlyDenyLibfuzzer_Result>;
  DenyEachBinding_OnlyDenyLibfuzzer_Result(
      fpromise::result<int32_t, uint32_t>&& result) {
    ZX_ASSERT(!result.is_pending());
    if (result.is_ok()) {
      set_response(
          ::test::bindingsdenylist::DenyEachBinding_OnlyDenyLibfuzzer_Response{
              result.take_value()});
    } else {
      set_err(result.take_error());
    }
  }
  DenyEachBinding_OnlyDenyLibfuzzer_Result(
      fpromise::ok_result<int32_t>&& result)
      : DenyEachBinding_OnlyDenyLibfuzzer_Result(
            fpromise::result<int32_t, uint32_t>(std::move(result))) {}
  DenyEachBinding_OnlyDenyLibfuzzer_Result(
      fpromise::error_result<uint32_t>&& result)
      : DenyEachBinding_OnlyDenyLibfuzzer_Result(
            fpromise::result<int32_t, uint32_t>(std::move(result))) {}
  operator fpromise::result<int32_t, uint32_t>() && {
    if (is_err()) {
      return fpromise::error(err());
    }
    ::std::tuple<int32_t> value_tuple = std::move(response());
    return fpromise::ok(std::move(std::get<0>(value_tuple)));
  }

 private:
  void Destroy();
  void EnsureStorageInitialized(::fidl_xunion_tag_t tag);

  ::fidl_xunion_tag_t tag_ = static_cast<fidl_xunion_tag_t>(
      ::test::bindingsdenylist::DenyEachBinding_OnlyDenyLibfuzzer_Result::Tag::
          Invalid);
  union {
    ::test::bindingsdenylist::DenyEachBinding_OnlyDenyLibfuzzer_Response
        response_;
    uint32_t err_;
  };
};

inline zx_status_t Clone(
    const ::test::bindingsdenylist::DenyEachBinding_OnlyDenyLibfuzzer_Result&
        value,
    ::test::bindingsdenylist::DenyEachBinding_OnlyDenyLibfuzzer_Result*
        result) {
  return value.Clone(result);
}

using DenyEachBinding_OnlyDenyLibfuzzer_ResultPtr =
    ::std::unique_ptr<DenyEachBinding_OnlyDenyLibfuzzer_Result>;

class DenyEachBinding_OnlyDenyGo_Response final {
 public:
  static const fidl_type_t* FidlType;
  DenyEachBinding_OnlyDenyGo_Response() = default;
  explicit DenyEachBinding_OnlyDenyGo_Response(int32_t v) : b(std::move(v)) {}
  int32_t ResultValue_() { return std::move(b); }
  explicit DenyEachBinding_OnlyDenyGo_Response(
      ::std::tuple<int32_t> _value_tuple) {
    std::tie(b) = std::move(_value_tuple);
  }
  operator ::std::tuple<int32_t>() && { return std::make_tuple(std::move(b)); }

  int32_t b{};

  static inline ::std::unique_ptr<DenyEachBinding_OnlyDenyGo_Response> New() {
    return ::std::make_unique<DenyEachBinding_OnlyDenyGo_Response>();
  }

  void Encode(::fidl::Encoder* _encoder, size_t _offset,
              cpp17::optional<::fidl::HandleInformation> maybe_handle_info =
                  cpp17::nullopt);
  static void Decode(::fidl::Decoder* _decoder,
                     DenyEachBinding_OnlyDenyGo_Response* value,
                     size_t _offset);
  zx_status_t Clone(DenyEachBinding_OnlyDenyGo_Response* result) const;
};

inline zx_status_t Clone(
    const ::test::bindingsdenylist::DenyEachBinding_OnlyDenyGo_Response& _value,
    ::test::bindingsdenylist::DenyEachBinding_OnlyDenyGo_Response* _result) {
  return _value.Clone(_result);
}

using DenyEachBinding_OnlyDenyGo_ResponsePtr =
    ::std::unique_ptr<DenyEachBinding_OnlyDenyGo_Response>;

class DenyEachBinding_OnlyDenyGo_Result final {
 public:
  static const fidl_type_t* FidlType;

  DenyEachBinding_OnlyDenyGo_Result();
  ~DenyEachBinding_OnlyDenyGo_Result();

  DenyEachBinding_OnlyDenyGo_Result(DenyEachBinding_OnlyDenyGo_Result&&);
  DenyEachBinding_OnlyDenyGo_Result& operator=(
      DenyEachBinding_OnlyDenyGo_Result&&);

  static DenyEachBinding_OnlyDenyGo_Result WithResponse(
      ::test::bindingsdenylist::DenyEachBinding_OnlyDenyGo_Response&&);
  static DenyEachBinding_OnlyDenyGo_Result WithErr(uint32_t&&);

  enum __attribute__((enum_extensibility(closed))) Tag : fidl_xunion_tag_t {

    kResponse = 1,  // 0x1
    kErr = 2,       // 0x2
    Invalid = ::std::numeric_limits<::fidl_union_tag_t>::max(),
  };

  static inline ::std::unique_ptr<DenyEachBinding_OnlyDenyGo_Result> New() {
    return ::std::make_unique<DenyEachBinding_OnlyDenyGo_Result>();
  }

  void Encode(::fidl::Encoder* encoder, size_t offset,
              cpp17::optional<::fidl::HandleInformation> maybe_handle_info =
                  cpp17::nullopt);
  static void Decode(::fidl::Decoder* _decoder,
                     DenyEachBinding_OnlyDenyGo_Result* value, size_t offset);
  zx_status_t Clone(DenyEachBinding_OnlyDenyGo_Result* result) const;

  bool has_invalid_tag() const { return tag_ == Invalid; }

  bool is_response() const {
    return tag_ == ::test::bindingsdenylist::DenyEachBinding_OnlyDenyGo_Result::
                       Tag::kResponse;
  }

  ::test::bindingsdenylist::DenyEachBinding_OnlyDenyGo_Response& response() {
    EnsureStorageInitialized(
        ::test::bindingsdenylist::DenyEachBinding_OnlyDenyGo_Result::Tag::
            kResponse);
    return response_;
  }

  const ::test::bindingsdenylist::DenyEachBinding_OnlyDenyGo_Response&
  response() const {
    ZX_ASSERT(is_response());
    return response_;
  }
  DenyEachBinding_OnlyDenyGo_Result& set_response(
      ::test::bindingsdenylist::DenyEachBinding_OnlyDenyGo_Response value);

  bool is_err() const {
    return tag_ == ::test::bindingsdenylist::DenyEachBinding_OnlyDenyGo_Result::
                       Tag::kErr;
  }

  uint32_t& err() {
    EnsureStorageInitialized(
        ::test::bindingsdenylist::DenyEachBinding_OnlyDenyGo_Result::Tag::kErr);
    return err_;
  }

  const uint32_t& err() const {
    ZX_ASSERT(is_err());
    return err_;
  }
  DenyEachBinding_OnlyDenyGo_Result& set_err(uint32_t value);

  ::test::bindingsdenylist::DenyEachBinding_OnlyDenyGo_Result::Tag Which()
      const {
    return ::test::bindingsdenylist::DenyEachBinding_OnlyDenyGo_Result::Tag(
        tag_);
  }

  // You probably want to use Which() method instead of Ordinal(). Use Ordinal()
  // only when you need access to the raw integral ordinal value.
  fidl_xunion_tag_t Ordinal() const { return tag_; }

  friend ::fidl::Equality<
      ::test::bindingsdenylist::DenyEachBinding_OnlyDenyGo_Result>;
  DenyEachBinding_OnlyDenyGo_Result(
      fpromise::result<int32_t, uint32_t>&& result) {
    ZX_ASSERT(!result.is_pending());
    if (result.is_ok()) {
      set_response(
          ::test::bindingsdenylist::DenyEachBinding_OnlyDenyGo_Response{
              result.take_value()});
    } else {
      set_err(result.take_error());
    }
  }
  DenyEachBinding_OnlyDenyGo_Result(fpromise::ok_result<int32_t>&& result)
      : DenyEachBinding_OnlyDenyGo_Result(
            fpromise::result<int32_t, uint32_t>(std::move(result))) {}
  DenyEachBinding_OnlyDenyGo_Result(fpromise::error_result<uint32_t>&& result)
      : DenyEachBinding_OnlyDenyGo_Result(
            fpromise::result<int32_t, uint32_t>(std::move(result))) {}
  operator fpromise::result<int32_t, uint32_t>() && {
    if (is_err()) {
      return fpromise::error(err());
    }
    ::std::tuple<int32_t> value_tuple = std::move(response());
    return fpromise::ok(std::move(std::get<0>(value_tuple)));
  }

 private:
  void Destroy();
  void EnsureStorageInitialized(::fidl_xunion_tag_t tag);

  ::fidl_xunion_tag_t tag_ = static_cast<fidl_xunion_tag_t>(
      ::test::bindingsdenylist::DenyEachBinding_OnlyDenyGo_Result::Tag::
          Invalid);
  union {
    ::test::bindingsdenylist::DenyEachBinding_OnlyDenyGo_Response response_;
    uint32_t err_;
  };
};

inline zx_status_t Clone(
    const ::test::bindingsdenylist::DenyEachBinding_OnlyDenyGo_Result& value,
    ::test::bindingsdenylist::DenyEachBinding_OnlyDenyGo_Result* result) {
  return value.Clone(result);
}

using DenyEachBinding_OnlyDenyGo_ResultPtr =
    ::std::unique_ptr<DenyEachBinding_OnlyDenyGo_Result>;

class DenyEachBinding_OnlyDenyDart_Response final {
 public:
  static const fidl_type_t* FidlType;
  DenyEachBinding_OnlyDenyDart_Response() = default;
  explicit DenyEachBinding_OnlyDenyDart_Response(int32_t v) : b(std::move(v)) {}
  int32_t ResultValue_() { return std::move(b); }
  explicit DenyEachBinding_OnlyDenyDart_Response(
      ::std::tuple<int32_t> _value_tuple) {
    std::tie(b) = std::move(_value_tuple);
  }
  operator ::std::tuple<int32_t>() && { return std::make_tuple(std::move(b)); }

  int32_t b{};

  static inline ::std::unique_ptr<DenyEachBinding_OnlyDenyDart_Response> New() {
    return ::std::make_unique<DenyEachBinding_OnlyDenyDart_Response>();
  }

  void Encode(::fidl::Encoder* _encoder, size_t _offset,
              cpp17::optional<::fidl::HandleInformation> maybe_handle_info =
                  cpp17::nullopt);
  static void Decode(::fidl::Decoder* _decoder,
                     DenyEachBinding_OnlyDenyDart_Response* value,
                     size_t _offset);
  zx_status_t Clone(DenyEachBinding_OnlyDenyDart_Response* result) const;
};

inline zx_status_t Clone(
    const ::test::bindingsdenylist::DenyEachBinding_OnlyDenyDart_Response&
        _value,
    ::test::bindingsdenylist::DenyEachBinding_OnlyDenyDart_Response* _result) {
  return _value.Clone(_result);
}

using DenyEachBinding_OnlyDenyDart_ResponsePtr =
    ::std::unique_ptr<DenyEachBinding_OnlyDenyDart_Response>;

class DenyEachBinding_OnlyDenyDart_Result final {
 public:
  static const fidl_type_t* FidlType;

  DenyEachBinding_OnlyDenyDart_Result();
  ~DenyEachBinding_OnlyDenyDart_Result();

  DenyEachBinding_OnlyDenyDart_Result(DenyEachBinding_OnlyDenyDart_Result&&);
  DenyEachBinding_OnlyDenyDart_Result& operator=(
      DenyEachBinding_OnlyDenyDart_Result&&);

  static DenyEachBinding_OnlyDenyDart_Result WithResponse(
      ::test::bindingsdenylist::DenyEachBinding_OnlyDenyDart_Response&&);
  static DenyEachBinding_OnlyDenyDart_Result WithErr(uint32_t&&);

  enum __attribute__((enum_extensibility(closed))) Tag : fidl_xunion_tag_t {

    kResponse = 1,  // 0x1
    kErr = 2,       // 0x2
    Invalid = ::std::numeric_limits<::fidl_union_tag_t>::max(),
  };

  static inline ::std::unique_ptr<DenyEachBinding_OnlyDenyDart_Result> New() {
    return ::std::make_unique<DenyEachBinding_OnlyDenyDart_Result>();
  }

  void Encode(::fidl::Encoder* encoder, size_t offset,
              cpp17::optional<::fidl::HandleInformation> maybe_handle_info =
                  cpp17::nullopt);
  static void Decode(::fidl::Decoder* _decoder,
                     DenyEachBinding_OnlyDenyDart_Result* value, size_t offset);
  zx_status_t Clone(DenyEachBinding_OnlyDenyDart_Result* result) const;

  bool has_invalid_tag() const { return tag_ == Invalid; }

  bool is_response() const {
    return tag_ == ::test::bindingsdenylist::
                       DenyEachBinding_OnlyDenyDart_Result::Tag::kResponse;
  }

  ::test::bindingsdenylist::DenyEachBinding_OnlyDenyDart_Response& response() {
    EnsureStorageInitialized(
        ::test::bindingsdenylist::DenyEachBinding_OnlyDenyDart_Result::Tag::
            kResponse);
    return response_;
  }

  const ::test::bindingsdenylist::DenyEachBinding_OnlyDenyDart_Response&
  response() const {
    ZX_ASSERT(is_response());
    return response_;
  }
  DenyEachBinding_OnlyDenyDart_Result& set_response(
      ::test::bindingsdenylist::DenyEachBinding_OnlyDenyDart_Response value);

  bool is_err() const {
    return tag_ == ::test::bindingsdenylist::
                       DenyEachBinding_OnlyDenyDart_Result::Tag::kErr;
  }

  uint32_t& err() {
    EnsureStorageInitialized(
        ::test::bindingsdenylist::DenyEachBinding_OnlyDenyDart_Result::Tag::
            kErr);
    return err_;
  }

  const uint32_t& err() const {
    ZX_ASSERT(is_err());
    return err_;
  }
  DenyEachBinding_OnlyDenyDart_Result& set_err(uint32_t value);

  ::test::bindingsdenylist::DenyEachBinding_OnlyDenyDart_Result::Tag Which()
      const {
    return ::test::bindingsdenylist::DenyEachBinding_OnlyDenyDart_Result::Tag(
        tag_);
  }

  // You probably want to use Which() method instead of Ordinal(). Use Ordinal()
  // only when you need access to the raw integral ordinal value.
  fidl_xunion_tag_t Ordinal() const { return tag_; }

  friend ::fidl::Equality<
      ::test::bindingsdenylist::DenyEachBinding_OnlyDenyDart_Result>;
  DenyEachBinding_OnlyDenyDart_Result(
      fpromise::result<int32_t, uint32_t>&& result) {
    ZX_ASSERT(!result.is_pending());
    if (result.is_ok()) {
      set_response(
          ::test::bindingsdenylist::DenyEachBinding_OnlyDenyDart_Response{
              result.take_value()});
    } else {
      set_err(result.take_error());
    }
  }
  DenyEachBinding_OnlyDenyDart_Result(fpromise::ok_result<int32_t>&& result)
      : DenyEachBinding_OnlyDenyDart_Result(
            fpromise::result<int32_t, uint32_t>(std::move(result))) {}
  DenyEachBinding_OnlyDenyDart_Result(fpromise::error_result<uint32_t>&& result)
      : DenyEachBinding_OnlyDenyDart_Result(
            fpromise::result<int32_t, uint32_t>(std::move(result))) {}
  operator fpromise::result<int32_t, uint32_t>() && {
    if (is_err()) {
      return fpromise::error(err());
    }
    ::std::tuple<int32_t> value_tuple = std::move(response());
    return fpromise::ok(std::move(std::get<0>(value_tuple)));
  }

 private:
  void Destroy();
  void EnsureStorageInitialized(::fidl_xunion_tag_t tag);

  ::fidl_xunion_tag_t tag_ = static_cast<fidl_xunion_tag_t>(
      ::test::bindingsdenylist::DenyEachBinding_OnlyDenyDart_Result::Tag::
          Invalid);
  union {
    ::test::bindingsdenylist::DenyEachBinding_OnlyDenyDart_Response response_;
    uint32_t err_;
  };
};

inline zx_status_t Clone(
    const ::test::bindingsdenylist::DenyEachBinding_OnlyDenyDart_Result& value,
    ::test::bindingsdenylist::DenyEachBinding_OnlyDenyDart_Result* result) {
  return value.Clone(result);
}

using DenyEachBinding_OnlyDenyDart_ResultPtr =
    ::std::unique_ptr<DenyEachBinding_OnlyDenyDart_Result>;

class DenyEachBinding_OnlyDenyCpp_Response final {
 public:
  static const fidl_type_t* FidlType;

  int32_t b{};

  static inline ::std::unique_ptr<DenyEachBinding_OnlyDenyCpp_Response> New() {
    return ::std::make_unique<DenyEachBinding_OnlyDenyCpp_Response>();
  }

  void Encode(::fidl::Encoder* _encoder, size_t _offset,
              cpp17::optional<::fidl::HandleInformation> maybe_handle_info =
                  cpp17::nullopt);
  static void Decode(::fidl::Decoder* _decoder,
                     DenyEachBinding_OnlyDenyCpp_Response* value,
                     size_t _offset);
  zx_status_t Clone(DenyEachBinding_OnlyDenyCpp_Response* result) const;
};

inline zx_status_t Clone(
    const ::test::bindingsdenylist::DenyEachBinding_OnlyDenyCpp_Response&
        _value,
    ::test::bindingsdenylist::DenyEachBinding_OnlyDenyCpp_Response* _result) {
  return _value.Clone(_result);
}

using DenyEachBinding_OnlyDenyCpp_ResponsePtr =
    ::std::unique_ptr<DenyEachBinding_OnlyDenyCpp_Response>;

class DenyEachBinding_OnlyDenyCpp_Result final {
 public:
  static const fidl_type_t* FidlType;

  DenyEachBinding_OnlyDenyCpp_Result();
  ~DenyEachBinding_OnlyDenyCpp_Result();

  DenyEachBinding_OnlyDenyCpp_Result(DenyEachBinding_OnlyDenyCpp_Result&&);
  DenyEachBinding_OnlyDenyCpp_Result& operator=(
      DenyEachBinding_OnlyDenyCpp_Result&&);

  static DenyEachBinding_OnlyDenyCpp_Result WithResponse(
      ::test::bindingsdenylist::DenyEachBinding_OnlyDenyCpp_Response&&);
  static DenyEachBinding_OnlyDenyCpp_Result WithErr(uint32_t&&);

  enum __attribute__((enum_extensibility(closed))) Tag : fidl_xunion_tag_t {

    kResponse = 1,  // 0x1
    kErr = 2,       // 0x2
    Invalid = ::std::numeric_limits<::fidl_union_tag_t>::max(),
  };

  static inline ::std::unique_ptr<DenyEachBinding_OnlyDenyCpp_Result> New() {
    return ::std::make_unique<DenyEachBinding_OnlyDenyCpp_Result>();
  }

  void Encode(::fidl::Encoder* encoder, size_t offset,
              cpp17::optional<::fidl::HandleInformation> maybe_handle_info =
                  cpp17::nullopt);
  static void Decode(::fidl::Decoder* _decoder,
                     DenyEachBinding_OnlyDenyCpp_Result* value, size_t offset);
  zx_status_t Clone(DenyEachBinding_OnlyDenyCpp_Result* result) const;

  bool has_invalid_tag() const { return tag_ == Invalid; }

  bool is_response() const {
    return tag_ == ::test::bindingsdenylist::
                       DenyEachBinding_OnlyDenyCpp_Result::Tag::kResponse;
  }

  ::test::bindingsdenylist::DenyEachBinding_OnlyDenyCpp_Response& response() {
    EnsureStorageInitialized(
        ::test::bindingsdenylist::DenyEachBinding_OnlyDenyCpp_Result::Tag::
            kResponse);
    return response_;
  }

  const ::test::bindingsdenylist::DenyEachBinding_OnlyDenyCpp_Response&
  response() const {
    ZX_ASSERT(is_response());
    return response_;
  }
  DenyEachBinding_OnlyDenyCpp_Result& set_response(
      ::test::bindingsdenylist::DenyEachBinding_OnlyDenyCpp_Response value);

  bool is_err() const {
    return tag_ == ::test::bindingsdenylist::
                       DenyEachBinding_OnlyDenyCpp_Result::Tag::kErr;
  }

  uint32_t& err() {
    EnsureStorageInitialized(::test::bindingsdenylist::
                                 DenyEachBinding_OnlyDenyCpp_Result::Tag::kErr);
    return err_;
  }

  const uint32_t& err() const {
    ZX_ASSERT(is_err());
    return err_;
  }
  DenyEachBinding_OnlyDenyCpp_Result& set_err(uint32_t value);

  ::test::bindingsdenylist::DenyEachBinding_OnlyDenyCpp_Result::Tag Which()
      const {
    return ::test::bindingsdenylist::DenyEachBinding_OnlyDenyCpp_Result::Tag(
        tag_);
  }

  // You probably want to use Which() method instead of Ordinal(). Use Ordinal()
  // only when you need access to the raw integral ordinal value.
  fidl_xunion_tag_t Ordinal() const { return tag_; }

  friend ::fidl::Equality<
      ::test::bindingsdenylist::DenyEachBinding_OnlyDenyCpp_Result>;

 private:
  void Destroy();
  void EnsureStorageInitialized(::fidl_xunion_tag_t tag);

  ::fidl_xunion_tag_t tag_ = static_cast<fidl_xunion_tag_t>(
      ::test::bindingsdenylist::DenyEachBinding_OnlyDenyCpp_Result::Tag::
          Invalid);
  union {
    ::test::bindingsdenylist::DenyEachBinding_OnlyDenyCpp_Response response_;
    uint32_t err_;
  };
};

inline zx_status_t Clone(
    const ::test::bindingsdenylist::DenyEachBinding_OnlyDenyCpp_Result& value,
    ::test::bindingsdenylist::DenyEachBinding_OnlyDenyCpp_Result* result) {
  return value.Clone(result);
}

using DenyEachBinding_OnlyDenyCpp_ResultPtr =
    ::std::unique_ptr<DenyEachBinding_OnlyDenyCpp_Result>;

#ifdef __Fuchsia__

namespace _internal {
__LOCAL extern "C" const fidl_type_t
    test_bindingsdenylist_DenyEachBindingOnlyDenyDartRequestMessageTable;

__LOCAL extern "C" const fidl_type_t
    test_bindingsdenylist_DenyEachBindingOnlyDenyGoRequestMessageTable;

__LOCAL extern "C" const fidl_type_t
    test_bindingsdenylist_DenyEachBindingOnlyDenyLibfuzzerRequestMessageTable;

__LOCAL extern "C" const fidl_type_t
    test_bindingsdenylist_DenyEachBindingOnlyDenyRustRequestMessageTable;

__LOCAL extern "C" const fidl_type_t
    test_bindingsdenylist_DenyEachBindingOnlyDenySyzkallerRequestMessageTable;

}  // namespace _internal
class DenyEachBinding_RequestEncoder {
 public:
  static ::fidl::HLCPPOutgoingMessage OnlyDenyDart(::fidl::Encoder* _encoder,
                                                   bool* a) {
    fidl_trace(WillHLCPPEncode);
    switch (_encoder->wire_format()) {
      case ::fidl::internal::WireFormatVersion::kV1:
        _encoder->Alloc(24 - sizeof(fidl_message_header_t));
        break;
      case ::fidl::internal::WireFormatVersion::kV2:
        _encoder->Alloc(24 - sizeof(fidl_message_header_t));
        break;
    }

    if (_encoder->wire_format() == ::fidl::internal::WireFormatVersion::kV1) {
      ::fidl::Encode(_encoder, a, 16);

    } else {
      ::fidl::Encode(_encoder, a, 16);
    }

    fidl_trace(
        DidHLCPPEncode,
        &::test::bindingsdenylist::_internal::
            test_bindingsdenylist_DenyEachBindingOnlyDenyDartRequestMessageTable,
        _encoder->GetPtr<const char>(0), _encoder->CurrentLength(),
        _encoder->CurrentHandleCount());

    return _encoder->GetMessage();
  }
  static ::fidl::HLCPPOutgoingMessage OnlyDenyGo(::fidl::Encoder* _encoder,
                                                 bool* a) {
    fidl_trace(WillHLCPPEncode);
    switch (_encoder->wire_format()) {
      case ::fidl::internal::WireFormatVersion::kV1:
        _encoder->Alloc(24 - sizeof(fidl_message_header_t));
        break;
      case ::fidl::internal::WireFormatVersion::kV2:
        _encoder->Alloc(24 - sizeof(fidl_message_header_t));
        break;
    }

    if (_encoder->wire_format() == ::fidl::internal::WireFormatVersion::kV1) {
      ::fidl::Encode(_encoder, a, 16);

    } else {
      ::fidl::Encode(_encoder, a, 16);
    }

    fidl_trace(
        DidHLCPPEncode,
        &::test::bindingsdenylist::_internal::
            test_bindingsdenylist_DenyEachBindingOnlyDenyGoRequestMessageTable,
        _encoder->GetPtr<const char>(0), _encoder->CurrentLength(),
        _encoder->CurrentHandleCount());

    return _encoder->GetMessage();
  }
  static ::fidl::HLCPPOutgoingMessage OnlyDenyLibfuzzer(
      ::fidl::Encoder* _encoder, bool* a) {
    fidl_trace(WillHLCPPEncode);
    switch (_encoder->wire_format()) {
      case ::fidl::internal::WireFormatVersion::kV1:
        _encoder->Alloc(24 - sizeof(fidl_message_header_t));
        break;
      case ::fidl::internal::WireFormatVersion::kV2:
        _encoder->Alloc(24 - sizeof(fidl_message_header_t));
        break;
    }

    if (_encoder->wire_format() == ::fidl::internal::WireFormatVersion::kV1) {
      ::fidl::Encode(_encoder, a, 16);

    } else {
      ::fidl::Encode(_encoder, a, 16);
    }

    fidl_trace(
        DidHLCPPEncode,
        &::test::bindingsdenylist::_internal::
            test_bindingsdenylist_DenyEachBindingOnlyDenyLibfuzzerRequestMessageTable,
        _encoder->GetPtr<const char>(0), _encoder->CurrentLength(),
        _encoder->CurrentHandleCount());

    return _encoder->GetMessage();
  }
  static ::fidl::HLCPPOutgoingMessage OnlyDenyRust(::fidl::Encoder* _encoder,
                                                   bool* a) {
    fidl_trace(WillHLCPPEncode);
    switch (_encoder->wire_format()) {
      case ::fidl::internal::WireFormatVersion::kV1:
        _encoder->Alloc(24 - sizeof(fidl_message_header_t));
        break;
      case ::fidl::internal::WireFormatVersion::kV2:
        _encoder->Alloc(24 - sizeof(fidl_message_header_t));
        break;
    }

    if (_encoder->wire_format() == ::fidl::internal::WireFormatVersion::kV1) {
      ::fidl::Encode(_encoder, a, 16);

    } else {
      ::fidl::Encode(_encoder, a, 16);
    }

    fidl_trace(
        DidHLCPPEncode,
        &::test::bindingsdenylist::_internal::
            test_bindingsdenylist_DenyEachBindingOnlyDenyRustRequestMessageTable,
        _encoder->GetPtr<const char>(0), _encoder->CurrentLength(),
        _encoder->CurrentHandleCount());

    return _encoder->GetMessage();
  }
  static ::fidl::HLCPPOutgoingMessage OnlyDenySyzkaller(
      ::fidl::Encoder* _encoder, bool* a) {
    fidl_trace(WillHLCPPEncode);
    switch (_encoder->wire_format()) {
      case ::fidl::internal::WireFormatVersion::kV1:
        _encoder->Alloc(24 - sizeof(fidl_message_header_t));
        break;
      case ::fidl::internal::WireFormatVersion::kV2:
        _encoder->Alloc(24 - sizeof(fidl_message_header_t));
        break;
    }

    if (_encoder->wire_format() == ::fidl::internal::WireFormatVersion::kV1) {
      ::fidl::Encode(_encoder, a, 16);

    } else {
      ::fidl::Encode(_encoder, a, 16);
    }

    fidl_trace(
        DidHLCPPEncode,
        &::test::bindingsdenylist::_internal::
            test_bindingsdenylist_DenyEachBindingOnlyDenySyzkallerRequestMessageTable,
        _encoder->GetPtr<const char>(0), _encoder->CurrentLength(),
        _encoder->CurrentHandleCount());

    return _encoder->GetMessage();
  }
};
namespace _internal {
__LOCAL extern "C" const fidl_type_t
    test_bindingsdenylist_DenyEachBindingOnlyDenyDartResponseMessageTable;

__LOCAL extern "C" const fidl_type_t
    test_bindingsdenylist_DenyEachBindingOnlyDenyGoResponseMessageTable;

__LOCAL extern "C" const fidl_type_t
    test_bindingsdenylist_DenyEachBindingOnlyDenyLibfuzzerResponseMessageTable;

__LOCAL extern "C" const fidl_type_t
    test_bindingsdenylist_DenyEachBindingOnlyDenyRustResponseMessageTable;

__LOCAL extern "C" const fidl_type_t
    test_bindingsdenylist_DenyEachBindingOnlyDenySyzkallerResponseMessageTable;

}  // namespace _internal
class DenyEachBinding_ResponseEncoder {
 public:
  static ::fidl::HLCPPOutgoingMessage OnlyDenyDart(
      ::fidl::Encoder* _encoder,
      ::test::bindingsdenylist::DenyEachBinding_OnlyDenyDart_Result* result) {
    fidl_trace(WillHLCPPEncode);
    switch (_encoder->wire_format()) {
      case ::fidl::internal::WireFormatVersion::kV1:
        _encoder->Alloc(40 - sizeof(fidl_message_header_t));
        break;
      case ::fidl::internal::WireFormatVersion::kV2:
        _encoder->Alloc(32 - sizeof(fidl_message_header_t));
        break;
    }

    if (_encoder->wire_format() == ::fidl::internal::WireFormatVersion::kV1) {
      ::fidl::Encode(_encoder, result, 16);

    } else {
      ::fidl::Encode(_encoder, result, 16);
    }

    fidl_trace(
        DidHLCPPEncode,
        &::test::bindingsdenylist::_internal::
            test_bindingsdenylist_DenyEachBindingOnlyDenyDartResponseMessageTable,
        _encoder->GetPtr<const char>(0), _encoder->CurrentLength(),
        _encoder->CurrentHandleCount());
    return _encoder->GetMessage();
  }
  static ::fidl::HLCPPOutgoingMessage OnlyDenyGo(
      ::fidl::Encoder* _encoder,
      ::test::bindingsdenylist::DenyEachBinding_OnlyDenyGo_Result* result) {
    fidl_trace(WillHLCPPEncode);
    switch (_encoder->wire_format()) {
      case ::fidl::internal::WireFormatVersion::kV1:
        _encoder->Alloc(40 - sizeof(fidl_message_header_t));
        break;
      case ::fidl::internal::WireFormatVersion::kV2:
        _encoder->Alloc(32 - sizeof(fidl_message_header_t));
        break;
    }

    if (_encoder->wire_format() == ::fidl::internal::WireFormatVersion::kV1) {
      ::fidl::Encode(_encoder, result, 16);

    } else {
      ::fidl::Encode(_encoder, result, 16);
    }

    fidl_trace(
        DidHLCPPEncode,
        &::test::bindingsdenylist::_internal::
            test_bindingsdenylist_DenyEachBindingOnlyDenyGoResponseMessageTable,
        _encoder->GetPtr<const char>(0), _encoder->CurrentLength(),
        _encoder->CurrentHandleCount());
    return _encoder->GetMessage();
  }
  static ::fidl::HLCPPOutgoingMessage OnlyDenyLibfuzzer(
      ::fidl::Encoder* _encoder,
      ::test::bindingsdenylist::DenyEachBinding_OnlyDenyLibfuzzer_Result*
          result) {
    fidl_trace(WillHLCPPEncode);
    switch (_encoder->wire_format()) {
      case ::fidl::internal::WireFormatVersion::kV1:
        _encoder->Alloc(40 - sizeof(fidl_message_header_t));
        break;
      case ::fidl::internal::WireFormatVersion::kV2:
        _encoder->Alloc(32 - sizeof(fidl_message_header_t));
        break;
    }

    if (_encoder->wire_format() == ::fidl::internal::WireFormatVersion::kV1) {
      ::fidl::Encode(_encoder, result, 16);

    } else {
      ::fidl::Encode(_encoder, result, 16);
    }

    fidl_trace(
        DidHLCPPEncode,
        &::test::bindingsdenylist::_internal::
            test_bindingsdenylist_DenyEachBindingOnlyDenyLibfuzzerResponseMessageTable,
        _encoder->GetPtr<const char>(0), _encoder->CurrentLength(),
        _encoder->CurrentHandleCount());
    return _encoder->GetMessage();
  }
  static ::fidl::HLCPPOutgoingMessage OnlyDenyRust(
      ::fidl::Encoder* _encoder,
      ::test::bindingsdenylist::DenyEachBinding_OnlyDenyRust_Result* result) {
    fidl_trace(WillHLCPPEncode);
    switch (_encoder->wire_format()) {
      case ::fidl::internal::WireFormatVersion::kV1:
        _encoder->Alloc(40 - sizeof(fidl_message_header_t));
        break;
      case ::fidl::internal::WireFormatVersion::kV2:
        _encoder->Alloc(32 - sizeof(fidl_message_header_t));
        break;
    }

    if (_encoder->wire_format() == ::fidl::internal::WireFormatVersion::kV1) {
      ::fidl::Encode(_encoder, result, 16);

    } else {
      ::fidl::Encode(_encoder, result, 16);
    }

    fidl_trace(
        DidHLCPPEncode,
        &::test::bindingsdenylist::_internal::
            test_bindingsdenylist_DenyEachBindingOnlyDenyRustResponseMessageTable,
        _encoder->GetPtr<const char>(0), _encoder->CurrentLength(),
        _encoder->CurrentHandleCount());
    return _encoder->GetMessage();
  }
  static ::fidl::HLCPPOutgoingMessage OnlyDenySyzkaller(
      ::fidl::Encoder* _encoder,
      ::test::bindingsdenylist::DenyEachBinding_OnlyDenySyzkaller_Result*
          result) {
    fidl_trace(WillHLCPPEncode);
    switch (_encoder->wire_format()) {
      case ::fidl::internal::WireFormatVersion::kV1:
        _encoder->Alloc(40 - sizeof(fidl_message_header_t));
        break;
      case ::fidl::internal::WireFormatVersion::kV2:
        _encoder->Alloc(32 - sizeof(fidl_message_header_t));
        break;
    }

    if (_encoder->wire_format() == ::fidl::internal::WireFormatVersion::kV1) {
      ::fidl::Encode(_encoder, result, 16);

    } else {
      ::fidl::Encode(_encoder, result, 16);
    }

    fidl_trace(
        DidHLCPPEncode,
        &::test::bindingsdenylist::_internal::
            test_bindingsdenylist_DenyEachBindingOnlyDenySyzkallerResponseMessageTable,
        _encoder->GetPtr<const char>(0), _encoder->CurrentLength(),
        _encoder->CurrentHandleCount());
    return _encoder->GetMessage();
  }
};
#endif  // __Fuchsia__

constexpr uint32_t AllBindings = 0u;

}  // namespace bindingsdenylist
}  // namespace test
namespace fidl {
template <>
struct IsFidlXUnion<::test::bindingsdenylist::ShouldNeverAppearInAnyBinding9>
    : public std::true_type {};

template <>
struct CodingTraits<::test::bindingsdenylist::ShouldNeverAppearInAnyBinding9>
    : public EncodableCodingTraits<
          ::test::bindingsdenylist::ShouldNeverAppearInAnyBinding9, 24, 16> {};

template <>
struct CodingTraits<
    std::unique_ptr<::test::bindingsdenylist::ShouldNeverAppearInAnyBinding9>> {
  static constexpr size_t inline_size_v1_no_ee = 24;
  static constexpr size_t inline_size_v2 = 16;

  static void Encode(
      Encoder* encoder,
      std::unique_ptr<::test::bindingsdenylist::ShouldNeverAppearInAnyBinding9>*
          value,
      size_t offset,
      cpp17::optional<::fidl::HandleInformation> maybe_handle_info) {
    auto&& p_xunion = *value;
    if (p_xunion) {
      p_xunion->Encode(encoder, offset);
    }
  }

  static void Decode(
      Decoder* _decoder,
      std::unique_ptr<::test::bindingsdenylist::ShouldNeverAppearInAnyBinding9>*
          value,
      size_t offset) {
    fidl_xunion_t* encoded = _decoder->GetPtr<fidl_xunion_t>(offset);
    if (encoded->tag == 0) {
      value->reset(nullptr);
      return;
    }

    value->reset(new ::test::bindingsdenylist::ShouldNeverAppearInAnyBinding9);

    ::test::bindingsdenylist::ShouldNeverAppearInAnyBinding9::Decode(
        _decoder, value->get(), offset);
  }
};

inline zx_status_t Clone(
    const ::test::bindingsdenylist::ShouldNeverAppearInAnyBinding9& value,
    ::test::bindingsdenylist::ShouldNeverAppearInAnyBinding9* result) {
  return ::test::bindingsdenylist::Clone(value, result);
}

template <>
struct Equality<::test::bindingsdenylist::ShouldNeverAppearInAnyBinding9> {
  bool operator()(
      const ::test::bindingsdenylist::ShouldNeverAppearInAnyBinding9& _lhs,
      const ::test::bindingsdenylist::ShouldNeverAppearInAnyBinding9& _rhs)
      const {
    if (_lhs.Ordinal() != _rhs.Ordinal()) {
      return false;
    }

    switch (_lhs.Ordinal()) {
      case static_cast<fidl_xunion_tag_t>(
          ::test::bindingsdenylist::ShouldNeverAppearInAnyBinding9::Tag::
              Invalid):
        return true;
      case ::test::bindingsdenylist::ShouldNeverAppearInAnyBinding9::Tag::kA:
        return ::fidl::Equals(_lhs.a_, _rhs.a_);
      default:
        return ::fidl::Equals(_lhs.unknown_data_, _rhs.unknown_data_);
    }
  }
};
template <>
struct CodingTraits<::test::bindingsdenylist::ShouldNeverAppearInAnyBinding8>
    : public EncodableCodingTraits<
          ::test::bindingsdenylist::ShouldNeverAppearInAnyBinding8, 16, 16> {};

inline zx_status_t Clone(
    const ::test::bindingsdenylist::ShouldNeverAppearInAnyBinding8& _value,
    ::test::bindingsdenylist::ShouldNeverAppearInAnyBinding8* result) {
  return _value.Clone(result);
}
template <>
struct Equality<::test::bindingsdenylist::ShouldNeverAppearInAnyBinding8> {
  bool operator()(
      const ::test::bindingsdenylist::ShouldNeverAppearInAnyBinding8& _lhs,
      const ::test::bindingsdenylist::ShouldNeverAppearInAnyBinding8& _rhs)
      const {
    if (_lhs.has_a()) {
      if (!_rhs.has_a()) {
        return false;
      }
      if (!::fidl::Equals(_lhs.a(), _rhs.a())) {
        return false;
      }
    } else if (_rhs.has_a()) {
      return false;
    }
    return ::fidl::Equals(_lhs.UnknownData(), _rhs.UnknownData());
  }
};
template <>
struct CodingTraits<::test::bindingsdenylist::ShouldNeverAppearInAnyBinding7>
    : public EncodableCodingTraits<
          ::test::bindingsdenylist::ShouldNeverAppearInAnyBinding7, 1, 1> {};

template <>
struct IsMemcpyCompatible<
    ::test::bindingsdenylist::ShouldNeverAppearInAnyBinding7>
    : public internal::BoolConstant<
          !HasPadding<::test::bindingsdenylist::
                          ShouldNeverAppearInAnyBinding7>::value &&
          IsMemcpyCompatible<bool>::value> {};

inline zx_status_t Clone(
    const ::test::bindingsdenylist::ShouldNeverAppearInAnyBinding7& value,
    ::test::bindingsdenylist::ShouldNeverAppearInAnyBinding7* result) {
  return ::test::bindingsdenylist::Clone(value, result);
}

template <>
struct Equality<::test::bindingsdenylist::ShouldNeverAppearInAnyBinding7> {
  bool operator()(
      const ::test::bindingsdenylist::ShouldNeverAppearInAnyBinding7& _lhs,
      const ::test::bindingsdenylist::ShouldNeverAppearInAnyBinding7& _rhs)
      const {
    if (!::fidl::Equals(_lhs.a, _rhs.a)) {
      return false;
    }
    return true;
  }
};
template <>
struct IsFidlXUnion<::test::bindingsdenylist::ShouldNeverAppearInAnyBinding6>
    : public std::true_type {};

template <>
struct CodingTraits<::test::bindingsdenylist::ShouldNeverAppearInAnyBinding6>
    : public EncodableCodingTraits<
          ::test::bindingsdenylist::ShouldNeverAppearInAnyBinding6, 24, 16> {};

template <>
struct CodingTraits<
    std::unique_ptr<::test::bindingsdenylist::ShouldNeverAppearInAnyBinding6>> {
  static constexpr size_t inline_size_v1_no_ee = 24;
  static constexpr size_t inline_size_v2 = 16;

  static void Encode(
      Encoder* encoder,
      std::unique_ptr<::test::bindingsdenylist::ShouldNeverAppearInAnyBinding6>*
          value,
      size_t offset,
      cpp17::optional<::fidl::HandleInformation> maybe_handle_info) {
    auto&& p_xunion = *value;
    if (p_xunion) {
      p_xunion->Encode(encoder, offset);
    }
  }

  static void Decode(
      Decoder* _decoder,
      std::unique_ptr<::test::bindingsdenylist::ShouldNeverAppearInAnyBinding6>*
          value,
      size_t offset) {
    fidl_xunion_t* encoded = _decoder->GetPtr<fidl_xunion_t>(offset);
    if (encoded->tag == 0) {
      value->reset(nullptr);
      return;
    }

    value->reset(new ::test::bindingsdenylist::ShouldNeverAppearInAnyBinding6);

    ::test::bindingsdenylist::ShouldNeverAppearInAnyBinding6::Decode(
        _decoder, value->get(), offset);
  }
};

inline zx_status_t Clone(
    const ::test::bindingsdenylist::ShouldNeverAppearInAnyBinding6& value,
    ::test::bindingsdenylist::ShouldNeverAppearInAnyBinding6* result) {
  return ::test::bindingsdenylist::Clone(value, result);
}

template <>
struct Equality<::test::bindingsdenylist::ShouldNeverAppearInAnyBinding6> {
  bool operator()(
      const ::test::bindingsdenylist::ShouldNeverAppearInAnyBinding6& _lhs,
      const ::test::bindingsdenylist::ShouldNeverAppearInAnyBinding6& _rhs)
      const {
    if (_lhs.Ordinal() != _rhs.Ordinal()) {
      return false;
    }

    switch (_lhs.Ordinal()) {
      case static_cast<fidl_xunion_tag_t>(
          ::test::bindingsdenylist::ShouldNeverAppearInAnyBinding6::Tag::
              Invalid):
        return true;
      case ::test::bindingsdenylist::ShouldNeverAppearInAnyBinding6::Tag::kA:
        return ::fidl::Equals(_lhs.a_, _rhs.a_);
      default:
        return ::fidl::Equals(_lhs.unknown_data_, _rhs.unknown_data_);
    }
  }
};
template <>
struct CodingTraits<::test::bindingsdenylist::ShouldNeverAppearInAnyBinding5>
    : public EncodableCodingTraits<
          ::test::bindingsdenylist::ShouldNeverAppearInAnyBinding5, 16, 16> {};

inline zx_status_t Clone(
    const ::test::bindingsdenylist::ShouldNeverAppearInAnyBinding5& _value,
    ::test::bindingsdenylist::ShouldNeverAppearInAnyBinding5* result) {
  return _value.Clone(result);
}
template <>
struct Equality<::test::bindingsdenylist::ShouldNeverAppearInAnyBinding5> {
  bool operator()(
      const ::test::bindingsdenylist::ShouldNeverAppearInAnyBinding5& _lhs,
      const ::test::bindingsdenylist::ShouldNeverAppearInAnyBinding5& _rhs)
      const {
    if (_lhs.has_a()) {
      if (!_rhs.has_a()) {
        return false;
      }
      if (!::fidl::Equals(_lhs.a(), _rhs.a())) {
        return false;
      }
    } else if (_rhs.has_a()) {
      return false;
    }
    return ::fidl::Equals(_lhs.UnknownData(), _rhs.UnknownData());
  }
};
template <>
struct CodingTraits<::test::bindingsdenylist::ShouldNeverAppearInAnyBinding4>
    : public EncodableCodingTraits<
          ::test::bindingsdenylist::ShouldNeverAppearInAnyBinding4, 1, 1> {};

template <>
struct IsMemcpyCompatible<
    ::test::bindingsdenylist::ShouldNeverAppearInAnyBinding4>
    : public internal::BoolConstant<
          !HasPadding<::test::bindingsdenylist::
                          ShouldNeverAppearInAnyBinding4>::value &&
          IsMemcpyCompatible<bool>::value> {};

inline zx_status_t Clone(
    const ::test::bindingsdenylist::ShouldNeverAppearInAnyBinding4& value,
    ::test::bindingsdenylist::ShouldNeverAppearInAnyBinding4* result) {
  return ::test::bindingsdenylist::Clone(value, result);
}

template <>
struct Equality<::test::bindingsdenylist::ShouldNeverAppearInAnyBinding4> {
  bool operator()(
      const ::test::bindingsdenylist::ShouldNeverAppearInAnyBinding4& _lhs,
      const ::test::bindingsdenylist::ShouldNeverAppearInAnyBinding4& _rhs)
      const {
    if (!::fidl::Equals(_lhs.a, _rhs.a)) {
      return false;
    }
    return true;
  }
};
template <>
struct CodingTraits<::test::bindingsdenylist::Allowed_Denied_Response>
    : public EncodableCodingTraits<
          ::test::bindingsdenylist::Allowed_Denied_Response, 48, 40> {};

template <>
struct HasPadding<::test::bindingsdenylist::Allowed_Denied_Response>
    : public std::true_type {};

template <>
struct IsMemcpyCompatible<::test::bindingsdenylist::Allowed_Denied_Response>
    : public internal::BoolConstant<
          !HasPadding<
              ::test::bindingsdenylist::Allowed_Denied_Response>::value &&
          IsMemcpyCompatible<::test::bindingsdenylist::
                                 ShouldNeverAppearInAnyBinding4>::value &&
          IsMemcpyCompatible<::test::bindingsdenylist::
                                 ShouldNeverAppearInAnyBinding5>::value &&
          IsMemcpyCompatible<::test::bindingsdenylist::
                                 ShouldNeverAppearInAnyBinding6>::value> {};

inline zx_status_t Clone(
    const ::test::bindingsdenylist::Allowed_Denied_Response& value,
    ::test::bindingsdenylist::Allowed_Denied_Response* result) {
  return ::test::bindingsdenylist::Clone(value, result);
}

template <>
struct Equality<::test::bindingsdenylist::Allowed_Denied_Response> {
  bool operator()(
      const ::test::bindingsdenylist::Allowed_Denied_Response& _lhs,
      const ::test::bindingsdenylist::Allowed_Denied_Response& _rhs) const {
    if (!::fidl::Equals(_lhs.should_never_appear_in_any_binding_4,
                        _rhs.should_never_appear_in_any_binding_4)) {
      return false;
    }
    if (!::fidl::Equals(_lhs.should_never_appear_in_any_binding_5,
                        _rhs.should_never_appear_in_any_binding_5)) {
      return false;
    }
    if (!::fidl::Equals(_lhs.should_never_appear_in_any_binding_6,
                        _rhs.should_never_appear_in_any_binding_6)) {
      return false;
    }
    return true;
  }
};
template <>
struct IsFidlXUnion<::test::bindingsdenylist::Allowed_Denied_Result>
    : public std::true_type {};

template <>
struct CodingTraits<::test::bindingsdenylist::Allowed_Denied_Result>
    : public EncodableCodingTraits<
          ::test::bindingsdenylist::Allowed_Denied_Result, 24, 16> {};

template <>
struct CodingTraits<
    std::unique_ptr<::test::bindingsdenylist::Allowed_Denied_Result>> {
  static constexpr size_t inline_size_v1_no_ee = 24;
  static constexpr size_t inline_size_v2 = 16;

  static void Encode(
      Encoder* encoder,
      std::unique_ptr<::test::bindingsdenylist::Allowed_Denied_Result>* value,
      size_t offset,
      cpp17::optional<::fidl::HandleInformation> maybe_handle_info) {
    auto&& p_xunion = *value;
    if (p_xunion) {
      p_xunion->Encode(encoder, offset);
    }
  }

  static void Decode(
      Decoder* _decoder,
      std::unique_ptr<::test::bindingsdenylist::Allowed_Denied_Result>* value,
      size_t offset) {
    fidl_xunion_t* encoded = _decoder->GetPtr<fidl_xunion_t>(offset);
    if (encoded->tag == 0) {
      value->reset(nullptr);
      return;
    }

    value->reset(new ::test::bindingsdenylist::Allowed_Denied_Result);

    ::test::bindingsdenylist::Allowed_Denied_Result::Decode(
        _decoder, value->get(), offset);
  }
};

inline zx_status_t Clone(
    const ::test::bindingsdenylist::Allowed_Denied_Result& value,
    ::test::bindingsdenylist::Allowed_Denied_Result* result) {
  return ::test::bindingsdenylist::Clone(value, result);
}

template <>
struct Equality<::test::bindingsdenylist::Allowed_Denied_Result> {
  bool operator()(
      const ::test::bindingsdenylist::Allowed_Denied_Result& _lhs,
      const ::test::bindingsdenylist::Allowed_Denied_Result& _rhs) const {
    if (_lhs.Ordinal() != _rhs.Ordinal()) {
      return false;
    }

    switch (_lhs.Ordinal()) {
      case static_cast<fidl_xunion_tag_t>(
          ::test::bindingsdenylist::Allowed_Denied_Result::Tag::Invalid):
        return true;
      case ::test::bindingsdenylist::Allowed_Denied_Result::Tag::kResponse:
        return ::fidl::Equals(_lhs.response_, _rhs.response_);
      case ::test::bindingsdenylist::Allowed_Denied_Result::Tag::kErr:
        return ::fidl::Equals(_lhs.err_, _rhs.err_);

      default:
        return false;
    }
  }
};
template <>
struct IsFidlXUnion<::test::bindingsdenylist::ShouldNeverAppearInAnyBinding3>
    : public std::true_type {};

template <>
struct CodingTraits<::test::bindingsdenylist::ShouldNeverAppearInAnyBinding3>
    : public EncodableCodingTraits<
          ::test::bindingsdenylist::ShouldNeverAppearInAnyBinding3, 24, 16> {};

template <>
struct CodingTraits<
    std::unique_ptr<::test::bindingsdenylist::ShouldNeverAppearInAnyBinding3>> {
  static constexpr size_t inline_size_v1_no_ee = 24;
  static constexpr size_t inline_size_v2 = 16;

  static void Encode(
      Encoder* encoder,
      std::unique_ptr<::test::bindingsdenylist::ShouldNeverAppearInAnyBinding3>*
          value,
      size_t offset,
      cpp17::optional<::fidl::HandleInformation> maybe_handle_info) {
    auto&& p_xunion = *value;
    if (p_xunion) {
      p_xunion->Encode(encoder, offset);
    }
  }

  static void Decode(
      Decoder* _decoder,
      std::unique_ptr<::test::bindingsdenylist::ShouldNeverAppearInAnyBinding3>*
          value,
      size_t offset) {
    fidl_xunion_t* encoded = _decoder->GetPtr<fidl_xunion_t>(offset);
    if (encoded->tag == 0) {
      value->reset(nullptr);
      return;
    }

    value->reset(new ::test::bindingsdenylist::ShouldNeverAppearInAnyBinding3);

    ::test::bindingsdenylist::ShouldNeverAppearInAnyBinding3::Decode(
        _decoder, value->get(), offset);
  }
};

inline zx_status_t Clone(
    const ::test::bindingsdenylist::ShouldNeverAppearInAnyBinding3& value,
    ::test::bindingsdenylist::ShouldNeverAppearInAnyBinding3* result) {
  return ::test::bindingsdenylist::Clone(value, result);
}

template <>
struct Equality<::test::bindingsdenylist::ShouldNeverAppearInAnyBinding3> {
  bool operator()(
      const ::test::bindingsdenylist::ShouldNeverAppearInAnyBinding3& _lhs,
      const ::test::bindingsdenylist::ShouldNeverAppearInAnyBinding3& _rhs)
      const {
    if (_lhs.Ordinal() != _rhs.Ordinal()) {
      return false;
    }

    switch (_lhs.Ordinal()) {
      case static_cast<fidl_xunion_tag_t>(
          ::test::bindingsdenylist::ShouldNeverAppearInAnyBinding3::Tag::
              Invalid):
        return true;
      case ::test::bindingsdenylist::ShouldNeverAppearInAnyBinding3::Tag::kA:
        return ::fidl::Equals(_lhs.a_, _rhs.a_);
      default:
        return ::fidl::Equals(_lhs.unknown_data_, _rhs.unknown_data_);
    }
  }
};
template <>
struct CodingTraits<::test::bindingsdenylist::ShouldNeverAppearInAnyBinding2>
    : public EncodableCodingTraits<
          ::test::bindingsdenylist::ShouldNeverAppearInAnyBinding2, 16, 16> {};

inline zx_status_t Clone(
    const ::test::bindingsdenylist::ShouldNeverAppearInAnyBinding2& _value,
    ::test::bindingsdenylist::ShouldNeverAppearInAnyBinding2* result) {
  return _value.Clone(result);
}
template <>
struct Equality<::test::bindingsdenylist::ShouldNeverAppearInAnyBinding2> {
  bool operator()(
      const ::test::bindingsdenylist::ShouldNeverAppearInAnyBinding2& _lhs,
      const ::test::bindingsdenylist::ShouldNeverAppearInAnyBinding2& _rhs)
      const {
    if (_lhs.has_a()) {
      if (!_rhs.has_a()) {
        return false;
      }
      if (!::fidl::Equals(_lhs.a(), _rhs.a())) {
        return false;
      }
    } else if (_rhs.has_a()) {
      return false;
    }
    return ::fidl::Equals(_lhs.UnknownData(), _rhs.UnknownData());
  }
};
template <>
struct CodingTraits<::test::bindingsdenylist::ShouldNeverAppearInAnyBinding1>
    : public EncodableCodingTraits<
          ::test::bindingsdenylist::ShouldNeverAppearInAnyBinding1, 1, 1> {};

template <>
struct IsMemcpyCompatible<
    ::test::bindingsdenylist::ShouldNeverAppearInAnyBinding1>
    : public internal::BoolConstant<
          !HasPadding<::test::bindingsdenylist::
                          ShouldNeverAppearInAnyBinding1>::value &&
          IsMemcpyCompatible<bool>::value> {};

inline zx_status_t Clone(
    const ::test::bindingsdenylist::ShouldNeverAppearInAnyBinding1& value,
    ::test::bindingsdenylist::ShouldNeverAppearInAnyBinding1* result) {
  return ::test::bindingsdenylist::Clone(value, result);
}

template <>
struct Equality<::test::bindingsdenylist::ShouldNeverAppearInAnyBinding1> {
  bool operator()(
      const ::test::bindingsdenylist::ShouldNeverAppearInAnyBinding1& _lhs,
      const ::test::bindingsdenylist::ShouldNeverAppearInAnyBinding1& _rhs)
      const {
    if (!::fidl::Equals(_lhs.a, _rhs.a)) {
      return false;
    }
    return true;
  }
};
template <>
struct CodingTraits<
    ::test::bindingsdenylist::MemberOnlyAppearsInImportingLibrary>
    : public EncodableCodingTraits<
          ::test::bindingsdenylist::MemberOnlyAppearsInImportingLibrary, 1, 1> {
};

template <>
struct IsMemcpyCompatible<
    ::test::bindingsdenylist::MemberOnlyAppearsInImportingLibrary>
    : public internal::BoolConstant<
          !HasPadding<::test::bindingsdenylist::
                          MemberOnlyAppearsInImportingLibrary>::value &&
          IsMemcpyCompatible<bool>::value> {};

inline zx_status_t Clone(
    const ::test::bindingsdenylist::MemberOnlyAppearsInImportingLibrary& value,
    ::test::bindingsdenylist::MemberOnlyAppearsInImportingLibrary* result) {
  return ::test::bindingsdenylist::Clone(value, result);
}

template <>
struct Equality<::test::bindingsdenylist::MemberOnlyAppearsInImportingLibrary> {
  bool operator()(
      const ::test::bindingsdenylist::MemberOnlyAppearsInImportingLibrary& _lhs,
      const ::test::bindingsdenylist::MemberOnlyAppearsInImportingLibrary& _rhs)
      const {
    if (!::fidl::Equals(_lhs.a, _rhs.a)) {
      return false;
    }
    return true;
  }
};
template <>
struct CodingTraits<::test::bindingsdenylist::OnlyAppearsInImportingLibrary>
    : public EncodableCodingTraits<
          ::test::bindingsdenylist::OnlyAppearsInImportingLibrary, 1, 1> {};

template <>
struct IsMemcpyCompatible<
    ::test::bindingsdenylist::OnlyAppearsInImportingLibrary>
    : public internal::BoolConstant<
          !HasPadding<
              ::test::bindingsdenylist::OnlyAppearsInImportingLibrary>::value &&
          IsMemcpyCompatible<::test::bindingsdenylist::
                                 MemberOnlyAppearsInImportingLibrary>::value> {
};

inline zx_status_t Clone(
    const ::test::bindingsdenylist::OnlyAppearsInImportingLibrary& value,
    ::test::bindingsdenylist::OnlyAppearsInImportingLibrary* result) {
  return ::test::bindingsdenylist::Clone(value, result);
}

template <>
struct Equality<::test::bindingsdenylist::OnlyAppearsInImportingLibrary> {
  bool operator()(
      const ::test::bindingsdenylist::OnlyAppearsInImportingLibrary& _lhs,
      const ::test::bindingsdenylist::OnlyAppearsInImportingLibrary& _rhs)
      const {
    if (!::fidl::Equals(_lhs.member_only_appears_in_importing_library,
                        _rhs.member_only_appears_in_importing_library)) {
      return false;
    }
    return true;
  }
};
template <>
struct CodingTraits<
    ::test::bindingsdenylist::DenyEachBinding_OnlyDenySyzkaller_Response>
    : public EncodableCodingTraits<
          ::test::bindingsdenylist::DenyEachBinding_OnlyDenySyzkaller_Response,
          4, 4> {};

template <>
struct IsMemcpyCompatible<
    ::test::bindingsdenylist::DenyEachBinding_OnlyDenySyzkaller_Response>
    : public internal::BoolConstant<
          !HasPadding<::test::bindingsdenylist::
                          DenyEachBinding_OnlyDenySyzkaller_Response>::value &&
          IsMemcpyCompatible<int32_t>::value> {};

inline zx_status_t Clone(
    const ::test::bindingsdenylist::DenyEachBinding_OnlyDenySyzkaller_Response&
        value,
    ::test::bindingsdenylist::DenyEachBinding_OnlyDenySyzkaller_Response*
        result) {
  return ::test::bindingsdenylist::Clone(value, result);
}

template <>
struct Equality<
    ::test::bindingsdenylist::DenyEachBinding_OnlyDenySyzkaller_Response> {
  bool operator()(const ::test::bindingsdenylist::
                      DenyEachBinding_OnlyDenySyzkaller_Response& _lhs,
                  const ::test::bindingsdenylist::
                      DenyEachBinding_OnlyDenySyzkaller_Response& _rhs) const {
    if (!::fidl::Equals(_lhs.b, _rhs.b)) {
      return false;
    }
    return true;
  }
};
template <>
struct IsFidlXUnion<
    ::test::bindingsdenylist::DenyEachBinding_OnlyDenySyzkaller_Result>
    : public std::true_type {};

template <>
struct CodingTraits<
    ::test::bindingsdenylist::DenyEachBinding_OnlyDenySyzkaller_Result>
    : public EncodableCodingTraits<
          ::test::bindingsdenylist::DenyEachBinding_OnlyDenySyzkaller_Result,
          24, 16> {};

template <>
struct CodingTraits<std::unique_ptr<
    ::test::bindingsdenylist::DenyEachBinding_OnlyDenySyzkaller_Result>> {
  static constexpr size_t inline_size_v1_no_ee = 24;
  static constexpr size_t inline_size_v2 = 16;

  static void Encode(
      Encoder* encoder,
      std::unique_ptr<
          ::test::bindingsdenylist::DenyEachBinding_OnlyDenySyzkaller_Result>*
          value,
      size_t offset,
      cpp17::optional<::fidl::HandleInformation> maybe_handle_info) {
    auto&& p_xunion = *value;
    if (p_xunion) {
      p_xunion->Encode(encoder, offset);
    }
  }

  static void Decode(
      Decoder* _decoder,
      std::unique_ptr<
          ::test::bindingsdenylist::DenyEachBinding_OnlyDenySyzkaller_Result>*
          value,
      size_t offset) {
    fidl_xunion_t* encoded = _decoder->GetPtr<fidl_xunion_t>(offset);
    if (encoded->tag == 0) {
      value->reset(nullptr);
      return;
    }

    value->reset(
        new ::test::bindingsdenylist::DenyEachBinding_OnlyDenySyzkaller_Result);

    ::test::bindingsdenylist::DenyEachBinding_OnlyDenySyzkaller_Result::Decode(
        _decoder, value->get(), offset);
  }
};

inline zx_status_t Clone(
    const ::test::bindingsdenylist::DenyEachBinding_OnlyDenySyzkaller_Result&
        value,
    ::test::bindingsdenylist::DenyEachBinding_OnlyDenySyzkaller_Result*
        result) {
  return ::test::bindingsdenylist::Clone(value, result);
}

template <>
struct Equality<
    ::test::bindingsdenylist::DenyEachBinding_OnlyDenySyzkaller_Result> {
  bool operator()(
      const ::test::bindingsdenylist::DenyEachBinding_OnlyDenySyzkaller_Result&
          _lhs,
      const ::test::bindingsdenylist::DenyEachBinding_OnlyDenySyzkaller_Result&
          _rhs) const {
    if (_lhs.Ordinal() != _rhs.Ordinal()) {
      return false;
    }

    switch (_lhs.Ordinal()) {
      case static_cast<fidl_xunion_tag_t>(
          ::test::bindingsdenylist::DenyEachBinding_OnlyDenySyzkaller_Result::
              Tag::Invalid):
        return true;
      case ::test::bindingsdenylist::DenyEachBinding_OnlyDenySyzkaller_Result::
          Tag::kResponse:
        return ::fidl::Equals(_lhs.response_, _rhs.response_);
      case ::test::bindingsdenylist::DenyEachBinding_OnlyDenySyzkaller_Result::
          Tag::kErr:
        return ::fidl::Equals(_lhs.err_, _rhs.err_);

      default:
        return false;
    }
  }
};
template <>
struct CodingTraits<
    ::test::bindingsdenylist::DenyEachBinding_OnlyDenyRust_Response>
    : public EncodableCodingTraits<
          ::test::bindingsdenylist::DenyEachBinding_OnlyDenyRust_Response, 4,
          4> {};

template <>
struct IsMemcpyCompatible<
    ::test::bindingsdenylist::DenyEachBinding_OnlyDenyRust_Response>
    : public internal::BoolConstant<
          !HasPadding<::test::bindingsdenylist::
                          DenyEachBinding_OnlyDenyRust_Response>::value &&
          IsMemcpyCompatible<int32_t>::value> {};

inline zx_status_t Clone(
    const ::test::bindingsdenylist::DenyEachBinding_OnlyDenyRust_Response&
        value,
    ::test::bindingsdenylist::DenyEachBinding_OnlyDenyRust_Response* result) {
  return ::test::bindingsdenylist::Clone(value, result);
}

template <>
struct Equality<
    ::test::bindingsdenylist::DenyEachBinding_OnlyDenyRust_Response> {
  bool operator()(
      const ::test::bindingsdenylist::DenyEachBinding_OnlyDenyRust_Response&
          _lhs,
      const ::test::bindingsdenylist::DenyEachBinding_OnlyDenyRust_Response&
          _rhs) const {
    if (!::fidl::Equals(_lhs.b, _rhs.b)) {
      return false;
    }
    return true;
  }
};
template <>
struct IsFidlXUnion<
    ::test::bindingsdenylist::DenyEachBinding_OnlyDenyRust_Result>
    : public std::true_type {};

template <>
struct CodingTraits<
    ::test::bindingsdenylist::DenyEachBinding_OnlyDenyRust_Result>
    : public EncodableCodingTraits<
          ::test::bindingsdenylist::DenyEachBinding_OnlyDenyRust_Result, 24,
          16> {};

template <>
struct CodingTraits<std::unique_ptr<
    ::test::bindingsdenylist::DenyEachBinding_OnlyDenyRust_Result>> {
  static constexpr size_t inline_size_v1_no_ee = 24;
  static constexpr size_t inline_size_v2 = 16;

  static void Encode(
      Encoder* encoder,
      std::unique_ptr<
          ::test::bindingsdenylist::DenyEachBinding_OnlyDenyRust_Result>* value,
      size_t offset,
      cpp17::optional<::fidl::HandleInformation> maybe_handle_info) {
    auto&& p_xunion = *value;
    if (p_xunion) {
      p_xunion->Encode(encoder, offset);
    }
  }

  static void Decode(
      Decoder* _decoder,
      std::unique_ptr<
          ::test::bindingsdenylist::DenyEachBinding_OnlyDenyRust_Result>* value,
      size_t offset) {
    fidl_xunion_t* encoded = _decoder->GetPtr<fidl_xunion_t>(offset);
    if (encoded->tag == 0) {
      value->reset(nullptr);
      return;
    }

    value->reset(
        new ::test::bindingsdenylist::DenyEachBinding_OnlyDenyRust_Result);

    ::test::bindingsdenylist::DenyEachBinding_OnlyDenyRust_Result::Decode(
        _decoder, value->get(), offset);
  }
};

inline zx_status_t Clone(
    const ::test::bindingsdenylist::DenyEachBinding_OnlyDenyRust_Result& value,
    ::test::bindingsdenylist::DenyEachBinding_OnlyDenyRust_Result* result) {
  return ::test::bindingsdenylist::Clone(value, result);
}

template <>
struct Equality<::test::bindingsdenylist::DenyEachBinding_OnlyDenyRust_Result> {
  bool operator()(
      const ::test::bindingsdenylist::DenyEachBinding_OnlyDenyRust_Result& _lhs,
      const ::test::bindingsdenylist::DenyEachBinding_OnlyDenyRust_Result& _rhs)
      const {
    if (_lhs.Ordinal() != _rhs.Ordinal()) {
      return false;
    }

    switch (_lhs.Ordinal()) {
      case static_cast<fidl_xunion_tag_t>(
          ::test::bindingsdenylist::DenyEachBinding_OnlyDenyRust_Result::Tag::
              Invalid):
        return true;
      case ::test::bindingsdenylist::DenyEachBinding_OnlyDenyRust_Result::Tag::
          kResponse:
        return ::fidl::Equals(_lhs.response_, _rhs.response_);
      case ::test::bindingsdenylist::DenyEachBinding_OnlyDenyRust_Result::Tag::
          kErr:
        return ::fidl::Equals(_lhs.err_, _rhs.err_);

      default:
        return false;
    }
  }
};
template <>
struct CodingTraits<
    ::test::bindingsdenylist::DenyEachBinding_OnlyDenyLibfuzzer_Response>
    : public EncodableCodingTraits<
          ::test::bindingsdenylist::DenyEachBinding_OnlyDenyLibfuzzer_Response,
          4, 4> {};

template <>
struct IsMemcpyCompatible<
    ::test::bindingsdenylist::DenyEachBinding_OnlyDenyLibfuzzer_Response>
    : public internal::BoolConstant<
          !HasPadding<::test::bindingsdenylist::
                          DenyEachBinding_OnlyDenyLibfuzzer_Response>::value &&
          IsMemcpyCompatible<int32_t>::value> {};

inline zx_status_t Clone(
    const ::test::bindingsdenylist::DenyEachBinding_OnlyDenyLibfuzzer_Response&
        value,
    ::test::bindingsdenylist::DenyEachBinding_OnlyDenyLibfuzzer_Response*
        result) {
  return ::test::bindingsdenylist::Clone(value, result);
}

template <>
struct Equality<
    ::test::bindingsdenylist::DenyEachBinding_OnlyDenyLibfuzzer_Response> {
  bool operator()(const ::test::bindingsdenylist::
                      DenyEachBinding_OnlyDenyLibfuzzer_Response& _lhs,
                  const ::test::bindingsdenylist::
                      DenyEachBinding_OnlyDenyLibfuzzer_Response& _rhs) const {
    if (!::fidl::Equals(_lhs.b, _rhs.b)) {
      return false;
    }
    return true;
  }
};
template <>
struct IsFidlXUnion<
    ::test::bindingsdenylist::DenyEachBinding_OnlyDenyLibfuzzer_Result>
    : public std::true_type {};

template <>
struct CodingTraits<
    ::test::bindingsdenylist::DenyEachBinding_OnlyDenyLibfuzzer_Result>
    : public EncodableCodingTraits<
          ::test::bindingsdenylist::DenyEachBinding_OnlyDenyLibfuzzer_Result,
          24, 16> {};

template <>
struct CodingTraits<std::unique_ptr<
    ::test::bindingsdenylist::DenyEachBinding_OnlyDenyLibfuzzer_Result>> {
  static constexpr size_t inline_size_v1_no_ee = 24;
  static constexpr size_t inline_size_v2 = 16;

  static void Encode(
      Encoder* encoder,
      std::unique_ptr<
          ::test::bindingsdenylist::DenyEachBinding_OnlyDenyLibfuzzer_Result>*
          value,
      size_t offset,
      cpp17::optional<::fidl::HandleInformation> maybe_handle_info) {
    auto&& p_xunion = *value;
    if (p_xunion) {
      p_xunion->Encode(encoder, offset);
    }
  }

  static void Decode(
      Decoder* _decoder,
      std::unique_ptr<
          ::test::bindingsdenylist::DenyEachBinding_OnlyDenyLibfuzzer_Result>*
          value,
      size_t offset) {
    fidl_xunion_t* encoded = _decoder->GetPtr<fidl_xunion_t>(offset);
    if (encoded->tag == 0) {
      value->reset(nullptr);
      return;
    }

    value->reset(
        new ::test::bindingsdenylist::DenyEachBinding_OnlyDenyLibfuzzer_Result);

    ::test::bindingsdenylist::DenyEachBinding_OnlyDenyLibfuzzer_Result::Decode(
        _decoder, value->get(), offset);
  }
};

inline zx_status_t Clone(
    const ::test::bindingsdenylist::DenyEachBinding_OnlyDenyLibfuzzer_Result&
        value,
    ::test::bindingsdenylist::DenyEachBinding_OnlyDenyLibfuzzer_Result*
        result) {
  return ::test::bindingsdenylist::Clone(value, result);
}

template <>
struct Equality<
    ::test::bindingsdenylist::DenyEachBinding_OnlyDenyLibfuzzer_Result> {
  bool operator()(
      const ::test::bindingsdenylist::DenyEachBinding_OnlyDenyLibfuzzer_Result&
          _lhs,
      const ::test::bindingsdenylist::DenyEachBinding_OnlyDenyLibfuzzer_Result&
          _rhs) const {
    if (_lhs.Ordinal() != _rhs.Ordinal()) {
      return false;
    }

    switch (_lhs.Ordinal()) {
      case static_cast<fidl_xunion_tag_t>(
          ::test::bindingsdenylist::DenyEachBinding_OnlyDenyLibfuzzer_Result::
              Tag::Invalid):
        return true;
      case ::test::bindingsdenylist::DenyEachBinding_OnlyDenyLibfuzzer_Result::
          Tag::kResponse:
        return ::fidl::Equals(_lhs.response_, _rhs.response_);
      case ::test::bindingsdenylist::DenyEachBinding_OnlyDenyLibfuzzer_Result::
          Tag::kErr:
        return ::fidl::Equals(_lhs.err_, _rhs.err_);

      default:
        return false;
    }
  }
};
template <>
struct CodingTraits<
    ::test::bindingsdenylist::DenyEachBinding_OnlyDenyGo_Response>
    : public EncodableCodingTraits<
          ::test::bindingsdenylist::DenyEachBinding_OnlyDenyGo_Response, 4, 4> {
};

template <>
struct IsMemcpyCompatible<
    ::test::bindingsdenylist::DenyEachBinding_OnlyDenyGo_Response>
    : public internal::BoolConstant<
          !HasPadding<::test::bindingsdenylist::
                          DenyEachBinding_OnlyDenyGo_Response>::value &&
          IsMemcpyCompatible<int32_t>::value> {};

inline zx_status_t Clone(
    const ::test::bindingsdenylist::DenyEachBinding_OnlyDenyGo_Response& value,
    ::test::bindingsdenylist::DenyEachBinding_OnlyDenyGo_Response* result) {
  return ::test::bindingsdenylist::Clone(value, result);
}

template <>
struct Equality<::test::bindingsdenylist::DenyEachBinding_OnlyDenyGo_Response> {
  bool operator()(
      const ::test::bindingsdenylist::DenyEachBinding_OnlyDenyGo_Response& _lhs,
      const ::test::bindingsdenylist::DenyEachBinding_OnlyDenyGo_Response& _rhs)
      const {
    if (!::fidl::Equals(_lhs.b, _rhs.b)) {
      return false;
    }
    return true;
  }
};
template <>
struct IsFidlXUnion<::test::bindingsdenylist::DenyEachBinding_OnlyDenyGo_Result>
    : public std::true_type {};

template <>
struct CodingTraits<::test::bindingsdenylist::DenyEachBinding_OnlyDenyGo_Result>
    : public EncodableCodingTraits<
          ::test::bindingsdenylist::DenyEachBinding_OnlyDenyGo_Result, 24, 16> {
};

template <>
struct CodingTraits<std::unique_ptr<
    ::test::bindingsdenylist::DenyEachBinding_OnlyDenyGo_Result>> {
  static constexpr size_t inline_size_v1_no_ee = 24;
  static constexpr size_t inline_size_v2 = 16;

  static void Encode(
      Encoder* encoder,
      std::unique_ptr<
          ::test::bindingsdenylist::DenyEachBinding_OnlyDenyGo_Result>* value,
      size_t offset,
      cpp17::optional<::fidl::HandleInformation> maybe_handle_info) {
    auto&& p_xunion = *value;
    if (p_xunion) {
      p_xunion->Encode(encoder, offset);
    }
  }

  static void Decode(
      Decoder* _decoder,
      std::unique_ptr<
          ::test::bindingsdenylist::DenyEachBinding_OnlyDenyGo_Result>* value,
      size_t offset) {
    fidl_xunion_t* encoded = _decoder->GetPtr<fidl_xunion_t>(offset);
    if (encoded->tag == 0) {
      value->reset(nullptr);
      return;
    }

    value->reset(
        new ::test::bindingsdenylist::DenyEachBinding_OnlyDenyGo_Result);

    ::test::bindingsdenylist::DenyEachBinding_OnlyDenyGo_Result::Decode(
        _decoder, value->get(), offset);
  }
};

inline zx_status_t Clone(
    const ::test::bindingsdenylist::DenyEachBinding_OnlyDenyGo_Result& value,
    ::test::bindingsdenylist::DenyEachBinding_OnlyDenyGo_Result* result) {
  return ::test::bindingsdenylist::Clone(value, result);
}

template <>
struct Equality<::test::bindingsdenylist::DenyEachBinding_OnlyDenyGo_Result> {
  bool operator()(
      const ::test::bindingsdenylist::DenyEachBinding_OnlyDenyGo_Result& _lhs,
      const ::test::bindingsdenylist::DenyEachBinding_OnlyDenyGo_Result& _rhs)
      const {
    if (_lhs.Ordinal() != _rhs.Ordinal()) {
      return false;
    }

    switch (_lhs.Ordinal()) {
      case static_cast<fidl_xunion_tag_t>(
          ::test::bindingsdenylist::DenyEachBinding_OnlyDenyGo_Result::Tag::
              Invalid):
        return true;
      case ::test::bindingsdenylist::DenyEachBinding_OnlyDenyGo_Result::Tag::
          kResponse:
        return ::fidl::Equals(_lhs.response_, _rhs.response_);
      case ::test::bindingsdenylist::DenyEachBinding_OnlyDenyGo_Result::Tag::
          kErr:
        return ::fidl::Equals(_lhs.err_, _rhs.err_);

      default:
        return false;
    }
  }
};
template <>
struct CodingTraits<
    ::test::bindingsdenylist::DenyEachBinding_OnlyDenyDart_Response>
    : public EncodableCodingTraits<
          ::test::bindingsdenylist::DenyEachBinding_OnlyDenyDart_Response, 4,
          4> {};

template <>
struct IsMemcpyCompatible<
    ::test::bindingsdenylist::DenyEachBinding_OnlyDenyDart_Response>
    : public internal::BoolConstant<
          !HasPadding<::test::bindingsdenylist::
                          DenyEachBinding_OnlyDenyDart_Response>::value &&
          IsMemcpyCompatible<int32_t>::value> {};

inline zx_status_t Clone(
    const ::test::bindingsdenylist::DenyEachBinding_OnlyDenyDart_Response&
        value,
    ::test::bindingsdenylist::DenyEachBinding_OnlyDenyDart_Response* result) {
  return ::test::bindingsdenylist::Clone(value, result);
}

template <>
struct Equality<
    ::test::bindingsdenylist::DenyEachBinding_OnlyDenyDart_Response> {
  bool operator()(
      const ::test::bindingsdenylist::DenyEachBinding_OnlyDenyDart_Response&
          _lhs,
      const ::test::bindingsdenylist::DenyEachBinding_OnlyDenyDart_Response&
          _rhs) const {
    if (!::fidl::Equals(_lhs.b, _rhs.b)) {
      return false;
    }
    return true;
  }
};
template <>
struct IsFidlXUnion<
    ::test::bindingsdenylist::DenyEachBinding_OnlyDenyDart_Result>
    : public std::true_type {};

template <>
struct CodingTraits<
    ::test::bindingsdenylist::DenyEachBinding_OnlyDenyDart_Result>
    : public EncodableCodingTraits<
          ::test::bindingsdenylist::DenyEachBinding_OnlyDenyDart_Result, 24,
          16> {};

template <>
struct CodingTraits<std::unique_ptr<
    ::test::bindingsdenylist::DenyEachBinding_OnlyDenyDart_Result>> {
  static constexpr size_t inline_size_v1_no_ee = 24;
  static constexpr size_t inline_size_v2 = 16;

  static void Encode(
      Encoder* encoder,
      std::unique_ptr<
          ::test::bindingsdenylist::DenyEachBinding_OnlyDenyDart_Result>* value,
      size_t offset,
      cpp17::optional<::fidl::HandleInformation> maybe_handle_info) {
    auto&& p_xunion = *value;
    if (p_xunion) {
      p_xunion->Encode(encoder, offset);
    }
  }

  static void Decode(
      Decoder* _decoder,
      std::unique_ptr<
          ::test::bindingsdenylist::DenyEachBinding_OnlyDenyDart_Result>* value,
      size_t offset) {
    fidl_xunion_t* encoded = _decoder->GetPtr<fidl_xunion_t>(offset);
    if (encoded->tag == 0) {
      value->reset(nullptr);
      return;
    }

    value->reset(
        new ::test::bindingsdenylist::DenyEachBinding_OnlyDenyDart_Result);

    ::test::bindingsdenylist::DenyEachBinding_OnlyDenyDart_Result::Decode(
        _decoder, value->get(), offset);
  }
};

inline zx_status_t Clone(
    const ::test::bindingsdenylist::DenyEachBinding_OnlyDenyDart_Result& value,
    ::test::bindingsdenylist::DenyEachBinding_OnlyDenyDart_Result* result) {
  return ::test::bindingsdenylist::Clone(value, result);
}

template <>
struct Equality<::test::bindingsdenylist::DenyEachBinding_OnlyDenyDart_Result> {
  bool operator()(
      const ::test::bindingsdenylist::DenyEachBinding_OnlyDenyDart_Result& _lhs,
      const ::test::bindingsdenylist::DenyEachBinding_OnlyDenyDart_Result& _rhs)
      const {
    if (_lhs.Ordinal() != _rhs.Ordinal()) {
      return false;
    }

    switch (_lhs.Ordinal()) {
      case static_cast<fidl_xunion_tag_t>(
          ::test::bindingsdenylist::DenyEachBinding_OnlyDenyDart_Result::Tag::
              Invalid):
        return true;
      case ::test::bindingsdenylist::DenyEachBinding_OnlyDenyDart_Result::Tag::
          kResponse:
        return ::fidl::Equals(_lhs.response_, _rhs.response_);
      case ::test::bindingsdenylist::DenyEachBinding_OnlyDenyDart_Result::Tag::
          kErr:
        return ::fidl::Equals(_lhs.err_, _rhs.err_);

      default:
        return false;
    }
  }
};
template <>
struct CodingTraits<
    ::test::bindingsdenylist::DenyEachBinding_OnlyDenyCpp_Response>
    : public EncodableCodingTraits<
          ::test::bindingsdenylist::DenyEachBinding_OnlyDenyCpp_Response, 4,
          4> {};

template <>
struct IsMemcpyCompatible<
    ::test::bindingsdenylist::DenyEachBinding_OnlyDenyCpp_Response>
    : public internal::BoolConstant<
          !HasPadding<::test::bindingsdenylist::
                          DenyEachBinding_OnlyDenyCpp_Response>::value &&
          IsMemcpyCompatible<int32_t>::value> {};

inline zx_status_t Clone(
    const ::test::bindingsdenylist::DenyEachBinding_OnlyDenyCpp_Response& value,
    ::test::bindingsdenylist::DenyEachBinding_OnlyDenyCpp_Response* result) {
  return ::test::bindingsdenylist::Clone(value, result);
}

template <>
struct Equality<
    ::test::bindingsdenylist::DenyEachBinding_OnlyDenyCpp_Response> {
  bool operator()(
      const ::test::bindingsdenylist::DenyEachBinding_OnlyDenyCpp_Response&
          _lhs,
      const ::test::bindingsdenylist::DenyEachBinding_OnlyDenyCpp_Response&
          _rhs) const {
    if (!::fidl::Equals(_lhs.b, _rhs.b)) {
      return false;
    }
    return true;
  }
};
template <>
struct IsFidlXUnion<
    ::test::bindingsdenylist::DenyEachBinding_OnlyDenyCpp_Result>
    : public std::true_type {};

template <>
struct CodingTraits<
    ::test::bindingsdenylist::DenyEachBinding_OnlyDenyCpp_Result>
    : public EncodableCodingTraits<
          ::test::bindingsdenylist::DenyEachBinding_OnlyDenyCpp_Result, 24,
          16> {};

template <>
struct CodingTraits<std::unique_ptr<
    ::test::bindingsdenylist::DenyEachBinding_OnlyDenyCpp_Result>> {
  static constexpr size_t inline_size_v1_no_ee = 24;
  static constexpr size_t inline_size_v2 = 16;

  static void Encode(
      Encoder* encoder,
      std::unique_ptr<
          ::test::bindingsdenylist::DenyEachBinding_OnlyDenyCpp_Result>* value,
      size_t offset,
      cpp17::optional<::fidl::HandleInformation> maybe_handle_info) {
    auto&& p_xunion = *value;
    if (p_xunion) {
      p_xunion->Encode(encoder, offset);
    }
  }

  static void Decode(
      Decoder* _decoder,
      std::unique_ptr<
          ::test::bindingsdenylist::DenyEachBinding_OnlyDenyCpp_Result>* value,
      size_t offset) {
    fidl_xunion_t* encoded = _decoder->GetPtr<fidl_xunion_t>(offset);
    if (encoded->tag == 0) {
      value->reset(nullptr);
      return;
    }

    value->reset(
        new ::test::bindingsdenylist::DenyEachBinding_OnlyDenyCpp_Result);

    ::test::bindingsdenylist::DenyEachBinding_OnlyDenyCpp_Result::Decode(
        _decoder, value->get(), offset);
  }
};

inline zx_status_t Clone(
    const ::test::bindingsdenylist::DenyEachBinding_OnlyDenyCpp_Result& value,
    ::test::bindingsdenylist::DenyEachBinding_OnlyDenyCpp_Result* result) {
  return ::test::bindingsdenylist::Clone(value, result);
}

template <>
struct Equality<::test::bindingsdenylist::DenyEachBinding_OnlyDenyCpp_Result> {
  bool operator()(
      const ::test::bindingsdenylist::DenyEachBinding_OnlyDenyCpp_Result& _lhs,
      const ::test::bindingsdenylist::DenyEachBinding_OnlyDenyCpp_Result& _rhs)
      const {
    if (_lhs.Ordinal() != _rhs.Ordinal()) {
      return false;
    }

    switch (_lhs.Ordinal()) {
      case static_cast<fidl_xunion_tag_t>(
          ::test::bindingsdenylist::DenyEachBinding_OnlyDenyCpp_Result::Tag::
              Invalid):
        return true;
      case ::test::bindingsdenylist::DenyEachBinding_OnlyDenyCpp_Result::Tag::
          kResponse:
        return ::fidl::Equals(_lhs.response_, _rhs.response_);
      case ::test::bindingsdenylist::DenyEachBinding_OnlyDenyCpp_Result::Tag::
          kErr:
        return ::fidl::Equals(_lhs.err_, _rhs.err_);

      default:
        return false;
    }
  }
};

//
// Proxies and stubs declarations
//
}  // namespace fidl
namespace test {
namespace bindingsdenylist {
#ifdef __Fuchsia__

using ImportsSameNameContextPtr = ::fidl::InterfacePtr<ImportsSameNameContext>;
class ImportsSameNameContext_Proxy;
class ImportsSameNameContext_Stub;
class ImportsSameNameContext_EventSender;
class ImportsSameNameContext_Sync;
using ImportsSameNameContextSyncPtr =
    ::fidl::SynchronousInterfacePtr<ImportsSameNameContext>;
class ImportsSameNameContext_SyncProxy;

namespace internal {
constexpr uint64_t kImportsSameNameContext_Unattributed_Ordinal =
    0x698380acfd29e8flu;
constexpr uint64_t
    kImportsSameNameContext_AlwaysAppearsInImportingLibrary_Ordinal =
        0x2874096c521236f8lu;
}  // namespace internal
#endif  // __Fuchsia__

#ifdef __Fuchsia__

using AllowedPtr = ::fidl::InterfacePtr<Allowed>;
class Allowed_Proxy;
class Allowed_Stub;
class Allowed_EventSender;
class Allowed_Sync;
using AllowedSyncPtr = ::fidl::SynchronousInterfacePtr<Allowed>;
class Allowed_SyncProxy;

#endif  // __Fuchsia__

#ifdef __Fuchsia__

using OnlyLibfuzzerAndDepsPtr = ::fidl::InterfacePtr<OnlyLibfuzzerAndDeps>;
class OnlyLibfuzzerAndDeps_Proxy;
class OnlyLibfuzzerAndDeps_Stub;
class OnlyLibfuzzerAndDeps_EventSender;
class OnlyLibfuzzerAndDeps_Sync;
using OnlyLibfuzzerAndDepsSyncPtr =
    ::fidl::SynchronousInterfacePtr<OnlyLibfuzzerAndDeps>;
class OnlyLibfuzzerAndDeps_SyncProxy;

namespace internal {
constexpr uint64_t
    kOnlyLibfuzzerAndDeps_LibfuzzerNeedsNonemptyProtocol_Ordinal =
        0x2081e7454e06d536lu;
}  // namespace internal
#endif  // __Fuchsia__

#ifdef __Fuchsia__
class OnlyHlcpp;
#endif  // __Fuchsia__

#ifdef __Fuchsia__

using OnlyCppAndDepsPtr = ::fidl::InterfacePtr<OnlyCppAndDeps>;
class OnlyCppAndDeps_Proxy;
class OnlyCppAndDeps_Stub;
class OnlyCppAndDeps_EventSender;
class OnlyCppAndDeps_Sync;
using OnlyCppAndDepsSyncPtr = ::fidl::SynchronousInterfacePtr<OnlyCppAndDeps>;
class OnlyCppAndDeps_SyncProxy;

#endif  // __Fuchsia__

#ifdef __Fuchsia__

using DenyEachBindingPtr = ::fidl::InterfacePtr<DenyEachBinding>;
class DenyEachBinding_Proxy;
class DenyEachBinding_Stub;
class DenyEachBinding_EventSender;
class DenyEachBinding_Sync;
using DenyEachBindingSyncPtr = ::fidl::SynchronousInterfacePtr<DenyEachBinding>;
class DenyEachBinding_SyncProxy;

namespace internal {
constexpr uint64_t kDenyEachBinding_OnlyDenyDart_Ordinal = 0x75384066a26d87d7lu;
constexpr uint64_t kDenyEachBinding_OnlyDenyGo_Ordinal = 0x657655b981478d99lu;
constexpr uint64_t kDenyEachBinding_OnlyDenyLibfuzzer_Ordinal =
    0x1e4f89c329617b1elu;
constexpr uint64_t kDenyEachBinding_OnlyDenyRust_Ordinal = 0x339f67244edd5cb6lu;
constexpr uint64_t kDenyEachBinding_OnlyDenySyzkaller_Ordinal =
    0x202ee614a749e98alu;
}  // namespace internal
#endif  // __Fuchsia__

#ifdef __Fuchsia__

class ImportsSameNameContext {
 public:
  using Proxy_ = ::test::bindingsdenylist::ImportsSameNameContext_Proxy;
  using Stub_ = ::test::bindingsdenylist::ImportsSameNameContext_Stub;
  using EventSender_ =
      ::test::bindingsdenylist::ImportsSameNameContext_EventSender;
  using Sync_ = ::test::bindingsdenylist::ImportsSameNameContext_Sync;
  virtual ~ImportsSameNameContext();

  virtual void Unattributed() = 0;

  virtual void AlwaysAppearsInImportingLibrary() = 0;
};

class ImportsSameNameContext_RequestDecoder {
 public:
  ImportsSameNameContext_RequestDecoder() = default;
  virtual ~ImportsSameNameContext_RequestDecoder() = default;
  static const fidl_type_t* GetType(uint64_t ordinal, bool* out_needs_response);
  virtual void Unattributed() = 0;
  virtual void AlwaysAppearsInImportingLibrary() = 0;
};

class ImportsSameNameContext_ResponseDecoder {
 public:
  ImportsSameNameContext_ResponseDecoder() = default;
  virtual ~ImportsSameNameContext_ResponseDecoder() = default;
  static const fidl_type_t* GetType(uint64_t ordinal);
};

class ImportsSameNameContext_EventSender {
 public:
  virtual ~ImportsSameNameContext_EventSender();
};

class ImportsSameNameContext_Sync {
 public:
  using Proxy_ = ::test::bindingsdenylist::ImportsSameNameContext_SyncProxy;
  virtual ~ImportsSameNameContext_Sync();
  virtual zx_status_t Unattributed() = 0;
  virtual zx_status_t AlwaysAppearsInImportingLibrary() = 0;
};

class ImportsSameNameContext_Proxy final : public ::fidl::internal::Proxy,
                                           public ImportsSameNameContext {
 public:
  explicit ImportsSameNameContext_Proxy(
      ::fidl::internal::ProxyController* controller);
  ~ImportsSameNameContext_Proxy() override;

  zx_status_t Dispatch_(::fidl::HLCPPIncomingMessage message) override;
  // cts-coverage-fidl-name:test.bindingsdenylist/ImportsSameNameContext.Unattributed
  void Unattributed() override;
  // cts-coverage-fidl-name:test.bindingsdenylist/ImportsSameNameContext.AlwaysAppearsInImportingLibrary
  void AlwaysAppearsInImportingLibrary() override;

 private:
  ImportsSameNameContext_Proxy(
      const ::test::bindingsdenylist::ImportsSameNameContext_Proxy&) = delete;
  ImportsSameNameContext_Proxy& operator=(
      const ::test::bindingsdenylist::ImportsSameNameContext_Proxy&) = delete;

  ::fidl::internal::ProxyController* controller_;
};

class ImportsSameNameContext_Stub final
    : public ::fidl::internal::Stub,
      public ::test::bindingsdenylist::ImportsSameNameContext_EventSender {
 public:
  typedef class ::test::bindingsdenylist::ImportsSameNameContext
      ImportsSameNameContext_clazz;
  explicit ImportsSameNameContext_Stub(
      ::test::bindingsdenylist::ImportsSameNameContext_Stub::
          ImportsSameNameContext_clazz* impl);
  ~ImportsSameNameContext_Stub() override;

  zx_status_t Dispatch_(::fidl::HLCPPIncomingMessage message,
                        ::fidl::internal::PendingResponse response) override;

 private:
  ::test::bindingsdenylist::ImportsSameNameContext_Stub::
      ImportsSameNameContext_clazz* impl_;
};

class ImportsSameNameContext_SyncProxy
    : public ::test::bindingsdenylist::ImportsSameNameContext_Sync {
 public:
  explicit ImportsSameNameContext_SyncProxy(::zx::channel channel);
  ~ImportsSameNameContext_SyncProxy() override;
  // cts-coverage-fidl-name:test.bindingsdenylist/ImportsSameNameContext.Unattributed
  zx_status_t Unattributed() override;
  // cts-coverage-fidl-name:test.bindingsdenylist/ImportsSameNameContext.AlwaysAppearsInImportingLibrary
  zx_status_t AlwaysAppearsInImportingLibrary() override;

 private:
  ::fidl::internal::SynchronousProxy proxy_;
  friend class ::fidl::SynchronousInterfacePtr<ImportsSameNameContext>;
};
#endif  // __Fuchsia__

#ifdef __Fuchsia__

class Allowed {
 public:
  using Proxy_ = ::test::bindingsdenylist::Allowed_Proxy;
  using Stub_ = ::test::bindingsdenylist::Allowed_Stub;
  using EventSender_ = ::test::bindingsdenylist::Allowed_EventSender;
  using Sync_ = ::test::bindingsdenylist::Allowed_Sync;
  virtual ~Allowed();
};

class Allowed_RequestDecoder {
 public:
  Allowed_RequestDecoder() = default;
  virtual ~Allowed_RequestDecoder() = default;
  static const fidl_type_t* GetType(uint64_t ordinal, bool* out_needs_response);
};

class Allowed_ResponseDecoder {
 public:
  Allowed_ResponseDecoder() = default;
  virtual ~Allowed_ResponseDecoder() = default;
  static const fidl_type_t* GetType(uint64_t ordinal);
};

class Allowed_EventSender {
 public:
  virtual ~Allowed_EventSender();
};

class Allowed_Sync {
 public:
  using Proxy_ = ::test::bindingsdenylist::Allowed_SyncProxy;
  virtual ~Allowed_Sync();
};

class Allowed_Proxy final : public ::fidl::internal::Proxy, public Allowed {
 public:
  explicit Allowed_Proxy(::fidl::internal::ProxyController* controller);
  ~Allowed_Proxy() override;

  zx_status_t Dispatch_(::fidl::HLCPPIncomingMessage message) override;

 private:
  Allowed_Proxy(const ::test::bindingsdenylist::Allowed_Proxy&) = delete;
  Allowed_Proxy& operator=(const ::test::bindingsdenylist::Allowed_Proxy&) =
      delete;

  ::fidl::internal::ProxyController* controller_;
};

class Allowed_Stub final
    : public ::fidl::internal::Stub,
      public ::test::bindingsdenylist::Allowed_EventSender {
 public:
  typedef class ::test::bindingsdenylist::Allowed Allowed_clazz;
  explicit Allowed_Stub(
      ::test::bindingsdenylist::Allowed_Stub::Allowed_clazz* impl);
  ~Allowed_Stub() override;

  zx_status_t Dispatch_(::fidl::HLCPPIncomingMessage message,
                        ::fidl::internal::PendingResponse response) override;

 private:
  ::test::bindingsdenylist::Allowed_Stub::Allowed_clazz* impl_;
};

class Allowed_SyncProxy : public ::test::bindingsdenylist::Allowed_Sync {
 public:
  explicit Allowed_SyncProxy(::zx::channel channel);
  ~Allowed_SyncProxy() override;

 private:
  ::fidl::internal::SynchronousProxy proxy_;
  friend class ::fidl::SynchronousInterfacePtr<Allowed>;
};
#endif  // __Fuchsia__

#ifdef __Fuchsia__

class OnlyLibfuzzerAndDeps {
 public:
  using Proxy_ = ::test::bindingsdenylist::OnlyLibfuzzerAndDeps_Proxy;
  using Stub_ = ::test::bindingsdenylist::OnlyLibfuzzerAndDeps_Stub;
  using EventSender_ =
      ::test::bindingsdenylist::OnlyLibfuzzerAndDeps_EventSender;
  using Sync_ = ::test::bindingsdenylist::OnlyLibfuzzerAndDeps_Sync;
  virtual ~OnlyLibfuzzerAndDeps();
  using LibfuzzerNeedsNonemptyProtocolCallback = fit::function<void()>;

  virtual void LibfuzzerNeedsNonemptyProtocol(
      LibfuzzerNeedsNonemptyProtocolCallback callback) = 0;
};

class OnlyLibfuzzerAndDeps_RequestDecoder {
 public:
  OnlyLibfuzzerAndDeps_RequestDecoder() = default;
  virtual ~OnlyLibfuzzerAndDeps_RequestDecoder() = default;
  static const fidl_type_t* GetType(uint64_t ordinal, bool* out_needs_response);
  virtual void LibfuzzerNeedsNonemptyProtocol() = 0;
};

class OnlyLibfuzzerAndDeps_ResponseDecoder {
 public:
  OnlyLibfuzzerAndDeps_ResponseDecoder() = default;
  virtual ~OnlyLibfuzzerAndDeps_ResponseDecoder() = default;
  static const fidl_type_t* GetType(uint64_t ordinal);
  virtual void LibfuzzerNeedsNonemptyProtocol() = 0;
};

class OnlyLibfuzzerAndDeps_EventSender {
 public:
  virtual ~OnlyLibfuzzerAndDeps_EventSender();
};

class OnlyLibfuzzerAndDeps_Sync {
 public:
  using Proxy_ = ::test::bindingsdenylist::OnlyLibfuzzerAndDeps_SyncProxy;
  virtual ~OnlyLibfuzzerAndDeps_Sync();
  virtual zx_status_t LibfuzzerNeedsNonemptyProtocol() = 0;
};

class OnlyLibfuzzerAndDeps_Proxy final : public ::fidl::internal::Proxy,
                                         public OnlyLibfuzzerAndDeps {
 public:
  explicit OnlyLibfuzzerAndDeps_Proxy(
      ::fidl::internal::ProxyController* controller);
  ~OnlyLibfuzzerAndDeps_Proxy() override;

  zx_status_t Dispatch_(::fidl::HLCPPIncomingMessage message) override;
  // cts-coverage-fidl-name:test.bindingsdenylist/OnlyLibfuzzerAndDeps.LibfuzzerNeedsNonemptyProtocol
  void LibfuzzerNeedsNonemptyProtocol(
      LibfuzzerNeedsNonemptyProtocolCallback callback) override;

 private:
  OnlyLibfuzzerAndDeps_Proxy(
      const ::test::bindingsdenylist::OnlyLibfuzzerAndDeps_Proxy&) = delete;
  OnlyLibfuzzerAndDeps_Proxy& operator=(
      const ::test::bindingsdenylist::OnlyLibfuzzerAndDeps_Proxy&) = delete;

  ::fidl::internal::ProxyController* controller_;
};

class OnlyLibfuzzerAndDeps_Stub final
    : public ::fidl::internal::Stub,
      public ::test::bindingsdenylist::OnlyLibfuzzerAndDeps_EventSender {
 public:
  typedef class ::test::bindingsdenylist::OnlyLibfuzzerAndDeps
      OnlyLibfuzzerAndDeps_clazz;
  explicit OnlyLibfuzzerAndDeps_Stub(
      ::test::bindingsdenylist::OnlyLibfuzzerAndDeps_Stub::
          OnlyLibfuzzerAndDeps_clazz* impl);
  ~OnlyLibfuzzerAndDeps_Stub() override;

  zx_status_t Dispatch_(::fidl::HLCPPIncomingMessage message,
                        ::fidl::internal::PendingResponse response) override;

 private:
  ::test::bindingsdenylist::OnlyLibfuzzerAndDeps_Stub::
      OnlyLibfuzzerAndDeps_clazz* impl_;
};

class OnlyLibfuzzerAndDeps_SyncProxy
    : public ::test::bindingsdenylist::OnlyLibfuzzerAndDeps_Sync {
 public:
  explicit OnlyLibfuzzerAndDeps_SyncProxy(::zx::channel channel);
  ~OnlyLibfuzzerAndDeps_SyncProxy() override;
  // cts-coverage-fidl-name:test.bindingsdenylist/OnlyLibfuzzerAndDeps.LibfuzzerNeedsNonemptyProtocol
  zx_status_t LibfuzzerNeedsNonemptyProtocol() override;

 private:
  ::fidl::internal::SynchronousProxy proxy_;
  friend class ::fidl::SynchronousInterfacePtr<OnlyLibfuzzerAndDeps>;
};
#endif  // __Fuchsia__

#ifdef __Fuchsia__

class OnlyHlcpp final {
 public:
  class Handler;

  static constexpr char Name[] = "test.bindingsdenylist.OnlyHlcpp";

  explicit OnlyHlcpp(std::unique_ptr<::fidl::ServiceConnector> service)
      : service_(std::move(service)) {}

  explicit operator bool() const { return !!service_; }

 private:
  std::unique_ptr<::fidl::ServiceConnector> service_;
};

/// Facilitates member protocol registration for servers.
class OnlyHlcpp::Handler final {
 public:
  /// Constructs a new |Handler|. Does not take ownership of |service|.
  explicit Handler(::fidl::ServiceHandlerBase* service) { (void)service; }

 private:
};
#endif  // __Fuchsia__

#ifdef __Fuchsia__

class OnlyCppAndDeps {
 public:
  using Proxy_ = ::test::bindingsdenylist::OnlyCppAndDeps_Proxy;
  using Stub_ = ::test::bindingsdenylist::OnlyCppAndDeps_Stub;
  using EventSender_ = ::test::bindingsdenylist::OnlyCppAndDeps_EventSender;
  using Sync_ = ::test::bindingsdenylist::OnlyCppAndDeps_Sync;
  virtual ~OnlyCppAndDeps();
};

class OnlyCppAndDeps_RequestDecoder {
 public:
  OnlyCppAndDeps_RequestDecoder() = default;
  virtual ~OnlyCppAndDeps_RequestDecoder() = default;
  static const fidl_type_t* GetType(uint64_t ordinal, bool* out_needs_response);
};

class OnlyCppAndDeps_ResponseDecoder {
 public:
  OnlyCppAndDeps_ResponseDecoder() = default;
  virtual ~OnlyCppAndDeps_ResponseDecoder() = default;
  static const fidl_type_t* GetType(uint64_t ordinal);
};

class OnlyCppAndDeps_EventSender {
 public:
  virtual ~OnlyCppAndDeps_EventSender();
};

class OnlyCppAndDeps_Sync {
 public:
  using Proxy_ = ::test::bindingsdenylist::OnlyCppAndDeps_SyncProxy;
  virtual ~OnlyCppAndDeps_Sync();
};

class OnlyCppAndDeps_Proxy final : public ::fidl::internal::Proxy,
                                   public OnlyCppAndDeps {
 public:
  explicit OnlyCppAndDeps_Proxy(::fidl::internal::ProxyController* controller);
  ~OnlyCppAndDeps_Proxy() override;

  zx_status_t Dispatch_(::fidl::HLCPPIncomingMessage message) override;

 private:
  OnlyCppAndDeps_Proxy(const ::test::bindingsdenylist::OnlyCppAndDeps_Proxy&) =
      delete;
  OnlyCppAndDeps_Proxy& operator=(
      const ::test::bindingsdenylist::OnlyCppAndDeps_Proxy&) = delete;

  ::fidl::internal::ProxyController* controller_;
};

class OnlyCppAndDeps_Stub final
    : public ::fidl::internal::Stub,
      public ::test::bindingsdenylist::OnlyCppAndDeps_EventSender {
 public:
  typedef class ::test::bindingsdenylist::OnlyCppAndDeps OnlyCppAndDeps_clazz;
  explicit OnlyCppAndDeps_Stub(
      ::test::bindingsdenylist::OnlyCppAndDeps_Stub::OnlyCppAndDeps_clazz*
          impl);
  ~OnlyCppAndDeps_Stub() override;

  zx_status_t Dispatch_(::fidl::HLCPPIncomingMessage message,
                        ::fidl::internal::PendingResponse response) override;

 private:
  ::test::bindingsdenylist::OnlyCppAndDeps_Stub::OnlyCppAndDeps_clazz* impl_;
};

class OnlyCppAndDeps_SyncProxy
    : public ::test::bindingsdenylist::OnlyCppAndDeps_Sync {
 public:
  explicit OnlyCppAndDeps_SyncProxy(::zx::channel channel);
  ~OnlyCppAndDeps_SyncProxy() override;

 private:
  ::fidl::internal::SynchronousProxy proxy_;
  friend class ::fidl::SynchronousInterfacePtr<OnlyCppAndDeps>;
};
#endif  // __Fuchsia__

#ifdef __Fuchsia__

class DenyEachBinding {
 public:
  using Proxy_ = ::test::bindingsdenylist::DenyEachBinding_Proxy;
  using Stub_ = ::test::bindingsdenylist::DenyEachBinding_Stub;
  using EventSender_ = ::test::bindingsdenylist::DenyEachBinding_EventSender;
  using Sync_ = ::test::bindingsdenylist::DenyEachBinding_Sync;
  virtual ~DenyEachBinding();
  using OnlyDenyDartCallback = fit::function<void(
      ::test::bindingsdenylist::DenyEachBinding_OnlyDenyDart_Result)>;

  virtual void OnlyDenyDart(bool a, OnlyDenyDartCallback callback) = 0;
  using OnlyDenyGoCallback = fit::function<void(
      ::test::bindingsdenylist::DenyEachBinding_OnlyDenyGo_Result)>;

  virtual void OnlyDenyGo(bool a, OnlyDenyGoCallback callback) = 0;
  using OnlyDenyLibfuzzerCallback = fit::function<void(
      ::test::bindingsdenylist::DenyEachBinding_OnlyDenyLibfuzzer_Result)>;

  virtual void OnlyDenyLibfuzzer(bool a,
                                 OnlyDenyLibfuzzerCallback callback) = 0;
  using OnlyDenyRustCallback = fit::function<void(
      ::test::bindingsdenylist::DenyEachBinding_OnlyDenyRust_Result)>;

  virtual void OnlyDenyRust(bool a, OnlyDenyRustCallback callback) = 0;
  using OnlyDenySyzkallerCallback = fit::function<void(
      ::test::bindingsdenylist::DenyEachBinding_OnlyDenySyzkaller_Result)>;

  virtual void OnlyDenySyzkaller(bool a,
                                 OnlyDenySyzkallerCallback callback) = 0;
};

class DenyEachBinding_RequestDecoder {
 public:
  DenyEachBinding_RequestDecoder() = default;
  virtual ~DenyEachBinding_RequestDecoder() = default;
  static const fidl_type_t* GetType(uint64_t ordinal, bool* out_needs_response);
  virtual void OnlyDenyDart(bool a) = 0;
  virtual void OnlyDenyGo(bool a) = 0;
  virtual void OnlyDenyLibfuzzer(bool a) = 0;
  virtual void OnlyDenyRust(bool a) = 0;
  virtual void OnlyDenySyzkaller(bool a) = 0;
};

class DenyEachBinding_ResponseDecoder {
 public:
  DenyEachBinding_ResponseDecoder() = default;
  virtual ~DenyEachBinding_ResponseDecoder() = default;
  static const fidl_type_t* GetType(uint64_t ordinal);
  virtual void OnlyDenyDart(
      ::test::bindingsdenylist::DenyEachBinding_OnlyDenyDart_Result result) = 0;
  virtual void OnlyDenyGo(
      ::test::bindingsdenylist::DenyEachBinding_OnlyDenyGo_Result result) = 0;
  virtual void OnlyDenyLibfuzzer(
      ::test::bindingsdenylist::DenyEachBinding_OnlyDenyLibfuzzer_Result
          result) = 0;
  virtual void OnlyDenyRust(
      ::test::bindingsdenylist::DenyEachBinding_OnlyDenyRust_Result result) = 0;
  virtual void OnlyDenySyzkaller(
      ::test::bindingsdenylist::DenyEachBinding_OnlyDenySyzkaller_Result
          result) = 0;
};

class DenyEachBinding_EventSender {
 public:
  virtual ~DenyEachBinding_EventSender();
};

class DenyEachBinding_Sync {
 public:
  using Proxy_ = ::test::bindingsdenylist::DenyEachBinding_SyncProxy;
  virtual ~DenyEachBinding_Sync();
  virtual zx_status_t OnlyDenyDart(
      bool a, ::test::bindingsdenylist::DenyEachBinding_OnlyDenyDart_Result*
                  out_result) = 0;
  virtual zx_status_t OnlyDenyGo(
      bool a, ::test::bindingsdenylist::DenyEachBinding_OnlyDenyGo_Result*
                  out_result) = 0;
  virtual zx_status_t OnlyDenyLibfuzzer(
      bool a,
      ::test::bindingsdenylist::DenyEachBinding_OnlyDenyLibfuzzer_Result*
          out_result) = 0;
  virtual zx_status_t OnlyDenyRust(
      bool a, ::test::bindingsdenylist::DenyEachBinding_OnlyDenyRust_Result*
                  out_result) = 0;
  virtual zx_status_t OnlyDenySyzkaller(
      bool a,
      ::test::bindingsdenylist::DenyEachBinding_OnlyDenySyzkaller_Result*
          out_result) = 0;
};

class DenyEachBinding_Proxy final : public ::fidl::internal::Proxy,
                                    public DenyEachBinding {
 public:
  explicit DenyEachBinding_Proxy(::fidl::internal::ProxyController* controller);
  ~DenyEachBinding_Proxy() override;

  zx_status_t Dispatch_(::fidl::HLCPPIncomingMessage message) override;
  // cts-coverage-fidl-name:test.bindingsdenylist/DenyEachBinding.OnlyDenyDart
  void OnlyDenyDart(bool a, OnlyDenyDartCallback callback) override;
  // cts-coverage-fidl-name:test.bindingsdenylist/DenyEachBinding.OnlyDenyGo
  void OnlyDenyGo(bool a, OnlyDenyGoCallback callback) override;
  // cts-coverage-fidl-name:test.bindingsdenylist/DenyEachBinding.OnlyDenyLibfuzzer
  void OnlyDenyLibfuzzer(bool a, OnlyDenyLibfuzzerCallback callback) override;
  // cts-coverage-fidl-name:test.bindingsdenylist/DenyEachBinding.OnlyDenyRust
  void OnlyDenyRust(bool a, OnlyDenyRustCallback callback) override;
  // cts-coverage-fidl-name:test.bindingsdenylist/DenyEachBinding.OnlyDenySyzkaller
  void OnlyDenySyzkaller(bool a, OnlyDenySyzkallerCallback callback) override;

 private:
  DenyEachBinding_Proxy(
      const ::test::bindingsdenylist::DenyEachBinding_Proxy&) = delete;
  DenyEachBinding_Proxy& operator=(
      const ::test::bindingsdenylist::DenyEachBinding_Proxy&) = delete;

  ::fidl::internal::ProxyController* controller_;
};

class DenyEachBinding_Stub final
    : public ::fidl::internal::Stub,
      public ::test::bindingsdenylist::DenyEachBinding_EventSender {
 public:
  typedef class ::test::bindingsdenylist::DenyEachBinding DenyEachBinding_clazz;
  explicit DenyEachBinding_Stub(
      ::test::bindingsdenylist::DenyEachBinding_Stub::DenyEachBinding_clazz*
          impl);
  ~DenyEachBinding_Stub() override;

  zx_status_t Dispatch_(::fidl::HLCPPIncomingMessage message,
                        ::fidl::internal::PendingResponse response) override;

 private:
  ::test::bindingsdenylist::DenyEachBinding_Stub::DenyEachBinding_clazz* impl_;
};

class DenyEachBinding_SyncProxy
    : public ::test::bindingsdenylist::DenyEachBinding_Sync {
 public:
  explicit DenyEachBinding_SyncProxy(::zx::channel channel);
  ~DenyEachBinding_SyncProxy() override;
  // cts-coverage-fidl-name:test.bindingsdenylist/DenyEachBinding.OnlyDenyDart
  zx_status_t OnlyDenyDart(
      bool a,
      ::test::bindingsdenylist::DenyEachBinding_OnlyDenyDart_Result* out_result)
      override;
  // cts-coverage-fidl-name:test.bindingsdenylist/DenyEachBinding.OnlyDenyGo
  zx_status_t OnlyDenyGo(
      bool a,
      ::test::bindingsdenylist::DenyEachBinding_OnlyDenyGo_Result* out_result)
      override;
  // cts-coverage-fidl-name:test.bindingsdenylist/DenyEachBinding.OnlyDenyLibfuzzer
  zx_status_t OnlyDenyLibfuzzer(
      bool a,
      ::test::bindingsdenylist::DenyEachBinding_OnlyDenyLibfuzzer_Result*
          out_result) override;
  // cts-coverage-fidl-name:test.bindingsdenylist/DenyEachBinding.OnlyDenyRust
  zx_status_t OnlyDenyRust(
      bool a,
      ::test::bindingsdenylist::DenyEachBinding_OnlyDenyRust_Result* out_result)
      override;
  // cts-coverage-fidl-name:test.bindingsdenylist/DenyEachBinding.OnlyDenySyzkaller
  zx_status_t OnlyDenySyzkaller(
      bool a,
      ::test::bindingsdenylist::DenyEachBinding_OnlyDenySyzkaller_Result*
          out_result) override;

 private:
  ::fidl::internal::SynchronousProxy proxy_;
  friend class ::fidl::SynchronousInterfacePtr<DenyEachBinding>;
};
#endif  // __Fuchsia__

}  // namespace bindingsdenylist
}  // namespace test
