{{/*
// Copyright 2021 The Fuchsia Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
*/}}

{{- define "Protocol:EventHandler:MessagingHeader" }}
{{- EnsureNamespace "" }}
{{- IfdefFuchsia }}
template<>
class {{ .WireEventHandlerInterface }} {
public:
  {{ .WireEventHandlerInterface.Self }}() = default;
  virtual ~{{ .WireEventHandlerInterface.Self }}() = default;
  {{- range .Events -}}
    {{- .Docs }}
    virtual void {{ .Name }}({{ .WireResponse }}* event) {}
  {{- end }}
};

template<>
class {{ .WireAsyncEventHandler }}
    : public {{ .WireEventHandlerInterface }}, public ::fidl::internal::AsyncEventHandler {
 public:
  {{ .WireAsyncEventHandler.Self }}() = default;
};

template<>
class {{ .WireSyncEventHandler }} : public {{ .WireEventHandlerInterface }} {
public:
  {{ .WireSyncEventHandler.Self }}() = default;

  // Method called when an unknown event is found. This methods gives the status which, in this
  // case, is returned by HandleOneEvent.
  virtual zx_status_t Unknown() = 0;

  // Handle all possible events defined in this protocol.
  // Blocks to consume exactly one message from the channel, then call the corresponding virtual
  // method.
  ::fidl::Result HandleOneEvent(
      ::{{ .Transport.Namespace }}::UnownedClientEnd<{{ . }}> client_end);
};

template <>
class {{ .WireEventDispatcher }} final :
    public ::fidl::internal::IncomingEventDispatcher<{{ .WireAsyncEventHandler }}> {
 public:
  explicit {{ .WireEventDispatcher.Self }}({{ .WireAsyncEventHandler }}* event_handler)
      : IncomingEventDispatcher(event_handler) {}

 private:
  std::optional<::fidl::UnbindInfo> DispatchEvent(
      ::fidl::IncomingMessage& msg,
      ::fidl::internal::IncomingTransportContext transport_context) override;
};
{{- EndifFuchsia }}
{{- end }}



{{- define "Protocol:EventHandler:MessagingSource" }}
{{ EnsureNamespace "" }}
{{- IfdefFuchsia }}
{{ if .Transport.HasEvents }}
::fidl::Result {{ .WireSyncEventHandler.NoLeading }}::HandleOneEvent(
    ::{{ .Transport.Namespace }}::UnownedClientEnd<{{ . }}> client_end) {
  zx_status_t status = client_end.channel()->wait_one(ZX_CHANNEL_READABLE | ZX_CHANNEL_PEER_CLOSED,
                                                      ::zx::time::infinite(),
                                                      nullptr);
  if (status != ZX_OK) {
    return ::fidl::Result::TransportError(status, ::fidl::internal::kErrorWaitOneFailed);
  }
  auto callback = [this](::fidl::IncomingMessage msg,
          ::fidl::internal::IncomingTransportContext incoming_transport_context)
          -> ::fidl::Result {
    if (msg.status() == ZX_ERR_BUFFER_TOO_SMALL) {
      // Message size is unexpectedly larger than calculated.
      // This can only be due to a newer version of the protocol defining a new event,
      // whose size exceeds the maximum of known events in the current protocol.
      return ::fidl::Result::UnexpectedMessage(Unknown());
    }
    if (!msg.ok()) {
      return msg;
    }
    fidl_message_header_t* hdr = msg.header();
    switch (hdr->ordinal) {
    {{- range .Events }}
      case {{ .OrdinalName }}: {
        ::fidl::DecodedMessage<{{ .WireResponse }}> decoded{::std::move(msg)};
        if (!decoded.ok()) {
          return ::fidl::Result(decoded);
        }
        {{ .Name }}(decoded.PrimaryObject());
        return ::fidl::Result::Ok();
      }
    {{- end }}
      default: {
        return ::fidl::Result::UnexpectedMessage(Unknown());
      }
    }
  };
  return ::fidl::MessageRead(zx::unowned_channel(client_end.handle()), callback);
}

std::optional<::fidl::UnbindInfo>
{{ .WireEventDispatcher.NoLeading }}::DispatchEvent(
    ::fidl::IncomingMessage& msg,
    ::fidl::internal::IncomingTransportContext transport_context) {
  switch (msg.header()->ordinal) {
  {{- range .Events }}
    case {{ .OrdinalName }}:
    {
      ::fidl::DecodedMessage<{{ .WireResponse }}> decoded{std::move(msg)};
      if (!decoded.ok()) {
        return ::fidl::UnbindInfo{decoded};
      }
      if (event_handler()) {
        event_handler()->{{ .Name }}(decoded.PrimaryObject());
      }
      return std::nullopt;
    }
  {{- end }}
    default:
      break;
  }
  return ::fidl::UnbindInfo::UnknownOrdinal();
}

{{- else }}{{/* not .Transport.HasEvents */}}
::fidl::Result {{ .WireSyncEventHandler.NoLeading }}::HandleOneEvent(
    ::{{ .Transport.Namespace }}::UnownedClientEnd<{{ . }}> client_end) {
      ZX_PANIC("events not supported for transport '{{ .Transport.Name }}'");
}
std::optional<::fidl::UnbindInfo>
{{ .WireEventDispatcher.NoLeading }}::DispatchEvent(
    fidl::IncomingMessage& msg,
    internal::IncomingTransportContext transport_context) {
      ZX_PANIC("events not supported for transport '{{ .Transport.Name }}'");
}
{{- end }}
{{- EndifFuchsia }}
{{- end }}

