{{/*
// Copyright 2021 The Fuchsia Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
*/}}

{{- define "Protocol:EventHandler:WireMessagingHeader" }}
{{- EnsureNamespace "" }}
{{- IfdefFuchsia }}
template<>
class {{ .WireEventHandlerInterface }} : public ::fidl::internal::BaseEventHandlerInterface {
public:
  {{ .WireEventHandlerInterface.Self }}() = default;
  virtual ~{{ .WireEventHandlerInterface.Self }}() = default;
  {{- range .Events -}}
    {{- .Docs }}
    virtual void {{ .Name }}({{ .WireEvent }}* event) = 0;
  {{- end }}
};

template<>
class {{ .WireAsyncEventHandler }}
    : public {{ .WireEventHandlerInterface }}, public ::fidl::internal::AsyncEventHandler {
 public:
  {{ .WireAsyncEventHandler.Self }}() = default;
  {{- range .Events -}}
    {{- .Docs }}
    void {{ .Name }}({{ .WireEvent }}* event) override {}
  {{- end }}
};

template<>
class {{ .WireSyncEventHandler }} : public {{ .WireEventHandlerInterface }} {
 public:
  {{ .WireSyncEventHandler.Self }}() = default;

  {{- range .Events }}
    {{- if .Transitional }}
      void {{ .Name }}({{ .WireEvent }}* event) override { got_transitional_ = true; }
    {{- end }}
  {{- end }}

  // Handle all possible events defined in this protocol.
  // Blocks to consume exactly one message from the channel, then call the corresponding virtual
  // method.
  ::fidl::Status HandleOneEvent(
      ::{{ .Transport.Namespace }}::UnownedClientEnd<{{ . }}> client_end);

 private:
  [[maybe_unused]]
  bool got_transitional_ = false;
};

template <>
class {{ .WireEventDispatcher }} final :
    public ::fidl::internal::IncomingEventDispatcher<{{ .WireEventHandlerInterface }}> {
 public:
  explicit {{ .WireEventDispatcher.Self }}({{ .WireEventHandlerInterface }}* event_handler)
      : IncomingEventDispatcher(event_handler) {}

  {{- if .Events }}
    ::fidl::Status DispatchEvent(
        ::fidl::IncomingMessage& msg,
        ::fidl::internal::MessageStorageViewBase* storage_view) override;
  {{- end }}
};
{{- EndifFuchsia }}
{{- end }}



{{- define "Protocol:EventHandler:WireMessagingSource" }}
{{ EnsureNamespace "" }}
{{- IfdefFuchsia }}
{{ if .Transport.HasEvents }}
::fidl::Status {{ .WireSyncEventHandler.NoLeading }}::HandleOneEvent(
    ::{{ .Transport.Namespace }}::UnownedClientEnd<{{ . }}> client_end) {
  zx_status_t status = client_end.channel()->wait_one(ZX_CHANNEL_READABLE | ZX_CHANNEL_PEER_CLOSED,
                                                      ::zx::time::infinite(),
                                                      nullptr);
  if (status != ZX_OK) {
    return ::fidl::Status::TransportError(status, ::fidl::internal::kErrorWaitOneFailed);
  }
  {{ .IncomingEventsStorage }} event_storage;
  ::fidl::ChannelMessageStorageView storage_view = event_storage.view();
  ::fidl::IncomingMessage msg = ::fidl::MessageRead(
      zx::unowned_channel(client_end.handle()), storage_view, ReadOptions{.discardable = true});
  if (msg.status() == ZX_ERR_BUFFER_TOO_SMALL) {
    {{- /*
    Message size is unexpectedly larger than calculated.
    This can only be due to a newer version of the protocol defining a new event,
    whose size exceeds the maximum of known events in the current protocol.
    */}}
    return ::fidl::Status::UnexpectedMessage(
        ZX_ERR_BUFFER_TOO_SMALL, ::fidl::internal::kErrorSyncEventBufferTooSmall);
  }
  if (!msg.ok()) {
    return msg;
  }
  got_transitional_ = false;
  {{ .WireEventDispatcher.NoLeading }} dispatcher{this};
  ::fidl::Status dispatch_status = dispatcher.DispatchEvent(msg, &storage_view);
  if (got_transitional_) {
    return ::fidl::Status::UnexpectedMessage(
        ZX_ERR_NOT_SUPPORTED, ::fidl::internal::kErrorSyncEventUnhandledTransitionalEvent);
  }
  return dispatch_status;
}

{{- if .Events }}
  ::fidl::Status
  {{ .WireEventDispatcher.NoLeading }}::DispatchEvent(
      ::fidl::IncomingMessage& msg,
      ::fidl::internal::MessageStorageViewBase* storage_view) {
    switch (msg.header()->ordinal) {
    {{- range .Events }}
      case {{ .OrdinalName }}:
      {
        ::fidl::unstable::DecodedMessage<{{ .WireTransactionalEvent }}> decoded{std::move(msg)};
        if (!decoded.ok()) {
          return decoded;
        }
        if (event_handler()) {
          {{- if .ResponseArgs }}
            auto* primary = &decoded.PrimaryObject()->body;
          {{- else }}
            {{ .WireEvent }} empty_event;
            auto* primary = &empty_event;
          {{- end }}
          event_handler()->{{ .Name }}(primary);
        }
        return ::fidl::Status::Ok();
      }
    {{- end }}
      default:
        return ::fidl::Status::UnknownOrdinal();
    }
  }
{{- end }}

{{- else }}{{/* not .Transport.HasEvents */}}
::fidl::Status {{ .WireSyncEventHandler.NoLeading }}::HandleOneEvent(
    ::{{ .Transport.Namespace }}::UnownedClientEnd<{{ . }}> client_end) {
      ZX_PANIC("events not supported for transport '{{ .Transport.Name }}'");
}

{{- end }}{{/* if .Transport.HasEvents */}}
{{- EndifFuchsia }}
{{- end }}



{{- define "Protocol:EventHandler:NaturalMessagingHeader" }}
{{- EnsureNamespace "" }}
{{- IfdefFuchsia }}
template<>
class {{ .NaturalEventHandlerInterface }} : public ::fidl::internal::BaseEventHandlerInterface {
 public:
  {{ .NaturalEventHandlerInterface.Self }}() = default;
  virtual ~{{ .NaturalEventHandlerInterface.Self }}() = default;
  {{- range .Events -}}
    {{- .Docs }}
    virtual void {{ .Name }}({{ .NaturalEvent }}&) = 0;
  {{- end }}
};

template<>
class {{ .NaturalAsyncEventHandler }}
    : public {{ .NaturalEventHandlerInterface }}, public ::fidl::internal::AsyncEventHandler {
 public:
  {{ .NaturalAsyncEventHandler.Self }}() = default;

  {{- range .Events -}}
    {{- .Docs }}
    void {{ .Name }}({{ .NaturalEvent }}&) override {}
  {{- end }}
};

template <>
class {{ .NaturalEventDispatcher }} final :
    public ::fidl::internal::IncomingEventDispatcher<{{ .NaturalEventHandlerInterface }}> {
 public:
  explicit {{ .NaturalEventDispatcher.Self }}({{ .NaturalEventHandlerInterface }}* event_handler)
      : IncomingEventDispatcher(event_handler) {}

  {{- if .Events }}
    ::fidl::Status DispatchEvent(
        ::fidl::IncomingMessage& msg,
        internal::MessageStorageViewBase* storage_view) override;
  {{- end }}
};
{{- EndifFuchsia }}
{{- end }}



{{- define "Protocol:EventHandler:NaturalMessagingSource" }}
{{- EnsureNamespace "" }}
{{- IfdefFuchsia }}

{{- if .Events }}
  ::fidl::Status
  {{ .NaturalEventDispatcher.NoLeading }}::DispatchEvent(
      ::fidl::IncomingMessage& msg,
      ::fidl::internal::MessageStorageViewBase* storage_view) {
    switch (msg.header()->ordinal) {
    {{- range .Events }}
      case {{ .OrdinalName }}:
      {
        ::fitx::result decoded = ::fidl::internal::DecodeTransactionalMessage
              {{- if .HasResponsePayload }}<{{ .ResponsePayload }}>{{ end -}}(std::move(msg));
        if (decoded.is_error()) {
          return decoded.error_value();
        }
        if (event_handler()) {
          {{ .NaturalEvent }} event
          {{- if .HasResponsePayload }}
              = {{ .NaturalEventConverter }}::FromDomainObject(std::move(decoded.value()))
          {{- end }};
          event_handler()->{{ .Name }}(event);
        }
        return ::fidl::Status::Ok();
      }
    {{- end }}
      default:
        return ::fidl::Status::UnknownOrdinal();
    }
  }
{{- end }}

{{- EndifFuchsia }}
{{- end }}
