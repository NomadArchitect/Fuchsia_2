{{/*
// Copyright 2021 The Fuchsia Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
*/}}

{{- define "Protocol:SyncClient:MessagingHeader" }}
{{- EnsureNamespace "" }}
template<>
class {{ .WireSyncClient }} final : public ::fidl::internal::WireSyncClientBase<{{ . }}> {
 public:
  using ::fidl::internal::WireSyncClientBase<{{ . }}>::WireSyncClientBase;

  {{- if .Events }}
  // Handle all possible events defined in this protocol.
  // Blocks to consume exactly one message from the channel, then call the corresponding virtual
  // method defined in |SyncEventHandler|. The return status of the handler function is folded with
  // any transport-level errors and returned.
  ::fidl::Result HandleOneEvent({{ .WireSyncEventHandler }}& event_handler) const {
    return event_handler.HandleOneEvent(client_end());
  }
  {{- end }}
};
{{- end }}
