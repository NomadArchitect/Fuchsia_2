{{/*
// Copyright 2021 The Fuchsia Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
*/}}

{{- define "Method:Request:WireMessagingHeader" }}
{{- EnsureNamespace "" }}
{{- if .Request.IsResource }}
{{- IfdefFuchsia -}}
{{- end }}
template<>
struct {{ .WireRequest }} final {
{{- range .RequestAnonymousChildren }}
  using {{ .ScopedName }} = {{ .FlattenedName }};
{{- end }}

  FIDL_ALIGNDECL
  {{- /* Add underscore to prevent name collision */}}
  fidl_message_header_t _hdr;
    {{- range $index, $param := .RequestArgs }}
  {{ $param.Type }} {{ $param.Name }};
    {{- end }}

  {{ if .RequestArgs }}
  explicit {{ .WireRequest.Self }}({{ RenderParams .RequestArgs }})
  {{ RenderInitMessage .RequestArgs }} {
    _InitHeader();
  }
  {{- end }}
  {{ .WireRequest.Self }}() {
    _InitHeader();
  }

    {{- if and .HasResponse .ResponseArgs }}
  using ResponseType = {{ .WireResponse }};
    {{- end }}

  {{- if .Request.IsResource }}
  void _CloseHandles();
  {{- end }}

 private:
  void _InitHeader();
};

{{- if .Request.IsResource }}
{{- EndifFuchsia -}}
{{- end }}
{{- end }}




{{- define "Method:Request:WireMessagingSource" }}
  {{- EnsureNamespace "" }}

{{- if .Request.IsResource }}
{{- IfdefFuchsia -}}
{{- end }}
  void {{ .WireRequest }}::_InitHeader() {
    fidl_init_txn_header(&_hdr, 0, {{ .OrdinalName }});
  }

  {{ if .Request.IsResource }}
    void {{ .WireRequest }}::_CloseHandles() {
      {{- range .RequestArgs }}
        {{- CloseHandles . false false }}
      {{- end }}
    }
  {{- end }}
{{- if .Request.IsResource }}
{{- EndifFuchsia -}}
{{- end }}
{{- end }}



{{- define "Method:Request:NaturalMessagingHeader" }}
{{- IfdefFuchsia -}}
{{- EnsureNamespace "" }}

template <>
class {{ .NaturalRequest }} final : public {{ .RequestMessageBase }} {
 public:
  {{- with .NaturalRequest }}
    {{ .Self }}() = default;
    ~{{ .Self }}() = default;
    {{ .Self }}({{ .Self }}&&) noexcept = default;
    {{ .Self }}& operator=({{ .Self }}&&) noexcept = default;
  {{- end }}

  {{- if .HasRequestPayload }}
    {{ .NaturalRequest.Self }}({{ .RequestPayload }} payload) : payload_(std::move(payload)) {}
  {{- end }}

  {{- if .Request.IsResource }}
    {{- with .NaturalRequest }}
      {{ .Self }}(const {{ .Self }}&) noexcept = delete;
      {{ .Self }}& operator=(const {{ .Self }}&) noexcept = delete;
    {{- end }}
  {{- else }}
    {{- /* TODO(fxbug.dev/82189): Generate copy constructors */}}
  {{- end }}

  {{- if .HasRequestPayload }}
    {{ .RequestPayload }}* operator->() { return &payload_; }
    const {{ .RequestPayload }}* operator->() const { return &payload_; }
    {{ .RequestPayload }}& operator*() { return payload_; }
    const {{ .RequestPayload }}& operator*() const { return payload_; }
  {{- end }}

 private:
  {{- if .HasRequestPayload }}
    {{ .RequestPayload }} payload_;
  {{- end }}
};

template <>
struct {{ .RequestMessageTraits }} final {
 public:
  static constexpr bool kHasPayload = {{ .HasRequestPayload }};
  {{- if .HasRequestPayload }}
    using Payload = {{ .RequestPayload }};
  {{- end }}
};


{{- EndifFuchsia -}}
{{- end }}



{{- define "Method:Request:NaturalMessagingSource" }}

{{- end }}

