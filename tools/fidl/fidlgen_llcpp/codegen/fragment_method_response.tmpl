{{/*
// Copyright 2021 The Fuchsia Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
*/}}

{{- define "Method:Response:WireMessagingHeader" }}
{{- EnsureNamespace "" }}
{{- if .Response.IsResource }}
{{- IfdefFuchsia -}}
{{- end }}

template<>
struct {{ .WireResponse }} final {{- if .HasResponsePayload }} : public {{ .ResponsePayload }}{{ end }} {
{{- range .ResponseAnonymousChildren }}
  using {{ .ScopedName }} = {{ .FlattenedName }};
{{- end }}

  {{ if .ResponseArgs }}
  explicit {{ .WireResponse.Self }}({{ RenderParams .ResponseArgs }}) : {{ .ResponsePayload }}
  {{- if .ResponseFlattened -}}
  {{- "{ " }}{{ RenderForwardStructParams .ResponseArgs }}}
  {{- else -}}
  ({{ RenderForwardParams .ResponseArgs }})
  {{- end -}}{}
  {{- end }}
  {{ .WireResponse.Self }}() = default;
};

template<>
struct {{ .WireTransactionalResponse }} final {
  FIDL_ALIGNDECL
  fidl_message_header_t header;
  {{ if .ResponseArgs }}
  {{ .WireResponse }} body;
  explicit {{ .WireTransactionalResponse.Self }}({{ RenderParams .ResponseArgs }})
  : body({{ .WireResponse }}({{ RenderForwardParams .ResponseArgs }})) {
    _InitHeader();
  }
  {{- end }}
  {{ .WireTransactionalResponse.Self }}() {
    _InitHeader();
  }

  {{- if .Response.IsResource }}
  void _CloseHandles() {
    {{- if .ResponseArgs }}
    body._CloseHandles();
    {{- end }}
  }
  {{- end }}

 private:
  void _InitHeader();
};

{{- if .Response.IsResource }}
{{- EndifFuchsia -}}
{{- end }}
{{- end }}




{{- define "Method:Response:WireMessagingSource" }}
  {{- EnsureNamespace "" }}
{{- if .Response.IsResource }}
{{- IfdefFuchsia -}}
{{- end }}
  void {{ .WireTransactionalResponse }}::_InitHeader() {
    fidl_init_txn_header(&header, 0, {{ .OrdinalName }});
  }
{{- if .Response.IsResource }}
{{- EndifFuchsia -}}
{{- end }}
{{- end }}



{{- define "Method:Response:NaturalMessagingHeader" }}
{{- IfdefFuchsia -}}
{{- EnsureNamespace "" }}

template <>
class {{ .NaturalResponse }} final
    {{- if .ResponseMessageBase }} : public {{ .ResponseMessageBase }} {{ end }} {
 public:
  {{- if .HasResponsePayload }}
    {{- if .Result }}
      using {{ .ResponseMessageBase }}::result;
      {{ .NaturalResponse.Self }}({{ .ResponseMessageBase }} v) : result(std::move(v)) {}
      {{ .NaturalResponse.Self }}() = delete;
    {{- else }}
      using {{ .ResponsePayload }}::{{ .ResponsePayload.Self }};
      {{ .NaturalResponse.Self }}({{ .ResponseMessageBase }} v) : {{ .ResponsePayload.Self }}(std::move(v)) {}
    {{- end }}
  {{- end }}
};

template <>
struct {{ .ResponseMessageTraits }} final {
 public:
  static constexpr bool kHasPayload = {{ .HasResponsePayload }};
  {{- if .HasResponsePayload }}
  using Payload = {{ .ResponsePayload }};
  {{- end }}
};

{{- if .Result }}
template <>
class {{ .NaturalResponseConverter }} {
  using DomainObject = {{ .ResponsePayload }};

 public:
  static {{ .NaturalResponse }} FromDomainObject(DomainObject  o) {
    if (o.result().err().has_value()) {
      return ::fitx::error(std::move(o.result().err().value()));
    } else {
      ZX_DEBUG_ASSERT(o.result().response().has_value());
      {{- if .Result.ValueParameters }}
        return ::fitx::ok(std::move(o.result().response().value()));
      {{- else }}
        return ::fitx::ok();
      {{- end }}
    }
  }

  static DomainObject  IntoDomainObject({{ .NaturalResponse }}&& m) {
    if (m.is_error()) {
      return DomainObject{ { .result = {{ .Result.ResultDecl }}::WithErr(m.error_value()) } };
    } else {
      {{- if .Result.ValueParameters }}
        return DomainObject{ { .result = {{ .Result.ResultDecl }}::WithResponse(std::move(m.value())) } };
      {{- else }}
        return DomainObject{ { .result = {{ .Result.ResultDecl }}::WithResponse({}) } };
      {{- end }}
    }
  }
};
{{- end }}


{{- EndifFuchsia -}}
{{- end }}



{{- define "Method:Response:NaturalMessagingSource" }}

{{- end }}
