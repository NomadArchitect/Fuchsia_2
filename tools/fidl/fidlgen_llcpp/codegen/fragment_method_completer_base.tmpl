{{/*
// Copyright 2021 The Fuchsia Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
*/}}


{{- define "Method:CompleterBase:WireMessagingHeader" }}
{{ EnsureNamespace "" }}
{{- if .HasResponse }}
  template<>
  class {{ .WireCompleterBase }} : public ::fidl::CompleterBase {
    public:
    // In the following methods, the return value indicates internal errors during
    // the reply, such as encoding or writing to the transport.
    // Note that any error will automatically lead to the destruction of the binding,
    // after which the |on_unbound| callback will be triggered with a detailed reason.
    //
    // See //zircon/system/ulib/fidl/include/lib/fidl/llcpp/server.h.
    //
    // Because the reply status is identical to the unbinding status, it can be safely ignored.
    ::fidl::Result Reply({{ RenderParams .ResponseArgs }});
        {{- if .Result }}
    ::fidl::Result ReplySuccess({{ RenderParams .Result.ValueMembers }});
    ::fidl::Result ReplyError({{ .Result.ErrorDecl }} error);
        {{- end }}
        {{- if .ResponseArgs }}
    ::fidl::Result Reply({{ RenderParams "::fidl::BufferSpan _buffer" .ResponseArgs }});
          {{- if .Result }}
    ::fidl::Result ReplySuccess(
        {{- RenderParams "::fidl::BufferSpan _buffer" .Result.ValueMembers }});
          {{- end }}
        {{- end }}

    protected:
      using ::fidl::CompleterBase::CompleterBase;
  };

  template<>
  struct {{ .WireMethodTypes }} {
    using Completer = fidl::Completer<{{ .WireCompleterBase }}>;
  };
{{- end }}
{{- end }}



{{- define "Method:CompleterBase:WireMessagingSource" }}
{{ EnsureNamespace "" }}
{{- IfdefFuchsia -}}
::fidl::Result
{{ .WireCompleterBase.NoLeading }}::Reply({{ RenderParams .ResponseArgs }}) {
  {{ .WireResponse }} _response{ {{ RenderForwardParams .ResponseArgs }} };
  FIDL_INTERNAL_DISABLE_AUTO_VAR_INIT
  ::fidl::unstable::OwnedEncodedMessage<{{ .WireResponse }}, {{ .Transport.Type }}> _response_message{
    ::fidl::internal::AllowUnownedInputRef{}, &_response
  };
  return {{ .WireCompleterBase }}::SendReply(&_response_message.GetOutgoingMessage(),
                                             ::fidl::internal::OutgoingTransportContext());
}

{{- if .Result }}
  ::fidl::Result
  {{ .WireCompleterBase.NoLeading }}::ReplySuccess(
        {{ RenderParams .Result.ValueMembers }}) {
    {{ .Result.ValueStructDecl }} _response;
    {{- range .Result.ValueMembers }}
      _response.{{ .Name }} = std::move({{ .Name }});
    {{- end }}

    {{- if .Result.Value.InlineInEnvelope }}
    return Reply({{ .Result.ResultDecl }}::WithResponse(std::move(_response)));
    {{- else }}
    return Reply({{ .Result.ResultDecl }}::WithResponse(
        ::fidl::ObjectView<{{ .Result.ValueStructDecl }}>::FromExternal(&_response)));
    {{- end }}
  }

  ::fidl::Result
  {{ .WireCompleterBase.NoLeading }}::ReplyError({{ .Result.ErrorDecl }} error) {
    {{- if .Result.Error.InlineInEnvelope }}
    return Reply({{ .Result.ResultDecl }}::WithErr(std::move(error)));
    {{- else }}
    return Reply({{ .Result.ResultDecl }}::WithErr(
        ::fidl::ObjectView<{{ .Result.ErrorDecl }}>::FromExternal(&error)));
    {{- end }}
  }
{{- end }}
{{- if .ResponseArgs }}

  ::fidl::Result {{ .WireCompleterBase.NoLeading }}::Reply(
        {{- RenderParams "::fidl::BufferSpan _buffer" .ResponseArgs }}) {
    {{ .WireResponse }} _response{ {{ RenderForwardParams .ResponseArgs }} };
    ::fidl::unstable::UnownedEncodedMessage<{{ .WireResponse }}> _response_message(
          _buffer.data, _buffer.capacity, &_response);
    return CompleterBase::SendReply(&_response_message.GetOutgoingMessage(),
                                    ::fidl::internal::OutgoingTransportContext());
  }

  {{- if .Result }}
    ::fidl::Result {{ .WireCompleterBase.NoLeading }}::ReplySuccess(
          {{- RenderParams "::fidl::BufferSpan _buffer" .Result.ValueMembers }}) {
      {{ .Result.ValueStructDecl }} response;
      {{- range .Result.ValueMembers }}
        response.{{ .Name }} = std::move({{ .Name }});
      {{- end }}
      {{- if .Result.Value.InlineInEnvelope }}
      return Reply(std::move(_buffer), {{ .Result.ResultDecl }}::WithResponse(
            std::move(response)));
      {{- else }}
      return Reply(std::move(_buffer), {{ .Result.ResultDecl }}::WithResponse(
            ::fidl::ObjectView<{{ .Result.ValueStructDecl }}>::FromExternal(&response)));
      {{- end }}
    }
  {{- end }}
{{- end }}
{{- EndifFuchsia -}}
{{- end }}



{{- define "Method:NaturalReplySignature:Helper" -}}
{{- /* TODO(fxbug.dev/60240): Use `const T&` for value types. */}}
{{- if .HasResponsePayload }}{{ .ResponsePayload }}&& payload{{ end }}
{{- end }}



{{- define "Method:CompleterBase:NaturalMessagingHeader" }}
{{ EnsureNamespace "" }}
template<>
class {{ .NaturalCompleterBase }} : public ::fidl::CompleterBase {
 public:
  void Reply({{ template "Method:NaturalReplySignature:Helper" . }});

 protected:
  using ::fidl::CompleterBase::CompleterBase;
};

template<>
struct {{ .NaturalMethodTypes }} {
  using Completer = fidl::Completer<{{ .NaturalCompleterBase }}>;
};
{{- end }}



{{- define "Method:CompleterBase:NaturalMessagingSource" }}
{{ EnsureNamespace "" }}
void {{ .NaturalCompleterBase.NoLeading }}::Reply(
    {{- template "Method:NaturalReplySignature:Helper" . }}) {
  ::fidl::internal::NaturalServerMessenger _messenger{this};
  ::fidl::MessageEncoder _encoder{ {{ .OrdinalName }} };
  _messenger.SendReply(
      {{- if .HasResponsePayload -}}
        &{{ .Response.WireCodingTable }}
      {{- else -}}
        nullptr
      {{- end -}},
      ::fidl::internal::EncodeTransactionalMessageWithoutValidating(
          _encoder {{- if .HasResponsePayload }}, std::move(payload){{ end }}));
}
{{- end }}
