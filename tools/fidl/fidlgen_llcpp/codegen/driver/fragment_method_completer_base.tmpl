{{/*
// Copyright 2021 The Fuchsia Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
*/}}


{{- define "Method:CompleterBase:driver/MessagingHeader" }}
{{ EnsureNamespace "" }}
{{- if .HasResponse }}
  template<>
  class {{ .WireCompleterBase }} : public ::fidl::CompleterBase {
    public:
    // In the following methods, the return value indicates internal errors during
    // the reply, such as encoding or writing to the transport.
    // Note that any error will automatically lead to the destruction of the binding,
    // after which the |on_unbound| callback will be triggered with a detailed reason.
    //
    // See //zircon/system/ulib/fidl/include/lib/fidl/llcpp/server.h.
    //
    // Because the reply status is identical to the unbinding status, it can be safely ignored.
    ::fidl::Result Reply({{ RenderParams .ResponseArgs }}, fdf::Arena _arena);
        {{- if .Result }}
    ::fidl::Result ReplySuccess({{ RenderParams .Result.ValueMembers }}, fdf::Arena _arena);
    ::fidl::Result ReplyError({{ .Result.ErrorDecl }} error, fdf::Arena _arena);
        {{- end }}
        {{- if .ResponseArgs }}
    ::fidl::Result Reply({{ RenderParams "::fidl::BufferSpan _buffer" .ResponseArgs }},
                         fdf::Arena _arena);
          {{- if .Result }}
    ::fidl::Result ReplySuccess(
        {{- RenderParams "::fidl::BufferSpan _buffer" .Result.ValueMembers }}, fdf::Arena _arena);
          {{- end }}
        {{- end }}

    protected:
      using ::fidl::CompleterBase::CompleterBase;
  };

  template<>
  struct {{ .WireMethodTypes }} {
    using Completer = fidl::Completer<{{ .WireCompleterBase }}>;
  };
{{- end }}
{{- end }}

{{- define "Method:CompleterBase:driver/MessagingSource" }}
{{ EnsureNamespace "" }}
{{- IfdefFuchsia -}}
::fidl::Result
{{ .WireCompleterBase.NoLeading }}::Reply({{ RenderParams .ResponseArgs }}, fdf::Arena _arena) {
  constexpr uint32_t kBufferSize =
   internal::ClampedMessageSize<{{ .WireResponse }}, MessageDirection::kSending>();
  uint8_t* _buffer = static_cast<uint8_t*>(_arena.Allocate(kBufferSize));

  {{ .WireResponse }} _response{ {{ RenderForwardParams .ResponseArgs }} };
  ::fidl::UnownedEncodedMessage<{{ .WireResponse }}, {{ .Transport.Type }}> _response_message(
      _buffer, kBufferSize, &_response);
  return {{ .WireCompleterBase }}::SendReply(
    &_response_message.GetOutgoingMessage(),
    ::fidl::internal::OutgoingTransportContext::Create<::fidl::internal::DriverTransport>(_arena.release()));
}

{{- if .Result }}
  ::fidl::Result
  {{ .WireCompleterBase.NoLeading }}::ReplySuccess(
        {{ RenderParams .Result.ValueMembers }}, fdf::Arena _arena) {
    {{ .Result.ValueStructDecl }} _response;
    {{- range .Result.ValueMembers }}
      _response.{{ .Name }} = std::move({{ .Name }});
    {{- end }}

    {{- if .Result.Value.InlineInEnvelope }}
    return Reply({{ .Result.ResultDecl }}::WithResponse(std::move(_response)),
                  std::move(_arena));
    {{- else }}
    return Reply({{ .Result.ResultDecl }}::WithResponse(
        ::fidl::ObjectView<{{ .Result.ValueStructDecl }}>::FromExternal(&_response)),
        std::move(_arena));
    {{- end }}
  }

  ::fidl::Result
  {{ .WireCompleterBase.NoLeading }}::ReplyError({{ .Result.ErrorDecl }} error, fdf::Arena _arena) {
    {{- if .Result.Error.InlineInEnvelope }}
    return Reply({{ .Result.ResultDecl }}::WithErr(std::move(error)),
                  std::move(arena));
    {{- else }}
    return Reply({{ .Result.ResultDecl }}::WithErr(
        ::fidl::ObjectView<{{ .Result.ErrorDecl }}>::FromExternal(&error)),
        fdf::Arena _arena);
    {{- end }}
  }
{{- end }}
{{- if .ResponseArgs }}

  ::fidl::Result {{ .WireCompleterBase.NoLeading }}::Reply(
        {{- RenderParams "::fidl::BufferSpan _buffer" .ResponseArgs }}, fdf::Arena _arena) {
    {{ .WireResponse }} _response{ {{ RenderForwardParams .ResponseArgs }} };
    ::fidl::UnownedEncodedMessage<{{ .WireResponse }}> _response_message(
          _buffer.data, _buffer.capacity, &_response);
    return CompleterBase::SendReply(
      &_response_message.GetOutgoingMessage(),
      ::fidl::internal::OutgoingTransportContext::Create<::fidl::internal::DriverTransport>(_arena.release()));
    }

  {{- if .Result }}
    ::fidl::Result {{ .WireCompleterBase.NoLeading }}::ReplySuccess(
          {{- RenderParams "::fidl::BufferSpan _buffer" .Result.ValueMembers }},
          fdf::Arena _arena) {
      {{ .Result.ValueStructDecl }} response;
      {{- range .Result.ValueMembers }}
        response.{{ .Name }} = std::move({{ .Name }});
      {{- end }}
      {{- if .Result.Value.InlineInEnvelope }}
      return Reply(std::move(_buffer), {{ .Result.ResultDecl }}::WithResponse(
            std::move(response)), std::move(arena));
      {{- else }}
      return Reply(std::move(_buffer), {{ .Result.ResultDecl }}::WithResponse(
            ::fidl::ObjectView<{{ .Result.ValueStructDecl }}>::FromExternal(&response)),
            std::move(_arena));
      {{- end }}
    }
  {{- end }}
{{- end }}
{{- EndifFuchsia -}}
{{- end }}
