// Copyright 2021 The Fuchsia Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

package codegen

const fileTypesHeaderTmpl = `
{{- define "Filename:TypesHeader" -}}
fidl/{{ .LibraryDots }}/cpp/wire_types.h
{{- end }}


{{- define "File:TypesHeader" -}}
  {{- UseWire -}}
  // WARNING: This file is machine generated by fidlgen.

  #pragma once

  #include <cinttypes>

  #include <lib/fidl/llcpp/array.h>
  #include <lib/fidl/llcpp/coding.h>
  #include <lib/fidl/llcpp/envelope.h>
  #include <lib/fidl/llcpp/message_storage.h>
  #include <lib/fidl/llcpp/message.h>
  #include <lib/fidl/llcpp/object_view.h>
  #include <lib/fidl/llcpp/string_view.h>
  #include <lib/fidl/llcpp/traits.h>
  #include <lib/stdcompat/optional.h>
  {{- IfdefFuchsia -}}
    {{ range .HandleTypes -}}
      #include <lib/zx/{{ . }}.h>
    {{ end -}}
  {{- EndifFuchsia }}

  #include <{{ .Library | Filename "Markers" }}>
  {{ range .Dependencies -}}
    #include <{{ . | Filename "TypesHeader" }}>
  {{ end }}

  {{ range .Decls }}
    {{- if Eq .Kind Kinds.Bits }}{{ template "Bits:ForwardDeclaration:TypesHeader" . }}{{- end }}
    {{- if Eq .Kind Kinds.Enum }}{{ template "Enum:ForwardDeclaration:TypesHeader" . }}{{- end }}
    {{- if Eq .Kind Kinds.Struct }}{{ template "Struct:ForwardDeclaration:TypesHeader" . }}{{- end }}
    {{- if Eq .Kind Kinds.Table }}{{ template "Table:ForwardDeclaration:TypesHeader" . }}{{- end }}
    {{- if Eq .Kind Kinds.Union }}{{ template "Union:ForwardDeclaration:TypesHeader" . }}{{- end }}
  {{- end }}

  {{- /* Resolve inline object declaration order by defining small inline structs first
    (size <= 4 so can't contain a table or a union), then tables and unions, then
    the remaining types. */}}
  {{- range .Decls }}
    {{- if Eq .Kind Kinds.Struct }}{{ if le .TypeShapeV2.InlineSize 4 }}{{ template "Struct:TypesHeader" . }}{{ end }}{{- end }}
  {{- end }}
  {{- range .Decls }}
    {{- if Eq .Kind Kinds.Table }}{{ template "Table:TypesHeader" . }}{{- end }}
    {{- if Eq .Kind Kinds.Union }}{{ template "Union:TypesHeader" . }}{{- end }}
  {{- end }}

  {{- range .Decls }}
    {{- if Eq .Kind Kinds.Const }}{{ template "Const:TypesHeader" . }}{{- end }}
    {{- if Eq .Kind Kinds.Struct }}{{ if gt .TypeShapeV2.InlineSize 4 }}{{ template "Struct:TypesHeader" . }}{{ end }}{{- end }}
  {{- end }}

  {{ EnsureNamespace "fidl" }}

  {{- range .Decls }}
    {{- if Eq .Kind Kinds.Bits }}{{ template "Bits:Traits:TypesHeader" . }}{{- end }}
    {{- if Eq .Kind Kinds.Struct }}{{ template "Struct:Traits:TypesHeader" . }}{{- end }}
    {{- if Eq .Kind Kinds.Table }}{{ template "Table:Traits:TypesHeader" . }}{{- end }}
    {{- if Eq .Kind Kinds.Union }}{{ template "Union:Traits:TypesHeader" . }}{{- end }}
    {{- if Eq .Kind Kinds.Enum }}{{ template "Enum:Traits:TypesHeader" . }}{{- end }}
  {{- end }}

  {{ EndOfFile }}
{{ end }}

`
