{{/*
// Copyright 2021 The Fuchsia Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
*/}}

{{- define "Protocol:Caller:MessagingHeader" }}
{{- EnsureNamespace "" }}

// Methods to make a sync FIDL call directly on an unowned channel or a
// const reference to a |fidl::ClientEnd<{{ .WireType }}>|,
// avoiding setting up a client.
template<>
class {{ .WireSyncClientImpl }} final :
    public ::fidl::internal::SyncEndpointVeneer<{{ .WireSyncClientImpl }}> {
 public:
{{ "" }}
  {{- /* Client-calling functions do not apply to events. */}}
  {{- range .ClientMethods }}
    {{ .Docs }}
    //{{ template "Method:ClientAllocationComment:Helper" . }}
    {{ .WireResult }} {{ .Name }}({{- RenderParams .RequestArgs }}) {
      {{ .WireRequest }} _request{ {{ RenderForwardParams .RequestArgs }} };
      return {{ .WireResult }}(_client_end(), &_request);
    }
{{ "" }}

    {{- if or .RequestArgs .ResponseArgs }}

      {{- $call_args := (List) }}
      {{- if .RequestArgs }}
        {{- $call_args = (List $call_args "::fidl::BufferSpan _request_buffer" .RequestArgs) }}
      {{- end }}
      {{- if .HasResponse }}
        {{- $call_args = (List $call_args "::fidl::BufferSpan _response_buffer") }}
      {{- end }}


      {{- .Docs }}
      // Caller provides the backing storage for FIDL message via request and response buffers.
      {{ .WireUnownedResult }} {{ .Name }}({{ RenderParams $call_args }}) {\
        {{ .WireRequest }} _request{ {{ RenderForwardParams .RequestArgs }} };
        return {{ .WireUnownedResult }}(_client_end()
          {{- if .RequestArgs -}}
            , _request_buffer.data, _request_buffer.capacity
          {{- end -}}
          , &_request
          {{- if .HasResponse -}}
            , _response_buffer.data, _response_buffer.capacity
          {{- end -}}
        );
      }

    {{- end }}
{{ "" }}
  {{- end }}

 private:
  ::fidl::UnownedClientEnd<{{ . }}> _client_end() const {
    return ::fidl::UnownedClientEnd<{{ . }}>(_channel());
  }
};
{{- end }}

