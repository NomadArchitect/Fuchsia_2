// Copyright 2021 The Fuchsia Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

package codegen

const fileMessagingHeaderTmpl = `
{{- define "Filename:MessagingHeader" -}}
fidl/{{ .LibraryDots }}/cpp/wire_messaging.h
{{- end }}


{{- define "File:MessagingHeader" -}}
  {{- UseWire -}}
  // WARNING: This file is machine generated by fidlgen.

  #pragma once

  #include <{{ .Library | Filename "Markers" }}>
  #include <{{ .Library | Filename "TypesHeader" }}>

  #include <lib/fidl/llcpp/wire_messaging.h>

  {{ IfdefFuchsia }}
    #include <lib/fidl/llcpp/client.h>
    #include <lib/fidl/llcpp/connect_service.h>
    #include <lib/fidl/llcpp/server.h>
    #include <lib/fidl/llcpp/service_handler_interface.h>
    #include <lib/fidl/llcpp/sync_call.h>
  {{ EndifFuchsia }}

  {{ range .Dependencies -}}
    #include <{{ . | Filename "MessagingHeader" }}>
  {{ end -}}


  {{- range .Decls }}
    {{ if Eq .Kind Kinds.Protocol -}}
      {{ $protocol := . }}
      {{- range $transport, $_ := .Transports }}
        {{- if eq $transport "Channel" -}}
          {{ template "Protocol:ForwardDeclaration:MessagingHeader" $protocol }}
        {{- end }}
      {{- end }}
    {{ end }}
    {{ if Eq .Kind Kinds.Service }}
      {{ template "Service:ForwardDeclaration:MessagingHeader" . }}
    {{- end }}
  {{- end }}

  {{- range .Decls }}
    {{- if Eq .Kind Kinds.Protocol -}}{{ $protocol := . }}
    {{- range $transport, $_ := .Transports }}{{- if eq $transport "Channel" -}}
    {{ template "Protocol:MessagingHeader" $protocol }}
    {{- end }}{{ end }}{{- end }}
    {{- if Eq .Kind Kinds.Service }}{{ template "Service:MessagingHeader" . }}{{- end }}
  {{- end }}

  {{ EnsureNamespace "fidl" }}

  {{- range .Decls }}
  {{- if Eq .Kind Kinds.Protocol -}}{{ $protocol := . }}
  {{- range $transport, $_ := .Transports }}{{- if eq $transport "Channel" -}}
  {{ template "Protocol:Traits:MessagingHeader" $protocol }}
  {{- end }}{{ end }}{{- end }}
  {{- end }}

  {{- range .Decls }}
      {{- if Eq .Kind Kinds.Protocol }}{{ $protocol := . }}
      {{- range $transport, $_ := .Transports }}{{- if eq $transport "Channel" -}}
          {{- range $protocol.TwoWayMethods }}
              {{ template "Method:ResponseContext:MessagingHeader" . }}
          {{- end }}
          {{ template "Protocol:ClientImpl:MessagingHeader" $protocol }}
          {{ "" }}
          {{ template "Protocol:EventSender:MessagingHeader" $protocol }}
          {{ "" }}
      {{- end }}{{ end }}{{ end }}
  {{- end }}
  {{ EndOfFile }}
{{ end }}

`
