// WARNING: This file is machine generated by fidlgen.

#pragma once

#include <fidl/test.transitivedependencies/cpp/common_types.h>
#include <fidl/test.transitivedependencies/cpp/markers.h>
#include <lib/fidl/cpp/coding_traits.h>
#include <lib/fidl/cpp/internal/codable_base.h>
#include <lib/fidl/cpp/unified_messaging.h>

#include <cinttypes>
#include <string>

#ifdef __Fuchsia__

#endif  // __Fuchsia__

#include <fidl/test.middle/cpp/natural_types.h>

namespace test_transitivedependencies {
class Baz;

extern "C" const fidl_type_t test_transitivedependencies_BazTable;

class Baz final : public ::fidl::internal::CodableBase<Baz> {
 private:
  struct Storage_;

 public:
  Baz(Storage_ storage) noexcept : storage_(std::move(storage)) {}
  Baz(::test_middle::Bar g) noexcept : storage_({.g = std::move(g)}) {}
  Baz() : Baz(Storage_{}) {}

  Baz(Baz&&) noexcept = default;
  Baz& operator=(Baz&&) noexcept = default;
  Baz(const Baz& other) noexcept : Baz(other.CloneStorage_()) {}
  Baz& operator=(const Baz& other) noexcept {
    storage_ = other.CloneStorage_();
    return *this;
  }

  const ::test_middle::Bar& g() const { return storage_.g; }

  ::test_middle::Bar& g() { return storage_.g; }

 private:
  friend ::fidl::internal::CodableBase<Baz>;
  friend ::fidl::CodingTraits<Baz>;
  Baz(::fidl::Decoder& decoder);
  template <typename Payload>
  friend auto ::fidl::internal::EncodeTransactionalMessageWithoutValidating(
      ::fidl::Encoder& encoder, Payload&& payload)
      -> ::fidl::HLCPPOutgoingMessage;
  void EncodeWithoutValidating(::fidl::Encoder& encoder, size_t offset);

  struct Storage_ final {
    ::test_middle::Bar g{};
  };

  Storage_ storage_;
  Storage_ CloneStorage_() const;
};

}  // namespace test_transitivedependencies
namespace fidl {

#ifdef __Fuchsia__
extern "C" const fidl_type_t test_transitivedependencies_BazTable;

template <>
struct IsFidlType<::test_transitivedependencies::Baz> : public std::true_type {
};

template <>
struct ::fidl::internal::TypeTraits<::test_transitivedependencies::Baz> final {
 public:
  static constexpr const fidl_type_t* kCodingTable =
      &test_transitivedependencies_BazTable;
};

template <>
struct CodingTraits<::test_transitivedependencies::Baz> {
  static constexpr size_t inline_size_v1_no_ee = 4;
  static constexpr size_t inline_size_v2 = 4;

  template <class EncoderImpl>
  static void Encode(
      EncoderImpl* encoder, ::test_transitivedependencies::Baz* value,
      size_t offset,
      cpp17::optional<HandleInformation> maybe_handle_info = cpp17::nullopt) {
    [[maybe_unused]] uint32_t field_offset;
    field_offset =
        encoder->wire_format() == ::fidl::internal::WireFormatVersion::kV1 ? 0
                                                                           : 0;
    ::fidl::Encode(encoder, &value->storage_.g, offset + field_offset);
  }

  template <typename DecoderImpl>
  static void Decode(DecoderImpl* decoder,
                     ::test_transitivedependencies::Baz* value, size_t offset) {
    ::fidl::Decode(decoder, &value->storage_.g, offset + 0);
  }
};
#endif  // __Fuchsia__

}  // namespace fidl
