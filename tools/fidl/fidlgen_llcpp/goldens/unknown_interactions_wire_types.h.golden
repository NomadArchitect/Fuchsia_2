// WARNING: This file is machine generated by fidlgen.

#pragma once

#include <lib/fidl/llcpp/array.h>
#include <lib/fidl/llcpp/coding.h>
#include <lib/fidl/llcpp/envelope.h>
#include <lib/fidl/llcpp/message.h>
#include <lib/fidl/llcpp/message_storage.h>
#include <lib/fidl/llcpp/object_view.h>
#include <lib/fidl/llcpp/string_view.h>
#include <lib/fidl/llcpp/traits.h>
#include <lib/fidl/llcpp/wire_types.h>
#include <lib/stdcompat/optional.h>

#include <cinttypes>
#ifdef __Fuchsia__
#include <lib/zx/channel.h>

#endif  // __Fuchsia__

#include <fidl/test.unknowninteractions/cpp/common_types.h>
#include <fidl/test.unknowninteractions/cpp/markers.h>

namespace test_unknowninteractions {
namespace wire {
struct ExampleFlexibleTwoWayResponse;

struct ExampleFlexibleTwoWayTopResponse;

class ExampleFlexibleTwoWayResult;

extern "C" const fidl_type_t
    test_unknowninteractions_Example_FlexibleTwoWay_ResponseTable;

struct ExampleFlexibleTwoWayResponse {
  uint8_t __reserved = {};
};

extern "C" const fidl_type_t
    test_unknowninteractions_Example_FlexibleTwoWay_ResultTable;

class ExampleFlexibleTwoWayResult {
 public:
  using Response =
      test_unknowninteractions::wire::ExampleFlexibleTwoWayResponse;

  ExampleFlexibleTwoWayResult()
      : ordinal_(::test_unknowninteractions::wire::ExampleFlexibleTwoWayResult::
                     Ordinal::Invalid),
        envelope_{} {}

  ExampleFlexibleTwoWayResult(const ExampleFlexibleTwoWayResult&) = default;
  ExampleFlexibleTwoWayResult& operator=(const ExampleFlexibleTwoWayResult&) =
      default;
  ExampleFlexibleTwoWayResult(ExampleFlexibleTwoWayResult&&) = default;
  ExampleFlexibleTwoWayResult& operator=(ExampleFlexibleTwoWayResult&&) =
      default;

  enum class Tag : fidl_xunion_tag_t {
    kResponse = 1,      // 0x1
    kTransportErr = 3,  // 0x3
  };

  bool has_invalid_tag() const {
    return ordinal_ == ::test_unknowninteractions::wire::
                           ExampleFlexibleTwoWayResult::Ordinal::Invalid;
  }

  bool is_response() const {
    return ordinal_ == ::test_unknowninteractions::wire::
                           ExampleFlexibleTwoWayResult::Ordinal::kResponse;
  }

  static ExampleFlexibleTwoWayResult WithResponse(
      ::test_unknowninteractions::wire::ExampleFlexibleTwoWayResponse val) {
    ExampleFlexibleTwoWayResult result;
    result.ordinal_ = ::test_unknowninteractions::wire::
        ExampleFlexibleTwoWayResult::Ordinal::kResponse;
    result.envelope_
        .As<::test_unknowninteractions::wire::ExampleFlexibleTwoWayResponse>()
        .set_data(std::move(val));
    return result;
  }

  ::test_unknowninteractions::wire::ExampleFlexibleTwoWayResponse& response() {
    ZX_ASSERT(ordinal_ == ::test_unknowninteractions::wire::
                              ExampleFlexibleTwoWayResult::Ordinal::kResponse);
    return envelope_
        .As<::test_unknowninteractions::wire::ExampleFlexibleTwoWayResponse>()
        .get_data();
  }
  const ::test_unknowninteractions::wire::ExampleFlexibleTwoWayResponse&
  response() const {
    ZX_ASSERT(ordinal_ == ::test_unknowninteractions::wire::
                              ExampleFlexibleTwoWayResult::Ordinal::kResponse);
    return envelope_
        .As<::test_unknowninteractions::wire::ExampleFlexibleTwoWayResponse>()
        .get_data();
  }

  bool is_transport_err() const {
    return ordinal_ == ::test_unknowninteractions::wire::
                           ExampleFlexibleTwoWayResult::Ordinal::kTransportErr;
  }

  static ExampleFlexibleTwoWayResult WithTransportErr(int32_t val) {
    ExampleFlexibleTwoWayResult result;
    result.ordinal_ = ::test_unknowninteractions::wire::
        ExampleFlexibleTwoWayResult::Ordinal::kTransportErr;
    result.envelope_.As<int32_t>().set_data(std::move(val));
    return result;
  }

  int32_t& transport_err() {
    ZX_ASSERT(ordinal_ ==
              ::test_unknowninteractions::wire::ExampleFlexibleTwoWayResult::
                  Ordinal::kTransportErr);
    return envelope_.As<int32_t>().get_data();
  }
  const int32_t& transport_err() const {
    ZX_ASSERT(ordinal_ ==
              ::test_unknowninteractions::wire::ExampleFlexibleTwoWayResult::
                  Ordinal::kTransportErr);
    return envelope_.As<int32_t>().get_data();
  }
  ::test_unknowninteractions::wire::ExampleFlexibleTwoWayResult::Tag Which()
      const {
    ZX_ASSERT(!has_invalid_tag());
    return static_cast<
        ::test_unknowninteractions::wire::ExampleFlexibleTwoWayResult::Tag>(
        ordinal_);
  }

 private:
  enum class Ordinal : fidl_xunion_tag_t {
    Invalid = 0,
    kResponse = 1,      // 0x1
    kTransportErr = 3,  // 0x3
  };

  static void SizeAndOffsetAssertionHelper();
  ::test_unknowninteractions::wire::ExampleFlexibleTwoWayResult::Ordinal
      ordinal_;
  FIDL_ALIGNDECL
  ::fidl::UntypedEnvelope envelope_;
};

extern "C" const fidl_type_t
    test_unknowninteractions_ExampleFlexibleTwoWayTopResponseTable;

struct ExampleFlexibleTwoWayTopResponse {
  using Result = test_unknowninteractions::wire::ExampleFlexibleTwoWayResult;

  ::test_unknowninteractions::wire::ExampleFlexibleTwoWayResult result = {};
};

}  // namespace wire
}  // namespace test_unknowninteractions
namespace fidl {

// TODO(fxbug.dev/95833) Remove this.
template <>
struct DeprecatedCTypeTraits<
    ::test_unknowninteractions::wire::ExampleFlexibleTwoWayResponse> {
  static constexpr const fidl_type_t* kType =
      &::test_unknowninteractions::wire::
          test_unknowninteractions_Example_FlexibleTwoWay_ResponseTable;
};

template <>
struct TypeTraits<
    ::test_unknowninteractions::wire::ExampleFlexibleTwoWayResponse> {
  static constexpr uint32_t kMaxNumHandles = 0;
  static constexpr uint32_t kMaxDepth = 0;
  static constexpr uint32_t kPrimarySize = 1;
  static constexpr uint32_t kPrimarySizeV1 = 1;
  [[maybe_unused]] static constexpr uint32_t kMaxOutOfLine = 0;
  static constexpr uint32_t kMaxOutOfLineV1 = 0;
  static constexpr bool kHasEnvelope = false;
  static constexpr bool kHasPointer = false;
};

template <>
struct IsFidlType<
    ::test_unknowninteractions::wire::ExampleFlexibleTwoWayResponse>
    : public std::true_type {};
template <>
struct IsStruct<::test_unknowninteractions::wire::ExampleFlexibleTwoWayResponse>
    : public std::true_type {};
static_assert(std::is_standard_layout_v<
              ::test_unknowninteractions::wire::ExampleFlexibleTwoWayResponse>);
static_assert(
    offsetof(::test_unknowninteractions::wire::ExampleFlexibleTwoWayResponse,
             __reserved) == 0);
static_assert(
    sizeof(::test_unknowninteractions::wire::ExampleFlexibleTwoWayResponse) ==
    TypeTraits<::test_unknowninteractions::wire::
                   ExampleFlexibleTwoWayResponse>::kPrimarySize);

template <bool IsRecursive>
struct ::fidl::internal::WireCodingTraits<
    ::test_unknowninteractions::wire::ExampleFlexibleTwoWayResponse,
    ::fidl::internal::WireCodingConstraintEmpty, IsRecursive> {
  static constexpr size_t inline_size = 1;
  static constexpr auto kMembers = std::make_tuple(
      ::fidl::internal::WireStructMemberCodingInfo<
          uint8_t, fidl::internal::WireCodingConstraintEmpty, IsRecursive>());
  static constexpr bool kHasPadding = false;
  using Base = WireStructCodingTraitsBase<
      ::test_unknowninteractions::wire::ExampleFlexibleTwoWayResponse,
      ::fidl::internal::WireCodingConstraintEmpty, IsRecursive>;
  static constexpr bool is_memcpy_compatible = Base::is_memcpy_compatible;

  static void Encode(
      internal::WireEncoder* encoder,
      ::test_unknowninteractions::wire::ExampleFlexibleTwoWayResponse* value,
      ::fidl::internal::WirePosition position,
      RecursionDepth<IsRecursive> recursion_depth) {
    if constexpr (is_memcpy_compatible) {
      memcpy(
          position.As<void>(), value,
          sizeof(
              ::test_unknowninteractions::wire::ExampleFlexibleTwoWayResponse));
    } else {
      internal::WireCodingTraits<uint8_t,
                                 fidl::internal::WireCodingConstraintEmpty,
                                 IsRecursive>::Encode(encoder,
                                                      &value->__reserved,
                                                      position + 0,
                                                      recursion_depth);
    }
  }
  static void Decode(internal::WireDecoder* decoder,
                     ::fidl::internal::WirePosition position,
                     RecursionDepth<IsRecursive> recursion_depth) {
    if constexpr (!Base::are_members_memcpy_compatible) {
      internal::WireCodingTraits<uint8_t,
                                 fidl::internal::WireCodingConstraintEmpty,
                                 IsRecursive>::Decode(decoder, position + 0,
                                                      recursion_depth);
    }
    if (*position.As<uint8_t>() != 0) {
      decoder->SetError(kCodingErrorInvalidPaddingBytes);
    }
  }
};

// TODO(fxbug.dev/95833) Remove this.
template <>
struct DeprecatedCTypeTraits<
    ::test_unknowninteractions::wire::ExampleFlexibleTwoWayTopResponse> {
  static constexpr const fidl_type_t* kType =
      &::test_unknowninteractions::wire::
          test_unknowninteractions_ExampleFlexibleTwoWayTopResponseTable;
};

template <>
struct TypeTraits<
    ::test_unknowninteractions::wire::ExampleFlexibleTwoWayTopResponse> {
  static constexpr uint32_t kMaxNumHandles = 0;
  static constexpr uint32_t kMaxDepth = 1;
  static constexpr uint32_t kPrimarySize = 16;
  static constexpr uint32_t kPrimarySizeV1 = 24;
  [[maybe_unused]] static constexpr uint32_t kMaxOutOfLine = 0;
  static constexpr uint32_t kMaxOutOfLineV1 = 8;
  static constexpr bool kHasEnvelope = true;
  static constexpr bool kHasPointer = true;
};

template <>
struct IsFidlType<
    ::test_unknowninteractions::wire::ExampleFlexibleTwoWayTopResponse>
    : public std::true_type {};
template <>
struct IsStruct<
    ::test_unknowninteractions::wire::ExampleFlexibleTwoWayTopResponse>
    : public std::true_type {};
static_assert(
    std::is_standard_layout_v<
        ::test_unknowninteractions::wire::ExampleFlexibleTwoWayTopResponse>);
static_assert(
    offsetof(::test_unknowninteractions::wire::ExampleFlexibleTwoWayTopResponse,
             result) == 0);
static_assert(
    sizeof(
        ::test_unknowninteractions::wire::ExampleFlexibleTwoWayTopResponse) ==
    TypeTraits<::test_unknowninteractions::wire::
                   ExampleFlexibleTwoWayTopResponse>::kPrimarySize);

template <bool IsRecursive>
struct ::fidl::internal::WireCodingTraits<
    ::test_unknowninteractions::wire::ExampleFlexibleTwoWayTopResponse,
    ::fidl::internal::WireCodingConstraintEmpty, IsRecursive> {
  static constexpr size_t inline_size = 16;
  static constexpr auto kMembers = std::make_tuple(
      ::fidl::internal::WireStructMemberCodingInfo<
          ::test_unknowninteractions::wire::ExampleFlexibleTwoWayResult,
          fidl::internal::WireCodingConstraintUnion<false>, IsRecursive>());
  static constexpr bool kHasPadding = false;
  using Base = WireStructCodingTraitsBase<
      ::test_unknowninteractions::wire::ExampleFlexibleTwoWayTopResponse,
      ::fidl::internal::WireCodingConstraintEmpty, IsRecursive>;
  static constexpr bool is_memcpy_compatible = Base::is_memcpy_compatible;

  static void Encode(
      internal::WireEncoder* encoder,
      ::test_unknowninteractions::wire::ExampleFlexibleTwoWayTopResponse* value,
      ::fidl::internal::WirePosition position,
      RecursionDepth<IsRecursive> recursion_depth) {
    if constexpr (is_memcpy_compatible) {
      memcpy(position.As<void>(), value,
             sizeof(::test_unknowninteractions::wire::
                        ExampleFlexibleTwoWayTopResponse));
    } else {
      internal::WireCodingTraits<
          ::test_unknowninteractions::wire::ExampleFlexibleTwoWayResult,
          fidl::internal::WireCodingConstraintUnion<false>,
          IsRecursive>::Encode(encoder, &value->result, position + 0,
                               recursion_depth);
    }
  }
  static void Decode(internal::WireDecoder* decoder,
                     ::fidl::internal::WirePosition position,
                     RecursionDepth<IsRecursive> recursion_depth) {
    if constexpr (!Base::are_members_memcpy_compatible) {
      internal::WireCodingTraits<
          ::test_unknowninteractions::wire::ExampleFlexibleTwoWayResult,
          fidl::internal::WireCodingConstraintUnion<false>,
          IsRecursive>::Decode(decoder, position + 0, recursion_depth);
    }
  }
};

template <>
struct TypeTraits<
    ::test_unknowninteractions::wire::ExampleFlexibleTwoWayResult> {
  static constexpr uint32_t kMaxNumHandles = 0;
  static constexpr uint32_t kMaxDepth = 1;
  static constexpr uint32_t kPrimarySize = 16;
  static constexpr uint32_t kPrimarySizeV1 = 24;
  [[maybe_unused]] static constexpr uint32_t kMaxOutOfLine = 0;
  static constexpr uint32_t kMaxOutOfLineV1 = 8;
  static constexpr bool kHasEnvelope = true;
  static constexpr bool kHasPointer = true;
};

template <>
struct IsFidlType<::test_unknowninteractions::wire::ExampleFlexibleTwoWayResult>
    : public std::true_type {};
template <>
struct IsUnion<::test_unknowninteractions::wire::ExampleFlexibleTwoWayResult>
    : public std::true_type {};
static_assert(std::is_standard_layout_v<
              ::test_unknowninteractions::wire::ExampleFlexibleTwoWayResult>);

template <typename Constraint, bool IsRecursive>
struct ::fidl::internal::WireCodingTraits<
    ::test_unknowninteractions::wire::ExampleFlexibleTwoWayResult, Constraint,
    IsRecursive> {
  static constexpr size_t inline_size = 16;
  static constexpr bool is_memcpy_compatible = false;

  static void Encode(
      internal::WireEncoder* encoder,
      ::test_unknowninteractions::wire::ExampleFlexibleTwoWayResult* value,
      ::fidl::internal::WirePosition position,
      RecursionDepth<IsRecursive> recursion_depth) {
    fidl_xunion_v2_t* u = reinterpret_cast<fidl_xunion_v2_t*>(value);

    if (unlikely(u->tag == 0)) {
      if constexpr (Constraint::is_optional) {
        *position.As<fidl_xunion_v2_t>() = {};
        return;
      }
      encoder->SetError(kCodingErrorInvalidUnionTag);
      return;
    }

    RecursionDepth<IsRecursive> inner_depth = recursion_depth.Add(encoder, 1);
    if (!inner_depth.IsValid()) {
      return;
    }

    *position.As<fidl_xunion_tag_t>() = u->tag;

    size_t inline_size;
    switch (u->tag) {
      case 1:  // ::test_unknowninteractions::wire::ExampleFlexibleTwoWayResult::Tag::kResponse
        inline_size = ::fidl::internal::WireCodingTraits<
            ::test_unknowninteractions::wire::ExampleFlexibleTwoWayResponse,
            fidl::internal::WireCodingConstraintEmpty,
            IsRecursive>::inline_size;
        break;
      case 3:  // ::test_unknowninteractions::wire::ExampleFlexibleTwoWayResult::Tag::kTransportErr
        inline_size = ::fidl::internal::WireCodingTraits<
            int32_t, fidl::internal::WireCodingConstraintEmpty,
            IsRecursive>::inline_size;
        break;
      default:
        inline_size = 0;
        break;
    }
    ::fidl::internal::EncodeFn<IsRecursive> encode_fn;
    switch (u->tag) {
      case 1:  // ::test_unknowninteractions::wire::ExampleFlexibleTwoWayResult::Tag::kResponse
        encode_fn = ::fidl::internal::MakeEncodeFn<
            ::test_unknowninteractions::wire::ExampleFlexibleTwoWayResponse,
            fidl::internal::WireCodingConstraintEmpty, IsRecursive>();
        break;
      case 3:  // ::test_unknowninteractions::wire::ExampleFlexibleTwoWayResult::Tag::kTransportErr
        encode_fn = ::fidl::internal::MakeEncodeFn<
            int32_t, fidl::internal::WireCodingConstraintEmpty, IsRecursive>();
        break;
      default:
        encode_fn = nullptr;
        break;
    }
    WireEncodeEnvelope(inline_size, encode_fn, encoder, &u->envelope,
                       position + sizeof(fidl_xunion_tag_t), inner_depth);
  }

  static void Decode(internal::WireDecoder* decoder,
                     ::fidl::internal::WirePosition position,
                     RecursionDepth<IsRecursive> recursion_depth) {
    ::test_unknowninteractions::wire::ExampleFlexibleTwoWayResult::Tag tag =
        *position.As<::test_unknowninteractions::wire::
                         ExampleFlexibleTwoWayResult::Tag>();
    if (unlikely(static_cast<uint64_t>(tag) == 0)) {
      if constexpr (!Constraint::is_optional) {
        decoder->SetError(kCodingErrorInvalidUnionTag);
        return;
      }
      static_assert(sizeof(fidl_envelope_v2_t) == sizeof(uint64_t));
      if (*(position + sizeof(fidl_xunion_tag_t)).As<uint64_t>() != 0) {
        decoder->SetError(kCodingErrorZeroTagButNonZeroEnvelope);
      }
      return;
    }

    RecursionDepth<IsRecursive> inner_depth = recursion_depth.Add(decoder, 1);
    if (!inner_depth.IsValid()) {
      return;
    }

    size_t inline_size;
    switch (tag) {
      case ::test_unknowninteractions::wire::ExampleFlexibleTwoWayResult::Tag::
          kResponse:
        inline_size = ::fidl::internal::WireCodingTraits<
            ::test_unknowninteractions::wire::ExampleFlexibleTwoWayResponse,
            fidl::internal::WireCodingConstraintEmpty,
            IsRecursive>::inline_size;
        break;
      case ::test_unknowninteractions::wire::ExampleFlexibleTwoWayResult::Tag::
          kTransportErr:
        inline_size = ::fidl::internal::WireCodingTraits<
            int32_t, fidl::internal::WireCodingConstraintEmpty,
            IsRecursive>::inline_size;
        break;
      default:
        inline_size = 0;
        break;
    }
    DecodeFn<IsRecursive> decode_fn;
    switch (tag) {
      case ::test_unknowninteractions::wire::ExampleFlexibleTwoWayResult::Tag::
          kResponse:
        decode_fn = ::fidl::internal::MakeDecodeFn<
            ::test_unknowninteractions::wire::ExampleFlexibleTwoWayResponse,
            fidl::internal::WireCodingConstraintEmpty, IsRecursive>();
        break;
      case ::test_unknowninteractions::wire::ExampleFlexibleTwoWayResult::Tag::
          kTransportErr:
        decode_fn = ::fidl::internal::MakeDecodeFn<
            int32_t, fidl::internal::WireCodingConstraintEmpty, IsRecursive>();
        break;
      default:
        decode_fn = nullptr;
        break;
    }
    ::fidl::internal::WireDecodeStrictEnvelope(
        inline_size, decode_fn, decoder, position + sizeof(fidl_xunion_tag_t),
        inner_depth);
  }
};

// Top-level union.
template <bool IsRecursive>
struct ::fidl::internal::WireCodingTraits<
    ::test_unknowninteractions::wire::ExampleFlexibleTwoWayResult,
    ::fidl::internal::WireCodingConstraintEmpty, IsRecursive>
    : public ::fidl::internal::WireCodingTraits<
          ::test_unknowninteractions::wire::ExampleFlexibleTwoWayResult,
          ::fidl::internal::WireCodingConstraintUnion<false>, IsRecursive> {};

}  // namespace fidl
