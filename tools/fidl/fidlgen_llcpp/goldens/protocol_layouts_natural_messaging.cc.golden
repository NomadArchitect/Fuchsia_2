// WARNING: This file is machine generated by fidlgen_llcpp.

#include <fidl/test.protocollayouts/cpp/natural_messaging.h>

namespace test_protocollayouts {
[[maybe_unused]] constexpr inline uint64_t
    kMainProtocol_OneWayAnonComposed_Ordinal = 467706262354916833lu;
[[maybe_unused]] constexpr inline uint64_t
    kMainProtocol_TwoWayAnonComposed_Ordinal = 1634702755099390832lu;
[[maybe_unused]] constexpr inline uint64_t
    kMainProtocol_TwoWayAnonComposedWithError_Ordinal = 3374101322700362141lu;
[[maybe_unused]] constexpr inline uint64_t
    kMainProtocol_OnAnonComposed_Ordinal = 9198778981238868491lu;
[[maybe_unused]] constexpr inline uint64_t
    kMainProtocol_OnAnonComposedWithError_Ordinal = 712214127111113275lu;
[[maybe_unused]] constexpr inline uint64_t
    kMainProtocol_OneWayNamedComposed_Ordinal = 6735359826241449560lu;
[[maybe_unused]] constexpr inline uint64_t
    kMainProtocol_TwoWayNamedComposed_Ordinal = 1110122450485917712lu;
[[maybe_unused]] constexpr inline uint64_t
    kMainProtocol_TwoWayNamedComposedWithError_Ordinal = 3520341666774118271lu;
[[maybe_unused]] constexpr inline uint64_t
    kMainProtocol_OnNamedComposed_Ordinal = 6802961197456477674lu;
[[maybe_unused]] constexpr inline uint64_t
    kMainProtocol_OnNamedComposedWithError_Ordinal = 7488207288618998795lu;
[[maybe_unused]] constexpr inline uint64_t kMainProtocol_OneWayImport_Ordinal =
    374039999976906043lu;
[[maybe_unused]] constexpr inline uint64_t kMainProtocol_TwoWayImport_Ordinal =
    3167860988423964164lu;
[[maybe_unused]] constexpr inline uint64_t
    kMainProtocol_TwoWayImportWithError_Ordinal = 4837028007581646602lu;
[[maybe_unused]] constexpr inline uint64_t kMainProtocol_OnImport_Ordinal =
    6584793811321990352lu;
[[maybe_unused]] constexpr inline uint64_t
    kMainProtocol_OnImportWithError_Ordinal = 1123803631971094487lu;
[[maybe_unused]] constexpr inline uint64_t kMainProtocol_OneWayLocal_Ordinal =
    6085941264859402051lu;
[[maybe_unused]] constexpr inline uint64_t kMainProtocol_TwoWayLocal_Ordinal =
    7763901300032164763lu;
[[maybe_unused]] constexpr inline uint64_t
    kMainProtocol_TwoWayLocalWithError_Ordinal = 5609487496960056151lu;
[[maybe_unused]] constexpr inline uint64_t kMainProtocol_OnLocal_Ordinal =
    4199259762307646332lu;
[[maybe_unused]] constexpr inline uint64_t
    kMainProtocol_OnLocalWithError_Ordinal = 8767483445230259748lu;
[[maybe_unused]] constexpr inline uint64_t kMainProtocol_OneWayAnon_Ordinal =
    4203317713771984620lu;
[[maybe_unused]] constexpr inline uint64_t kMainProtocol_TwoWayAnon_Ordinal =
    7435080039097281487lu;
[[maybe_unused]] constexpr inline uint64_t
    kMainProtocol_TwoWayAnonWithError_Ordinal = 7770394869745610225lu;
[[maybe_unused]] constexpr inline uint64_t kMainProtocol_OnAnon_Ordinal =
    7275479350674227467lu;
[[maybe_unused]] constexpr inline uint64_t
    kMainProtocol_OnAnonWithError_Ordinal = 3672186790919812761lu;

#ifdef __Fuchsia__
}  // namespace test_protocollayouts
void fidl::internal::NaturalClientImpl<::test_protocollayouts::MainProtocol>::
    TwoWayAnonComposed(
        ::test_protocollayouts_imported::
            ComposedProtocolTwoWayAnonComposedRequest&& payload,
        ::fidl::ClientCallback<
            ::test_protocollayouts::MainProtocol::TwoWayAnonComposed>&&
            _callback) const {
  ::fidl::internal::NaturalMessageEncoder<::fidl::internal::ChannelTransport>
      _encoder{
          ::test_protocollayouts::kMainProtocol_TwoWayAnonComposed_Ordinal};
  return messenger().TwoWay(
      ::fidl::internal::EncodeTransactionalMessage(_encoder,
                                                   std::move(payload)),
      ::fidl::internal::MakeResponseContext<
          ::fidl::Response<
              ::test_protocollayouts::MainProtocol::TwoWayAnonComposed>,
          ::fidl::ClientCallback<
              ::test_protocollayouts::MainProtocol::TwoWayAnonComposed>>(
          ::test_protocollayouts::kMainProtocol_TwoWayAnonComposed_Ordinal,
          std::move(_callback)));
}
void fidl::internal::NaturalClientImpl<::test_protocollayouts::MainProtocol>::
    TwoWayAnonComposed(
        ::test_protocollayouts_imported::
            ComposedProtocolTwoWayAnonComposedRequest&& payload,
        ::fidl::ClientResponseCallback<
            ::test_protocollayouts::MainProtocol::TwoWayAnonComposed>&&
            _callback) const {
  ::fidl::internal::NaturalMessageEncoder<::fidl::internal::ChannelTransport>
      _encoder{
          ::test_protocollayouts::kMainProtocol_TwoWayAnonComposed_Ordinal};
  return messenger().TwoWay(
      ::fidl::internal::EncodeTransactionalMessage(_encoder,
                                                   std::move(payload)),
      ::fidl::internal::MakeResponseContext<
          ::fidl::Response<
              ::test_protocollayouts::MainProtocol::TwoWayAnonComposed>,
          ::fidl::ClientResponseCallback<
              ::test_protocollayouts::MainProtocol::TwoWayAnonComposed>>(
          ::test_protocollayouts::kMainProtocol_TwoWayAnonComposed_Ordinal,
          std::move(_callback)));
}

void fidl::internal::NaturalClientImpl<::test_protocollayouts::MainProtocol>::
    TwoWayAnonComposedWithError(
        ::test_protocollayouts_imported::
            ComposedProtocolTwoWayAnonComposedWithErrorRequest&& payload,
        ::fidl::ClientCallback<
            ::test_protocollayouts::MainProtocol::TwoWayAnonComposedWithError>&&
            _callback) const {
  ::fidl::internal::NaturalMessageEncoder<::fidl::internal::ChannelTransport>
      _encoder{::test_protocollayouts::
                   kMainProtocol_TwoWayAnonComposedWithError_Ordinal};
  return messenger().TwoWay(
      ::fidl::internal::EncodeTransactionalMessage(_encoder,
                                                   std::move(payload)),
      ::fidl::internal::MakeResponseContext<
          ::fidl::Response<::test_protocollayouts::MainProtocol::
                               TwoWayAnonComposedWithError>,
          ::fidl::ClientCallback<::test_protocollayouts::MainProtocol::
                                     TwoWayAnonComposedWithError>>(
          ::test_protocollayouts::
              kMainProtocol_TwoWayAnonComposedWithError_Ordinal,
          std::move(_callback)));
}
void fidl::internal::NaturalClientImpl<::test_protocollayouts::MainProtocol>::
    TwoWayAnonComposedWithError(
        ::test_protocollayouts_imported::
            ComposedProtocolTwoWayAnonComposedWithErrorRequest&& payload,
        ::fidl::ClientResponseCallback<
            ::test_protocollayouts::MainProtocol::TwoWayAnonComposedWithError>&&
            _callback) const {
  ::fidl::internal::NaturalMessageEncoder<::fidl::internal::ChannelTransport>
      _encoder{::test_protocollayouts::
                   kMainProtocol_TwoWayAnonComposedWithError_Ordinal};
  return messenger().TwoWay(
      ::fidl::internal::EncodeTransactionalMessage(_encoder,
                                                   std::move(payload)),
      ::fidl::internal::MakeResponseContext<
          ::fidl::Response<::test_protocollayouts::MainProtocol::
                               TwoWayAnonComposedWithError>,
          ::fidl::ClientResponseCallback<::test_protocollayouts::MainProtocol::
                                             TwoWayAnonComposedWithError>>(
          ::test_protocollayouts::
              kMainProtocol_TwoWayAnonComposedWithError_Ordinal,
          std::move(_callback)));
}

void fidl::internal::NaturalClientImpl<::test_protocollayouts::MainProtocol>::
    TwoWayNamedComposed(
        ::test_protocollayouts_imported::ImportUnionPayload&& payload,
        ::fidl::ClientCallback<
            ::test_protocollayouts::MainProtocol::TwoWayNamedComposed>&&
            _callback) const {
  ::fidl::internal::NaturalMessageEncoder<::fidl::internal::ChannelTransport>
      _encoder{
          ::test_protocollayouts::kMainProtocol_TwoWayNamedComposed_Ordinal};
  return messenger().TwoWay(
      ::fidl::internal::EncodeTransactionalMessage(_encoder,
                                                   std::move(payload)),
      ::fidl::internal::MakeResponseContext<
          ::fidl::Response<
              ::test_protocollayouts::MainProtocol::TwoWayNamedComposed>,
          ::fidl::ClientCallback<
              ::test_protocollayouts::MainProtocol::TwoWayNamedComposed>>(
          ::test_protocollayouts::kMainProtocol_TwoWayNamedComposed_Ordinal,
          std::move(_callback)));
}
void fidl::internal::NaturalClientImpl<::test_protocollayouts::MainProtocol>::
    TwoWayNamedComposed(
        ::test_protocollayouts_imported::ImportUnionPayload&& payload,
        ::fidl::ClientResponseCallback<
            ::test_protocollayouts::MainProtocol::TwoWayNamedComposed>&&
            _callback) const {
  ::fidl::internal::NaturalMessageEncoder<::fidl::internal::ChannelTransport>
      _encoder{
          ::test_protocollayouts::kMainProtocol_TwoWayNamedComposed_Ordinal};
  return messenger().TwoWay(
      ::fidl::internal::EncodeTransactionalMessage(_encoder,
                                                   std::move(payload)),
      ::fidl::internal::MakeResponseContext<
          ::fidl::Response<
              ::test_protocollayouts::MainProtocol::TwoWayNamedComposed>,
          ::fidl::ClientResponseCallback<
              ::test_protocollayouts::MainProtocol::TwoWayNamedComposed>>(
          ::test_protocollayouts::kMainProtocol_TwoWayNamedComposed_Ordinal,
          std::move(_callback)));
}

void fidl::internal::NaturalClientImpl<::test_protocollayouts::MainProtocol>::
    TwoWayNamedComposedWithError(
        ::test_protocollayouts_imported::ImportTablePayload&& payload,
        ::fidl::ClientCallback<::test_protocollayouts::MainProtocol::
                                   TwoWayNamedComposedWithError>&& _callback)
        const {
  ::fidl::internal::NaturalMessageEncoder<::fidl::internal::ChannelTransport>
      _encoder{::test_protocollayouts::
                   kMainProtocol_TwoWayNamedComposedWithError_Ordinal};
  return messenger().TwoWay(
      ::fidl::internal::EncodeTransactionalMessage(_encoder,
                                                   std::move(payload)),
      ::fidl::internal::MakeResponseContext<
          ::fidl::Response<::test_protocollayouts::MainProtocol::
                               TwoWayNamedComposedWithError>,
          ::fidl::ClientCallback<::test_protocollayouts::MainProtocol::
                                     TwoWayNamedComposedWithError>>(
          ::test_protocollayouts::
              kMainProtocol_TwoWayNamedComposedWithError_Ordinal,
          std::move(_callback)));
}
void fidl::internal::NaturalClientImpl<::test_protocollayouts::MainProtocol>::
    TwoWayNamedComposedWithError(
        ::test_protocollayouts_imported::ImportTablePayload&& payload,
        ::fidl::ClientResponseCallback<::test_protocollayouts::MainProtocol::
                                           TwoWayNamedComposedWithError>&&
            _callback) const {
  ::fidl::internal::NaturalMessageEncoder<::fidl::internal::ChannelTransport>
      _encoder{::test_protocollayouts::
                   kMainProtocol_TwoWayNamedComposedWithError_Ordinal};
  return messenger().TwoWay(
      ::fidl::internal::EncodeTransactionalMessage(_encoder,
                                                   std::move(payload)),
      ::fidl::internal::MakeResponseContext<
          ::fidl::Response<::test_protocollayouts::MainProtocol::
                               TwoWayNamedComposedWithError>,
          ::fidl::ClientResponseCallback<::test_protocollayouts::MainProtocol::
                                             TwoWayNamedComposedWithError>>(
          ::test_protocollayouts::
              kMainProtocol_TwoWayNamedComposedWithError_Ordinal,
          std::move(_callback)));
}

void fidl::internal::NaturalClientImpl<::test_protocollayouts::MainProtocol>::
    TwoWayImport(::test_protocollayouts_imported::ImportUnionPayload&& payload,
                 ::fidl::ClientCallback<
                     ::test_protocollayouts::MainProtocol::TwoWayImport>&&
                     _callback) const {
  ::fidl::internal::NaturalMessageEncoder<::fidl::internal::ChannelTransport>
      _encoder{::test_protocollayouts::kMainProtocol_TwoWayImport_Ordinal};
  return messenger().TwoWay(
      ::fidl::internal::EncodeTransactionalMessage(_encoder,
                                                   std::move(payload)),
      ::fidl::internal::MakeResponseContext<
          ::fidl::Response<::test_protocollayouts::MainProtocol::TwoWayImport>,
          ::fidl::ClientCallback<
              ::test_protocollayouts::MainProtocol::TwoWayImport>>(
          ::test_protocollayouts::kMainProtocol_TwoWayImport_Ordinal,
          std::move(_callback)));
}
void fidl::internal::NaturalClientImpl<::test_protocollayouts::MainProtocol>::
    TwoWayImport(::test_protocollayouts_imported::ImportUnionPayload&& payload,
                 ::fidl::ClientResponseCallback<
                     ::test_protocollayouts::MainProtocol::TwoWayImport>&&
                     _callback) const {
  ::fidl::internal::NaturalMessageEncoder<::fidl::internal::ChannelTransport>
      _encoder{::test_protocollayouts::kMainProtocol_TwoWayImport_Ordinal};
  return messenger().TwoWay(
      ::fidl::internal::EncodeTransactionalMessage(_encoder,
                                                   std::move(payload)),
      ::fidl::internal::MakeResponseContext<
          ::fidl::Response<::test_protocollayouts::MainProtocol::TwoWayImport>,
          ::fidl::ClientResponseCallback<
              ::test_protocollayouts::MainProtocol::TwoWayImport>>(
          ::test_protocollayouts::kMainProtocol_TwoWayImport_Ordinal,
          std::move(_callback)));
}

void fidl::internal::NaturalClientImpl<::test_protocollayouts::MainProtocol>::
    TwoWayImportWithError(
        ::test_protocollayouts_imported::ImportTablePayload&& payload,
        ::fidl::ClientCallback<
            ::test_protocollayouts::MainProtocol::TwoWayImportWithError>&&
            _callback) const {
  ::fidl::internal::NaturalMessageEncoder<::fidl::internal::ChannelTransport>
      _encoder{
          ::test_protocollayouts::kMainProtocol_TwoWayImportWithError_Ordinal};
  return messenger().TwoWay(
      ::fidl::internal::EncodeTransactionalMessage(_encoder,
                                                   std::move(payload)),
      ::fidl::internal::MakeResponseContext<
          ::fidl::Response<
              ::test_protocollayouts::MainProtocol::TwoWayImportWithError>,
          ::fidl::ClientCallback<
              ::test_protocollayouts::MainProtocol::TwoWayImportWithError>>(
          ::test_protocollayouts::kMainProtocol_TwoWayImportWithError_Ordinal,
          std::move(_callback)));
}
void fidl::internal::NaturalClientImpl<::test_protocollayouts::MainProtocol>::
    TwoWayImportWithError(
        ::test_protocollayouts_imported::ImportTablePayload&& payload,
        ::fidl::ClientResponseCallback<
            ::test_protocollayouts::MainProtocol::TwoWayImportWithError>&&
            _callback) const {
  ::fidl::internal::NaturalMessageEncoder<::fidl::internal::ChannelTransport>
      _encoder{
          ::test_protocollayouts::kMainProtocol_TwoWayImportWithError_Ordinal};
  return messenger().TwoWay(
      ::fidl::internal::EncodeTransactionalMessage(_encoder,
                                                   std::move(payload)),
      ::fidl::internal::MakeResponseContext<
          ::fidl::Response<
              ::test_protocollayouts::MainProtocol::TwoWayImportWithError>,
          ::fidl::ClientResponseCallback<
              ::test_protocollayouts::MainProtocol::TwoWayImportWithError>>(
          ::test_protocollayouts::kMainProtocol_TwoWayImportWithError_Ordinal,
          std::move(_callback)));
}

void fidl::internal::NaturalClientImpl<::test_protocollayouts::MainProtocol>::
    TwoWayLocal(::test_protocollayouts::LocalUnionPayload&& payload,
                ::fidl::ClientCallback<
                    ::test_protocollayouts::MainProtocol::TwoWayLocal>&&
                    _callback) const {
  ::fidl::internal::NaturalMessageEncoder<::fidl::internal::ChannelTransport>
      _encoder{::test_protocollayouts::kMainProtocol_TwoWayLocal_Ordinal};
  return messenger().TwoWay(
      ::fidl::internal::EncodeTransactionalMessage(_encoder,
                                                   std::move(payload)),
      ::fidl::internal::MakeResponseContext<
          ::fidl::Response<::test_protocollayouts::MainProtocol::TwoWayLocal>,
          ::fidl::ClientCallback<
              ::test_protocollayouts::MainProtocol::TwoWayLocal>>(
          ::test_protocollayouts::kMainProtocol_TwoWayLocal_Ordinal,
          std::move(_callback)));
}
void fidl::internal::NaturalClientImpl<::test_protocollayouts::MainProtocol>::
    TwoWayLocal(::test_protocollayouts::LocalUnionPayload&& payload,
                ::fidl::ClientResponseCallback<
                    ::test_protocollayouts::MainProtocol::TwoWayLocal>&&
                    _callback) const {
  ::fidl::internal::NaturalMessageEncoder<::fidl::internal::ChannelTransport>
      _encoder{::test_protocollayouts::kMainProtocol_TwoWayLocal_Ordinal};
  return messenger().TwoWay(
      ::fidl::internal::EncodeTransactionalMessage(_encoder,
                                                   std::move(payload)),
      ::fidl::internal::MakeResponseContext<
          ::fidl::Response<::test_protocollayouts::MainProtocol::TwoWayLocal>,
          ::fidl::ClientResponseCallback<
              ::test_protocollayouts::MainProtocol::TwoWayLocal>>(
          ::test_protocollayouts::kMainProtocol_TwoWayLocal_Ordinal,
          std::move(_callback)));
}

void fidl::internal::NaturalClientImpl<::test_protocollayouts::MainProtocol>::
    TwoWayLocalWithError(
        ::test_protocollayouts::LocalTablePayload&& payload,
        ::fidl::ClientCallback<
            ::test_protocollayouts::MainProtocol::TwoWayLocalWithError>&&
            _callback) const {
  ::fidl::internal::NaturalMessageEncoder<::fidl::internal::ChannelTransport>
      _encoder{
          ::test_protocollayouts::kMainProtocol_TwoWayLocalWithError_Ordinal};
  return messenger().TwoWay(
      ::fidl::internal::EncodeTransactionalMessage(_encoder,
                                                   std::move(payload)),
      ::fidl::internal::MakeResponseContext<
          ::fidl::Response<
              ::test_protocollayouts::MainProtocol::TwoWayLocalWithError>,
          ::fidl::ClientCallback<
              ::test_protocollayouts::MainProtocol::TwoWayLocalWithError>>(
          ::test_protocollayouts::kMainProtocol_TwoWayLocalWithError_Ordinal,
          std::move(_callback)));
}
void fidl::internal::NaturalClientImpl<::test_protocollayouts::MainProtocol>::
    TwoWayLocalWithError(
        ::test_protocollayouts::LocalTablePayload&& payload,
        ::fidl::ClientResponseCallback<
            ::test_protocollayouts::MainProtocol::TwoWayLocalWithError>&&
            _callback) const {
  ::fidl::internal::NaturalMessageEncoder<::fidl::internal::ChannelTransport>
      _encoder{
          ::test_protocollayouts::kMainProtocol_TwoWayLocalWithError_Ordinal};
  return messenger().TwoWay(
      ::fidl::internal::EncodeTransactionalMessage(_encoder,
                                                   std::move(payload)),
      ::fidl::internal::MakeResponseContext<
          ::fidl::Response<
              ::test_protocollayouts::MainProtocol::TwoWayLocalWithError>,
          ::fidl::ClientResponseCallback<
              ::test_protocollayouts::MainProtocol::TwoWayLocalWithError>>(
          ::test_protocollayouts::kMainProtocol_TwoWayLocalWithError_Ordinal,
          std::move(_callback)));
}

void fidl::internal::NaturalClientImpl<::test_protocollayouts::MainProtocol>::
    TwoWayAnon(::test_protocollayouts::MainProtocolTwoWayAnonRequest&& payload,
               ::fidl::ClientCallback<
                   ::test_protocollayouts::MainProtocol::TwoWayAnon>&&
                   _callback) const {
  ::fidl::internal::NaturalMessageEncoder<::fidl::internal::ChannelTransport>
      _encoder{::test_protocollayouts::kMainProtocol_TwoWayAnon_Ordinal};
  return messenger().TwoWay(
      ::fidl::internal::EncodeTransactionalMessage(_encoder,
                                                   std::move(payload)),
      ::fidl::internal::MakeResponseContext<
          ::fidl::Response<::test_protocollayouts::MainProtocol::TwoWayAnon>,
          ::fidl::ClientCallback<
              ::test_protocollayouts::MainProtocol::TwoWayAnon>>(
          ::test_protocollayouts::kMainProtocol_TwoWayAnon_Ordinal,
          std::move(_callback)));
}
void fidl::internal::NaturalClientImpl<::test_protocollayouts::MainProtocol>::
    TwoWayAnon(::test_protocollayouts::MainProtocolTwoWayAnonRequest&& payload,
               ::fidl::ClientResponseCallback<
                   ::test_protocollayouts::MainProtocol::TwoWayAnon>&&
                   _callback) const {
  ::fidl::internal::NaturalMessageEncoder<::fidl::internal::ChannelTransport>
      _encoder{::test_protocollayouts::kMainProtocol_TwoWayAnon_Ordinal};
  return messenger().TwoWay(
      ::fidl::internal::EncodeTransactionalMessage(_encoder,
                                                   std::move(payload)),
      ::fidl::internal::MakeResponseContext<
          ::fidl::Response<::test_protocollayouts::MainProtocol::TwoWayAnon>,
          ::fidl::ClientResponseCallback<
              ::test_protocollayouts::MainProtocol::TwoWayAnon>>(
          ::test_protocollayouts::kMainProtocol_TwoWayAnon_Ordinal,
          std::move(_callback)));
}

void fidl::internal::NaturalClientImpl<::test_protocollayouts::MainProtocol>::
    TwoWayAnonWithError(
        ::test_protocollayouts::MainProtocolTwoWayAnonWithErrorRequest&&
            payload,
        ::fidl::ClientCallback<
            ::test_protocollayouts::MainProtocol::TwoWayAnonWithError>&&
            _callback) const {
  ::fidl::internal::NaturalMessageEncoder<::fidl::internal::ChannelTransport>
      _encoder{
          ::test_protocollayouts::kMainProtocol_TwoWayAnonWithError_Ordinal};
  return messenger().TwoWay(
      ::fidl::internal::EncodeTransactionalMessage(_encoder,
                                                   std::move(payload)),
      ::fidl::internal::MakeResponseContext<
          ::fidl::Response<
              ::test_protocollayouts::MainProtocol::TwoWayAnonWithError>,
          ::fidl::ClientCallback<
              ::test_protocollayouts::MainProtocol::TwoWayAnonWithError>>(
          ::test_protocollayouts::kMainProtocol_TwoWayAnonWithError_Ordinal,
          std::move(_callback)));
}
void fidl::internal::NaturalClientImpl<::test_protocollayouts::MainProtocol>::
    TwoWayAnonWithError(
        ::test_protocollayouts::MainProtocolTwoWayAnonWithErrorRequest&&
            payload,
        ::fidl::ClientResponseCallback<
            ::test_protocollayouts::MainProtocol::TwoWayAnonWithError>&&
            _callback) const {
  ::fidl::internal::NaturalMessageEncoder<::fidl::internal::ChannelTransport>
      _encoder{
          ::test_protocollayouts::kMainProtocol_TwoWayAnonWithError_Ordinal};
  return messenger().TwoWay(
      ::fidl::internal::EncodeTransactionalMessage(_encoder,
                                                   std::move(payload)),
      ::fidl::internal::MakeResponseContext<
          ::fidl::Response<
              ::test_protocollayouts::MainProtocol::TwoWayAnonWithError>,
          ::fidl::ClientResponseCallback<
              ::test_protocollayouts::MainProtocol::TwoWayAnonWithError>>(
          ::test_protocollayouts::kMainProtocol_TwoWayAnonWithError_Ordinal,
          std::move(_callback)));
}

::fitx::result<::fidl::Error> fidl::internal::
    NaturalClientImpl<::test_protocollayouts::MainProtocol>::OneWayAnonComposed(
        ::test_protocollayouts_imported::
            ComposedProtocolOneWayAnonComposedRequest&& payload) const {
  ::fidl::internal::NaturalMessageEncoder<::fidl::internal::ChannelTransport>
      _encoder{
          ::test_protocollayouts::kMainProtocol_OneWayAnonComposed_Ordinal};
  ::fidl::Result result =
      messenger().OneWay(::fidl::internal::EncodeTransactionalMessage(
          _encoder, std::move(payload)));
  return ::fidl::internal::ToFitxResult(result);
}

::fitx::result<::fidl::Error>
fidl::internal::NaturalClientImpl<::test_protocollayouts::MainProtocol>::
    OneWayNamedComposed(
        ::test_protocollayouts_imported::ImportTablePayload&& payload) const {
  ::fidl::internal::NaturalMessageEncoder<::fidl::internal::ChannelTransport>
      _encoder{
          ::test_protocollayouts::kMainProtocol_OneWayNamedComposed_Ordinal};
  ::fidl::Result result =
      messenger().OneWay(::fidl::internal::EncodeTransactionalMessage(
          _encoder, std::move(payload)));
  return ::fidl::internal::ToFitxResult(result);
}

::fitx::result<::fidl::Error> fidl::internal::
    NaturalClientImpl<::test_protocollayouts::MainProtocol>::OneWayImport(
        ::test_protocollayouts_imported::ImportTablePayload&& payload) const {
  ::fidl::internal::NaturalMessageEncoder<::fidl::internal::ChannelTransport>
      _encoder{::test_protocollayouts::kMainProtocol_OneWayImport_Ordinal};
  ::fidl::Result result =
      messenger().OneWay(::fidl::internal::EncodeTransactionalMessage(
          _encoder, std::move(payload)));
  return ::fidl::internal::ToFitxResult(result);
}

::fitx::result<::fidl::Error> fidl::internal::
    NaturalClientImpl<::test_protocollayouts::MainProtocol>::OneWayLocal(
        ::test_protocollayouts::LocalTablePayload&& payload) const {
  ::fidl::internal::NaturalMessageEncoder<::fidl::internal::ChannelTransport>
      _encoder{::test_protocollayouts::kMainProtocol_OneWayLocal_Ordinal};
  ::fidl::Result result =
      messenger().OneWay(::fidl::internal::EncodeTransactionalMessage(
          _encoder, std::move(payload)));
  return ::fidl::internal::ToFitxResult(result);
}

::fitx::result<::fidl::Error> fidl::internal::
    NaturalClientImpl<::test_protocollayouts::MainProtocol>::OneWayAnon(
        ::test_protocollayouts::MainProtocolOneWayAnonRequest&& payload) const {
  ::fidl::internal::NaturalMessageEncoder<::fidl::internal::ChannelTransport>
      _encoder{::test_protocollayouts::kMainProtocol_OneWayAnon_Ordinal};
  ::fidl::Result result =
      messenger().OneWay(::fidl::internal::EncodeTransactionalMessage(
          _encoder, std::move(payload)));
  return ::fidl::internal::ToFitxResult(result);
}
namespace test_protocollayouts {
#endif  // __Fuchsia__

}  // namespace test_protocollayouts
#ifdef __Fuchsia__

std::optional<::fidl::UnbindInfo> fidl::internal::
    NaturalEventDispatcher<::test_protocollayouts::MainProtocol>::DispatchEvent(
        ::fidl::IncomingMessage& msg,
        ::fidl::internal::IncomingTransportContext transport_context) {
  switch (msg.header()->ordinal) {
    case ::test_protocollayouts::kMainProtocol_OnAnonComposed_Ordinal: {
      ::fitx::result<
          ::fidl::Error,
          ::fidl::Event<::test_protocollayouts::MainProtocol::OnAnonComposed>>
          decoded = ::fidl::Event<
              ::test_protocollayouts::MainProtocol::OnAnonComposed>::
              DecodeTransactional(std::move(msg));
      if (decoded.is_error()) {
        return ::fidl::UnbindInfo(decoded.error_value());
      }
      if (event_handler()) {
        event_handler()->OnAnonComposed(decoded.value());
      }
      return std::nullopt;
    }
    case ::test_protocollayouts::
        kMainProtocol_OnAnonComposedWithError_Ordinal: {
      ::fitx::result<
          ::fidl::Error,
          ::fidl::Event<
              ::test_protocollayouts::MainProtocol::OnAnonComposedWithError>>
          decoded = ::fidl::Event<
              ::test_protocollayouts::MainProtocol::OnAnonComposedWithError>::
              DecodeTransactional(std::move(msg));
      if (decoded.is_error()) {
        return ::fidl::UnbindInfo(decoded.error_value());
      }
      if (event_handler()) {
        event_handler()->OnAnonComposedWithError(decoded.value());
      }
      return std::nullopt;
    }
    case ::test_protocollayouts::kMainProtocol_OnNamedComposed_Ordinal: {
      ::fitx::result<
          ::fidl::Error,
          ::fidl::Event<::test_protocollayouts::MainProtocol::OnNamedComposed>>
          decoded = ::fidl::Event<
              ::test_protocollayouts::MainProtocol::OnNamedComposed>::
              DecodeTransactional(std::move(msg));
      if (decoded.is_error()) {
        return ::fidl::UnbindInfo(decoded.error_value());
      }
      if (event_handler()) {
        event_handler()->OnNamedComposed(decoded.value());
      }
      return std::nullopt;
    }
    case ::test_protocollayouts::
        kMainProtocol_OnNamedComposedWithError_Ordinal: {
      ::fitx::result<
          ::fidl::Error,
          ::fidl::Event<
              ::test_protocollayouts::MainProtocol::OnNamedComposedWithError>>
          decoded = ::fidl::Event<
              ::test_protocollayouts::MainProtocol::OnNamedComposedWithError>::
              DecodeTransactional(std::move(msg));
      if (decoded.is_error()) {
        return ::fidl::UnbindInfo(decoded.error_value());
      }
      if (event_handler()) {
        event_handler()->OnNamedComposedWithError(decoded.value());
      }
      return std::nullopt;
    }
    case ::test_protocollayouts::kMainProtocol_OnImport_Ordinal: {
      ::fitx::result<
          ::fidl::Error,
          ::fidl::Event<::test_protocollayouts::MainProtocol::OnImport>>
          decoded =
              ::fidl::Event<::test_protocollayouts::MainProtocol::OnImport>::
                  DecodeTransactional(std::move(msg));
      if (decoded.is_error()) {
        return ::fidl::UnbindInfo(decoded.error_value());
      }
      if (event_handler()) {
        event_handler()->OnImport(decoded.value());
      }
      return std::nullopt;
    }
    case ::test_protocollayouts::kMainProtocol_OnImportWithError_Ordinal: {
      ::fitx::result<
          ::fidl::Error,
          ::fidl::Event<
              ::test_protocollayouts::MainProtocol::OnImportWithError>>
          decoded = ::fidl::Event<
              ::test_protocollayouts::MainProtocol::OnImportWithError>::
              DecodeTransactional(std::move(msg));
      if (decoded.is_error()) {
        return ::fidl::UnbindInfo(decoded.error_value());
      }
      if (event_handler()) {
        event_handler()->OnImportWithError(decoded.value());
      }
      return std::nullopt;
    }
    case ::test_protocollayouts::kMainProtocol_OnLocal_Ordinal: {
      ::fitx::result<
          ::fidl::Error,
          ::fidl::Event<::test_protocollayouts::MainProtocol::OnLocal>>
          decoded =
              ::fidl::Event<::test_protocollayouts::MainProtocol::OnLocal>::
                  DecodeTransactional(std::move(msg));
      if (decoded.is_error()) {
        return ::fidl::UnbindInfo(decoded.error_value());
      }
      if (event_handler()) {
        event_handler()->OnLocal(decoded.value());
      }
      return std::nullopt;
    }
    case ::test_protocollayouts::kMainProtocol_OnLocalWithError_Ordinal: {
      ::fitx::result<
          ::fidl::Error,
          ::fidl::Event<::test_protocollayouts::MainProtocol::OnLocalWithError>>
          decoded = ::fidl::Event<
              ::test_protocollayouts::MainProtocol::OnLocalWithError>::
              DecodeTransactional(std::move(msg));
      if (decoded.is_error()) {
        return ::fidl::UnbindInfo(decoded.error_value());
      }
      if (event_handler()) {
        event_handler()->OnLocalWithError(decoded.value());
      }
      return std::nullopt;
    }
    case ::test_protocollayouts::kMainProtocol_OnAnon_Ordinal: {
      ::fitx::result<
          ::fidl::Error,
          ::fidl::Event<::test_protocollayouts::MainProtocol::OnAnon>>
          decoded =
              ::fidl::Event<::test_protocollayouts::MainProtocol::OnAnon>::
                  DecodeTransactional(std::move(msg));
      if (decoded.is_error()) {
        return ::fidl::UnbindInfo(decoded.error_value());
      }
      if (event_handler()) {
        event_handler()->OnAnon(decoded.value());
      }
      return std::nullopt;
    }
    case ::test_protocollayouts::kMainProtocol_OnAnonWithError_Ordinal: {
      ::fitx::result<
          ::fidl::Error,
          ::fidl::Event<::test_protocollayouts::MainProtocol::OnAnonWithError>>
          decoded = ::fidl::Event<
              ::test_protocollayouts::MainProtocol::OnAnonWithError>::
              DecodeTransactional(std::move(msg));
      if (decoded.is_error()) {
        return ::fidl::UnbindInfo(decoded.error_value());
      }
      if (event_handler()) {
        event_handler()->OnAnonWithError(decoded.value());
      }
      return std::nullopt;
    }
    default:
      break;
  }
  return ::fidl::UnbindInfo::UnknownOrdinal();
}
#endif  // __Fuchsia__

#ifdef __Fuchsia__

::fitx::result<::fidl::Error>
fidl::internal::NaturalWeakEventSender<::test_protocollayouts::MainProtocol>::
    OnAnonComposed(
        ::test_protocollayouts_imported::ComposedProtocolOnAnonComposedRequest
            payload) {
  ::fidl::internal::NaturalMessageEncoder<::fidl::internal::ChannelTransport>
      _encoder{::test_protocollayouts::kMainProtocol_OnAnonComposed_Ordinal};
  auto encoded_message = ::fidl::internal::EncodeTransactionalMessage(
      _encoder, std::move(payload));
  ::fidl::Result result = _inner().SendEvent(encoded_message);
  return ::fidl::internal::ToFitxResult(result);
}

::fitx::result<::fidl::Error> fidl::internal::
    NaturalEventSender<::test_protocollayouts::MainProtocol>::OnAnonComposed(
        ::test_protocollayouts_imported::ComposedProtocolOnAnonComposedRequest
            payload) {
  ::fidl::internal::NaturalMessageEncoder<::fidl::internal::ChannelTransport>
      _encoder{::test_protocollayouts::kMainProtocol_OnAnonComposed_Ordinal};
  auto encoded_message = ::fidl::internal::EncodeTransactionalMessage(
      _encoder, std::move(payload));
  encoded_message.Write(_transport());
  return ::fidl::internal::ToFitxResult(::fidl::Result{encoded_message});
}

::fitx::result<::fidl::Error>
fidl::internal::NaturalWeakEventSender<::test_protocollayouts::MainProtocol>::
    OnAnonComposedWithError(
        ::test_protocollayouts_imported::
            ComposedProtocolOnAnonComposedWithErrorRequest payload) {
  ::fidl::internal::NaturalMessageEncoder<::fidl::internal::ChannelTransport>
      _encoder{::test_protocollayouts::
                   kMainProtocol_OnAnonComposedWithError_Ordinal};
  auto encoded_message = ::fidl::internal::EncodeTransactionalMessage(
      _encoder, std::move(payload));
  ::fidl::Result result = _inner().SendEvent(encoded_message);
  return ::fidl::internal::ToFitxResult(result);
}

::fitx::result<::fidl::Error>
fidl::internal::NaturalEventSender<::test_protocollayouts::MainProtocol>::
    OnAnonComposedWithError(
        ::test_protocollayouts_imported::
            ComposedProtocolOnAnonComposedWithErrorRequest payload) {
  ::fidl::internal::NaturalMessageEncoder<::fidl::internal::ChannelTransport>
      _encoder{::test_protocollayouts::
                   kMainProtocol_OnAnonComposedWithError_Ordinal};
  auto encoded_message = ::fidl::internal::EncodeTransactionalMessage(
      _encoder, std::move(payload));
  encoded_message.Write(_transport());
  return ::fidl::internal::ToFitxResult(::fidl::Result{encoded_message});
}

::fitx::result<::fidl::Error>
fidl::internal::NaturalWeakEventSender<::test_protocollayouts::MainProtocol>::
    OnNamedComposed(
        ::test_protocollayouts_imported::ImportUnionPayload payload) {
  ::fidl::internal::NaturalMessageEncoder<::fidl::internal::ChannelTransport>
      _encoder{::test_protocollayouts::kMainProtocol_OnNamedComposed_Ordinal};
  auto encoded_message = ::fidl::internal::EncodeTransactionalMessage(
      _encoder, std::move(payload));
  ::fidl::Result result = _inner().SendEvent(encoded_message);
  return ::fidl::internal::ToFitxResult(result);
}

::fitx::result<::fidl::Error> fidl::internal::
    NaturalEventSender<::test_protocollayouts::MainProtocol>::OnNamedComposed(
        ::test_protocollayouts_imported::ImportUnionPayload payload) {
  ::fidl::internal::NaturalMessageEncoder<::fidl::internal::ChannelTransport>
      _encoder{::test_protocollayouts::kMainProtocol_OnNamedComposed_Ordinal};
  auto encoded_message = ::fidl::internal::EncodeTransactionalMessage(
      _encoder, std::move(payload));
  encoded_message.Write(_transport());
  return ::fidl::internal::ToFitxResult(::fidl::Result{encoded_message});
}

::fitx::result<::fidl::Error>
fidl::internal::NaturalWeakEventSender<::test_protocollayouts::MainProtocol>::
    OnNamedComposedWithError(
        ::test_protocollayouts_imported::
            ComposedProtocolOnNamedComposedWithErrorRequest payload) {
  ::fidl::internal::NaturalMessageEncoder<::fidl::internal::ChannelTransport>
      _encoder{::test_protocollayouts::
                   kMainProtocol_OnNamedComposedWithError_Ordinal};
  auto encoded_message = ::fidl::internal::EncodeTransactionalMessage(
      _encoder, std::move(payload));
  ::fidl::Result result = _inner().SendEvent(encoded_message);
  return ::fidl::internal::ToFitxResult(result);
}

::fitx::result<::fidl::Error>
fidl::internal::NaturalEventSender<::test_protocollayouts::MainProtocol>::
    OnNamedComposedWithError(
        ::test_protocollayouts_imported::
            ComposedProtocolOnNamedComposedWithErrorRequest payload) {
  ::fidl::internal::NaturalMessageEncoder<::fidl::internal::ChannelTransport>
      _encoder{::test_protocollayouts::
                   kMainProtocol_OnNamedComposedWithError_Ordinal};
  auto encoded_message = ::fidl::internal::EncodeTransactionalMessage(
      _encoder, std::move(payload));
  encoded_message.Write(_transport());
  return ::fidl::internal::ToFitxResult(::fidl::Result{encoded_message});
}

::fitx::result<::fidl::Error> fidl::internal::
    NaturalWeakEventSender<::test_protocollayouts::MainProtocol>::OnImport(
        ::test_protocollayouts_imported::ImportUnionPayload payload) {
  ::fidl::internal::NaturalMessageEncoder<::fidl::internal::ChannelTransport>
      _encoder{::test_protocollayouts::kMainProtocol_OnImport_Ordinal};
  auto encoded_message = ::fidl::internal::EncodeTransactionalMessage(
      _encoder, std::move(payload));
  ::fidl::Result result = _inner().SendEvent(encoded_message);
  return ::fidl::internal::ToFitxResult(result);
}

::fitx::result<::fidl::Error> fidl::internal::
    NaturalEventSender<::test_protocollayouts::MainProtocol>::OnImport(
        ::test_protocollayouts_imported::ImportUnionPayload payload) {
  ::fidl::internal::NaturalMessageEncoder<::fidl::internal::ChannelTransport>
      _encoder{::test_protocollayouts::kMainProtocol_OnImport_Ordinal};
  auto encoded_message = ::fidl::internal::EncodeTransactionalMessage(
      _encoder, std::move(payload));
  encoded_message.Write(_transport());
  return ::fidl::internal::ToFitxResult(::fidl::Result{encoded_message});
}

::fitx::result<::fidl::Error>
fidl::internal::NaturalWeakEventSender<::test_protocollayouts::MainProtocol>::
    OnImportWithError(
        ::test_protocollayouts::MainProtocolOnImportWithErrorRequest payload) {
  ::fidl::internal::NaturalMessageEncoder<::fidl::internal::ChannelTransport>
      _encoder{::test_protocollayouts::kMainProtocol_OnImportWithError_Ordinal};
  auto encoded_message = ::fidl::internal::EncodeTransactionalMessage(
      _encoder, std::move(payload));
  ::fidl::Result result = _inner().SendEvent(encoded_message);
  return ::fidl::internal::ToFitxResult(result);
}

::fitx::result<::fidl::Error> fidl::internal::
    NaturalEventSender<::test_protocollayouts::MainProtocol>::OnImportWithError(
        ::test_protocollayouts::MainProtocolOnImportWithErrorRequest payload) {
  ::fidl::internal::NaturalMessageEncoder<::fidl::internal::ChannelTransport>
      _encoder{::test_protocollayouts::kMainProtocol_OnImportWithError_Ordinal};
  auto encoded_message = ::fidl::internal::EncodeTransactionalMessage(
      _encoder, std::move(payload));
  encoded_message.Write(_transport());
  return ::fidl::internal::ToFitxResult(::fidl::Result{encoded_message});
}

::fitx::result<::fidl::Error> fidl::internal::
    NaturalWeakEventSender<::test_protocollayouts::MainProtocol>::OnLocal(
        ::test_protocollayouts::LocalUnionPayload payload) {
  ::fidl::internal::NaturalMessageEncoder<::fidl::internal::ChannelTransport>
      _encoder{::test_protocollayouts::kMainProtocol_OnLocal_Ordinal};
  auto encoded_message = ::fidl::internal::EncodeTransactionalMessage(
      _encoder, std::move(payload));
  ::fidl::Result result = _inner().SendEvent(encoded_message);
  return ::fidl::internal::ToFitxResult(result);
}

::fitx::result<::fidl::Error> fidl::internal::
    NaturalEventSender<::test_protocollayouts::MainProtocol>::OnLocal(
        ::test_protocollayouts::LocalUnionPayload payload) {
  ::fidl::internal::NaturalMessageEncoder<::fidl::internal::ChannelTransport>
      _encoder{::test_protocollayouts::kMainProtocol_OnLocal_Ordinal};
  auto encoded_message = ::fidl::internal::EncodeTransactionalMessage(
      _encoder, std::move(payload));
  encoded_message.Write(_transport());
  return ::fidl::internal::ToFitxResult(::fidl::Result{encoded_message});
}

::fitx::result<::fidl::Error>
fidl::internal::NaturalWeakEventSender<::test_protocollayouts::MainProtocol>::
    OnLocalWithError(
        ::test_protocollayouts::MainProtocolOnLocalWithErrorRequest payload) {
  ::fidl::internal::NaturalMessageEncoder<::fidl::internal::ChannelTransport>
      _encoder{::test_protocollayouts::kMainProtocol_OnLocalWithError_Ordinal};
  auto encoded_message = ::fidl::internal::EncodeTransactionalMessage(
      _encoder, std::move(payload));
  ::fidl::Result result = _inner().SendEvent(encoded_message);
  return ::fidl::internal::ToFitxResult(result);
}

::fitx::result<::fidl::Error> fidl::internal::
    NaturalEventSender<::test_protocollayouts::MainProtocol>::OnLocalWithError(
        ::test_protocollayouts::MainProtocolOnLocalWithErrorRequest payload) {
  ::fidl::internal::NaturalMessageEncoder<::fidl::internal::ChannelTransport>
      _encoder{::test_protocollayouts::kMainProtocol_OnLocalWithError_Ordinal};
  auto encoded_message = ::fidl::internal::EncodeTransactionalMessage(
      _encoder, std::move(payload));
  encoded_message.Write(_transport());
  return ::fidl::internal::ToFitxResult(::fidl::Result{encoded_message});
}

::fitx::result<::fidl::Error> fidl::internal::
    NaturalWeakEventSender<::test_protocollayouts::MainProtocol>::OnAnon(
        ::test_protocollayouts::MainProtocolOnAnonRequest payload) {
  ::fidl::internal::NaturalMessageEncoder<::fidl::internal::ChannelTransport>
      _encoder{::test_protocollayouts::kMainProtocol_OnAnon_Ordinal};
  auto encoded_message = ::fidl::internal::EncodeTransactionalMessage(
      _encoder, std::move(payload));
  ::fidl::Result result = _inner().SendEvent(encoded_message);
  return ::fidl::internal::ToFitxResult(result);
}

::fitx::result<::fidl::Error> fidl::internal::
    NaturalEventSender<::test_protocollayouts::MainProtocol>::OnAnon(
        ::test_protocollayouts::MainProtocolOnAnonRequest payload) {
  ::fidl::internal::NaturalMessageEncoder<::fidl::internal::ChannelTransport>
      _encoder{::test_protocollayouts::kMainProtocol_OnAnon_Ordinal};
  auto encoded_message = ::fidl::internal::EncodeTransactionalMessage(
      _encoder, std::move(payload));
  encoded_message.Write(_transport());
  return ::fidl::internal::ToFitxResult(::fidl::Result{encoded_message});
}

::fitx::result<::fidl::Error>
fidl::internal::NaturalWeakEventSender<::test_protocollayouts::MainProtocol>::
    OnAnonWithError(
        ::test_protocollayouts::MainProtocolOnAnonWithErrorRequest payload) {
  ::fidl::internal::NaturalMessageEncoder<::fidl::internal::ChannelTransport>
      _encoder{::test_protocollayouts::kMainProtocol_OnAnonWithError_Ordinal};
  auto encoded_message = ::fidl::internal::EncodeTransactionalMessage(
      _encoder, std::move(payload));
  ::fidl::Result result = _inner().SendEvent(encoded_message);
  return ::fidl::internal::ToFitxResult(result);
}

::fitx::result<::fidl::Error> fidl::internal::
    NaturalEventSender<::test_protocollayouts::MainProtocol>::OnAnonWithError(
        ::test_protocollayouts::MainProtocolOnAnonWithErrorRequest payload) {
  ::fidl::internal::NaturalMessageEncoder<::fidl::internal::ChannelTransport>
      _encoder{::test_protocollayouts::kMainProtocol_OnAnonWithError_Ordinal};
  auto encoded_message = ::fidl::internal::EncodeTransactionalMessage(
      _encoder, std::move(payload));
  encoded_message.Write(_transport());
  return ::fidl::internal::ToFitxResult(::fidl::Result{encoded_message});
}

#endif  // __Fuchsia__

void fidl::internal::NaturalCompleterBase<
    ::test_protocollayouts::MainProtocol::TwoWayAnonComposed>::
    Reply(::test_protocollayouts_imported::
              ComposedProtocolTwoWayAnonComposedTopResponse&& payload) {
  ::fidl::internal::NaturalServerMessenger _messenger{this};
  ::fidl::internal::NaturalMessageEncoder<::fidl::internal::ChannelTransport>
      _encoder{
          ::test_protocollayouts::kMainProtocol_TwoWayAnonComposed_Ordinal};
  _messenger.SendReply(::fidl::internal::EncodeTransactionalMessage(
      _encoder, std::move(payload)));
}

void fidl::internal::NaturalCompleterBase<
    ::test_protocollayouts::MainProtocol::TwoWayAnonComposedWithError>::
    Reply(
        ::test_protocollayouts_imported::
            ComposedProtocolTwoWayAnonComposedWithErrorTopResponse&& payload) {
  ::fidl::internal::NaturalServerMessenger _messenger{this};
  ::fidl::internal::NaturalMessageEncoder<::fidl::internal::ChannelTransport>
      _encoder{::test_protocollayouts::
                   kMainProtocol_TwoWayAnonComposedWithError_Ordinal};
  _messenger.SendReply(::fidl::internal::EncodeTransactionalMessage(
      _encoder, std::move(payload)));
}

void fidl::internal::NaturalCompleterBase<
    ::test_protocollayouts::MainProtocol::TwoWayNamedComposed>::
    Reply(::test_protocollayouts_imported::ImportTablePayload&& payload) {
  ::fidl::internal::NaturalServerMessenger _messenger{this};
  ::fidl::internal::NaturalMessageEncoder<::fidl::internal::ChannelTransport>
      _encoder{
          ::test_protocollayouts::kMainProtocol_TwoWayNamedComposed_Ordinal};
  _messenger.SendReply(::fidl::internal::EncodeTransactionalMessage(
      _encoder, std::move(payload)));
}

void fidl::internal::NaturalCompleterBase<
    ::test_protocollayouts::MainProtocol::TwoWayNamedComposedWithError>::
    Reply(
        ::test_protocollayouts_imported::
            ComposedProtocolTwoWayNamedComposedWithErrorTopResponse&& payload) {
  ::fidl::internal::NaturalServerMessenger _messenger{this};
  ::fidl::internal::NaturalMessageEncoder<::fidl::internal::ChannelTransport>
      _encoder{::test_protocollayouts::
                   kMainProtocol_TwoWayNamedComposedWithError_Ordinal};
  _messenger.SendReply(::fidl::internal::EncodeTransactionalMessage(
      _encoder, std::move(payload)));
}

void fidl::internal::NaturalCompleterBase<
    ::test_protocollayouts::MainProtocol::TwoWayImport>::
    Reply(::test_protocollayouts_imported::ImportTablePayload&& payload) {
  ::fidl::internal::NaturalServerMessenger _messenger{this};
  ::fidl::internal::NaturalMessageEncoder<::fidl::internal::ChannelTransport>
      _encoder{::test_protocollayouts::kMainProtocol_TwoWayImport_Ordinal};
  _messenger.SendReply(::fidl::internal::EncodeTransactionalMessage(
      _encoder, std::move(payload)));
}

void fidl::internal::NaturalCompleterBase<
    ::test_protocollayouts::MainProtocol::TwoWayImportWithError>::
    Reply(::test_protocollayouts::MainProtocolTwoWayImportWithErrorTopResponse&&
              payload) {
  ::fidl::internal::NaturalServerMessenger _messenger{this};
  ::fidl::internal::NaturalMessageEncoder<::fidl::internal::ChannelTransport>
      _encoder{
          ::test_protocollayouts::kMainProtocol_TwoWayImportWithError_Ordinal};
  _messenger.SendReply(::fidl::internal::EncodeTransactionalMessage(
      _encoder, std::move(payload)));
}

void fidl::internal::NaturalCompleterBase<
    ::test_protocollayouts::MainProtocol::TwoWayLocal>::
    Reply(::test_protocollayouts::LocalTablePayload&& payload) {
  ::fidl::internal::NaturalServerMessenger _messenger{this};
  ::fidl::internal::NaturalMessageEncoder<::fidl::internal::ChannelTransport>
      _encoder{::test_protocollayouts::kMainProtocol_TwoWayLocal_Ordinal};
  _messenger.SendReply(::fidl::internal::EncodeTransactionalMessage(
      _encoder, std::move(payload)));
}

void fidl::internal::NaturalCompleterBase<
    ::test_protocollayouts::MainProtocol::TwoWayLocalWithError>::
    Reply(::test_protocollayouts::MainProtocolTwoWayLocalWithErrorTopResponse&&
              payload) {
  ::fidl::internal::NaturalServerMessenger _messenger{this};
  ::fidl::internal::NaturalMessageEncoder<::fidl::internal::ChannelTransport>
      _encoder{
          ::test_protocollayouts::kMainProtocol_TwoWayLocalWithError_Ordinal};
  _messenger.SendReply(::fidl::internal::EncodeTransactionalMessage(
      _encoder, std::move(payload)));
}

void fidl::internal::NaturalCompleterBase<
    ::test_protocollayouts::MainProtocol::TwoWayAnon>::
    Reply(::test_protocollayouts::MainProtocolTwoWayAnonTopResponse&& payload) {
  ::fidl::internal::NaturalServerMessenger _messenger{this};
  ::fidl::internal::NaturalMessageEncoder<::fidl::internal::ChannelTransport>
      _encoder{::test_protocollayouts::kMainProtocol_TwoWayAnon_Ordinal};
  _messenger.SendReply(::fidl::internal::EncodeTransactionalMessage(
      _encoder, std::move(payload)));
}

void fidl::internal::NaturalCompleterBase<
    ::test_protocollayouts::MainProtocol::TwoWayAnonWithError>::
    Reply(::test_protocollayouts::MainProtocolTwoWayAnonWithErrorTopResponse&&
              payload) {
  ::fidl::internal::NaturalServerMessenger _messenger{this};
  ::fidl::internal::NaturalMessageEncoder<::fidl::internal::ChannelTransport>
      _encoder{
          ::test_protocollayouts::kMainProtocol_TwoWayAnonWithError_Ordinal};
  _messenger.SendReply(::fidl::internal::EncodeTransactionalMessage(
      _encoder, std::move(payload)));
}

#ifdef __Fuchsia__

constexpr ::fidl::internal::MethodEntry fidl::internal::NaturalServerDispatcher<
    ::test_protocollayouts::MainProtocol>::entries_[] = {
    {
        ::test_protocollayouts::kMainProtocol_OneWayAnonComposed_Ordinal,
        [](void* interface, ::fidl::IncomingMessage&& msg,
           internal::IncomingTransportContext transport_context,
           ::fidl::Transaction* txn) {
          ::fitx::result<
              ::fidl::Error,
              ::fidl::Request<
                  ::test_protocollayouts::MainProtocol::OneWayAnonComposed>>
              decoded = ::fidl::Request<
                  ::test_protocollayouts::MainProtocol::OneWayAnonComposed>::
                  DecodeTransactional(std::move(msg));
          if (decoded.is_error()) {
            return decoded.error_value().status();
          }
          ::fidl::internal::NaturalCompleter<
              ::test_protocollayouts::MainProtocol::OneWayAnonComposed>::Sync
              completer(txn);
          static_cast<::fidl::Server<::test_protocollayouts::MainProtocol>*>(
              interface)
              ->OneWayAnonComposed(decoded.value(), completer);
          return ZX_OK;
        },
    },
    {
        ::test_protocollayouts::kMainProtocol_TwoWayAnonComposed_Ordinal,
        [](void* interface, ::fidl::IncomingMessage&& msg,
           internal::IncomingTransportContext transport_context,
           ::fidl::Transaction* txn) {
          ::fitx::result<
              ::fidl::Error,
              ::fidl::Request<
                  ::test_protocollayouts::MainProtocol::TwoWayAnonComposed>>
              decoded = ::fidl::Request<
                  ::test_protocollayouts::MainProtocol::TwoWayAnonComposed>::
                  DecodeTransactional(std::move(msg));
          if (decoded.is_error()) {
            return decoded.error_value().status();
          }
          ::fidl::internal::NaturalCompleter<
              ::test_protocollayouts::MainProtocol::TwoWayAnonComposed>::Sync
              completer(txn);
          static_cast<::fidl::Server<::test_protocollayouts::MainProtocol>*>(
              interface)
              ->TwoWayAnonComposed(decoded.value(), completer);
          return ZX_OK;
        },
    },
    {
        ::test_protocollayouts::
            kMainProtocol_TwoWayAnonComposedWithError_Ordinal,
        [](void* interface, ::fidl::IncomingMessage&& msg,
           internal::IncomingTransportContext transport_context,
           ::fidl::Transaction* txn) {
          ::fitx::result<::fidl::Error,
                         ::fidl::Request<::test_protocollayouts::MainProtocol::
                                             TwoWayAnonComposedWithError>>
              decoded = ::fidl::Request<::test_protocollayouts::MainProtocol::
                                            TwoWayAnonComposedWithError>::
                  DecodeTransactional(std::move(msg));
          if (decoded.is_error()) {
            return decoded.error_value().status();
          }
          ::fidl::internal::NaturalCompleter<
              ::test_protocollayouts::MainProtocol::
                  TwoWayAnonComposedWithError>::Sync completer(txn);
          static_cast<::fidl::Server<::test_protocollayouts::MainProtocol>*>(
              interface)
              ->TwoWayAnonComposedWithError(decoded.value(), completer);
          return ZX_OK;
        },
    },
    {
        ::test_protocollayouts::kMainProtocol_OneWayNamedComposed_Ordinal,
        [](void* interface, ::fidl::IncomingMessage&& msg,
           internal::IncomingTransportContext transport_context,
           ::fidl::Transaction* txn) {
          ::fitx::result<
              ::fidl::Error,
              ::fidl::Request<
                  ::test_protocollayouts::MainProtocol::OneWayNamedComposed>>
              decoded = ::fidl::Request<
                  ::test_protocollayouts::MainProtocol::OneWayNamedComposed>::
                  DecodeTransactional(std::move(msg));
          if (decoded.is_error()) {
            return decoded.error_value().status();
          }
          ::fidl::internal::NaturalCompleter<
              ::test_protocollayouts::MainProtocol::OneWayNamedComposed>::Sync
              completer(txn);
          static_cast<::fidl::Server<::test_protocollayouts::MainProtocol>*>(
              interface)
              ->OneWayNamedComposed(decoded.value(), completer);
          return ZX_OK;
        },
    },
    {
        ::test_protocollayouts::kMainProtocol_TwoWayNamedComposed_Ordinal,
        [](void* interface, ::fidl::IncomingMessage&& msg,
           internal::IncomingTransportContext transport_context,
           ::fidl::Transaction* txn) {
          ::fitx::result<
              ::fidl::Error,
              ::fidl::Request<
                  ::test_protocollayouts::MainProtocol::TwoWayNamedComposed>>
              decoded = ::fidl::Request<
                  ::test_protocollayouts::MainProtocol::TwoWayNamedComposed>::
                  DecodeTransactional(std::move(msg));
          if (decoded.is_error()) {
            return decoded.error_value().status();
          }
          ::fidl::internal::NaturalCompleter<
              ::test_protocollayouts::MainProtocol::TwoWayNamedComposed>::Sync
              completer(txn);
          static_cast<::fidl::Server<::test_protocollayouts::MainProtocol>*>(
              interface)
              ->TwoWayNamedComposed(decoded.value(), completer);
          return ZX_OK;
        },
    },
    {
        ::test_protocollayouts::
            kMainProtocol_TwoWayNamedComposedWithError_Ordinal,
        [](void* interface, ::fidl::IncomingMessage&& msg,
           internal::IncomingTransportContext transport_context,
           ::fidl::Transaction* txn) {
          ::fitx::result<::fidl::Error,
                         ::fidl::Request<::test_protocollayouts::MainProtocol::
                                             TwoWayNamedComposedWithError>>
              decoded = ::fidl::Request<::test_protocollayouts::MainProtocol::
                                            TwoWayNamedComposedWithError>::
                  DecodeTransactional(std::move(msg));
          if (decoded.is_error()) {
            return decoded.error_value().status();
          }
          ::fidl::internal::NaturalCompleter<
              ::test_protocollayouts::MainProtocol::
                  TwoWayNamedComposedWithError>::Sync completer(txn);
          static_cast<::fidl::Server<::test_protocollayouts::MainProtocol>*>(
              interface)
              ->TwoWayNamedComposedWithError(decoded.value(), completer);
          return ZX_OK;
        },
    },
    {
        ::test_protocollayouts::kMainProtocol_OneWayImport_Ordinal,
        [](void* interface, ::fidl::IncomingMessage&& msg,
           internal::IncomingTransportContext transport_context,
           ::fidl::Transaction* txn) {
          ::fitx::result<
              ::fidl::Error,
              ::fidl::Request<
                  ::test_protocollayouts::MainProtocol::OneWayImport>>
              decoded = ::fidl::Request<
                  ::test_protocollayouts::MainProtocol::OneWayImport>::
                  DecodeTransactional(std::move(msg));
          if (decoded.is_error()) {
            return decoded.error_value().status();
          }
          ::fidl::internal::NaturalCompleter<
              ::test_protocollayouts::MainProtocol::OneWayImport>::Sync
              completer(txn);
          static_cast<::fidl::Server<::test_protocollayouts::MainProtocol>*>(
              interface)
              ->OneWayImport(decoded.value(), completer);
          return ZX_OK;
        },
    },
    {
        ::test_protocollayouts::kMainProtocol_TwoWayImport_Ordinal,
        [](void* interface, ::fidl::IncomingMessage&& msg,
           internal::IncomingTransportContext transport_context,
           ::fidl::Transaction* txn) {
          ::fitx::result<
              ::fidl::Error,
              ::fidl::Request<
                  ::test_protocollayouts::MainProtocol::TwoWayImport>>
              decoded = ::fidl::Request<
                  ::test_protocollayouts::MainProtocol::TwoWayImport>::
                  DecodeTransactional(std::move(msg));
          if (decoded.is_error()) {
            return decoded.error_value().status();
          }
          ::fidl::internal::NaturalCompleter<
              ::test_protocollayouts::MainProtocol::TwoWayImport>::Sync
              completer(txn);
          static_cast<::fidl::Server<::test_protocollayouts::MainProtocol>*>(
              interface)
              ->TwoWayImport(decoded.value(), completer);
          return ZX_OK;
        },
    },
    {
        ::test_protocollayouts::kMainProtocol_TwoWayImportWithError_Ordinal,
        [](void* interface, ::fidl::IncomingMessage&& msg,
           internal::IncomingTransportContext transport_context,
           ::fidl::Transaction* txn) {
          ::fitx::result<
              ::fidl::Error,
              ::fidl::Request<
                  ::test_protocollayouts::MainProtocol::TwoWayImportWithError>>
              decoded = ::fidl::Request<
                  ::test_protocollayouts::MainProtocol::TwoWayImportWithError>::
                  DecodeTransactional(std::move(msg));
          if (decoded.is_error()) {
            return decoded.error_value().status();
          }
          ::fidl::internal::NaturalCompleter<
              ::test_protocollayouts::MainProtocol::TwoWayImportWithError>::Sync
              completer(txn);
          static_cast<::fidl::Server<::test_protocollayouts::MainProtocol>*>(
              interface)
              ->TwoWayImportWithError(decoded.value(), completer);
          return ZX_OK;
        },
    },
    {
        ::test_protocollayouts::kMainProtocol_OneWayLocal_Ordinal,
        [](void* interface, ::fidl::IncomingMessage&& msg,
           internal::IncomingTransportContext transport_context,
           ::fidl::Transaction* txn) {
          ::fitx::result<::fidl::Error,
                         ::fidl::Request<
                             ::test_protocollayouts::MainProtocol::OneWayLocal>>
              decoded = ::fidl::Request<
                  ::test_protocollayouts::MainProtocol::OneWayLocal>::
                  DecodeTransactional(std::move(msg));
          if (decoded.is_error()) {
            return decoded.error_value().status();
          }
          ::fidl::internal::NaturalCompleter<
              ::test_protocollayouts::MainProtocol::OneWayLocal>::Sync
              completer(txn);
          static_cast<::fidl::Server<::test_protocollayouts::MainProtocol>*>(
              interface)
              ->OneWayLocal(decoded.value(), completer);
          return ZX_OK;
        },
    },
    {
        ::test_protocollayouts::kMainProtocol_TwoWayLocal_Ordinal,
        [](void* interface, ::fidl::IncomingMessage&& msg,
           internal::IncomingTransportContext transport_context,
           ::fidl::Transaction* txn) {
          ::fitx::result<::fidl::Error,
                         ::fidl::Request<
                             ::test_protocollayouts::MainProtocol::TwoWayLocal>>
              decoded = ::fidl::Request<
                  ::test_protocollayouts::MainProtocol::TwoWayLocal>::
                  DecodeTransactional(std::move(msg));
          if (decoded.is_error()) {
            return decoded.error_value().status();
          }
          ::fidl::internal::NaturalCompleter<
              ::test_protocollayouts::MainProtocol::TwoWayLocal>::Sync
              completer(txn);
          static_cast<::fidl::Server<::test_protocollayouts::MainProtocol>*>(
              interface)
              ->TwoWayLocal(decoded.value(), completer);
          return ZX_OK;
        },
    },
    {
        ::test_protocollayouts::kMainProtocol_TwoWayLocalWithError_Ordinal,
        [](void* interface, ::fidl::IncomingMessage&& msg,
           internal::IncomingTransportContext transport_context,
           ::fidl::Transaction* txn) {
          ::fitx::result<
              ::fidl::Error,
              ::fidl::Request<
                  ::test_protocollayouts::MainProtocol::TwoWayLocalWithError>>
              decoded = ::fidl::Request<
                  ::test_protocollayouts::MainProtocol::TwoWayLocalWithError>::
                  DecodeTransactional(std::move(msg));
          if (decoded.is_error()) {
            return decoded.error_value().status();
          }
          ::fidl::internal::NaturalCompleter<
              ::test_protocollayouts::MainProtocol::TwoWayLocalWithError>::Sync
              completer(txn);
          static_cast<::fidl::Server<::test_protocollayouts::MainProtocol>*>(
              interface)
              ->TwoWayLocalWithError(decoded.value(), completer);
          return ZX_OK;
        },
    },
    {
        ::test_protocollayouts::kMainProtocol_OneWayAnon_Ordinal,
        [](void* interface, ::fidl::IncomingMessage&& msg,
           internal::IncomingTransportContext transport_context,
           ::fidl::Transaction* txn) {
          ::fitx::result<
              ::fidl::Error,
              ::fidl::Request<::test_protocollayouts::MainProtocol::OneWayAnon>>
              decoded = ::fidl::Request<
                  ::test_protocollayouts::MainProtocol::OneWayAnon>::
                  DecodeTransactional(std::move(msg));
          if (decoded.is_error()) {
            return decoded.error_value().status();
          }
          ::fidl::internal::NaturalCompleter<
              ::test_protocollayouts::MainProtocol::OneWayAnon>::Sync
              completer(txn);
          static_cast<::fidl::Server<::test_protocollayouts::MainProtocol>*>(
              interface)
              ->OneWayAnon(decoded.value(), completer);
          return ZX_OK;
        },
    },
    {
        ::test_protocollayouts::kMainProtocol_TwoWayAnon_Ordinal,
        [](void* interface, ::fidl::IncomingMessage&& msg,
           internal::IncomingTransportContext transport_context,
           ::fidl::Transaction* txn) {
          ::fitx::result<
              ::fidl::Error,
              ::fidl::Request<::test_protocollayouts::MainProtocol::TwoWayAnon>>
              decoded = ::fidl::Request<
                  ::test_protocollayouts::MainProtocol::TwoWayAnon>::
                  DecodeTransactional(std::move(msg));
          if (decoded.is_error()) {
            return decoded.error_value().status();
          }
          ::fidl::internal::NaturalCompleter<
              ::test_protocollayouts::MainProtocol::TwoWayAnon>::Sync
              completer(txn);
          static_cast<::fidl::Server<::test_protocollayouts::MainProtocol>*>(
              interface)
              ->TwoWayAnon(decoded.value(), completer);
          return ZX_OK;
        },
    },
    {
        ::test_protocollayouts::kMainProtocol_TwoWayAnonWithError_Ordinal,
        [](void* interface, ::fidl::IncomingMessage&& msg,
           internal::IncomingTransportContext transport_context,
           ::fidl::Transaction* txn) {
          ::fitx::result<
              ::fidl::Error,
              ::fidl::Request<
                  ::test_protocollayouts::MainProtocol::TwoWayAnonWithError>>
              decoded = ::fidl::Request<
                  ::test_protocollayouts::MainProtocol::TwoWayAnonWithError>::
                  DecodeTransactional(std::move(msg));
          if (decoded.is_error()) {
            return decoded.error_value().status();
          }
          ::fidl::internal::NaturalCompleter<
              ::test_protocollayouts::MainProtocol::TwoWayAnonWithError>::Sync
              completer(txn);
          static_cast<::fidl::Server<::test_protocollayouts::MainProtocol>*>(
              interface)
              ->TwoWayAnonWithError(decoded.value(), completer);
          return ZX_OK;
        },
    },
};

const ::fidl::internal::MethodEntry* fidl::internal::NaturalServerDispatcher<
    ::test_protocollayouts::MainProtocol>::entries_end_ = &entries_[15];

void fidl::internal::
    NaturalServerDispatcher<::test_protocollayouts::MainProtocol>::Dispatch(
        ::fidl::Server<::test_protocollayouts::MainProtocol>* impl,
        ::fidl::IncomingMessage&& msg,
        internal::IncomingTransportContext transport_context,
        ::fidl::Transaction* txn) {
  ::fidl::internal::Dispatch(impl, msg, std::move(transport_context), txn,
                             entries_, entries_end_);
}
void fidl::Server<::test_protocollayouts::MainProtocol>::dispatch_message(
    ::fidl::IncomingMessage&& msg, ::fidl::Transaction* txn,
    ::fidl::internal::IncomingTransportContext transport_context) {
  ::fidl::internal::NaturalServerDispatcher<
      ::test_protocollayouts::MainProtocol>::Dispatch(this, std::move(msg),
                                                      std::move(
                                                          transport_context),
                                                      txn);
}
#endif  // __Fuchsia__
