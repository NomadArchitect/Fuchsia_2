// WARNING: This file is machine generated by fidlgen_llcpp.

#include <fidl/test.protocollayouts/cpp/natural_messaging.h>

namespace test_protocollayouts {
[[maybe_unused]] constexpr inline uint64_t
    kMainProtocol_OneWayAnonComposed_Ordinal = 467706262354916833lu;

[[maybe_unused]] constexpr inline uint64_t
    kMainProtocol_TwoWayAnonComposed_Ordinal = 1634702755099390832lu;

[[maybe_unused]] constexpr inline uint64_t
    kMainProtocol_TwoWayAnonComposedWithError_Ordinal = 3374101322700362141lu;

[[maybe_unused]] constexpr inline uint64_t
    kMainProtocol_OnAnonComposed_Ordinal = 9198778981238868491lu;

[[maybe_unused]] constexpr inline uint64_t
    kMainProtocol_OnAnonComposedWithError_Ordinal = 712214127111113275lu;

[[maybe_unused]] constexpr inline uint64_t
    kMainProtocol_OneWayNamedComposed_Ordinal = 6735359826241449560lu;

[[maybe_unused]] constexpr inline uint64_t
    kMainProtocol_TwoWayNamedComposed_Ordinal = 1110122450485917712lu;

[[maybe_unused]] constexpr inline uint64_t
    kMainProtocol_TwoWayNamedComposedWithError_Ordinal = 3520341666774118271lu;

[[maybe_unused]] constexpr inline uint64_t
    kMainProtocol_OnNamedComposed_Ordinal = 6802961197456477674lu;

[[maybe_unused]] constexpr inline uint64_t
    kMainProtocol_OnNamedComposedWithError_Ordinal = 7488207288618998795lu;

[[maybe_unused]] constexpr inline uint64_t kMainProtocol_OneWayImport_Ordinal =
    374039999976906043lu;

[[maybe_unused]] constexpr inline uint64_t kMainProtocol_TwoWayImport_Ordinal =
    3167860988423964164lu;

[[maybe_unused]] constexpr inline uint64_t
    kMainProtocol_TwoWayImportWithError_Ordinal = 4837028007581646602lu;

[[maybe_unused]] constexpr inline uint64_t kMainProtocol_OnImport_Ordinal =
    6584793811321990352lu;

[[maybe_unused]] constexpr inline uint64_t
    kMainProtocol_OnImportWithError_Ordinal = 1123803631971094487lu;

[[maybe_unused]] constexpr inline uint64_t kMainProtocol_OneWayLocal_Ordinal =
    6085941264859402051lu;

[[maybe_unused]] constexpr inline uint64_t kMainProtocol_TwoWayLocal_Ordinal =
    7763901300032164763lu;

[[maybe_unused]] constexpr inline uint64_t
    kMainProtocol_TwoWayLocalWithError_Ordinal = 5609487496960056151lu;

[[maybe_unused]] constexpr inline uint64_t kMainProtocol_OnLocal_Ordinal =
    4199259762307646332lu;

[[maybe_unused]] constexpr inline uint64_t
    kMainProtocol_OnLocalWithError_Ordinal = 8767483445230259748lu;

[[maybe_unused]] constexpr inline uint64_t kMainProtocol_OneWayAnon_Ordinal =
    4203317713771984620lu;

[[maybe_unused]] constexpr inline uint64_t kMainProtocol_TwoWayAnon_Ordinal =
    7435080039097281487lu;

[[maybe_unused]] constexpr inline uint64_t
    kMainProtocol_TwoWayAnonWithError_Ordinal = 7770394869745610225lu;

[[maybe_unused]] constexpr inline uint64_t kMainProtocol_OnAnon_Ordinal =
    7275479350674227467lu;

[[maybe_unused]] constexpr inline uint64_t
    kMainProtocol_OnAnonWithError_Ordinal = 3672186790919812761lu;

#ifdef __Fuchsia__
}  // namespace test_protocollayouts
void fidl::internal::NaturalClientImpl<::test_protocollayouts::MainProtocol>::
    TwoWayAnonComposed(
        ::fidl::Request<
            ::test_protocollayouts::MainProtocol::TwoWayAnonComposed>
            request,
        ::fidl::ClientCallback<
            ::test_protocollayouts::MainProtocol::TwoWayAnonComposed>&&
            _callback) const {
  ::fidl::internal::NaturalMessageEncoder _encoder{
      &::fidl::internal::ChannelTransport::VTable,
      ::test_protocollayouts::kMainProtocol_TwoWayAnonComposed_Ordinal};
  return messenger().TwoWay(
      _encoder.EncodeTransactionalMessage(
          ::fidl::internal::NaturalMessageConverter<::fidl::Request<
              ::test_protocollayouts::MainProtocol::TwoWayAnonComposed>>::
              IntoDomainObject(std::move(request))),
      ::fidl::internal::MakeResponseContext<
          ::test_protocollayouts::MainProtocol::TwoWayAnonComposed>(
          ::test_protocollayouts::kMainProtocol_TwoWayAnonComposed_Ordinal,
          std::move(_callback)));
}

void fidl::internal::NaturalClientImpl<::test_protocollayouts::MainProtocol>::
    TwoWayAnonComposedWithError(
        ::fidl::Request<
            ::test_protocollayouts::MainProtocol::TwoWayAnonComposedWithError>
            request,
        ::fidl::ClientCallback<
            ::test_protocollayouts::MainProtocol::TwoWayAnonComposedWithError>&&
            _callback) const {
  ::fidl::internal::NaturalMessageEncoder _encoder{
      &::fidl::internal::ChannelTransport::VTable,
      ::test_protocollayouts::
          kMainProtocol_TwoWayAnonComposedWithError_Ordinal};
  return messenger().TwoWay(
      _encoder.EncodeTransactionalMessage(
          ::fidl::internal::NaturalMessageConverter<
              ::fidl::Request<::test_protocollayouts::MainProtocol::
                                  TwoWayAnonComposedWithError>>::
              IntoDomainObject(std::move(request))),
      ::fidl::internal::MakeResponseContext<
          ::test_protocollayouts::MainProtocol::TwoWayAnonComposedWithError>(
          ::test_protocollayouts::
              kMainProtocol_TwoWayAnonComposedWithError_Ordinal,
          std::move(_callback)));
}

void fidl::internal::NaturalClientImpl<::test_protocollayouts::MainProtocol>::
    TwoWayNamedComposed(
        ::fidl::Request<
            ::test_protocollayouts::MainProtocol::TwoWayNamedComposed>
            request,
        ::fidl::ClientCallback<
            ::test_protocollayouts::MainProtocol::TwoWayNamedComposed>&&
            _callback) const {
  ::fidl::internal::NaturalMessageEncoder _encoder{
      &::fidl::internal::ChannelTransport::VTable,
      ::test_protocollayouts::kMainProtocol_TwoWayNamedComposed_Ordinal};
  return messenger().TwoWay(
      _encoder.EncodeTransactionalMessage(
          ::fidl::internal::NaturalMessageConverter<::fidl::Request<
              ::test_protocollayouts::MainProtocol::TwoWayNamedComposed>>::
              IntoDomainObject(std::move(request))),
      ::fidl::internal::MakeResponseContext<
          ::test_protocollayouts::MainProtocol::TwoWayNamedComposed>(
          ::test_protocollayouts::kMainProtocol_TwoWayNamedComposed_Ordinal,
          std::move(_callback)));
}

void fidl::internal::NaturalClientImpl<::test_protocollayouts::MainProtocol>::
    TwoWayNamedComposedWithError(
        ::fidl::Request<
            ::test_protocollayouts::MainProtocol::TwoWayNamedComposedWithError>
            request,
        ::fidl::ClientCallback<::test_protocollayouts::MainProtocol::
                                   TwoWayNamedComposedWithError>&& _callback)
        const {
  ::fidl::internal::NaturalMessageEncoder _encoder{
      &::fidl::internal::ChannelTransport::VTable,
      ::test_protocollayouts::
          kMainProtocol_TwoWayNamedComposedWithError_Ordinal};
  return messenger().TwoWay(
      _encoder.EncodeTransactionalMessage(
          ::fidl::internal::NaturalMessageConverter<
              ::fidl::Request<::test_protocollayouts::MainProtocol::
                                  TwoWayNamedComposedWithError>>::
              IntoDomainObject(std::move(request))),
      ::fidl::internal::MakeResponseContext<
          ::test_protocollayouts::MainProtocol::TwoWayNamedComposedWithError>(
          ::test_protocollayouts::
              kMainProtocol_TwoWayNamedComposedWithError_Ordinal,
          std::move(_callback)));
}

void fidl::internal::NaturalClientImpl<::test_protocollayouts::MainProtocol>::
    TwoWayImport(
        ::fidl::Request<::test_protocollayouts::MainProtocol::TwoWayImport>
            request,
        ::fidl::ClientCallback<
            ::test_protocollayouts::MainProtocol::TwoWayImport>&& _callback)
        const {
  ::fidl::internal::NaturalMessageEncoder _encoder{
      &::fidl::internal::ChannelTransport::VTable,
      ::test_protocollayouts::kMainProtocol_TwoWayImport_Ordinal};
  return messenger().TwoWay(
      _encoder.EncodeTransactionalMessage(
          ::fidl::internal::NaturalMessageConverter<::fidl::Request<
              ::test_protocollayouts::MainProtocol::TwoWayImport>>::
              IntoDomainObject(std::move(request))),
      ::fidl::internal::MakeResponseContext<
          ::test_protocollayouts::MainProtocol::TwoWayImport>(
          ::test_protocollayouts::kMainProtocol_TwoWayImport_Ordinal,
          std::move(_callback)));
}

void fidl::internal::NaturalClientImpl<::test_protocollayouts::MainProtocol>::
    TwoWayImportWithError(
        ::fidl::Request<
            ::test_protocollayouts::MainProtocol::TwoWayImportWithError>
            request,
        ::fidl::ClientCallback<
            ::test_protocollayouts::MainProtocol::TwoWayImportWithError>&&
            _callback) const {
  ::fidl::internal::NaturalMessageEncoder _encoder{
      &::fidl::internal::ChannelTransport::VTable,
      ::test_protocollayouts::kMainProtocol_TwoWayImportWithError_Ordinal};
  return messenger().TwoWay(
      _encoder.EncodeTransactionalMessage(
          ::fidl::internal::NaturalMessageConverter<::fidl::Request<
              ::test_protocollayouts::MainProtocol::TwoWayImportWithError>>::
              IntoDomainObject(std::move(request))),
      ::fidl::internal::MakeResponseContext<
          ::test_protocollayouts::MainProtocol::TwoWayImportWithError>(
          ::test_protocollayouts::kMainProtocol_TwoWayImportWithError_Ordinal,
          std::move(_callback)));
}

void fidl::internal::NaturalClientImpl<::test_protocollayouts::MainProtocol>::
    TwoWayLocal(
        ::fidl::Request<::test_protocollayouts::MainProtocol::TwoWayLocal>
            request,
        ::fidl::ClientCallback<
            ::test_protocollayouts::MainProtocol::TwoWayLocal>&& _callback)
        const {
  ::fidl::internal::NaturalMessageEncoder _encoder{
      &::fidl::internal::ChannelTransport::VTable,
      ::test_protocollayouts::kMainProtocol_TwoWayLocal_Ordinal};
  return messenger().TwoWay(
      _encoder.EncodeTransactionalMessage(
          ::fidl::internal::NaturalMessageConverter<::fidl::Request<
              ::test_protocollayouts::MainProtocol::TwoWayLocal>>::
              IntoDomainObject(std::move(request))),
      ::fidl::internal::MakeResponseContext<
          ::test_protocollayouts::MainProtocol::TwoWayLocal>(
          ::test_protocollayouts::kMainProtocol_TwoWayLocal_Ordinal,
          std::move(_callback)));
}

void fidl::internal::NaturalClientImpl<::test_protocollayouts::MainProtocol>::
    TwoWayLocalWithError(
        ::fidl::Request<
            ::test_protocollayouts::MainProtocol::TwoWayLocalWithError>
            request,
        ::fidl::ClientCallback<
            ::test_protocollayouts::MainProtocol::TwoWayLocalWithError>&&
            _callback) const {
  ::fidl::internal::NaturalMessageEncoder _encoder{
      &::fidl::internal::ChannelTransport::VTable,
      ::test_protocollayouts::kMainProtocol_TwoWayLocalWithError_Ordinal};
  return messenger().TwoWay(
      _encoder.EncodeTransactionalMessage(
          ::fidl::internal::NaturalMessageConverter<::fidl::Request<
              ::test_protocollayouts::MainProtocol::TwoWayLocalWithError>>::
              IntoDomainObject(std::move(request))),
      ::fidl::internal::MakeResponseContext<
          ::test_protocollayouts::MainProtocol::TwoWayLocalWithError>(
          ::test_protocollayouts::kMainProtocol_TwoWayLocalWithError_Ordinal,
          std::move(_callback)));
}

void fidl::internal::NaturalClientImpl<::test_protocollayouts::MainProtocol>::
    TwoWayAnon(::fidl::Request<::test_protocollayouts::MainProtocol::TwoWayAnon>
                   request,
               ::fidl::ClientCallback<
                   ::test_protocollayouts::MainProtocol::TwoWayAnon>&&
                   _callback) const {
  ::fidl::internal::NaturalMessageEncoder _encoder{
      &::fidl::internal::ChannelTransport::VTable,
      ::test_protocollayouts::kMainProtocol_TwoWayAnon_Ordinal};
  return messenger().TwoWay(
      _encoder.EncodeTransactionalMessage(
          ::fidl::internal::NaturalMessageConverter<::fidl::Request<
              ::test_protocollayouts::MainProtocol::TwoWayAnon>>::
              IntoDomainObject(std::move(request))),
      ::fidl::internal::MakeResponseContext<
          ::test_protocollayouts::MainProtocol::TwoWayAnon>(
          ::test_protocollayouts::kMainProtocol_TwoWayAnon_Ordinal,
          std::move(_callback)));
}

void fidl::internal::NaturalClientImpl<::test_protocollayouts::MainProtocol>::
    TwoWayAnonWithError(
        ::fidl::Request<
            ::test_protocollayouts::MainProtocol::TwoWayAnonWithError>
            request,
        ::fidl::ClientCallback<
            ::test_protocollayouts::MainProtocol::TwoWayAnonWithError>&&
            _callback) const {
  ::fidl::internal::NaturalMessageEncoder _encoder{
      &::fidl::internal::ChannelTransport::VTable,
      ::test_protocollayouts::kMainProtocol_TwoWayAnonWithError_Ordinal};
  return messenger().TwoWay(
      _encoder.EncodeTransactionalMessage(
          ::fidl::internal::NaturalMessageConverter<::fidl::Request<
              ::test_protocollayouts::MainProtocol::TwoWayAnonWithError>>::
              IntoDomainObject(std::move(request))),
      ::fidl::internal::MakeResponseContext<
          ::test_protocollayouts::MainProtocol::TwoWayAnonWithError>(
          ::test_protocollayouts::kMainProtocol_TwoWayAnonWithError_Ordinal,
          std::move(_callback)));
}

::fitx::result<::fidl::Error> fidl::internal::
    NaturalClientImpl<::test_protocollayouts::MainProtocol>::OneWayAnonComposed(
        ::fidl::Request<
            ::test_protocollayouts::MainProtocol::OneWayAnonComposed>
            request) const {
  ::fidl::internal::NaturalMessageEncoder _encoder{
      &::fidl::internal::ChannelTransport::VTable,
      ::test_protocollayouts::kMainProtocol_OneWayAnonComposed_Ordinal};
  ::fidl::Status status =
      messenger().OneWay(_encoder.EncodeTransactionalMessage(
          ::fidl::internal::NaturalMessageConverter<::fidl::Request<
              ::test_protocollayouts::MainProtocol::OneWayAnonComposed>>::
              IntoDomainObject(std::move(request))));
  return ::fidl::internal::ToFitxResult(status);
}

::fitx::result<::fidl::Error>
fidl::internal::NaturalClientImpl<::test_protocollayouts::MainProtocol>::
    OneWayNamedComposed(
        ::fidl::Request<
            ::test_protocollayouts::MainProtocol::OneWayNamedComposed>
            request) const {
  ::fidl::internal::NaturalMessageEncoder _encoder{
      &::fidl::internal::ChannelTransport::VTable,
      ::test_protocollayouts::kMainProtocol_OneWayNamedComposed_Ordinal};
  ::fidl::Status status =
      messenger().OneWay(_encoder.EncodeTransactionalMessage(
          ::fidl::internal::NaturalMessageConverter<::fidl::Request<
              ::test_protocollayouts::MainProtocol::OneWayNamedComposed>>::
              IntoDomainObject(std::move(request))));
  return ::fidl::internal::ToFitxResult(status);
}

::fitx::result<::fidl::Error> fidl::internal::
    NaturalClientImpl<::test_protocollayouts::MainProtocol>::OneWayImport(
        ::fidl::Request<::test_protocollayouts::MainProtocol::OneWayImport>
            request) const {
  ::fidl::internal::NaturalMessageEncoder _encoder{
      &::fidl::internal::ChannelTransport::VTable,
      ::test_protocollayouts::kMainProtocol_OneWayImport_Ordinal};
  ::fidl::Status status =
      messenger().OneWay(_encoder.EncodeTransactionalMessage(
          ::fidl::internal::NaturalMessageConverter<::fidl::Request<
              ::test_protocollayouts::MainProtocol::OneWayImport>>::
              IntoDomainObject(std::move(request))));
  return ::fidl::internal::ToFitxResult(status);
}

::fitx::result<::fidl::Error> fidl::internal::
    NaturalClientImpl<::test_protocollayouts::MainProtocol>::OneWayLocal(
        ::fidl::Request<::test_protocollayouts::MainProtocol::OneWayLocal>
            request) const {
  ::fidl::internal::NaturalMessageEncoder _encoder{
      &::fidl::internal::ChannelTransport::VTable,
      ::test_protocollayouts::kMainProtocol_OneWayLocal_Ordinal};
  ::fidl::Status status =
      messenger().OneWay(_encoder.EncodeTransactionalMessage(
          ::fidl::internal::NaturalMessageConverter<::fidl::Request<
              ::test_protocollayouts::MainProtocol::OneWayLocal>>::
              IntoDomainObject(std::move(request))));
  return ::fidl::internal::ToFitxResult(status);
}

::fitx::result<::fidl::Error> fidl::internal::
    NaturalClientImpl<::test_protocollayouts::MainProtocol>::OneWayAnon(
        ::fidl::Request<::test_protocollayouts::MainProtocol::OneWayAnon>
            request) const {
  ::fidl::internal::NaturalMessageEncoder _encoder{
      &::fidl::internal::ChannelTransport::VTable,
      ::test_protocollayouts::kMainProtocol_OneWayAnon_Ordinal};
  ::fidl::Status status =
      messenger().OneWay(_encoder.EncodeTransactionalMessage(
          ::fidl::internal::NaturalMessageConverter<::fidl::Request<
              ::test_protocollayouts::MainProtocol::OneWayAnon>>::
              IntoDomainObject(std::move(request))));
  return ::fidl::internal::ToFitxResult(status);
}
namespace test_protocollayouts {
#endif  // __Fuchsia__

}  // namespace test_protocollayouts
#ifdef __Fuchsia__

std::optional<::fidl::UnbindInfo> fidl::internal::
    NaturalEventDispatcher<::test_protocollayouts::MainProtocol>::DispatchEvent(
        ::fidl::IncomingMessage& msg,
        ::fidl::internal::IncomingTransportContext transport_context) {
  switch (msg.header()->ordinal) {
    case ::test_protocollayouts::kMainProtocol_OnAnonComposed_Ordinal: {
      ::fitx::result decoded = ::fidl::internal::DecodeTransactionalMessage<
          ::test_protocollayouts_imported::
              ComposedProtocolOnAnonComposedRequest>(std::move(msg));
      if (decoded.is_error()) {
        return ::fidl::UnbindInfo(decoded.error_value());
      }
      if (event_handler()) {
        ::fidl::Event<::test_protocollayouts::MainProtocol::OnAnonComposed>
            event = ::fidl::internal::NaturalMessageConverter<::fidl::Event<
                ::test_protocollayouts::MainProtocol::OnAnonComposed>>::
                FromDomainObject(std::move(decoded.value()));
        event_handler()->OnAnonComposed(event);
      }
      return std::nullopt;
    }
    case ::test_protocollayouts::
        kMainProtocol_OnAnonComposedWithError_Ordinal: {
      ::fitx::result decoded = ::fidl::internal::DecodeTransactionalMessage<
          ::test_protocollayouts_imported::
              ComposedProtocolOnAnonComposedWithErrorRequest>(std::move(msg));
      if (decoded.is_error()) {
        return ::fidl::UnbindInfo(decoded.error_value());
      }
      if (event_handler()) {
        ::fidl::Event<
            ::test_protocollayouts::MainProtocol::OnAnonComposedWithError>
            event = ::fidl::internal::NaturalMessageConverter<
                ::fidl::Event<::test_protocollayouts::MainProtocol::
                                  OnAnonComposedWithError>>::
                FromDomainObject(std::move(decoded.value()));
        event_handler()->OnAnonComposedWithError(event);
      }
      return std::nullopt;
    }
    case ::test_protocollayouts::kMainProtocol_OnNamedComposed_Ordinal: {
      ::fitx::result decoded = ::fidl::internal::DecodeTransactionalMessage<
          ::test_protocollayouts_imported::ImportUnionPayload>(std::move(msg));
      if (decoded.is_error()) {
        return ::fidl::UnbindInfo(decoded.error_value());
      }
      if (event_handler()) {
        ::fidl::Event<::test_protocollayouts::MainProtocol::OnNamedComposed>
            event = ::fidl::internal::NaturalMessageConverter<::fidl::Event<
                ::test_protocollayouts::MainProtocol::OnNamedComposed>>::
                FromDomainObject(std::move(decoded.value()));
        event_handler()->OnNamedComposed(event);
      }
      return std::nullopt;
    }
    case ::test_protocollayouts::
        kMainProtocol_OnNamedComposedWithError_Ordinal: {
      ::fitx::result decoded = ::fidl::internal::DecodeTransactionalMessage<
          ::test_protocollayouts_imported::
              ComposedProtocolOnNamedComposedWithErrorRequest>(std::move(msg));
      if (decoded.is_error()) {
        return ::fidl::UnbindInfo(decoded.error_value());
      }
      if (event_handler()) {
        ::fidl::Event<
            ::test_protocollayouts::MainProtocol::OnNamedComposedWithError>
            event = ::fidl::internal::NaturalMessageConverter<
                ::fidl::Event<::test_protocollayouts::MainProtocol::
                                  OnNamedComposedWithError>>::
                FromDomainObject(std::move(decoded.value()));
        event_handler()->OnNamedComposedWithError(event);
      }
      return std::nullopt;
    }
    case ::test_protocollayouts::kMainProtocol_OnImport_Ordinal: {
      ::fitx::result decoded = ::fidl::internal::DecodeTransactionalMessage<
          ::test_protocollayouts_imported::ImportUnionPayload>(std::move(msg));
      if (decoded.is_error()) {
        return ::fidl::UnbindInfo(decoded.error_value());
      }
      if (event_handler()) {
        ::fidl::Event<::test_protocollayouts::MainProtocol::OnImport> event =
            ::fidl::internal::NaturalMessageConverter<
                ::fidl::Event<::test_protocollayouts::MainProtocol::OnImport>>::
                FromDomainObject(std::move(decoded.value()));
        event_handler()->OnImport(event);
      }
      return std::nullopt;
    }
    case ::test_protocollayouts::kMainProtocol_OnImportWithError_Ordinal: {
      ::fitx::result decoded = ::fidl::internal::DecodeTransactionalMessage<
          ::test_protocollayouts::MainProtocolOnImportWithErrorRequest>(
          std::move(msg));
      if (decoded.is_error()) {
        return ::fidl::UnbindInfo(decoded.error_value());
      }
      if (event_handler()) {
        ::fidl::Event<::test_protocollayouts::MainProtocol::OnImportWithError>
            event = ::fidl::internal::NaturalMessageConverter<::fidl::Event<
                ::test_protocollayouts::MainProtocol::OnImportWithError>>::
                FromDomainObject(std::move(decoded.value()));
        event_handler()->OnImportWithError(event);
      }
      return std::nullopt;
    }
    case ::test_protocollayouts::kMainProtocol_OnLocal_Ordinal: {
      ::fitx::result decoded = ::fidl::internal::DecodeTransactionalMessage<
          ::test_protocollayouts::LocalUnionPayload>(std::move(msg));
      if (decoded.is_error()) {
        return ::fidl::UnbindInfo(decoded.error_value());
      }
      if (event_handler()) {
        ::fidl::Event<::test_protocollayouts::MainProtocol::OnLocal> event =
            ::fidl::internal::NaturalMessageConverter<
                ::fidl::Event<::test_protocollayouts::MainProtocol::OnLocal>>::
                FromDomainObject(std::move(decoded.value()));
        event_handler()->OnLocal(event);
      }
      return std::nullopt;
    }
    case ::test_protocollayouts::kMainProtocol_OnLocalWithError_Ordinal: {
      ::fitx::result decoded = ::fidl::internal::DecodeTransactionalMessage<
          ::test_protocollayouts::MainProtocolOnLocalWithErrorRequest>(
          std::move(msg));
      if (decoded.is_error()) {
        return ::fidl::UnbindInfo(decoded.error_value());
      }
      if (event_handler()) {
        ::fidl::Event<::test_protocollayouts::MainProtocol::OnLocalWithError>
            event = ::fidl::internal::NaturalMessageConverter<::fidl::Event<
                ::test_protocollayouts::MainProtocol::OnLocalWithError>>::
                FromDomainObject(std::move(decoded.value()));
        event_handler()->OnLocalWithError(event);
      }
      return std::nullopt;
    }
    case ::test_protocollayouts::kMainProtocol_OnAnon_Ordinal: {
      ::fitx::result decoded = ::fidl::internal::DecodeTransactionalMessage<
          ::test_protocollayouts::MainProtocolOnAnonRequest>(std::move(msg));
      if (decoded.is_error()) {
        return ::fidl::UnbindInfo(decoded.error_value());
      }
      if (event_handler()) {
        ::fidl::Event<::test_protocollayouts::MainProtocol::OnAnon> event =
            ::fidl::internal::NaturalMessageConverter<
                ::fidl::Event<::test_protocollayouts::MainProtocol::OnAnon>>::
                FromDomainObject(std::move(decoded.value()));
        event_handler()->OnAnon(event);
      }
      return std::nullopt;
    }
    case ::test_protocollayouts::kMainProtocol_OnAnonWithError_Ordinal: {
      ::fitx::result decoded = ::fidl::internal::DecodeTransactionalMessage<
          ::test_protocollayouts::MainProtocolOnAnonWithErrorRequest>(
          std::move(msg));
      if (decoded.is_error()) {
        return ::fidl::UnbindInfo(decoded.error_value());
      }
      if (event_handler()) {
        ::fidl::Event<::test_protocollayouts::MainProtocol::OnAnonWithError>
            event = ::fidl::internal::NaturalMessageConverter<::fidl::Event<
                ::test_protocollayouts::MainProtocol::OnAnonWithError>>::
                FromDomainObject(std::move(decoded.value()));
        event_handler()->OnAnonWithError(event);
      }
      return std::nullopt;
    }
    default:
      break;
  }
  return ::fidl::UnbindInfo::UnknownOrdinal();
}
#endif  // __Fuchsia__

#ifdef __Fuchsia__

::fitx::result<::fidl::Error>
fidl::internal::NaturalWeakEventSender<::test_protocollayouts::MainProtocol>::
    OnAnonComposed(
        ::test_protocollayouts_imported::ComposedProtocolOnAnonComposedRequest
            payload) {
  ::fidl::internal::NaturalMessageEncoder _encoder{
      &::fidl::internal::ChannelTransport::VTable,
      ::test_protocollayouts::kMainProtocol_OnAnonComposed_Ordinal};
  auto encoded_message =
      _encoder.EncodeTransactionalMessage(std::move(payload));
  ::fidl::Status result = _inner().SendEvent(encoded_message);
  return ::fidl::internal::ToFitxResult(result);
}

::fitx::result<::fidl::Error> fidl::internal::
    NaturalEventSender<::test_protocollayouts::MainProtocol>::OnAnonComposed(
        ::test_protocollayouts_imported::ComposedProtocolOnAnonComposedRequest
            payload) {
  ::fidl::internal::NaturalMessageEncoder _encoder{
      &::fidl::internal::ChannelTransport::VTable,
      ::test_protocollayouts::kMainProtocol_OnAnonComposed_Ordinal};
  auto encoded_message =
      _encoder.EncodeTransactionalMessage(std::move(payload));
  encoded_message.Write(_transport());
  return ::fidl::internal::ToFitxResult(::fidl::Status{encoded_message});
}

::fitx::result<::fidl::Error>
fidl::internal::NaturalWeakEventSender<::test_protocollayouts::MainProtocol>::
    OnAnonComposedWithError(
        ::test_protocollayouts_imported::
            ComposedProtocolOnAnonComposedWithErrorRequest payload) {
  ::fidl::internal::NaturalMessageEncoder _encoder{
      &::fidl::internal::ChannelTransport::VTable,
      ::test_protocollayouts::kMainProtocol_OnAnonComposedWithError_Ordinal};
  auto encoded_message =
      _encoder.EncodeTransactionalMessage(std::move(payload));
  ::fidl::Status result = _inner().SendEvent(encoded_message);
  return ::fidl::internal::ToFitxResult(result);
}

::fitx::result<::fidl::Error>
fidl::internal::NaturalEventSender<::test_protocollayouts::MainProtocol>::
    OnAnonComposedWithError(
        ::test_protocollayouts_imported::
            ComposedProtocolOnAnonComposedWithErrorRequest payload) {
  ::fidl::internal::NaturalMessageEncoder _encoder{
      &::fidl::internal::ChannelTransport::VTable,
      ::test_protocollayouts::kMainProtocol_OnAnonComposedWithError_Ordinal};
  auto encoded_message =
      _encoder.EncodeTransactionalMessage(std::move(payload));
  encoded_message.Write(_transport());
  return ::fidl::internal::ToFitxResult(::fidl::Status{encoded_message});
}

::fitx::result<::fidl::Error>
fidl::internal::NaturalWeakEventSender<::test_protocollayouts::MainProtocol>::
    OnNamedComposed(
        ::test_protocollayouts_imported::ImportUnionPayload payload) {
  ::fidl::internal::NaturalMessageEncoder _encoder{
      &::fidl::internal::ChannelTransport::VTable,
      ::test_protocollayouts::kMainProtocol_OnNamedComposed_Ordinal};
  auto encoded_message =
      _encoder.EncodeTransactionalMessage(std::move(payload));
  ::fidl::Status result = _inner().SendEvent(encoded_message);
  return ::fidl::internal::ToFitxResult(result);
}

::fitx::result<::fidl::Error> fidl::internal::
    NaturalEventSender<::test_protocollayouts::MainProtocol>::OnNamedComposed(
        ::test_protocollayouts_imported::ImportUnionPayload payload) {
  ::fidl::internal::NaturalMessageEncoder _encoder{
      &::fidl::internal::ChannelTransport::VTable,
      ::test_protocollayouts::kMainProtocol_OnNamedComposed_Ordinal};
  auto encoded_message =
      _encoder.EncodeTransactionalMessage(std::move(payload));
  encoded_message.Write(_transport());
  return ::fidl::internal::ToFitxResult(::fidl::Status{encoded_message});
}

::fitx::result<::fidl::Error>
fidl::internal::NaturalWeakEventSender<::test_protocollayouts::MainProtocol>::
    OnNamedComposedWithError(
        ::test_protocollayouts_imported::
            ComposedProtocolOnNamedComposedWithErrorRequest payload) {
  ::fidl::internal::NaturalMessageEncoder _encoder{
      &::fidl::internal::ChannelTransport::VTable,
      ::test_protocollayouts::kMainProtocol_OnNamedComposedWithError_Ordinal};
  auto encoded_message =
      _encoder.EncodeTransactionalMessage(std::move(payload));
  ::fidl::Status result = _inner().SendEvent(encoded_message);
  return ::fidl::internal::ToFitxResult(result);
}

::fitx::result<::fidl::Error>
fidl::internal::NaturalEventSender<::test_protocollayouts::MainProtocol>::
    OnNamedComposedWithError(
        ::test_protocollayouts_imported::
            ComposedProtocolOnNamedComposedWithErrorRequest payload) {
  ::fidl::internal::NaturalMessageEncoder _encoder{
      &::fidl::internal::ChannelTransport::VTable,
      ::test_protocollayouts::kMainProtocol_OnNamedComposedWithError_Ordinal};
  auto encoded_message =
      _encoder.EncodeTransactionalMessage(std::move(payload));
  encoded_message.Write(_transport());
  return ::fidl::internal::ToFitxResult(::fidl::Status{encoded_message});
}

::fitx::result<::fidl::Error> fidl::internal::
    NaturalWeakEventSender<::test_protocollayouts::MainProtocol>::OnImport(
        ::test_protocollayouts_imported::ImportUnionPayload payload) {
  ::fidl::internal::NaturalMessageEncoder _encoder{
      &::fidl::internal::ChannelTransport::VTable,
      ::test_protocollayouts::kMainProtocol_OnImport_Ordinal};
  auto encoded_message =
      _encoder.EncodeTransactionalMessage(std::move(payload));
  ::fidl::Status result = _inner().SendEvent(encoded_message);
  return ::fidl::internal::ToFitxResult(result);
}

::fitx::result<::fidl::Error> fidl::internal::
    NaturalEventSender<::test_protocollayouts::MainProtocol>::OnImport(
        ::test_protocollayouts_imported::ImportUnionPayload payload) {
  ::fidl::internal::NaturalMessageEncoder _encoder{
      &::fidl::internal::ChannelTransport::VTable,
      ::test_protocollayouts::kMainProtocol_OnImport_Ordinal};
  auto encoded_message =
      _encoder.EncodeTransactionalMessage(std::move(payload));
  encoded_message.Write(_transport());
  return ::fidl::internal::ToFitxResult(::fidl::Status{encoded_message});
}

::fitx::result<::fidl::Error>
fidl::internal::NaturalWeakEventSender<::test_protocollayouts::MainProtocol>::
    OnImportWithError(
        ::test_protocollayouts::MainProtocolOnImportWithErrorRequest payload) {
  ::fidl::internal::NaturalMessageEncoder _encoder{
      &::fidl::internal::ChannelTransport::VTable,
      ::test_protocollayouts::kMainProtocol_OnImportWithError_Ordinal};
  auto encoded_message =
      _encoder.EncodeTransactionalMessage(std::move(payload));
  ::fidl::Status result = _inner().SendEvent(encoded_message);
  return ::fidl::internal::ToFitxResult(result);
}

::fitx::result<::fidl::Error> fidl::internal::
    NaturalEventSender<::test_protocollayouts::MainProtocol>::OnImportWithError(
        ::test_protocollayouts::MainProtocolOnImportWithErrorRequest payload) {
  ::fidl::internal::NaturalMessageEncoder _encoder{
      &::fidl::internal::ChannelTransport::VTable,
      ::test_protocollayouts::kMainProtocol_OnImportWithError_Ordinal};
  auto encoded_message =
      _encoder.EncodeTransactionalMessage(std::move(payload));
  encoded_message.Write(_transport());
  return ::fidl::internal::ToFitxResult(::fidl::Status{encoded_message});
}

::fitx::result<::fidl::Error> fidl::internal::
    NaturalWeakEventSender<::test_protocollayouts::MainProtocol>::OnLocal(
        ::test_protocollayouts::LocalUnionPayload payload) {
  ::fidl::internal::NaturalMessageEncoder _encoder{
      &::fidl::internal::ChannelTransport::VTable,
      ::test_protocollayouts::kMainProtocol_OnLocal_Ordinal};
  auto encoded_message =
      _encoder.EncodeTransactionalMessage(std::move(payload));
  ::fidl::Status result = _inner().SendEvent(encoded_message);
  return ::fidl::internal::ToFitxResult(result);
}

::fitx::result<::fidl::Error> fidl::internal::
    NaturalEventSender<::test_protocollayouts::MainProtocol>::OnLocal(
        ::test_protocollayouts::LocalUnionPayload payload) {
  ::fidl::internal::NaturalMessageEncoder _encoder{
      &::fidl::internal::ChannelTransport::VTable,
      ::test_protocollayouts::kMainProtocol_OnLocal_Ordinal};
  auto encoded_message =
      _encoder.EncodeTransactionalMessage(std::move(payload));
  encoded_message.Write(_transport());
  return ::fidl::internal::ToFitxResult(::fidl::Status{encoded_message});
}

::fitx::result<::fidl::Error>
fidl::internal::NaturalWeakEventSender<::test_protocollayouts::MainProtocol>::
    OnLocalWithError(
        ::test_protocollayouts::MainProtocolOnLocalWithErrorRequest payload) {
  ::fidl::internal::NaturalMessageEncoder _encoder{
      &::fidl::internal::ChannelTransport::VTable,
      ::test_protocollayouts::kMainProtocol_OnLocalWithError_Ordinal};
  auto encoded_message =
      _encoder.EncodeTransactionalMessage(std::move(payload));
  ::fidl::Status result = _inner().SendEvent(encoded_message);
  return ::fidl::internal::ToFitxResult(result);
}

::fitx::result<::fidl::Error> fidl::internal::
    NaturalEventSender<::test_protocollayouts::MainProtocol>::OnLocalWithError(
        ::test_protocollayouts::MainProtocolOnLocalWithErrorRequest payload) {
  ::fidl::internal::NaturalMessageEncoder _encoder{
      &::fidl::internal::ChannelTransport::VTable,
      ::test_protocollayouts::kMainProtocol_OnLocalWithError_Ordinal};
  auto encoded_message =
      _encoder.EncodeTransactionalMessage(std::move(payload));
  encoded_message.Write(_transport());
  return ::fidl::internal::ToFitxResult(::fidl::Status{encoded_message});
}

::fitx::result<::fidl::Error> fidl::internal::
    NaturalWeakEventSender<::test_protocollayouts::MainProtocol>::OnAnon(
        ::test_protocollayouts::MainProtocolOnAnonRequest payload) {
  ::fidl::internal::NaturalMessageEncoder _encoder{
      &::fidl::internal::ChannelTransport::VTable,
      ::test_protocollayouts::kMainProtocol_OnAnon_Ordinal};
  auto encoded_message =
      _encoder.EncodeTransactionalMessage(std::move(payload));
  ::fidl::Status result = _inner().SendEvent(encoded_message);
  return ::fidl::internal::ToFitxResult(result);
}

::fitx::result<::fidl::Error> fidl::internal::
    NaturalEventSender<::test_protocollayouts::MainProtocol>::OnAnon(
        ::test_protocollayouts::MainProtocolOnAnonRequest payload) {
  ::fidl::internal::NaturalMessageEncoder _encoder{
      &::fidl::internal::ChannelTransport::VTable,
      ::test_protocollayouts::kMainProtocol_OnAnon_Ordinal};
  auto encoded_message =
      _encoder.EncodeTransactionalMessage(std::move(payload));
  encoded_message.Write(_transport());
  return ::fidl::internal::ToFitxResult(::fidl::Status{encoded_message});
}

::fitx::result<::fidl::Error>
fidl::internal::NaturalWeakEventSender<::test_protocollayouts::MainProtocol>::
    OnAnonWithError(
        ::test_protocollayouts::MainProtocolOnAnonWithErrorRequest payload) {
  ::fidl::internal::NaturalMessageEncoder _encoder{
      &::fidl::internal::ChannelTransport::VTable,
      ::test_protocollayouts::kMainProtocol_OnAnonWithError_Ordinal};
  auto encoded_message =
      _encoder.EncodeTransactionalMessage(std::move(payload));
  ::fidl::Status result = _inner().SendEvent(encoded_message);
  return ::fidl::internal::ToFitxResult(result);
}

::fitx::result<::fidl::Error> fidl::internal::
    NaturalEventSender<::test_protocollayouts::MainProtocol>::OnAnonWithError(
        ::test_protocollayouts::MainProtocolOnAnonWithErrorRequest payload) {
  ::fidl::internal::NaturalMessageEncoder _encoder{
      &::fidl::internal::ChannelTransport::VTable,
      ::test_protocollayouts::kMainProtocol_OnAnonWithError_Ordinal};
  auto encoded_message =
      _encoder.EncodeTransactionalMessage(std::move(payload));
  encoded_message.Write(_transport());
  return ::fidl::internal::ToFitxResult(::fidl::Status{encoded_message});
}

#endif  // __Fuchsia__

void fidl::internal::NaturalCompleterBase<
    ::test_protocollayouts::MainProtocol::TwoWayAnonComposed>::
    Reply(::fidl::Response<
          ::test_protocollayouts::MainProtocol::TwoWayAnonComposed>&&
              response) {
  ::fidl::internal::NaturalServerMessenger _messenger{this};
  ::fidl::internal::NaturalMessageEncoder _encoder{
      &::fidl::internal::ChannelTransport::VTable,
      ::test_protocollayouts::kMainProtocol_TwoWayAnonComposed_Ordinal};
  _messenger.SendReply(
      _encoder.EncodeTransactionalMessage(
          ::fidl::internal::NaturalMessageConverter<::fidl::Response<
              ::test_protocollayouts::MainProtocol::TwoWayAnonComposed>>::
              IntoDomainObject(std::move(response))),
      ::fidl::internal::OutgoingTransportContext{});
}

void fidl::internal::NaturalCompleterBase<
    ::test_protocollayouts::MainProtocol::TwoWayAnonComposedWithError>::
    Reply(::fidl::Response<
          ::test_protocollayouts::MainProtocol::TwoWayAnonComposedWithError>&&
              response) {
  ::fidl::internal::NaturalServerMessenger _messenger{this};
  ::fidl::internal::NaturalMessageEncoder _encoder{
      &::fidl::internal::ChannelTransport::VTable,
      ::test_protocollayouts::
          kMainProtocol_TwoWayAnonComposedWithError_Ordinal};
  _messenger.SendReply(
      _encoder.EncodeTransactionalMessage(
          ::fidl::internal::NaturalMessageConverter<
              ::fidl::Response<::test_protocollayouts::MainProtocol::
                                   TwoWayAnonComposedWithError>>::
              IntoDomainObject(std::move(response))),
      ::fidl::internal::OutgoingTransportContext{});
}

void fidl::internal::NaturalCompleterBase<
    ::test_protocollayouts::MainProtocol::TwoWayNamedComposed>::
    Reply(::fidl::Response<
          ::test_protocollayouts::MainProtocol::TwoWayNamedComposed>&&
              response) {
  ::fidl::internal::NaturalServerMessenger _messenger{this};
  ::fidl::internal::NaturalMessageEncoder _encoder{
      &::fidl::internal::ChannelTransport::VTable,
      ::test_protocollayouts::kMainProtocol_TwoWayNamedComposed_Ordinal};
  _messenger.SendReply(
      _encoder.EncodeTransactionalMessage(
          ::fidl::internal::NaturalMessageConverter<::fidl::Response<
              ::test_protocollayouts::MainProtocol::TwoWayNamedComposed>>::
              IntoDomainObject(std::move(response))),
      ::fidl::internal::OutgoingTransportContext{});
}

void fidl::internal::NaturalCompleterBase<
    ::test_protocollayouts::MainProtocol::TwoWayNamedComposedWithError>::
    Reply(::fidl::Response<
          ::test_protocollayouts::MainProtocol::TwoWayNamedComposedWithError>&&
              response) {
  ::fidl::internal::NaturalServerMessenger _messenger{this};
  ::fidl::internal::NaturalMessageEncoder _encoder{
      &::fidl::internal::ChannelTransport::VTable,
      ::test_protocollayouts::
          kMainProtocol_TwoWayNamedComposedWithError_Ordinal};
  _messenger.SendReply(
      _encoder.EncodeTransactionalMessage(
          ::fidl::internal::NaturalMessageConverter<
              ::fidl::Response<::test_protocollayouts::MainProtocol::
                                   TwoWayNamedComposedWithError>>::
              IntoDomainObject(std::move(response))),
      ::fidl::internal::OutgoingTransportContext{});
}

void fidl::internal::NaturalCompleterBase<
    ::test_protocollayouts::MainProtocol::TwoWayImport>::
    Reply(::fidl::Response<::test_protocollayouts::MainProtocol::TwoWayImport>&&
              response) {
  ::fidl::internal::NaturalServerMessenger _messenger{this};
  ::fidl::internal::NaturalMessageEncoder _encoder{
      &::fidl::internal::ChannelTransport::VTable,
      ::test_protocollayouts::kMainProtocol_TwoWayImport_Ordinal};
  _messenger.SendReply(
      _encoder.EncodeTransactionalMessage(
          ::fidl::internal::NaturalMessageConverter<::fidl::Response<
              ::test_protocollayouts::MainProtocol::TwoWayImport>>::
              IntoDomainObject(std::move(response))),
      ::fidl::internal::OutgoingTransportContext{});
}

void fidl::internal::NaturalCompleterBase<
    ::test_protocollayouts::MainProtocol::TwoWayImportWithError>::
    Reply(::fidl::Response<
          ::test_protocollayouts::MainProtocol::TwoWayImportWithError>&&
              response) {
  ::fidl::internal::NaturalServerMessenger _messenger{this};
  ::fidl::internal::NaturalMessageEncoder _encoder{
      &::fidl::internal::ChannelTransport::VTable,
      ::test_protocollayouts::kMainProtocol_TwoWayImportWithError_Ordinal};
  _messenger.SendReply(
      _encoder.EncodeTransactionalMessage(
          ::fidl::internal::NaturalMessageConverter<::fidl::Response<
              ::test_protocollayouts::MainProtocol::TwoWayImportWithError>>::
              IntoDomainObject(std::move(response))),
      ::fidl::internal::OutgoingTransportContext{});
}

void fidl::internal::NaturalCompleterBase<
    ::test_protocollayouts::MainProtocol::TwoWayLocal>::
    Reply(::fidl::Response<::test_protocollayouts::MainProtocol::TwoWayLocal>&&
              response) {
  ::fidl::internal::NaturalServerMessenger _messenger{this};
  ::fidl::internal::NaturalMessageEncoder _encoder{
      &::fidl::internal::ChannelTransport::VTable,
      ::test_protocollayouts::kMainProtocol_TwoWayLocal_Ordinal};
  _messenger.SendReply(
      _encoder.EncodeTransactionalMessage(
          ::fidl::internal::NaturalMessageConverter<::fidl::Response<
              ::test_protocollayouts::MainProtocol::TwoWayLocal>>::
              IntoDomainObject(std::move(response))),
      ::fidl::internal::OutgoingTransportContext{});
}

void fidl::internal::NaturalCompleterBase<
    ::test_protocollayouts::MainProtocol::TwoWayLocalWithError>::
    Reply(::fidl::Response<
          ::test_protocollayouts::MainProtocol::TwoWayLocalWithError>&&
              response) {
  ::fidl::internal::NaturalServerMessenger _messenger{this};
  ::fidl::internal::NaturalMessageEncoder _encoder{
      &::fidl::internal::ChannelTransport::VTable,
      ::test_protocollayouts::kMainProtocol_TwoWayLocalWithError_Ordinal};
  _messenger.SendReply(
      _encoder.EncodeTransactionalMessage(
          ::fidl::internal::NaturalMessageConverter<::fidl::Response<
              ::test_protocollayouts::MainProtocol::TwoWayLocalWithError>>::
              IntoDomainObject(std::move(response))),
      ::fidl::internal::OutgoingTransportContext{});
}

void fidl::internal::NaturalCompleterBase<
    ::test_protocollayouts::MainProtocol::TwoWayAnon>::
    Reply(::fidl::Response<::test_protocollayouts::MainProtocol::TwoWayAnon>&&
              response) {
  ::fidl::internal::NaturalServerMessenger _messenger{this};
  ::fidl::internal::NaturalMessageEncoder _encoder{
      &::fidl::internal::ChannelTransport::VTable,
      ::test_protocollayouts::kMainProtocol_TwoWayAnon_Ordinal};
  _messenger.SendReply(
      _encoder.EncodeTransactionalMessage(
          ::fidl::internal::NaturalMessageConverter<::fidl::Response<
              ::test_protocollayouts::MainProtocol::TwoWayAnon>>::
              IntoDomainObject(std::move(response))),
      ::fidl::internal::OutgoingTransportContext{});
}

void fidl::internal::NaturalCompleterBase<
    ::test_protocollayouts::MainProtocol::TwoWayAnonWithError>::
    Reply(::fidl::Response<
          ::test_protocollayouts::MainProtocol::TwoWayAnonWithError>&&
              response) {
  ::fidl::internal::NaturalServerMessenger _messenger{this};
  ::fidl::internal::NaturalMessageEncoder _encoder{
      &::fidl::internal::ChannelTransport::VTable,
      ::test_protocollayouts::kMainProtocol_TwoWayAnonWithError_Ordinal};
  _messenger.SendReply(
      _encoder.EncodeTransactionalMessage(
          ::fidl::internal::NaturalMessageConverter<::fidl::Response<
              ::test_protocollayouts::MainProtocol::TwoWayAnonWithError>>::
              IntoDomainObject(std::move(response))),
      ::fidl::internal::OutgoingTransportContext{});
}

#ifdef __Fuchsia__

constexpr ::fidl::internal::MethodEntry fidl::internal::NaturalServerDispatcher<
    ::test_protocollayouts::MainProtocol>::entries_[] = {
    {
        ::test_protocollayouts::kMainProtocol_OneWayAnonComposed_Ordinal,
        [](void* interface, ::fidl::IncomingMessage&& msg,
           internal::IncomingTransportContext transport_context,
           ::fidl::Transaction* txn) {
          ::fitx::result decoded = ::fidl::internal::DecodeTransactionalMessage<
              ::test_protocollayouts_imported::
                  ComposedProtocolOneWayAnonComposedRequest>(std::move(msg));
          if (decoded.is_error()) {
            return decoded.error_value().status();
          }
          ::fidl::Request<
              ::test_protocollayouts::MainProtocol::OneWayAnonComposed>
              request = ::fidl::internal::NaturalMessageConverter<
                  ::fidl::Request<::test_protocollayouts::MainProtocol::
                                      OneWayAnonComposed>>::
                  FromDomainObject(std::move(decoded.value()));
          ::fidl::internal::NaturalCompleter<
              ::test_protocollayouts::MainProtocol::OneWayAnonComposed>::Sync
              completer(txn);
          static_cast<::fidl::Server<::test_protocollayouts::MainProtocol>*>(
              interface)
              ->OneWayAnonComposed(request, completer);
          return ZX_OK;
        },
    },
    {
        ::test_protocollayouts::kMainProtocol_TwoWayAnonComposed_Ordinal,
        [](void* interface, ::fidl::IncomingMessage&& msg,
           internal::IncomingTransportContext transport_context,
           ::fidl::Transaction* txn) {
          ::fitx::result decoded = ::fidl::internal::DecodeTransactionalMessage<
              ::test_protocollayouts_imported::
                  ComposedProtocolTwoWayAnonComposedRequest>(std::move(msg));
          if (decoded.is_error()) {
            return decoded.error_value().status();
          }
          ::fidl::Request<
              ::test_protocollayouts::MainProtocol::TwoWayAnonComposed>
              request = ::fidl::internal::NaturalMessageConverter<
                  ::fidl::Request<::test_protocollayouts::MainProtocol::
                                      TwoWayAnonComposed>>::
                  FromDomainObject(std::move(decoded.value()));
          ::fidl::internal::NaturalCompleter<
              ::test_protocollayouts::MainProtocol::TwoWayAnonComposed>::Sync
              completer(txn);
          static_cast<::fidl::Server<::test_protocollayouts::MainProtocol>*>(
              interface)
              ->TwoWayAnonComposed(request, completer);
          return ZX_OK;
        },
    },
    {
        ::test_protocollayouts::
            kMainProtocol_TwoWayAnonComposedWithError_Ordinal,
        [](void* interface, ::fidl::IncomingMessage&& msg,
           internal::IncomingTransportContext transport_context,
           ::fidl::Transaction* txn) {
          ::fitx::result decoded = ::fidl::internal::DecodeTransactionalMessage<
              ::test_protocollayouts_imported::
                  ComposedProtocolTwoWayAnonComposedWithErrorRequest>(
              std::move(msg));
          if (decoded.is_error()) {
            return decoded.error_value().status();
          }
          ::fidl::Request<
              ::test_protocollayouts::MainProtocol::TwoWayAnonComposedWithError>
              request = ::fidl::internal::NaturalMessageConverter<
                  ::fidl::Request<::test_protocollayouts::MainProtocol::
                                      TwoWayAnonComposedWithError>>::
                  FromDomainObject(std::move(decoded.value()));
          ::fidl::internal::NaturalCompleter<
              ::test_protocollayouts::MainProtocol::
                  TwoWayAnonComposedWithError>::Sync completer(txn);
          static_cast<::fidl::Server<::test_protocollayouts::MainProtocol>*>(
              interface)
              ->TwoWayAnonComposedWithError(request, completer);
          return ZX_OK;
        },
    },
    {
        ::test_protocollayouts::kMainProtocol_OneWayNamedComposed_Ordinal,
        [](void* interface, ::fidl::IncomingMessage&& msg,
           internal::IncomingTransportContext transport_context,
           ::fidl::Transaction* txn) {
          ::fitx::result decoded = ::fidl::internal::DecodeTransactionalMessage<
              ::test_protocollayouts_imported::ImportTablePayload>(
              std::move(msg));
          if (decoded.is_error()) {
            return decoded.error_value().status();
          }
          ::fidl::Request<
              ::test_protocollayouts::MainProtocol::OneWayNamedComposed>
              request = ::fidl::internal::NaturalMessageConverter<
                  ::fidl::Request<::test_protocollayouts::MainProtocol::
                                      OneWayNamedComposed>>::
                  FromDomainObject(std::move(decoded.value()));
          ::fidl::internal::NaturalCompleter<
              ::test_protocollayouts::MainProtocol::OneWayNamedComposed>::Sync
              completer(txn);
          static_cast<::fidl::Server<::test_protocollayouts::MainProtocol>*>(
              interface)
              ->OneWayNamedComposed(request, completer);
          return ZX_OK;
        },
    },
    {
        ::test_protocollayouts::kMainProtocol_TwoWayNamedComposed_Ordinal,
        [](void* interface, ::fidl::IncomingMessage&& msg,
           internal::IncomingTransportContext transport_context,
           ::fidl::Transaction* txn) {
          ::fitx::result decoded = ::fidl::internal::DecodeTransactionalMessage<
              ::test_protocollayouts_imported::ImportUnionPayload>(
              std::move(msg));
          if (decoded.is_error()) {
            return decoded.error_value().status();
          }
          ::fidl::Request<
              ::test_protocollayouts::MainProtocol::TwoWayNamedComposed>
              request = ::fidl::internal::NaturalMessageConverter<
                  ::fidl::Request<::test_protocollayouts::MainProtocol::
                                      TwoWayNamedComposed>>::
                  FromDomainObject(std::move(decoded.value()));
          ::fidl::internal::NaturalCompleter<
              ::test_protocollayouts::MainProtocol::TwoWayNamedComposed>::Sync
              completer(txn);
          static_cast<::fidl::Server<::test_protocollayouts::MainProtocol>*>(
              interface)
              ->TwoWayNamedComposed(request, completer);
          return ZX_OK;
        },
    },
    {
        ::test_protocollayouts::
            kMainProtocol_TwoWayNamedComposedWithError_Ordinal,
        [](void* interface, ::fidl::IncomingMessage&& msg,
           internal::IncomingTransportContext transport_context,
           ::fidl::Transaction* txn) {
          ::fitx::result decoded = ::fidl::internal::DecodeTransactionalMessage<
              ::test_protocollayouts_imported::ImportTablePayload>(
              std::move(msg));
          if (decoded.is_error()) {
            return decoded.error_value().status();
          }
          ::fidl::Request<::test_protocollayouts::MainProtocol::
                              TwoWayNamedComposedWithError>
              request = ::fidl::internal::NaturalMessageConverter<
                  ::fidl::Request<::test_protocollayouts::MainProtocol::
                                      TwoWayNamedComposedWithError>>::
                  FromDomainObject(std::move(decoded.value()));
          ::fidl::internal::NaturalCompleter<
              ::test_protocollayouts::MainProtocol::
                  TwoWayNamedComposedWithError>::Sync completer(txn);
          static_cast<::fidl::Server<::test_protocollayouts::MainProtocol>*>(
              interface)
              ->TwoWayNamedComposedWithError(request, completer);
          return ZX_OK;
        },
    },
    {
        ::test_protocollayouts::kMainProtocol_OneWayImport_Ordinal,
        [](void* interface, ::fidl::IncomingMessage&& msg,
           internal::IncomingTransportContext transport_context,
           ::fidl::Transaction* txn) {
          ::fitx::result decoded = ::fidl::internal::DecodeTransactionalMessage<
              ::test_protocollayouts_imported::ImportTablePayload>(
              std::move(msg));
          if (decoded.is_error()) {
            return decoded.error_value().status();
          }
          ::fidl::Request<::test_protocollayouts::MainProtocol::OneWayImport>
              request =
                  ::fidl::internal::NaturalMessageConverter<::fidl::Request<
                      ::test_protocollayouts::MainProtocol::OneWayImport>>::
                      FromDomainObject(std::move(decoded.value()));
          ::fidl::internal::NaturalCompleter<
              ::test_protocollayouts::MainProtocol::OneWayImport>::Sync
              completer(txn);
          static_cast<::fidl::Server<::test_protocollayouts::MainProtocol>*>(
              interface)
              ->OneWayImport(request, completer);
          return ZX_OK;
        },
    },
    {
        ::test_protocollayouts::kMainProtocol_TwoWayImport_Ordinal,
        [](void* interface, ::fidl::IncomingMessage&& msg,
           internal::IncomingTransportContext transport_context,
           ::fidl::Transaction* txn) {
          ::fitx::result decoded = ::fidl::internal::DecodeTransactionalMessage<
              ::test_protocollayouts_imported::ImportUnionPayload>(
              std::move(msg));
          if (decoded.is_error()) {
            return decoded.error_value().status();
          }
          ::fidl::Request<::test_protocollayouts::MainProtocol::TwoWayImport>
              request =
                  ::fidl::internal::NaturalMessageConverter<::fidl::Request<
                      ::test_protocollayouts::MainProtocol::TwoWayImport>>::
                      FromDomainObject(std::move(decoded.value()));
          ::fidl::internal::NaturalCompleter<
              ::test_protocollayouts::MainProtocol::TwoWayImport>::Sync
              completer(txn);
          static_cast<::fidl::Server<::test_protocollayouts::MainProtocol>*>(
              interface)
              ->TwoWayImport(request, completer);
          return ZX_OK;
        },
    },
    {
        ::test_protocollayouts::kMainProtocol_TwoWayImportWithError_Ordinal,
        [](void* interface, ::fidl::IncomingMessage&& msg,
           internal::IncomingTransportContext transport_context,
           ::fidl::Transaction* txn) {
          ::fitx::result decoded = ::fidl::internal::DecodeTransactionalMessage<
              ::test_protocollayouts_imported::ImportTablePayload>(
              std::move(msg));
          if (decoded.is_error()) {
            return decoded.error_value().status();
          }
          ::fidl::Request<
              ::test_protocollayouts::MainProtocol::TwoWayImportWithError>
              request = ::fidl::internal::NaturalMessageConverter<
                  ::fidl::Request<::test_protocollayouts::MainProtocol::
                                      TwoWayImportWithError>>::
                  FromDomainObject(std::move(decoded.value()));
          ::fidl::internal::NaturalCompleter<
              ::test_protocollayouts::MainProtocol::TwoWayImportWithError>::Sync
              completer(txn);
          static_cast<::fidl::Server<::test_protocollayouts::MainProtocol>*>(
              interface)
              ->TwoWayImportWithError(request, completer);
          return ZX_OK;
        },
    },
    {
        ::test_protocollayouts::kMainProtocol_OneWayLocal_Ordinal,
        [](void* interface, ::fidl::IncomingMessage&& msg,
           internal::IncomingTransportContext transport_context,
           ::fidl::Transaction* txn) {
          ::fitx::result decoded = ::fidl::internal::DecodeTransactionalMessage<
              ::test_protocollayouts::LocalTablePayload>(std::move(msg));
          if (decoded.is_error()) {
            return decoded.error_value().status();
          }
          ::fidl::Request<::test_protocollayouts::MainProtocol::OneWayLocal>
              request =
                  ::fidl::internal::NaturalMessageConverter<::fidl::Request<
                      ::test_protocollayouts::MainProtocol::OneWayLocal>>::
                      FromDomainObject(std::move(decoded.value()));
          ::fidl::internal::NaturalCompleter<
              ::test_protocollayouts::MainProtocol::OneWayLocal>::Sync
              completer(txn);
          static_cast<::fidl::Server<::test_protocollayouts::MainProtocol>*>(
              interface)
              ->OneWayLocal(request, completer);
          return ZX_OK;
        },
    },
    {
        ::test_protocollayouts::kMainProtocol_TwoWayLocal_Ordinal,
        [](void* interface, ::fidl::IncomingMessage&& msg,
           internal::IncomingTransportContext transport_context,
           ::fidl::Transaction* txn) {
          ::fitx::result decoded = ::fidl::internal::DecodeTransactionalMessage<
              ::test_protocollayouts::LocalUnionPayload>(std::move(msg));
          if (decoded.is_error()) {
            return decoded.error_value().status();
          }
          ::fidl::Request<::test_protocollayouts::MainProtocol::TwoWayLocal>
              request =
                  ::fidl::internal::NaturalMessageConverter<::fidl::Request<
                      ::test_protocollayouts::MainProtocol::TwoWayLocal>>::
                      FromDomainObject(std::move(decoded.value()));
          ::fidl::internal::NaturalCompleter<
              ::test_protocollayouts::MainProtocol::TwoWayLocal>::Sync
              completer(txn);
          static_cast<::fidl::Server<::test_protocollayouts::MainProtocol>*>(
              interface)
              ->TwoWayLocal(request, completer);
          return ZX_OK;
        },
    },
    {
        ::test_protocollayouts::kMainProtocol_TwoWayLocalWithError_Ordinal,
        [](void* interface, ::fidl::IncomingMessage&& msg,
           internal::IncomingTransportContext transport_context,
           ::fidl::Transaction* txn) {
          ::fitx::result decoded = ::fidl::internal::DecodeTransactionalMessage<
              ::test_protocollayouts::LocalTablePayload>(std::move(msg));
          if (decoded.is_error()) {
            return decoded.error_value().status();
          }
          ::fidl::Request<
              ::test_protocollayouts::MainProtocol::TwoWayLocalWithError>
              request = ::fidl::internal::NaturalMessageConverter<
                  ::fidl::Request<::test_protocollayouts::MainProtocol::
                                      TwoWayLocalWithError>>::
                  FromDomainObject(std::move(decoded.value()));
          ::fidl::internal::NaturalCompleter<
              ::test_protocollayouts::MainProtocol::TwoWayLocalWithError>::Sync
              completer(txn);
          static_cast<::fidl::Server<::test_protocollayouts::MainProtocol>*>(
              interface)
              ->TwoWayLocalWithError(request, completer);
          return ZX_OK;
        },
    },
    {
        ::test_protocollayouts::kMainProtocol_OneWayAnon_Ordinal,
        [](void* interface, ::fidl::IncomingMessage&& msg,
           internal::IncomingTransportContext transport_context,
           ::fidl::Transaction* txn) {
          ::fitx::result decoded = ::fidl::internal::DecodeTransactionalMessage<
              ::test_protocollayouts::MainProtocolOneWayAnonRequest>(
              std::move(msg));
          if (decoded.is_error()) {
            return decoded.error_value().status();
          }
          ::fidl::Request<::test_protocollayouts::MainProtocol::OneWayAnon>
              request =
                  ::fidl::internal::NaturalMessageConverter<::fidl::Request<
                      ::test_protocollayouts::MainProtocol::OneWayAnon>>::
                      FromDomainObject(std::move(decoded.value()));
          ::fidl::internal::NaturalCompleter<
              ::test_protocollayouts::MainProtocol::OneWayAnon>::Sync
              completer(txn);
          static_cast<::fidl::Server<::test_protocollayouts::MainProtocol>*>(
              interface)
              ->OneWayAnon(request, completer);
          return ZX_OK;
        },
    },
    {
        ::test_protocollayouts::kMainProtocol_TwoWayAnon_Ordinal,
        [](void* interface, ::fidl::IncomingMessage&& msg,
           internal::IncomingTransportContext transport_context,
           ::fidl::Transaction* txn) {
          ::fitx::result decoded = ::fidl::internal::DecodeTransactionalMessage<
              ::test_protocollayouts::MainProtocolTwoWayAnonRequest>(
              std::move(msg));
          if (decoded.is_error()) {
            return decoded.error_value().status();
          }
          ::fidl::Request<::test_protocollayouts::MainProtocol::TwoWayAnon>
              request =
                  ::fidl::internal::NaturalMessageConverter<::fidl::Request<
                      ::test_protocollayouts::MainProtocol::TwoWayAnon>>::
                      FromDomainObject(std::move(decoded.value()));
          ::fidl::internal::NaturalCompleter<
              ::test_protocollayouts::MainProtocol::TwoWayAnon>::Sync
              completer(txn);
          static_cast<::fidl::Server<::test_protocollayouts::MainProtocol>*>(
              interface)
              ->TwoWayAnon(request, completer);
          return ZX_OK;
        },
    },
    {
        ::test_protocollayouts::kMainProtocol_TwoWayAnonWithError_Ordinal,
        [](void* interface, ::fidl::IncomingMessage&& msg,
           internal::IncomingTransportContext transport_context,
           ::fidl::Transaction* txn) {
          ::fitx::result decoded = ::fidl::internal::DecodeTransactionalMessage<
              ::test_protocollayouts::MainProtocolTwoWayAnonWithErrorRequest>(
              std::move(msg));
          if (decoded.is_error()) {
            return decoded.error_value().status();
          }
          ::fidl::Request<
              ::test_protocollayouts::MainProtocol::TwoWayAnonWithError>
              request = ::fidl::internal::NaturalMessageConverter<
                  ::fidl::Request<::test_protocollayouts::MainProtocol::
                                      TwoWayAnonWithError>>::
                  FromDomainObject(std::move(decoded.value()));
          ::fidl::internal::NaturalCompleter<
              ::test_protocollayouts::MainProtocol::TwoWayAnonWithError>::Sync
              completer(txn);
          static_cast<::fidl::Server<::test_protocollayouts::MainProtocol>*>(
              interface)
              ->TwoWayAnonWithError(request, completer);
          return ZX_OK;
        },
    },
};

const ::fidl::internal::MethodEntry* fidl::internal::NaturalServerDispatcher<
    ::test_protocollayouts::MainProtocol>::entries_end_ = &entries_[15];

void fidl::internal::
    NaturalServerDispatcher<::test_protocollayouts::MainProtocol>::Dispatch(
        ::fidl::Server<::test_protocollayouts::MainProtocol>* impl,
        ::fidl::IncomingMessage&& msg,
        internal::IncomingTransportContext transport_context,
        ::fidl::Transaction* txn) {
  ::fidl::internal::Dispatch(impl, msg, std::move(transport_context), txn,
                             entries_, entries_end_);
}
void fidl::Server<::test_protocollayouts::MainProtocol>::dispatch_message(
    ::fidl::IncomingMessage&& msg, ::fidl::Transaction* txn,
    ::fidl::internal::IncomingTransportContext transport_context) {
  ::fidl::internal::NaturalServerDispatcher<
      ::test_protocollayouts::MainProtocol>::Dispatch(this, std::move(msg),
                                                      std::move(
                                                          transport_context),
                                                      txn);
}
#endif  // __Fuchsia__
