// WARNING: This file is machine generated by fidlgen.

#pragma once

#include <fidl/test.consts/cpp/common_types.h>
#include <fidl/test.consts/cpp/markers.h>
#include <lib/fidl/cpp/natural_coding_traits.h>
#include <lib/fidl/cpp/natural_types.h>

#include <cinttypes>
#include <string>

#ifdef __Fuchsia__

#endif  // __Fuchsia__

namespace test_consts {

extern const char* USERNAME;

constexpr uint32_t POPULATION_USA_2018 = 330000000u;

constexpr int8_t OFFSET = -33;

constexpr float MIN_TEMP = -273.15f;

constexpr uint64_t FUCHSIA = 4054509061583223046u;

constexpr ::test_consts::EnumType enumVal = ::test_consts::EnumType::kValue;

constexpr ::test_consts::EnumType enumTrue = ::test_consts::EnumType::kTrue;

constexpr int32_t enumPrimitiveVal = ::test_consts::EnumType::kValue;

constexpr int32_t enumPrimitiveTrue = ::test_consts::EnumType::kTrue;

constexpr bool ENABLED_FLAG = true;

constexpr uint64_t DIAMOND = 1746410393481133080u;

constexpr double CONVERSION_FACTOR = 1.41421;

constexpr ::test_consts::BitsType bitsVal = ::test_consts::BitsType::kValue;

constexpr ::test_consts::BitsType bitsTrue = ::test_consts::BitsType::kTrue;

constexpr uint32_t bitsPrimitiveVal = ::test_consts::BitsType::kValue;

constexpr uint32_t bitsPrimitiveTrue = ::test_consts::BitsType::kTrue;

constexpr uint16_t ANSWER_IN_BINARY = 42u;

constexpr uint16_t ANSWER = 42u;

}  // namespace test_consts
namespace fidl {

template <>
struct internal::NaturalCodingTraits<
    ::test_consts::BitsType, ::fidl::internal::NaturalCodingConstraintEmpty> {
  static constexpr size_t inline_size_v1_no_ee = sizeof(uint32_t);
  static constexpr size_t inline_size_v2 = sizeof(uint32_t);

  static void Encode(internal::NaturalEncoder* encoder,
                     ::test_consts::BitsType* value, size_t offset,
                     size_t recursion_depth) {
    if (static_cast<uint32_t>(*value) & ~3ull) {
      encoder->SetError(::fidl::internal::kCodingErrorUnknownBitSetInBitsValue);
    }
    *encoder->template GetPtr<::test_consts::BitsType>(offset) = *value;
  }
  static void Decode(internal::NaturalDecoder* decoder,
                     ::test_consts::BitsType* value, size_t offset,
                     size_t recursion_depth) {
    *value = *decoder->template GetPtr<::test_consts::BitsType>(offset);
    if (static_cast<uint32_t>(*value) & ~3ull) {
      decoder->SetError(::fidl::internal::kCodingErrorUnknownBitSetInBitsValue);
    }
  }
};

template <>
struct internal::NaturalCodingTraits<
    ::test_consts::EnumType, ::fidl::internal::NaturalCodingConstraintEmpty> {
  static constexpr size_t inline_size_v1_no_ee = sizeof(int32_t);
  static constexpr size_t inline_size_v2 = sizeof(int32_t);

  static void Encode(internal::NaturalEncoder* encoder,
                     ::test_consts::EnumType* value, size_t offset,
                     size_t recursion_depth) {
    switch (*value) {
      case ::test_consts::EnumType::kValue:
      case ::test_consts::EnumType::kTrue:
        break;
      default:
        encoder->SetError(::fidl::internal::kCodingErrorUnknownEnumValue);
        return;
    }
    *encoder->template GetPtr<::test_consts::EnumType>(offset) = *value;
  }
  static void Decode(internal::NaturalDecoder* decoder,
                     ::test_consts::EnumType* value, size_t offset,
                     size_t recursion_depth) {
    *value = *decoder->template GetPtr<::test_consts::EnumType>(offset);
    switch (*value) {
      case ::test_consts::EnumType::kValue:
      case ::test_consts::EnumType::kTrue:
        break;
      default:
        decoder->SetError(::fidl::internal::kCodingErrorUnknownEnumValue);
        return;
    }
  }
};

}  // namespace fidl
