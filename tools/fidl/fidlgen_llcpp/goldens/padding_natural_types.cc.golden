// WARNING: This file is machine generated by fidlgen.

#include <fidl/test.padding/cpp/natural_types.h>

#ifdef __Fuchsia__

void ::test_padding::Padding7ByteMiddle::EncodeWithoutValidating(
    ::fidl::Encoder& encoder, size_t offset) {
  encoder.Alloc(::fidl::EncodingInlineSize<::test_padding::Padding7ByteMiddle,
                                           ::fidl::Encoder>(&encoder));
  ::fidl::CodingTraits<::test_padding::Padding7ByteMiddle>::Encode(
      &encoder, this, offset);
}

::test_padding::Padding7ByteMiddle::Padding7ByteMiddle(::fidl::Decoder& decoder)
    : storage_({::fidl::DecodeAs<uint8_t>(&decoder, 0),
                ::fidl::DecodeAs<uint64_t>(&decoder, 8)}) {}
#endif  // __Fuchsia__

::test_padding::Padding7ByteMiddle::Storage
test_padding::Padding7ByteMiddle::CloneStorage() const {
  return Storage{::fidl::internal::NaturalClone(storage_.a),
                 ::fidl::internal::NaturalClone(storage_.b)};
}
#ifdef __Fuchsia__

void ::test_padding::Padding7ByteEnd::EncodeWithoutValidating(
    ::fidl::Encoder& encoder, size_t offset) {
  encoder.Alloc(::fidl::EncodingInlineSize<::test_padding::Padding7ByteEnd,
                                           ::fidl::Encoder>(&encoder));
  ::fidl::CodingTraits<::test_padding::Padding7ByteEnd>::Encode(&encoder, this,
                                                                offset);
}

::test_padding::Padding7ByteEnd::Padding7ByteEnd(::fidl::Decoder& decoder)
    : storage_({::fidl::DecodeAs<uint64_t>(&decoder, 0),
                ::fidl::DecodeAs<uint8_t>(&decoder, 8)}) {}
#endif  // __Fuchsia__

::test_padding::Padding7ByteEnd::Storage
test_padding::Padding7ByteEnd::CloneStorage() const {
  return Storage{::fidl::internal::NaturalClone(storage_.a),
                 ::fidl::internal::NaturalClone(storage_.b)};
}
#ifdef __Fuchsia__

void ::test_padding::Padding6ByteMiddle::EncodeWithoutValidating(
    ::fidl::Encoder& encoder, size_t offset) {
  encoder.Alloc(::fidl::EncodingInlineSize<::test_padding::Padding6ByteMiddle,
                                           ::fidl::Encoder>(&encoder));
  ::fidl::CodingTraits<::test_padding::Padding6ByteMiddle>::Encode(
      &encoder, this, offset);
}

::test_padding::Padding6ByteMiddle::Padding6ByteMiddle(::fidl::Decoder& decoder)
    : storage_({::fidl::DecodeAs<uint16_t>(&decoder, 0),
                ::fidl::DecodeAs<uint64_t>(&decoder, 8)}) {}
#endif  // __Fuchsia__

::test_padding::Padding6ByteMiddle::Storage
test_padding::Padding6ByteMiddle::CloneStorage() const {
  return Storage{::fidl::internal::NaturalClone(storage_.a),
                 ::fidl::internal::NaturalClone(storage_.b)};
}
#ifdef __Fuchsia__

void ::test_padding::Padding6ByteEnd::EncodeWithoutValidating(
    ::fidl::Encoder& encoder, size_t offset) {
  encoder.Alloc(::fidl::EncodingInlineSize<::test_padding::Padding6ByteEnd,
                                           ::fidl::Encoder>(&encoder));
  ::fidl::CodingTraits<::test_padding::Padding6ByteEnd>::Encode(&encoder, this,
                                                                offset);
}

::test_padding::Padding6ByteEnd::Padding6ByteEnd(::fidl::Decoder& decoder)
    : storage_({::fidl::DecodeAs<uint64_t>(&decoder, 0),
                ::fidl::DecodeAs<uint16_t>(&decoder, 8)}) {}
#endif  // __Fuchsia__

::test_padding::Padding6ByteEnd::Storage
test_padding::Padding6ByteEnd::CloneStorage() const {
  return Storage{::fidl::internal::NaturalClone(storage_.a),
                 ::fidl::internal::NaturalClone(storage_.b)};
}
#ifdef __Fuchsia__

void ::test_padding::Padding5ByteMiddle::EncodeWithoutValidating(
    ::fidl::Encoder& encoder, size_t offset) {
  encoder.Alloc(::fidl::EncodingInlineSize<::test_padding::Padding5ByteMiddle,
                                           ::fidl::Encoder>(&encoder));
  ::fidl::CodingTraits<::test_padding::Padding5ByteMiddle>::Encode(
      &encoder, this, offset);
}

::test_padding::Padding5ByteMiddle::Padding5ByteMiddle(::fidl::Decoder& decoder)
    : storage_({::fidl::DecodeAs<uint16_t>(&decoder, 0),
                ::fidl::DecodeAs<uint8_t>(&decoder, 2),
                ::fidl::DecodeAs<uint64_t>(&decoder, 8)}) {}
#endif  // __Fuchsia__

::test_padding::Padding5ByteMiddle::Storage
test_padding::Padding5ByteMiddle::CloneStorage() const {
  return Storage{::fidl::internal::NaturalClone(storage_.a),
                 ::fidl::internal::NaturalClone(storage_.b),
                 ::fidl::internal::NaturalClone(storage_.c)};
}
#ifdef __Fuchsia__

void ::test_padding::Padding5ByteEnd::EncodeWithoutValidating(
    ::fidl::Encoder& encoder, size_t offset) {
  encoder.Alloc(::fidl::EncodingInlineSize<::test_padding::Padding5ByteEnd,
                                           ::fidl::Encoder>(&encoder));
  ::fidl::CodingTraits<::test_padding::Padding5ByteEnd>::Encode(&encoder, this,
                                                                offset);
}

::test_padding::Padding5ByteEnd::Padding5ByteEnd(::fidl::Decoder& decoder)
    : storage_({::fidl::DecodeAs<uint64_t>(&decoder, 0),
                ::fidl::DecodeAs<uint16_t>(&decoder, 8),
                ::fidl::DecodeAs<uint8_t>(&decoder, 10)}) {}
#endif  // __Fuchsia__

::test_padding::Padding5ByteEnd::Storage
test_padding::Padding5ByteEnd::CloneStorage() const {
  return Storage{::fidl::internal::NaturalClone(storage_.a),
                 ::fidl::internal::NaturalClone(storage_.b),
                 ::fidl::internal::NaturalClone(storage_.c)};
}
#ifdef __Fuchsia__

void ::test_padding::Padding4ByteMiddle::EncodeWithoutValidating(
    ::fidl::Encoder& encoder, size_t offset) {
  encoder.Alloc(::fidl::EncodingInlineSize<::test_padding::Padding4ByteMiddle,
                                           ::fidl::Encoder>(&encoder));
  ::fidl::CodingTraits<::test_padding::Padding4ByteMiddle>::Encode(
      &encoder, this, offset);
}

::test_padding::Padding4ByteMiddle::Padding4ByteMiddle(::fidl::Decoder& decoder)
    : storage_({::fidl::DecodeAs<uint32_t>(&decoder, 0),
                ::fidl::DecodeAs<uint64_t>(&decoder, 8)}) {}
#endif  // __Fuchsia__

::test_padding::Padding4ByteMiddle::Storage
test_padding::Padding4ByteMiddle::CloneStorage() const {
  return Storage{::fidl::internal::NaturalClone(storage_.a),
                 ::fidl::internal::NaturalClone(storage_.b)};
}
#ifdef __Fuchsia__

void ::test_padding::Padding4ByteEnd::EncodeWithoutValidating(
    ::fidl::Encoder& encoder, size_t offset) {
  encoder.Alloc(::fidl::EncodingInlineSize<::test_padding::Padding4ByteEnd,
                                           ::fidl::Encoder>(&encoder));
  ::fidl::CodingTraits<::test_padding::Padding4ByteEnd>::Encode(&encoder, this,
                                                                offset);
}

::test_padding::Padding4ByteEnd::Padding4ByteEnd(::fidl::Decoder& decoder)
    : storage_({::fidl::DecodeAs<uint64_t>(&decoder, 0),
                ::fidl::DecodeAs<uint32_t>(&decoder, 8)}) {}
#endif  // __Fuchsia__

::test_padding::Padding4ByteEnd::Storage
test_padding::Padding4ByteEnd::CloneStorage() const {
  return Storage{::fidl::internal::NaturalClone(storage_.a),
                 ::fidl::internal::NaturalClone(storage_.b)};
}
#ifdef __Fuchsia__

void ::test_padding::Padding4ByteAlignmentLength12::EncodeWithoutValidating(
    ::fidl::Encoder& encoder, size_t offset) {
  encoder.Alloc(
      ::fidl::EncodingInlineSize<::test_padding::Padding4ByteAlignmentLength12,
                                 ::fidl::Encoder>(&encoder));
  ::fidl::CodingTraits<::test_padding::Padding4ByteAlignmentLength12>::Encode(
      &encoder, this, offset);
}

::test_padding::Padding4ByteAlignmentLength12::Padding4ByteAlignmentLength12(
    ::fidl::Decoder& decoder)
    : storage_({::fidl::DecodeAs<uint32_t>(&decoder, 0),
                ::fidl::DecodeAs<uint8_t>(&decoder, 4),
                ::fidl::DecodeAs<uint16_t>(&decoder, 6),
                ::fidl::DecodeAs<uint16_t>(&decoder, 8)}) {}
#endif  // __Fuchsia__

::test_padding::Padding4ByteAlignmentLength12::Storage
test_padding::Padding4ByteAlignmentLength12::CloneStorage() const {
  return Storage{::fidl::internal::NaturalClone(storage_.a),
                 ::fidl::internal::NaturalClone(storage_.b),
                 ::fidl::internal::NaturalClone(storage_.c),
                 ::fidl::internal::NaturalClone(storage_.d)};
}
#ifdef __Fuchsia__

void ::test_padding::Padding3ByteMiddle::EncodeWithoutValidating(
    ::fidl::Encoder& encoder, size_t offset) {
  encoder.Alloc(::fidl::EncodingInlineSize<::test_padding::Padding3ByteMiddle,
                                           ::fidl::Encoder>(&encoder));
  ::fidl::CodingTraits<::test_padding::Padding3ByteMiddle>::Encode(
      &encoder, this, offset);
}

::test_padding::Padding3ByteMiddle::Padding3ByteMiddle(::fidl::Decoder& decoder)
    : storage_({::fidl::DecodeAs<uint8_t>(&decoder, 0),
                ::fidl::DecodeAs<uint32_t>(&decoder, 4)}) {}
#endif  // __Fuchsia__

::test_padding::Padding3ByteMiddle::Storage
test_padding::Padding3ByteMiddle::CloneStorage() const {
  return Storage{::fidl::internal::NaturalClone(storage_.a),
                 ::fidl::internal::NaturalClone(storage_.b)};
}
#ifdef __Fuchsia__

void ::test_padding::Padding3ByteEnd::EncodeWithoutValidating(
    ::fidl::Encoder& encoder, size_t offset) {
  encoder.Alloc(::fidl::EncodingInlineSize<::test_padding::Padding3ByteEnd,
                                           ::fidl::Encoder>(&encoder));
  ::fidl::CodingTraits<::test_padding::Padding3ByteEnd>::Encode(&encoder, this,
                                                                offset);
}

::test_padding::Padding3ByteEnd::Padding3ByteEnd(::fidl::Decoder& decoder)
    : storage_({::fidl::DecodeAs<uint32_t>(&decoder, 0),
                ::fidl::DecodeAs<uint8_t>(&decoder, 4)}) {}
#endif  // __Fuchsia__

::test_padding::Padding3ByteEnd::Storage
test_padding::Padding3ByteEnd::CloneStorage() const {
  return Storage{::fidl::internal::NaturalClone(storage_.a),
                 ::fidl::internal::NaturalClone(storage_.b)};
}
#ifdef __Fuchsia__

void ::test_padding::Padding2ByteMiddle::EncodeWithoutValidating(
    ::fidl::Encoder& encoder, size_t offset) {
  encoder.Alloc(::fidl::EncodingInlineSize<::test_padding::Padding2ByteMiddle,
                                           ::fidl::Encoder>(&encoder));
  ::fidl::CodingTraits<::test_padding::Padding2ByteMiddle>::Encode(
      &encoder, this, offset);
}

::test_padding::Padding2ByteMiddle::Padding2ByteMiddle(::fidl::Decoder& decoder)
    : storage_({::fidl::DecodeAs<uint16_t>(&decoder, 0),
                ::fidl::DecodeAs<uint32_t>(&decoder, 4)}) {}
#endif  // __Fuchsia__

::test_padding::Padding2ByteMiddle::Storage
test_padding::Padding2ByteMiddle::CloneStorage() const {
  return Storage{::fidl::internal::NaturalClone(storage_.a),
                 ::fidl::internal::NaturalClone(storage_.b)};
}
#ifdef __Fuchsia__

void ::test_padding::Padding2ByteEnd::EncodeWithoutValidating(
    ::fidl::Encoder& encoder, size_t offset) {
  encoder.Alloc(::fidl::EncodingInlineSize<::test_padding::Padding2ByteEnd,
                                           ::fidl::Encoder>(&encoder));
  ::fidl::CodingTraits<::test_padding::Padding2ByteEnd>::Encode(&encoder, this,
                                                                offset);
}

::test_padding::Padding2ByteEnd::Padding2ByteEnd(::fidl::Decoder& decoder)
    : storage_({::fidl::DecodeAs<uint32_t>(&decoder, 0),
                ::fidl::DecodeAs<uint16_t>(&decoder, 4)}) {}
#endif  // __Fuchsia__

::test_padding::Padding2ByteEnd::Storage
test_padding::Padding2ByteEnd::CloneStorage() const {
  return Storage{::fidl::internal::NaturalClone(storage_.a),
                 ::fidl::internal::NaturalClone(storage_.b)};
}
#ifdef __Fuchsia__

void ::test_padding::Padding2ByteAlignmentLength6::EncodeWithoutValidating(
    ::fidl::Encoder& encoder, size_t offset) {
  encoder.Alloc(
      ::fidl::EncodingInlineSize<::test_padding::Padding2ByteAlignmentLength6,
                                 ::fidl::Encoder>(&encoder));
  ::fidl::CodingTraits<::test_padding::Padding2ByteAlignmentLength6>::Encode(
      &encoder, this, offset);
}

::test_padding::Padding2ByteAlignmentLength6::Padding2ByteAlignmentLength6(
    ::fidl::Decoder& decoder)
    : storage_({::fidl::DecodeAs<uint8_t>(&decoder, 0),
                ::fidl::DecodeAs<uint16_t>(&decoder, 2),
                ::fidl::DecodeAs<uint8_t>(&decoder, 4)}) {}
#endif  // __Fuchsia__

::test_padding::Padding2ByteAlignmentLength6::Storage
test_padding::Padding2ByteAlignmentLength6::CloneStorage() const {
  return Storage{::fidl::internal::NaturalClone(storage_.a),
                 ::fidl::internal::NaturalClone(storage_.b),
                 ::fidl::internal::NaturalClone(storage_.c)};
}
#ifdef __Fuchsia__

void ::test_padding::Padding1ByteMiddle::EncodeWithoutValidating(
    ::fidl::Encoder& encoder, size_t offset) {
  encoder.Alloc(::fidl::EncodingInlineSize<::test_padding::Padding1ByteMiddle,
                                           ::fidl::Encoder>(&encoder));
  ::fidl::CodingTraits<::test_padding::Padding1ByteMiddle>::Encode(
      &encoder, this, offset);
}

::test_padding::Padding1ByteMiddle::Padding1ByteMiddle(::fidl::Decoder& decoder)
    : storage_({::fidl::DecodeAs<uint8_t>(&decoder, 0),
                ::fidl::DecodeAs<uint16_t>(&decoder, 2)}) {}
#endif  // __Fuchsia__

::test_padding::Padding1ByteMiddle::Storage
test_padding::Padding1ByteMiddle::CloneStorage() const {
  return Storage{::fidl::internal::NaturalClone(storage_.a),
                 ::fidl::internal::NaturalClone(storage_.b)};
}
#ifdef __Fuchsia__

void ::test_padding::Padding1ByteEnd::EncodeWithoutValidating(
    ::fidl::Encoder& encoder, size_t offset) {
  encoder.Alloc(::fidl::EncodingInlineSize<::test_padding::Padding1ByteEnd,
                                           ::fidl::Encoder>(&encoder));
  ::fidl::CodingTraits<::test_padding::Padding1ByteEnd>::Encode(&encoder, this,
                                                                offset);
}

::test_padding::Padding1ByteEnd::Padding1ByteEnd(::fidl::Decoder& decoder)
    : storage_({::fidl::DecodeAs<uint16_t>(&decoder, 0),
                ::fidl::DecodeAs<uint8_t>(&decoder, 2)}) {}
#endif  // __Fuchsia__

::test_padding::Padding1ByteEnd::Storage
test_padding::Padding1ByteEnd::CloneStorage() const {
  return Storage{::fidl::internal::NaturalClone(storage_.a),
                 ::fidl::internal::NaturalClone(storage_.b)};
}
