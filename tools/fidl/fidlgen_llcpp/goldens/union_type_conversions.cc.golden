// WARNING: This file is machine generated by fidlgen.

#include <fidl/test.union/cpp/type_conversions.h>

namespace fidl {
namespace internal {

::test_union::StructWithNullableXUnion
WireNaturalConversionTraits<::test_union::wire::StructWithNullableXUnion,
                            ::test_union::StructWithNullableXUnion>::
    ToNatural(::test_union::wire::StructWithNullableXUnion src) {
  return ::test_union::StructWithNullableXUnion(
      WireNaturalConversionTraits<
          ::test_union::wire::OlderSimpleUnion,
          ::std::unique_ptr<::test_union::OlderSimpleUnion>>::
          ToNatural(std::move(src.x1)));
}

::test_union::TestProtocolStrictXUnionHenceResponseMayBeStackAllocatedTopResponse
WireNaturalConversionTraits<
    ::test_union::wire::
        TestProtocolStrictXUnionHenceResponseMayBeStackAllocatedTopResponse,
    ::test_union::
        TestProtocolStrictXUnionHenceResponseMayBeStackAllocatedTopResponse>::
    ToNatural(
        ::test_union::wire::
            TestProtocolStrictXUnionHenceResponseMayBeStackAllocatedTopResponse
                src) {
  return ::test_union::
      TestProtocolStrictXUnionHenceResponseMayBeStackAllocatedTopResponse(
          WireNaturalConversionTraits<
              ::test_union::wire::StrictBoundedXUnion,
              ::test_union::StrictBoundedXUnion>::ToNatural(std::move(src.xu)));
}

::test_union::Pizza WireNaturalConversionTraits<
    ::test_union::wire::Pizza,
    ::test_union::Pizza>::ToNatural(::test_union::wire::Pizza src) {
  return ::test_union::Pizza(
      WireNaturalConversionTraits<
          ::fidl::VectorView<::fidl::StringView>,
          ::std::vector<::std::string>>::ToNatural(std::move(src.toppings)));
}

::test_union::Pasta WireNaturalConversionTraits<
    ::test_union::wire::Pasta,
    ::test_union::Pasta>::ToNatural(::test_union::wire::Pasta src) {
  return ::test_union::Pasta(
      WireNaturalConversionTraits<::fidl::StringView, ::std::string>::ToNatural(
          std::move(src.sauce)));
}

::test_union::TestProtocolFlexibleXUnionHenceResponseMustBeHeapAllocatedTopResponse
WireNaturalConversionTraits<
    ::test_union::wire::
        TestProtocolFlexibleXUnionHenceResponseMustBeHeapAllocatedTopResponse,
    ::test_union::
        TestProtocolFlexibleXUnionHenceResponseMustBeHeapAllocatedTopResponse>::
    ToNatural(
        ::test_union::wire::
            TestProtocolFlexibleXUnionHenceResponseMustBeHeapAllocatedTopResponse
                src) {
  return ::test_union::
      TestProtocolFlexibleXUnionHenceResponseMustBeHeapAllocatedTopResponse(
          WireNaturalConversionTraits<
              ::test_union::wire::OlderSimpleUnion,
              ::test_union::OlderSimpleUnion>::ToNatural(std::move(src.xu)));
}

::test_union::NullableUnionStruct
WireNaturalConversionTraits<::test_union::wire::NullableUnionStruct,
                            ::test_union::NullableUnionStruct>::
    ToNatural(::test_union::wire::NullableUnionStruct src) {
  return ::test_union::NullableUnionStruct(
      WireNaturalConversionTraits<::test_union::wire::Union,
                                  ::std::unique_ptr<::test_union::Union>>::
          ToNatural(std::move(src.the_union)));
}

::test_union::UnionSandwich WireNaturalConversionTraits<
    ::test_union::wire::UnionSandwich,
    ::test_union::UnionSandwich>::ToNatural(::test_union::wire::UnionSandwich
                                                src) {
  return ::test_union::UnionSandwich({
      .a = WireNaturalConversionTraits<uint32_t, uint32_t>::ToNatural(
          std::move(src.a)),
      .u = WireNaturalConversionTraits<
          ::test_union::wire::ExplicitXUnion,
          ::test_union::ExplicitXUnion>::ToNatural(std::move(src.u)),
      .b = WireNaturalConversionTraits<uint32_t, uint32_t>::ToNatural(
          std::move(src.b)),
  });
}

::test_union::Empty WireNaturalConversionTraits<
    ::test_union::wire::Empty,
    ::test_union::Empty>::ToNatural(::test_union::wire::Empty src) {
  return ::test_union::Empty(
      WireNaturalConversionTraits<uint8_t, uint8_t>::ToNatural(
          std::move(src.__reserved)));
}

::test_union::UnionWithAttributes
WireNaturalConversionTraits<::test_union::wire::UnionWithAttributes,
                            ::test_union::UnionWithAttributes>::
    ToNatural(::test_union::wire::UnionWithAttributes src) {
  switch (src.Which()) {
    case ::test_union::wire::UnionWithAttributes::Tag::kX:
      return ::test_union::UnionWithAttributes::WithX(
          WireNaturalConversionTraits<int64_t, int64_t>::ToNatural(
              std::move(src.x())));
    default:
      return ::test_union::UnionWithAttributes();
  }
}

std::unique_ptr<::test_union::UnionWithAttributes> WireNaturalConversionTraits<
    ::test_union::wire::UnionWithAttributes,
    std::unique_ptr<::test_union::UnionWithAttributes>>::
    ToNatural(::test_union::wire::UnionWithAttributes src) {
  if (src.has_invalid_tag()) {
    return nullptr;
  }
  return std::make_unique<::test_union::UnionWithAttributes>(
      WireNaturalConversionTraits<
          ::test_union::wire::UnionWithAttributes,
          ::test_union::UnionWithAttributes>::ToNatural(std::move(src)));
}

::test_union::Union WireNaturalConversionTraits<
    ::test_union::wire::Union,
    ::test_union::Union>::ToNatural(::test_union::wire::Union src) {
  switch (src.Which()) {
    case ::test_union::wire::Union::Tag::kPrimitive:
      return ::test_union::Union::WithPrimitive(
          WireNaturalConversionTraits<int32_t, int32_t>::ToNatural(
              std::move(src.primitive())));
    case ::test_union::wire::Union::Tag::kStringNeedsConstructor:
      return ::test_union::Union::WithStringNeedsConstructor(
          WireNaturalConversionTraits<::fidl::StringView, ::std::string>::
              ToNatural(std::move(src.string_needs_constructor())));
    case ::test_union::wire::Union::Tag::kVectorStringAlsoNeedsConstructor:
      return ::test_union::Union::WithVectorStringAlsoNeedsConstructor(
          WireNaturalConversionTraits<::fidl::VectorView<::fidl::StringView>,
                                      ::std::vector<::std::string>>::
              ToNatural(std::move(src.vector_string_also_needs_constructor())));
    default:
      ZX_PANIC("unknown union tag in strict union");
  }
}

std::unique_ptr<::test_union::Union> WireNaturalConversionTraits<
    ::test_union::wire::Union,
    std::unique_ptr<::test_union::Union>>::ToNatural(::test_union::wire::Union
                                                         src) {
  if (src.has_invalid_tag()) {
    return nullptr;
  }
  return std::make_unique<::test_union::Union>(
      WireNaturalConversionTraits<
          ::test_union::wire::Union,
          ::test_union::Union>::ToNatural(std::move(src)));
}

::test_union::StrictUnion WireNaturalConversionTraits<
    ::test_union::wire::StrictUnion,
    ::test_union::StrictUnion>::ToNatural(::test_union::wire::StrictUnion src) {
  switch (src.Which()) {
    case ::test_union::wire::StrictUnion::Tag::kPrimitive:
      return ::test_union::StrictUnion::WithPrimitive(
          WireNaturalConversionTraits<int32_t, int32_t>::ToNatural(
              std::move(src.primitive())));
    case ::test_union::wire::StrictUnion::Tag::kStringNeedsConstructor:
      return ::test_union::StrictUnion::WithStringNeedsConstructor(
          WireNaturalConversionTraits<::fidl::StringView, ::std::string>::
              ToNatural(std::move(src.string_needs_constructor())));
    case ::test_union::wire::StrictUnion::Tag::
        kVectorStringAlsoNeedsConstructor:
      return ::test_union::StrictUnion::WithVectorStringAlsoNeedsConstructor(
          WireNaturalConversionTraits<::fidl::VectorView<::fidl::StringView>,
                                      ::std::vector<::std::string>>::
              ToNatural(std::move(src.vector_string_also_needs_constructor())));
    default:
      ZX_PANIC("unknown union tag in strict union");
  }
}

std::unique_ptr<::test_union::StrictUnion>
WireNaturalConversionTraits<::test_union::wire::StrictUnion,
                            std::unique_ptr<::test_union::StrictUnion>>::
    ToNatural(::test_union::wire::StrictUnion src) {
  if (src.has_invalid_tag()) {
    return nullptr;
  }
  return std::make_unique<::test_union::StrictUnion>(
      WireNaturalConversionTraits<
          ::test_union::wire::StrictUnion,
          ::test_union::StrictUnion>::ToNatural(std::move(src)));
}

::test_union::StrictSimpleXUnion WireNaturalConversionTraits<
    ::test_union::wire::StrictSimpleXUnion, ::test_union::StrictSimpleXUnion>::
    ToNatural(::test_union::wire::StrictSimpleXUnion src) {
  switch (src.Which()) {
    case ::test_union::wire::StrictSimpleXUnion::Tag::kI:
      return ::test_union::StrictSimpleXUnion::WithI(
          WireNaturalConversionTraits<int32_t, int32_t>::ToNatural(
              std::move(src.i())));
    case ::test_union::wire::StrictSimpleXUnion::Tag::kF:
      return ::test_union::StrictSimpleXUnion::WithF(
          WireNaturalConversionTraits<float, float>::ToNatural(
              std::move(src.f())));
    case ::test_union::wire::StrictSimpleXUnion::Tag::kS:
      return ::test_union::StrictSimpleXUnion::WithS(
          WireNaturalConversionTraits<::fidl::StringView, ::std::string>::
              ToNatural(std::move(src.s())));
    default:
      ZX_PANIC("unknown union tag in strict union");
  }
}

std::unique_ptr<::test_union::StrictSimpleXUnion>
WireNaturalConversionTraits<::test_union::wire::StrictSimpleXUnion,
                            std::unique_ptr<::test_union::StrictSimpleXUnion>>::
    ToNatural(::test_union::wire::StrictSimpleXUnion src) {
  if (src.has_invalid_tag()) {
    return nullptr;
  }
  return std::make_unique<::test_union::StrictSimpleXUnion>(
      WireNaturalConversionTraits<
          ::test_union::wire::StrictSimpleXUnion,
          ::test_union::StrictSimpleXUnion>::ToNatural(std::move(src)));
}

::test_union::StrictFoo WireNaturalConversionTraits<
    ::test_union::wire::StrictFoo,
    ::test_union::StrictFoo>::ToNatural(::test_union::wire::StrictFoo src) {
  switch (src.Which()) {
    case ::test_union::wire::StrictFoo::Tag::kS:
      return ::test_union::StrictFoo::WithS(
          WireNaturalConversionTraits<::fidl::StringView, ::std::string>::
              ToNatural(std::move(src.s())));
    case ::test_union::wire::StrictFoo::Tag::kI:
      return ::test_union::StrictFoo::WithI(
          WireNaturalConversionTraits<int32_t, int32_t>::ToNatural(
              std::move(src.i())));
    default:
      ZX_PANIC("unknown union tag in strict union");
  }
}

std::unique_ptr<::test_union::StrictFoo> WireNaturalConversionTraits<
    ::test_union::wire::StrictFoo, std::unique_ptr<::test_union::StrictFoo>>::
    ToNatural(::test_union::wire::StrictFoo src) {
  if (src.has_invalid_tag()) {
    return nullptr;
  }
  return std::make_unique<::test_union::StrictFoo>(
      WireNaturalConversionTraits<
          ::test_union::wire::StrictFoo,
          ::test_union::StrictFoo>::ToNatural(std::move(src)));
}

::test_union::StrictBoundedXUnion
WireNaturalConversionTraits<::test_union::wire::StrictBoundedXUnion,
                            ::test_union::StrictBoundedXUnion>::
    ToNatural(::test_union::wire::StrictBoundedXUnion src) {
  switch (src.Which()) {
    case ::test_union::wire::StrictBoundedXUnion::Tag::kV:
      return ::test_union::StrictBoundedXUnion::WithV(
          WireNaturalConversionTraits<
              ::fidl::VectorView<uint8_t>,
              ::std::vector<uint8_t>>::ToNatural(std::move(src.v())));
    default:
      ZX_PANIC("unknown union tag in strict union");
  }
}

std::unique_ptr<::test_union::StrictBoundedXUnion> WireNaturalConversionTraits<
    ::test_union::wire::StrictBoundedXUnion,
    std::unique_ptr<::test_union::StrictBoundedXUnion>>::
    ToNatural(::test_union::wire::StrictBoundedXUnion src) {
  if (src.has_invalid_tag()) {
    return nullptr;
  }
  return std::make_unique<::test_union::StrictBoundedXUnion>(
      WireNaturalConversionTraits<
          ::test_union::wire::StrictBoundedXUnion,
          ::test_union::StrictBoundedXUnion>::ToNatural(std::move(src)));
}

::test_union::ReverseOrdinalUnion
WireNaturalConversionTraits<::test_union::wire::ReverseOrdinalUnion,
                            ::test_union::ReverseOrdinalUnion>::
    ToNatural(::test_union::wire::ReverseOrdinalUnion src) {
  switch (src.Which()) {
    case ::test_union::wire::ReverseOrdinalUnion::Tag::kSecond:
      return ::test_union::ReverseOrdinalUnion::WithSecond(
          WireNaturalConversionTraits<uint32_t, uint32_t>::ToNatural(
              std::move(src.second())));
    case ::test_union::wire::ReverseOrdinalUnion::Tag::kFirst:
      return ::test_union::ReverseOrdinalUnion::WithFirst(
          WireNaturalConversionTraits<uint32_t, uint32_t>::ToNatural(
              std::move(src.first())));
    default:
      ZX_PANIC("unknown union tag in strict union");
  }
}

std::unique_ptr<::test_union::ReverseOrdinalUnion> WireNaturalConversionTraits<
    ::test_union::wire::ReverseOrdinalUnion,
    std::unique_ptr<::test_union::ReverseOrdinalUnion>>::
    ToNatural(::test_union::wire::ReverseOrdinalUnion src) {
  if (src.has_invalid_tag()) {
    return nullptr;
  }
  return std::make_unique<::test_union::ReverseOrdinalUnion>(
      WireNaturalConversionTraits<
          ::test_union::wire::ReverseOrdinalUnion,
          ::test_union::ReverseOrdinalUnion>::ToNatural(std::move(src)));
}

::test_union::StrictPizzaOrPasta WireNaturalConversionTraits<
    ::test_union::wire::StrictPizzaOrPasta, ::test_union::StrictPizzaOrPasta>::
    ToNatural(::test_union::wire::StrictPizzaOrPasta src) {
  switch (src.Which()) {
    case ::test_union::wire::StrictPizzaOrPasta::Tag::kPizza:
      return ::test_union::StrictPizzaOrPasta::WithPizza(
          WireNaturalConversionTraits<
              ::test_union::wire::Pizza,
              ::test_union::Pizza>::ToNatural(std::move(src.pizza())));
    case ::test_union::wire::StrictPizzaOrPasta::Tag::kPasta:
      return ::test_union::StrictPizzaOrPasta::WithPasta(
          WireNaturalConversionTraits<
              ::test_union::wire::Pasta,
              ::test_union::Pasta>::ToNatural(std::move(src.pasta())));
    default:
      ZX_PANIC("unknown union tag in strict union");
  }
}

std::unique_ptr<::test_union::StrictPizzaOrPasta>
WireNaturalConversionTraits<::test_union::wire::StrictPizzaOrPasta,
                            std::unique_ptr<::test_union::StrictPizzaOrPasta>>::
    ToNatural(::test_union::wire::StrictPizzaOrPasta src) {
  if (src.has_invalid_tag()) {
    return nullptr;
  }
  return std::make_unique<::test_union::StrictPizzaOrPasta>(
      WireNaturalConversionTraits<
          ::test_union::wire::StrictPizzaOrPasta,
          ::test_union::StrictPizzaOrPasta>::ToNatural(std::move(src)));
}

::test_union::PizzaOrPasta WireNaturalConversionTraits<
    ::test_union::wire::PizzaOrPasta,
    ::test_union::PizzaOrPasta>::ToNatural(::test_union::wire::PizzaOrPasta
                                               src) {
  switch (src.Which()) {
    case ::test_union::wire::PizzaOrPasta::Tag::kPizza:
      return ::test_union::PizzaOrPasta::WithPizza(
          WireNaturalConversionTraits<
              ::test_union::wire::Pizza,
              ::test_union::Pizza>::ToNatural(std::move(src.pizza())));
    case ::test_union::wire::PizzaOrPasta::Tag::kPasta:
      return ::test_union::PizzaOrPasta::WithPasta(
          WireNaturalConversionTraits<
              ::test_union::wire::Pasta,
              ::test_union::Pasta>::ToNatural(std::move(src.pasta())));
    default:
      ZX_PANIC("unknown union tag in strict union");
  }
}

std::unique_ptr<::test_union::PizzaOrPasta>
WireNaturalConversionTraits<::test_union::wire::PizzaOrPasta,
                            std::unique_ptr<::test_union::PizzaOrPasta>>::
    ToNatural(::test_union::wire::PizzaOrPasta src) {
  if (src.has_invalid_tag()) {
    return nullptr;
  }
  return std::make_unique<::test_union::PizzaOrPasta>(
      WireNaturalConversionTraits<
          ::test_union::wire::PizzaOrPasta,
          ::test_union::PizzaOrPasta>::ToNatural(std::move(src)));
}

::test_union::FlexiblePizzaOrPasta
WireNaturalConversionTraits<::test_union::wire::FlexiblePizzaOrPasta,
                            ::test_union::FlexiblePizzaOrPasta>::
    ToNatural(::test_union::wire::FlexiblePizzaOrPasta src) {
  switch (src.Which()) {
    case ::test_union::wire::FlexiblePizzaOrPasta::Tag::kPizza:
      return ::test_union::FlexiblePizzaOrPasta::WithPizza(
          WireNaturalConversionTraits<
              ::test_union::wire::Pizza,
              ::test_union::Pizza>::ToNatural(std::move(src.pizza())));
    case ::test_union::wire::FlexiblePizzaOrPasta::Tag::kPasta:
      return ::test_union::FlexiblePizzaOrPasta::WithPasta(
          WireNaturalConversionTraits<
              ::test_union::wire::Pasta,
              ::test_union::Pasta>::ToNatural(std::move(src.pasta())));
    default:
      return ::test_union::FlexiblePizzaOrPasta();
  }
}

std::unique_ptr<::test_union::FlexiblePizzaOrPasta> WireNaturalConversionTraits<
    ::test_union::wire::FlexiblePizzaOrPasta,
    std::unique_ptr<::test_union::FlexiblePizzaOrPasta>>::
    ToNatural(::test_union::wire::FlexiblePizzaOrPasta src) {
  if (src.has_invalid_tag()) {
    return nullptr;
  }
  return std::make_unique<::test_union::FlexiblePizzaOrPasta>(
      WireNaturalConversionTraits<
          ::test_union::wire::FlexiblePizzaOrPasta,
          ::test_union::FlexiblePizzaOrPasta>::ToNatural(std::move(src)));
}

::test_union::ExplicitPizzaOrPasta
WireNaturalConversionTraits<::test_union::wire::ExplicitPizzaOrPasta,
                            ::test_union::ExplicitPizzaOrPasta>::
    ToNatural(::test_union::wire::ExplicitPizzaOrPasta src) {
  switch (src.Which()) {
    case ::test_union::wire::ExplicitPizzaOrPasta::Tag::kPizza:
      return ::test_union::ExplicitPizzaOrPasta::WithPizza(
          WireNaturalConversionTraits<
              ::test_union::wire::Pizza,
              ::test_union::Pizza>::ToNatural(std::move(src.pizza())));
    case ::test_union::wire::ExplicitPizzaOrPasta::Tag::kPasta:
      return ::test_union::ExplicitPizzaOrPasta::WithPasta(
          WireNaturalConversionTraits<
              ::test_union::wire::Pasta,
              ::test_union::Pasta>::ToNatural(std::move(src.pasta())));
    default:
      ZX_PANIC("unknown union tag in strict union");
  }
}

std::unique_ptr<::test_union::ExplicitPizzaOrPasta> WireNaturalConversionTraits<
    ::test_union::wire::ExplicitPizzaOrPasta,
    std::unique_ptr<::test_union::ExplicitPizzaOrPasta>>::
    ToNatural(::test_union::wire::ExplicitPizzaOrPasta src) {
  if (src.has_invalid_tag()) {
    return nullptr;
  }
  return std::make_unique<::test_union::ExplicitPizzaOrPasta>(
      WireNaturalConversionTraits<
          ::test_union::wire::ExplicitPizzaOrPasta,
          ::test_union::ExplicitPizzaOrPasta>::ToNatural(std::move(src)));
}

::test_union::OlderSimpleUnion WireNaturalConversionTraits<
    ::test_union::wire::OlderSimpleUnion, ::test_union::OlderSimpleUnion>::
    ToNatural(::test_union::wire::OlderSimpleUnion src) {
  switch (src.Which()) {
    case ::test_union::wire::OlderSimpleUnion::Tag::kI:
      return ::test_union::OlderSimpleUnion::WithI(
          WireNaturalConversionTraits<int64_t, int64_t>::ToNatural(
              std::move(src.i())));
    case ::test_union::wire::OlderSimpleUnion::Tag::kF:
      return ::test_union::OlderSimpleUnion::WithF(
          WireNaturalConversionTraits<float, float>::ToNatural(
              std::move(src.f())));
    default:
      return ::test_union::OlderSimpleUnion();
  }
}

std::unique_ptr<::test_union::OlderSimpleUnion>
WireNaturalConversionTraits<::test_union::wire::OlderSimpleUnion,
                            std::unique_ptr<::test_union::OlderSimpleUnion>>::
    ToNatural(::test_union::wire::OlderSimpleUnion src) {
  if (src.has_invalid_tag()) {
    return nullptr;
  }
  return std::make_unique<::test_union::OlderSimpleUnion>(
      WireNaturalConversionTraits<
          ::test_union::wire::OlderSimpleUnion,
          ::test_union::OlderSimpleUnion>::ToNatural(std::move(src)));
}

::test_union::NewerSimpleUnion WireNaturalConversionTraits<
    ::test_union::wire::NewerSimpleUnion, ::test_union::NewerSimpleUnion>::
    ToNatural(::test_union::wire::NewerSimpleUnion src) {
  switch (src.Which()) {
    case ::test_union::wire::NewerSimpleUnion::Tag::kI:
      return ::test_union::NewerSimpleUnion::WithI(
          WireNaturalConversionTraits<int64_t, int64_t>::ToNatural(
              std::move(src.i())));
    case ::test_union::wire::NewerSimpleUnion::Tag::kS:
      return ::test_union::NewerSimpleUnion::WithS(
          WireNaturalConversionTraits<::fidl::StringView, ::std::string>::
              ToNatural(std::move(src.s())));
    case ::test_union::wire::NewerSimpleUnion::Tag::kV:
      return ::test_union::NewerSimpleUnion::WithV(
          WireNaturalConversionTraits<
              ::fidl::VectorView<::fidl::StringView>,
              ::std::vector<::std::string>>::ToNatural(std::move(src.v())));
    default:
      return ::test_union::NewerSimpleUnion();
  }
}

std::unique_ptr<::test_union::NewerSimpleUnion>
WireNaturalConversionTraits<::test_union::wire::NewerSimpleUnion,
                            std::unique_ptr<::test_union::NewerSimpleUnion>>::
    ToNatural(::test_union::wire::NewerSimpleUnion src) {
  if (src.has_invalid_tag()) {
    return nullptr;
  }
  return std::make_unique<::test_union::NewerSimpleUnion>(
      WireNaturalConversionTraits<
          ::test_union::wire::NewerSimpleUnion,
          ::test_union::NewerSimpleUnion>::ToNatural(std::move(src)));
}

::test_union::FlexibleUnion WireNaturalConversionTraits<
    ::test_union::wire::FlexibleUnion,
    ::test_union::FlexibleUnion>::ToNatural(::test_union::wire::FlexibleUnion
                                                src) {
  switch (src.Which()) {
    case ::test_union::wire::FlexibleUnion::Tag::kPrimitive:
      return ::test_union::FlexibleUnion::WithPrimitive(
          WireNaturalConversionTraits<int32_t, int32_t>::ToNatural(
              std::move(src.primitive())));
    case ::test_union::wire::FlexibleUnion::Tag::kStringNeedsConstructor:
      return ::test_union::FlexibleUnion::WithStringNeedsConstructor(
          WireNaturalConversionTraits<::fidl::StringView, ::std::string>::
              ToNatural(std::move(src.string_needs_constructor())));
    case ::test_union::wire::FlexibleUnion::Tag::
        kVectorStringAlsoNeedsConstructor:
      return ::test_union::FlexibleUnion::WithVectorStringAlsoNeedsConstructor(
          WireNaturalConversionTraits<::fidl::VectorView<::fidl::StringView>,
                                      ::std::vector<::std::string>>::
              ToNatural(std::move(src.vector_string_also_needs_constructor())));
    default:
      return ::test_union::FlexibleUnion();
  }
}

std::unique_ptr<::test_union::FlexibleUnion>
WireNaturalConversionTraits<::test_union::wire::FlexibleUnion,
                            std::unique_ptr<::test_union::FlexibleUnion>>::
    ToNatural(::test_union::wire::FlexibleUnion src) {
  if (src.has_invalid_tag()) {
    return nullptr;
  }
  return std::make_unique<::test_union::FlexibleUnion>(
      WireNaturalConversionTraits<
          ::test_union::wire::FlexibleUnion,
          ::test_union::FlexibleUnion>::ToNatural(std::move(src)));
}

::test_union::FlexibleFoo WireNaturalConversionTraits<
    ::test_union::wire::FlexibleFoo,
    ::test_union::FlexibleFoo>::ToNatural(::test_union::wire::FlexibleFoo src) {
  switch (src.Which()) {
    case ::test_union::wire::FlexibleFoo::Tag::kS:
      return ::test_union::FlexibleFoo::WithS(
          WireNaturalConversionTraits<::fidl::StringView, ::std::string>::
              ToNatural(std::move(src.s())));
    case ::test_union::wire::FlexibleFoo::Tag::kI:
      return ::test_union::FlexibleFoo::WithI(
          WireNaturalConversionTraits<int32_t, int32_t>::ToNatural(
              std::move(src.i())));
    default:
      return ::test_union::FlexibleFoo();
  }
}

std::unique_ptr<::test_union::FlexibleFoo>
WireNaturalConversionTraits<::test_union::wire::FlexibleFoo,
                            std::unique_ptr<::test_union::FlexibleFoo>>::
    ToNatural(::test_union::wire::FlexibleFoo src) {
  if (src.has_invalid_tag()) {
    return nullptr;
  }
  return std::make_unique<::test_union::FlexibleFoo>(
      WireNaturalConversionTraits<
          ::test_union::wire::FlexibleFoo,
          ::test_union::FlexibleFoo>::ToNatural(std::move(src)));
}

::test_union::FieldCollision WireNaturalConversionTraits<
    ::test_union::wire::FieldCollision,
    ::test_union::FieldCollision>::ToNatural(::test_union::wire::FieldCollision
                                                 src) {
  switch (src.Which()) {
    case ::test_union::wire::FieldCollision::Tag::kFieldCollisionTag:
      return ::test_union::FieldCollision::WithFieldCollisionTag(
          WireNaturalConversionTraits<int32_t, int32_t>::ToNatural(
              std::move(src.field_collision_tag())));
    default:
      ZX_PANIC("unknown union tag in strict union");
  }
}

std::unique_ptr<::test_union::FieldCollision>
WireNaturalConversionTraits<::test_union::wire::FieldCollision,
                            std::unique_ptr<::test_union::FieldCollision>>::
    ToNatural(::test_union::wire::FieldCollision src) {
  if (src.has_invalid_tag()) {
    return nullptr;
  }
  return std::make_unique<::test_union::FieldCollision>(
      WireNaturalConversionTraits<
          ::test_union::wire::FieldCollision,
          ::test_union::FieldCollision>::ToNatural(std::move(src)));
}

::test_union::ExplicitXUnion WireNaturalConversionTraits<
    ::test_union::wire::ExplicitXUnion,
    ::test_union::ExplicitXUnion>::ToNatural(::test_union::wire::ExplicitXUnion
                                                 src) {
  switch (src.Which()) {
    case ::test_union::wire::ExplicitXUnion::Tag::kI:
      return ::test_union::ExplicitXUnion::WithI(
          WireNaturalConversionTraits<int64_t, int64_t>::ToNatural(
              std::move(src.i())));
    case ::test_union::wire::ExplicitXUnion::Tag::kF:
      return ::test_union::ExplicitXUnion::WithF(
          WireNaturalConversionTraits<float, float>::ToNatural(
              std::move(src.f())));
    default:
      return ::test_union::ExplicitXUnion();
  }
}

std::unique_ptr<::test_union::ExplicitXUnion>
WireNaturalConversionTraits<::test_union::wire::ExplicitXUnion,
                            std::unique_ptr<::test_union::ExplicitXUnion>>::
    ToNatural(::test_union::wire::ExplicitXUnion src) {
  if (src.has_invalid_tag()) {
    return nullptr;
  }
  return std::make_unique<::test_union::ExplicitXUnion>(
      WireNaturalConversionTraits<
          ::test_union::wire::ExplicitXUnion,
          ::test_union::ExplicitXUnion>::ToNatural(std::move(src)));
}

::test_union::ExplicitUnion WireNaturalConversionTraits<
    ::test_union::wire::ExplicitUnion,
    ::test_union::ExplicitUnion>::ToNatural(::test_union::wire::ExplicitUnion
                                                src) {
  switch (src.Which()) {
    case ::test_union::wire::ExplicitUnion::Tag::kPrimitive:
      return ::test_union::ExplicitUnion::WithPrimitive(
          WireNaturalConversionTraits<int32_t, int32_t>::ToNatural(
              std::move(src.primitive())));
    case ::test_union::wire::ExplicitUnion::Tag::kStringNeedsConstructor:
      return ::test_union::ExplicitUnion::WithStringNeedsConstructor(
          WireNaturalConversionTraits<::fidl::StringView, ::std::string>::
              ToNatural(std::move(src.string_needs_constructor())));
    default:
      ZX_PANIC("unknown union tag in strict union");
  }
}

std::unique_ptr<::test_union::ExplicitUnion>
WireNaturalConversionTraits<::test_union::wire::ExplicitUnion,
                            std::unique_ptr<::test_union::ExplicitUnion>>::
    ToNatural(::test_union::wire::ExplicitUnion src) {
  if (src.has_invalid_tag()) {
    return nullptr;
  }
  return std::make_unique<::test_union::ExplicitUnion>(
      WireNaturalConversionTraits<
          ::test_union::wire::ExplicitUnion,
          ::test_union::ExplicitUnion>::ToNatural(std::move(src)));
}

::test_union::ExplicitStrictFoo WireNaturalConversionTraits<
    ::test_union::wire::ExplicitStrictFoo, ::test_union::ExplicitStrictFoo>::
    ToNatural(::test_union::wire::ExplicitStrictFoo src) {
  switch (src.Which()) {
    case ::test_union::wire::ExplicitStrictFoo::Tag::kS:
      return ::test_union::ExplicitStrictFoo::WithS(
          WireNaturalConversionTraits<::fidl::StringView, ::std::string>::
              ToNatural(std::move(src.s())));
    case ::test_union::wire::ExplicitStrictFoo::Tag::kI:
      return ::test_union::ExplicitStrictFoo::WithI(
          WireNaturalConversionTraits<int32_t, int32_t>::ToNatural(
              std::move(src.i())));
    default:
      ZX_PANIC("unknown union tag in strict union");
  }
}

std::unique_ptr<::test_union::ExplicitStrictFoo>
WireNaturalConversionTraits<::test_union::wire::ExplicitStrictFoo,
                            std::unique_ptr<::test_union::ExplicitStrictFoo>>::
    ToNatural(::test_union::wire::ExplicitStrictFoo src) {
  if (src.has_invalid_tag()) {
    return nullptr;
  }
  return std::make_unique<::test_union::ExplicitStrictFoo>(
      WireNaturalConversionTraits<
          ::test_union::wire::ExplicitStrictFoo,
          ::test_union::ExplicitStrictFoo>::ToNatural(std::move(src)));
}

::test_union::ExplicitFoo WireNaturalConversionTraits<
    ::test_union::wire::ExplicitFoo,
    ::test_union::ExplicitFoo>::ToNatural(::test_union::wire::ExplicitFoo src) {
  switch (src.Which()) {
    case ::test_union::wire::ExplicitFoo::Tag::kS:
      return ::test_union::ExplicitFoo::WithS(
          WireNaturalConversionTraits<::fidl::StringView, ::std::string>::
              ToNatural(std::move(src.s())));
    case ::test_union::wire::ExplicitFoo::Tag::kI:
      return ::test_union::ExplicitFoo::WithI(
          WireNaturalConversionTraits<int32_t, int32_t>::ToNatural(
              std::move(src.i())));
    default:
      return ::test_union::ExplicitFoo();
  }
}

std::unique_ptr<::test_union::ExplicitFoo>
WireNaturalConversionTraits<::test_union::wire::ExplicitFoo,
                            std::unique_ptr<::test_union::ExplicitFoo>>::
    ToNatural(::test_union::wire::ExplicitFoo src) {
  if (src.has_invalid_tag()) {
    return nullptr;
  }
  return std::make_unique<::test_union::ExplicitFoo>(
      WireNaturalConversionTraits<
          ::test_union::wire::ExplicitFoo,
          ::test_union::ExplicitFoo>::ToNatural(std::move(src)));
}

::test_union::XUnionContainingEmptyStruct
WireNaturalConversionTraits<::test_union::wire::XUnionContainingEmptyStruct,
                            ::test_union::XUnionContainingEmptyStruct>::
    ToNatural(::test_union::wire::XUnionContainingEmptyStruct src) {
  switch (src.Which()) {
    case ::test_union::wire::XUnionContainingEmptyStruct::Tag::kEmpty:
      return ::test_union::XUnionContainingEmptyStruct::WithEmpty(
          WireNaturalConversionTraits<
              ::test_union::wire::Empty,
              ::test_union::Empty>::ToNatural(std::move(src.empty())));
    default:
      return ::test_union::XUnionContainingEmptyStruct();
  }
}

std::unique_ptr<::test_union::XUnionContainingEmptyStruct>
WireNaturalConversionTraits<
    ::test_union::wire::XUnionContainingEmptyStruct,
    std::unique_ptr<::test_union::XUnionContainingEmptyStruct>>::
    ToNatural(::test_union::wire::XUnionContainingEmptyStruct src) {
  if (src.has_invalid_tag()) {
    return nullptr;
  }
  return std::make_unique<::test_union::XUnionContainingEmptyStruct>(
      WireNaturalConversionTraits<
          ::test_union::wire::XUnionContainingEmptyStruct,
          ::test_union::XUnionContainingEmptyStruct>::
          ToNatural(std::move(src)));
}

#ifdef __Fuchsia__

::fidl::Request<
    ::test_union::TestProtocol::StrictXUnionHenceResponseMayBeStackAllocated>
WireNaturalConversionTraits<
    ::fidl::WireRequest<::test_union::TestProtocol::
                            StrictXUnionHenceResponseMayBeStackAllocated>,
    ::fidl::Request<::test_union::TestProtocol::
                        StrictXUnionHenceResponseMayBeStackAllocated>>::
    ToNatural(
        ::fidl::WireRequest<::test_union::TestProtocol::
                                StrictXUnionHenceResponseMayBeStackAllocated>
            src) {
  return ::fidl::Request<::test_union::TestProtocol::
                             StrictXUnionHenceResponseMayBeStackAllocated>();
}

::fidl::Request<
    ::test_union::TestProtocol::FlexibleXUnionHenceResponseMustBeHeapAllocated>
WireNaturalConversionTraits<
    ::fidl::WireRequest<::test_union::TestProtocol::
                            FlexibleXUnionHenceResponseMustBeHeapAllocated>,
    ::fidl::Request<::test_union::TestProtocol::
                        FlexibleXUnionHenceResponseMustBeHeapAllocated>>::
    ToNatural(
        ::fidl::WireRequest<::test_union::TestProtocol::
                                FlexibleXUnionHenceResponseMustBeHeapAllocated>
            src) {
  return ::fidl::Request<::test_union::TestProtocol::
                             FlexibleXUnionHenceResponseMustBeHeapAllocated>();
}

::fidl::Response<
    ::test_union::TestProtocol::StrictXUnionHenceResponseMayBeStackAllocated>
WireNaturalConversionTraits<
    ::fidl::WireResponse<::test_union::TestProtocol::
                             StrictXUnionHenceResponseMayBeStackAllocated>,
    ::fidl::Response<::test_union::TestProtocol::
                         StrictXUnionHenceResponseMayBeStackAllocated>>::
    ToNatural(
        ::fidl::WireResponse<::test_union::TestProtocol::
                                 StrictXUnionHenceResponseMayBeStackAllocated>
            src) {
  return ::fidl::Response<
      ::test_union::TestProtocol::StrictXUnionHenceResponseMayBeStackAllocated>(
      WireNaturalConversionTraits<
          ::test_union::wire::
              TestProtocolStrictXUnionHenceResponseMayBeStackAllocatedTopResponse,
          ::test_union::
              TestProtocolStrictXUnionHenceResponseMayBeStackAllocatedTopResponse>::
          ToNatural(std::move(src)));
}

::fidl::Response<
    ::test_union::TestProtocol::FlexibleXUnionHenceResponseMustBeHeapAllocated>
WireNaturalConversionTraits<
    ::fidl::WireResponse<::test_union::TestProtocol::
                             FlexibleXUnionHenceResponseMustBeHeapAllocated>,
    ::fidl::Response<::test_union::TestProtocol::
                         FlexibleXUnionHenceResponseMustBeHeapAllocated>>::
    ToNatural(
        ::fidl::WireResponse<::test_union::TestProtocol::
                                 FlexibleXUnionHenceResponseMustBeHeapAllocated>
            src) {
  return ::fidl::Response<::test_union::TestProtocol::
                              FlexibleXUnionHenceResponseMustBeHeapAllocated>(
      WireNaturalConversionTraits<
          ::test_union::wire::
              TestProtocolFlexibleXUnionHenceResponseMustBeHeapAllocatedTopResponse,
          ::test_union::
              TestProtocolFlexibleXUnionHenceResponseMustBeHeapAllocatedTopResponse>::
          ToNatural(std::move(src)));
}
#endif  // __Fuchsia__
}  // namespace internal
}  // namespace fidl
