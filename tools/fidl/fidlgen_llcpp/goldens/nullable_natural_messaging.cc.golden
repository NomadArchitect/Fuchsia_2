// WARNING: This file is machine generated by fidlgen_llcpp.

#include <fidl/test.nullable/cpp/natural_messaging.h>

namespace test_nullable {
[[maybe_unused]] constexpr inline uint64_t kSimpleProtocol_Add_Ordinal =
    9142761280038437494lu;

#ifdef __Fuchsia__
}  // namespace test_nullable
::fidl::internal::NaturalThenable<::test_nullable::SimpleProtocol::Add>
fidl::internal::NaturalClientImpl<::test_nullable::SimpleProtocol>::Add(
    ::fidl::Request<::test_nullable::SimpleProtocol::Add> request) const {
  ::fidl::internal::NaturalMessageEncoder _encoder{
      &::fidl::internal::ChannelTransport::VTable,
      ::test_nullable::kSimpleProtocol_Add_Ordinal};
  _encoder.EncodeBody(::fidl::internal::NaturalMessageConverter<
                      ::fidl::Request<::test_nullable::SimpleProtocol::Add>>::
                          IntoDomainObject(std::move(request)));
  return ::fidl::internal::NaturalThenable<
      ::test_nullable::SimpleProtocol::Add>(
      messenger().client_base(), {}, std::move(_encoder),
      [](::fidl::internal::ThenableBase* base,
         ::fidl::internal::NaturalMessageEncoder& encoder,
         ::fidl::internal::ResponseContext* response_context) {
        ::fidl::OutgoingMessage msg = encoder.GetMessage();
        return base->SendTwoWay(msg, response_context);
      });
}

namespace test_nullable {
#endif  // __Fuchsia__

}  // namespace test_nullable
#ifdef __Fuchsia__

std::optional<::fidl::UnbindInfo> fidl::internal::
    NaturalEventDispatcher<::test_nullable::SimpleProtocol>::DispatchEvent(
        ::fidl::IncomingMessage& msg,
        ::fidl::internal::IncomingTransportContext transport_context) {
  return ::fidl::UnbindInfo::UnknownOrdinal();
}
#endif  // __Fuchsia__

#ifdef __Fuchsia__

#endif  // __Fuchsia__

void fidl::internal::
    NaturalCompleterBase<::test_nullable::SimpleProtocol::Add>::Reply(
        ::fidl::Response<::test_nullable::SimpleProtocol::Add>&& response) {
  ::fidl::internal::NaturalServerMessenger _messenger{this};
  ::fidl::internal::NaturalMessageEncoder _encoder{
      &::fidl::internal::ChannelTransport::VTable,
      ::test_nullable::kSimpleProtocol_Add_Ordinal};
  _encoder.EncodeBody(::fidl::internal::NaturalMessageConverter<
                      ::fidl::Response<::test_nullable::SimpleProtocol::Add>>::
                          IntoDomainObject(std::move(response)));
  _messenger.SendReply(_encoder.GetMessage(),
                       ::fidl::internal::OutgoingTransportContext{});
}

#ifdef __Fuchsia__

constexpr ::fidl::internal::MethodEntry fidl::internal::NaturalServerDispatcher<
    ::test_nullable::SimpleProtocol>::entries_[] = {
    {
        ::test_nullable::kSimpleProtocol_Add_Ordinal,
        [](void* interface, ::fidl::IncomingMessage&& msg,
           internal::IncomingTransportContext transport_context,
           ::fidl::Transaction* txn) {
          ::fitx::result decoded = ::fidl::internal::DecodeTransactionalMessage<
              ::test_nullable::SimpleProtocolAddRequest>(std::move(msg));
          if (decoded.is_error()) {
            return decoded.error_value().status();
          }
          ::fidl::Request<::test_nullable::SimpleProtocol::Add> request =
              ::fidl::internal::NaturalMessageConverter<
                  ::fidl::Request<::test_nullable::SimpleProtocol::Add>>::
                  FromDomainObject(std::move(decoded.value()));
          ::fidl::internal::NaturalCompleter<
              ::test_nullable::SimpleProtocol::Add>::Sync completer(txn);
          static_cast<::fidl::Server<::test_nullable::SimpleProtocol>*>(
              interface)
              ->Add(request, completer);
          return ZX_OK;
        },
    },
};

const ::fidl::internal::MethodEntry* fidl::internal::NaturalServerDispatcher<
    ::test_nullable::SimpleProtocol>::entries_end_ = &entries_[1];

void fidl::internal::NaturalServerDispatcher<::test_nullable::SimpleProtocol>::
    Dispatch(::fidl::Server<::test_nullable::SimpleProtocol>* impl,
             ::fidl::IncomingMessage&& msg,
             internal::IncomingTransportContext transport_context,
             ::fidl::Transaction* txn) {
  ::fidl::internal::Dispatch(impl, msg, std::move(transport_context), txn,
                             entries_, entries_end_);
}
void fidl::Server<::test_nullable::SimpleProtocol>::dispatch_message(
    ::fidl::IncomingMessage&& msg, ::fidl::Transaction* txn,
    ::fidl::internal::IncomingTransportContext transport_context) {
  ::fidl::internal::NaturalServerDispatcher<
      ::test_nullable::SimpleProtocol>::Dispatch(this, std::move(msg),
                                                 std::move(transport_context),
                                                 txn);
}
#endif  // __Fuchsia__
