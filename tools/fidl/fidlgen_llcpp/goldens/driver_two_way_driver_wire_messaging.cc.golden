// WARNING: This file is machine generated by fidlgen.

#include <fidl/fidl.test.drivertwoway/cpp/driver/wire_messaging.h>

#include <memory>

namespace fidl_test_drivertwoway {
[[maybe_unused]] constexpr uint64_t kTwoWay_Add_Ordinal = 7312196191678030330lu;

extern "C" const fidl_type_t
    fidl_test_drivertwoway_TwoWayAddRequestMessageTable;

extern "C" const fidl_type_t
    fidl_test_drivertwoway_TwoWayAddResponseMessageTable;

}  // namespace fidl_test_drivertwoway
#ifdef __Fuchsia__

void fidl::internal::WireClientImpl<::fidl_test_drivertwoway::TwoWay>::Add(
    uint16_t addend1, uint16_t addend2,
    ::fidl::WireClientCallback<::fidl_test_drivertwoway::TwoWay::Add> _cb) {
  using Callback = decltype(_cb);
  class ResponseContext final : public ::fidl::WireResponseContext<
                                    ::fidl_test_drivertwoway::TwoWay::Add> {
   public:
    ResponseContext(Callback cb) : cb_(std::move(cb)) {}

    void OnResult(
        ::fidl::WireUnownedResult<::fidl_test_drivertwoway::TwoWay::Add>&
            result) override {
      cb_(result);
      delete this;
    }

   private:
    Callback cb_;
  };

  auto* _context = new ResponseContext(std::move(_cb));
  ::fidl::WireRequest<::fidl_test_drivertwoway::TwoWay::Add> _request{addend1,
                                                                      addend2};
  FIDL_INTERNAL_DISABLE_AUTO_VAR_INIT
  ::fidl::OwnedEncodedMessage<
      ::fidl::WireRequest<::fidl_test_drivertwoway::TwoWay::Add>>
      _request_message(::fidl::internal::AllowUnownedInputRef{}, &_request);
  ::fidl::internal::ClientBase::SendTwoWay(
      _request_message.GetOutgoingMessage(), _context);
}

void fidl::internal::WireClientImpl<::fidl_test_drivertwoway::TwoWay>::Add(
    uint16_t addend1, uint16_t addend2,
    ::fit::callback<void(
        ::fidl::WireResponse<::fidl_test_drivertwoway::TwoWay::Add>* response)>
        _cb) {
  using Callback = decltype(_cb);
  class ResponseContext final : public ::fidl::WireResponseContext<
                                    ::fidl_test_drivertwoway::TwoWay::Add> {
   public:
    ResponseContext(Callback cb) : cb_(std::move(cb)) {}

    void OnResult(
        ::fidl::WireUnownedResult<::fidl_test_drivertwoway::TwoWay::Add>&
            result) override {
      if (result.ok()) {
        ::fidl::WireResponse<::fidl_test_drivertwoway::TwoWay::Add>* response =
            result.Unwrap();
        cb_(response);
      }
      delete this;
    }

   private:
    Callback cb_;
  };

  auto* _context = new ResponseContext(std::move(_cb));
  ::fidl::WireRequest<::fidl_test_drivertwoway::TwoWay::Add> _request{addend1,
                                                                      addend2};
  FIDL_INTERNAL_DISABLE_AUTO_VAR_INIT
  ::fidl::OwnedEncodedMessage<
      ::fidl::WireRequest<::fidl_test_drivertwoway::TwoWay::Add>>
      _request_message(::fidl::internal::AllowUnownedInputRef{}, &_request);
  ::fidl::internal::ClientBase::SendTwoWay(
      _request_message.GetOutgoingMessage(), _context);
}
void fidl::internal::WireClientImpl<::fidl_test_drivertwoway::TwoWay>::Add(
    ::fidl::BufferSpan _request_buffer, uint16_t addend1, uint16_t addend2,
    ::fidl::WireResponseContext<::fidl_test_drivertwoway::TwoWay::Add>*
        _context) {
  ::fidl::WireRequest<::fidl_test_drivertwoway::TwoWay::Add> _request{addend1,
                                                                      addend2};

  ::fidl::UnownedEncodedMessage<
      ::fidl::WireRequest<::fidl_test_drivertwoway::TwoWay::Add>>
      _request_message(_request_buffer.data, _request_buffer.capacity,
                       &_request);
  ::fidl::internal::ClientBase::SendTwoWay(
      _request_message.GetOutgoingMessage(), _context);
}
#endif  // __Fuchsia__

#ifdef __Fuchsia__

constexpr ::fidl::internal::MethodEntry fidl::internal::WireServerDispatcher<
    ::fidl_test_drivertwoway::TwoWay>::entries_[] = {
    {
        ::fidl_test_drivertwoway::kTwoWay_Add_Ordinal,
        [](void* interface, ::fidl::IncomingMessage&& msg,
           ::fidl::Transaction* txn) {
          ::fidl::DecodedMessage<
              ::fidl::WireRequest<::fidl_test_drivertwoway::TwoWay::Add>>
              decoded{std::move(msg)};
          if (unlikely(!decoded.ok())) {
            return decoded.status();
          }
          auto* primary = decoded.PrimaryObject();
          ::fidl::internal::WireCompleter<
              ::fidl_test_drivertwoway::TwoWay::Add>::Sync completer(txn);
          reinterpret_cast<
              ::fidl::WireServer<::fidl_test_drivertwoway::TwoWay>*>(interface)
              ->Add(primary, completer);
          return ZX_OK;
        },
    },
};

const ::fidl::internal::MethodEntry* fidl::internal::WireServerDispatcher<
    ::fidl_test_drivertwoway::TwoWay>::entries_end_ = &entries_[1];

::fidl::DispatchResult fidl::internal::
    WireServerDispatcher<::fidl_test_drivertwoway::TwoWay>::TryDispatch(
        ::fidl::WireServer<::fidl_test_drivertwoway::TwoWay>* impl,
        ::fidl::IncomingMessage& msg, ::fidl::Transaction* txn) {
  return ::fidl::internal::TryDispatch(impl, msg, txn, entries_, entries_end_);
}

void fidl::internal::WireServerDispatcher<::fidl_test_drivertwoway::TwoWay>::
    Dispatch(::fidl::WireServer<::fidl_test_drivertwoway::TwoWay>* impl,
             ::fidl::IncomingMessage&& msg, ::fidl::Transaction* txn) {
  ::fidl::internal::Dispatch(impl, msg, txn, entries_, entries_end_);
}
void fidl::WireServer<::fidl_test_drivertwoway::TwoWay>::dispatch_message(
    ::fidl::IncomingMessage&& msg, ::fidl::Transaction* txn,
    ::fidl::internal::IncomingTransportContext* transport_context) {
  ::fidl::internal::WireServerDispatcher<
      ::fidl_test_drivertwoway::TwoWay>::Dispatch(this, std::move(msg), txn);
}
#endif  // __Fuchsia__

#ifdef __Fuchsia__
::fidl::Result fidl::internal::WireCompleterBase<
    ::fidl_test_drivertwoway::TwoWay::Add>::Reply(uint16_t sum) {
  ::fidl::WireResponse<::fidl_test_drivertwoway::TwoWay::Add> _response{sum};
  FIDL_INTERNAL_DISABLE_AUTO_VAR_INIT
  ::fidl::OwnedEncodedMessage<
      ::fidl::WireResponse<::fidl_test_drivertwoway::TwoWay::Add>>
      _response_message{::fidl::internal::AllowUnownedInputRef{}, &_response};
  return ::fidl::internal::
      WireCompleterBase<::fidl_test_drivertwoway::TwoWay::Add>::SendReply(
          &_response_message.GetOutgoingMessage());
}

::fidl::Result
fidl::internal::WireCompleterBase<::fidl_test_drivertwoway::TwoWay::Add>::Reply(
    ::fidl::BufferSpan _buffer, uint16_t sum) {
  ::fidl::WireResponse<::fidl_test_drivertwoway::TwoWay::Add> _response{sum};
  ::fidl::UnownedEncodedMessage<
      ::fidl::WireResponse<::fidl_test_drivertwoway::TwoWay::Add>>
      _response_message(_buffer.data, _buffer.capacity, &_response);
  return CompleterBase::SendReply(&_response_message.GetOutgoingMessage());
}
#endif  // __Fuchsia__

void ::fidl::WireRequest<::fidl_test_drivertwoway::TwoWay::Add>::_InitHeader() {
  fidl_init_txn_header(&_hdr, 0, ::fidl_test_drivertwoway::kTwoWay_Add_Ordinal);
}

void ::fidl::WireResponse<
    ::fidl_test_drivertwoway::TwoWay::Add>::_InitHeader() {
  fidl_init_txn_header(&_hdr, 0, ::fidl_test_drivertwoway::kTwoWay_Add_Ordinal);
}
