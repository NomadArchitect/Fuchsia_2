// WARNING: This file is machine generated by fidlgen.

#include <fidl/test.versions/cpp/natural_types.h>

#ifdef __Fuchsia__

void ::test_versions::Struct::EncodeWithoutValidating(::fidl::Encoder& encoder,
                                                      size_t offset) {
  encoder.Alloc(
      ::fidl::EncodingInlineSize<::test_versions::Struct, ::fidl::Encoder>(
          &encoder));
  ::fidl::CodingTraits<::test_versions::Struct>::Encode(&encoder, this, offset);
}

::test_versions::Struct::Struct(::fidl::Decoder& decoder)
    : storage_({::fidl::DecodeAs<uint32_t>(&decoder, 0)}) {}
#endif  // __Fuchsia__

::test_versions::Struct::Storage_ test_versions::Struct::CloneStorage_() const {
  return Storage_{::fidl::internal::NaturalClone(storage_.x)};
}

::test_versions::Table::Storage_ test_versions::Table::CloneStorage_() const {
  return Storage_{::fidl::internal::NaturalClone(storage_.x)};
}

std::shared_ptr<::test_versions::Union::Storage_>
test_versions::Union::CloneStorage_() const {
  const Storage_& storage = *storage_;
  switch (storage_->index()) {
    case 1:
      return std::make_shared<Storage_>(
          std::in_place_index<1>,
          ::fidl::internal::NaturalClone(std::get<1>(storage)));
    default:
      return std::make_shared<Storage_>();
  }
}
