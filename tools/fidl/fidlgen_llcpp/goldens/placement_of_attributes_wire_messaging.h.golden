// WARNING: This file is machine generated by fidlgen.

#pragma once

#include <fidl/fidl.test.placementofattributes/cpp/markers.h>
#include <fidl/fidl.test.placementofattributes/cpp/wire_types.h>
#include <lib/fidl/llcpp/wire_messaging.h>

#ifdef __Fuchsia__

#include <lib/fidl/llcpp/client.h>
#include <lib/fidl/llcpp/connect_service.h>
#include <lib/fidl/llcpp/server.h>
#include <lib/fidl/llcpp/service_handler_interface.h>
#include <lib/fidl/llcpp/sync_call.h>

#endif  // __Fuchsia__

#include <fidl/exampleusing/cpp/wire_messaging.h>

namespace fidl_test_placementofattributes {
class ExampleProtocol;

__LOCAL extern "C" const fidl_type_t
    fidl_test_placementofattributes_ExampleProtocolMethodRequestTable;

__LOCAL extern "C" const fidl_type_t
    fidl_test_placementofattributes_ExampleProtocolMethodResponseTable;

}  // namespace fidl_test_placementofattributes
#ifdef __Fuchsia__

template <>
struct ::fidl::internal::ProtocolDetails<
    ::fidl_test_placementofattributes::ExampleProtocol> {};
#endif  // __Fuchsia__

#ifdef __Fuchsia__

template <>
struct ::fidl::internal::WireServerDispatcher<
    ::fidl_test_placementofattributes::ExampleProtocol>
    final {
  WireServerDispatcher() = delete;
  static ::fidl::DispatchResult TryDispatch(
      ::fidl::WireServer<::fidl_test_placementofattributes::ExampleProtocol>*
          impl,
      ::fidl::IncomingMessage& msg, ::fidl::Transaction* txn);
  static void Dispatch(
      ::fidl::WireServer<::fidl_test_placementofattributes::ExampleProtocol>*
          impl,
      ::fidl::IncomingMessage&& msg, ::fidl::Transaction* txn);

 private:
  static const ::fidl::internal::MethodEntry entries_[];
  static const ::fidl::internal::MethodEntry* entries_end_;
};
#endif  // __Fuchsia__

template <>
struct ::fidl::WireRequest<
    ::fidl_test_placementofattributes::ExampleProtocol::Method>
    final {
  FIDL_ALIGNDECL
  fidl_message_header_t _hdr;
  ::exampleusing::wire::Empty arg;
  explicit WireRequest(const ::exampleusing::wire::Empty& arg) : arg(arg) {
    _InitHeader();
  }
  WireRequest() { _InitHeader(); }

  static constexpr const fidl_type_t* Type =
      &::fidl_test_placementofattributes::
          fidl_test_placementofattributes_ExampleProtocolMethodRequestTable;
  static constexpr uint32_t MaxNumHandles = 0;
  static constexpr uint32_t PrimarySize = 24;
  static constexpr uint32_t PrimarySizeV1 = 24;
  static constexpr uint32_t MaxOutOfLine = 0;
  static constexpr uint32_t MaxOutOfLineV1 = 0;
  static constexpr bool HasFlexibleEnvelope = false;
  static constexpr bool HasPointer = false;
  static constexpr ::fidl::internal::TransactionalMessageKind MessageKind =
      ::fidl::internal::TransactionalMessageKind::kRequest;

  class UnownedEncodedMessage;
  class OwnedEncodedMessage;

 public:
  class DecodedMessage;

 private:
  void _InitHeader();
};

class ::fidl::WireRequest<::fidl_test_placementofattributes::ExampleProtocol::
                              Method>::UnownedEncodedMessage final {
 public:
  UnownedEncodedMessage(uint8_t* _backing_buffer, uint32_t _backing_buffer_size,
                        const ::exampleusing::wire::Empty& arg)
      : UnownedEncodedMessage(::fidl::internal::IovecBufferSize,
                              _backing_buffer, _backing_buffer_size, arg) {}
  UnownedEncodedMessage(uint32_t _iovec_capacity, uint8_t* _backing_buffer,
                        uint32_t _backing_buffer_size,
                        const ::exampleusing::wire::Empty& arg)
      : message_(::fidl::OutgoingMessage::ConstructorArgs{
            .iovecs = iovecs_,
            .iovec_capacity = _iovec_capacity,
            .backing_buffer = _backing_buffer,
            .backing_buffer_capacity = _backing_buffer_size,
        }) {
    ZX_ASSERT(_iovec_capacity <= std::size(iovecs_));
    FIDL_ALIGNDECL WireRequest _request{arg};
    message_.Encode<WireRequest>(&_request);
  }
  UnownedEncodedMessage(uint8_t* _backing_buffer, uint32_t _backing_buffer_size,
                        WireRequest* request)
      : UnownedEncodedMessage(::fidl::internal::IovecBufferSize,
                              _backing_buffer, _backing_buffer_size, request) {}
  UnownedEncodedMessage(uint32_t _iovec_capacity, uint8_t* _backing_buffer,
                        uint32_t _backing_buffer_size, WireRequest* request)
      : message_(::fidl::OutgoingMessage::ConstructorArgs{
            .iovecs = iovecs_,
            .iovec_capacity = _iovec_capacity,
            .backing_buffer = _backing_buffer,
            .backing_buffer_capacity = _backing_buffer_size,
        }) {
    ZX_ASSERT(_iovec_capacity <= std::size(iovecs_));
    message_.Encode<WireRequest>(request);
  }
  UnownedEncodedMessage(const UnownedEncodedMessage&) = delete;
  UnownedEncodedMessage(UnownedEncodedMessage&&) = delete;
  UnownedEncodedMessage* operator=(const UnownedEncodedMessage&) = delete;
  UnownedEncodedMessage* operator=(UnownedEncodedMessage&&) = delete;

  zx_status_t status() const { return message_.status(); }
#ifdef __Fuchsia__
  const char* status_string() const { return message_.status_string(); }
#endif  // __Fuchsia__
  bool ok() const { return message_.status() == ZX_OK; }
  std::string FormatDescription() const { return message_.FormatDescription(); }
  const char* lossy_description() const { return message_.lossy_description(); }
  const ::fidl::Result& error() const { return message_.error(); }

  ::fidl::OutgoingMessage& GetOutgoingMessage() { return message_; }
#ifdef __Fuchsia__
  template <typename TransportLike>
  void Write(TransportLike&& transport) {
    message_.Write(std::forward<TransportLike>(transport));
  }
#endif  // __Fuchsia__
 private:
  ::fidl::internal::IovecBuffer iovecs_;
  ::fidl::OutgoingMessage message_;
};

class ::fidl::WireRequest<::fidl_test_placementofattributes::ExampleProtocol::
                              Method>::OwnedEncodedMessage final {
 public:
  explicit OwnedEncodedMessage(const ::exampleusing::wire::Empty& arg)
      : message_(1u, backing_buffer_.data(),
                 static_cast<uint32_t>(backing_buffer_.size()), arg) {}
  // Internal constructor.
  explicit OwnedEncodedMessage(
      ::fidl::internal::AllowUnownedInputRef allow_unowned,
      const ::exampleusing::wire::Empty& arg)
      : message_(::fidl::internal::IovecBufferSize, backing_buffer_.data(),
                 static_cast<uint32_t>(backing_buffer_.size()), arg) {}
  explicit OwnedEncodedMessage(WireRequest* request)
      : message_(1u, backing_buffer_.data(),
                 static_cast<uint32_t>(backing_buffer_.size()), request) {}
  // Internal constructor.
  explicit OwnedEncodedMessage(
      ::fidl::internal::AllowUnownedInputRef allow_unowned,
      WireRequest* request)
      : message_(::fidl::internal::IovecBufferSize, backing_buffer_.data(),
                 static_cast<uint32_t>(backing_buffer_.size()), request) {}
  OwnedEncodedMessage(const OwnedEncodedMessage&) = delete;
  OwnedEncodedMessage(OwnedEncodedMessage&&) = delete;
  OwnedEncodedMessage* operator=(const OwnedEncodedMessage&) = delete;
  OwnedEncodedMessage* operator=(OwnedEncodedMessage&&) = delete;

  zx_status_t status() const { return message_.status(); }
#ifdef __Fuchsia__
  const char* status_string() const { return message_.status_string(); }
#endif  // __Fuchsia__
  bool ok() const { return message_.ok(); }
  std::string FormatDescription() const { return message_.FormatDescription(); }
  const char* lossy_description() const { return message_.lossy_description(); }
  const ::fidl::Result& error() const { return message_.error(); }

  ::fidl::OutgoingMessage& GetOutgoingMessage() {
    return message_.GetOutgoingMessage();
  }
#ifdef __Fuchsia__
  template <typename ChannelLike>
  void Write(ChannelLike&& client) {
    message_.Write(std::forward<ChannelLike>(client));
  }
#endif  // __Fuchsia__
 private:
  ::fidl::internal::InlineMessageBuffer<24> backing_buffer_;
  UnownedEncodedMessage message_;
};

class ::fidl::WireRequest<
    ::fidl_test_placementofattributes::ExampleProtocol::Method>::DecodedMessage
    final : public ::fidl::internal::DecodedMessageBase<::fidl::WireRequest<
                ::fidl_test_placementofattributes::ExampleProtocol::Method>> {
 public:
  using DecodedMessageBase<::fidl::WireRequest<
      ::fidl_test_placementofattributes::ExampleProtocol::Method>>::
      DecodedMessageBase;

  DecodedMessage(uint8_t* bytes, uint32_t byte_actual,
                 zx_handle_info_t* handles = nullptr,
                 uint32_t handle_actual = 0)
      : DecodedMessageBase(::fidl::IncomingMessage(bytes, byte_actual, handles,
                                                   handle_actual)) {}

  ::fidl::WireRequest<
      ::fidl_test_placementofattributes::ExampleProtocol::Method>*
  PrimaryObject() {
    ZX_DEBUG_ASSERT(ok());
    return reinterpret_cast<::fidl::WireRequest<
        ::fidl_test_placementofattributes::ExampleProtocol::Method>*>(bytes());
  }

  // Release the ownership of the decoded message. That means that the handles
  // won't be closed When the object is destroyed. After calling this method,
  // the |DecodedMessage| object should not be used anymore.
  void ReleasePrimaryObject() { ResetBytes(); }
};
#ifdef __Fuchsia__

template <>
class ::fidl::WireResult<
    ::fidl_test_placementofattributes::ExampleProtocol::Method>
    final : public ::fidl::Result {
 public:
  explicit WireResult(::fidl::UnownedClientEnd<
                          ::fidl_test_placementofattributes::ExampleProtocol>
                          _client,
                      const ::exampleusing::wire::Empty& arg);
  explicit WireResult(const ::fidl::Result& result) : ::fidl::Result(result) {}
  WireResult(WireResult&&) = delete;
  WireResult(const WireResult&) = delete;
  WireResult* operator=(WireResult&&) = delete;
  WireResult* operator=(const WireResult&) = delete;
  ~WireResult() = default;

 private:
};
template <>
class ::fidl::WireUnownedResult<
    ::fidl_test_placementofattributes::ExampleProtocol::Method>
    final : public ::fidl::Result {
 public:
  explicit WireUnownedResult(
      ::fidl::UnownedClientEnd<
          ::fidl_test_placementofattributes::ExampleProtocol>
          _client,
      uint8_t* _request_bytes, uint32_t _request_byte_capacity,
      const ::exampleusing::wire::Empty& arg);
  explicit WireUnownedResult(const ::fidl::Result& result)
      : ::fidl::Result(result) {}
  WireUnownedResult(WireUnownedResult&&) = delete;
  WireUnownedResult(const WireUnownedResult&) = delete;
  WireUnownedResult* operator=(WireUnownedResult&&) = delete;
  WireUnownedResult* operator=(const WireUnownedResult&) = delete;
  ~WireUnownedResult() = default;
};

// Methods to make a sync FIDL call directly on an unowned channel or a
// const reference to a
// |fidl::ClientEnd<::fidl_test_placementofattributes::ExampleProtocol>|,
// avoiding setting up a client.
template <>
class ::fidl::internal::WireSyncClientImpl<
    ::fidl_test_placementofattributes::ExampleProtocol>
    final : public ::fidl::internal::SyncEndpointVeneer<
                ::fidl::internal::WireSyncClientImpl<
                    ::fidl_test_placementofattributes::ExampleProtocol>> {
 public:
  // Allocates 24 bytes of message buffer on the stack. No heap allocation
  // necessary.
  ::fidl::WireResult<::fidl_test_placementofattributes::ExampleProtocol::Method>
  Method(const ::exampleusing::wire::Empty& arg) {
    return ::fidl::WireResult<
        ::fidl_test_placementofattributes::ExampleProtocol::Method>(
        _client_end(), arg);
  }

  // Caller provides the backing storage for FIDL message via request and
  // response buffers.
  ::fidl::WireUnownedResult<
      ::fidl_test_placementofattributes::ExampleProtocol::Method>
  Method(::fidl::BufferSpan _request_buffer,
         const ::exampleusing::wire::Empty& arg) {
    return ::fidl::WireUnownedResult<
        ::fidl_test_placementofattributes::ExampleProtocol::Method>(
        _client_end(), _request_buffer.data, _request_buffer.capacity, arg);
  }

 private:
  ::fidl::UnownedClientEnd<::fidl_test_placementofattributes::ExampleProtocol>
  _client_end() const {
    return ::fidl::UnownedClientEnd<
        ::fidl_test_placementofattributes::ExampleProtocol>(_channel());
  }
};
template <>
class ::fidl::internal::WireEventHandlerInterface<
    ::fidl_test_placementofattributes::ExampleProtocol> {
 public:
  WireEventHandlerInterface() = default;
  virtual ~WireEventHandlerInterface() = default;
};

template <>
class ::fidl::WireAsyncEventHandler<
    ::fidl_test_placementofattributes::ExampleProtocol>
    : public ::fidl::internal::WireEventHandlerInterface<
          ::fidl_test_placementofattributes::ExampleProtocol>,
      public ::fidl::internal::AsyncEventHandler {
 public:
  WireAsyncEventHandler() = default;
};

template <>
class ::fidl::WireSyncEventHandler<
    ::fidl_test_placementofattributes::ExampleProtocol>
    : public ::fidl::internal::WireEventHandlerInterface<
          ::fidl_test_placementofattributes::ExampleProtocol> {
 public:
  WireSyncEventHandler() = default;

  // Method called when an unknown event is found. This methods gives the status
  // which, in this case, is returned by HandleOneEvent.
  virtual zx_status_t Unknown() = 0;

  // Handle all possible events defined in this protocol.
  // Blocks to consume exactly one message from the channel, then call the
  // corresponding virtual method.
  ::fidl::Result HandleOneEvent(
      ::fidl::UnownedClientEnd<
          ::fidl_test_placementofattributes::ExampleProtocol>
          client_end);
};
template <>
class ::fidl::WireSyncClient<::fidl_test_placementofattributes::ExampleProtocol>
    final {
 public:
  WireSyncClient() = default;

  explicit WireSyncClient(
      ::fidl::ClientEnd<::fidl_test_placementofattributes::ExampleProtocol>
          client_end)
      : client_end_(std::move(client_end)) {}

  ~WireSyncClient() = default;
  WireSyncClient(WireSyncClient&&) = default;
  WireSyncClient& operator=(WireSyncClient&&) = default;

  const ::fidl::ClientEnd<::fidl_test_placementofattributes::ExampleProtocol>&
  client_end() const {
    return client_end_;
  }
  ::fidl::ClientEnd<::fidl_test_placementofattributes::ExampleProtocol>&
  client_end() {
    return client_end_;
  }

  const ::zx::channel& channel() const { return client_end_.channel(); }
  ::zx::channel* mutable_channel() { return &client_end_.channel(); }

  // Allocates 24 bytes of message buffer on the stack. No heap allocation
  // necessary.
  ::fidl::WireResult<::fidl_test_placementofattributes::ExampleProtocol::Method>
  Method(const ::exampleusing::wire::Empty& arg) {
    return ::fidl::WireResult<
        ::fidl_test_placementofattributes::ExampleProtocol::Method>(
        this->client_end(), arg);
  }

  // Caller provides the backing storage for FIDL message via request and
  // response buffers.
  ::fidl::WireUnownedResult<
      ::fidl_test_placementofattributes::ExampleProtocol::Method>
  Method(::fidl::BufferSpan _request_buffer,
         const ::exampleusing::wire::Empty& arg) {
    return ::fidl::WireUnownedResult<
        ::fidl_test_placementofattributes::ExampleProtocol::Method>(
        this->client_end(), _request_buffer.data, _request_buffer.capacity,
        arg);
  }

 private:
  ::fidl::ClientEnd<::fidl_test_placementofattributes::ExampleProtocol>
      client_end_;
};

// Pure-virtual interface to be implemented by a server.
// This interface uses typed channels (i.e. |fidl::ClientEnd<SomeProtocol>|
// and |fidl::ServerEnd<SomeProtocol>|).
template <>
class ::fidl::WireServer<::fidl_test_placementofattributes::ExampleProtocol>
    : public ::fidl::internal::IncomingMessageDispatcher {
 public:
  WireServer() = default;
  virtual ~WireServer() = default;

  // The FIDL protocol type that is implemented by this server.
  using _EnclosingProtocol = ::fidl_test_placementofattributes::ExampleProtocol;

  using MethodCompleter = ::fidl::internal::WireCompleter<
      ::fidl_test_placementofattributes::ExampleProtocol::Method>;
  using MethodRequestView = ::fidl::internal::WireRequestView<
      ::fidl_test_placementofattributes::ExampleProtocol::Method>;

  virtual void Method(MethodRequestView request,
                      MethodCompleter::Sync& _completer) = 0;

 private:
  void dispatch_message(::fidl::IncomingMessage&& msg,
                        ::fidl::Transaction* txn) final;
};
#endif  // __Fuchsia__

namespace fidl {

template <>
struct IsFidlType<::fidl::WireRequest<
    ::fidl_test_placementofattributes::ExampleProtocol::Method>>
    : public std::true_type {};
template <>
struct IsFidlMessage<::fidl::WireRequest<
    ::fidl_test_placementofattributes::ExampleProtocol::Method>>
    : public std::true_type {};
static_assert(
    sizeof(::fidl::WireRequest<
           ::fidl_test_placementofattributes::ExampleProtocol::Method>) ==
    ::fidl::WireRequest<::fidl_test_placementofattributes::ExampleProtocol::
                            Method>::PrimarySize);
static_assert(
    offsetof(::fidl::WireRequest<
                 ::fidl_test_placementofattributes::ExampleProtocol::Method>,
             arg) == 16);

#ifdef __Fuchsia__
}  // namespace fidl
template <>
class ::fidl::internal::WireClientImpl<
    ::fidl_test_placementofattributes::ExampleProtocol>
    final : public ::fidl::internal::ClientBase {
 public:
  // Allocates 24 bytes of message buffer on the stack. No heap allocation
  // necessary.
  ::fidl::Result Method(const ::exampleusing::wire::Empty& arg);

  // Caller provides the backing storage for FIDL message via request buffer.
  ::fidl::Result Method(::fidl::BufferSpan _request_buffer,
                        const ::exampleusing::wire::Empty& arg);
  WireClientImpl() = default;

 private:
  std::optional<::fidl::UnbindInfo> DispatchEvent(
      ::fidl::IncomingMessage& msg,
      ::fidl::internal::AsyncEventHandler* maybe_event_handler) override;
};
namespace fidl {
#endif  // __Fuchsia__

}  // namespace fidl
#ifdef __Fuchsia__
// |EventSender| owns a server endpoint of a channel speaking
// the ExampleProtocol protocol, and can send events in that protocol.
template <>
class ::fidl::WireEventSender<
    ::fidl_test_placementofattributes::ExampleProtocol> {
 public:
  // Constructs an event sender with an invalid channel.
  WireEventSender() = default;

  explicit WireEventSender(
      ::fidl::ServerEnd<::fidl_test_placementofattributes::ExampleProtocol>
          server_end)
      : server_end_(std::move(server_end)) {}

  // The underlying server channel endpoint, which may be replaced at run-time.
  const ::fidl::ServerEnd<::fidl_test_placementofattributes::ExampleProtocol>&
  server_end() const {
    return server_end_;
  }
  ::fidl::ServerEnd<::fidl_test_placementofattributes::ExampleProtocol>&
  server_end() {
    return server_end_;
  }

  const ::zx::channel& channel() const { return server_end_.channel(); }
  ::zx::channel& channel() { return server_end_.channel(); }

  // Whether the underlying channel is valid.
  bool is_valid() const { return server_end_.is_valid(); }

 private:
  ::fidl::ServerEnd<::fidl_test_placementofattributes::ExampleProtocol>
      server_end_;
};

template <>
class ::fidl::internal::WireWeakEventSender<
    ::fidl_test_placementofattributes::ExampleProtocol> {
 public:
  WireWeakEventSender(
      std::weak_ptr<::fidl::internal::AsyncServerBinding>&& binding)
      : inner_(std::move(binding)) {}

 private:
  friend ServerBindingRef<::fidl_test_placementofattributes::ExampleProtocol>;

  ::fidl::internal::WeakEventSenderInner inner_;
};
#endif  // __Fuchsia__
