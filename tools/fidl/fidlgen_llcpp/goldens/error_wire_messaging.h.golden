// WARNING: This file is machine generated by fidlgen.

#pragma once

#include <fidl/fidl.test.error/cpp/markers.h>
#include <fidl/fidl.test.error/cpp/wire_types.h>
#include <lib/fidl/llcpp/wire_messaging.h>

#ifdef __Fuchsia__

#include <lib/fidl/llcpp/client.h>
#include <lib/fidl/llcpp/connect_service.h>
#include <lib/fidl/llcpp/server.h>
#include <lib/fidl/llcpp/service_handler_interface.h>
#include <lib/fidl/llcpp/sync_call.h>

#endif  // __Fuchsia__

namespace fidl_test_error {
class Example;

__LOCAL extern "C" const fidl_type_t fidl_test_error_ExamplefooRequestTable;

__LOCAL extern "C" const fidl_type_t fidl_test_error_ExamplefooResponseTable;

}  // namespace fidl_test_error
#ifdef __Fuchsia__

template <>
struct ::fidl::internal::ProtocolDetails<::fidl_test_error::Example> {};
#endif  // __Fuchsia__

#ifdef __Fuchsia__

template <>
struct ::fidl::internal::WireServerDispatcher<::fidl_test_error::Example>
    final {
  WireServerDispatcher() = delete;
  static ::fidl::DispatchResult TryDispatch(
      ::fidl::WireServer<::fidl_test_error::Example>* impl,
      ::fidl::IncomingMessage& msg, ::fidl::Transaction* txn);
  static void Dispatch(::fidl::WireServer<::fidl_test_error::Example>* impl,
                       ::fidl::IncomingMessage&& msg, ::fidl::Transaction* txn);

 private:
  static const ::fidl::internal::MethodEntry entries_[];
  static const ::fidl::internal::MethodEntry* entries_end_;
};
#endif  // __Fuchsia__

template <>
struct ::fidl::WireRequest<::fidl_test_error::Example::Foo> final {
  FIDL_ALIGNDECL
  fidl_message_header_t _hdr;
  ::fidl::StringView s;

  explicit WireRequest(::fidl::StringView s) : s(s) { _InitHeader(); }
  WireRequest() { _InitHeader(); }

  static constexpr const fidl_type_t* Type =
      &::fidl_test_error::fidl_test_error_ExamplefooRequestTable;
  static constexpr uint32_t MaxNumHandles = 0;
  static constexpr uint32_t PrimarySize = 32;
  static constexpr uint32_t PrimarySizeV1 = 32;
  static constexpr uint32_t MaxOutOfLine = 4294967295;
  static constexpr uint32_t MaxOutOfLineV1 = 4294967295;
  static constexpr bool HasFlexibleEnvelope = false;
  static constexpr bool HasPointer = true;
  static constexpr ::fidl::internal::TransactionalMessageKind MessageKind =
      ::fidl::internal::TransactionalMessageKind::kRequest;
  using ResponseType = ::fidl::WireResponse<::fidl_test_error::Example::Foo>;

  class UnownedEncodedMessage;
  class OwnedEncodedMessage;

 public:
  class DecodedMessage;

 private:
  void _InitHeader();
};

class ::fidl::WireRequest<
    ::fidl_test_error::Example::Foo>::UnownedEncodedMessage final {
 public:
  UnownedEncodedMessage(uint8_t* _backing_buffer, uint32_t _backing_buffer_size,
                        WireRequest* request)
      : UnownedEncodedMessage(::fidl::internal::IovecBufferSize,
                              _backing_buffer, _backing_buffer_size, request) {}
  UnownedEncodedMessage(uint32_t _iovec_capacity, uint8_t* _backing_buffer,
                        uint32_t _backing_buffer_size, WireRequest* request)
      : message_(::fidl::OutgoingMessage::CreateInternal(
            ::fidl::OutgoingMessage::ConstructorArgs{
                .transport_vtable = &::fidl::internal::ChannelTransport::VTable,
                .iovecs = iovecs_,
                .iovec_capacity = _iovec_capacity,
                .backing_buffer = _backing_buffer,
                .backing_buffer_capacity = _backing_buffer_size,
            })) {
    ZX_ASSERT(_iovec_capacity <= std::size(iovecs_));
    message_.Encode<WireRequest>(request);
  }
  UnownedEncodedMessage(const UnownedEncodedMessage&) = delete;
  UnownedEncodedMessage(UnownedEncodedMessage&&) = delete;
  UnownedEncodedMessage* operator=(const UnownedEncodedMessage&) = delete;
  UnownedEncodedMessage* operator=(UnownedEncodedMessage&&) = delete;

  zx_status_t status() const { return message_.status(); }
#ifdef __Fuchsia__
  const char* status_string() const { return message_.status_string(); }
#endif  // __Fuchsia__
  bool ok() const { return message_.status() == ZX_OK; }
  std::string FormatDescription() const { return message_.FormatDescription(); }
  const char* lossy_description() const { return message_.lossy_description(); }
  const ::fidl::Result& error() const { return message_.error(); }

  ::fidl::OutgoingMessage& GetOutgoingMessage() { return message_; }
#ifdef __Fuchsia__
  template <typename TransportLike>
  void Write(TransportLike&& transport) {
    message_.Write(std::forward<TransportLike>(transport));
  }
#endif  // __Fuchsia__
 private:
  ::fidl::internal::IovecBuffer iovecs_;
  ::fidl::OutgoingMessage message_;
};

class ::fidl::WireRequest<::fidl_test_error::Example::Foo>::OwnedEncodedMessage
    final {
 public:
  explicit OwnedEncodedMessage(WireRequest* request)
      : message_(1u, backing_buffer_.data(),
                 static_cast<uint32_t>(backing_buffer_.size()), request) {}
  // Internal constructor.
  explicit OwnedEncodedMessage(
      ::fidl::internal::AllowUnownedInputRef allow_unowned,
      WireRequest* request)
      : message_(::fidl::internal::IovecBufferSize, backing_buffer_.data(),
                 static_cast<uint32_t>(backing_buffer_.size()), request) {}
  OwnedEncodedMessage(const OwnedEncodedMessage&) = delete;
  OwnedEncodedMessage(OwnedEncodedMessage&&) = delete;
  OwnedEncodedMessage* operator=(const OwnedEncodedMessage&) = delete;
  OwnedEncodedMessage* operator=(OwnedEncodedMessage&&) = delete;

  zx_status_t status() const { return message_.status(); }
#ifdef __Fuchsia__
  const char* status_string() const { return message_.status_string(); }
#endif  // __Fuchsia__
  bool ok() const { return message_.ok(); }
  std::string FormatDescription() const { return message_.FormatDescription(); }
  const char* lossy_description() const { return message_.lossy_description(); }
  const ::fidl::Result& error() const { return message_.error(); }

  ::fidl::OutgoingMessage& GetOutgoingMessage() {
    return message_.GetOutgoingMessage();
  }
#ifdef __Fuchsia__
  template <typename ChannelLike>
  void Write(ChannelLike&& client) {
    message_.Write(std::forward<ChannelLike>(client));
  }
#endif  // __Fuchsia__
 private:
  ::fidl::internal::BoxedMessageBuffer<ZX_CHANNEL_MAX_MSG_BYTES>
      backing_buffer_;
  UnownedEncodedMessage message_;
};

class ::fidl::WireRequest<::fidl_test_error::Example::Foo>::DecodedMessage final
    : public ::fidl::internal::DecodedMessageBase<
          ::fidl::WireRequest<::fidl_test_error::Example::Foo>> {
 public:
  using DecodedMessageBase<
      ::fidl::WireRequest<::fidl_test_error::Example::Foo>>::DecodedMessageBase;

  DecodedMessage(uint8_t* bytes, uint32_t byte_actual,
                 zx_handle_t* handles = nullptr,
                 fidl_channel_handle_metadata_t* handle_metadata = nullptr,
                 uint32_t handle_actual = 0)
      : DecodedMessageBase(::fidl::IncomingMessage::Create(
            bytes, byte_actual, handles, handle_metadata, handle_actual)) {}

  ::fidl::WireRequest<::fidl_test_error::Example::Foo>* PrimaryObject() {
    ZX_DEBUG_ASSERT(ok());
    return reinterpret_cast<
        ::fidl::WireRequest<::fidl_test_error::Example::Foo>*>(bytes());
  }

  // Release the ownership of the decoded message. That means that the handles
  // won't be closed When the object is destroyed. After calling this method,
  // the |DecodedMessage| object should not be used anymore.
  void ReleasePrimaryObject() { ResetBytes(); }
};
template <>
struct ::fidl::WireResponse<::fidl_test_error::Example::Foo> final {
  using Result = fidl_test_error::wire::ExampleFooResult;

  FIDL_ALIGNDECL
  fidl_message_header_t _hdr;
  ::fidl_test_error::wire::ExampleFooResult result;

  explicit WireResponse(::fidl_test_error::wire::ExampleFooResult result)
      : result(result) {
    _InitHeader();
  }
  WireResponse() { _InitHeader(); }

  static constexpr const fidl_type_t* Type =
      &::fidl_test_error::fidl_test_error_ExamplefooResponseTable;
  static constexpr uint32_t MaxNumHandles = 0;
  static constexpr uint32_t PrimarySize = 32;
  static constexpr uint32_t PrimarySizeV1 = 40;
  static constexpr uint32_t MaxOutOfLine = 8;
  static constexpr uint32_t MaxOutOfLineV1 = 8;
  static constexpr bool HasFlexibleEnvelope = false;
  static constexpr bool HasPointer = true;
  static constexpr ::fidl::internal::TransactionalMessageKind MessageKind =
      ::fidl::internal::TransactionalMessageKind::kResponse;

  class UnownedEncodedMessage;
  class OwnedEncodedMessage;

 public:
  class DecodedMessage;

 private:
  void _InitHeader();
};

class ::fidl::WireResponse<
    ::fidl_test_error::Example::Foo>::UnownedEncodedMessage final {
 public:
  UnownedEncodedMessage(uint8_t* _backing_buffer, uint32_t _backing_buffer_size,
                        WireResponse* response)
      : UnownedEncodedMessage(::fidl::internal::IovecBufferSize,
                              _backing_buffer, _backing_buffer_size, response) {
  }
  UnownedEncodedMessage(uint32_t _iovec_capacity, uint8_t* _backing_buffer,
                        uint32_t _backing_buffer_size, WireResponse* response)
      : message_(::fidl::OutgoingMessage::CreateInternal(
            ::fidl::OutgoingMessage::ConstructorArgs{
                .transport_vtable = &::fidl::internal::ChannelTransport::VTable,
                .iovecs = iovecs_,
                .iovec_capacity = _iovec_capacity,
                .backing_buffer = _backing_buffer,
                .backing_buffer_capacity = _backing_buffer_size,
            })) {
    ZX_ASSERT(_iovec_capacity <= std::size(iovecs_));
    message_.Encode<::fidl::WireResponse<::fidl_test_error::Example::Foo>>(
        response);
  }
  UnownedEncodedMessage(const UnownedEncodedMessage&) = delete;
  UnownedEncodedMessage(UnownedEncodedMessage&&) = delete;
  UnownedEncodedMessage* operator=(const UnownedEncodedMessage&) = delete;
  UnownedEncodedMessage* operator=(UnownedEncodedMessage&&) = delete;

  zx_status_t status() const { return message_.status(); }
#ifdef __Fuchsia__
  const char* status_string() const { return message_.status_string(); }
#endif  // __Fuchsia__
  bool ok() const { return message_.status() == ZX_OK; }
  std::string FormatDescription() const { return message_.FormatDescription(); }
  const char* lossy_description() const { return message_.lossy_description(); }
  const ::fidl::Result& error() const { return message_.error(); }

  ::fidl::OutgoingMessage& GetOutgoingMessage() { return message_; }
#ifdef __Fuchsia__
  template <typename TransportLike>
  void Write(TransportLike&& transport) {
    message_.Write(std::forward<TransportLike>(transport));
  }
#endif  // __Fuchsia__
 private:
  ::fidl::internal::IovecBuffer iovecs_;
  ::fidl::OutgoingMessage message_;
};

class ::fidl::WireResponse<::fidl_test_error::Example::Foo>::OwnedEncodedMessage
    final {
 public:
  explicit OwnedEncodedMessage(
      ::fidl::WireResponse<::fidl_test_error::Example::Foo>* response)
      : message_(1u, backing_buffer_.data(),
                 static_cast<uint32_t>(backing_buffer_.size()), response) {}
  // Internal constructor.
  explicit OwnedEncodedMessage(
      ::fidl::internal::AllowUnownedInputRef allow_unowned,
      ::fidl::WireResponse<::fidl_test_error::Example::Foo>* response)
      : message_(::fidl::internal::IovecBufferSize, backing_buffer_.data(),
                 static_cast<uint32_t>(backing_buffer_.size()), response) {}
  OwnedEncodedMessage(const OwnedEncodedMessage&) = delete;
  OwnedEncodedMessage(OwnedEncodedMessage&&) = delete;
  OwnedEncodedMessage* operator=(const OwnedEncodedMessage&) = delete;
  OwnedEncodedMessage* operator=(OwnedEncodedMessage&&) = delete;

  zx_status_t status() const { return message_.status(); }
#ifdef __Fuchsia__
  const char* status_string() const { return message_.status_string(); }
#endif  // __Fuchsia__
  bool ok() const { return message_.ok(); }
  std::string FormatDescription() const { return message_.FormatDescription(); }
  const char* lossy_description() const { return message_.lossy_description(); }
  const ::fidl::Result& error() const { return message_.error(); }

  ::fidl::OutgoingMessage& GetOutgoingMessage() {
    return message_.GetOutgoingMessage();
  }
#ifdef __Fuchsia__
  template <typename ChannelLike>
  void Write(ChannelLike&& client) {
    message_.Write(std::forward<ChannelLike>(client));
  }
#endif  // __Fuchsia__
 private:
  ::fidl::internal::InlineMessageBuffer<48> backing_buffer_;
  UnownedEncodedMessage message_;
};

class ::fidl::WireResponse<::fidl_test_error::Example::Foo>::DecodedMessage
    final : public ::fidl::internal::DecodedMessageBase<
                ::fidl::WireResponse<::fidl_test_error::Example::Foo>> {
 public:
  using DecodedMessageBase<::fidl::WireResponse<
      ::fidl_test_error::Example::Foo>>::DecodedMessageBase;

  DecodedMessage(uint8_t* bytes, uint32_t byte_actual,
                 zx_handle_t* handles = nullptr,
                 fidl_channel_handle_metadata_t* handle_metadata = nullptr,
                 uint32_t handle_actual = 0)
      : DecodedMessageBase(::fidl::IncomingMessage::Create(
            bytes, byte_actual, handles, handle_metadata, handle_actual)) {}

  ::fidl::WireResponse<::fidl_test_error::Example::Foo>* PrimaryObject() {
    ZX_DEBUG_ASSERT(ok());
    return reinterpret_cast<
        ::fidl::WireResponse<::fidl_test_error::Example::Foo>*>(bytes());
  }

  // Release the ownership of the decoded message. That means that the handles
  // won't be closed When the object is destroyed. After calling this method,
  // the |DecodedMessage| object should not be used anymore.
  void ReleasePrimaryObject() { ResetBytes(); }
};
#ifdef __Fuchsia__

template <>
class ::fidl::WireResult<::fidl_test_error::Example::Foo> final
    : public ::fidl::Result {
 public:
  WireResult(::fidl::UnownedClientEnd<::fidl_test_error::Example> client,
             ::fidl::WireRequest<::fidl_test_error::Example::Foo>* request);
  WireResult(::fidl::UnownedClientEnd<::fidl_test_error::Example> client,
             ::fidl::WireRequest<::fidl_test_error::Example::Foo>* request,
             zx_time_t _deadline);
  explicit WireResult(const ::fidl::Result& result) : ::fidl::Result(result) {}
  WireResult(WireResult&&) = delete;
  WireResult(const WireResult&) = delete;
  WireResult* operator=(WireResult&&) = delete;
  WireResult* operator=(const WireResult&) = delete;
  ~WireResult() = default;

  ::fidl::WireResponse<::fidl_test_error::Example::Foo>* Unwrap() {
    ZX_DEBUG_ASSERT(ok());
    return reinterpret_cast<
        ::fidl::WireResponse<::fidl_test_error::Example::Foo>*>(bytes_.data());
  }
  const ::fidl::WireResponse<::fidl_test_error::Example::Foo>* Unwrap() const {
    ZX_DEBUG_ASSERT(ok());
    return reinterpret_cast<
        const ::fidl::WireResponse<::fidl_test_error::Example::Foo>*>(
        bytes_.data());
  }

  ::fidl::WireResponse<::fidl_test_error::Example::Foo>& value() {
    return *Unwrap();
  }
  const ::fidl::WireResponse<::fidl_test_error::Example::Foo>& value() const {
    return *Unwrap();
  }

  ::fidl::WireResponse<::fidl_test_error::Example::Foo>* operator->() {
    return &value();
  }
  const ::fidl::WireResponse<::fidl_test_error::Example::Foo>* operator->()
      const {
    return &value();
  }

  ::fidl::WireResponse<::fidl_test_error::Example::Foo>& operator*() {
    return value();
  }
  const ::fidl::WireResponse<::fidl_test_error::Example::Foo>& operator*()
      const {
    return value();
  }

 private:
  ::fidl::internal::InlineMessageBuffer<48> bytes_;
};
template <>
class ::fidl::WireUnownedResult<::fidl_test_error::Example::Foo> final
    : public ::fidl::Result {
 public:
  explicit WireUnownedResult(
      ::fidl::UnownedClientEnd<::fidl_test_error::Example> client_end,
      ::fidl::internal::AnyBufferAllocator& allocator,
      ::fidl::WireRequest<::fidl_test_error::Example::Foo>* request);
  explicit WireUnownedResult(
      ::fidl::WireResponse<::fidl_test_error::Example::Foo>* response)
      : bytes_(reinterpret_cast<uint8_t*>(response)) {}
  explicit WireUnownedResult(const ::fidl::Result& result)
      : ::fidl::Result(result) {}
  explicit WireUnownedResult(
      ::fidl::DecodedMessage<
          ::fidl::WireResponse<::fidl_test_error::Example::Foo>>&& decoded)
      : ::fidl::Result(decoded) {
    if (decoded.ok()) {
      bytes_ = reinterpret_cast<uint8_t*>(decoded.PrimaryObject());
    } else {
      bytes_ = nullptr;
    }
    decoded.ReleasePrimaryObject();
  }
  WireUnownedResult(WireUnownedResult&&) = delete;
  WireUnownedResult(const WireUnownedResult&) = delete;
  WireUnownedResult* operator=(WireUnownedResult&&) = delete;
  WireUnownedResult* operator=(const WireUnownedResult&) = delete;
  ~WireUnownedResult() = default;

  ::fidl::WireResponse<::fidl_test_error::Example::Foo>* Unwrap() {
    ZX_DEBUG_ASSERT(ok());
    return reinterpret_cast<
        ::fidl::WireResponse<::fidl_test_error::Example::Foo>*>(bytes_);
  }
  const ::fidl::WireResponse<::fidl_test_error::Example::Foo>* Unwrap() const {
    ZX_DEBUG_ASSERT(ok());
    return reinterpret_cast<
        const ::fidl::WireResponse<::fidl_test_error::Example::Foo>*>(bytes_);
  }

  ::fidl::WireResponse<::fidl_test_error::Example::Foo>& value() {
    return *Unwrap();
  }
  const ::fidl::WireResponse<::fidl_test_error::Example::Foo>& value() const {
    return *Unwrap();
  }

  ::fidl::WireResponse<::fidl_test_error::Example::Foo>* operator->() {
    return &value();
  }
  const ::fidl::WireResponse<::fidl_test_error::Example::Foo>* operator->()
      const {
    return &value();
  }

  ::fidl::WireResponse<::fidl_test_error::Example::Foo>& operator*() {
    return value();
  }
  const ::fidl::WireResponse<::fidl_test_error::Example::Foo>& operator*()
      const {
    return value();
  }

 private:
  uint8_t* bytes_;
};

// Methods to make a sync FIDL call directly on an unowned channel or a
// const reference to a |fidl::ClientEnd<::fidl_test_error::Example>|,
// avoiding setting up a client.
template <>
class ::fidl::internal::WireSyncClientImpl<::fidl_test_error::Example> final
    : public ::fidl::internal::SyncEndpointManagedVeneer<
          ::fidl::internal::WireSyncClientImpl<::fidl_test_error::Example>> {
 public:
  // Allocates 40 bytes of response buffer on the stack. Request is
  // heap-allocated.
  ::fidl::WireResult<::fidl_test_error::Example::Foo> Foo(
      ::fidl::StringView s) {
    ::fidl::WireRequest<::fidl_test_error::Example::Foo> _request{s};
    return ::fidl::WireResult<::fidl_test_error::Example::Foo>(_client_end(),
                                                               &_request);
  }

 private:
  ::fidl::UnownedClientEnd<::fidl_test_error::Example> _client_end() const {
    return ::fidl::UnownedClientEnd<::fidl_test_error::Example>(_channel());
  }
};

template <>
class ::fidl::internal::WireSyncBufferClientImpl<::fidl_test_error::Example>
    final : public ::fidl::internal::SyncEndpointBufferVeneer<
                ::fidl::internal::WireSyncBufferClientImpl<
                    ::fidl_test_error::Example>> {
 public:
  // Caller provides the backing storage for FIDL message via an argument to
  // `.buffer()`.
  ::fidl::WireUnownedResult<::fidl_test_error::Example::Foo> Foo(
      ::fidl::StringView s) {
    ::fidl::WireRequest<::fidl_test_error::Example::Foo> _request{s};
    return ::fidl::WireUnownedResult<::fidl_test_error::Example::Foo>(
        _client_end(), _allocator(), &_request);
  }

 private:
  ::fidl::UnownedClientEnd<::fidl_test_error::Example> _client_end() const {
    return ::fidl::UnownedClientEnd<::fidl_test_error::Example>(_channel());
  }
};
template <>
class ::fidl::internal::WireEventHandlerInterface<::fidl_test_error::Example> {
 public:
  WireEventHandlerInterface() = default;
  virtual ~WireEventHandlerInterface() = default;
};

template <>
class ::fidl::WireAsyncEventHandler<::fidl_test_error::Example>
    : public ::fidl::internal::WireEventHandlerInterface<
          ::fidl_test_error::Example>,
      public ::fidl::internal::AsyncEventHandler {
 public:
  WireAsyncEventHandler() = default;
};

template <>
class ::fidl::WireSyncEventHandler<::fidl_test_error::Example>
    : public ::fidl::internal::WireEventHandlerInterface<
          ::fidl_test_error::Example> {
 public:
  WireSyncEventHandler() = default;

  // Method called when an unknown event is found. This methods gives the status
  // which, in this case, is returned by HandleOneEvent.
  virtual zx_status_t Unknown() = 0;

  // Handle all possible events defined in this protocol.
  // Blocks to consume exactly one message from the channel, then call the
  // corresponding virtual method.
  ::fidl::Result HandleOneEvent(
      ::fidl::UnownedClientEnd<::fidl_test_error::Example> client_end);
};
template <>
class ::fidl::WireSyncClient<::fidl_test_error::Example> final
    : public ::fidl::internal::WireSyncClientBase<::fidl_test_error::Example> {
 public:
  using ::fidl::internal::WireSyncClientBase<
      ::fidl_test_error::Example>::WireSyncClientBase;
};

template <>
class ::fidl::internal::WireCompleterBase<::fidl_test_error::Example::Foo>
    : public ::fidl::CompleterBase {
 public:
  // In the following methods, the return value indicates internal errors during
  // the reply, such as encoding or writing to the transport.
  // Note that any error will automatically lead to the destruction of the
  // binding, after which the |on_unbound| callback will be triggered with a
  // detailed reason.
  //
  // See //zircon/system/ulib/fidl/include/lib/fidl/llcpp/server.h.
  //
  // Because the reply status is identical to the unbinding status, it can be
  // safely ignored.
  ::fidl::Result Reply(::fidl_test_error::wire::ExampleFooResult result);
  ::fidl::Result ReplySuccess(int64_t y);
  ::fidl::Result ReplyError(uint32_t error);
  ::fidl::Result Reply(::fidl::BufferSpan _buffer,
                       ::fidl_test_error::wire::ExampleFooResult result);
  ::fidl::Result ReplySuccess(::fidl::BufferSpan _buffer, int64_t y);

 protected:
  using ::fidl::CompleterBase::CompleterBase;
};

template <>
struct ::fidl::internal::WireMethodTypes<::fidl_test_error::Example::Foo> {
  using Completer = fidl::Completer<
      ::fidl::internal::WireCompleterBase<::fidl_test_error::Example::Foo>>;
};

// Pure-virtual interface to be implemented by a server.
// This interface uses typed channels (i.e. |fidl::ClientEnd<SomeProtocol>|
// and |fidl::ServerEnd<SomeProtocol>|).
template <>
class ::fidl::WireServer<::fidl_test_error::Example>
    : public ::fidl::internal::IncomingMessageDispatcher {
 public:
  WireServer() = default;
  virtual ~WireServer() = default;

  // The FIDL protocol type that is implemented by this server.
  using _EnclosingProtocol = ::fidl_test_error::Example;

  using FooCompleter =
      ::fidl::internal::WireCompleter<::fidl_test_error::Example::Foo>;
  using FooRequestView =
      ::fidl::internal::WireRequestView<::fidl_test_error::Example::Foo>;

  virtual void Foo(FooRequestView request, FooCompleter::Sync& _completer) = 0;

 private:
  void dispatch_message(
      ::fidl::IncomingMessage&& msg, ::fidl::Transaction* txn,
      const internal::IncomingTransportContext* transport_context) final;
};
#endif  // __Fuchsia__

namespace fidl {

template <>
struct IsFidlType<::fidl::WireRequest<::fidl_test_error::Example::Foo>>
    : public std::true_type {};
template <>
struct IsFidlMessage<::fidl::WireRequest<::fidl_test_error::Example::Foo>>
    : public std::true_type {};
static_assert(
    sizeof(::fidl::WireRequest<::fidl_test_error::Example::Foo>) ==
    ::fidl::WireRequest<::fidl_test_error::Example::Foo>::PrimarySize);
static_assert(offsetof(::fidl::WireRequest<::fidl_test_error::Example::Foo>,
                       s) == 16);

template <>
struct IsFidlType<::fidl::WireResponse<::fidl_test_error::Example::Foo>>
    : public std::true_type {};
template <>
struct IsFidlMessage<::fidl::WireResponse<::fidl_test_error::Example::Foo>>
    : public std::true_type {};
static_assert(
    sizeof(::fidl::WireResponse<::fidl_test_error::Example::Foo>) ==
    ::fidl::WireResponse<::fidl_test_error::Example::Foo>::PrimarySize);
static_assert(offsetof(::fidl::WireResponse<::fidl_test_error::Example::Foo>,
                       result) == 16);
}  // namespace fidl
#ifdef __Fuchsia__

template <>
class ::fidl::WireResponseContext<::fidl_test_error::Example::Foo>
    : public ::fidl::internal::ResponseContext {
 public:
  WireResponseContext();

  virtual void OnResult(
      ::fidl::WireUnownedResult<::fidl_test_error::Example::Foo>& result) = 0;

 private:
  ::cpp17::optional<::fidl::UnbindInfo> OnRawResult(
      ::fidl::IncomingMessage&& msg,
      const internal::IncomingTransportContext* transport_context) override;
};
#endif  // __Fuchsia__

#ifdef __Fuchsia__

template <>
class ::fidl::internal::WireClientImpl<::fidl_test_error::Example> final
    : public ::fidl::internal::ClientBase {
 public:
  // Asynchronous variant of |Example.Foo()|.
  // The request and callback are allocated on the heap.
  void Foo(::fidl::StringView s,
           ::fidl::WireClientCallback<::fidl_test_error::Example::Foo> _cb);

  void Foo(::fidl::StringView s,
           ::fit::callback<void(
               ::fidl::WireResponse<::fidl_test_error::Example::Foo>* response)>
               _cb);

  // Asynchronous variant of |Example.Foo()|.
  // Caller provides the backing storage for FIDL message via request buffer.
  // Ownership of |_context| is given unsafely to the binding until |OnError|
  // or |OnReply| are called on it.
  void Foo(
      ::fidl::BufferSpan _request_buffer, ::fidl::StringView s,
      ::fidl::WireResponseContext<::fidl_test_error::Example::Foo>* _context);

  // Synchronous variant of |Foo.Foo()|.
  // Allocates 40 bytes of response buffer on the stack. Request is
  // heap-allocated.
  ::fidl::WireResult<::fidl_test_error::Example::Foo> Foo_Sync(
      ::fidl::StringView s);

  // Synchronous variant of |Foo.Foo()|.
  // Caller provides the backing storage for FIDL message via request and
  // response buffers.
  ::fidl::WireUnownedResult<::fidl_test_error::Example::Foo> Foo_Sync(
      ::fidl::BufferSpan _buffer_span, ::fidl::StringView s);
  WireClientImpl() = default;

 private:
  std::optional<::fidl::UnbindInfo> DispatchEvent(
      ::fidl::IncomingMessage& msg,
      ::fidl::internal::AsyncEventHandler* maybe_event_handler,
      const internal::IncomingTransportContext* transport_context) override;
};
#endif  // __Fuchsia__

#ifdef __Fuchsia__
// |EventSender| owns a server endpoint of a channel speaking
// the Example protocol, and can send events in that protocol.
template <>
class ::fidl::WireEventSender<::fidl_test_error::Example> {
 public:
  // Constructs an event sender with an invalid channel.
  WireEventSender() = default;

  explicit WireEventSender(
      ::fidl::ServerEnd<::fidl_test_error::Example> server_end)
      : server_end_(std::move(server_end)) {}

  // The underlying server channel endpoint, which may be replaced at run-time.
  const ::fidl::ServerEnd<::fidl_test_error::Example>& server_end() const {
    return server_end_;
  }
  ::fidl::ServerEnd<::fidl_test_error::Example>& server_end() {
    return server_end_;
  }

  const ::zx::channel& channel() const { return server_end_.channel(); }
  ::zx::channel& channel() { return server_end_.channel(); }

  // Whether the underlying channel is valid.
  bool is_valid() const { return server_end_.is_valid(); }

 private:
  ::fidl::ServerEnd<::fidl_test_error::Example> server_end_;
};

template <>
class ::fidl::internal::WireWeakEventSender<::fidl_test_error::Example> {
 public:
  WireWeakEventSender(
      std::weak_ptr<::fidl::internal::AsyncServerBinding>&& binding)
      : inner_(std::move(binding)) {}

 private:
  friend ServerBindingRef<::fidl_test_error::Example>;

  ::fidl::internal::WeakEventSenderInner inner_;
};
#endif  // __Fuchsia__
