// WARNING: This file is machine generated by fidlgen.

#pragma once

#include <fidl/fidl.test.protocolrequest/cpp/markers.h>
#include <fidl/fidl.test.protocolrequest/cpp/wire_types.h>
#include <lib/fidl/llcpp/wire_messaging.h>

#ifdef __Fuchsia__

#include <lib/fidl/llcpp/client.h>
#include <lib/fidl/llcpp/connect_service.h>
#include <lib/fidl/llcpp/server.h>
#include <lib/fidl/llcpp/service_handler_interface.h>
#include <lib/fidl/llcpp/sync_call.h>

#endif  // __Fuchsia__

namespace fidl_test_protocolrequest {
class Parent;

class Child;

__LOCAL extern "C" const fidl_type_t
    fidl_test_protocolrequest_ParentGetChildRequestMessageTable;

__LOCAL extern "C" const fidl_type_t
    fidl_test_protocolrequest_ParentGetChildResponseMessageTable;

__LOCAL extern "C" const fidl_type_t
    fidl_test_protocolrequest_ParentGetChildRequestRequestMessageTable;

__LOCAL extern "C" const fidl_type_t
    fidl_test_protocolrequest_ParentGetChildRequestResponseMessageTable;

__LOCAL extern "C" const fidl_type_t
    fidl_test_protocolrequest_ParentTakeChildRequestMessageTable;

__LOCAL extern "C" const fidl_type_t
    fidl_test_protocolrequest_ParentTakeChildResponseMessageTable;

__LOCAL extern "C" const fidl_type_t
    fidl_test_protocolrequest_ParentTakeChildRequestRequestMessageTable;

__LOCAL extern "C" const fidl_type_t
    fidl_test_protocolrequest_ParentTakeChildRequestResponseMessageTable;

}  // namespace fidl_test_protocolrequest
#ifdef __Fuchsia__

template <>
struct ::fidl::internal::ProtocolDetails<::fidl_test_protocolrequest::Parent> {
};
#endif  // __Fuchsia__

#ifdef __Fuchsia__

template <>
struct ::fidl::internal::WireServerDispatcher<
    ::fidl_test_protocolrequest::Parent>
    final {
  WireServerDispatcher() = delete;
  static ::fidl::DispatchResult TryDispatch(
      ::fidl::WireServer<::fidl_test_protocolrequest::Parent>* impl,
      ::fidl::IncomingMessage& msg, ::fidl::Transaction* txn);
  static void Dispatch(
      ::fidl::WireServer<::fidl_test_protocolrequest::Parent>* impl,
      ::fidl::IncomingMessage&& msg, ::fidl::Transaction* txn);

 private:
  static const ::fidl::internal::MethodEntry entries_[];
  static const ::fidl::internal::MethodEntry* entries_end_;
};
#endif  // __Fuchsia__

template <>
struct ::fidl::WireRequest<::fidl_test_protocolrequest::Parent::GetChild>
    final {
  FIDL_ALIGNDECL
  fidl_message_header_t _hdr;

  WireRequest() { _InitHeader(); }

  static constexpr const fidl_type_t* Type =
      &::fidl::_llcpp_coding_AnyZeroArgMessageTable;
  static constexpr uint32_t MaxNumHandles = 0;
  static constexpr uint32_t PrimarySize = 16;
  static constexpr uint32_t PrimarySizeV1 = 16;
  static constexpr uint32_t MaxOutOfLine = 0;
  static constexpr uint32_t MaxOutOfLineV1 = 0;
  static constexpr bool HasFlexibleEnvelope = false;
  static constexpr bool HasPointer = false;
  static constexpr ::fidl::internal::TransactionalMessageKind MessageKind =
      ::fidl::internal::TransactionalMessageKind::kRequest;
  using ResponseType =
      ::fidl::WireResponse<::fidl_test_protocolrequest::Parent::GetChild>;

  class UnownedEncodedMessage;
  class OwnedEncodedMessage;

 public:
  class DecodedMessage;

 private:
  void _InitHeader();
};
#ifdef __Fuchsia__

template <>
struct ::fidl::WireResponse<::fidl_test_protocolrequest::Parent::GetChild>
    final {
  FIDL_ALIGNDECL
  fidl_message_header_t _hdr;
  ::fidl::ClientEnd<::fidl_test_protocolrequest::Child> c;

  explicit WireResponse(
      ::fidl::ClientEnd<::fidl_test_protocolrequest::Child>&& c)
      : c(std::move(c)) {
    _InitHeader();
  }
  WireResponse() { _InitHeader(); }

  static constexpr const fidl_type_t* Type =
      &::fidl_test_protocolrequest::
          fidl_test_protocolrequest_ParentGetChildResponseMessageTable;
  static constexpr uint32_t MaxNumHandles = 1;
  static constexpr uint32_t PrimarySize = 24;
  static constexpr uint32_t PrimarySizeV1 = 24;
  static constexpr uint32_t MaxOutOfLine = 0;
  static constexpr uint32_t MaxOutOfLineV1 = 0;
  static constexpr bool HasFlexibleEnvelope = false;
  static constexpr bool HasPointer = false;
  static constexpr ::fidl::internal::TransactionalMessageKind MessageKind =
      ::fidl::internal::TransactionalMessageKind::kResponse;
  void _CloseHandles();

  class UnownedEncodedMessage;
  class OwnedEncodedMessage;

 public:
  class DecodedMessage;

 private:
  void _InitHeader();
};
#endif  // __Fuchsia__

template <>
struct ::fidl::WireRequest<::fidl_test_protocolrequest::Parent::GetChildRequest>
    final {
  FIDL_ALIGNDECL
  fidl_message_header_t _hdr;

  WireRequest() { _InitHeader(); }

  static constexpr const fidl_type_t* Type =
      &::fidl::_llcpp_coding_AnyZeroArgMessageTable;
  static constexpr uint32_t MaxNumHandles = 0;
  static constexpr uint32_t PrimarySize = 16;
  static constexpr uint32_t PrimarySizeV1 = 16;
  static constexpr uint32_t MaxOutOfLine = 0;
  static constexpr uint32_t MaxOutOfLineV1 = 0;
  static constexpr bool HasFlexibleEnvelope = false;
  static constexpr bool HasPointer = false;
  static constexpr ::fidl::internal::TransactionalMessageKind MessageKind =
      ::fidl::internal::TransactionalMessageKind::kRequest;
  using ResponseType = ::fidl::WireResponse<
      ::fidl_test_protocolrequest::Parent::GetChildRequest>;

  class UnownedEncodedMessage;
  class OwnedEncodedMessage;

 public:
  class DecodedMessage;

 private:
  void _InitHeader();
};
#ifdef __Fuchsia__

template <>
struct ::fidl::WireResponse<
    ::fidl_test_protocolrequest::Parent::GetChildRequest>
    final {
  FIDL_ALIGNDECL
  fidl_message_header_t _hdr;
  ::fidl::ServerEnd<::fidl_test_protocolrequest::Child> r;

  explicit WireResponse(
      ::fidl::ServerEnd<::fidl_test_protocolrequest::Child>&& r)
      : r(std::move(r)) {
    _InitHeader();
  }
  WireResponse() { _InitHeader(); }

  static constexpr const fidl_type_t* Type =
      &::fidl_test_protocolrequest::
          fidl_test_protocolrequest_ParentGetChildRequestResponseMessageTable;
  static constexpr uint32_t MaxNumHandles = 1;
  static constexpr uint32_t PrimarySize = 24;
  static constexpr uint32_t PrimarySizeV1 = 24;
  static constexpr uint32_t MaxOutOfLine = 0;
  static constexpr uint32_t MaxOutOfLineV1 = 0;
  static constexpr bool HasFlexibleEnvelope = false;
  static constexpr bool HasPointer = false;
  static constexpr ::fidl::internal::TransactionalMessageKind MessageKind =
      ::fidl::internal::TransactionalMessageKind::kResponse;
  void _CloseHandles();

  class UnownedEncodedMessage;
  class OwnedEncodedMessage;

 public:
  class DecodedMessage;

 private:
  void _InitHeader();
};
#endif  // __Fuchsia__

#ifdef __Fuchsia__

template <>
struct ::fidl::WireRequest<::fidl_test_protocolrequest::Parent::TakeChild>
    final {
  FIDL_ALIGNDECL
  fidl_message_header_t _hdr;
  ::fidl::ClientEnd<::fidl_test_protocolrequest::Child> c;

  explicit WireRequest(
      ::fidl::ClientEnd<::fidl_test_protocolrequest::Child>&& c)
      : c(std::move(c)) {
    _InitHeader();
  }
  WireRequest() { _InitHeader(); }

  static constexpr const fidl_type_t* Type =
      &::fidl_test_protocolrequest::
          fidl_test_protocolrequest_ParentTakeChildRequestMessageTable;
  static constexpr uint32_t MaxNumHandles = 1;
  static constexpr uint32_t PrimarySize = 24;
  static constexpr uint32_t PrimarySizeV1 = 24;
  static constexpr uint32_t MaxOutOfLine = 0;
  static constexpr uint32_t MaxOutOfLineV1 = 0;
  static constexpr bool HasFlexibleEnvelope = false;
  static constexpr bool HasPointer = false;
  static constexpr ::fidl::internal::TransactionalMessageKind MessageKind =
      ::fidl::internal::TransactionalMessageKind::kRequest;
  void _CloseHandles();

  class UnownedEncodedMessage;
  class OwnedEncodedMessage;

 public:
  class DecodedMessage;

 private:
  void _InitHeader();
};
#endif  // __Fuchsia__

#ifdef __Fuchsia__

template <>
struct ::fidl::WireRequest<
    ::fidl_test_protocolrequest::Parent::TakeChildRequest>
    final {
  FIDL_ALIGNDECL
  fidl_message_header_t _hdr;
  ::fidl::ServerEnd<::fidl_test_protocolrequest::Child> r;

  explicit WireRequest(
      ::fidl::ServerEnd<::fidl_test_protocolrequest::Child>&& r)
      : r(std::move(r)) {
    _InitHeader();
  }
  WireRequest() { _InitHeader(); }

  static constexpr const fidl_type_t* Type =
      &::fidl_test_protocolrequest::
          fidl_test_protocolrequest_ParentTakeChildRequestRequestMessageTable;
  static constexpr uint32_t MaxNumHandles = 1;
  static constexpr uint32_t PrimarySize = 24;
  static constexpr uint32_t PrimarySizeV1 = 24;
  static constexpr uint32_t MaxOutOfLine = 0;
  static constexpr uint32_t MaxOutOfLineV1 = 0;
  static constexpr bool HasFlexibleEnvelope = false;
  static constexpr bool HasPointer = false;
  static constexpr ::fidl::internal::TransactionalMessageKind MessageKind =
      ::fidl::internal::TransactionalMessageKind::kRequest;
  void _CloseHandles();

  class UnownedEncodedMessage;
  class OwnedEncodedMessage;

 public:
  class DecodedMessage;

 private:
  void _InitHeader();
};
#endif  // __Fuchsia__

#ifdef __Fuchsia__

template <>
class ::fidl::WireResult<::fidl_test_protocolrequest::Parent::GetChild> final
    : public ::fidl::Result {
 public:
  WireResult(
      ::fidl::UnownedClientEnd<::fidl_test_protocolrequest::Parent> client,
      ::fidl::WireRequest<::fidl_test_protocolrequest::Parent::GetChild>*
          request);
  WireResult(
      ::fidl::UnownedClientEnd<::fidl_test_protocolrequest::Parent> client,
      ::fidl::WireRequest<::fidl_test_protocolrequest::Parent::GetChild>*
          request,
      zx_time_t _deadline);
  explicit WireResult(const ::fidl::Result& result) : ::fidl::Result(result) {}
  WireResult(WireResult&&) = delete;
  WireResult(const WireResult&) = delete;
  WireResult* operator=(WireResult&&) = delete;
  WireResult* operator=(const WireResult&) = delete;
  ~WireResult() {
    if (ok()) {
      Unwrap()->_CloseHandles();
    }
  }

  ::fidl::WireResponse<::fidl_test_protocolrequest::Parent::GetChild>*
  Unwrap() {
    ZX_DEBUG_ASSERT(ok());
    return reinterpret_cast<
        ::fidl::WireResponse<::fidl_test_protocolrequest::Parent::GetChild>*>(
        bytes_.data());
  }
  const ::fidl::WireResponse<::fidl_test_protocolrequest::Parent::GetChild>*
  Unwrap() const {
    ZX_DEBUG_ASSERT(ok());
    return reinterpret_cast<const ::fidl::WireResponse<
        ::fidl_test_protocolrequest::Parent::GetChild>*>(bytes_.data());
  }

  ::fidl::WireResponse<::fidl_test_protocolrequest::Parent::GetChild>& value() {
    return *Unwrap();
  }
  const ::fidl::WireResponse<::fidl_test_protocolrequest::Parent::GetChild>&
  value() const {
    return *Unwrap();
  }

  ::fidl::WireResponse<::fidl_test_protocolrequest::Parent::GetChild>*
  operator->() {
    return &value();
  }
  const ::fidl::WireResponse<::fidl_test_protocolrequest::Parent::GetChild>*
  operator->() const {
    return &value();
  }

  ::fidl::WireResponse<::fidl_test_protocolrequest::Parent::GetChild>&
  operator*() {
    return value();
  }
  const ::fidl::WireResponse<::fidl_test_protocolrequest::Parent::GetChild>&
  operator*() const {
    return value();
  }

 private:
  ::fidl::internal::InlineMessageBuffer<24> bytes_;
};
template <>
class ::fidl::WireUnownedResult<::fidl_test_protocolrequest::Parent::GetChild>
    final : public ::fidl::Result {
 public:
  explicit WireUnownedResult(
      ::fidl::UnownedClientEnd<::fidl_test_protocolrequest::Parent> client_end,
      ::fidl::internal::AnyBufferAllocator& allocator,
      ::fidl::WireRequest<::fidl_test_protocolrequest::Parent::GetChild>*
          request);
  explicit WireUnownedResult(
      ::fidl::WireResponse<::fidl_test_protocolrequest::Parent::GetChild>*
          response)
      : bytes_(reinterpret_cast<uint8_t*>(response)) {}
  explicit WireUnownedResult(const ::fidl::Result& result)
      : ::fidl::Result(result) {}
  explicit WireUnownedResult(
      ::fidl::DecodedMessage<
          ::fidl::WireResponse<::fidl_test_protocolrequest::Parent::GetChild>>&&
          decoded)
      : ::fidl::Result(decoded) {
    if (decoded.ok()) {
      bytes_ = reinterpret_cast<uint8_t*>(decoded.PrimaryObject());
    } else {
      bytes_ = nullptr;
    }
    decoded.ReleasePrimaryObject();
  }
  WireUnownedResult(WireUnownedResult&&) = delete;
  WireUnownedResult(const WireUnownedResult&) = delete;
  WireUnownedResult* operator=(WireUnownedResult&&) = delete;
  WireUnownedResult* operator=(const WireUnownedResult&) = delete;
  ~WireUnownedResult() {
    if (ok()) {
      Unwrap()->_CloseHandles();
    }
  }

  ::fidl::WireResponse<::fidl_test_protocolrequest::Parent::GetChild>*
  Unwrap() {
    ZX_DEBUG_ASSERT(ok());
    return reinterpret_cast<
        ::fidl::WireResponse<::fidl_test_protocolrequest::Parent::GetChild>*>(
        bytes_);
  }
  const ::fidl::WireResponse<::fidl_test_protocolrequest::Parent::GetChild>*
  Unwrap() const {
    ZX_DEBUG_ASSERT(ok());
    return reinterpret_cast<const ::fidl::WireResponse<
        ::fidl_test_protocolrequest::Parent::GetChild>*>(bytes_);
  }

  ::fidl::WireResponse<::fidl_test_protocolrequest::Parent::GetChild>& value() {
    return *Unwrap();
  }
  const ::fidl::WireResponse<::fidl_test_protocolrequest::Parent::GetChild>&
  value() const {
    return *Unwrap();
  }

  ::fidl::WireResponse<::fidl_test_protocolrequest::Parent::GetChild>*
  operator->() {
    return &value();
  }
  const ::fidl::WireResponse<::fidl_test_protocolrequest::Parent::GetChild>*
  operator->() const {
    return &value();
  }

  ::fidl::WireResponse<::fidl_test_protocolrequest::Parent::GetChild>&
  operator*() {
    return value();
  }
  const ::fidl::WireResponse<::fidl_test_protocolrequest::Parent::GetChild>&
  operator*() const {
    return value();
  }

 private:
  uint8_t* bytes_;
};
template <>
class ::fidl::WireResult<::fidl_test_protocolrequest::Parent::GetChildRequest>
    final : public ::fidl::Result {
 public:
  WireResult(
      ::fidl::UnownedClientEnd<::fidl_test_protocolrequest::Parent> client,
      ::fidl::WireRequest<::fidl_test_protocolrequest::Parent::GetChildRequest>*
          request);
  WireResult(
      ::fidl::UnownedClientEnd<::fidl_test_protocolrequest::Parent> client,
      ::fidl::WireRequest<::fidl_test_protocolrequest::Parent::GetChildRequest>*
          request,
      zx_time_t _deadline);
  explicit WireResult(const ::fidl::Result& result) : ::fidl::Result(result) {}
  WireResult(WireResult&&) = delete;
  WireResult(const WireResult&) = delete;
  WireResult* operator=(WireResult&&) = delete;
  WireResult* operator=(const WireResult&) = delete;
  ~WireResult() {
    if (ok()) {
      Unwrap()->_CloseHandles();
    }
  }

  ::fidl::WireResponse<::fidl_test_protocolrequest::Parent::GetChildRequest>*
  Unwrap() {
    ZX_DEBUG_ASSERT(ok());
    return reinterpret_cast<::fidl::WireResponse<
        ::fidl_test_protocolrequest::Parent::GetChildRequest>*>(bytes_.data());
  }
  const ::fidl::WireResponse<
      ::fidl_test_protocolrequest::Parent::GetChildRequest>*
  Unwrap() const {
    ZX_DEBUG_ASSERT(ok());
    return reinterpret_cast<const ::fidl::WireResponse<
        ::fidl_test_protocolrequest::Parent::GetChildRequest>*>(bytes_.data());
  }

  ::fidl::WireResponse<::fidl_test_protocolrequest::Parent::GetChildRequest>&
  value() {
    return *Unwrap();
  }
  const ::fidl::WireResponse<
      ::fidl_test_protocolrequest::Parent::GetChildRequest>&
  value() const {
    return *Unwrap();
  }

  ::fidl::WireResponse<::fidl_test_protocolrequest::Parent::GetChildRequest>*
  operator->() {
    return &value();
  }
  const ::fidl::WireResponse<
      ::fidl_test_protocolrequest::Parent::GetChildRequest>*
  operator->() const {
    return &value();
  }

  ::fidl::WireResponse<::fidl_test_protocolrequest::Parent::GetChildRequest>&
  operator*() {
    return value();
  }
  const ::fidl::WireResponse<
      ::fidl_test_protocolrequest::Parent::GetChildRequest>&
  operator*() const {
    return value();
  }

 private:
  ::fidl::internal::InlineMessageBuffer<24> bytes_;
};
template <>
class ::fidl::WireUnownedResult<
    ::fidl_test_protocolrequest::Parent::GetChildRequest>
    final : public ::fidl::Result {
 public:
  explicit WireUnownedResult(
      ::fidl::UnownedClientEnd<::fidl_test_protocolrequest::Parent> client_end,
      ::fidl::internal::AnyBufferAllocator& allocator,
      ::fidl::WireRequest<::fidl_test_protocolrequest::Parent::GetChildRequest>*
          request);
  explicit WireUnownedResult(
      ::fidl::WireResponse<
          ::fidl_test_protocolrequest::Parent::GetChildRequest>* response)
      : bytes_(reinterpret_cast<uint8_t*>(response)) {}
  explicit WireUnownedResult(const ::fidl::Result& result)
      : ::fidl::Result(result) {}
  explicit WireUnownedResult(
      ::fidl::DecodedMessage<::fidl::WireResponse<
          ::fidl_test_protocolrequest::Parent::GetChildRequest>>&& decoded)
      : ::fidl::Result(decoded) {
    if (decoded.ok()) {
      bytes_ = reinterpret_cast<uint8_t*>(decoded.PrimaryObject());
    } else {
      bytes_ = nullptr;
    }
    decoded.ReleasePrimaryObject();
  }
  WireUnownedResult(WireUnownedResult&&) = delete;
  WireUnownedResult(const WireUnownedResult&) = delete;
  WireUnownedResult* operator=(WireUnownedResult&&) = delete;
  WireUnownedResult* operator=(const WireUnownedResult&) = delete;
  ~WireUnownedResult() {
    if (ok()) {
      Unwrap()->_CloseHandles();
    }
  }

  ::fidl::WireResponse<::fidl_test_protocolrequest::Parent::GetChildRequest>*
  Unwrap() {
    ZX_DEBUG_ASSERT(ok());
    return reinterpret_cast<::fidl::WireResponse<
        ::fidl_test_protocolrequest::Parent::GetChildRequest>*>(bytes_);
  }
  const ::fidl::WireResponse<
      ::fidl_test_protocolrequest::Parent::GetChildRequest>*
  Unwrap() const {
    ZX_DEBUG_ASSERT(ok());
    return reinterpret_cast<const ::fidl::WireResponse<
        ::fidl_test_protocolrequest::Parent::GetChildRequest>*>(bytes_);
  }

  ::fidl::WireResponse<::fidl_test_protocolrequest::Parent::GetChildRequest>&
  value() {
    return *Unwrap();
  }
  const ::fidl::WireResponse<
      ::fidl_test_protocolrequest::Parent::GetChildRequest>&
  value() const {
    return *Unwrap();
  }

  ::fidl::WireResponse<::fidl_test_protocolrequest::Parent::GetChildRequest>*
  operator->() {
    return &value();
  }
  const ::fidl::WireResponse<
      ::fidl_test_protocolrequest::Parent::GetChildRequest>*
  operator->() const {
    return &value();
  }

  ::fidl::WireResponse<::fidl_test_protocolrequest::Parent::GetChildRequest>&
  operator*() {
    return value();
  }
  const ::fidl::WireResponse<
      ::fidl_test_protocolrequest::Parent::GetChildRequest>&
  operator*() const {
    return value();
  }

 private:
  uint8_t* bytes_;
};
template <>
class ::fidl::WireResult<::fidl_test_protocolrequest::Parent::TakeChild> final
    : public ::fidl::Result {
 public:
  WireResult(
      ::fidl::UnownedClientEnd<::fidl_test_protocolrequest::Parent> client,
      ::fidl::WireRequest<::fidl_test_protocolrequest::Parent::TakeChild>*
          request);
  explicit WireResult(const ::fidl::Result& result) : ::fidl::Result(result) {}
  WireResult(WireResult&&) = delete;
  WireResult(const WireResult&) = delete;
  WireResult* operator=(WireResult&&) = delete;
  WireResult* operator=(const WireResult&) = delete;
  ~WireResult() = default;

 private:
};
template <>
class ::fidl::WireUnownedResult<::fidl_test_protocolrequest::Parent::TakeChild>
    final : public ::fidl::Result {
 public:
  explicit WireUnownedResult(
      ::fidl::UnownedClientEnd<::fidl_test_protocolrequest::Parent> client_end,
      ::fidl::internal::AnyBufferAllocator& allocator,
      ::fidl::WireRequest<::fidl_test_protocolrequest::Parent::TakeChild>*
          request);
  explicit WireUnownedResult(const ::fidl::Result& result)
      : ::fidl::Result(result) {}
  WireUnownedResult(WireUnownedResult&&) = delete;
  WireUnownedResult(const WireUnownedResult&) = delete;
  WireUnownedResult* operator=(WireUnownedResult&&) = delete;
  WireUnownedResult* operator=(const WireUnownedResult&) = delete;
  ~WireUnownedResult() = default;
};
template <>
class ::fidl::WireResult<::fidl_test_protocolrequest::Parent::TakeChildRequest>
    final : public ::fidl::Result {
 public:
  WireResult(
      ::fidl::UnownedClientEnd<::fidl_test_protocolrequest::Parent> client,
      ::fidl::WireRequest<
          ::fidl_test_protocolrequest::Parent::TakeChildRequest>* request);
  explicit WireResult(const ::fidl::Result& result) : ::fidl::Result(result) {}
  WireResult(WireResult&&) = delete;
  WireResult(const WireResult&) = delete;
  WireResult* operator=(WireResult&&) = delete;
  WireResult* operator=(const WireResult&) = delete;
  ~WireResult() = default;

 private:
};
template <>
class ::fidl::WireUnownedResult<
    ::fidl_test_protocolrequest::Parent::TakeChildRequest>
    final : public ::fidl::Result {
 public:
  explicit WireUnownedResult(
      ::fidl::UnownedClientEnd<::fidl_test_protocolrequest::Parent> client_end,
      ::fidl::internal::AnyBufferAllocator& allocator,
      ::fidl::WireRequest<
          ::fidl_test_protocolrequest::Parent::TakeChildRequest>* request);
  explicit WireUnownedResult(const ::fidl::Result& result)
      : ::fidl::Result(result) {}
  WireUnownedResult(WireUnownedResult&&) = delete;
  WireUnownedResult(const WireUnownedResult&) = delete;
  WireUnownedResult* operator=(WireUnownedResult&&) = delete;
  WireUnownedResult* operator=(const WireUnownedResult&) = delete;
  ~WireUnownedResult() = default;
};

// Methods to make a sync FIDL call directly on an unowned channel or a
// const reference to a |fidl::ClientEnd<::fidl_test_protocolrequest::Parent>|,
// avoiding setting up a client.
template <>
class ::fidl::internal::WireSyncClientImpl<::fidl_test_protocolrequest::Parent>
    final : public ::fidl::internal::SyncEndpointManagedVeneer<
                ::fidl::internal::WireSyncClientImpl<
                    ::fidl_test_protocolrequest::Parent>> {
 public:
  // Allocates 40 bytes of message buffer on the stack. No heap allocation
  // necessary.
  ::fidl::WireResult<::fidl_test_protocolrequest::Parent::GetChild> GetChild() {
    ::fidl::WireRequest<::fidl_test_protocolrequest::Parent::GetChild>
        _request{};
    return ::fidl::WireResult<::fidl_test_protocolrequest::Parent::GetChild>(
        _client_end(), &_request);
  }

  // Allocates 40 bytes of message buffer on the stack. No heap allocation
  // necessary.
  ::fidl::WireResult<::fidl_test_protocolrequest::Parent::GetChildRequest>
  GetChildRequest() {
    ::fidl::WireRequest<::fidl_test_protocolrequest::Parent::GetChildRequest>
        _request{};
    return ::fidl::WireResult<
        ::fidl_test_protocolrequest::Parent::GetChildRequest>(_client_end(),
                                                              &_request);
  }

  // Allocates 24 bytes of message buffer on the stack. No heap allocation
  // necessary.
  ::fidl::WireResult<::fidl_test_protocolrequest::Parent::TakeChild> TakeChild(
      ::fidl::ClientEnd<::fidl_test_protocolrequest::Child>&& c) {
    ::fidl::WireRequest<::fidl_test_protocolrequest::Parent::TakeChild>
        _request{std::move(c)};
    return ::fidl::WireResult<::fidl_test_protocolrequest::Parent::TakeChild>(
        _client_end(), &_request);
  }

  // Allocates 24 bytes of message buffer on the stack. No heap allocation
  // necessary.
  ::fidl::WireResult<::fidl_test_protocolrequest::Parent::TakeChildRequest>
  TakeChildRequest(::fidl::ServerEnd<::fidl_test_protocolrequest::Child>&& r) {
    ::fidl::WireRequest<::fidl_test_protocolrequest::Parent::TakeChildRequest>
        _request{std::move(r)};
    return ::fidl::WireResult<
        ::fidl_test_protocolrequest::Parent::TakeChildRequest>(_client_end(),
                                                               &_request);
  }

 private:
  ::fidl::UnownedClientEnd<::fidl_test_protocolrequest::Parent> _client_end()
      const {
    return ::fidl::UnownedClientEnd<::fidl_test_protocolrequest::Parent>(
        _channel());
  }
};

template <>
class ::fidl::internal::WireSyncBufferClientImpl<
    ::fidl_test_protocolrequest::Parent>
    final : public ::fidl::internal::SyncEndpointBufferVeneer<
                ::fidl::internal::WireSyncBufferClientImpl<
                    ::fidl_test_protocolrequest::Parent>> {
 public:
  // Caller provides the backing storage for FIDL message via an argument to
  // `.buffer()`.
  ::fidl::WireUnownedResult<::fidl_test_protocolrequest::Parent::GetChild>
  GetChild() {
    ::fidl::WireRequest<::fidl_test_protocolrequest::Parent::GetChild>
        _request{};
    return ::fidl::WireUnownedResult<
        ::fidl_test_protocolrequest::Parent::GetChild>(_client_end(),
                                                       _allocator(), &_request);
  }

  // Caller provides the backing storage for FIDL message via an argument to
  // `.buffer()`.
  ::fidl::WireUnownedResult<
      ::fidl_test_protocolrequest::Parent::GetChildRequest>
  GetChildRequest() {
    ::fidl::WireRequest<::fidl_test_protocolrequest::Parent::GetChildRequest>
        _request{};
    return ::fidl::WireUnownedResult<
        ::fidl_test_protocolrequest::Parent::GetChildRequest>(
        _client_end(), _allocator(), &_request);
  }

  // Caller provides the backing storage for FIDL message via an argument to
  // `.buffer()`.
  ::fidl::WireUnownedResult<::fidl_test_protocolrequest::Parent::TakeChild>
  TakeChild(::fidl::ClientEnd<::fidl_test_protocolrequest::Child>&& c) {
    ::fidl::WireRequest<::fidl_test_protocolrequest::Parent::TakeChild>
        _request{std::move(c)};
    return ::fidl::WireUnownedResult<
        ::fidl_test_protocolrequest::Parent::TakeChild>(
        _client_end(), _allocator(), &_request);
  }

  // Caller provides the backing storage for FIDL message via an argument to
  // `.buffer()`.
  ::fidl::WireUnownedResult<
      ::fidl_test_protocolrequest::Parent::TakeChildRequest>
  TakeChildRequest(::fidl::ServerEnd<::fidl_test_protocolrequest::Child>&& r) {
    ::fidl::WireRequest<::fidl_test_protocolrequest::Parent::TakeChildRequest>
        _request{std::move(r)};
    return ::fidl::WireUnownedResult<
        ::fidl_test_protocolrequest::Parent::TakeChildRequest>(
        _client_end(), _allocator(), &_request);
  }

 private:
  ::fidl::UnownedClientEnd<::fidl_test_protocolrequest::Parent> _client_end()
      const {
    return ::fidl::UnownedClientEnd<::fidl_test_protocolrequest::Parent>(
        _channel());
  }
};
template <>
class ::fidl::internal::WireEventHandlerInterface<
    ::fidl_test_protocolrequest::Parent> {
 public:
  WireEventHandlerInterface() = default;
  virtual ~WireEventHandlerInterface() = default;
};

template <>
class ::fidl::WireAsyncEventHandler<::fidl_test_protocolrequest::Parent>
    : public ::fidl::internal::WireEventHandlerInterface<
          ::fidl_test_protocolrequest::Parent>,
      public ::fidl::internal::AsyncEventHandler {
 public:
  WireAsyncEventHandler() = default;
};

template <>
class ::fidl::WireSyncEventHandler<::fidl_test_protocolrequest::Parent>
    : public ::fidl::internal::WireEventHandlerInterface<
          ::fidl_test_protocolrequest::Parent> {
 public:
  WireSyncEventHandler() = default;

  // Method called when an unknown event is found. This methods gives the status
  // which, in this case, is returned by HandleOneEvent.
  virtual zx_status_t Unknown() = 0;

  // Handle all possible events defined in this protocol.
  // Blocks to consume exactly one message from the channel, then call the
  // corresponding virtual method.
  ::fidl::Result HandleOneEvent(
      ::fidl::UnownedClientEnd<::fidl_test_protocolrequest::Parent> client_end);
};
template <>
class ::fidl::WireSyncClient<::fidl_test_protocolrequest::Parent> final
    : public ::fidl::internal::WireSyncClientBase<
          ::fidl_test_protocolrequest::Parent> {
 public:
  using ::fidl::internal::WireSyncClientBase<
      ::fidl_test_protocolrequest::Parent>::WireSyncClientBase;
};

template <>
class ::fidl::internal::WireCompleterBase<
    ::fidl_test_protocolrequest::Parent::GetChild>
    : public ::fidl::CompleterBase {
 public:
  // In the following methods, the return value indicates internal errors during
  // the reply, such as encoding or writing to the transport.
  // Note that any error will automatically lead to the destruction of the
  // binding, after which the |on_unbound| callback will be triggered with a
  // detailed reason.
  //
  // See //zircon/system/ulib/fidl/include/lib/fidl/llcpp/server.h.
  //
  // Because the reply status is identical to the unbinding status, it can be
  // safely ignored.
  ::fidl::Result Reply(
      ::fidl::ClientEnd<::fidl_test_protocolrequest::Child>&& c);
  ::fidl::Result Reply(
      ::fidl::BufferSpan _buffer,
      ::fidl::ClientEnd<::fidl_test_protocolrequest::Child>&& c);

 protected:
  using ::fidl::CompleterBase::CompleterBase;
};

template <>
struct ::fidl::internal::WireMethodTypes<
    ::fidl_test_protocolrequest::Parent::GetChild> {
  using Completer = fidl::Completer<::fidl::internal::WireCompleterBase<
      ::fidl_test_protocolrequest::Parent::GetChild>>;
};

template <>
class ::fidl::internal::WireCompleterBase<
    ::fidl_test_protocolrequest::Parent::GetChildRequest>
    : public ::fidl::CompleterBase {
 public:
  // In the following methods, the return value indicates internal errors during
  // the reply, such as encoding or writing to the transport.
  // Note that any error will automatically lead to the destruction of the
  // binding, after which the |on_unbound| callback will be triggered with a
  // detailed reason.
  //
  // See //zircon/system/ulib/fidl/include/lib/fidl/llcpp/server.h.
  //
  // Because the reply status is identical to the unbinding status, it can be
  // safely ignored.
  ::fidl::Result Reply(
      ::fidl::ServerEnd<::fidl_test_protocolrequest::Child>&& r);
  ::fidl::Result Reply(
      ::fidl::BufferSpan _buffer,
      ::fidl::ServerEnd<::fidl_test_protocolrequest::Child>&& r);

 protected:
  using ::fidl::CompleterBase::CompleterBase;
};

template <>
struct ::fidl::internal::WireMethodTypes<
    ::fidl_test_protocolrequest::Parent::GetChildRequest> {
  using Completer = fidl::Completer<::fidl::internal::WireCompleterBase<
      ::fidl_test_protocolrequest::Parent::GetChildRequest>>;
};

// Pure-virtual interface to be implemented by a server.
// This interface uses typed channels (i.e. |fidl::ClientEnd<SomeProtocol>|
// and |fidl::ServerEnd<SomeProtocol>|).
template <>
class ::fidl::WireServer<::fidl_test_protocolrequest::Parent>
    : public ::fidl::internal::IncomingMessageDispatcher {
 public:
  WireServer() = default;
  virtual ~WireServer() = default;

  // The FIDL protocol type that is implemented by this server.
  using _EnclosingProtocol = ::fidl_test_protocolrequest::Parent;

  using GetChildCompleter = ::fidl::internal::WireCompleter<
      ::fidl_test_protocolrequest::Parent::GetChild>;
  using GetChildRequestView = ::fidl::internal::WireRequestView<
      ::fidl_test_protocolrequest::Parent::GetChild>;

  virtual void GetChild(GetChildRequestView request,
                        GetChildCompleter::Sync& _completer) = 0;

  using GetChildRequestCompleter = ::fidl::internal::WireCompleter<
      ::fidl_test_protocolrequest::Parent::GetChildRequest>;
  using GetChildRequestRequestView = ::fidl::internal::WireRequestView<
      ::fidl_test_protocolrequest::Parent::GetChildRequest>;

  virtual void GetChildRequest(GetChildRequestRequestView request,
                               GetChildRequestCompleter::Sync& _completer) = 0;

  using TakeChildCompleter = ::fidl::internal::WireCompleter<
      ::fidl_test_protocolrequest::Parent::TakeChild>;
  using TakeChildRequestView = ::fidl::internal::WireRequestView<
      ::fidl_test_protocolrequest::Parent::TakeChild>;

  virtual void TakeChild(TakeChildRequestView request,
                         TakeChildCompleter::Sync& _completer) = 0;

  using TakeChildRequestCompleter = ::fidl::internal::WireCompleter<
      ::fidl_test_protocolrequest::Parent::TakeChildRequest>;
  using TakeChildRequestRequestView = ::fidl::internal::WireRequestView<
      ::fidl_test_protocolrequest::Parent::TakeChildRequest>;

  virtual void TakeChildRequest(
      TakeChildRequestRequestView request,
      TakeChildRequestCompleter::Sync& _completer) = 0;

 private:
  void dispatch_message(
      ::fidl::IncomingMessage&& msg, ::fidl::Transaction* txn,
      const internal::IncomingTransportContext* transport_context) final;
};
#endif  // __Fuchsia__

namespace fidl_test_protocolrequest {}  // namespace fidl_test_protocolrequest
#ifdef __Fuchsia__

template <>
struct ::fidl::internal::ProtocolDetails<::fidl_test_protocolrequest::Child> {};
#endif  // __Fuchsia__

#ifdef __Fuchsia__

template <>
struct ::fidl::internal::WireServerDispatcher<
    ::fidl_test_protocolrequest::Child>
    final {
  WireServerDispatcher() = delete;
  static ::fidl::DispatchResult TryDispatch(
      ::fidl::WireServer<::fidl_test_protocolrequest::Child>* impl,
      ::fidl::IncomingMessage& msg, ::fidl::Transaction* txn);
  static void Dispatch(
      ::fidl::WireServer<::fidl_test_protocolrequest::Child>* impl,
      ::fidl::IncomingMessage&& msg, ::fidl::Transaction* txn);

 private:
  static const ::fidl::internal::MethodEntry entries_[];
  static const ::fidl::internal::MethodEntry* entries_end_;
};
#endif  // __Fuchsia__

#ifdef __Fuchsia__

// Methods to make a sync FIDL call directly on an unowned channel or a
// const reference to a |fidl::ClientEnd<::fidl_test_protocolrequest::Child>|,
// avoiding setting up a client.
template <>
class ::fidl::internal::WireSyncClientImpl<::fidl_test_protocolrequest::Child>
    final : public ::fidl::internal::SyncEndpointManagedVeneer<
                ::fidl::internal::WireSyncClientImpl<
                    ::fidl_test_protocolrequest::Child>> {
 public:
 private:
  ::fidl::UnownedClientEnd<::fidl_test_protocolrequest::Child> _client_end()
      const {
    return ::fidl::UnownedClientEnd<::fidl_test_protocolrequest::Child>(
        _channel());
  }
};

template <>
class ::fidl::internal::WireSyncBufferClientImpl<
    ::fidl_test_protocolrequest::Child>
    final : public ::fidl::internal::SyncEndpointBufferVeneer<
                ::fidl::internal::WireSyncBufferClientImpl<
                    ::fidl_test_protocolrequest::Child>> {
 public:
 private:
  ::fidl::UnownedClientEnd<::fidl_test_protocolrequest::Child> _client_end()
      const {
    return ::fidl::UnownedClientEnd<::fidl_test_protocolrequest::Child>(
        _channel());
  }
};
template <>
class ::fidl::internal::WireEventHandlerInterface<
    ::fidl_test_protocolrequest::Child> {
 public:
  WireEventHandlerInterface() = default;
  virtual ~WireEventHandlerInterface() = default;
};

template <>
class ::fidl::WireAsyncEventHandler<::fidl_test_protocolrequest::Child>
    : public ::fidl::internal::WireEventHandlerInterface<
          ::fidl_test_protocolrequest::Child>,
      public ::fidl::internal::AsyncEventHandler {
 public:
  WireAsyncEventHandler() = default;
};

template <>
class ::fidl::WireSyncEventHandler<::fidl_test_protocolrequest::Child>
    : public ::fidl::internal::WireEventHandlerInterface<
          ::fidl_test_protocolrequest::Child> {
 public:
  WireSyncEventHandler() = default;

  // Method called when an unknown event is found. This methods gives the status
  // which, in this case, is returned by HandleOneEvent.
  virtual zx_status_t Unknown() = 0;

  // Handle all possible events defined in this protocol.
  // Blocks to consume exactly one message from the channel, then call the
  // corresponding virtual method.
  ::fidl::Result HandleOneEvent(
      ::fidl::UnownedClientEnd<::fidl_test_protocolrequest::Child> client_end);
};
template <>
class ::fidl::WireSyncClient<::fidl_test_protocolrequest::Child> final
    : public ::fidl::internal::WireSyncClientBase<
          ::fidl_test_protocolrequest::Child> {
 public:
  using ::fidl::internal::WireSyncClientBase<
      ::fidl_test_protocolrequest::Child>::WireSyncClientBase;
};

// Pure-virtual interface to be implemented by a server.
// This interface uses typed channels (i.e. |fidl::ClientEnd<SomeProtocol>|
// and |fidl::ServerEnd<SomeProtocol>|).
template <>
class ::fidl::WireServer<::fidl_test_protocolrequest::Child>
    : public ::fidl::internal::IncomingMessageDispatcher {
 public:
  WireServer() = default;
  virtual ~WireServer() = default;

  // The FIDL protocol type that is implemented by this server.
  using _EnclosingProtocol = ::fidl_test_protocolrequest::Child;

 private:
  void dispatch_message(
      ::fidl::IncomingMessage&& msg, ::fidl::Transaction* txn,
      const internal::IncomingTransportContext* transport_context) final;
};
#endif  // __Fuchsia__

namespace fidl {

template <>
struct IsFidlType<
    ::fidl::WireRequest<::fidl_test_protocolrequest::Parent::GetChild>>
    : public std::true_type {};
template <>
struct IsFidlMessage<
    ::fidl::WireRequest<::fidl_test_protocolrequest::Parent::GetChild>>
    : public std::true_type {};
static_assert(
    sizeof(
        ::fidl::WireRequest<::fidl_test_protocolrequest::Parent::GetChild>) ==
    ::fidl::WireRequest<
        ::fidl_test_protocolrequest::Parent::GetChild>::PrimarySize);

template <>
struct IsFidlType<
    ::fidl::WireResponse<::fidl_test_protocolrequest::Parent::GetChild>>
    : public std::true_type {};
template <>
struct IsFidlMessage<
    ::fidl::WireResponse<::fidl_test_protocolrequest::Parent::GetChild>>
    : public std::true_type {};
#ifdef __Fuchsia__
template <>
struct IsResource<
    ::fidl::WireResponse<::fidl_test_protocolrequest::Parent::GetChild>>
    : public std::true_type {};
static_assert(
    sizeof(
        ::fidl::WireResponse<::fidl_test_protocolrequest::Parent::GetChild>) ==
    ::fidl::WireResponse<
        ::fidl_test_protocolrequest::Parent::GetChild>::PrimarySize);
static_assert(
    offsetof(
        ::fidl::WireResponse<::fidl_test_protocolrequest::Parent::GetChild>,
        c) == 16);
#endif  // __Fuchsia__

template <>
struct IsFidlType<
    ::fidl::WireRequest<::fidl_test_protocolrequest::Parent::GetChildRequest>>
    : public std::true_type {};
template <>
struct IsFidlMessage<
    ::fidl::WireRequest<::fidl_test_protocolrequest::Parent::GetChildRequest>>
    : public std::true_type {};
static_assert(
    sizeof(::fidl::WireRequest<
           ::fidl_test_protocolrequest::Parent::GetChildRequest>) ==
    ::fidl::WireRequest<
        ::fidl_test_protocolrequest::Parent::GetChildRequest>::PrimarySize);

template <>
struct IsFidlType<
    ::fidl::WireResponse<::fidl_test_protocolrequest::Parent::GetChildRequest>>
    : public std::true_type {};
template <>
struct IsFidlMessage<
    ::fidl::WireResponse<::fidl_test_protocolrequest::Parent::GetChildRequest>>
    : public std::true_type {};
#ifdef __Fuchsia__
template <>
struct IsResource<
    ::fidl::WireResponse<::fidl_test_protocolrequest::Parent::GetChildRequest>>
    : public std::true_type {};
static_assert(
    sizeof(::fidl::WireResponse<
           ::fidl_test_protocolrequest::Parent::GetChildRequest>) ==
    ::fidl::WireResponse<
        ::fidl_test_protocolrequest::Parent::GetChildRequest>::PrimarySize);
static_assert(
    offsetof(::fidl::WireResponse<
                 ::fidl_test_protocolrequest::Parent::GetChildRequest>,
             r) == 16);
#endif  // __Fuchsia__

template <>
struct IsFidlType<
    ::fidl::WireRequest<::fidl_test_protocolrequest::Parent::TakeChild>>
    : public std::true_type {};
template <>
struct IsFidlMessage<
    ::fidl::WireRequest<::fidl_test_protocolrequest::Parent::TakeChild>>
    : public std::true_type {};
#ifdef __Fuchsia__
template <>
struct IsResource<
    ::fidl::WireRequest<::fidl_test_protocolrequest::Parent::TakeChild>>
    : public std::true_type {};
static_assert(
    sizeof(
        ::fidl::WireRequest<::fidl_test_protocolrequest::Parent::TakeChild>) ==
    ::fidl::WireRequest<
        ::fidl_test_protocolrequest::Parent::TakeChild>::PrimarySize);
static_assert(
    offsetof(
        ::fidl::WireRequest<::fidl_test_protocolrequest::Parent::TakeChild>,
        c) == 16);
#endif  // __Fuchsia__

template <>
struct IsFidlType<
    ::fidl::WireRequest<::fidl_test_protocolrequest::Parent::TakeChildRequest>>
    : public std::true_type {};
template <>
struct IsFidlMessage<
    ::fidl::WireRequest<::fidl_test_protocolrequest::Parent::TakeChildRequest>>
    : public std::true_type {};
#ifdef __Fuchsia__
template <>
struct IsResource<
    ::fidl::WireRequest<::fidl_test_protocolrequest::Parent::TakeChildRequest>>
    : public std::true_type {};
static_assert(
    sizeof(::fidl::WireRequest<
           ::fidl_test_protocolrequest::Parent::TakeChildRequest>) ==
    ::fidl::WireRequest<
        ::fidl_test_protocolrequest::Parent::TakeChildRequest>::PrimarySize);
static_assert(
    offsetof(::fidl::WireRequest<
                 ::fidl_test_protocolrequest::Parent::TakeChildRequest>,
             r) == 16);
#endif  // __Fuchsia__

}  // namespace fidl
#ifdef __Fuchsia__

template <>
class ::fidl::WireResponseContext<::fidl_test_protocolrequest::Parent::GetChild>
    : public ::fidl::internal::ResponseContext {
 public:
  WireResponseContext();

  virtual void OnResult(
      ::fidl::WireUnownedResult<::fidl_test_protocolrequest::Parent::GetChild>&
          result) = 0;

 private:
  ::cpp17::optional<::fidl::UnbindInfo> OnRawResult(
      ::fidl::IncomingMessage&& msg,
      const internal::IncomingTransportContext* transport_context) override;
};
#endif  // __Fuchsia__

#ifdef __Fuchsia__

template <>
class ::fidl::WireResponseContext<
    ::fidl_test_protocolrequest::Parent::GetChildRequest>
    : public ::fidl::internal::ResponseContext {
 public:
  WireResponseContext();

  virtual void OnResult(
      ::fidl::WireUnownedResult<
          ::fidl_test_protocolrequest::Parent::GetChildRequest>& result) = 0;

 private:
  ::cpp17::optional<::fidl::UnbindInfo> OnRawResult(
      ::fidl::IncomingMessage&& msg,
      const internal::IncomingTransportContext* transport_context) override;
};
#endif  // __Fuchsia__

#ifdef __Fuchsia__

template <>
class ::fidl::internal::WireClientImpl<::fidl_test_protocolrequest::Parent>
    final : public ::fidl::internal::ClientBase {
 public:
  // Asynchronous variant of |Parent.GetChild()|.
  // Allocates 16 bytes of request buffer on the stack. The callback is stored
  // on the heap.
  void GetChild(
      ::fidl::WireClientCallback<::fidl_test_protocolrequest::Parent::GetChild>
          _cb);

  void GetChild(::fit::callback<
                void(::fidl::WireResponse<
                     ::fidl_test_protocolrequest::Parent::GetChild>* response)>
                    _cb);

  // Asynchronous variant of |Parent.GetChild()|.
  // Caller provides the backing storage for FIDL message via request buffer.
  // Ownership of |_context| is given unsafely to the binding until |OnError|
  // or |OnReply| are called on it.
  void GetChild(::fidl::WireResponseContext<
                ::fidl_test_protocolrequest::Parent::GetChild>* _context);

  // Synchronous variant of |GetChild.GetChild()|.
  // Allocates 40 bytes of message buffer on the stack. No heap allocation
  // necessary.
  ::fidl::WireResult<::fidl_test_protocolrequest::Parent::GetChild>
  GetChild_Sync();

  // Synchronous variant of |GetChild.GetChild()|.
  // Caller provides the backing storage for FIDL message via request and
  // response buffers.
  ::fidl::WireUnownedResult<::fidl_test_protocolrequest::Parent::GetChild>
  GetChild_Sync(::fidl::BufferSpan _buffer_span);
  // Asynchronous variant of |Parent.GetChildRequest()|.
  // Allocates 16 bytes of request buffer on the stack. The callback is stored
  // on the heap.
  void GetChildRequest(::fidl::WireClientCallback<
                       ::fidl_test_protocolrequest::Parent::GetChildRequest>
                           _cb);

  void GetChildRequest(
      ::fit::callback<
          void(::fidl::WireResponse<
               ::fidl_test_protocolrequest::Parent::GetChildRequest>* response)>
          _cb);

  // Asynchronous variant of |Parent.GetChildRequest()|.
  // Caller provides the backing storage for FIDL message via request buffer.
  // Ownership of |_context| is given unsafely to the binding until |OnError|
  // or |OnReply| are called on it.
  void GetChildRequest(
      ::fidl::WireResponseContext<
          ::fidl_test_protocolrequest::Parent::GetChildRequest>* _context);

  // Synchronous variant of |GetChildRequest.GetChildRequest()|.
  // Allocates 40 bytes of message buffer on the stack. No heap allocation
  // necessary.
  ::fidl::WireResult<::fidl_test_protocolrequest::Parent::GetChildRequest>
  GetChildRequest_Sync();

  // Synchronous variant of |GetChildRequest.GetChildRequest()|.
  // Caller provides the backing storage for FIDL message via request and
  // response buffers.
  ::fidl::WireUnownedResult<
      ::fidl_test_protocolrequest::Parent::GetChildRequest>
  GetChildRequest_Sync(::fidl::BufferSpan _buffer_span);

  // Allocates 24 bytes of message buffer on the stack. No heap allocation
  // necessary.
  ::fidl::Result TakeChild(
      ::fidl::ClientEnd<::fidl_test_protocolrequest::Child>&& c);

  // Caller provides the backing storage for FIDL message via request buffer.
  ::fidl::Result TakeChild(
      ::fidl::BufferSpan _buffer_span,
      ::fidl::ClientEnd<::fidl_test_protocolrequest::Child>&& c);

  // Allocates 24 bytes of message buffer on the stack. No heap allocation
  // necessary.
  ::fidl::Result TakeChildRequest(
      ::fidl::ServerEnd<::fidl_test_protocolrequest::Child>&& r);

  // Caller provides the backing storage for FIDL message via request buffer.
  ::fidl::Result TakeChildRequest(
      ::fidl::BufferSpan _buffer_span,
      ::fidl::ServerEnd<::fidl_test_protocolrequest::Child>&& r);
  WireClientImpl() = default;

 private:
  std::optional<::fidl::UnbindInfo> DispatchEvent(
      ::fidl::IncomingMessage& msg,
      ::fidl::internal::AsyncEventHandler* maybe_event_handler,
      const internal::IncomingTransportContext* transport_context) override;
};
#endif  // __Fuchsia__

#ifdef __Fuchsia__
// |EventSender| owns a server endpoint of a channel speaking
// the Parent protocol, and can send events in that protocol.
template <>
class ::fidl::WireEventSender<::fidl_test_protocolrequest::Parent> {
 public:
  // Constructs an event sender with an invalid channel.
  WireEventSender() = default;

  explicit WireEventSender(
      ::fidl::ServerEnd<::fidl_test_protocolrequest::Parent> server_end)
      : server_end_(std::move(server_end)) {}

  // The underlying server channel endpoint, which may be replaced at run-time.
  const ::fidl::ServerEnd<::fidl_test_protocolrequest::Parent>& server_end()
      const {
    return server_end_;
  }
  ::fidl::ServerEnd<::fidl_test_protocolrequest::Parent>& server_end() {
    return server_end_;
  }

  const ::zx::channel& channel() const { return server_end_.channel(); }
  ::zx::channel& channel() { return server_end_.channel(); }

  // Whether the underlying channel is valid.
  bool is_valid() const { return server_end_.is_valid(); }

 private:
  ::fidl::ServerEnd<::fidl_test_protocolrequest::Parent> server_end_;
};

template <>
class ::fidl::internal::WireWeakEventSender<
    ::fidl_test_protocolrequest::Parent> {
 public:
  WireWeakEventSender(
      std::weak_ptr<::fidl::internal::AsyncServerBinding>&& binding)
      : inner_(std::move(binding)) {}

 private:
  friend ServerBindingRef<::fidl_test_protocolrequest::Parent>;

  ::fidl::internal::WeakEventSenderInner inner_;
};
#endif  // __Fuchsia__

#ifdef __Fuchsia__

template <>
class ::fidl::internal::WireClientImpl<::fidl_test_protocolrequest::Child> final
    : public ::fidl::internal::ClientBase {
 public:
  WireClientImpl() = default;

 private:
  std::optional<::fidl::UnbindInfo> DispatchEvent(
      ::fidl::IncomingMessage& msg,
      ::fidl::internal::AsyncEventHandler* maybe_event_handler,
      const internal::IncomingTransportContext* transport_context) override;
};
#endif  // __Fuchsia__

#ifdef __Fuchsia__
// |EventSender| owns a server endpoint of a channel speaking
// the Child protocol, and can send events in that protocol.
template <>
class ::fidl::WireEventSender<::fidl_test_protocolrequest::Child> {
 public:
  // Constructs an event sender with an invalid channel.
  WireEventSender() = default;

  explicit WireEventSender(
      ::fidl::ServerEnd<::fidl_test_protocolrequest::Child> server_end)
      : server_end_(std::move(server_end)) {}

  // The underlying server channel endpoint, which may be replaced at run-time.
  const ::fidl::ServerEnd<::fidl_test_protocolrequest::Child>& server_end()
      const {
    return server_end_;
  }
  ::fidl::ServerEnd<::fidl_test_protocolrequest::Child>& server_end() {
    return server_end_;
  }

  const ::zx::channel& channel() const { return server_end_.channel(); }
  ::zx::channel& channel() { return server_end_.channel(); }

  // Whether the underlying channel is valid.
  bool is_valid() const { return server_end_.is_valid(); }

 private:
  ::fidl::ServerEnd<::fidl_test_protocolrequest::Child> server_end_;
};

template <>
class ::fidl::internal::WireWeakEventSender<
    ::fidl_test_protocolrequest::Child> {
 public:
  WireWeakEventSender(
      std::weak_ptr<::fidl::internal::AsyncServerBinding>&& binding)
      : inner_(std::move(binding)) {}

 private:
  friend ServerBindingRef<::fidl_test_protocolrequest::Child>;

  ::fidl::internal::WeakEventSenderInner inner_;
};
#endif  // __Fuchsia__
