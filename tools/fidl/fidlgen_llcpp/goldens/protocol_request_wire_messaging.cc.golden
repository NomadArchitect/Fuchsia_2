// WARNING: This file is machine generated by fidlgen.

#include <fidl/test.protocolrequest/cpp/wire_messaging.h>

#include <memory>

namespace test_protocolrequest {
[[maybe_unused]] constexpr uint64_t kParent_GetChild_Ordinal =
    881818649151440699lu;

extern "C" const fidl_type_t
    test_protocolrequest_ParentGetChildRequestMessageTable;

extern "C" const fidl_type_t
    test_protocolrequest_ParentGetChildResponseMessageTable;

[[maybe_unused]] constexpr uint64_t kParent_GetChildRequest_Ordinal =
    1096855814967598201lu;

extern "C" const fidl_type_t
    test_protocolrequest_ParentGetChildRequestRequestMessageTable;

extern "C" const fidl_type_t
    test_protocolrequest_ParentGetChildRequestResponseMessageTable;

[[maybe_unused]] constexpr uint64_t kParent_TakeChild_Ordinal =
    4470101341872267920lu;

extern "C" const fidl_type_t
    test_protocolrequest_ParentTakeChildRequestMessageTable;

extern "C" const fidl_type_t
    test_protocolrequest_ParentTakeChildResponseMessageTable;

[[maybe_unused]] constexpr uint64_t kParent_TakeChildRequest_Ordinal =
    2333981071306416007lu;

extern "C" const fidl_type_t
    test_protocolrequest_ParentTakeChildRequestRequestMessageTable;

extern "C" const fidl_type_t
    test_protocolrequest_ParentTakeChildRequestResponseMessageTable;
#ifdef __Fuchsia__
}  // namespace test_protocolrequest
::fidl::WireResult<::test_protocolrequest::Parent::GetChild>::WireResult(
    ::fidl::UnownedClientEnd<::test_protocolrequest::Parent> client,
    ::fidl::WireRequest<::test_protocolrequest::Parent::GetChild>* request) {
  FIDL_INTERNAL_DISABLE_AUTO_VAR_INIT
  ::fidl::OwnedEncodedMessage<
      ::fidl::WireRequest<::test_protocolrequest::Parent::GetChild>,
      ::fidl::internal::ChannelTransport>
      request_message(::fidl::internal::AllowUnownedInputRef{}, request);
  auto& outgoing = request_message.GetOutgoingMessage();
  outgoing.Call<::fidl::WireResponse<::test_protocolrequest::Parent::GetChild>>(
      client.channel(), bytes_.data(), static_cast<uint32_t>(bytes_.size()));
  SetResult(outgoing);
}

::fidl::WireResult<::test_protocolrequest::Parent::GetChild>::WireResult(
    ::fidl::UnownedClientEnd<::test_protocolrequest::Parent> client,
    ::fidl::WireRequest<::test_protocolrequest::Parent::GetChild>* request,
    zx_time_t deadline) {
  FIDL_INTERNAL_DISABLE_AUTO_VAR_INIT
  ::fidl::OwnedEncodedMessage<
      ::fidl::WireRequest<::test_protocolrequest::Parent::GetChild>,
      ::fidl::internal::ChannelTransport>
      request_message(::fidl::internal::AllowUnownedInputRef{}, request);
  auto& outgoing = request_message.GetOutgoingMessage();
  outgoing.Call<::fidl::WireResponse<::test_protocolrequest::Parent::GetChild>>(
      client.channel(), bytes_.data(), static_cast<uint32_t>(bytes_.size()),
      fidl::CallOptions{.deadline = deadline});
  SetResult(outgoing);
}
namespace test_protocolrequest {
#endif  // __Fuchsia__

#ifdef __Fuchsia__
}  // namespace test_protocolrequest
::fidl::WireUnownedResult<::test_protocolrequest::Parent::GetChild>::
    WireUnownedResult(
        ::fidl::UnownedClientEnd<::test_protocolrequest::Parent> client_end,
        ::fidl::internal::AnyBufferAllocator& allocator,
        ::fidl::WireRequest<::test_protocolrequest::Parent::GetChild>*
            request) {
  constexpr uint32_t buffer_size = ::fidl::SyncClientMethodBufferSizeInChannel<
      ::test_protocolrequest::Parent::GetChild>();
  ::fitx::result<::fidl::Error, ::fidl::BufferSpan> allocation =
      allocator.TryAllocate(buffer_size);
  if (!allocation.is_ok()) {
    ::fidl::Result::operator=(allocation.error_value());
    return;
  }
  uint8_t* buffer = allocation->data;
  constexpr uint32_t request_byte_capacity = ::fidl::MaxSizeInChannel<
      ::fidl::WireRequest<::test_protocolrequest::Parent::GetChild>,
      ::fidl::MessageDirection::kSending>();
  uint8_t* request_bytes = buffer;
  static_assert(buffer_size > request_byte_capacity);
  uint32_t response_byte_capacity = buffer_size - request_byte_capacity;
  uint8_t* response_bytes = &buffer[request_byte_capacity];

  ::fidl::UnownedEncodedMessage<
      ::fidl::WireRequest<::test_protocolrequest::Parent::GetChild>>
      request_message(request_bytes, request_byte_capacity, request);
  auto& outgoing = request_message.GetOutgoingMessage();
  outgoing.Call<::fidl::WireResponse<::test_protocolrequest::Parent::GetChild>>(
      client_end.channel(), response_bytes, response_byte_capacity);
  bytes_ = response_bytes;
  ::fidl::Result::operator=(outgoing);
}
namespace test_protocolrequest {
#endif  // __Fuchsia__

#ifdef __Fuchsia__
}  // namespace test_protocolrequest
::fidl::WireResult<::test_protocolrequest::Parent::GetChildRequest>::WireResult(
    ::fidl::UnownedClientEnd<::test_protocolrequest::Parent> client,
    ::fidl::WireRequest<::test_protocolrequest::Parent::GetChildRequest>*
        request) {
  FIDL_INTERNAL_DISABLE_AUTO_VAR_INIT
  ::fidl::OwnedEncodedMessage<
      ::fidl::WireRequest<::test_protocolrequest::Parent::GetChildRequest>,
      ::fidl::internal::ChannelTransport>
      request_message(::fidl::internal::AllowUnownedInputRef{}, request);
  auto& outgoing = request_message.GetOutgoingMessage();
  outgoing.Call<
      ::fidl::WireResponse<::test_protocolrequest::Parent::GetChildRequest>>(
      client.channel(), bytes_.data(), static_cast<uint32_t>(bytes_.size()));
  SetResult(outgoing);
}

::fidl::WireResult<::test_protocolrequest::Parent::GetChildRequest>::WireResult(
    ::fidl::UnownedClientEnd<::test_protocolrequest::Parent> client,
    ::fidl::WireRequest<::test_protocolrequest::Parent::GetChildRequest>*
        request,
    zx_time_t deadline) {
  FIDL_INTERNAL_DISABLE_AUTO_VAR_INIT
  ::fidl::OwnedEncodedMessage<
      ::fidl::WireRequest<::test_protocolrequest::Parent::GetChildRequest>,
      ::fidl::internal::ChannelTransport>
      request_message(::fidl::internal::AllowUnownedInputRef{}, request);
  auto& outgoing = request_message.GetOutgoingMessage();
  outgoing.Call<
      ::fidl::WireResponse<::test_protocolrequest::Parent::GetChildRequest>>(
      client.channel(), bytes_.data(), static_cast<uint32_t>(bytes_.size()),
      fidl::CallOptions{.deadline = deadline});
  SetResult(outgoing);
}
namespace test_protocolrequest {
#endif  // __Fuchsia__

#ifdef __Fuchsia__
}  // namespace test_protocolrequest
::fidl::WireUnownedResult<::test_protocolrequest::Parent::GetChildRequest>::
    WireUnownedResult(
        ::fidl::UnownedClientEnd<::test_protocolrequest::Parent> client_end,
        ::fidl::internal::AnyBufferAllocator& allocator,
        ::fidl::WireRequest<::test_protocolrequest::Parent::GetChildRequest>*
            request) {
  constexpr uint32_t buffer_size = ::fidl::SyncClientMethodBufferSizeInChannel<
      ::test_protocolrequest::Parent::GetChildRequest>();
  ::fitx::result<::fidl::Error, ::fidl::BufferSpan> allocation =
      allocator.TryAllocate(buffer_size);
  if (!allocation.is_ok()) {
    ::fidl::Result::operator=(allocation.error_value());
    return;
  }
  uint8_t* buffer = allocation->data;
  constexpr uint32_t request_byte_capacity = ::fidl::MaxSizeInChannel<
      ::fidl::WireRequest<::test_protocolrequest::Parent::GetChildRequest>,
      ::fidl::MessageDirection::kSending>();
  uint8_t* request_bytes = buffer;
  static_assert(buffer_size > request_byte_capacity);
  uint32_t response_byte_capacity = buffer_size - request_byte_capacity;
  uint8_t* response_bytes = &buffer[request_byte_capacity];

  ::fidl::UnownedEncodedMessage<
      ::fidl::WireRequest<::test_protocolrequest::Parent::GetChildRequest>>
      request_message(request_bytes, request_byte_capacity, request);
  auto& outgoing = request_message.GetOutgoingMessage();
  outgoing.Call<
      ::fidl::WireResponse<::test_protocolrequest::Parent::GetChildRequest>>(
      client_end.channel(), response_bytes, response_byte_capacity);
  bytes_ = response_bytes;
  ::fidl::Result::operator=(outgoing);
}
namespace test_protocolrequest {
#endif  // __Fuchsia__

#ifdef __Fuchsia__
}  // namespace test_protocolrequest
::fidl::WireResult<::test_protocolrequest::Parent::TakeChild>::WireResult(
    ::fidl::UnownedClientEnd<::test_protocolrequest::Parent> client,
    ::fidl::WireRequest<::test_protocolrequest::Parent::TakeChild>* request) {
  FIDL_INTERNAL_DISABLE_AUTO_VAR_INIT
  ::fidl::OwnedEncodedMessage<
      ::fidl::WireRequest<::test_protocolrequest::Parent::TakeChild>,
      ::fidl::internal::ChannelTransport>
      request_message(::fidl::internal::AllowUnownedInputRef{}, request);
  auto& outgoing = request_message.GetOutgoingMessage();
  outgoing.Write(client.channel());
  SetResult(outgoing);
}
namespace test_protocolrequest {
#endif  // __Fuchsia__

#ifdef __Fuchsia__
}  // namespace test_protocolrequest
::fidl::WireUnownedResult<::test_protocolrequest::Parent::TakeChild>::
    WireUnownedResult(
        ::fidl::UnownedClientEnd<::test_protocolrequest::Parent> client_end,
        ::fidl::internal::AnyBufferAllocator& allocator,
        ::fidl::WireRequest<::test_protocolrequest::Parent::TakeChild>*
            request) {
  constexpr uint32_t buffer_size = ::fidl::SyncClientMethodBufferSizeInChannel<
      ::test_protocolrequest::Parent::TakeChild>();
  ::fitx::result<::fidl::Error, ::fidl::BufferSpan> allocation =
      allocator.TryAllocate(buffer_size);
  if (!allocation.is_ok()) {
    ::fidl::Result::operator=(allocation.error_value());
    return;
  }
  uint8_t* buffer = allocation->data;
  uint32_t request_byte_capacity = buffer_size;
  uint8_t* request_bytes = buffer;

  ::fidl::UnownedEncodedMessage<
      ::fidl::WireRequest<::test_protocolrequest::Parent::TakeChild>>
      request_message(request_bytes, request_byte_capacity, request);
  auto& outgoing = request_message.GetOutgoingMessage();
  outgoing.Write(client_end.channel());
  ::fidl::Result::operator=(outgoing);
}
namespace test_protocolrequest {
#endif  // __Fuchsia__

#ifdef __Fuchsia__
}  // namespace test_protocolrequest
::fidl::WireResult<::test_protocolrequest::Parent::TakeChildRequest>::
    WireResult(
        ::fidl::UnownedClientEnd<::test_protocolrequest::Parent> client,
        ::fidl::WireRequest<::test_protocolrequest::Parent::TakeChildRequest>*
            request) {
  FIDL_INTERNAL_DISABLE_AUTO_VAR_INIT
  ::fidl::OwnedEncodedMessage<
      ::fidl::WireRequest<::test_protocolrequest::Parent::TakeChildRequest>,
      ::fidl::internal::ChannelTransport>
      request_message(::fidl::internal::AllowUnownedInputRef{}, request);
  auto& outgoing = request_message.GetOutgoingMessage();
  outgoing.Write(client.channel());
  SetResult(outgoing);
}
namespace test_protocolrequest {
#endif  // __Fuchsia__

#ifdef __Fuchsia__
}  // namespace test_protocolrequest
::fidl::WireUnownedResult<::test_protocolrequest::Parent::TakeChildRequest>::
    WireUnownedResult(
        ::fidl::UnownedClientEnd<::test_protocolrequest::Parent> client_end,
        ::fidl::internal::AnyBufferAllocator& allocator,
        ::fidl::WireRequest<::test_protocolrequest::Parent::TakeChildRequest>*
            request) {
  constexpr uint32_t buffer_size = ::fidl::SyncClientMethodBufferSizeInChannel<
      ::test_protocolrequest::Parent::TakeChildRequest>();
  ::fitx::result<::fidl::Error, ::fidl::BufferSpan> allocation =
      allocator.TryAllocate(buffer_size);
  if (!allocation.is_ok()) {
    ::fidl::Result::operator=(allocation.error_value());
    return;
  }
  uint8_t* buffer = allocation->data;
  uint32_t request_byte_capacity = buffer_size;
  uint8_t* request_bytes = buffer;

  ::fidl::UnownedEncodedMessage<
      ::fidl::WireRequest<::test_protocolrequest::Parent::TakeChildRequest>>
      request_message(request_bytes, request_byte_capacity, request);
  auto& outgoing = request_message.GetOutgoingMessage();
  outgoing.Write(client_end.channel());
  ::fidl::Result::operator=(outgoing);
}
namespace test_protocolrequest {
#endif  // __Fuchsia__

}  // namespace test_protocolrequest
#ifdef __Fuchsia__

void fidl::internal::WireClientImpl<::test_protocolrequest::Parent>::GetChild(
    ::fidl::WireClientCallback<::test_protocolrequest::Parent::GetChild> _cb) {
  using Callback = decltype(_cb);
  class ResponseContext final : public ::fidl::WireResponseContext<
                                    ::test_protocolrequest::Parent::GetChild> {
   public:
    ResponseContext(Callback cb) : cb_(std::move(cb)) {}

    void OnResult(
        ::fidl::WireUnownedResult<::test_protocolrequest::Parent::GetChild>&
            result) override {
      cb_(result);
      delete this;
    }

   private:
    Callback cb_;
  };

  auto* _context = new ResponseContext(std::move(_cb));
  ::fidl::WireRequest<::test_protocolrequest::Parent::GetChild> _request{};
  FIDL_INTERNAL_DISABLE_AUTO_VAR_INIT
  ::fidl::OwnedEncodedMessage<
      ::fidl::WireRequest<::test_protocolrequest::Parent::GetChild>,
      ::fidl::internal::ChannelTransport>
      _request_message(::fidl::internal::AllowUnownedInputRef{}, &_request);
  fidl::WriteOptions write_options = {};
  ::fidl::internal::ClientBase::SendTwoWay(
      _request_message.GetOutgoingMessage(), _context,
      std::move(write_options));
}

void fidl::internal::WireClientImpl<::test_protocolrequest::Parent>::GetChild(
    ::fit::callback<void(::fidl::WireResponse<
                         ::test_protocolrequest::Parent::GetChild>* response)>
        _cb) {
  using Callback = decltype(_cb);
  class ResponseContext final : public ::fidl::WireResponseContext<
                                    ::test_protocolrequest::Parent::GetChild> {
   public:
    ResponseContext(Callback cb) : cb_(std::move(cb)) {}

    void OnResult(
        ::fidl::WireUnownedResult<::test_protocolrequest::Parent::GetChild>&
            result) override {
      if (result.ok()) {
        ::fidl::WireResponse<::test_protocolrequest::Parent::GetChild>*
            response = result.Unwrap();
        cb_(response);
      }
      delete this;
    }

   private:
    Callback cb_;
  };

  auto* _context = new ResponseContext(std::move(_cb));
  ::fidl::WireRequest<::test_protocolrequest::Parent::GetChild> _request{};
  FIDL_INTERNAL_DISABLE_AUTO_VAR_INIT
  ::fidl::OwnedEncodedMessage<
      ::fidl::WireRequest<::test_protocolrequest::Parent::GetChild>,
      ::fidl::internal::ChannelTransport>
      _request_message(::fidl::internal::AllowUnownedInputRef{}, &_request);
  fidl::WriteOptions write_options = {};
  ::fidl::internal::ClientBase::SendTwoWay(
      _request_message.GetOutgoingMessage(), _context,
      std::move(write_options));
}
void fidl::internal::WireClientImpl<::test_protocolrequest::Parent>::GetChild(
    ::fidl::WireResponseContext<::test_protocolrequest::Parent::GetChild>*
        _context) {
  ::fidl::WireRequest<::test_protocolrequest::Parent::GetChild> _request{};

  FIDL_INTERNAL_DISABLE_AUTO_VAR_INIT
  ::fidl::OwnedEncodedMessage<
      ::fidl::WireRequest<::test_protocolrequest::Parent::GetChild>,
      ::fidl::internal::ChannelTransport>
      _request_message(::fidl::internal::AllowUnownedInputRef{}, &_request);
  fidl::WriteOptions write_options = {};
  ::fidl::internal::ClientBase::SendTwoWay(
      _request_message.GetOutgoingMessage(), _context,
      std::move(write_options));
}
::fidl::WireResult<::test_protocolrequest::Parent::GetChild> fidl::internal::
    WireClientImpl<::test_protocolrequest::Parent>::GetChild_Sync() {
  return ::fidl::internal::ClientBase::MakeSyncCallWith(
      [&](std::shared_ptr<::fidl::internal::AnyTransport> _transport) {
        ::fidl::WireRequest<::test_protocolrequest::Parent::GetChild>
            _request{};
        return ::fidl::WireResult<::test_protocolrequest::Parent::GetChild>(
            ::fidl::UnownedClientEnd<::test_protocolrequest::Parent>(
                _transport->get<fidl::internal::ChannelTransport>()),
            &_request);
      });
}
::fidl::WireUnownedResult<::test_protocolrequest::Parent::GetChild>
fidl::internal::WireClientImpl<::test_protocolrequest::Parent>::GetChild_Sync(
    ::fidl::BufferSpan _buffer_span) {
  auto _allocator = ::fidl::internal::MakeAnyBufferAllocator(_buffer_span);
  return ::fidl::internal::ClientBase::MakeSyncCallWith(
      [&](std::shared_ptr<::fidl::internal::AnyTransport> _transport) {
        ::fidl::WireRequest<::test_protocolrequest::Parent::GetChild>
            _request{};
        return ::fidl::WireUnownedResult<
            ::test_protocolrequest::Parent::GetChild>(
            ::fidl::UnownedClientEnd<::test_protocolrequest::Parent>(
                _transport->get<fidl::internal::ChannelTransport>()),
            _allocator, &_request);
      });
}
void fidl::internal::WireClientImpl<::test_protocolrequest::Parent>::
    GetChildRequest(::fidl::WireClientCallback<
                    ::test_protocolrequest::Parent::GetChildRequest>
                        _cb) {
  using Callback = decltype(_cb);
  class ResponseContext final
      : public ::fidl::WireResponseContext<
            ::test_protocolrequest::Parent::GetChildRequest> {
   public:
    ResponseContext(Callback cb) : cb_(std::move(cb)) {}

    void OnResult(
        ::fidl::WireUnownedResult<
            ::test_protocolrequest::Parent::GetChildRequest>& result) override {
      cb_(result);
      delete this;
    }

   private:
    Callback cb_;
  };

  auto* _context = new ResponseContext(std::move(_cb));
  ::fidl::WireRequest<::test_protocolrequest::Parent::GetChildRequest>
      _request{};
  FIDL_INTERNAL_DISABLE_AUTO_VAR_INIT
  ::fidl::OwnedEncodedMessage<
      ::fidl::WireRequest<::test_protocolrequest::Parent::GetChildRequest>,
      ::fidl::internal::ChannelTransport>
      _request_message(::fidl::internal::AllowUnownedInputRef{}, &_request);
  fidl::WriteOptions write_options = {};
  ::fidl::internal::ClientBase::SendTwoWay(
      _request_message.GetOutgoingMessage(), _context,
      std::move(write_options));
}

void fidl::internal::WireClientImpl<::test_protocolrequest::Parent>::
    GetChildRequest(
        ::fit::callback<
            void(::fidl::WireResponse<
                 ::test_protocolrequest::Parent::GetChildRequest>* response)>
            _cb) {
  using Callback = decltype(_cb);
  class ResponseContext final
      : public ::fidl::WireResponseContext<
            ::test_protocolrequest::Parent::GetChildRequest> {
   public:
    ResponseContext(Callback cb) : cb_(std::move(cb)) {}

    void OnResult(
        ::fidl::WireUnownedResult<
            ::test_protocolrequest::Parent::GetChildRequest>& result) override {
      if (result.ok()) {
        ::fidl::WireResponse<::test_protocolrequest::Parent::GetChildRequest>*
            response = result.Unwrap();
        cb_(response);
      }
      delete this;
    }

   private:
    Callback cb_;
  };

  auto* _context = new ResponseContext(std::move(_cb));
  ::fidl::WireRequest<::test_protocolrequest::Parent::GetChildRequest>
      _request{};
  FIDL_INTERNAL_DISABLE_AUTO_VAR_INIT
  ::fidl::OwnedEncodedMessage<
      ::fidl::WireRequest<::test_protocolrequest::Parent::GetChildRequest>,
      ::fidl::internal::ChannelTransport>
      _request_message(::fidl::internal::AllowUnownedInputRef{}, &_request);
  fidl::WriteOptions write_options = {};
  ::fidl::internal::ClientBase::SendTwoWay(
      _request_message.GetOutgoingMessage(), _context,
      std::move(write_options));
}
void fidl::internal::WireClientImpl<::test_protocolrequest::Parent>::
    GetChildRequest(
        ::fidl::WireResponseContext<
            ::test_protocolrequest::Parent::GetChildRequest>* _context) {
  ::fidl::WireRequest<::test_protocolrequest::Parent::GetChildRequest>
      _request{};

  FIDL_INTERNAL_DISABLE_AUTO_VAR_INIT
  ::fidl::OwnedEncodedMessage<
      ::fidl::WireRequest<::test_protocolrequest::Parent::GetChildRequest>,
      ::fidl::internal::ChannelTransport>
      _request_message(::fidl::internal::AllowUnownedInputRef{}, &_request);
  fidl::WriteOptions write_options = {};
  ::fidl::internal::ClientBase::SendTwoWay(
      _request_message.GetOutgoingMessage(), _context,
      std::move(write_options));
}
::fidl::WireResult<::test_protocolrequest::Parent::GetChildRequest>
fidl::internal::WireClientImpl<
    ::test_protocolrequest::Parent>::GetChildRequest_Sync() {
  return ::fidl::internal::ClientBase::MakeSyncCallWith(
      [&](std::shared_ptr<::fidl::internal::AnyTransport> _transport) {
        ::fidl::WireRequest<::test_protocolrequest::Parent::GetChildRequest>
            _request{};
        return ::fidl::WireResult<
            ::test_protocolrequest::Parent::GetChildRequest>(
            ::fidl::UnownedClientEnd<::test_protocolrequest::Parent>(
                _transport->get<fidl::internal::ChannelTransport>()),
            &_request);
      });
}
::fidl::WireUnownedResult<::test_protocolrequest::Parent::GetChildRequest>
fidl::internal::WireClientImpl<::test_protocolrequest::Parent>::
    GetChildRequest_Sync(::fidl::BufferSpan _buffer_span) {
  auto _allocator = ::fidl::internal::MakeAnyBufferAllocator(_buffer_span);
  return ::fidl::internal::ClientBase::MakeSyncCallWith(
      [&](std::shared_ptr<::fidl::internal::AnyTransport> _transport) {
        ::fidl::WireRequest<::test_protocolrequest::Parent::GetChildRequest>
            _request{};
        return ::fidl::WireUnownedResult<
            ::test_protocolrequest::Parent::GetChildRequest>(
            ::fidl::UnownedClientEnd<::test_protocolrequest::Parent>(
                _transport->get<fidl::internal::ChannelTransport>()),
            _allocator, &_request);
      });
}
::fidl::Result
fidl::internal::WireClientImpl<::test_protocolrequest::Parent>::TakeChild(
    ::fidl::ClientEnd<::test_protocolrequest::Child>&& c) {
  FIDL_INTERNAL_DISABLE_AUTO_VAR_INIT
  ::fidl::WireRequest<::test_protocolrequest::Parent::TakeChild>
      _request_object{std::move(c)};
  ::fidl::OwnedEncodedMessage<
      ::fidl::WireRequest<::test_protocolrequest::Parent::TakeChild>,
      ::fidl::internal::ChannelTransport>
      _request_message(::fidl::internal::AllowUnownedInputRef{},
                       &_request_object);
  fidl::WriteOptions write_options = {};
  return ::fidl::internal::ClientBase::SendOneWay(
      _request_message.GetOutgoingMessage(), std::move(write_options));
}
::fidl::Result
fidl::internal::WireClientImpl<::test_protocolrequest::Parent>::TakeChild(
    ::fidl::BufferSpan _buffer_span,
    ::fidl::ClientEnd<::test_protocolrequest::Child>&& c) {
  ::fidl::WireRequest<::test_protocolrequest::Parent::TakeChild>
      _request_object{std::move(c)};
  ::fidl::UnownedEncodedMessage<
      ::fidl::WireRequest<::test_protocolrequest::Parent::TakeChild>>
      _request_message(_buffer_span.data, _buffer_span.capacity,
                       &_request_object);
  fidl::WriteOptions write_options = {};
  return ::fidl::internal::ClientBase::SendOneWay(
      _request_message.GetOutgoingMessage(), std::move(write_options));
}
::fidl::Result fidl::internal::WireClientImpl<::test_protocolrequest::Parent>::
    TakeChildRequest(::fidl::ServerEnd<::test_protocolrequest::Child>&& r) {
  FIDL_INTERNAL_DISABLE_AUTO_VAR_INIT
  ::fidl::WireRequest<::test_protocolrequest::Parent::TakeChildRequest>
      _request_object{std::move(r)};
  ::fidl::OwnedEncodedMessage<
      ::fidl::WireRequest<::test_protocolrequest::Parent::TakeChildRequest>,
      ::fidl::internal::ChannelTransport>
      _request_message(::fidl::internal::AllowUnownedInputRef{},
                       &_request_object);
  fidl::WriteOptions write_options = {};
  return ::fidl::internal::ClientBase::SendOneWay(
      _request_message.GetOutgoingMessage(), std::move(write_options));
}
::fidl::Result fidl::internal::WireClientImpl<::test_protocolrequest::Parent>::
    TakeChildRequest(::fidl::BufferSpan _buffer_span,
                     ::fidl::ServerEnd<::test_protocolrequest::Child>&& r) {
  ::fidl::WireRequest<::test_protocolrequest::Parent::TakeChildRequest>
      _request_object{std::move(r)};
  ::fidl::UnownedEncodedMessage<
      ::fidl::WireRequest<::test_protocolrequest::Parent::TakeChildRequest>>
      _request_message(_buffer_span.data, _buffer_span.capacity,
                       &_request_object);
  fidl::WriteOptions write_options = {};
  return ::fidl::internal::ClientBase::SendOneWay(
      _request_message.GetOutgoingMessage(), std::move(write_options));
}
::fidl::Result fidl::internal::
    WireWeakOnewayBufferClientImpl<::test_protocolrequest::Parent>::TakeChild(
        ::fidl::ClientEnd<::test_protocolrequest::Child>&& c) {
  constexpr uint32_t _buffer_size =
      ::fidl::AsyncClientMethodBufferSizeInChannel<
          ::test_protocolrequest::Parent::TakeChild>();
  ::fitx::result<::fidl::Error, ::fidl::BufferSpan> _allocation =
      _allocator().TryAllocate(_buffer_size);
  if (!_allocation.is_ok()) {
    return _allocation.error_value();
  }

  ::fidl::WireRequest<::test_protocolrequest::Parent::TakeChild> _request{
      std::move(c)};
  ::fidl::UnownedEncodedMessage<
      ::fidl::WireRequest<::test_protocolrequest::Parent::TakeChild>>
      _request_message(_allocation->data, _buffer_size, &_request);
  return _client_base()->SendOneWay(_request_message.GetOutgoingMessage());
}
::fidl::Result
fidl::internal::WireWeakOnewayBufferClientImpl<::test_protocolrequest::Parent>::
    TakeChildRequest(::fidl::ServerEnd<::test_protocolrequest::Child>&& r) {
  constexpr uint32_t _buffer_size =
      ::fidl::AsyncClientMethodBufferSizeInChannel<
          ::test_protocolrequest::Parent::TakeChildRequest>();
  ::fitx::result<::fidl::Error, ::fidl::BufferSpan> _allocation =
      _allocator().TryAllocate(_buffer_size);
  if (!_allocation.is_ok()) {
    return _allocation.error_value();
  }

  ::fidl::WireRequest<::test_protocolrequest::Parent::TakeChildRequest>
      _request{std::move(r)};
  ::fidl::UnownedEncodedMessage<
      ::fidl::WireRequest<::test_protocolrequest::Parent::TakeChildRequest>>
      _request_message(_allocation->data, _buffer_size, &_request);
  return _client_base()->SendOneWay(_request_message.GetOutgoingMessage());
}
void fidl::internal::
    WireWeakAsyncBufferClientImpl<::test_protocolrequest::Parent>::GetChild(
        ::fidl::WireResponseContext<::test_protocolrequest::Parent::GetChild>*
            _context) {
  constexpr uint32_t _buffer_size =
      ::fidl::AsyncClientMethodBufferSizeInChannel<
          ::test_protocolrequest::Parent::GetChild>();
  ::fitx::result<::fidl::Error, ::fidl::BufferSpan> _allocation =
      _allocator().TryAllocate(_buffer_size);
  if (!_allocation.is_ok()) {
    ::fidl::OutgoingMessage _failure{_allocation.error_value()};
    _client_base()->SendTwoWay(_failure, _context);
    return;
  }

  ::fidl::WireRequest<::test_protocolrequest::Parent::GetChild> _request{};
  ::fidl::UnownedEncodedMessage<
      ::fidl::WireRequest<::test_protocolrequest::Parent::GetChild>>
      _request_message(_allocation->data, _buffer_size, &_request);
  _client_base()->SendTwoWay(_request_message.GetOutgoingMessage(), _context);
}
void fidl::internal::WireWeakAsyncBufferClientImpl<
    ::test_protocolrequest::Parent>::
    GetChildRequest(
        ::fidl::WireResponseContext<
            ::test_protocolrequest::Parent::GetChildRequest>* _context) {
  constexpr uint32_t _buffer_size =
      ::fidl::AsyncClientMethodBufferSizeInChannel<
          ::test_protocolrequest::Parent::GetChildRequest>();
  ::fitx::result<::fidl::Error, ::fidl::BufferSpan> _allocation =
      _allocator().TryAllocate(_buffer_size);
  if (!_allocation.is_ok()) {
    ::fidl::OutgoingMessage _failure{_allocation.error_value()};
    _client_base()->SendTwoWay(_failure, _context);
    return;
  }

  ::fidl::WireRequest<::test_protocolrequest::Parent::GetChildRequest>
      _request{};
  ::fidl::UnownedEncodedMessage<
      ::fidl::WireRequest<::test_protocolrequest::Parent::GetChildRequest>>
      _request_message(_allocation->data, _buffer_size, &_request);
  _client_base()->SendTwoWay(_request_message.GetOutgoingMessage(), _context);
}
#endif  // __Fuchsia__

#ifdef __Fuchsia__

::fidl::Result
fidl::WireSyncEventHandler<::test_protocolrequest::Parent>::HandleOneEvent(
    ::fidl::UnownedClientEnd<::test_protocolrequest::Parent> client_end) {
  zx_status_t status = client_end.channel()->wait_one(
      ZX_CHANNEL_READABLE | ZX_CHANNEL_PEER_CLOSED, ::zx::time::infinite(),
      nullptr);
  if (status != ZX_OK) {
    return ::fidl::Result::TransportError(
        status, ::fidl::internal::kErrorWaitOneFailed);
  }
  constexpr uint32_t kHandleAllocSize = ([]() constexpr {
    uint32_t x = 0;
    if (x > ZX_CHANNEL_MAX_MSG_HANDLES) {
      x = ZX_CHANNEL_MAX_MSG_HANDLES;
    }
    return x;
  })();
  static_assert(kHandleAllocSize <= ZX_CHANNEL_MAX_MSG_HANDLES);
  ::fidl::internal::InlineMessageBuffer<24> read_storage;
  std::array<zx_handle_t, kHandleAllocSize> read_handles;
  // TODO(fxbug.dev/85734) Remove this channel-specific allocation.
  std::array<fidl_channel_handle_metadata_t, kHandleAllocSize>
      read_handle_metadata;
  ::fidl::IncomingMessage msg = ::fidl::MessageRead(
      zx::unowned_channel(client_end.handle()), read_storage.view(),
      read_handles.data(), read_handle_metadata.data(), kHandleAllocSize,
      ReadOptions{.discardable = true});
  if (msg.status() == ZX_ERR_BUFFER_TOO_SMALL) {
    // Message size is unexpectedly larger than calculated.
    // This can only be due to a newer version of the protocol defining a new
    // event, whose size exceeds the maximum of known events in the current
    // protocol.
    return ::fidl::Result::UnexpectedMessage(Unknown());
  }
  if (!msg.ok()) {
    return msg;
  }
  fidl_message_header_t* hdr = msg.header();
  switch (hdr->ordinal) {
    default: {
      return ::fidl::Result::UnexpectedMessage(Unknown());
    }
  }
}

std::optional<::fidl::UnbindInfo> fidl::internal::
    WireEventDispatcher<::test_protocolrequest::Parent>::DispatchEvent(
        ::fidl::IncomingMessage& msg,
        ::fidl::internal::IncomingTransportContext transport_context) {
  switch (msg.header()->ordinal) {
    default:
      break;
  }
  return ::fidl::UnbindInfo::UnknownOrdinal();
}
#endif  // __Fuchsia__

#ifdef __Fuchsia__

constexpr ::fidl::internal::MethodEntry fidl::internal::WireServerDispatcher<
    ::test_protocolrequest::Parent>::entries_[] = {
    {
        ::test_protocolrequest::kParent_GetChild_Ordinal,
        [](void* interface, ::fidl::IncomingMessage&& msg,
           internal::IncomingTransportContext transport_context,
           ::fidl::Transaction* txn) {
          auto* primary = reinterpret_cast<
              ::fidl::WireRequest<::test_protocolrequest::Parent::GetChild>*>(
              msg.bytes());
          ::fidl::internal::WireCompleter<
              ::test_protocolrequest::Parent::GetChild>::Sync completer(txn);
          reinterpret_cast<::fidl::WireServer<::test_protocolrequest::Parent>*>(
              interface)
              ->GetChild(primary, completer);
          return ZX_OK;
        },
    },
    {
        ::test_protocolrequest::kParent_GetChildRequest_Ordinal,
        [](void* interface, ::fidl::IncomingMessage&& msg,
           internal::IncomingTransportContext transport_context,
           ::fidl::Transaction* txn) {
          auto* primary = reinterpret_cast<::fidl::WireRequest<
              ::test_protocolrequest::Parent::GetChildRequest>*>(msg.bytes());
          ::fidl::internal::WireCompleter<
              ::test_protocolrequest::Parent::GetChildRequest>::Sync
              completer(txn);
          reinterpret_cast<::fidl::WireServer<::test_protocolrequest::Parent>*>(
              interface)
              ->GetChildRequest(primary, completer);
          return ZX_OK;
        },
    },
    {
        ::test_protocolrequest::kParent_TakeChild_Ordinal,
        [](void* interface, ::fidl::IncomingMessage&& msg,
           internal::IncomingTransportContext transport_context,
           ::fidl::Transaction* txn) {
          ::fidl::DecodedMessage<
              ::fidl::WireRequest<::test_protocolrequest::Parent::TakeChild>>
              decoded{std::move(msg)};
          if (unlikely(!decoded.ok())) {
            return decoded.status();
          }
          auto* primary = decoded.PrimaryObject();
          ::fidl::internal::WireCompleter<
              ::test_protocolrequest::Parent::TakeChild>::Sync completer(txn);
          reinterpret_cast<::fidl::WireServer<::test_protocolrequest::Parent>*>(
              interface)
              ->TakeChild(primary, completer);
          return ZX_OK;
        },
    },
    {
        ::test_protocolrequest::kParent_TakeChildRequest_Ordinal,
        [](void* interface, ::fidl::IncomingMessage&& msg,
           internal::IncomingTransportContext transport_context,
           ::fidl::Transaction* txn) {
          ::fidl::DecodedMessage<::fidl::WireRequest<
              ::test_protocolrequest::Parent::TakeChildRequest>>
              decoded{std::move(msg)};
          if (unlikely(!decoded.ok())) {
            return decoded.status();
          }
          auto* primary = decoded.PrimaryObject();
          ::fidl::internal::WireCompleter<
              ::test_protocolrequest::Parent::TakeChildRequest>::Sync
              completer(txn);
          reinterpret_cast<::fidl::WireServer<::test_protocolrequest::Parent>*>(
              interface)
              ->TakeChildRequest(primary, completer);
          return ZX_OK;
        },
    },
};

const ::fidl::internal::MethodEntry* fidl::internal::WireServerDispatcher<
    ::test_protocolrequest::Parent>::entries_end_ = &entries_[4];

::fidl::DispatchResult fidl::internal::
    WireServerDispatcher<::test_protocolrequest::Parent>::TryDispatch(
        ::fidl::WireServer<::test_protocolrequest::Parent>* impl,
        ::fidl::IncomingMessage& msg,
        internal::IncomingTransportContext transport_context,
        ::fidl::Transaction* txn) {
  return ::fidl::internal::TryDispatch(impl, msg, std::move(transport_context),
                                       txn, entries_, entries_end_);
}

void fidl::internal::WireServerDispatcher<::test_protocolrequest::Parent>::
    Dispatch(::fidl::WireServer<::test_protocolrequest::Parent>* impl,
             ::fidl::IncomingMessage&& msg,
             internal::IncomingTransportContext transport_context,
             ::fidl::Transaction* txn) {
  ::fidl::internal::Dispatch(impl, msg, std::move(transport_context), txn,
                             entries_, entries_end_);
}
void fidl::WireServer<::test_protocolrequest::Parent>::dispatch_message(
    ::fidl::IncomingMessage&& msg, ::fidl::Transaction* txn,
    ::fidl::internal::IncomingTransportContext transport_context) {
  ::fidl::internal::WireServerDispatcher<
      ::test_protocolrequest::Parent>::Dispatch(this, std::move(msg),
                                                std::move(transport_context),
                                                txn);
}
#endif  // __Fuchsia__

#ifdef __Fuchsia__
::fidl::Result fidl::internal::
    WireCompleterBase<::test_protocolrequest::Parent::GetChild>::Reply(
        ::fidl::ClientEnd<::test_protocolrequest::Child>&& c) {
  ::fidl::WireResponse<::test_protocolrequest::Parent::GetChild> _response{
      std::move(c)};
  FIDL_INTERNAL_DISABLE_AUTO_VAR_INIT
  ::fidl::OwnedEncodedMessage<
      ::fidl::WireResponse<::test_protocolrequest::Parent::GetChild>,
      ::fidl::internal::ChannelTransport>
      _response_message{::fidl::internal::AllowUnownedInputRef{}, &_response};
  return ::fidl::internal::
      WireCompleterBase<::test_protocolrequest::Parent::GetChild>::SendReply(
          &_response_message.GetOutgoingMessage(),
          ::fidl::internal::OutgoingTransportContext());
}

::fidl::Result fidl::internal::
    WireCompleterBase<::test_protocolrequest::Parent::GetChild>::Reply(
        ::fidl::BufferSpan _buffer,
        ::fidl::ClientEnd<::test_protocolrequest::Child>&& c) {
  ::fidl::WireResponse<::test_protocolrequest::Parent::GetChild> _response{
      std::move(c)};
  ::fidl::UnownedEncodedMessage<
      ::fidl::WireResponse<::test_protocolrequest::Parent::GetChild>>
      _response_message(_buffer.data, _buffer.capacity, &_response);
  return CompleterBase::SendReply(&_response_message.GetOutgoingMessage(),
                                  ::fidl::internal::OutgoingTransportContext());
}
#endif  // __Fuchsia__

#ifdef __Fuchsia__
::fidl::Result fidl::internal::
    WireCompleterBase<::test_protocolrequest::Parent::GetChildRequest>::Reply(
        ::fidl::ServerEnd<::test_protocolrequest::Child>&& r) {
  ::fidl::WireResponse<::test_protocolrequest::Parent::GetChildRequest>
      _response{std::move(r)};
  FIDL_INTERNAL_DISABLE_AUTO_VAR_INIT
  ::fidl::OwnedEncodedMessage<
      ::fidl::WireResponse<::test_protocolrequest::Parent::GetChildRequest>,
      ::fidl::internal::ChannelTransport>
      _response_message{::fidl::internal::AllowUnownedInputRef{}, &_response};
  return ::fidl::internal::WireCompleterBase<
      ::test_protocolrequest::Parent::GetChildRequest>::
      SendReply(&_response_message.GetOutgoingMessage(),
                ::fidl::internal::OutgoingTransportContext());
}

::fidl::Result fidl::internal::
    WireCompleterBase<::test_protocolrequest::Parent::GetChildRequest>::Reply(
        ::fidl::BufferSpan _buffer,
        ::fidl::ServerEnd<::test_protocolrequest::Child>&& r) {
  ::fidl::WireResponse<::test_protocolrequest::Parent::GetChildRequest>
      _response{std::move(r)};
  ::fidl::UnownedEncodedMessage<
      ::fidl::WireResponse<::test_protocolrequest::Parent::GetChildRequest>>
      _response_message(_buffer.data, _buffer.capacity, &_response);
  return CompleterBase::SendReply(&_response_message.GetOutgoingMessage(),
                                  ::fidl::internal::OutgoingTransportContext());
}
#endif  // __Fuchsia__

void ::fidl::WireRequest<
    ::test_protocolrequest::Parent::GetChild>::_InitHeader() {
  fidl_init_txn_header(&_hdr, 0,
                       ::test_protocolrequest::kParent_GetChild_Ordinal);
}

#ifdef __Fuchsia__

void ::fidl::WireResponse<
    ::test_protocolrequest::Parent::GetChild>::_InitHeader() {
  fidl_init_txn_header(&_hdr, 0,
                       ::test_protocolrequest::kParent_GetChild_Ordinal);
}

void ::fidl::WireResponse<
    ::test_protocolrequest::Parent::GetChild>::_CloseHandles() {
  c.reset();
}
#endif  // __Fuchsia__

void ::fidl::WireRequest<
    ::test_protocolrequest::Parent::GetChildRequest>::_InitHeader() {
  fidl_init_txn_header(&_hdr, 0,
                       ::test_protocolrequest::kParent_GetChildRequest_Ordinal);
}

#ifdef __Fuchsia__

void ::fidl::WireResponse<
    ::test_protocolrequest::Parent::GetChildRequest>::_InitHeader() {
  fidl_init_txn_header(&_hdr, 0,
                       ::test_protocolrequest::kParent_GetChildRequest_Ordinal);
}

void ::fidl::WireResponse<
    ::test_protocolrequest::Parent::GetChildRequest>::_CloseHandles() {
  r.reset();
}
#endif  // __Fuchsia__

#ifdef __Fuchsia__

void ::fidl::WireRequest<
    ::test_protocolrequest::Parent::TakeChild>::_InitHeader() {
  fidl_init_txn_header(&_hdr, 0,
                       ::test_protocolrequest::kParent_TakeChild_Ordinal);
}

void ::fidl::WireRequest<
    ::test_protocolrequest::Parent::TakeChild>::_CloseHandles() {
  c.reset();
}
#endif  // __Fuchsia__

#ifdef __Fuchsia__

void ::fidl::WireRequest<
    ::test_protocolrequest::Parent::TakeChildRequest>::_InitHeader() {
  fidl_init_txn_header(
      &_hdr, 0, ::test_protocolrequest::kParent_TakeChildRequest_Ordinal);
}

void ::fidl::WireRequest<
    ::test_protocolrequest::Parent::TakeChildRequest>::_CloseHandles() {
  r.reset();
}
#endif  // __Fuchsia__

#ifdef __Fuchsia__

#endif  // __Fuchsia__

#ifdef __Fuchsia__

#endif  // __Fuchsia__

#ifdef __Fuchsia__

::fidl::Result
fidl::WireSyncEventHandler<::test_protocolrequest::Child>::HandleOneEvent(
    ::fidl::UnownedClientEnd<::test_protocolrequest::Child> client_end) {
  zx_status_t status = client_end.channel()->wait_one(
      ZX_CHANNEL_READABLE | ZX_CHANNEL_PEER_CLOSED, ::zx::time::infinite(),
      nullptr);
  if (status != ZX_OK) {
    return ::fidl::Result::TransportError(
        status, ::fidl::internal::kErrorWaitOneFailed);
  }
  constexpr uint32_t kHandleAllocSize = ([]() constexpr {
    uint32_t x = 0;
    if (x > ZX_CHANNEL_MAX_MSG_HANDLES) {
      x = ZX_CHANNEL_MAX_MSG_HANDLES;
    }
    return x;
  })();
  static_assert(kHandleAllocSize <= ZX_CHANNEL_MAX_MSG_HANDLES);
  ::fidl::internal::InlineMessageBuffer<0> read_storage;
  std::array<zx_handle_t, kHandleAllocSize> read_handles;
  // TODO(fxbug.dev/85734) Remove this channel-specific allocation.
  std::array<fidl_channel_handle_metadata_t, kHandleAllocSize>
      read_handle_metadata;
  ::fidl::IncomingMessage msg = ::fidl::MessageRead(
      zx::unowned_channel(client_end.handle()), read_storage.view(),
      read_handles.data(), read_handle_metadata.data(), kHandleAllocSize,
      ReadOptions{.discardable = true});
  if (msg.status() == ZX_ERR_BUFFER_TOO_SMALL) {
    // Message size is unexpectedly larger than calculated.
    // This can only be due to a newer version of the protocol defining a new
    // event, whose size exceeds the maximum of known events in the current
    // protocol.
    return ::fidl::Result::UnexpectedMessage(Unknown());
  }
  if (!msg.ok()) {
    return msg;
  }
  fidl_message_header_t* hdr = msg.header();
  switch (hdr->ordinal) {
    default: {
      return ::fidl::Result::UnexpectedMessage(Unknown());
    }
  }
}

std::optional<::fidl::UnbindInfo> fidl::internal::
    WireEventDispatcher<::test_protocolrequest::Child>::DispatchEvent(
        ::fidl::IncomingMessage& msg,
        ::fidl::internal::IncomingTransportContext transport_context) {
  switch (msg.header()->ordinal) {
    default:
      break;
  }
  return ::fidl::UnbindInfo::UnknownOrdinal();
}
#endif  // __Fuchsia__

#ifdef __Fuchsia__

constexpr ::fidl::internal::MethodEntry fidl::internal::WireServerDispatcher<
    ::test_protocolrequest::Child>::entries_[] = {};

const ::fidl::internal::MethodEntry* fidl::internal::WireServerDispatcher<
    ::test_protocolrequest::Child>::entries_end_ = &entries_[0];

::fidl::DispatchResult fidl::internal::
    WireServerDispatcher<::test_protocolrequest::Child>::TryDispatch(
        ::fidl::WireServer<::test_protocolrequest::Child>* impl,
        ::fidl::IncomingMessage& msg,
        internal::IncomingTransportContext transport_context,
        ::fidl::Transaction* txn) {
  return ::fidl::internal::TryDispatch(impl, msg, std::move(transport_context),
                                       txn, entries_, entries_end_);
}

void fidl::internal::WireServerDispatcher<::test_protocolrequest::Child>::
    Dispatch(::fidl::WireServer<::test_protocolrequest::Child>* impl,
             ::fidl::IncomingMessage&& msg,
             internal::IncomingTransportContext transport_context,
             ::fidl::Transaction* txn) {
  ::fidl::internal::Dispatch(impl, msg, std::move(transport_context), txn,
                             entries_, entries_end_);
}
void fidl::WireServer<::test_protocolrequest::Child>::dispatch_message(
    ::fidl::IncomingMessage&& msg, ::fidl::Transaction* txn,
    ::fidl::internal::IncomingTransportContext transport_context) {
  ::fidl::internal::WireServerDispatcher<
      ::test_protocolrequest::Child>::Dispatch(this, std::move(msg),
                                               std::move(transport_context),
                                               txn);
}
#endif  // __Fuchsia__

#ifdef __Fuchsia__

#endif  // __Fuchsia__
