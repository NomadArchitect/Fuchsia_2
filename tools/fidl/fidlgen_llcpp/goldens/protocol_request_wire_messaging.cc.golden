// WARNING: This file is machine generated by fidlgen.

#include <fidl/fidl.test.protocolrequest/cpp/wire_messaging.h>

#include <memory>

namespace fidl_test_protocolrequest {
[[maybe_unused]] constexpr uint64_t kParent_GetChild_Ordinal =
    7929845654914578302lu;

extern "C" const fidl_type_t
    fidl_test_protocolrequest_ParentGetChildRequestTable;

extern "C" const fidl_type_t
    fidl_test_protocolrequest_ParentGetChildResponseTable;

[[maybe_unused]] constexpr uint64_t kParent_GetChildRequest_Ordinal =
    1819029190665166744lu;

extern "C" const fidl_type_t
    fidl_test_protocolrequest_ParentGetChildRequestRequestTable;

extern "C" const fidl_type_t
    fidl_test_protocolrequest_ParentGetChildRequestResponseTable;

[[maybe_unused]] constexpr uint64_t kParent_TakeChild_Ordinal =
    374110854839013230lu;

extern "C" const fidl_type_t
    fidl_test_protocolrequest_ParentTakeChildRequestTable;

extern "C" const fidl_type_t
    fidl_test_protocolrequest_ParentTakeChildResponseTable;

[[maybe_unused]] constexpr uint64_t kParent_TakeChildRequest_Ordinal =
    1574820689302890956lu;

extern "C" const fidl_type_t
    fidl_test_protocolrequest_ParentTakeChildRequestRequestTable;

extern "C" const fidl_type_t
    fidl_test_protocolrequest_ParentTakeChildRequestResponseTable;
#ifdef __Fuchsia__
}  // namespace fidl_test_protocolrequest
::fidl::WireResult<::fidl_test_protocolrequest::Parent::GetChild>::WireResult(
    ::fidl::UnownedClientEnd<::fidl_test_protocolrequest::Parent> client,
    ::fidl::WireRequest<::fidl_test_protocolrequest::Parent::GetChild>*
        request) {
  FIDL_INTERNAL_DISABLE_AUTO_VAR_INIT
  ::fidl::OwnedEncodedMessage<
      ::fidl::WireRequest<::fidl_test_protocolrequest::Parent::GetChild>>
      request_message(::fidl::internal::AllowUnownedInputRef{}, request);
  auto& outgoing = request_message.GetOutgoingMessage();
  outgoing.Call<
      ::fidl::WireResponse<::fidl_test_protocolrequest::Parent::GetChild>>(
      client.channel(), bytes_.data(), static_cast<uint32_t>(bytes_.size()));
  SetResult(outgoing);
}

::fidl::WireResult<::fidl_test_protocolrequest::Parent::GetChild>::WireResult(
    ::fidl::UnownedClientEnd<::fidl_test_protocolrequest::Parent> client,
    ::fidl::WireRequest<::fidl_test_protocolrequest::Parent::GetChild>* request,
    zx_time_t deadline) {
  FIDL_INTERNAL_DISABLE_AUTO_VAR_INIT
  ::fidl::OwnedEncodedMessage<
      ::fidl::WireRequest<::fidl_test_protocolrequest::Parent::GetChild>>
      request_message(::fidl::internal::AllowUnownedInputRef{}, request);
  auto& outgoing = request_message.GetOutgoingMessage();
  outgoing.Call<
      ::fidl::WireResponse<::fidl_test_protocolrequest::Parent::GetChild>>(
      client.channel(), bytes_.data(), static_cast<uint32_t>(bytes_.size()),
      deadline);
  SetResult(outgoing);
}
namespace fidl_test_protocolrequest {
#endif  // __Fuchsia__

#ifdef __Fuchsia__
}  // namespace fidl_test_protocolrequest
::fidl::WireUnownedResult<::fidl_test_protocolrequest::Parent::GetChild>::
    WireUnownedResult(
        ::fidl::UnownedClientEnd<::fidl_test_protocolrequest::Parent> client,
        ::fidl::WireRequest<::fidl_test_protocolrequest::Parent::GetChild>*
            request,
        uint8_t* response_bytes, uint32_t response_byte_capacity)
    : bytes_(response_bytes) {
  FIDL_INTERNAL_DISABLE_AUTO_VAR_INIT
  ::fidl::OwnedEncodedMessage<
      ::fidl::WireRequest<::fidl_test_protocolrequest::Parent::GetChild>>
      request_message(::fidl::internal::AllowUnownedInputRef{}, request);
  auto& outgoing = request_message.GetOutgoingMessage();
  outgoing.Call<
      ::fidl::WireResponse<::fidl_test_protocolrequest::Parent::GetChild>>(
      client.channel(), response_bytes, response_byte_capacity);
  ::fidl::Result::operator=(outgoing);
}
namespace fidl_test_protocolrequest {
#endif  // __Fuchsia__

#ifdef __Fuchsia__
}  // namespace fidl_test_protocolrequest
::fidl::WireResult<::fidl_test_protocolrequest::Parent::GetChildRequest>::
    WireResult(
        ::fidl::UnownedClientEnd<::fidl_test_protocolrequest::Parent> client,
        ::fidl::WireRequest<
            ::fidl_test_protocolrequest::Parent::GetChildRequest>* request) {
  FIDL_INTERNAL_DISABLE_AUTO_VAR_INIT
  ::fidl::OwnedEncodedMessage<
      ::fidl::WireRequest<::fidl_test_protocolrequest::Parent::GetChildRequest>>
      request_message(::fidl::internal::AllowUnownedInputRef{}, request);
  auto& outgoing = request_message.GetOutgoingMessage();
  outgoing.Call<::fidl::WireResponse<
      ::fidl_test_protocolrequest::Parent::GetChildRequest>>(
      client.channel(), bytes_.data(), static_cast<uint32_t>(bytes_.size()));
  SetResult(outgoing);
}

::fidl::WireResult<::fidl_test_protocolrequest::Parent::GetChildRequest>::
    WireResult(
        ::fidl::UnownedClientEnd<::fidl_test_protocolrequest::Parent> client,
        ::fidl::WireRequest<
            ::fidl_test_protocolrequest::Parent::GetChildRequest>* request,
        zx_time_t deadline) {
  FIDL_INTERNAL_DISABLE_AUTO_VAR_INIT
  ::fidl::OwnedEncodedMessage<
      ::fidl::WireRequest<::fidl_test_protocolrequest::Parent::GetChildRequest>>
      request_message(::fidl::internal::AllowUnownedInputRef{}, request);
  auto& outgoing = request_message.GetOutgoingMessage();
  outgoing.Call<::fidl::WireResponse<
      ::fidl_test_protocolrequest::Parent::GetChildRequest>>(
      client.channel(), bytes_.data(), static_cast<uint32_t>(bytes_.size()),
      deadline);
  SetResult(outgoing);
}
namespace fidl_test_protocolrequest {
#endif  // __Fuchsia__

#ifdef __Fuchsia__
}  // namespace fidl_test_protocolrequest
::fidl::WireUnownedResult<
    ::fidl_test_protocolrequest::Parent::GetChildRequest>::
    WireUnownedResult(
        ::fidl::UnownedClientEnd<::fidl_test_protocolrequest::Parent> client,
        ::fidl::WireRequest<
            ::fidl_test_protocolrequest::Parent::GetChildRequest>* request,
        uint8_t* response_bytes, uint32_t response_byte_capacity)
    : bytes_(response_bytes) {
  FIDL_INTERNAL_DISABLE_AUTO_VAR_INIT
  ::fidl::OwnedEncodedMessage<
      ::fidl::WireRequest<::fidl_test_protocolrequest::Parent::GetChildRequest>>
      request_message(::fidl::internal::AllowUnownedInputRef{}, request);
  auto& outgoing = request_message.GetOutgoingMessage();
  outgoing.Call<::fidl::WireResponse<
      ::fidl_test_protocolrequest::Parent::GetChildRequest>>(
      client.channel(), response_bytes, response_byte_capacity);
  ::fidl::Result::operator=(outgoing);
}
namespace fidl_test_protocolrequest {
#endif  // __Fuchsia__

#ifdef __Fuchsia__
}  // namespace fidl_test_protocolrequest
::fidl::WireResult<::fidl_test_protocolrequest::Parent::TakeChild>::WireResult(
    ::fidl::UnownedClientEnd<::fidl_test_protocolrequest::Parent> client,
    ::fidl::WireRequest<::fidl_test_protocolrequest::Parent::TakeChild>*
        request) {
  FIDL_INTERNAL_DISABLE_AUTO_VAR_INIT
  ::fidl::OwnedEncodedMessage<
      ::fidl::WireRequest<::fidl_test_protocolrequest::Parent::TakeChild>>
      request_message(::fidl::internal::AllowUnownedInputRef{}, request);
  auto& outgoing = request_message.GetOutgoingMessage();
  outgoing.Write(client.channel());
  SetResult(outgoing);
}
namespace fidl_test_protocolrequest {
#endif  // __Fuchsia__

#ifdef __Fuchsia__
}  // namespace fidl_test_protocolrequest
::fidl::WireUnownedResult<::fidl_test_protocolrequest::Parent::TakeChild>::
    WireUnownedResult(
        ::fidl::UnownedClientEnd<::fidl_test_protocolrequest::Parent> client,
        uint8_t* request_bytes, uint32_t request_byte_capacity,
        ::fidl::WireRequest<::fidl_test_protocolrequest::Parent::TakeChild>*
            request) {
  ::fidl::UnownedEncodedMessage<
      ::fidl::WireRequest<::fidl_test_protocolrequest::Parent::TakeChild>>
      request_message(request_bytes, request_byte_capacity, request);
  auto& outgoing = request_message.GetOutgoingMessage();
  outgoing.Write(client.channel());
  ::fidl::Result::operator=(outgoing);
}
namespace fidl_test_protocolrequest {
#endif  // __Fuchsia__

#ifdef __Fuchsia__
}  // namespace fidl_test_protocolrequest
::fidl::WireResult<::fidl_test_protocolrequest::Parent::TakeChildRequest>::
    WireResult(
        ::fidl::UnownedClientEnd<::fidl_test_protocolrequest::Parent> client,
        ::fidl::WireRequest<
            ::fidl_test_protocolrequest::Parent::TakeChildRequest>* request) {
  FIDL_INTERNAL_DISABLE_AUTO_VAR_INIT
  ::fidl::OwnedEncodedMessage<::fidl::WireRequest<
      ::fidl_test_protocolrequest::Parent::TakeChildRequest>>
      request_message(::fidl::internal::AllowUnownedInputRef{}, request);
  auto& outgoing = request_message.GetOutgoingMessage();
  outgoing.Write(client.channel());
  SetResult(outgoing);
}
namespace fidl_test_protocolrequest {
#endif  // __Fuchsia__

#ifdef __Fuchsia__
}  // namespace fidl_test_protocolrequest
::fidl::WireUnownedResult<
    ::fidl_test_protocolrequest::Parent::TakeChildRequest>::
    WireUnownedResult(
        ::fidl::UnownedClientEnd<::fidl_test_protocolrequest::Parent> client,
        uint8_t* request_bytes, uint32_t request_byte_capacity,
        ::fidl::WireRequest<
            ::fidl_test_protocolrequest::Parent::TakeChildRequest>* request) {
  ::fidl::UnownedEncodedMessage<::fidl::WireRequest<
      ::fidl_test_protocolrequest::Parent::TakeChildRequest>>
      request_message(request_bytes, request_byte_capacity, request);
  auto& outgoing = request_message.GetOutgoingMessage();
  outgoing.Write(client.channel());
  ::fidl::Result::operator=(outgoing);
}
namespace fidl_test_protocolrequest {
#endif  // __Fuchsia__

}  // namespace fidl_test_protocolrequest
#ifdef __Fuchsia__

::fidl::WireResponseContext<
    ::fidl_test_protocolrequest::Parent::GetChild>::WireResponseContext()
    : ::fidl::internal::ResponseContext(
          ::fidl_test_protocolrequest::kParent_GetChild_Ordinal) {}

::cpp17::optional<::fidl::UnbindInfo>
fidl::WireResponseContext<::fidl_test_protocolrequest::Parent::GetChild>::
    OnRawResult(::fidl::IncomingMessage&& msg) {
  if (unlikely(!msg.ok())) {
    ::fidl::WireUnownedResult<::fidl_test_protocolrequest::Parent::GetChild>
        result{msg.error()};
    OnResult(result);
    return cpp17::nullopt;
  }
  ::fidl::DecodedMessage<
      ::fidl::WireResponse<::fidl_test_protocolrequest::Parent::GetChild>>
      decoded{std::move(msg)};
  ::fidl::Result maybe_error = decoded;
  ::fidl::WireUnownedResult<::fidl_test_protocolrequest::Parent::GetChild>
      result{std::move(decoded)};
  OnResult(result);
  if (unlikely(!maybe_error.ok())) {
    return ::fidl::UnbindInfo(maybe_error);
  }
  return cpp17::nullopt;
}
#endif  // __Fuchsia__

#ifdef __Fuchsia__

::fidl::WireResponseContext<
    ::fidl_test_protocolrequest::Parent::GetChildRequest>::WireResponseContext()
    : ::fidl::internal::ResponseContext(
          ::fidl_test_protocolrequest::kParent_GetChildRequest_Ordinal) {}

::cpp17::optional<::fidl::UnbindInfo> fidl::WireResponseContext<
    ::fidl_test_protocolrequest::Parent::GetChildRequest>::
    OnRawResult(::fidl::IncomingMessage&& msg) {
  if (unlikely(!msg.ok())) {
    ::fidl::WireUnownedResult<
        ::fidl_test_protocolrequest::Parent::GetChildRequest>
        result{msg.error()};
    OnResult(result);
    return cpp17::nullopt;
  }
  ::fidl::DecodedMessage<::fidl::WireResponse<
      ::fidl_test_protocolrequest::Parent::GetChildRequest>>
      decoded{std::move(msg)};
  ::fidl::Result maybe_error = decoded;
  ::fidl::WireUnownedResult<
      ::fidl_test_protocolrequest::Parent::GetChildRequest>
      result{std::move(decoded)};
  OnResult(result);
  if (unlikely(!maybe_error.ok())) {
    return ::fidl::UnbindInfo(maybe_error);
  }
  return cpp17::nullopt;
}
#endif  // __Fuchsia__

#ifdef __Fuchsia__

void fidl::internal::WireClientImpl<::fidl_test_protocolrequest::Parent>::
    GetChild(::fidl::WireClientCallback<
             ::fidl_test_protocolrequest::Parent::GetChild>
                 _cb) {
  using Callback = decltype(_cb);
  class ResponseContext final
      : public ::fidl::WireResponseContext<
            ::fidl_test_protocolrequest::Parent::GetChild> {
   public:
    ResponseContext(Callback cb) : cb_(std::move(cb)) {}

    void OnResult(
        ::fidl::WireUnownedResult<
            ::fidl_test_protocolrequest::Parent::GetChild>& result) override {
      cb_(result);
      delete this;
    }

   private:
    Callback cb_;
  };

  auto* _context = new ResponseContext(std::move(_cb));
  ::fidl::WireRequest<::fidl_test_protocolrequest::Parent::GetChild> _request{};
  FIDL_INTERNAL_DISABLE_AUTO_VAR_INIT
  ::fidl::WireRequest<::fidl_test_protocolrequest::Parent::GetChild>::
      OwnedEncodedMessage _request_message(
          ::fidl::internal::AllowUnownedInputRef{}, &_request);
  ::fidl::internal::ClientBase::SendTwoWay(
      _request_message.GetOutgoingMessage(), _context);
}

void fidl::internal::WireClientImpl<::fidl_test_protocolrequest::Parent>::
    GetChild(::fit::callback<
             void(::fidl::WireResponse<
                  ::fidl_test_protocolrequest::Parent::GetChild>* response)>
                 _cb) {
  using Callback = decltype(_cb);
  class ResponseContext final
      : public ::fidl::WireResponseContext<
            ::fidl_test_protocolrequest::Parent::GetChild> {
   public:
    ResponseContext(Callback cb) : cb_(std::move(cb)) {}

    void OnResult(
        ::fidl::WireUnownedResult<
            ::fidl_test_protocolrequest::Parent::GetChild>& result) override {
      if (result.ok()) {
        ::fidl::WireResponse<::fidl_test_protocolrequest::Parent::GetChild>*
            response = result.Unwrap();
        cb_(response);
      }
      delete this;
    }

   private:
    Callback cb_;
  };

  auto* _context = new ResponseContext(std::move(_cb));
  ::fidl::WireRequest<::fidl_test_protocolrequest::Parent::GetChild> _request{};
  FIDL_INTERNAL_DISABLE_AUTO_VAR_INIT
  ::fidl::WireRequest<::fidl_test_protocolrequest::Parent::GetChild>::
      OwnedEncodedMessage _request_message(
          ::fidl::internal::AllowUnownedInputRef{}, &_request);
  ::fidl::internal::ClientBase::SendTwoWay(
      _request_message.GetOutgoingMessage(), _context);
}
void fidl::internal::WireClientImpl<::fidl_test_protocolrequest::Parent>::
    GetChild(::fidl::WireResponseContext<
             ::fidl_test_protocolrequest::Parent::GetChild>* _context) {
  ::fidl::WireRequest<::fidl_test_protocolrequest::Parent::GetChild> _request{};

  FIDL_INTERNAL_DISABLE_AUTO_VAR_INIT
  ::fidl::WireRequest<::fidl_test_protocolrequest::Parent::GetChild>::
      OwnedEncodedMessage _request_message(
          ::fidl::internal::AllowUnownedInputRef{}, &_request);
  ::fidl::internal::ClientBase::SendTwoWay(
      _request_message.GetOutgoingMessage(), _context);
}
::fidl::WireResult<::fidl_test_protocolrequest::Parent::GetChild>
fidl::internal::WireClientImpl<
    ::fidl_test_protocolrequest::Parent>::GetChild_Sync() {
  return ::fidl::internal::ClientBase::MakeSyncCallWith(
      [&](std::shared_ptr<::fidl::internal::AnyTransport> _transport) {
        ::fidl::WireRequest<::fidl_test_protocolrequest::Parent::GetChild>
            _request{};
        return ::fidl::WireResult<
            ::fidl_test_protocolrequest::Parent::GetChild>(
            ::fidl::UnownedClientEnd<::fidl_test_protocolrequest::Parent>(
                _transport->get<fidl::internal::ChannelTransport>()),
            &_request);
      });
}
::fidl::WireUnownedResult<::fidl_test_protocolrequest::Parent::GetChild>
fidl::internal::WireClientImpl<::fidl_test_protocolrequest::Parent>::
    GetChild_Sync(::fidl::BufferSpan _response_buffer) {
  return ::fidl::internal::ClientBase::MakeSyncCallWith(
      [&](std::shared_ptr<::fidl::internal::AnyTransport> _transport) {
        ::fidl::WireRequest<::fidl_test_protocolrequest::Parent::GetChild>
            _request{};
        return ::fidl::WireUnownedResult<
            ::fidl_test_protocolrequest::Parent::GetChild>(
            ::fidl::UnownedClientEnd<::fidl_test_protocolrequest::Parent>(
                _transport->get<fidl::internal::ChannelTransport>()),
            &_request, _response_buffer.data, _response_buffer.capacity);
      });
}
void fidl::internal::WireClientImpl<::fidl_test_protocolrequest::Parent>::
    GetChildRequest(::fidl::WireClientCallback<
                    ::fidl_test_protocolrequest::Parent::GetChildRequest>
                        _cb) {
  using Callback = decltype(_cb);
  class ResponseContext final
      : public ::fidl::WireResponseContext<
            ::fidl_test_protocolrequest::Parent::GetChildRequest> {
   public:
    ResponseContext(Callback cb) : cb_(std::move(cb)) {}

    void OnResult(::fidl::WireUnownedResult<
                  ::fidl_test_protocolrequest::Parent::GetChildRequest>& result)
        override {
      cb_(result);
      delete this;
    }

   private:
    Callback cb_;
  };

  auto* _context = new ResponseContext(std::move(_cb));
  ::fidl::WireRequest<::fidl_test_protocolrequest::Parent::GetChildRequest>
      _request{};
  FIDL_INTERNAL_DISABLE_AUTO_VAR_INIT
  ::fidl::WireRequest<::fidl_test_protocolrequest::Parent::GetChildRequest>::
      OwnedEncodedMessage _request_message(
          ::fidl::internal::AllowUnownedInputRef{}, &_request);
  ::fidl::internal::ClientBase::SendTwoWay(
      _request_message.GetOutgoingMessage(), _context);
}

void fidl::internal::WireClientImpl<::fidl_test_protocolrequest::Parent>::
    GetChildRequest(::fit::callback<
                    void(::fidl::WireResponse<
                         ::fidl_test_protocolrequest::Parent::GetChildRequest>*
                             response)>
                        _cb) {
  using Callback = decltype(_cb);
  class ResponseContext final
      : public ::fidl::WireResponseContext<
            ::fidl_test_protocolrequest::Parent::GetChildRequest> {
   public:
    ResponseContext(Callback cb) : cb_(std::move(cb)) {}

    void OnResult(::fidl::WireUnownedResult<
                  ::fidl_test_protocolrequest::Parent::GetChildRequest>& result)
        override {
      if (result.ok()) {
        ::fidl::WireResponse<
            ::fidl_test_protocolrequest::Parent::GetChildRequest>* response =
            result.Unwrap();
        cb_(response);
      }
      delete this;
    }

   private:
    Callback cb_;
  };

  auto* _context = new ResponseContext(std::move(_cb));
  ::fidl::WireRequest<::fidl_test_protocolrequest::Parent::GetChildRequest>
      _request{};
  FIDL_INTERNAL_DISABLE_AUTO_VAR_INIT
  ::fidl::WireRequest<::fidl_test_protocolrequest::Parent::GetChildRequest>::
      OwnedEncodedMessage _request_message(
          ::fidl::internal::AllowUnownedInputRef{}, &_request);
  ::fidl::internal::ClientBase::SendTwoWay(
      _request_message.GetOutgoingMessage(), _context);
}
void fidl::internal::WireClientImpl<::fidl_test_protocolrequest::Parent>::
    GetChildRequest(
        ::fidl::WireResponseContext<
            ::fidl_test_protocolrequest::Parent::GetChildRequest>* _context) {
  ::fidl::WireRequest<::fidl_test_protocolrequest::Parent::GetChildRequest>
      _request{};

  FIDL_INTERNAL_DISABLE_AUTO_VAR_INIT
  ::fidl::WireRequest<::fidl_test_protocolrequest::Parent::GetChildRequest>::
      OwnedEncodedMessage _request_message(
          ::fidl::internal::AllowUnownedInputRef{}, &_request);
  ::fidl::internal::ClientBase::SendTwoWay(
      _request_message.GetOutgoingMessage(), _context);
}
::fidl::WireResult<::fidl_test_protocolrequest::Parent::GetChildRequest>
fidl::internal::WireClientImpl<
    ::fidl_test_protocolrequest::Parent>::GetChildRequest_Sync() {
  return ::fidl::internal::ClientBase::MakeSyncCallWith(
      [&](std::shared_ptr<::fidl::internal::AnyTransport> _transport) {
        ::fidl::WireRequest<
            ::fidl_test_protocolrequest::Parent::GetChildRequest>
            _request{};
        return ::fidl::WireResult<
            ::fidl_test_protocolrequest::Parent::GetChildRequest>(
            ::fidl::UnownedClientEnd<::fidl_test_protocolrequest::Parent>(
                _transport->get<fidl::internal::ChannelTransport>()),
            &_request);
      });
}
::fidl::WireUnownedResult<::fidl_test_protocolrequest::Parent::GetChildRequest>
fidl::internal::WireClientImpl<::fidl_test_protocolrequest::Parent>::
    GetChildRequest_Sync(::fidl::BufferSpan _response_buffer) {
  return ::fidl::internal::ClientBase::MakeSyncCallWith(
      [&](std::shared_ptr<::fidl::internal::AnyTransport> _transport) {
        ::fidl::WireRequest<
            ::fidl_test_protocolrequest::Parent::GetChildRequest>
            _request{};
        return ::fidl::WireUnownedResult<
            ::fidl_test_protocolrequest::Parent::GetChildRequest>(
            ::fidl::UnownedClientEnd<::fidl_test_protocolrequest::Parent>(
                _transport->get<fidl::internal::ChannelTransport>()),
            &_request, _response_buffer.data, _response_buffer.capacity);
      });
}
::fidl::Result
fidl::internal::WireClientImpl<::fidl_test_protocolrequest::Parent>::TakeChild(
    ::fidl::ClientEnd<::fidl_test_protocolrequest::Child>&& c) {
  FIDL_INTERNAL_DISABLE_AUTO_VAR_INIT
  ::fidl::WireRequest<::fidl_test_protocolrequest::Parent::TakeChild>
      _request_object{std::move(c)};
  ::fidl::OwnedEncodedMessage<
      ::fidl::WireRequest<::fidl_test_protocolrequest::Parent::TakeChild>>
      _request_message(::fidl::internal::AllowUnownedInputRef{},
                       &_request_object);
  return ::fidl::internal::ClientBase::SendOneWay(
      _request_message.GetOutgoingMessage());
}
::fidl::Result
fidl::internal::WireClientImpl<::fidl_test_protocolrequest::Parent>::TakeChild(
    ::fidl::BufferSpan _request_buffer,
    ::fidl::ClientEnd<::fidl_test_protocolrequest::Child>&& c) {
  ::fidl::WireRequest<::fidl_test_protocolrequest::Parent::TakeChild>
      _request_object{std::move(c)};
  ::fidl::UnownedEncodedMessage<
      ::fidl::WireRequest<::fidl_test_protocolrequest::Parent::TakeChild>>
      _request_message(_request_buffer.data, _request_buffer.capacity,
                       &_request_object);
  return ::fidl::internal::ClientBase::SendOneWay(
      _request_message.GetOutgoingMessage());
}
::fidl::Result fidl::internal::
    WireClientImpl<::fidl_test_protocolrequest::Parent>::TakeChildRequest(
        ::fidl::ServerEnd<::fidl_test_protocolrequest::Child>&& r) {
  FIDL_INTERNAL_DISABLE_AUTO_VAR_INIT
  ::fidl::WireRequest<::fidl_test_protocolrequest::Parent::TakeChildRequest>
      _request_object{std::move(r)};
  ::fidl::OwnedEncodedMessage<::fidl::WireRequest<
      ::fidl_test_protocolrequest::Parent::TakeChildRequest>>
      _request_message(::fidl::internal::AllowUnownedInputRef{},
                       &_request_object);
  return ::fidl::internal::ClientBase::SendOneWay(
      _request_message.GetOutgoingMessage());
}
::fidl::Result fidl::internal::
    WireClientImpl<::fidl_test_protocolrequest::Parent>::TakeChildRequest(
        ::fidl::BufferSpan _request_buffer,
        ::fidl::ServerEnd<::fidl_test_protocolrequest::Child>&& r) {
  ::fidl::WireRequest<::fidl_test_protocolrequest::Parent::TakeChildRequest>
      _request_object{std::move(r)};
  ::fidl::UnownedEncodedMessage<::fidl::WireRequest<
      ::fidl_test_protocolrequest::Parent::TakeChildRequest>>
      _request_message(_request_buffer.data, _request_buffer.capacity,
                       &_request_object);
  return ::fidl::internal::ClientBase::SendOneWay(
      _request_message.GetOutgoingMessage());
}

std::optional<::fidl::UnbindInfo> fidl::internal::
    WireClientImpl<::fidl_test_protocolrequest::Parent>::DispatchEvent(
        fidl::IncomingMessage& msg,
        ::fidl::internal::AsyncEventHandler* maybe_event_handler) {
  return ::fidl::UnbindInfo::UnknownOrdinal();
}
#endif  // __Fuchsia__

#ifdef __Fuchsia__

constexpr ::fidl::internal::MethodEntry fidl::internal::WireServerDispatcher<
    ::fidl_test_protocolrequest::Parent>::entries_[] = {
    {
        ::fidl_test_protocolrequest::kParent_GetChild_Ordinal,
        [](void* interface, ::fidl::IncomingMessage&& msg,
           ::fidl::Transaction* txn) {
          auto* primary = reinterpret_cast<::fidl::WireRequest<
              ::fidl_test_protocolrequest::Parent::GetChild>*>(msg.bytes());
          ::fidl::internal::WireCompleter<
              ::fidl_test_protocolrequest::Parent::GetChild>::Sync
              completer(txn);
          reinterpret_cast<
              ::fidl::WireServer<::fidl_test_protocolrequest::Parent>*>(
              interface)
              ->GetChild(primary, completer);
          return ZX_OK;
        },
    },
    {
        ::fidl_test_protocolrequest::kParent_GetChildRequest_Ordinal,
        [](void* interface, ::fidl::IncomingMessage&& msg,
           ::fidl::Transaction* txn) {
          auto* primary = reinterpret_cast<::fidl::WireRequest<
              ::fidl_test_protocolrequest::Parent::GetChildRequest>*>(
              msg.bytes());
          ::fidl::internal::WireCompleter<
              ::fidl_test_protocolrequest::Parent::GetChildRequest>::Sync
              completer(txn);
          reinterpret_cast<
              ::fidl::WireServer<::fidl_test_protocolrequest::Parent>*>(
              interface)
              ->GetChildRequest(primary, completer);
          return ZX_OK;
        },
    },
    {
        ::fidl_test_protocolrequest::kParent_TakeChild_Ordinal,
        [](void* interface, ::fidl::IncomingMessage&& msg,
           ::fidl::Transaction* txn) {
          ::fidl::DecodedMessage<::fidl::WireRequest<
              ::fidl_test_protocolrequest::Parent::TakeChild>>
              decoded{std::move(msg)};
          if (unlikely(!decoded.ok())) {
            return decoded.status();
          }
          auto* primary = decoded.PrimaryObject();
          ::fidl::internal::WireCompleter<
              ::fidl_test_protocolrequest::Parent::TakeChild>::Sync
              completer(txn);
          reinterpret_cast<
              ::fidl::WireServer<::fidl_test_protocolrequest::Parent>*>(
              interface)
              ->TakeChild(primary, completer);
          return ZX_OK;
        },
    },
    {
        ::fidl_test_protocolrequest::kParent_TakeChildRequest_Ordinal,
        [](void* interface, ::fidl::IncomingMessage&& msg,
           ::fidl::Transaction* txn) {
          ::fidl::DecodedMessage<::fidl::WireRequest<
              ::fidl_test_protocolrequest::Parent::TakeChildRequest>>
              decoded{std::move(msg)};
          if (unlikely(!decoded.ok())) {
            return decoded.status();
          }
          auto* primary = decoded.PrimaryObject();
          ::fidl::internal::WireCompleter<
              ::fidl_test_protocolrequest::Parent::TakeChildRequest>::Sync
              completer(txn);
          reinterpret_cast<
              ::fidl::WireServer<::fidl_test_protocolrequest::Parent>*>(
              interface)
              ->TakeChildRequest(primary, completer);
          return ZX_OK;
        },
    },
};

const ::fidl::internal::MethodEntry* fidl::internal::WireServerDispatcher<
    ::fidl_test_protocolrequest::Parent>::entries_end_ = &entries_[4];

::fidl::DispatchResult fidl::internal::
    WireServerDispatcher<::fidl_test_protocolrequest::Parent>::TryDispatch(
        ::fidl::WireServer<::fidl_test_protocolrequest::Parent>* impl,
        ::fidl::IncomingMessage& msg, ::fidl::Transaction* txn) {
  return ::fidl::internal::TryDispatch(impl, msg, txn, entries_, entries_end_);
}

void fidl::internal::WireServerDispatcher<::fidl_test_protocolrequest::Parent>::
    Dispatch(::fidl::WireServer<::fidl_test_protocolrequest::Parent>* impl,
             ::fidl::IncomingMessage&& msg, ::fidl::Transaction* txn) {
  ::fidl::internal::Dispatch(impl, msg, txn, entries_, entries_end_);
}
void fidl::WireServer<::fidl_test_protocolrequest::Parent>::dispatch_message(
    fidl::IncomingMessage&& msg, ::fidl::Transaction* txn) {
  ::fidl::internal::WireServerDispatcher<
      ::fidl_test_protocolrequest::Parent>::Dispatch(this, std::move(msg), txn);
}
#endif  // __Fuchsia__

#ifdef __Fuchsia__
::fidl::Result fidl::internal::
    WireCompleterBase<::fidl_test_protocolrequest::Parent::GetChild>::Reply(
        ::fidl::ClientEnd<::fidl_test_protocolrequest::Child>&& c) {
  ::fidl::WireResponse<::fidl_test_protocolrequest::Parent::GetChild> _response{
      std::move(c)};
  FIDL_INTERNAL_DISABLE_AUTO_VAR_INIT
  ::fidl::OwnedEncodedMessage<
      ::fidl::WireResponse<::fidl_test_protocolrequest::Parent::GetChild>>
      _response_message{::fidl::internal::AllowUnownedInputRef{}, &_response};
  return ::fidl::internal::WireCompleterBase<
      ::fidl_test_protocolrequest::Parent::GetChild>::
      SendReply(&_response_message.GetOutgoingMessage());
}

::fidl::Result fidl::internal::
    WireCompleterBase<::fidl_test_protocolrequest::Parent::GetChild>::Reply(
        ::fidl::BufferSpan _buffer,
        ::fidl::ClientEnd<::fidl_test_protocolrequest::Child>&& c) {
  ::fidl::WireResponse<::fidl_test_protocolrequest::Parent::GetChild> _response{
      std::move(c)};
  ::fidl::WireResponse<::fidl_test_protocolrequest::Parent::GetChild>::
      UnownedEncodedMessage _response_message(_buffer.data, _buffer.capacity,
                                              &_response);
  return CompleterBase::SendReply(&_response_message.GetOutgoingMessage());
}
#endif  // __Fuchsia__

#ifdef __Fuchsia__
::fidl::Result fidl::internal::WireCompleterBase<
    ::fidl_test_protocolrequest::Parent::GetChildRequest>::
    Reply(::fidl::ServerEnd<::fidl_test_protocolrequest::Child>&& r) {
  ::fidl::WireResponse<::fidl_test_protocolrequest::Parent::GetChildRequest>
      _response{std::move(r)};
  FIDL_INTERNAL_DISABLE_AUTO_VAR_INIT
  ::fidl::OwnedEncodedMessage<::fidl::WireResponse<
      ::fidl_test_protocolrequest::Parent::GetChildRequest>>
      _response_message{::fidl::internal::AllowUnownedInputRef{}, &_response};
  return ::fidl::internal::WireCompleterBase<
      ::fidl_test_protocolrequest::Parent::GetChildRequest>::
      SendReply(&_response_message.GetOutgoingMessage());
}

::fidl::Result fidl::internal::WireCompleterBase<
    ::fidl_test_protocolrequest::Parent::GetChildRequest>::
    Reply(::fidl::BufferSpan _buffer,
          ::fidl::ServerEnd<::fidl_test_protocolrequest::Child>&& r) {
  ::fidl::WireResponse<::fidl_test_protocolrequest::Parent::GetChildRequest>
      _response{std::move(r)};
  ::fidl::WireResponse<::fidl_test_protocolrequest::Parent::GetChildRequest>::
      UnownedEncodedMessage _response_message(_buffer.data, _buffer.capacity,
                                              &_response);
  return CompleterBase::SendReply(&_response_message.GetOutgoingMessage());
}
#endif  // __Fuchsia__

void ::fidl::WireRequest<
    ::fidl_test_protocolrequest::Parent::GetChild>::_InitHeader() {
  fidl_init_txn_header(&_hdr, 0,
                       ::fidl_test_protocolrequest::kParent_GetChild_Ordinal);
}

#ifdef __Fuchsia__

void ::fidl::WireResponse<
    ::fidl_test_protocolrequest::Parent::GetChild>::_InitHeader() {
  fidl_init_txn_header(&_hdr, 0,
                       ::fidl_test_protocolrequest::kParent_GetChild_Ordinal);
}

void ::fidl::WireResponse<
    ::fidl_test_protocolrequest::Parent::GetChild>::_CloseHandles() {
  c.reset();
}
#endif  // __Fuchsia__

void ::fidl::WireRequest<
    ::fidl_test_protocolrequest::Parent::GetChildRequest>::_InitHeader() {
  fidl_init_txn_header(
      &_hdr, 0, ::fidl_test_protocolrequest::kParent_GetChildRequest_Ordinal);
}

#ifdef __Fuchsia__

void ::fidl::WireResponse<
    ::fidl_test_protocolrequest::Parent::GetChildRequest>::_InitHeader() {
  fidl_init_txn_header(
      &_hdr, 0, ::fidl_test_protocolrequest::kParent_GetChildRequest_Ordinal);
}

void ::fidl::WireResponse<
    ::fidl_test_protocolrequest::Parent::GetChildRequest>::_CloseHandles() {
  r.reset();
}
#endif  // __Fuchsia__

#ifdef __Fuchsia__

void ::fidl::WireRequest<
    ::fidl_test_protocolrequest::Parent::TakeChild>::_InitHeader() {
  fidl_init_txn_header(&_hdr, 0,
                       ::fidl_test_protocolrequest::kParent_TakeChild_Ordinal);
}

void ::fidl::WireRequest<
    ::fidl_test_protocolrequest::Parent::TakeChild>::_CloseHandles() {
  c.reset();
}
#endif  // __Fuchsia__

#ifdef __Fuchsia__

void ::fidl::WireRequest<
    ::fidl_test_protocolrequest::Parent::TakeChildRequest>::_InitHeader() {
  fidl_init_txn_header(
      &_hdr, 0, ::fidl_test_protocolrequest::kParent_TakeChildRequest_Ordinal);
}

void ::fidl::WireRequest<
    ::fidl_test_protocolrequest::Parent::TakeChildRequest>::_CloseHandles() {
  r.reset();
}
#endif  // __Fuchsia__

#ifdef __Fuchsia__

#endif  // __Fuchsia__

#ifdef __Fuchsia__

std::optional<::fidl::UnbindInfo> fidl::internal::
    WireClientImpl<::fidl_test_protocolrequest::Child>::DispatchEvent(
        fidl::IncomingMessage& msg,
        ::fidl::internal::AsyncEventHandler* maybe_event_handler) {
  return ::fidl::UnbindInfo::UnknownOrdinal();
}
#endif  // __Fuchsia__

#ifdef __Fuchsia__

constexpr ::fidl::internal::MethodEntry fidl::internal::WireServerDispatcher<
    ::fidl_test_protocolrequest::Child>::entries_[] = {};

const ::fidl::internal::MethodEntry* fidl::internal::WireServerDispatcher<
    ::fidl_test_protocolrequest::Child>::entries_end_ = &entries_[0];

::fidl::DispatchResult fidl::internal::
    WireServerDispatcher<::fidl_test_protocolrequest::Child>::TryDispatch(
        ::fidl::WireServer<::fidl_test_protocolrequest::Child>* impl,
        ::fidl::IncomingMessage& msg, ::fidl::Transaction* txn) {
  return ::fidl::internal::TryDispatch(impl, msg, txn, entries_, entries_end_);
}

void fidl::internal::WireServerDispatcher<::fidl_test_protocolrequest::Child>::
    Dispatch(::fidl::WireServer<::fidl_test_protocolrequest::Child>* impl,
             ::fidl::IncomingMessage&& msg, ::fidl::Transaction* txn) {
  ::fidl::internal::Dispatch(impl, msg, txn, entries_, entries_end_);
}
void fidl::WireServer<::fidl_test_protocolrequest::Child>::dispatch_message(
    fidl::IncomingMessage&& msg, ::fidl::Transaction* txn) {
  ::fidl::internal::WireServerDispatcher<
      ::fidl_test_protocolrequest::Child>::Dispatch(this, std::move(msg), txn);
}
#endif  // __Fuchsia__

#ifdef __Fuchsia__

#endif  // __Fuchsia__
