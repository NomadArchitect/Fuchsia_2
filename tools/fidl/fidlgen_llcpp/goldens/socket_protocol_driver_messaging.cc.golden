// WARNING: This file is machine generated by fidlgen.

#include <fidl/fidl.test.socketprotocol/cpp/driver_messaging.h>

#include <memory>

namespace fidl_test_socketprotocol {
[[maybe_unused]] constexpr uint64_t
    kWithAndWithoutRequestResponse_NoRequestNoResponse_Ordinal =
        6458717867077071333lu;

extern "C" const fidl_type_t
    fidl_test_socketprotocol_WithAndWithoutRequestResponseNoRequestNoResponseRequestTable;

extern "C" const fidl_type_t
    fidl_test_socketprotocol_WithAndWithoutRequestResponseNoRequestNoResponseResponseTable;

[[maybe_unused]] constexpr uint64_t
    kWithAndWithoutRequestResponse_NoRequestEmptyResponse_Ordinal =
        1500216538659752669lu;

extern "C" const fidl_type_t
    fidl_test_socketprotocol_WithAndWithoutRequestResponseNoRequestEmptyResponseRequestTable;

extern "C" const fidl_type_t
    fidl_test_socketprotocol_WithAndWithoutRequestResponseNoRequestEmptyResponseResponseTable;

[[maybe_unused]] constexpr uint64_t
    kWithAndWithoutRequestResponse_NoRequestWithResponse_Ordinal =
        4096394414503532493lu;

extern "C" const fidl_type_t
    fidl_test_socketprotocol_WithAndWithoutRequestResponseNoRequestWithResponseRequestTable;

extern "C" const fidl_type_t
    fidl_test_socketprotocol_WithAndWithoutRequestResponseNoRequestWithResponseResponseTable;

[[maybe_unused]] constexpr uint64_t
    kWithAndWithoutRequestResponse_WithRequestNoResponse_Ordinal =
        3153049930443027759lu;

extern "C" const fidl_type_t
    fidl_test_socketprotocol_WithAndWithoutRequestResponseWithRequestNoResponseRequestTable;

extern "C" const fidl_type_t
    fidl_test_socketprotocol_WithAndWithoutRequestResponseWithRequestNoResponseResponseTable;

[[maybe_unused]] constexpr uint64_t
    kWithAndWithoutRequestResponse_WithRequestEmptyResponse_Ordinal =
        2166952728171652732lu;

extern "C" const fidl_type_t
    fidl_test_socketprotocol_WithAndWithoutRequestResponseWithRequestEmptyResponseRequestTable;

extern "C" const fidl_type_t
    fidl_test_socketprotocol_WithAndWithoutRequestResponseWithRequestEmptyResponseResponseTable;

[[maybe_unused]] constexpr uint64_t
    kWithAndWithoutRequestResponse_WithRequestWithResponse_Ordinal =
        4386901167710485649lu;

extern "C" const fidl_type_t
    fidl_test_socketprotocol_WithAndWithoutRequestResponseWithRequestWithResponseRequestTable;

extern "C" const fidl_type_t
    fidl_test_socketprotocol_WithAndWithoutRequestResponseWithRequestWithResponseResponseTable;
#ifdef __Fuchsia__
}  // namespace fidl_test_socketprotocol
::fidl::WireResult<::fidl_test_socketprotocol::WithAndWithoutRequestResponse::
                       NoRequestNoResponse>::
    WireResult(::fidl::UnownedClientEnd<
               ::fidl_test_socketprotocol::WithAndWithoutRequestResponse>
                   _client) {
  FIDL_INTERNAL_DISABLE_AUTO_VAR_INIT
  ::fidl::OwnedEncodedMessage<::fidl::WireRequest<
      ::fidl_test_socketprotocol::WithAndWithoutRequestResponse::
          NoRequestNoResponse>>
      _request(::fidl::internal::AllowUnownedInputRef{});
  auto& _outgoing = _request.GetOutgoingMessage();
  _outgoing.Write(_client);
  SetResult(_outgoing);
}
namespace fidl_test_socketprotocol {
#endif  // __Fuchsia__

#ifdef __Fuchsia__
}  // namespace fidl_test_socketprotocol
::fidl::WireResult<::fidl_test_socketprotocol::WithAndWithoutRequestResponse::
                       NoRequestEmptyResponse>::
    WireResult(::fidl::UnownedClientEnd<
               ::fidl_test_socketprotocol::WithAndWithoutRequestResponse>
                   _client) {
  FIDL_INTERNAL_DISABLE_AUTO_VAR_INIT
  ::fidl::OwnedEncodedMessage<::fidl::WireRequest<
      ::fidl_test_socketprotocol::WithAndWithoutRequestResponse::
          NoRequestEmptyResponse>>
      _request(::fidl::internal::AllowUnownedInputRef{});
  auto& _outgoing = _request.GetOutgoingMessage();
  _outgoing.Call<::fidl::WireResponse<
      ::fidl_test_socketprotocol::WithAndWithoutRequestResponse::
          NoRequestEmptyResponse>>(_client, bytes_.data(),
                                   static_cast<uint32_t>(bytes_.size()));
  SetResult(_outgoing);
}

::fidl::WireResult<::fidl_test_socketprotocol::WithAndWithoutRequestResponse::
                       NoRequestEmptyResponse>::
    WireResult(::fidl::UnownedClientEnd<
                   ::fidl_test_socketprotocol::WithAndWithoutRequestResponse>
                   _client,
               zx_time_t _deadline) {
  FIDL_INTERNAL_DISABLE_AUTO_VAR_INIT
  ::fidl::OwnedEncodedMessage<::fidl::WireRequest<
      ::fidl_test_socketprotocol::WithAndWithoutRequestResponse::
          NoRequestEmptyResponse>>
      _request(::fidl::internal::AllowUnownedInputRef{});
  auto& _outgoing = _request.GetOutgoingMessage();
  _outgoing.Call<::fidl::WireResponse<
      ::fidl_test_socketprotocol::WithAndWithoutRequestResponse::
          NoRequestEmptyResponse>>(
      _client, bytes_.data(), static_cast<uint32_t>(bytes_.size()), _deadline);
  SetResult(_outgoing);
}
namespace fidl_test_socketprotocol {
#endif  // __Fuchsia__

#ifdef __Fuchsia__
}  // namespace fidl_test_socketprotocol
::fidl::WireResult<::fidl_test_socketprotocol::WithAndWithoutRequestResponse::
                       NoRequestWithResponse>::
    WireResult(::fidl::UnownedClientEnd<
               ::fidl_test_socketprotocol::WithAndWithoutRequestResponse>
                   _client) {
  FIDL_INTERNAL_DISABLE_AUTO_VAR_INIT
  ::fidl::OwnedEncodedMessage<::fidl::WireRequest<
      ::fidl_test_socketprotocol::WithAndWithoutRequestResponse::
          NoRequestWithResponse>>
      _request(::fidl::internal::AllowUnownedInputRef{});
  auto& _outgoing = _request.GetOutgoingMessage();
  _outgoing.Call<::fidl::WireResponse<
      ::fidl_test_socketprotocol::WithAndWithoutRequestResponse::
          NoRequestWithResponse>>(_client, bytes_.data(),
                                  static_cast<uint32_t>(bytes_.size()));
  SetResult(_outgoing);
}

::fidl::WireResult<::fidl_test_socketprotocol::WithAndWithoutRequestResponse::
                       NoRequestWithResponse>::
    WireResult(::fidl::UnownedClientEnd<
                   ::fidl_test_socketprotocol::WithAndWithoutRequestResponse>
                   _client,
               zx_time_t _deadline) {
  FIDL_INTERNAL_DISABLE_AUTO_VAR_INIT
  ::fidl::OwnedEncodedMessage<::fidl::WireRequest<
      ::fidl_test_socketprotocol::WithAndWithoutRequestResponse::
          NoRequestWithResponse>>
      _request(::fidl::internal::AllowUnownedInputRef{});
  auto& _outgoing = _request.GetOutgoingMessage();
  _outgoing.Call<::fidl::WireResponse<
      ::fidl_test_socketprotocol::WithAndWithoutRequestResponse::
          NoRequestWithResponse>>(
      _client, bytes_.data(), static_cast<uint32_t>(bytes_.size()), _deadline);
  SetResult(_outgoing);
}
namespace fidl_test_socketprotocol {
#endif  // __Fuchsia__

#ifdef __Fuchsia__
}  // namespace fidl_test_socketprotocol
::fidl::WireUnownedResult<
    ::fidl_test_socketprotocol::WithAndWithoutRequestResponse::
        NoRequestWithResponse>::
    WireUnownedResult(
        ::fidl::UnownedClientEnd<
            ::fidl_test_socketprotocol::WithAndWithoutRequestResponse>
            _client,
        uint8_t* _response_bytes, uint32_t _response_byte_capacity)
    : bytes_(_response_bytes) {
  FIDL_INTERNAL_DISABLE_AUTO_VAR_INIT
  ::fidl::OwnedEncodedMessage<::fidl::WireRequest<
      ::fidl_test_socketprotocol::WithAndWithoutRequestResponse::
          NoRequestWithResponse>>
      _request(::fidl::internal::AllowUnownedInputRef{});
  auto& _outgoing = _request.GetOutgoingMessage();
  _outgoing.Call<::fidl::WireResponse<
      ::fidl_test_socketprotocol::WithAndWithoutRequestResponse::
          NoRequestWithResponse>>(_client, _response_bytes,
                                  _response_byte_capacity);
  ::fidl::Result::operator=(_outgoing);
}
namespace fidl_test_socketprotocol {
#endif  // __Fuchsia__

#ifdef __Fuchsia__
}  // namespace fidl_test_socketprotocol
::fidl::WireResult<::fidl_test_socketprotocol::WithAndWithoutRequestResponse::
                       WithRequestNoResponse>::
    WireResult(::fidl::UnownedClientEnd<
                   ::fidl_test_socketprotocol::WithAndWithoutRequestResponse>
                   _client,
               ::fidl::StringView arg) {
  FIDL_INTERNAL_DISABLE_AUTO_VAR_INIT
  ::fidl::OwnedEncodedMessage<::fidl::WireRequest<
      ::fidl_test_socketprotocol::WithAndWithoutRequestResponse::
          WithRequestNoResponse>>
      _request(::fidl::internal::AllowUnownedInputRef{}, arg);
  auto& _outgoing = _request.GetOutgoingMessage();
  _outgoing.Write(_client);
  SetResult(_outgoing);
}
namespace fidl_test_socketprotocol {
#endif  // __Fuchsia__

#ifdef __Fuchsia__
}  // namespace fidl_test_socketprotocol
::fidl::WireUnownedResult<
    ::fidl_test_socketprotocol::WithAndWithoutRequestResponse::
        WithRequestNoResponse>::
    WireUnownedResult(
        ::fidl::UnownedClientEnd<
            ::fidl_test_socketprotocol::WithAndWithoutRequestResponse>
            _client,
        uint8_t* _request_bytes, uint32_t _request_byte_capacity,
        ::fidl::StringView arg) {
  ::fidl::UnownedEncodedMessage<::fidl::WireRequest<
      ::fidl_test_socketprotocol::WithAndWithoutRequestResponse::
          WithRequestNoResponse>>
      _request(_request_bytes, _request_byte_capacity, arg);
  auto& _outgoing = _request.GetOutgoingMessage();
  _outgoing.Write(_client);
  ::fidl::Result::operator=(_outgoing);
}
namespace fidl_test_socketprotocol {
#endif  // __Fuchsia__

#ifdef __Fuchsia__
}  // namespace fidl_test_socketprotocol
::fidl::WireResult<::fidl_test_socketprotocol::WithAndWithoutRequestResponse::
                       WithRequestEmptyResponse>::
    WireResult(::fidl::UnownedClientEnd<
                   ::fidl_test_socketprotocol::WithAndWithoutRequestResponse>
                   _client,
               ::fidl::StringView arg) {
  FIDL_INTERNAL_DISABLE_AUTO_VAR_INIT
  ::fidl::OwnedEncodedMessage<::fidl::WireRequest<
      ::fidl_test_socketprotocol::WithAndWithoutRequestResponse::
          WithRequestEmptyResponse>>
      _request(::fidl::internal::AllowUnownedInputRef{}, arg);
  auto& _outgoing = _request.GetOutgoingMessage();
  _outgoing.Call<::fidl::WireResponse<
      ::fidl_test_socketprotocol::WithAndWithoutRequestResponse::
          WithRequestEmptyResponse>>(_client, bytes_.data(),
                                     static_cast<uint32_t>(bytes_.size()));
  SetResult(_outgoing);
}

::fidl::WireResult<::fidl_test_socketprotocol::WithAndWithoutRequestResponse::
                       WithRequestEmptyResponse>::
    WireResult(::fidl::UnownedClientEnd<
                   ::fidl_test_socketprotocol::WithAndWithoutRequestResponse>
                   _client,
               ::fidl::StringView arg, zx_time_t _deadline) {
  FIDL_INTERNAL_DISABLE_AUTO_VAR_INIT
  ::fidl::OwnedEncodedMessage<::fidl::WireRequest<
      ::fidl_test_socketprotocol::WithAndWithoutRequestResponse::
          WithRequestEmptyResponse>>
      _request(::fidl::internal::AllowUnownedInputRef{}, arg);
  auto& _outgoing = _request.GetOutgoingMessage();
  _outgoing.Call<::fidl::WireResponse<
      ::fidl_test_socketprotocol::WithAndWithoutRequestResponse::
          WithRequestEmptyResponse>>(
      _client, bytes_.data(), static_cast<uint32_t>(bytes_.size()), _deadline);
  SetResult(_outgoing);
}
namespace fidl_test_socketprotocol {
#endif  // __Fuchsia__

#ifdef __Fuchsia__
}  // namespace fidl_test_socketprotocol
::fidl::WireUnownedResult<
    ::fidl_test_socketprotocol::WithAndWithoutRequestResponse::
        WithRequestEmptyResponse>::
    WireUnownedResult(
        ::fidl::UnownedClientEnd<
            ::fidl_test_socketprotocol::WithAndWithoutRequestResponse>
            _client,
        uint8_t* _request_bytes, uint32_t _request_byte_capacity,
        ::fidl::StringView arg, uint8_t* _response_bytes,
        uint32_t _response_byte_capacity)
    : bytes_(_response_bytes) {
  ::fidl::UnownedEncodedMessage<::fidl::WireRequest<
      ::fidl_test_socketprotocol::WithAndWithoutRequestResponse::
          WithRequestEmptyResponse>>
      _request(_request_bytes, _request_byte_capacity, arg);
  auto& _outgoing = _request.GetOutgoingMessage();
  _outgoing.Call<::fidl::WireResponse<
      ::fidl_test_socketprotocol::WithAndWithoutRequestResponse::
          WithRequestEmptyResponse>>(_client, _response_bytes,
                                     _response_byte_capacity);
  ::fidl::Result::operator=(_outgoing);
}
namespace fidl_test_socketprotocol {
#endif  // __Fuchsia__

#ifdef __Fuchsia__
}  // namespace fidl_test_socketprotocol
::fidl::WireResult<::fidl_test_socketprotocol::WithAndWithoutRequestResponse::
                       WithRequestWithResponse>::
    WireResult(::fidl::UnownedClientEnd<
                   ::fidl_test_socketprotocol::WithAndWithoutRequestResponse>
                   _client,
               ::fidl::StringView arg) {
  FIDL_INTERNAL_DISABLE_AUTO_VAR_INIT
  ::fidl::OwnedEncodedMessage<::fidl::WireRequest<
      ::fidl_test_socketprotocol::WithAndWithoutRequestResponse::
          WithRequestWithResponse>>
      _request(::fidl::internal::AllowUnownedInputRef{}, arg);
  auto& _outgoing = _request.GetOutgoingMessage();
  _outgoing.Call<::fidl::WireResponse<
      ::fidl_test_socketprotocol::WithAndWithoutRequestResponse::
          WithRequestWithResponse>>(_client, bytes_.data(),
                                    static_cast<uint32_t>(bytes_.size()));
  SetResult(_outgoing);
}

::fidl::WireResult<::fidl_test_socketprotocol::WithAndWithoutRequestResponse::
                       WithRequestWithResponse>::
    WireResult(::fidl::UnownedClientEnd<
                   ::fidl_test_socketprotocol::WithAndWithoutRequestResponse>
                   _client,
               ::fidl::StringView arg, zx_time_t _deadline) {
  FIDL_INTERNAL_DISABLE_AUTO_VAR_INIT
  ::fidl::OwnedEncodedMessage<::fidl::WireRequest<
      ::fidl_test_socketprotocol::WithAndWithoutRequestResponse::
          WithRequestWithResponse>>
      _request(::fidl::internal::AllowUnownedInputRef{}, arg);
  auto& _outgoing = _request.GetOutgoingMessage();
  _outgoing.Call<::fidl::WireResponse<
      ::fidl_test_socketprotocol::WithAndWithoutRequestResponse::
          WithRequestWithResponse>>(
      _client, bytes_.data(), static_cast<uint32_t>(bytes_.size()), _deadline);
  SetResult(_outgoing);
}
namespace fidl_test_socketprotocol {
#endif  // __Fuchsia__

#ifdef __Fuchsia__
}  // namespace fidl_test_socketprotocol
::fidl::WireUnownedResult<
    ::fidl_test_socketprotocol::WithAndWithoutRequestResponse::
        WithRequestWithResponse>::
    WireUnownedResult(
        ::fidl::UnownedClientEnd<
            ::fidl_test_socketprotocol::WithAndWithoutRequestResponse>
            _client,
        uint8_t* _request_bytes, uint32_t _request_byte_capacity,
        ::fidl::StringView arg, uint8_t* _response_bytes,
        uint32_t _response_byte_capacity)
    : bytes_(_response_bytes) {
  ::fidl::UnownedEncodedMessage<::fidl::WireRequest<
      ::fidl_test_socketprotocol::WithAndWithoutRequestResponse::
          WithRequestWithResponse>>
      _request(_request_bytes, _request_byte_capacity, arg);
  auto& _outgoing = _request.GetOutgoingMessage();
  _outgoing.Call<::fidl::WireResponse<
      ::fidl_test_socketprotocol::WithAndWithoutRequestResponse::
          WithRequestWithResponse>>(_client, _response_bytes,
                                    _response_byte_capacity);
  ::fidl::Result::operator=(_outgoing);
}
namespace fidl_test_socketprotocol {
#endif  // __Fuchsia__

}  // namespace fidl_test_socketprotocol
#ifdef __Fuchsia__

::fidl::WireResponseContext<
    ::fidl_test_socketprotocol::WithAndWithoutRequestResponse::
        NoRequestEmptyResponse>::WireResponseContext()
    : ::fidl::internal::ResponseContext(
          ::fidl_test_socketprotocol::
              kWithAndWithoutRequestResponse_NoRequestEmptyResponse_Ordinal) {}

::cpp17::optional<::fidl::UnbindInfo> fidl::WireResponseContext<
    ::fidl_test_socketprotocol::WithAndWithoutRequestResponse::
        NoRequestEmptyResponse>::OnRawResult(::fidl::IncomingMessage&& msg) {
  if (unlikely(!msg.ok())) {
    ::fidl::WireUnownedResult<
        ::fidl_test_socketprotocol::WithAndWithoutRequestResponse::
            NoRequestEmptyResponse>
        result{msg.error()};
    OnResult(result);
    return cpp17::nullopt;
  }
  ::fidl::DecodedMessage<::fidl::WireResponse<
      ::fidl_test_socketprotocol::WithAndWithoutRequestResponse::
          NoRequestEmptyResponse>>
      decoded{std::move(msg)};
  ::fidl::Result maybe_error = decoded;
  ::fidl::WireUnownedResult<
      ::fidl_test_socketprotocol::WithAndWithoutRequestResponse::
          NoRequestEmptyResponse>
      result{std::move(decoded)};
  OnResult(result);
  if (unlikely(!maybe_error.ok())) {
    return ::fidl::UnbindInfo(maybe_error);
  }
  return cpp17::nullopt;
}
#endif  // __Fuchsia__

#ifdef __Fuchsia__

::fidl::WireResponseContext<
    ::fidl_test_socketprotocol::WithAndWithoutRequestResponse::
        NoRequestWithResponse>::WireResponseContext()
    : ::fidl::internal::ResponseContext(
          ::fidl_test_socketprotocol::
              kWithAndWithoutRequestResponse_NoRequestWithResponse_Ordinal) {}

::cpp17::optional<::fidl::UnbindInfo> fidl::WireResponseContext<
    ::fidl_test_socketprotocol::WithAndWithoutRequestResponse::
        NoRequestWithResponse>::OnRawResult(::fidl::IncomingMessage&& msg) {
  if (unlikely(!msg.ok())) {
    ::fidl::WireUnownedResult<
        ::fidl_test_socketprotocol::WithAndWithoutRequestResponse::
            NoRequestWithResponse>
        result{msg.error()};
    OnResult(result);
    return cpp17::nullopt;
  }
  ::fidl::DecodedMessage<::fidl::WireResponse<
      ::fidl_test_socketprotocol::WithAndWithoutRequestResponse::
          NoRequestWithResponse>>
      decoded{std::move(msg)};
  ::fidl::Result maybe_error = decoded;
  ::fidl::WireUnownedResult<
      ::fidl_test_socketprotocol::WithAndWithoutRequestResponse::
          NoRequestWithResponse>
      result{std::move(decoded)};
  OnResult(result);
  if (unlikely(!maybe_error.ok())) {
    return ::fidl::UnbindInfo(maybe_error);
  }
  return cpp17::nullopt;
}
#endif  // __Fuchsia__

#ifdef __Fuchsia__

::fidl::WireResponseContext<
    ::fidl_test_socketprotocol::WithAndWithoutRequestResponse::
        WithRequestEmptyResponse>::WireResponseContext()
    : ::fidl::internal::ResponseContext(
          ::fidl_test_socketprotocol::
              kWithAndWithoutRequestResponse_WithRequestEmptyResponse_Ordinal) {
}

::cpp17::optional<::fidl::UnbindInfo> fidl::WireResponseContext<
    ::fidl_test_socketprotocol::WithAndWithoutRequestResponse::
        WithRequestEmptyResponse>::OnRawResult(::fidl::IncomingMessage&& msg) {
  if (unlikely(!msg.ok())) {
    ::fidl::WireUnownedResult<
        ::fidl_test_socketprotocol::WithAndWithoutRequestResponse::
            WithRequestEmptyResponse>
        result{msg.error()};
    OnResult(result);
    return cpp17::nullopt;
  }
  ::fidl::DecodedMessage<::fidl::WireResponse<
      ::fidl_test_socketprotocol::WithAndWithoutRequestResponse::
          WithRequestEmptyResponse>>
      decoded{std::move(msg)};
  ::fidl::Result maybe_error = decoded;
  ::fidl::WireUnownedResult<
      ::fidl_test_socketprotocol::WithAndWithoutRequestResponse::
          WithRequestEmptyResponse>
      result{std::move(decoded)};
  OnResult(result);
  if (unlikely(!maybe_error.ok())) {
    return ::fidl::UnbindInfo(maybe_error);
  }
  return cpp17::nullopt;
}
#endif  // __Fuchsia__

#ifdef __Fuchsia__

::fidl::WireResponseContext<
    ::fidl_test_socketprotocol::WithAndWithoutRequestResponse::
        WithRequestWithResponse>::WireResponseContext()
    : ::fidl::internal::ResponseContext(
          ::fidl_test_socketprotocol::
              kWithAndWithoutRequestResponse_WithRequestWithResponse_Ordinal) {}

::cpp17::optional<::fidl::UnbindInfo> fidl::WireResponseContext<
    ::fidl_test_socketprotocol::WithAndWithoutRequestResponse::
        WithRequestWithResponse>::OnRawResult(::fidl::IncomingMessage&& msg) {
  if (unlikely(!msg.ok())) {
    ::fidl::WireUnownedResult<
        ::fidl_test_socketprotocol::WithAndWithoutRequestResponse::
            WithRequestWithResponse>
        result{msg.error()};
    OnResult(result);
    return cpp17::nullopt;
  }
  ::fidl::DecodedMessage<::fidl::WireResponse<
      ::fidl_test_socketprotocol::WithAndWithoutRequestResponse::
          WithRequestWithResponse>>
      decoded{std::move(msg)};
  ::fidl::Result maybe_error = decoded;
  ::fidl::WireUnownedResult<
      ::fidl_test_socketprotocol::WithAndWithoutRequestResponse::
          WithRequestWithResponse>
      result{std::move(decoded)};
  OnResult(result);
  if (unlikely(!maybe_error.ok())) {
    return ::fidl::UnbindInfo(maybe_error);
  }
  return cpp17::nullopt;
}
#endif  // __Fuchsia__

#ifdef __Fuchsia__

::fidl::Result fidl::internal::WireClientImpl<
    ::fidl_test_socketprotocol::WithAndWithoutRequestResponse>::
    NoRequestNoResponse() {
  FIDL_INTERNAL_DISABLE_AUTO_VAR_INIT
  ::fidl::OwnedEncodedMessage<::fidl::WireRequest<
      ::fidl_test_socketprotocol::WithAndWithoutRequestResponse::
          NoRequestNoResponse>>
      _request(::fidl::internal::AllowUnownedInputRef{});
  return ::fidl::internal::ClientBase::SendOneWay(
      _request.GetOutgoingMessage());
}
void fidl::internal::WireClientImpl<
    ::fidl_test_socketprotocol::WithAndWithoutRequestResponse>::
    NoRequestEmptyResponse(
        ::fidl::WireClientCallback<
            ::fidl_test_socketprotocol::WithAndWithoutRequestResponse::
                NoRequestEmptyResponse>
            _cb) {
  using Callback = decltype(_cb);
  class ResponseContext final
      : public ::fidl::WireResponseContext<
            ::fidl_test_socketprotocol::WithAndWithoutRequestResponse::
                NoRequestEmptyResponse> {
   public:
    ResponseContext(Callback cb) : cb_(std::move(cb)) {}

    void OnResult(::fidl::WireUnownedResult<
                  ::fidl_test_socketprotocol::WithAndWithoutRequestResponse::
                      NoRequestEmptyResponse>& result) override {
      cb_(result);
      delete this;
    }

   private:
    Callback cb_;
  };

  auto* _context = new ResponseContext(std::move(_cb));
  FIDL_INTERNAL_DISABLE_AUTO_VAR_INIT
  ::fidl::WireRequest<
      ::fidl_test_socketprotocol::WithAndWithoutRequestResponse::
          NoRequestEmptyResponse>::OwnedEncodedMessage
      _request(::fidl::internal::AllowUnownedInputRef{});
  ::fidl::internal::ClientBase::SendTwoWay(_request.GetOutgoingMessage(),
                                           _context);
}

void fidl::internal::WireClientImpl<
    ::fidl_test_socketprotocol::WithAndWithoutRequestResponse>::
    NoRequestEmptyResponse(
        ::fit::callback<
            void(::fidl::WireResponse<
                 ::fidl_test_socketprotocol::WithAndWithoutRequestResponse::
                     NoRequestEmptyResponse>* response)>
            _cb) {
  using Callback = decltype(_cb);
  class ResponseContext final
      : public ::fidl::WireResponseContext<
            ::fidl_test_socketprotocol::WithAndWithoutRequestResponse::
                NoRequestEmptyResponse> {
   public:
    ResponseContext(Callback cb) : cb_(std::move(cb)) {}

    void OnResult(::fidl::WireUnownedResult<
                  ::fidl_test_socketprotocol::WithAndWithoutRequestResponse::
                      NoRequestEmptyResponse>& result) override {
      if (result.ok()) {
        ::fidl::WireResponse<
            ::fidl_test_socketprotocol::WithAndWithoutRequestResponse::
                NoRequestEmptyResponse>* response = result.Unwrap();
        cb_(response);
      }
      delete this;
    }

   private:
    Callback cb_;
  };

  auto* _context = new ResponseContext(std::move(_cb));
  FIDL_INTERNAL_DISABLE_AUTO_VAR_INIT
  ::fidl::WireRequest<
      ::fidl_test_socketprotocol::WithAndWithoutRequestResponse::
          NoRequestEmptyResponse>::OwnedEncodedMessage
      _request(::fidl::internal::AllowUnownedInputRef{});
  ::fidl::internal::ClientBase::SendTwoWay(_request.GetOutgoingMessage(),
                                           _context);
}
void fidl::internal::WireClientImpl<
    ::fidl_test_socketprotocol::WithAndWithoutRequestResponse>::
    NoRequestEmptyResponse(
        ::fidl::WireResponseContext<
            ::fidl_test_socketprotocol::WithAndWithoutRequestResponse::
                NoRequestEmptyResponse>* _context) {
  FIDL_INTERNAL_DISABLE_AUTO_VAR_INIT
  ::fidl::WireRequest<
      ::fidl_test_socketprotocol::WithAndWithoutRequestResponse::
          NoRequestEmptyResponse>::OwnedEncodedMessage
      _request(::fidl::internal::AllowUnownedInputRef{});
  ::fidl::internal::ClientBase::SendTwoWay(_request.GetOutgoingMessage(),
                                           _context);
}
::fidl::WireResult<::fidl_test_socketprotocol::WithAndWithoutRequestResponse::
                       NoRequestEmptyResponse>
fidl::internal::WireClientImpl<
    ::fidl_test_socketprotocol::WithAndWithoutRequestResponse>::
    NoRequestEmptyResponse_Sync() {
  return ::fidl::internal::ClientBase::MakeSyncCallWith(
      [&](std::shared_ptr<zx::channel> _channel) {
        return ::fidl::WireResult<
            ::fidl_test_socketprotocol::WithAndWithoutRequestResponse::
                NoRequestEmptyResponse>(
            ::fidl::UnownedClientEnd<
                ::fidl_test_socketprotocol::WithAndWithoutRequestResponse>(
                _channel->get()));
      });
}
void fidl::internal::WireClientImpl<
    ::fidl_test_socketprotocol::WithAndWithoutRequestResponse>::
    NoRequestWithResponse(
        ::fidl::WireClientCallback<
            ::fidl_test_socketprotocol::WithAndWithoutRequestResponse::
                NoRequestWithResponse>
            _cb) {
  using Callback = decltype(_cb);
  class ResponseContext final
      : public ::fidl::WireResponseContext<
            ::fidl_test_socketprotocol::WithAndWithoutRequestResponse::
                NoRequestWithResponse> {
   public:
    ResponseContext(Callback cb) : cb_(std::move(cb)) {}

    void OnResult(::fidl::WireUnownedResult<
                  ::fidl_test_socketprotocol::WithAndWithoutRequestResponse::
                      NoRequestWithResponse>& result) override {
      cb_(result);
      delete this;
    }

   private:
    Callback cb_;
  };

  auto* _context = new ResponseContext(std::move(_cb));
  FIDL_INTERNAL_DISABLE_AUTO_VAR_INIT
  ::fidl::WireRequest<
      ::fidl_test_socketprotocol::WithAndWithoutRequestResponse::
          NoRequestWithResponse>::OwnedEncodedMessage
      _request(::fidl::internal::AllowUnownedInputRef{});
  ::fidl::internal::ClientBase::SendTwoWay(_request.GetOutgoingMessage(),
                                           _context);
}

void fidl::internal::WireClientImpl<
    ::fidl_test_socketprotocol::WithAndWithoutRequestResponse>::
    NoRequestWithResponse(
        ::fit::callback<
            void(::fidl::WireResponse<
                 ::fidl_test_socketprotocol::WithAndWithoutRequestResponse::
                     NoRequestWithResponse>* response)>
            _cb) {
  using Callback = decltype(_cb);
  class ResponseContext final
      : public ::fidl::WireResponseContext<
            ::fidl_test_socketprotocol::WithAndWithoutRequestResponse::
                NoRequestWithResponse> {
   public:
    ResponseContext(Callback cb) : cb_(std::move(cb)) {}

    void OnResult(::fidl::WireUnownedResult<
                  ::fidl_test_socketprotocol::WithAndWithoutRequestResponse::
                      NoRequestWithResponse>& result) override {
      if (result.ok()) {
        ::fidl::WireResponse<
            ::fidl_test_socketprotocol::WithAndWithoutRequestResponse::
                NoRequestWithResponse>* response = result.Unwrap();
        cb_(response);
      }
      delete this;
    }

   private:
    Callback cb_;
  };

  auto* _context = new ResponseContext(std::move(_cb));
  FIDL_INTERNAL_DISABLE_AUTO_VAR_INIT
  ::fidl::WireRequest<
      ::fidl_test_socketprotocol::WithAndWithoutRequestResponse::
          NoRequestWithResponse>::OwnedEncodedMessage
      _request(::fidl::internal::AllowUnownedInputRef{});
  ::fidl::internal::ClientBase::SendTwoWay(_request.GetOutgoingMessage(),
                                           _context);
}
void fidl::internal::WireClientImpl<
    ::fidl_test_socketprotocol::WithAndWithoutRequestResponse>::
    NoRequestWithResponse(
        ::fidl::WireResponseContext<
            ::fidl_test_socketprotocol::WithAndWithoutRequestResponse::
                NoRequestWithResponse>* _context) {
  FIDL_INTERNAL_DISABLE_AUTO_VAR_INIT
  ::fidl::WireRequest<
      ::fidl_test_socketprotocol::WithAndWithoutRequestResponse::
          NoRequestWithResponse>::OwnedEncodedMessage
      _request(::fidl::internal::AllowUnownedInputRef{});
  ::fidl::internal::ClientBase::SendTwoWay(_request.GetOutgoingMessage(),
                                           _context);
}
::fidl::WireResult<::fidl_test_socketprotocol::WithAndWithoutRequestResponse::
                       NoRequestWithResponse>
fidl::internal::WireClientImpl<
    ::fidl_test_socketprotocol::WithAndWithoutRequestResponse>::
    NoRequestWithResponse_Sync() {
  return ::fidl::internal::ClientBase::MakeSyncCallWith(
      [&](std::shared_ptr<zx::channel> _channel) {
        return ::fidl::WireResult<
            ::fidl_test_socketprotocol::WithAndWithoutRequestResponse::
                NoRequestWithResponse>(
            ::fidl::UnownedClientEnd<
                ::fidl_test_socketprotocol::WithAndWithoutRequestResponse>(
                _channel->get()));
      });
}
::fidl::WireUnownedResult<
    ::fidl_test_socketprotocol::WithAndWithoutRequestResponse::
        NoRequestWithResponse>
fidl::internal::WireClientImpl<
    ::fidl_test_socketprotocol::WithAndWithoutRequestResponse>::
    NoRequestWithResponse_Sync(::fidl::BufferSpan _response_buffer) {
  return ::fidl::internal::ClientBase::MakeSyncCallWith(
      [&](std::shared_ptr<zx::channel> _channel) {
        return ::fidl::WireUnownedResult<
            ::fidl_test_socketprotocol::WithAndWithoutRequestResponse::
                NoRequestWithResponse>(
            ::fidl::UnownedClientEnd<
                ::fidl_test_socketprotocol::WithAndWithoutRequestResponse>(
                _channel->get()),
            _response_buffer.data, _response_buffer.capacity);
      });
}
::fidl::Result fidl::internal::WireClientImpl<
    ::fidl_test_socketprotocol::WithAndWithoutRequestResponse>::
    WithRequestNoResponse(::fidl::StringView arg) {
  FIDL_INTERNAL_DISABLE_AUTO_VAR_INIT
  ::fidl::OwnedEncodedMessage<::fidl::WireRequest<
      ::fidl_test_socketprotocol::WithAndWithoutRequestResponse::
          WithRequestNoResponse>>
      _request(::fidl::internal::AllowUnownedInputRef{}, arg);
  return ::fidl::internal::ClientBase::SendOneWay(
      _request.GetOutgoingMessage());
}
::fidl::Result fidl::internal::WireClientImpl<
    ::fidl_test_socketprotocol::WithAndWithoutRequestResponse>::
    WithRequestNoResponse(::fidl::BufferSpan _request_buffer,
                          ::fidl::StringView arg) {
  ::fidl::UnownedEncodedMessage<::fidl::WireRequest<
      ::fidl_test_socketprotocol::WithAndWithoutRequestResponse::
          WithRequestNoResponse>>
      _request(_request_buffer.data, _request_buffer.capacity, arg);
  return ::fidl::internal::ClientBase::SendOneWay(
      _request.GetOutgoingMessage());
}
void fidl::internal::WireClientImpl<
    ::fidl_test_socketprotocol::WithAndWithoutRequestResponse>::
    WithRequestEmptyResponse(
        ::fidl::StringView arg,
        ::fidl::WireClientCallback<
            ::fidl_test_socketprotocol::WithAndWithoutRequestResponse::
                WithRequestEmptyResponse>
            _cb) {
  using Callback = decltype(_cb);
  class ResponseContext final
      : public ::fidl::WireResponseContext<
            ::fidl_test_socketprotocol::WithAndWithoutRequestResponse::
                WithRequestEmptyResponse> {
   public:
    ResponseContext(Callback cb) : cb_(std::move(cb)) {}

    void OnResult(::fidl::WireUnownedResult<
                  ::fidl_test_socketprotocol::WithAndWithoutRequestResponse::
                      WithRequestEmptyResponse>& result) override {
      cb_(result);
      delete this;
    }

   private:
    Callback cb_;
  };

  auto* _context = new ResponseContext(std::move(_cb));
  FIDL_INTERNAL_DISABLE_AUTO_VAR_INIT
  ::fidl::WireRequest<
      ::fidl_test_socketprotocol::WithAndWithoutRequestResponse::
          WithRequestEmptyResponse>::OwnedEncodedMessage
      _request(::fidl::internal::AllowUnownedInputRef{}, arg);
  ::fidl::internal::ClientBase::SendTwoWay(_request.GetOutgoingMessage(),
                                           _context);
}

void fidl::internal::WireClientImpl<
    ::fidl_test_socketprotocol::WithAndWithoutRequestResponse>::
    WithRequestEmptyResponse(
        ::fidl::StringView arg,
        ::fit::callback<
            void(::fidl::WireResponse<
                 ::fidl_test_socketprotocol::WithAndWithoutRequestResponse::
                     WithRequestEmptyResponse>* response)>
            _cb) {
  using Callback = decltype(_cb);
  class ResponseContext final
      : public ::fidl::WireResponseContext<
            ::fidl_test_socketprotocol::WithAndWithoutRequestResponse::
                WithRequestEmptyResponse> {
   public:
    ResponseContext(Callback cb) : cb_(std::move(cb)) {}

    void OnResult(::fidl::WireUnownedResult<
                  ::fidl_test_socketprotocol::WithAndWithoutRequestResponse::
                      WithRequestEmptyResponse>& result) override {
      if (result.ok()) {
        ::fidl::WireResponse<
            ::fidl_test_socketprotocol::WithAndWithoutRequestResponse::
                WithRequestEmptyResponse>* response = result.Unwrap();
        cb_(response);
      }
      delete this;
    }

   private:
    Callback cb_;
  };

  auto* _context = new ResponseContext(std::move(_cb));
  FIDL_INTERNAL_DISABLE_AUTO_VAR_INIT
  ::fidl::WireRequest<
      ::fidl_test_socketprotocol::WithAndWithoutRequestResponse::
          WithRequestEmptyResponse>::OwnedEncodedMessage
      _request(::fidl::internal::AllowUnownedInputRef{}, arg);
  ::fidl::internal::ClientBase::SendTwoWay(_request.GetOutgoingMessage(),
                                           _context);
}
void fidl::internal::WireClientImpl<
    ::fidl_test_socketprotocol::WithAndWithoutRequestResponse>::
    WithRequestEmptyResponse(
        ::fidl::BufferSpan _request_buffer, ::fidl::StringView arg,
        ::fidl::WireResponseContext<
            ::fidl_test_socketprotocol::WithAndWithoutRequestResponse::
                WithRequestEmptyResponse>* _context) {
  ::fidl::WireRequest<
      ::fidl_test_socketprotocol::WithAndWithoutRequestResponse::
          WithRequestEmptyResponse>::UnownedEncodedMessage
      _request(_request_buffer.data, _request_buffer.capacity, arg);
  ::fidl::internal::ClientBase::SendTwoWay(_request.GetOutgoingMessage(),
                                           _context);
}
::fidl::WireResult<::fidl_test_socketprotocol::WithAndWithoutRequestResponse::
                       WithRequestEmptyResponse>
fidl::internal::WireClientImpl<
    ::fidl_test_socketprotocol::WithAndWithoutRequestResponse>::
    WithRequestEmptyResponse_Sync(::fidl::StringView arg) {
  return ::fidl::internal::ClientBase::MakeSyncCallWith(
      [&](std::shared_ptr<zx::channel> _channel) {
        return ::fidl::WireResult<
            ::fidl_test_socketprotocol::WithAndWithoutRequestResponse::
                WithRequestEmptyResponse>(
            ::fidl::UnownedClientEnd<
                ::fidl_test_socketprotocol::WithAndWithoutRequestResponse>(
                _channel->get()),
            arg);
      });
}
::fidl::WireUnownedResult<
    ::fidl_test_socketprotocol::WithAndWithoutRequestResponse::
        WithRequestEmptyResponse>
fidl::internal::WireClientImpl<
    ::fidl_test_socketprotocol::WithAndWithoutRequestResponse>::
    WithRequestEmptyResponse_Sync(::fidl::BufferSpan _request_buffer,
                                  ::fidl::StringView arg,
                                  ::fidl::BufferSpan _response_buffer) {
  return ::fidl::internal::ClientBase::MakeSyncCallWith(
      [&](std::shared_ptr<zx::channel> _channel) {
        return ::fidl::WireUnownedResult<
            ::fidl_test_socketprotocol::WithAndWithoutRequestResponse::
                WithRequestEmptyResponse>(
            ::fidl::UnownedClientEnd<
                ::fidl_test_socketprotocol::WithAndWithoutRequestResponse>(
                _channel->get()),
            _request_buffer.data, _request_buffer.capacity, arg,
            _response_buffer.data, _response_buffer.capacity);
      });
}
void fidl::internal::WireClientImpl<
    ::fidl_test_socketprotocol::WithAndWithoutRequestResponse>::
    WithRequestWithResponse(
        ::fidl::StringView arg,
        ::fidl::WireClientCallback<
            ::fidl_test_socketprotocol::WithAndWithoutRequestResponse::
                WithRequestWithResponse>
            _cb) {
  using Callback = decltype(_cb);
  class ResponseContext final
      : public ::fidl::WireResponseContext<
            ::fidl_test_socketprotocol::WithAndWithoutRequestResponse::
                WithRequestWithResponse> {
   public:
    ResponseContext(Callback cb) : cb_(std::move(cb)) {}

    void OnResult(::fidl::WireUnownedResult<
                  ::fidl_test_socketprotocol::WithAndWithoutRequestResponse::
                      WithRequestWithResponse>& result) override {
      cb_(result);
      delete this;
    }

   private:
    Callback cb_;
  };

  auto* _context = new ResponseContext(std::move(_cb));
  FIDL_INTERNAL_DISABLE_AUTO_VAR_INIT
  ::fidl::WireRequest<
      ::fidl_test_socketprotocol::WithAndWithoutRequestResponse::
          WithRequestWithResponse>::OwnedEncodedMessage
      _request(::fidl::internal::AllowUnownedInputRef{}, arg);
  ::fidl::internal::ClientBase::SendTwoWay(_request.GetOutgoingMessage(),
                                           _context);
}

void fidl::internal::WireClientImpl<
    ::fidl_test_socketprotocol::WithAndWithoutRequestResponse>::
    WithRequestWithResponse(
        ::fidl::StringView arg,
        ::fit::callback<
            void(::fidl::WireResponse<
                 ::fidl_test_socketprotocol::WithAndWithoutRequestResponse::
                     WithRequestWithResponse>* response)>
            _cb) {
  using Callback = decltype(_cb);
  class ResponseContext final
      : public ::fidl::WireResponseContext<
            ::fidl_test_socketprotocol::WithAndWithoutRequestResponse::
                WithRequestWithResponse> {
   public:
    ResponseContext(Callback cb) : cb_(std::move(cb)) {}

    void OnResult(::fidl::WireUnownedResult<
                  ::fidl_test_socketprotocol::WithAndWithoutRequestResponse::
                      WithRequestWithResponse>& result) override {
      if (result.ok()) {
        ::fidl::WireResponse<
            ::fidl_test_socketprotocol::WithAndWithoutRequestResponse::
                WithRequestWithResponse>* response = result.Unwrap();
        cb_(response);
      }
      delete this;
    }

   private:
    Callback cb_;
  };

  auto* _context = new ResponseContext(std::move(_cb));
  FIDL_INTERNAL_DISABLE_AUTO_VAR_INIT
  ::fidl::WireRequest<
      ::fidl_test_socketprotocol::WithAndWithoutRequestResponse::
          WithRequestWithResponse>::OwnedEncodedMessage
      _request(::fidl::internal::AllowUnownedInputRef{}, arg);
  ::fidl::internal::ClientBase::SendTwoWay(_request.GetOutgoingMessage(),
                                           _context);
}
void fidl::internal::WireClientImpl<
    ::fidl_test_socketprotocol::WithAndWithoutRequestResponse>::
    WithRequestWithResponse(
        ::fidl::BufferSpan _request_buffer, ::fidl::StringView arg,
        ::fidl::WireResponseContext<
            ::fidl_test_socketprotocol::WithAndWithoutRequestResponse::
                WithRequestWithResponse>* _context) {
  ::fidl::WireRequest<
      ::fidl_test_socketprotocol::WithAndWithoutRequestResponse::
          WithRequestWithResponse>::UnownedEncodedMessage
      _request(_request_buffer.data, _request_buffer.capacity, arg);
  ::fidl::internal::ClientBase::SendTwoWay(_request.GetOutgoingMessage(),
                                           _context);
}
::fidl::WireResult<::fidl_test_socketprotocol::WithAndWithoutRequestResponse::
                       WithRequestWithResponse>
fidl::internal::WireClientImpl<
    ::fidl_test_socketprotocol::WithAndWithoutRequestResponse>::
    WithRequestWithResponse_Sync(::fidl::StringView arg) {
  return ::fidl::internal::ClientBase::MakeSyncCallWith(
      [&](std::shared_ptr<zx::channel> _channel) {
        return ::fidl::WireResult<
            ::fidl_test_socketprotocol::WithAndWithoutRequestResponse::
                WithRequestWithResponse>(
            ::fidl::UnownedClientEnd<
                ::fidl_test_socketprotocol::WithAndWithoutRequestResponse>(
                _channel->get()),
            arg);
      });
}
::fidl::WireUnownedResult<
    ::fidl_test_socketprotocol::WithAndWithoutRequestResponse::
        WithRequestWithResponse>
fidl::internal::WireClientImpl<
    ::fidl_test_socketprotocol::WithAndWithoutRequestResponse>::
    WithRequestWithResponse_Sync(::fidl::BufferSpan _request_buffer,
                                 ::fidl::StringView arg,
                                 ::fidl::BufferSpan _response_buffer) {
  return ::fidl::internal::ClientBase::MakeSyncCallWith(
      [&](std::shared_ptr<zx::channel> _channel) {
        return ::fidl::WireUnownedResult<
            ::fidl_test_socketprotocol::WithAndWithoutRequestResponse::
                WithRequestWithResponse>(
            ::fidl::UnownedClientEnd<
                ::fidl_test_socketprotocol::WithAndWithoutRequestResponse>(
                _channel->get()),
            _request_buffer.data, _request_buffer.capacity, arg,
            _response_buffer.data, _response_buffer.capacity);
      });
}

std::optional<::fidl::UnbindInfo> fidl::internal::WireClientImpl<
    ::fidl_test_socketprotocol::WithAndWithoutRequestResponse>::
    DispatchEvent(fidl::IncomingMessage& msg,
                  ::fidl::internal::AsyncEventHandler* maybe_event_handler) {
  return ::fidl::UnbindInfo::UnknownOrdinal();
}
#endif  // __Fuchsia__

#ifdef __Fuchsia__

constexpr ::fidl::internal::MethodEntry fidl::internal::WireServerDispatcher<
    ::fidl_test_socketprotocol::WithAndWithoutRequestResponse>::entries_[] = {
    {
        ::fidl_test_socketprotocol::
            kWithAndWithoutRequestResponse_NoRequestNoResponse_Ordinal,
        [](void* interface, ::fidl::IncomingMessage&& msg,
           ::fidl::Transaction* txn) {
          auto* primary = reinterpret_cast<::fidl::WireRequest<
              ::fidl_test_socketprotocol::WithAndWithoutRequestResponse::
                  NoRequestNoResponse>*>(msg.bytes());
          ::fidl::internal::WireCompleter<
              ::fidl_test_socketprotocol::WithAndWithoutRequestResponse::
                  NoRequestNoResponse>::Sync completer(txn);
          reinterpret_cast<::fidl::WireServer<
              ::fidl_test_socketprotocol::WithAndWithoutRequestResponse>*>(
              interface)
              ->NoRequestNoResponse(primary, completer);
          return ZX_OK;
        },
    },
    {
        ::fidl_test_socketprotocol::
            kWithAndWithoutRequestResponse_NoRequestEmptyResponse_Ordinal,
        [](void* interface, ::fidl::IncomingMessage&& msg,
           ::fidl::Transaction* txn) {
          auto* primary = reinterpret_cast<::fidl::WireRequest<
              ::fidl_test_socketprotocol::WithAndWithoutRequestResponse::
                  NoRequestEmptyResponse>*>(msg.bytes());
          ::fidl::internal::WireCompleter<
              ::fidl_test_socketprotocol::WithAndWithoutRequestResponse::
                  NoRequestEmptyResponse>::Sync completer(txn);
          reinterpret_cast<::fidl::WireServer<
              ::fidl_test_socketprotocol::WithAndWithoutRequestResponse>*>(
              interface)
              ->NoRequestEmptyResponse(primary, completer);
          return ZX_OK;
        },
    },
    {
        ::fidl_test_socketprotocol::
            kWithAndWithoutRequestResponse_NoRequestWithResponse_Ordinal,
        [](void* interface, ::fidl::IncomingMessage&& msg,
           ::fidl::Transaction* txn) {
          auto* primary = reinterpret_cast<::fidl::WireRequest<
              ::fidl_test_socketprotocol::WithAndWithoutRequestResponse::
                  NoRequestWithResponse>*>(msg.bytes());
          ::fidl::internal::WireCompleter<
              ::fidl_test_socketprotocol::WithAndWithoutRequestResponse::
                  NoRequestWithResponse>::Sync completer(txn);
          reinterpret_cast<::fidl::WireServer<
              ::fidl_test_socketprotocol::WithAndWithoutRequestResponse>*>(
              interface)
              ->NoRequestWithResponse(primary, completer);
          return ZX_OK;
        },
    },
    {
        ::fidl_test_socketprotocol::
            kWithAndWithoutRequestResponse_WithRequestNoResponse_Ordinal,
        [](void* interface, ::fidl::IncomingMessage&& msg,
           ::fidl::Transaction* txn) {
          ::fidl::DecodedMessage<::fidl::WireRequest<
              ::fidl_test_socketprotocol::WithAndWithoutRequestResponse::
                  WithRequestNoResponse>>
              decoded{std::move(msg)};
          if (unlikely(!decoded.ok())) {
            return decoded.status();
          }
          auto* primary = decoded.PrimaryObject();
          ::fidl::internal::WireCompleter<
              ::fidl_test_socketprotocol::WithAndWithoutRequestResponse::
                  WithRequestNoResponse>::Sync completer(txn);
          reinterpret_cast<::fidl::WireServer<
              ::fidl_test_socketprotocol::WithAndWithoutRequestResponse>*>(
              interface)
              ->WithRequestNoResponse(primary, completer);
          return ZX_OK;
        },
    },
    {
        ::fidl_test_socketprotocol::
            kWithAndWithoutRequestResponse_WithRequestEmptyResponse_Ordinal,
        [](void* interface, ::fidl::IncomingMessage&& msg,
           ::fidl::Transaction* txn) {
          ::fidl::DecodedMessage<::fidl::WireRequest<
              ::fidl_test_socketprotocol::WithAndWithoutRequestResponse::
                  WithRequestEmptyResponse>>
              decoded{std::move(msg)};
          if (unlikely(!decoded.ok())) {
            return decoded.status();
          }
          auto* primary = decoded.PrimaryObject();
          ::fidl::internal::WireCompleter<
              ::fidl_test_socketprotocol::WithAndWithoutRequestResponse::
                  WithRequestEmptyResponse>::Sync completer(txn);
          reinterpret_cast<::fidl::WireServer<
              ::fidl_test_socketprotocol::WithAndWithoutRequestResponse>*>(
              interface)
              ->WithRequestEmptyResponse(primary, completer);
          return ZX_OK;
        },
    },
    {
        ::fidl_test_socketprotocol::
            kWithAndWithoutRequestResponse_WithRequestWithResponse_Ordinal,
        [](void* interface, ::fidl::IncomingMessage&& msg,
           ::fidl::Transaction* txn) {
          ::fidl::DecodedMessage<::fidl::WireRequest<
              ::fidl_test_socketprotocol::WithAndWithoutRequestResponse::
                  WithRequestWithResponse>>
              decoded{std::move(msg)};
          if (unlikely(!decoded.ok())) {
            return decoded.status();
          }
          auto* primary = decoded.PrimaryObject();
          ::fidl::internal::WireCompleter<
              ::fidl_test_socketprotocol::WithAndWithoutRequestResponse::
                  WithRequestWithResponse>::Sync completer(txn);
          reinterpret_cast<::fidl::WireServer<
              ::fidl_test_socketprotocol::WithAndWithoutRequestResponse>*>(
              interface)
              ->WithRequestWithResponse(primary, completer);
          return ZX_OK;
        },
    },
};

const ::fidl::internal::MethodEntry* fidl::internal::WireServerDispatcher<
    ::fidl_test_socketprotocol::WithAndWithoutRequestResponse>::entries_end_ =
    &entries_[6];

::fidl::DispatchResult fidl::internal::WireServerDispatcher<
    ::fidl_test_socketprotocol::WithAndWithoutRequestResponse>::
    TryDispatch(
        ::fidl::WireServer<
            ::fidl_test_socketprotocol::WithAndWithoutRequestResponse>* impl,
        ::fidl::IncomingMessage& msg, ::fidl::Transaction* txn) {
  return ::fidl::internal::TryDispatch(impl, msg, txn, entries_, entries_end_);
}

void fidl::internal::WireServerDispatcher<
    ::fidl_test_socketprotocol::WithAndWithoutRequestResponse>::
    Dispatch(
        ::fidl::WireServer<
            ::fidl_test_socketprotocol::WithAndWithoutRequestResponse>* impl,
        ::fidl::IncomingMessage&& msg, ::fidl::Transaction* txn) {
  ::fidl::internal::Dispatch(impl, msg, txn, entries_, entries_end_);
}
void fidl::WireServer<
    ::fidl_test_socketprotocol::WithAndWithoutRequestResponse>::
    dispatch_message(fidl::IncomingMessage&& msg, ::fidl::Transaction* txn) {
  ::fidl::internal::WireServerDispatcher<
      ::fidl_test_socketprotocol::WithAndWithoutRequestResponse>::
      Dispatch(this, std::move(msg), txn);
}
#endif  // __Fuchsia__

#ifdef __Fuchsia__
::fidl::Result fidl::internal::WireCompleterBase<
    ::fidl_test_socketprotocol::WithAndWithoutRequestResponse::
        NoRequestEmptyResponse>::Reply() {
  FIDL_INTERNAL_DISABLE_AUTO_VAR_INIT
  ::fidl::OwnedEncodedMessage<::fidl::WireResponse<
      ::fidl_test_socketprotocol::WithAndWithoutRequestResponse::
          NoRequestEmptyResponse>>
      _response{::fidl::internal::AllowUnownedInputRef{}};
  return ::fidl::internal::WireCompleterBase<
      ::fidl_test_socketprotocol::WithAndWithoutRequestResponse::
          NoRequestEmptyResponse>::SendReply(&_response.GetOutgoingMessage());
}
#endif  // __Fuchsia__

#ifdef __Fuchsia__
::fidl::Result fidl::internal::WireCompleterBase<
    ::fidl_test_socketprotocol::WithAndWithoutRequestResponse::
        NoRequestWithResponse>::Reply(::fidl::StringView ret) {
  FIDL_INTERNAL_DISABLE_AUTO_VAR_INIT
  ::fidl::OwnedEncodedMessage<::fidl::WireResponse<
      ::fidl_test_socketprotocol::WithAndWithoutRequestResponse::
          NoRequestWithResponse>>
      _response{::fidl::internal::AllowUnownedInputRef{}, ret};
  return ::fidl::internal::WireCompleterBase<
      ::fidl_test_socketprotocol::WithAndWithoutRequestResponse::
          NoRequestWithResponse>::SendReply(&_response.GetOutgoingMessage());
}

::fidl::Result fidl::internal::WireCompleterBase<
    ::fidl_test_socketprotocol::WithAndWithoutRequestResponse::
        NoRequestWithResponse>::Reply(::fidl::BufferSpan _buffer,
                                      ::fidl::StringView ret) {
  ::fidl::WireResponse<
      ::fidl_test_socketprotocol::WithAndWithoutRequestResponse::
          NoRequestWithResponse>::UnownedEncodedMessage
      _response(_buffer.data, _buffer.capacity, ret);
  return CompleterBase::SendReply(&_response.GetOutgoingMessage());
}
#endif  // __Fuchsia__

#ifdef __Fuchsia__
::fidl::Result fidl::internal::WireCompleterBase<
    ::fidl_test_socketprotocol::WithAndWithoutRequestResponse::
        WithRequestEmptyResponse>::Reply() {
  FIDL_INTERNAL_DISABLE_AUTO_VAR_INIT
  ::fidl::OwnedEncodedMessage<::fidl::WireResponse<
      ::fidl_test_socketprotocol::WithAndWithoutRequestResponse::
          WithRequestEmptyResponse>>
      _response{::fidl::internal::AllowUnownedInputRef{}};
  return ::fidl::internal::WireCompleterBase<
      ::fidl_test_socketprotocol::WithAndWithoutRequestResponse::
          WithRequestEmptyResponse>::SendReply(&_response.GetOutgoingMessage());
}
#endif  // __Fuchsia__

#ifdef __Fuchsia__
::fidl::Result fidl::internal::WireCompleterBase<
    ::fidl_test_socketprotocol::WithAndWithoutRequestResponse::
        WithRequestWithResponse>::Reply(::fidl::StringView ret) {
  FIDL_INTERNAL_DISABLE_AUTO_VAR_INIT
  ::fidl::OwnedEncodedMessage<::fidl::WireResponse<
      ::fidl_test_socketprotocol::WithAndWithoutRequestResponse::
          WithRequestWithResponse>>
      _response{::fidl::internal::AllowUnownedInputRef{}, ret};
  return ::fidl::internal::WireCompleterBase<
      ::fidl_test_socketprotocol::WithAndWithoutRequestResponse::
          WithRequestWithResponse>::SendReply(&_response.GetOutgoingMessage());
}

::fidl::Result fidl::internal::WireCompleterBase<
    ::fidl_test_socketprotocol::WithAndWithoutRequestResponse::
        WithRequestWithResponse>::Reply(::fidl::BufferSpan _buffer,
                                        ::fidl::StringView ret) {
  ::fidl::WireResponse<
      ::fidl_test_socketprotocol::WithAndWithoutRequestResponse::
          WithRequestWithResponse>::UnownedEncodedMessage
      _response(_buffer.data, _buffer.capacity, ret);
  return CompleterBase::SendReply(&_response.GetOutgoingMessage());
}
#endif  // __Fuchsia__

void ::fidl::WireRequest<
    ::fidl_test_socketprotocol::WithAndWithoutRequestResponse::
        NoRequestNoResponse>::_InitHeader() {
  fidl_init_txn_header(
      &_hdr, 0,
      ::fidl_test_socketprotocol::
          kWithAndWithoutRequestResponse_NoRequestNoResponse_Ordinal);
}

void ::fidl::WireRequest<
    ::fidl_test_socketprotocol::WithAndWithoutRequestResponse::
        NoRequestEmptyResponse>::_InitHeader() {
  fidl_init_txn_header(
      &_hdr, 0,
      ::fidl_test_socketprotocol::
          kWithAndWithoutRequestResponse_NoRequestEmptyResponse_Ordinal);
}

void ::fidl::WireResponse<
    ::fidl_test_socketprotocol::WithAndWithoutRequestResponse::
        NoRequestEmptyResponse>::_InitHeader() {
  fidl_init_txn_header(
      &_hdr, 0,
      ::fidl_test_socketprotocol::
          kWithAndWithoutRequestResponse_NoRequestEmptyResponse_Ordinal);
}

void ::fidl::WireRequest<
    ::fidl_test_socketprotocol::WithAndWithoutRequestResponse::
        NoRequestWithResponse>::_InitHeader() {
  fidl_init_txn_header(
      &_hdr, 0,
      ::fidl_test_socketprotocol::
          kWithAndWithoutRequestResponse_NoRequestWithResponse_Ordinal);
}

void ::fidl::WireResponse<
    ::fidl_test_socketprotocol::WithAndWithoutRequestResponse::
        NoRequestWithResponse>::_InitHeader() {
  fidl_init_txn_header(
      &_hdr, 0,
      ::fidl_test_socketprotocol::
          kWithAndWithoutRequestResponse_NoRequestWithResponse_Ordinal);
}

void ::fidl::WireRequest<
    ::fidl_test_socketprotocol::WithAndWithoutRequestResponse::
        WithRequestNoResponse>::_InitHeader() {
  fidl_init_txn_header(
      &_hdr, 0,
      ::fidl_test_socketprotocol::
          kWithAndWithoutRequestResponse_WithRequestNoResponse_Ordinal);
}

void ::fidl::WireRequest<
    ::fidl_test_socketprotocol::WithAndWithoutRequestResponse::
        WithRequestEmptyResponse>::_InitHeader() {
  fidl_init_txn_header(
      &_hdr, 0,
      ::fidl_test_socketprotocol::
          kWithAndWithoutRequestResponse_WithRequestEmptyResponse_Ordinal);
}

void ::fidl::WireResponse<
    ::fidl_test_socketprotocol::WithAndWithoutRequestResponse::
        WithRequestEmptyResponse>::_InitHeader() {
  fidl_init_txn_header(
      &_hdr, 0,
      ::fidl_test_socketprotocol::
          kWithAndWithoutRequestResponse_WithRequestEmptyResponse_Ordinal);
}

void ::fidl::WireRequest<
    ::fidl_test_socketprotocol::WithAndWithoutRequestResponse::
        WithRequestWithResponse>::_InitHeader() {
  fidl_init_txn_header(
      &_hdr, 0,
      ::fidl_test_socketprotocol::
          kWithAndWithoutRequestResponse_WithRequestWithResponse_Ordinal);
}

void ::fidl::WireResponse<
    ::fidl_test_socketprotocol::WithAndWithoutRequestResponse::
        WithRequestWithResponse>::_InitHeader() {
  fidl_init_txn_header(
      &_hdr, 0,
      ::fidl_test_socketprotocol::
          kWithAndWithoutRequestResponse_WithRequestWithResponse_Ordinal);
}

#ifdef __Fuchsia__

#endif  // __Fuchsia__
