// WARNING: This file is machine generated by fidlgen.

#pragma once

#include <fidl/test.service/cpp/markers.h>
#include <fidl/test.service/cpp/wire_types.h>
#include <lib/fidl/llcpp/wire_messaging.h>

#ifdef __Fuchsia__

#include <lib/fidl/llcpp/client.h>
#include <lib/fidl/llcpp/connect_service.h>
#include <lib/fidl/llcpp/server.h>
#include <lib/fidl/llcpp/service_handler_interface.h>
#include <lib/fidl/llcpp/sync_call.h>

#endif  // __Fuchsia__

namespace test_service {
class SecondProtocol;

class FirstProtocol;

class SingleMemberService;

class MultiHomogeneousMemberService;

class MultiHeterogeneousMemberService;

class EmptyService;

__LOCAL extern "C" const fidl_type_t
    test_service_SecondProtocolMethodOnSecondRequestMessageTable;

__LOCAL extern "C" const fidl_type_t
    test_service_SecondProtocolMethodOnSecondResponseMessageTable;
}  // namespace test_service
template <>
struct ::fidl::internal::WireOrdinal<
    ::test_service::SecondProtocol::MethodOnSecond>
    final {
  static constexpr uint64_t value = 8121179205110225988lu;
};

namespace test_service {}  // namespace test_service
#ifdef __Fuchsia__

template <>
struct ::fidl::internal::ProtocolDetails<::test_service::SecondProtocol> {};
#endif  // __Fuchsia__

#ifdef __Fuchsia__

template <>
struct ::fidl::internal::WireServerDispatcher<::test_service::SecondProtocol>
    final {
  WireServerDispatcher() = delete;
  static ::fidl::DispatchResult TryDispatch(
      ::fidl::WireServer<::test_service::SecondProtocol>* impl,
      ::fidl::IncomingMessage& msg,
      internal::IncomingTransportContext transport_context,
      ::fidl::Transaction* txn);
  static void Dispatch(::fidl::WireServer<::test_service::SecondProtocol>* impl,
                       ::fidl::IncomingMessage&& msg,
                       internal::IncomingTransportContext transport_context,
                       ::fidl::Transaction* txn);

 private:
  static const ::fidl::internal::MethodEntry entries_[];
  static const ::fidl::internal::MethodEntry* entries_end_;
};
#endif  // __Fuchsia__

template <>
struct ::fidl::WireRequest<::test_service::SecondProtocol::MethodOnSecond>
    final {
  FIDL_ALIGNDECL
  fidl_message_header_t _hdr;

  WireRequest() { _InitHeader(); }

  static constexpr const fidl_type_t* Type =
      &::fidl::_llcpp_coding_AnyZeroArgMessageTable;
  static constexpr uint32_t MaxNumHandles = 0;
  static constexpr uint32_t PrimarySize = 16;
  static constexpr uint32_t PrimarySizeV1 = 16;
  static constexpr uint32_t MaxOutOfLine = 0;
  static constexpr uint32_t MaxOutOfLineV1 = 0;
  static constexpr bool HasFlexibleEnvelope = false;
  static constexpr bool HasPointer = false;
  static constexpr ::fidl::internal::TransactionalMessageKind MessageKind =
      ::fidl::internal::TransactionalMessageKind::kRequest;

  class UnownedEncodedMessage;
  class OwnedEncodedMessage;

 public:
  class DecodedMessage;

 private:
  void _InitHeader();
};
#ifdef __Fuchsia__

template <>
class ::fidl::WireResult<::test_service::SecondProtocol::MethodOnSecond> final
    : public ::fidl::Result {
 public:
  WireResult(
      ::fidl::UnownedClientEnd<::test_service::SecondProtocol> client,
      ::fidl::WireRequest<::test_service::SecondProtocol::MethodOnSecond>*
          request);
  explicit WireResult(const ::fidl::Result& result) : ::fidl::Result(result) {}
  WireResult(WireResult&&) = delete;
  WireResult(const WireResult&) = delete;
  WireResult* operator=(WireResult&&) = delete;
  WireResult* operator=(const WireResult&) = delete;
  ~WireResult() = default;

 private:
};
template <>
class ::fidl::WireUnownedResult<::test_service::SecondProtocol::MethodOnSecond>
    final : public ::fidl::Result {
 public:
  explicit WireUnownedResult(
      ::fidl::UnownedClientEnd<::test_service::SecondProtocol> client_end,
      ::fidl::internal::AnyBufferAllocator& allocator,
      ::fidl::WireRequest<::test_service::SecondProtocol::MethodOnSecond>*
          request);
  explicit WireUnownedResult(const ::fidl::Result& result)
      : ::fidl::Result(result) {}
  WireUnownedResult(WireUnownedResult&&) = delete;
  WireUnownedResult(const WireUnownedResult&) = delete;
  WireUnownedResult* operator=(WireUnownedResult&&) = delete;
  WireUnownedResult* operator=(const WireUnownedResult&) = delete;
  ~WireUnownedResult() = default;
};
template <>
class ::fidl::internal::WireEventHandlerInterface<
    ::test_service::SecondProtocol> {
 public:
  WireEventHandlerInterface() = default;
  virtual ~WireEventHandlerInterface() = default;
};

template <>
class ::fidl::WireAsyncEventHandler<::test_service::SecondProtocol>
    : public ::fidl::internal::WireEventHandlerInterface<
          ::test_service::SecondProtocol>,
      public ::fidl::internal::AsyncEventHandler {
 public:
  WireAsyncEventHandler() = default;
};

template <>
class ::fidl::WireSyncEventHandler<::test_service::SecondProtocol>
    : public ::fidl::internal::WireEventHandlerInterface<
          ::test_service::SecondProtocol> {
 public:
  WireSyncEventHandler() = default;

  // Method called when an unknown event is found. This methods gives the status
  // which, in this case, is returned by HandleOneEvent.
  virtual zx_status_t Unknown() = 0;

  // Handle all possible events defined in this protocol.
  // Blocks to consume exactly one message from the channel, then call the
  // corresponding virtual method.
  ::fidl::Result HandleOneEvent(
      ::fidl::UnownedClientEnd<::test_service::SecondProtocol> client_end);
};

template <>
class ::fidl::internal::WireEventDispatcher<::test_service::SecondProtocol>
    final : public ::fidl::internal::IncomingEventDispatcher<
                ::fidl::WireAsyncEventHandler<::test_service::SecondProtocol>> {
 public:
  explicit WireEventDispatcher(
      ::fidl::WireAsyncEventHandler<::test_service::SecondProtocol>*
          event_handler)
      : IncomingEventDispatcher(event_handler) {}

 private:
  std::optional<::fidl::UnbindInfo> DispatchEvent(
      ::fidl::IncomingMessage& msg,
      ::fidl::internal::IncomingTransportContext transport_context) override;
};

// Methods to make a sync FIDL call directly on an unowned handle or a
// const reference to a |fidl::ClientEnd<::test_service::SecondProtocol>|,
// avoiding setting up a client.
template <>
class ::fidl::internal::WireSyncClientImpl<::test_service::SecondProtocol> final
    : public ::fidl::internal::SyncEndpointManagedVeneer<
          ::fidl::internal::WireSyncClientImpl<
              ::test_service::SecondProtocol>> {
 public:
  // Allocates 16 bytes of message buffer on the stack. No heap allocation
  // necessary.
  ::fidl::WireResult<::test_service::SecondProtocol::MethodOnSecond>
  MethodOnSecond() {
    ::fidl::WireRequest<::test_service::SecondProtocol::MethodOnSecond>
        _request{};
    return ::fidl::WireResult<::test_service::SecondProtocol::MethodOnSecond>(
        _client_end(), &_request);
  }

 private:
  ::fidl::UnownedClientEnd<::test_service::SecondProtocol> _client_end() const {
    return ::fidl::UnownedClientEnd<::test_service::SecondProtocol>(
        _transport().get<::fidl::internal::ChannelTransport>());
  }
};

template <>
class ::fidl::internal::WireSyncBufferClientImpl<::test_service::SecondProtocol>
    final : public ::fidl::internal::SyncEndpointBufferVeneer<
                ::fidl::internal::WireSyncBufferClientImpl<
                    ::test_service::SecondProtocol>> {
 public:
  // Caller provides the backing storage for FIDL message via an argument to
  // `.buffer()`.
  ::fidl::WireUnownedResult<::test_service::SecondProtocol::MethodOnSecond>
  MethodOnSecond() {
    ::fidl::WireRequest<::test_service::SecondProtocol::MethodOnSecond>
        _request{};
    return ::fidl::WireUnownedResult<
        ::test_service::SecondProtocol::MethodOnSecond>(
        _client_end(), _allocator(), &_request);
  }

 private:
  ::fidl::UnownedClientEnd<::test_service::SecondProtocol> _client_end() const {
    return ::fidl::UnownedClientEnd<::test_service::SecondProtocol>(
        _transport().get<::fidl::internal::ChannelTransport>());
  }
};

// Pure-virtual interface to be implemented by a server.
// This interface uses typed channels (i.e. |fidl::ClientEnd<SomeProtocol>|
// and |fidl::ServerEnd<SomeProtocol>|).
template <>
class ::fidl::WireServer<::test_service::SecondProtocol>
    : public ::fidl::internal::IncomingMessageDispatcher {
 public:
  WireServer() = default;
  virtual ~WireServer() = default;

  // The FIDL protocol type that is implemented by this server.
  using _EnclosingProtocol = ::test_service::SecondProtocol;

  using MethodOnSecondCompleter = ::fidl::internal::WireCompleter<
      ::test_service::SecondProtocol::MethodOnSecond>;
  using MethodOnSecondRequestView = ::fidl::internal::WireRequestView<
      ::test_service::SecondProtocol::MethodOnSecond>;

  virtual void MethodOnSecond(MethodOnSecondRequestView request,
                              MethodOnSecondCompleter::Sync& _completer) = 0;

 private:
  void dispatch_message(
      ::fidl::IncomingMessage&& msg, ::fidl::Transaction* txn,
      ::fidl::internal::IncomingTransportContext transport_context) final;
};
#endif  // __Fuchsia__

namespace test_service {
__LOCAL extern "C" const fidl_type_t
    test_service_FirstProtocolMethodOnFirstRequestMessageTable;

__LOCAL extern "C" const fidl_type_t
    test_service_FirstProtocolMethodOnFirstResponseMessageTable;
}  // namespace test_service
template <>
struct ::fidl::internal::WireOrdinal<
    ::test_service::FirstProtocol::MethodOnFirst>
    final {
  static constexpr uint64_t value = 6352548393671797041lu;
};

namespace test_service {}  // namespace test_service
#ifdef __Fuchsia__

template <>
struct ::fidl::internal::ProtocolDetails<::test_service::FirstProtocol> {};
#endif  // __Fuchsia__

#ifdef __Fuchsia__

template <>
struct ::fidl::internal::WireServerDispatcher<::test_service::FirstProtocol>
    final {
  WireServerDispatcher() = delete;
  static ::fidl::DispatchResult TryDispatch(
      ::fidl::WireServer<::test_service::FirstProtocol>* impl,
      ::fidl::IncomingMessage& msg,
      internal::IncomingTransportContext transport_context,
      ::fidl::Transaction* txn);
  static void Dispatch(::fidl::WireServer<::test_service::FirstProtocol>* impl,
                       ::fidl::IncomingMessage&& msg,
                       internal::IncomingTransportContext transport_context,
                       ::fidl::Transaction* txn);

 private:
  static const ::fidl::internal::MethodEntry entries_[];
  static const ::fidl::internal::MethodEntry* entries_end_;
};
#endif  // __Fuchsia__

template <>
struct ::fidl::WireRequest<::test_service::FirstProtocol::MethodOnFirst> final {
  FIDL_ALIGNDECL
  fidl_message_header_t _hdr;

  WireRequest() { _InitHeader(); }

  static constexpr const fidl_type_t* Type =
      &::fidl::_llcpp_coding_AnyZeroArgMessageTable;
  static constexpr uint32_t MaxNumHandles = 0;
  static constexpr uint32_t PrimarySize = 16;
  static constexpr uint32_t PrimarySizeV1 = 16;
  static constexpr uint32_t MaxOutOfLine = 0;
  static constexpr uint32_t MaxOutOfLineV1 = 0;
  static constexpr bool HasFlexibleEnvelope = false;
  static constexpr bool HasPointer = false;
  static constexpr ::fidl::internal::TransactionalMessageKind MessageKind =
      ::fidl::internal::TransactionalMessageKind::kRequest;

  class UnownedEncodedMessage;
  class OwnedEncodedMessage;

 public:
  class DecodedMessage;

 private:
  void _InitHeader();
};
#ifdef __Fuchsia__

template <>
class ::fidl::WireResult<::test_service::FirstProtocol::MethodOnFirst> final
    : public ::fidl::Result {
 public:
  WireResult(::fidl::UnownedClientEnd<::test_service::FirstProtocol> client,
             ::fidl::WireRequest<::test_service::FirstProtocol::MethodOnFirst>*
                 request);
  explicit WireResult(const ::fidl::Result& result) : ::fidl::Result(result) {}
  WireResult(WireResult&&) = delete;
  WireResult(const WireResult&) = delete;
  WireResult* operator=(WireResult&&) = delete;
  WireResult* operator=(const WireResult&) = delete;
  ~WireResult() = default;

 private:
};
template <>
class ::fidl::WireUnownedResult<::test_service::FirstProtocol::MethodOnFirst>
    final : public ::fidl::Result {
 public:
  explicit WireUnownedResult(
      ::fidl::UnownedClientEnd<::test_service::FirstProtocol> client_end,
      ::fidl::internal::AnyBufferAllocator& allocator,
      ::fidl::WireRequest<::test_service::FirstProtocol::MethodOnFirst>*
          request);
  explicit WireUnownedResult(const ::fidl::Result& result)
      : ::fidl::Result(result) {}
  WireUnownedResult(WireUnownedResult&&) = delete;
  WireUnownedResult(const WireUnownedResult&) = delete;
  WireUnownedResult* operator=(WireUnownedResult&&) = delete;
  WireUnownedResult* operator=(const WireUnownedResult&) = delete;
  ~WireUnownedResult() = default;
};
template <>
class ::fidl::internal::WireEventHandlerInterface<
    ::test_service::FirstProtocol> {
 public:
  WireEventHandlerInterface() = default;
  virtual ~WireEventHandlerInterface() = default;
};

template <>
class ::fidl::WireAsyncEventHandler<::test_service::FirstProtocol>
    : public ::fidl::internal::WireEventHandlerInterface<
          ::test_service::FirstProtocol>,
      public ::fidl::internal::AsyncEventHandler {
 public:
  WireAsyncEventHandler() = default;
};

template <>
class ::fidl::WireSyncEventHandler<::test_service::FirstProtocol>
    : public ::fidl::internal::WireEventHandlerInterface<
          ::test_service::FirstProtocol> {
 public:
  WireSyncEventHandler() = default;

  // Method called when an unknown event is found. This methods gives the status
  // which, in this case, is returned by HandleOneEvent.
  virtual zx_status_t Unknown() = 0;

  // Handle all possible events defined in this protocol.
  // Blocks to consume exactly one message from the channel, then call the
  // corresponding virtual method.
  ::fidl::Result HandleOneEvent(
      ::fidl::UnownedClientEnd<::test_service::FirstProtocol> client_end);
};

template <>
class ::fidl::internal::WireEventDispatcher<::test_service::FirstProtocol> final
    : public ::fidl::internal::IncomingEventDispatcher<
          ::fidl::WireAsyncEventHandler<::test_service::FirstProtocol>> {
 public:
  explicit WireEventDispatcher(
      ::fidl::WireAsyncEventHandler<::test_service::FirstProtocol>*
          event_handler)
      : IncomingEventDispatcher(event_handler) {}

 private:
  std::optional<::fidl::UnbindInfo> DispatchEvent(
      ::fidl::IncomingMessage& msg,
      ::fidl::internal::IncomingTransportContext transport_context) override;
};

// Methods to make a sync FIDL call directly on an unowned handle or a
// const reference to a |fidl::ClientEnd<::test_service::FirstProtocol>|,
// avoiding setting up a client.
template <>
class ::fidl::internal::WireSyncClientImpl<::test_service::FirstProtocol> final
    : public ::fidl::internal::SyncEndpointManagedVeneer<
          ::fidl::internal::WireSyncClientImpl<::test_service::FirstProtocol>> {
 public:
  // Allocates 16 bytes of message buffer on the stack. No heap allocation
  // necessary.
  ::fidl::WireResult<::test_service::FirstProtocol::MethodOnFirst>
  MethodOnFirst() {
    ::fidl::WireRequest<::test_service::FirstProtocol::MethodOnFirst>
        _request{};
    return ::fidl::WireResult<::test_service::FirstProtocol::MethodOnFirst>(
        _client_end(), &_request);
  }

 private:
  ::fidl::UnownedClientEnd<::test_service::FirstProtocol> _client_end() const {
    return ::fidl::UnownedClientEnd<::test_service::FirstProtocol>(
        _transport().get<::fidl::internal::ChannelTransport>());
  }
};

template <>
class ::fidl::internal::WireSyncBufferClientImpl<::test_service::FirstProtocol>
    final : public ::fidl::internal::SyncEndpointBufferVeneer<
                ::fidl::internal::WireSyncBufferClientImpl<
                    ::test_service::FirstProtocol>> {
 public:
  // Caller provides the backing storage for FIDL message via an argument to
  // `.buffer()`.
  ::fidl::WireUnownedResult<::test_service::FirstProtocol::MethodOnFirst>
  MethodOnFirst() {
    ::fidl::WireRequest<::test_service::FirstProtocol::MethodOnFirst>
        _request{};
    return ::fidl::WireUnownedResult<
        ::test_service::FirstProtocol::MethodOnFirst>(_client_end(),
                                                      _allocator(), &_request);
  }

 private:
  ::fidl::UnownedClientEnd<::test_service::FirstProtocol> _client_end() const {
    return ::fidl::UnownedClientEnd<::test_service::FirstProtocol>(
        _transport().get<::fidl::internal::ChannelTransport>());
  }
};

// Pure-virtual interface to be implemented by a server.
// This interface uses typed channels (i.e. |fidl::ClientEnd<SomeProtocol>|
// and |fidl::ServerEnd<SomeProtocol>|).
template <>
class ::fidl::WireServer<::test_service::FirstProtocol>
    : public ::fidl::internal::IncomingMessageDispatcher {
 public:
  WireServer() = default;
  virtual ~WireServer() = default;

  // The FIDL protocol type that is implemented by this server.
  using _EnclosingProtocol = ::test_service::FirstProtocol;

  using MethodOnFirstCompleter = ::fidl::internal::WireCompleter<
      ::test_service::FirstProtocol::MethodOnFirst>;
  using MethodOnFirstRequestView = ::fidl::internal::WireRequestView<
      ::test_service::FirstProtocol::MethodOnFirst>;

  virtual void MethodOnFirst(MethodOnFirstRequestView request,
                             MethodOnFirstCompleter::Sync& _completer) = 0;

 private:
  void dispatch_message(
      ::fidl::IncomingMessage&& msg, ::fidl::Transaction* txn,
      ::fidl::internal::IncomingTransportContext transport_context) final;
};
#endif  // __Fuchsia__

namespace test_service {

class SingleMemberService final {
  SingleMemberService() = default;

 public:
  static constexpr char Name[] = "test.service.SingleMemberService";

  // Client protocol for connecting to member protocols of a service instance.
  class ServiceClient final {
    ServiceClient() = delete;

   public:
    ServiceClient(::zx::channel dir,
                  ::fidl::internal::ConnectMemberFunc connect_func)
        : dir_(std::move(dir)), connect_func_(connect_func) {}

    // Connects to the member protocol "single_member".
    // Returns a |fidl::ClientEnd<::test_service::FirstProtocol>| on success,
    // which can be used with |fidl::BindSyncClient| to create a synchronous
    // client, or |fidl::WireClient| or |fidl::WireSharedClient| to create a
    // client that supports both asynchronous and synchronous operations.
    //
    // # Errors
    //
    // On failure, returns a |zx::error| with status != ZX_OK.
    // Failures can occur if channel creation failed, or if there was an issue
    // making a |fuchsia.io.Directory/Open| call.
    //
    // Since the call to |Open| is asynchronous, an error sent by the remote end
    // will not result in a failure of this method. Any errors sent by the
    // remote will appear on the |ClientEnd| returned from this method.
    ::zx::status<::fidl::ClientEnd<::test_service::FirstProtocol>>
    connect_single_member() {
      auto endpoints = ::fidl::CreateEndpoints<::test_service::FirstProtocol>();
      if (endpoints.is_error()) {
        return endpoints.take_error();
      }
      auto connection = connect_func_(::zx::unowned_channel(dir_),
                                      ::fidl::StringView("single_member"),
                                      endpoints->server.TakeChannel());
      if (connection.is_error()) {
        return connection.take_error();
      }
      return ::zx::ok(std::move(endpoints->client));
    }

   private:
    ::zx::channel dir_;
    ::fidl::internal::ConnectMemberFunc connect_func_;
  };

  // Facilitates member protocol registration for servers.
  class Handler final {
   public:
    // Constructs a FIDL Service-typed handler. Does not take ownership of
    // |service_handler|.
    explicit Handler(::fidl::ServiceHandlerInterface* service_handler)
        : service_handler_(service_handler) {}

    // Adds member "single_member" to the service instance. |handler| will be
    // invoked on connection attempts.
    //
    // # Errors
    //
    // Returns ZX_ERR_ALREADY_EXISTS if the member was already added.
    ::zx::status<> add_single_member(
        ::fidl::ServiceHandlerInterface::MemberHandler<
            ::test_service::FirstProtocol>
            handler) {
      return service_handler_->AddMember("single_member", std::move(handler));
    }

   private:
    ::fidl::ServiceHandlerInterface* service_handler_;  // Not owned.
  };
};

class MultiHomogeneousMemberService final {
  MultiHomogeneousMemberService() = default;

 public:
  static constexpr char Name[] = "test.service.MultiHomogeneousMemberService";

  // Client protocol for connecting to member protocols of a service instance.
  class ServiceClient final {
    ServiceClient() = delete;

   public:
    ServiceClient(::zx::channel dir,
                  ::fidl::internal::ConnectMemberFunc connect_func)
        : dir_(std::move(dir)), connect_func_(connect_func) {}

    // Connects to the member protocol "first_member".
    // Returns a |fidl::ClientEnd<::test_service::FirstProtocol>| on success,
    // which can be used with |fidl::BindSyncClient| to create a synchronous
    // client, or |fidl::WireClient| or |fidl::WireSharedClient| to create a
    // client that supports both asynchronous and synchronous operations.
    //
    // # Errors
    //
    // On failure, returns a |zx::error| with status != ZX_OK.
    // Failures can occur if channel creation failed, or if there was an issue
    // making a |fuchsia.io.Directory/Open| call.
    //
    // Since the call to |Open| is asynchronous, an error sent by the remote end
    // will not result in a failure of this method. Any errors sent by the
    // remote will appear on the |ClientEnd| returned from this method.
    ::zx::status<::fidl::ClientEnd<::test_service::FirstProtocol>>
    connect_first_member() {
      auto endpoints = ::fidl::CreateEndpoints<::test_service::FirstProtocol>();
      if (endpoints.is_error()) {
        return endpoints.take_error();
      }
      auto connection = connect_func_(::zx::unowned_channel(dir_),
                                      ::fidl::StringView("first_member"),
                                      endpoints->server.TakeChannel());
      if (connection.is_error()) {
        return connection.take_error();
      }
      return ::zx::ok(std::move(endpoints->client));
    }

    // Connects to the member protocol "second_member".
    // Returns a |fidl::ClientEnd<::test_service::FirstProtocol>| on success,
    // which can be used with |fidl::BindSyncClient| to create a synchronous
    // client, or |fidl::WireClient| or |fidl::WireSharedClient| to create a
    // client that supports both asynchronous and synchronous operations.
    //
    // # Errors
    //
    // On failure, returns a |zx::error| with status != ZX_OK.
    // Failures can occur if channel creation failed, or if there was an issue
    // making a |fuchsia.io.Directory/Open| call.
    //
    // Since the call to |Open| is asynchronous, an error sent by the remote end
    // will not result in a failure of this method. Any errors sent by the
    // remote will appear on the |ClientEnd| returned from this method.
    ::zx::status<::fidl::ClientEnd<::test_service::FirstProtocol>>
    connect_second_member() {
      auto endpoints = ::fidl::CreateEndpoints<::test_service::FirstProtocol>();
      if (endpoints.is_error()) {
        return endpoints.take_error();
      }
      auto connection = connect_func_(::zx::unowned_channel(dir_),
                                      ::fidl::StringView("second_member"),
                                      endpoints->server.TakeChannel());
      if (connection.is_error()) {
        return connection.take_error();
      }
      return ::zx::ok(std::move(endpoints->client));
    }

   private:
    ::zx::channel dir_;
    ::fidl::internal::ConnectMemberFunc connect_func_;
  };

  // Facilitates member protocol registration for servers.
  class Handler final {
   public:
    // Constructs a FIDL Service-typed handler. Does not take ownership of
    // |service_handler|.
    explicit Handler(::fidl::ServiceHandlerInterface* service_handler)
        : service_handler_(service_handler) {}

    // Adds member "first_member" to the service instance. |handler| will be
    // invoked on connection attempts.
    //
    // # Errors
    //
    // Returns ZX_ERR_ALREADY_EXISTS if the member was already added.
    ::zx::status<> add_first_member(
        ::fidl::ServiceHandlerInterface::MemberHandler<
            ::test_service::FirstProtocol>
            handler) {
      return service_handler_->AddMember("first_member", std::move(handler));
    }

    // Adds member "second_member" to the service instance. |handler| will be
    // invoked on connection attempts.
    //
    // # Errors
    //
    // Returns ZX_ERR_ALREADY_EXISTS if the member was already added.
    ::zx::status<> add_second_member(
        ::fidl::ServiceHandlerInterface::MemberHandler<
            ::test_service::FirstProtocol>
            handler) {
      return service_handler_->AddMember("second_member", std::move(handler));
    }

   private:
    ::fidl::ServiceHandlerInterface* service_handler_;  // Not owned.
  };
};

class MultiHeterogeneousMemberService final {
  MultiHeterogeneousMemberService() = default;

 public:
  static constexpr char Name[] = "test.service.MultiHeterogeneousMemberService";

  // Client protocol for connecting to member protocols of a service instance.
  class ServiceClient final {
    ServiceClient() = delete;

   public:
    ServiceClient(::zx::channel dir,
                  ::fidl::internal::ConnectMemberFunc connect_func)
        : dir_(std::move(dir)), connect_func_(connect_func) {}

    // Connects to the member protocol "first_member".
    // Returns a |fidl::ClientEnd<::test_service::FirstProtocol>| on success,
    // which can be used with |fidl::BindSyncClient| to create a synchronous
    // client, or |fidl::WireClient| or |fidl::WireSharedClient| to create a
    // client that supports both asynchronous and synchronous operations.
    //
    // # Errors
    //
    // On failure, returns a |zx::error| with status != ZX_OK.
    // Failures can occur if channel creation failed, or if there was an issue
    // making a |fuchsia.io.Directory/Open| call.
    //
    // Since the call to |Open| is asynchronous, an error sent by the remote end
    // will not result in a failure of this method. Any errors sent by the
    // remote will appear on the |ClientEnd| returned from this method.
    ::zx::status<::fidl::ClientEnd<::test_service::FirstProtocol>>
    connect_first_member() {
      auto endpoints = ::fidl::CreateEndpoints<::test_service::FirstProtocol>();
      if (endpoints.is_error()) {
        return endpoints.take_error();
      }
      auto connection = connect_func_(::zx::unowned_channel(dir_),
                                      ::fidl::StringView("first_member"),
                                      endpoints->server.TakeChannel());
      if (connection.is_error()) {
        return connection.take_error();
      }
      return ::zx::ok(std::move(endpoints->client));
    }

    // Connects to the member protocol "second_member".
    // Returns a |fidl::ClientEnd<::test_service::SecondProtocol>| on success,
    // which can be used with |fidl::BindSyncClient| to create a synchronous
    // client, or |fidl::WireClient| or |fidl::WireSharedClient| to create a
    // client that supports both asynchronous and synchronous operations.
    //
    // # Errors
    //
    // On failure, returns a |zx::error| with status != ZX_OK.
    // Failures can occur if channel creation failed, or if there was an issue
    // making a |fuchsia.io.Directory/Open| call.
    //
    // Since the call to |Open| is asynchronous, an error sent by the remote end
    // will not result in a failure of this method. Any errors sent by the
    // remote will appear on the |ClientEnd| returned from this method.
    ::zx::status<::fidl::ClientEnd<::test_service::SecondProtocol>>
    connect_second_member() {
      auto endpoints =
          ::fidl::CreateEndpoints<::test_service::SecondProtocol>();
      if (endpoints.is_error()) {
        return endpoints.take_error();
      }
      auto connection = connect_func_(::zx::unowned_channel(dir_),
                                      ::fidl::StringView("second_member"),
                                      endpoints->server.TakeChannel());
      if (connection.is_error()) {
        return connection.take_error();
      }
      return ::zx::ok(std::move(endpoints->client));
    }

   private:
    ::zx::channel dir_;
    ::fidl::internal::ConnectMemberFunc connect_func_;
  };

  // Facilitates member protocol registration for servers.
  class Handler final {
   public:
    // Constructs a FIDL Service-typed handler. Does not take ownership of
    // |service_handler|.
    explicit Handler(::fidl::ServiceHandlerInterface* service_handler)
        : service_handler_(service_handler) {}

    // Adds member "first_member" to the service instance. |handler| will be
    // invoked on connection attempts.
    //
    // # Errors
    //
    // Returns ZX_ERR_ALREADY_EXISTS if the member was already added.
    ::zx::status<> add_first_member(
        ::fidl::ServiceHandlerInterface::MemberHandler<
            ::test_service::FirstProtocol>
            handler) {
      return service_handler_->AddMember("first_member", std::move(handler));
    }

    // Adds member "second_member" to the service instance. |handler| will be
    // invoked on connection attempts.
    //
    // # Errors
    //
    // Returns ZX_ERR_ALREADY_EXISTS if the member was already added.
    ::zx::status<> add_second_member(
        ::fidl::ServiceHandlerInterface::MemberHandler<
            ::test_service::SecondProtocol>
            handler) {
      return service_handler_->AddMember("second_member", std::move(handler));
    }

   private:
    ::fidl::ServiceHandlerInterface* service_handler_;  // Not owned.
  };
};

class EmptyService final {
  EmptyService() = default;

 public:
  static constexpr char Name[] = "test.service.EmptyService";

  // Client protocol for connecting to member protocols of a service instance.
  class ServiceClient final {
    ServiceClient() = delete;

   public:
    ServiceClient(::zx::channel dir,
                  ::fidl::internal::ConnectMemberFunc connect_func) {
      (void)dir;
      (void)connect_func;
    }

   private:
  };

  // Facilitates member protocol registration for servers.
  class Handler final {
   public:
    // Constructs a FIDL Service-typed handler. Does not take ownership of
    // |service_handler|.
    explicit Handler(::fidl::ServiceHandlerInterface* service_handler) {
      (void)service_handler;
    }

   private:
  };
};

}  // namespace test_service
namespace fidl {

template <>
struct IsFidlType<
    ::fidl::WireRequest<::test_service::SecondProtocol::MethodOnSecond>>
    : public std::true_type {};
template <>
struct IsFidlMessage<
    ::fidl::WireRequest<::test_service::SecondProtocol::MethodOnSecond>>
    : public std::true_type {};
static_assert(
    sizeof(
        ::fidl::WireRequest<::test_service::SecondProtocol::MethodOnSecond>) ==
    ::fidl::WireRequest<
        ::test_service::SecondProtocol::MethodOnSecond>::PrimarySize);

template <>
struct IsFidlType<
    ::fidl::WireRequest<::test_service::FirstProtocol::MethodOnFirst>>
    : public std::true_type {};
template <>
struct IsFidlMessage<
    ::fidl::WireRequest<::test_service::FirstProtocol::MethodOnFirst>>
    : public std::true_type {};
static_assert(
    sizeof(::fidl::WireRequest<::test_service::FirstProtocol::MethodOnFirst>) ==
    ::fidl::WireRequest<
        ::test_service::FirstProtocol::MethodOnFirst>::PrimarySize);

#ifdef __Fuchsia__
}  // namespace fidl

template <>
class ::fidl::internal::WireClientImpl<::test_service::SecondProtocol> final
    : public ::fidl::internal::ClientBase {
 public:
  // Allocates 16 bytes of message buffer on the stack. No heap allocation
  // necessary.
  ::fidl::Result MethodOnSecond();
  WireClientImpl() = default;
};

template <>
class ::fidl::internal::WireWeakOnewayBufferClientImpl<
    ::test_service::SecondProtocol>
    : public ::fidl::internal::BufferClientImplBase {
 public:
  using BufferClientImplBase::BufferClientImplBase;

  // Caller provides the backing storage for FIDL message.
  ::fidl::Result MethodOnSecond();
};

template <>
class ::fidl::internal::WireWeakAsyncBufferClientImpl<
    ::test_service::SecondProtocol>
    final : public ::fidl::internal::WireWeakOnewayBufferClientImpl<
                ::test_service::SecondProtocol> {
 public:
  using WireWeakOnewayBufferClientImpl::WireWeakOnewayBufferClientImpl;
};

template <>
class ::fidl::internal::WireWeakOnewayClientImpl<::test_service::SecondProtocol>
    : public ::fidl::internal::ClientImplBase {
 public:
  using ClientImplBase::ClientImplBase;

  // Allocates 16 bytes of message buffer on the stack. No heap allocation
  // necessary.
  ::fidl::Result MethodOnSecond();
};
template <>
class ::fidl::internal::WireWeakSyncClientImpl<::test_service::SecondProtocol>
    final : public ::fidl::internal::WireWeakOnewayClientImpl<
                ::test_service::SecondProtocol> {
 public:
  using WireWeakOnewayClientImpl::WireWeakOnewayClientImpl;
};
namespace fidl {
#endif  // __Fuchsia__

}  // namespace fidl
#ifdef __Fuchsia__
// |EventSender| owns a server endpoint of a channel speaking
// the SecondProtocol protocol, and can send events in that protocol.
template <>
class ::fidl::WireEventSender<::test_service::SecondProtocol> {
 public:
  // Constructs an event sender with an invalid channel.
  WireEventSender() = default;

  explicit WireEventSender(
      ::fidl::ServerEnd<::test_service::SecondProtocol> server_end)
      : server_end_(std::move(server_end)) {}

  // The underlying server channel endpoint, which may be replaced at run-time.
  const ::fidl::ServerEnd<::test_service::SecondProtocol>& server_end() const {
    return server_end_;
  }
  ::fidl::ServerEnd<::test_service::SecondProtocol>& server_end() {
    return server_end_;
  }

  const ::zx::channel& channel() const { return server_end_.channel(); }
  ::zx::channel& channel() { return server_end_.channel(); }

  // Whether the underlying channel is valid.
  bool is_valid() const { return server_end_.is_valid(); }

 private:
  ::fidl::ServerEnd<::test_service::SecondProtocol> server_end_;
};

template <>
class ::fidl::internal::WireWeakEventSender<::test_service::SecondProtocol> {
 public:
  WireWeakEventSender(
      std::weak_ptr<::fidl::internal::AsyncServerBinding>&& binding)
      : inner_(std::move(binding)) {}

 private:
  friend ServerBindingRefImpl<
      ::test_service::SecondProtocol,
      typename ::test_service::SecondProtocol::Transport>;

  ::fidl::internal::WeakEventSenderInner inner_;
};
#endif  // __Fuchsia__

#ifdef __Fuchsia__

template <>
class ::fidl::internal::WireClientImpl<::test_service::FirstProtocol> final
    : public ::fidl::internal::ClientBase {
 public:
  // Allocates 16 bytes of message buffer on the stack. No heap allocation
  // necessary.
  ::fidl::Result MethodOnFirst();
  WireClientImpl() = default;
};

template <>
class ::fidl::internal::WireWeakOnewayBufferClientImpl<
    ::test_service::FirstProtocol>
    : public ::fidl::internal::BufferClientImplBase {
 public:
  using BufferClientImplBase::BufferClientImplBase;

  // Caller provides the backing storage for FIDL message.
  ::fidl::Result MethodOnFirst();
};

template <>
class ::fidl::internal::WireWeakAsyncBufferClientImpl<
    ::test_service::FirstProtocol>
    final : public ::fidl::internal::WireWeakOnewayBufferClientImpl<
                ::test_service::FirstProtocol> {
 public:
  using WireWeakOnewayBufferClientImpl::WireWeakOnewayBufferClientImpl;
};

template <>
class ::fidl::internal::WireWeakOnewayClientImpl<::test_service::FirstProtocol>
    : public ::fidl::internal::ClientImplBase {
 public:
  using ClientImplBase::ClientImplBase;

  // Allocates 16 bytes of message buffer on the stack. No heap allocation
  // necessary.
  ::fidl::Result MethodOnFirst();
};
template <>
class ::fidl::internal::WireWeakSyncClientImpl<::test_service::FirstProtocol>
    final : public ::fidl::internal::WireWeakOnewayClientImpl<
                ::test_service::FirstProtocol> {
 public:
  using WireWeakOnewayClientImpl::WireWeakOnewayClientImpl;
};
#endif  // __Fuchsia__

#ifdef __Fuchsia__
// |EventSender| owns a server endpoint of a channel speaking
// the FirstProtocol protocol, and can send events in that protocol.
template <>
class ::fidl::WireEventSender<::test_service::FirstProtocol> {
 public:
  // Constructs an event sender with an invalid channel.
  WireEventSender() = default;

  explicit WireEventSender(
      ::fidl::ServerEnd<::test_service::FirstProtocol> server_end)
      : server_end_(std::move(server_end)) {}

  // The underlying server channel endpoint, which may be replaced at run-time.
  const ::fidl::ServerEnd<::test_service::FirstProtocol>& server_end() const {
    return server_end_;
  }
  ::fidl::ServerEnd<::test_service::FirstProtocol>& server_end() {
    return server_end_;
  }

  const ::zx::channel& channel() const { return server_end_.channel(); }
  ::zx::channel& channel() { return server_end_.channel(); }

  // Whether the underlying channel is valid.
  bool is_valid() const { return server_end_.is_valid(); }

 private:
  ::fidl::ServerEnd<::test_service::FirstProtocol> server_end_;
};

template <>
class ::fidl::internal::WireWeakEventSender<::test_service::FirstProtocol> {
 public:
  WireWeakEventSender(
      std::weak_ptr<::fidl::internal::AsyncServerBinding>&& binding)
      : inner_(std::move(binding)) {}

 private:
  friend ServerBindingRefImpl<
      ::test_service::FirstProtocol,
      typename ::test_service::FirstProtocol::Transport>;

  ::fidl::internal::WeakEventSenderInner inner_;
};
#endif  // __Fuchsia__
