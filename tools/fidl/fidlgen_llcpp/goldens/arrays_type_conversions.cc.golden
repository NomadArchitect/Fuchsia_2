// WARNING: This file is machine generated by fidlgen.

#include <fidl/test.arrays/cpp/type_conversions.h>

namespace fidl {
namespace internal {

::test_arrays::StructSmallArray WireNaturalConversionTraits<
    ::test_arrays::wire::StructSmallArray, ::test_arrays::StructSmallArray>::
    ToNatural(::test_arrays::wire::StructSmallArray src) {
  return ::test_arrays::StructSmallArray(
      WireNaturalConversionTraits<
          ::fidl::Array<uint32_t, 2>,
          ::std::array<uint32_t, 2>>::ToNatural(std::move(src.a)));
}

::test_arrays::StructLargeArray WireNaturalConversionTraits<
    ::test_arrays::wire::StructLargeArray, ::test_arrays::StructLargeArray>::
    ToNatural(::test_arrays::wire::StructLargeArray src) {
  return ::test_arrays::StructLargeArray(
      WireNaturalConversionTraits<
          ::fidl::Array<uint32_t, 100>,
          ::std::array<uint32_t, 100>>::ToNatural(std::move(src.a)));
}

::test_arrays::TableSmallArray WireNaturalConversionTraits<
    ::test_arrays::wire::TableSmallArray, ::test_arrays::TableSmallArray>::
    ToNatural(::test_arrays::wire::TableSmallArray src) {
  ::test_arrays::TableSmallArray dst;
  if (src.has_a()) {
    dst.a() = WireNaturalConversionTraits<
        ::fidl::Array<uint32_t, 2>,
        ::std::array<uint32_t, 2>>::ToNatural(std::move(src.a()));
  }

  return dst;
}

::test_arrays::TableLargeArray WireNaturalConversionTraits<
    ::test_arrays::wire::TableLargeArray, ::test_arrays::TableLargeArray>::
    ToNatural(::test_arrays::wire::TableLargeArray src) {
  ::test_arrays::TableLargeArray dst;
  if (src.has_a()) {
    dst.a() = WireNaturalConversionTraits<
        ::fidl::Array<uint32_t, 100>,
        ::std::array<uint32_t, 100>>::ToNatural(std::move(src.a()));
  }

  return dst;
}

::test_arrays::UnionSmallArray WireNaturalConversionTraits<
    ::test_arrays::wire::UnionSmallArray, ::test_arrays::UnionSmallArray>::
    ToNatural(::test_arrays::wire::UnionSmallArray src) {
  switch (src.Which()) {
    case ::test_arrays::wire::UnionSmallArray::Tag::kA:
      return ::test_arrays::UnionSmallArray::WithA(
          WireNaturalConversionTraits<
              ::fidl::Array<uint32_t, 2>,
              ::std::array<uint32_t, 2>>::ToNatural(std::move(src.a())));
    default:
      ZX_PANIC("unknown union tag in strict union");
  }
}

std::unique_ptr<::test_arrays::UnionSmallArray>
WireNaturalConversionTraits<::test_arrays::wire::UnionSmallArray,
                            std::unique_ptr<::test_arrays::UnionSmallArray>>::
    ToNatural(::test_arrays::wire::UnionSmallArray src) {
  if (src.has_invalid_tag()) {
    return nullptr;
  }
  return std::make_unique<::test_arrays::UnionSmallArray>(
      WireNaturalConversionTraits<
          ::test_arrays::wire::UnionSmallArray,
          ::test_arrays::UnionSmallArray>::ToNatural(std::move(src)));
}

::test_arrays::UnionLargeArray WireNaturalConversionTraits<
    ::test_arrays::wire::UnionLargeArray, ::test_arrays::UnionLargeArray>::
    ToNatural(::test_arrays::wire::UnionLargeArray src) {
  switch (src.Which()) {
    case ::test_arrays::wire::UnionLargeArray::Tag::kA:
      return ::test_arrays::UnionLargeArray::WithA(
          WireNaturalConversionTraits<
              ::fidl::Array<uint32_t, 100>,
              ::std::array<uint32_t, 100>>::ToNatural(std::move(src.a())));
    default:
      ZX_PANIC("unknown union tag in strict union");
  }
}

std::unique_ptr<::test_arrays::UnionLargeArray>
WireNaturalConversionTraits<::test_arrays::wire::UnionLargeArray,
                            std::unique_ptr<::test_arrays::UnionLargeArray>>::
    ToNatural(::test_arrays::wire::UnionLargeArray src) {
  if (src.has_invalid_tag()) {
    return nullptr;
  }
  return std::make_unique<::test_arrays::UnionLargeArray>(
      WireNaturalConversionTraits<
          ::test_arrays::wire::UnionLargeArray,
          ::test_arrays::UnionLargeArray>::ToNatural(std::move(src)));
}

#ifdef __Fuchsia__

#endif  // __Fuchsia__
}  // namespace internal
}  // namespace fidl
