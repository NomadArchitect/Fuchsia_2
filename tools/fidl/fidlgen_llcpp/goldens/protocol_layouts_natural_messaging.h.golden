// WARNING: This file is machine generated by fidlgen_llcpp.

#pragma once

#include <fidl/test.protocollayouts.imported/cpp/natural_messaging.h>
#include <fidl/test.protocollayouts/cpp/markers.h>
#include <fidl/test.protocollayouts/cpp/natural_types.h>
#include <fidl/test.protocollayouts/cpp/wire_messaging.h>
#include <lib/fidl/cpp/channel.h>
#include <lib/fidl/cpp/client.h>
#include <lib/fidl/cpp/internal/message_extensions.h>
#include <lib/fidl/cpp/internal/natural_client_messenger.h>
#include <lib/fidl/cpp/internal/natural_server_messenger.h>
#include <lib/fidl/cpp/natural_types.h>
#include <lib/fidl/cpp/unified_messaging.h>

namespace fidl {}  // namespace fidl
template <>
struct ::fidl::internal::NaturalMethodTypes<
    ::test_protocollayouts::MainProtocol::TwoWayAnonComposed> {
  using Completer = fidl::Completer<::fidl::internal::NaturalCompleterBase<
      ::test_protocollayouts::MainProtocol::TwoWayAnonComposed>>;

  using ResultCallback = ::fit::callback<void(
      ::fidl::Result<
          ::test_protocollayouts::MainProtocol::TwoWayAnonComposed>&)>;

  static constexpr bool HasApplicationError = false;

  static constexpr bool IsAbsentBody = false;
};

template <>
struct ::fidl::internal::NaturalMethodTypes<
    ::test_protocollayouts::MainProtocol::TwoWayAnonComposedWithError> {
  using Completer = fidl::Completer<::fidl::internal::NaturalCompleterBase<
      ::test_protocollayouts::MainProtocol::TwoWayAnonComposedWithError>>;

  using ResultCallback = ::fit::callback<void(
      ::fidl::Result<
          ::test_protocollayouts::MainProtocol::TwoWayAnonComposedWithError>&)>;

  static constexpr bool HasApplicationError = true;

  static constexpr bool IsEmptyStructPayload = false;
};

template <>
struct ::fidl::internal::NaturalMethodTypes<
    ::test_protocollayouts::MainProtocol::TwoWayNamedComposed> {
  using Completer = fidl::Completer<::fidl::internal::NaturalCompleterBase<
      ::test_protocollayouts::MainProtocol::TwoWayNamedComposed>>;

  using ResultCallback = ::fit::callback<void(
      ::fidl::Result<
          ::test_protocollayouts::MainProtocol::TwoWayNamedComposed>&)>;

  static constexpr bool HasApplicationError = false;

  static constexpr bool IsAbsentBody = false;
};

template <>
struct ::fidl::internal::NaturalMethodTypes<
    ::test_protocollayouts::MainProtocol::TwoWayNamedComposedWithError> {
  using Completer = fidl::Completer<::fidl::internal::NaturalCompleterBase<
      ::test_protocollayouts::MainProtocol::TwoWayNamedComposedWithError>>;

  using ResultCallback =
      ::fit::callback<void(::fidl::Result<::test_protocollayouts::MainProtocol::
                                              TwoWayNamedComposedWithError>&)>;

  static constexpr bool HasApplicationError = true;

  static constexpr bool IsEmptyStructPayload = false;
};

template <>
struct ::fidl::internal::NaturalMethodTypes<
    ::test_protocollayouts::MainProtocol::TwoWayImport> {
  using Completer = fidl::Completer<::fidl::internal::NaturalCompleterBase<
      ::test_protocollayouts::MainProtocol::TwoWayImport>>;

  using ResultCallback = ::fit::callback<void(
      ::fidl::Result<::test_protocollayouts::MainProtocol::TwoWayImport>&)>;

  static constexpr bool HasApplicationError = false;

  static constexpr bool IsAbsentBody = false;
};

template <>
struct ::fidl::internal::NaturalMethodTypes<
    ::test_protocollayouts::MainProtocol::TwoWayImportWithError> {
  using Completer = fidl::Completer<::fidl::internal::NaturalCompleterBase<
      ::test_protocollayouts::MainProtocol::TwoWayImportWithError>>;

  using ResultCallback = ::fit::callback<void(
      ::fidl::Result<
          ::test_protocollayouts::MainProtocol::TwoWayImportWithError>&)>;

  static constexpr bool HasApplicationError = true;

  static constexpr bool IsEmptyStructPayload = false;
};

template <>
struct ::fidl::internal::NaturalMethodTypes<
    ::test_protocollayouts::MainProtocol::TwoWayLocal> {
  using Completer = fidl::Completer<::fidl::internal::NaturalCompleterBase<
      ::test_protocollayouts::MainProtocol::TwoWayLocal>>;

  using ResultCallback = ::fit::callback<void(
      ::fidl::Result<::test_protocollayouts::MainProtocol::TwoWayLocal>&)>;

  static constexpr bool HasApplicationError = false;

  static constexpr bool IsAbsentBody = false;
};

template <>
struct ::fidl::internal::NaturalMethodTypes<
    ::test_protocollayouts::MainProtocol::TwoWayLocalWithError> {
  using Completer = fidl::Completer<::fidl::internal::NaturalCompleterBase<
      ::test_protocollayouts::MainProtocol::TwoWayLocalWithError>>;

  using ResultCallback = ::fit::callback<void(
      ::fidl::Result<
          ::test_protocollayouts::MainProtocol::TwoWayLocalWithError>&)>;

  static constexpr bool HasApplicationError = true;

  static constexpr bool IsEmptyStructPayload = false;
};

template <>
struct ::fidl::internal::NaturalMethodTypes<
    ::test_protocollayouts::MainProtocol::TwoWayAnon> {
  using Completer = fidl::Completer<::fidl::internal::NaturalCompleterBase<
      ::test_protocollayouts::MainProtocol::TwoWayAnon>>;

  using ResultCallback = ::fit::callback<void(
      ::fidl::Result<::test_protocollayouts::MainProtocol::TwoWayAnon>&)>;

  static constexpr bool HasApplicationError = false;

  static constexpr bool IsAbsentBody = false;
};

template <>
struct ::fidl::internal::NaturalMethodTypes<
    ::test_protocollayouts::MainProtocol::TwoWayAnonWithError> {
  using Completer = fidl::Completer<::fidl::internal::NaturalCompleterBase<
      ::test_protocollayouts::MainProtocol::TwoWayAnonWithError>>;

  using ResultCallback = ::fit::callback<void(
      ::fidl::Result<
          ::test_protocollayouts::MainProtocol::TwoWayAnonWithError>&)>;

  static constexpr bool HasApplicationError = true;

  static constexpr bool IsEmptyStructPayload = false;
};
namespace test_protocollayouts {
__LOCAL extern "C" const fidl_type_t
    test_protocollayouts_imported_ComposedProtocolOneWayAnonComposedRequestTable;

__LOCAL extern "C" const fidl_type_t
    test_protocollayouts_imported_ComposedProtocolTwoWayAnonComposedRequestTable;
__LOCAL extern "C" const fidl_type_t
    test_protocollayouts_imported_ComposedProtocolTwoWayAnonComposedResponseTable;
__LOCAL extern "C" const fidl_type_t
    test_protocollayouts_imported_ComposedProtocolTwoWayAnonComposedWithErrorRequestTable;
__LOCAL extern "C" const fidl_type_t
    test_protocollayouts_imported_ComposedProtocolTwoWayAnonComposedWithErrorTopResponseTable;

__LOCAL extern "C" const fidl_type_t
    test_protocollayouts_imported_ComposedProtocolOnAnonComposedRequestTable;

__LOCAL extern "C" const fidl_type_t
    test_protocollayouts_imported_ComposedProtocolOnAnonComposedWithErrorRequestTable;
__LOCAL extern "C" const fidl_type_t
    test_protocollayouts_imported_ImportTablePayloadTable;

__LOCAL extern "C" const fidl_type_t
    test_protocollayouts_imported_ImportUnionPayloadTable;

__LOCAL extern "C" const fidl_type_t
    test_protocollayouts_imported_ComposedProtocolTwoWayNamedComposedWithErrorTopResponseTable;

__LOCAL extern "C" const fidl_type_t
    test_protocollayouts_imported_ComposedProtocolOnNamedComposedWithErrorRequestTable;

__LOCAL extern "C" const fidl_type_t
    test_protocollayouts_MainProtocolTwoWayImportWithErrorTopResponseTable;

__LOCAL extern "C" const fidl_type_t
    test_protocollayouts_MainProtocolOnImportWithErrorRequestTable;
__LOCAL extern "C" const fidl_type_t
    test_protocollayouts_LocalTablePayloadTable;

__LOCAL extern "C" const fidl_type_t
    test_protocollayouts_LocalUnionPayloadTable;

__LOCAL extern "C" const fidl_type_t
    test_protocollayouts_MainProtocolTwoWayLocalWithErrorTopResponseTable;

__LOCAL extern "C" const fidl_type_t
    test_protocollayouts_MainProtocolOnLocalWithErrorRequestTable;
__LOCAL extern "C" const fidl_type_t
    test_protocollayouts_MainProtocolOneWayAnonRequestTable;

__LOCAL extern "C" const fidl_type_t
    test_protocollayouts_MainProtocolTwoWayAnonRequestTable;
__LOCAL extern "C" const fidl_type_t
    test_protocollayouts_MainProtocolTwoWayAnonResponseTable;
__LOCAL extern "C" const fidl_type_t
    test_protocollayouts_MainProtocolTwoWayAnonWithErrorRequestTable;
__LOCAL extern "C" const fidl_type_t
    test_protocollayouts_MainProtocolTwoWayAnonWithErrorTopResponseTable;

__LOCAL extern "C" const fidl_type_t
    test_protocollayouts_MainProtocolOnAnonRequestTable;

__LOCAL extern "C" const fidl_type_t
    test_protocollayouts_MainProtocolOnAnonWithErrorRequestTable;

#ifdef __Fuchsia__
}  // namespace test_protocollayouts

template <>
class ::fidl::Event<::test_protocollayouts::MainProtocol::OnAnonComposed> final
    : public ::fidl::internal::MessageBase<
          ::fidl::Event<::test_protocollayouts::MainProtocol::OnAnonComposed>> {
 public:
  Event() = default;
  ~Event() = default;
  Event(Event&&) noexcept = default;
  Event& operator=(Event&&) noexcept = default;
  Event(::test_protocollayouts_imported::ComposedProtocolOnAnonComposedRequest
            payload)
      : payload_(std::move(payload)) {}
  ::test_protocollayouts_imported::ComposedProtocolOnAnonComposedRequest*
  operator->() {
    return &payload_;
  }
  const ::test_protocollayouts_imported::ComposedProtocolOnAnonComposedRequest*
  operator->() const {
    return &payload_;
  }
  ::test_protocollayouts_imported::ComposedProtocolOnAnonComposedRequest&
  operator*() {
    return payload_;
  }
  const ::test_protocollayouts_imported::ComposedProtocolOnAnonComposedRequest&
  operator*() const {
    return payload_;
  }

 private:
  ::test_protocollayouts_imported::ComposedProtocolOnAnonComposedRequest
      payload_;
};

template <>
struct ::fidl::internal::MessageTraits<
    ::fidl::Event<::test_protocollayouts::MainProtocol::OnAnonComposed>>
    final {
 public:
  static constexpr bool kHasPayload = true;
  using Payload =
      ::test_protocollayouts_imported::ComposedProtocolOnAnonComposedRequest;
};
namespace test_protocollayouts {}  // namespace test_protocollayouts

template <>
class ::fidl::Event<
    ::test_protocollayouts::MainProtocol::OnAnonComposedWithError>
    final
    : public ::fidl::internal::MessageBase<::fidl::Event<
          ::test_protocollayouts::MainProtocol::OnAnonComposedWithError>> {
 public:
  Event() = default;
  ~Event() = default;
  Event(Event&&) noexcept = default;
  Event& operator=(Event&&) noexcept = default;
  Event(::test_protocollayouts_imported::
            ComposedProtocolOnAnonComposedWithErrorRequest payload)
      : payload_(std::move(payload)) {}
  ::test_protocollayouts_imported::
      ComposedProtocolOnAnonComposedWithErrorRequest*
      operator->() {
    return &payload_;
  }
  const ::test_protocollayouts_imported::
      ComposedProtocolOnAnonComposedWithErrorRequest*
      operator->() const {
    return &payload_;
  }
  ::test_protocollayouts_imported::
      ComposedProtocolOnAnonComposedWithErrorRequest&
      operator*() {
    return payload_;
  }
  const ::test_protocollayouts_imported::
      ComposedProtocolOnAnonComposedWithErrorRequest&
      operator*() const {
    return payload_;
  }

 private:
  ::test_protocollayouts_imported::
      ComposedProtocolOnAnonComposedWithErrorRequest payload_;
};

template <>
struct ::fidl::internal::MessageTraits<::fidl::Event<
    ::test_protocollayouts::MainProtocol::OnAnonComposedWithError>>
    final {
 public:
  static constexpr bool kHasPayload = true;
  using Payload = ::test_protocollayouts_imported::
      ComposedProtocolOnAnonComposedWithErrorRequest;
};
namespace test_protocollayouts {}  // namespace test_protocollayouts

template <>
class ::fidl::Event<::test_protocollayouts::MainProtocol::OnNamedComposed> final
    : public ::fidl::internal::MessageBase<::fidl::Event<
          ::test_protocollayouts::MainProtocol::OnNamedComposed>> {
 public:
  Event() = default;
  ~Event() = default;
  Event(Event&&) noexcept = default;
  Event& operator=(Event&&) noexcept = default;
  Event(::test_protocollayouts_imported::ImportUnionPayload payload)
      : payload_(std::move(payload)) {}
  ::test_protocollayouts_imported::ImportUnionPayload* operator->() {
    return &payload_;
  }
  const ::test_protocollayouts_imported::ImportUnionPayload* operator->()
      const {
    return &payload_;
  }
  ::test_protocollayouts_imported::ImportUnionPayload& operator*() {
    return payload_;
  }
  const ::test_protocollayouts_imported::ImportUnionPayload& operator*() const {
    return payload_;
  }

 private:
  ::test_protocollayouts_imported::ImportUnionPayload payload_;
};

template <>
struct ::fidl::internal::MessageTraits<
    ::fidl::Event<::test_protocollayouts::MainProtocol::OnNamedComposed>>
    final {
 public:
  static constexpr bool kHasPayload = true;
  using Payload = ::test_protocollayouts_imported::ImportUnionPayload;
};
namespace test_protocollayouts {}  // namespace test_protocollayouts

template <>
class ::fidl::Event<
    ::test_protocollayouts::MainProtocol::OnNamedComposedWithError>
    final
    : public ::fidl::internal::MessageBase<::fidl::Event<
          ::test_protocollayouts::MainProtocol::OnNamedComposedWithError>> {
 public:
  Event() = default;
  ~Event() = default;
  Event(Event&&) noexcept = default;
  Event& operator=(Event&&) noexcept = default;
  Event(::test_protocollayouts_imported::
            ComposedProtocolOnNamedComposedWithErrorRequest payload)
      : payload_(std::move(payload)) {}
  ::test_protocollayouts_imported::
      ComposedProtocolOnNamedComposedWithErrorRequest*
      operator->() {
    return &payload_;
  }
  const ::test_protocollayouts_imported::
      ComposedProtocolOnNamedComposedWithErrorRequest*
      operator->() const {
    return &payload_;
  }
  ::test_protocollayouts_imported::
      ComposedProtocolOnNamedComposedWithErrorRequest&
      operator*() {
    return payload_;
  }
  const ::test_protocollayouts_imported::
      ComposedProtocolOnNamedComposedWithErrorRequest&
      operator*() const {
    return payload_;
  }

 private:
  ::test_protocollayouts_imported::
      ComposedProtocolOnNamedComposedWithErrorRequest payload_;
};

template <>
struct ::fidl::internal::MessageTraits<::fidl::Event<
    ::test_protocollayouts::MainProtocol::OnNamedComposedWithError>>
    final {
 public:
  static constexpr bool kHasPayload = true;
  using Payload = ::test_protocollayouts_imported::
      ComposedProtocolOnNamedComposedWithErrorRequest;
};
namespace test_protocollayouts {}  // namespace test_protocollayouts

template <>
class ::fidl::Event<::test_protocollayouts::MainProtocol::OnImport> final
    : public ::fidl::internal::MessageBase<
          ::fidl::Event<::test_protocollayouts::MainProtocol::OnImport>> {
 public:
  Event() = default;
  ~Event() = default;
  Event(Event&&) noexcept = default;
  Event& operator=(Event&&) noexcept = default;
  Event(::test_protocollayouts_imported::ImportUnionPayload payload)
      : payload_(std::move(payload)) {}
  ::test_protocollayouts_imported::ImportUnionPayload* operator->() {
    return &payload_;
  }
  const ::test_protocollayouts_imported::ImportUnionPayload* operator->()
      const {
    return &payload_;
  }
  ::test_protocollayouts_imported::ImportUnionPayload& operator*() {
    return payload_;
  }
  const ::test_protocollayouts_imported::ImportUnionPayload& operator*() const {
    return payload_;
  }

 private:
  ::test_protocollayouts_imported::ImportUnionPayload payload_;
};

template <>
struct ::fidl::internal::MessageTraits<
    ::fidl::Event<::test_protocollayouts::MainProtocol::OnImport>>
    final {
 public:
  static constexpr bool kHasPayload = true;
  using Payload = ::test_protocollayouts_imported::ImportUnionPayload;
};
namespace test_protocollayouts {}  // namespace test_protocollayouts

template <>
class ::fidl::Event<::test_protocollayouts::MainProtocol::OnImportWithError>
    final : public ::fidl::internal::MessageBase<::fidl::Event<
                ::test_protocollayouts::MainProtocol::OnImportWithError>> {
 public:
  Event() = default;
  ~Event() = default;
  Event(Event&&) noexcept = default;
  Event& operator=(Event&&) noexcept = default;
  Event(::test_protocollayouts::MainProtocolOnImportWithErrorRequest payload)
      : payload_(std::move(payload)) {}
  ::test_protocollayouts::MainProtocolOnImportWithErrorRequest* operator->() {
    return &payload_;
  }
  const ::test_protocollayouts::MainProtocolOnImportWithErrorRequest*
  operator->() const {
    return &payload_;
  }
  ::test_protocollayouts::MainProtocolOnImportWithErrorRequest& operator*() {
    return payload_;
  }
  const ::test_protocollayouts::MainProtocolOnImportWithErrorRequest&
  operator*() const {
    return payload_;
  }

 private:
  ::test_protocollayouts::MainProtocolOnImportWithErrorRequest payload_;
};

template <>
struct ::fidl::internal::MessageTraits<
    ::fidl::Event<::test_protocollayouts::MainProtocol::OnImportWithError>>
    final {
 public:
  static constexpr bool kHasPayload = true;
  using Payload = ::test_protocollayouts::MainProtocolOnImportWithErrorRequest;
};
namespace test_protocollayouts {}  // namespace test_protocollayouts

template <>
class ::fidl::Event<::test_protocollayouts::MainProtocol::OnLocal> final
    : public ::fidl::internal::MessageBase<
          ::fidl::Event<::test_protocollayouts::MainProtocol::OnLocal>> {
 public:
  Event() = default;
  ~Event() = default;
  Event(Event&&) noexcept = default;
  Event& operator=(Event&&) noexcept = default;
  Event(::test_protocollayouts::LocalUnionPayload payload)
      : payload_(std::move(payload)) {}
  ::test_protocollayouts::LocalUnionPayload* operator->() { return &payload_; }
  const ::test_protocollayouts::LocalUnionPayload* operator->() const {
    return &payload_;
  }
  ::test_protocollayouts::LocalUnionPayload& operator*() { return payload_; }
  const ::test_protocollayouts::LocalUnionPayload& operator*() const {
    return payload_;
  }

 private:
  ::test_protocollayouts::LocalUnionPayload payload_;
};

template <>
struct ::fidl::internal::MessageTraits<
    ::fidl::Event<::test_protocollayouts::MainProtocol::OnLocal>>
    final {
 public:
  static constexpr bool kHasPayload = true;
  using Payload = ::test_protocollayouts::LocalUnionPayload;
};
namespace test_protocollayouts {}  // namespace test_protocollayouts

template <>
class ::fidl::Event<::test_protocollayouts::MainProtocol::OnLocalWithError>
    final : public ::fidl::internal::MessageBase<::fidl::Event<
                ::test_protocollayouts::MainProtocol::OnLocalWithError>> {
 public:
  Event() = default;
  ~Event() = default;
  Event(Event&&) noexcept = default;
  Event& operator=(Event&&) noexcept = default;
  Event(::test_protocollayouts::MainProtocolOnLocalWithErrorRequest payload)
      : payload_(std::move(payload)) {}
  ::test_protocollayouts::MainProtocolOnLocalWithErrorRequest* operator->() {
    return &payload_;
  }
  const ::test_protocollayouts::MainProtocolOnLocalWithErrorRequest*
  operator->() const {
    return &payload_;
  }
  ::test_protocollayouts::MainProtocolOnLocalWithErrorRequest& operator*() {
    return payload_;
  }
  const ::test_protocollayouts::MainProtocolOnLocalWithErrorRequest& operator*()
      const {
    return payload_;
  }

 private:
  ::test_protocollayouts::MainProtocolOnLocalWithErrorRequest payload_;
};

template <>
struct ::fidl::internal::MessageTraits<
    ::fidl::Event<::test_protocollayouts::MainProtocol::OnLocalWithError>>
    final {
 public:
  static constexpr bool kHasPayload = true;
  using Payload = ::test_protocollayouts::MainProtocolOnLocalWithErrorRequest;
};
namespace test_protocollayouts {}  // namespace test_protocollayouts

template <>
class ::fidl::Event<::test_protocollayouts::MainProtocol::OnAnon> final
    : public ::fidl::internal::MessageBase<
          ::fidl::Event<::test_protocollayouts::MainProtocol::OnAnon>> {
 public:
  Event() = default;
  ~Event() = default;
  Event(Event&&) noexcept = default;
  Event& operator=(Event&&) noexcept = default;
  Event(::test_protocollayouts::MainProtocolOnAnonRequest payload)
      : payload_(std::move(payload)) {}
  ::test_protocollayouts::MainProtocolOnAnonRequest* operator->() {
    return &payload_;
  }
  const ::test_protocollayouts::MainProtocolOnAnonRequest* operator->() const {
    return &payload_;
  }
  ::test_protocollayouts::MainProtocolOnAnonRequest& operator*() {
    return payload_;
  }
  const ::test_protocollayouts::MainProtocolOnAnonRequest& operator*() const {
    return payload_;
  }

 private:
  ::test_protocollayouts::MainProtocolOnAnonRequest payload_;
};

template <>
struct ::fidl::internal::MessageTraits<
    ::fidl::Event<::test_protocollayouts::MainProtocol::OnAnon>>
    final {
 public:
  static constexpr bool kHasPayload = true;
  using Payload = ::test_protocollayouts::MainProtocolOnAnonRequest;
};
namespace test_protocollayouts {}  // namespace test_protocollayouts

template <>
class ::fidl::Event<::test_protocollayouts::MainProtocol::OnAnonWithError> final
    : public ::fidl::internal::MessageBase<::fidl::Event<
          ::test_protocollayouts::MainProtocol::OnAnonWithError>> {
 public:
  Event() = default;
  ~Event() = default;
  Event(Event&&) noexcept = default;
  Event& operator=(Event&&) noexcept = default;
  Event(::test_protocollayouts::MainProtocolOnAnonWithErrorRequest payload)
      : payload_(std::move(payload)) {}
  ::test_protocollayouts::MainProtocolOnAnonWithErrorRequest* operator->() {
    return &payload_;
  }
  const ::test_protocollayouts::MainProtocolOnAnonWithErrorRequest* operator->()
      const {
    return &payload_;
  }
  ::test_protocollayouts::MainProtocolOnAnonWithErrorRequest& operator*() {
    return payload_;
  }
  const ::test_protocollayouts::MainProtocolOnAnonWithErrorRequest& operator*()
      const {
    return payload_;
  }

 private:
  ::test_protocollayouts::MainProtocolOnAnonWithErrorRequest payload_;
};

template <>
struct ::fidl::internal::MessageTraits<
    ::fidl::Event<::test_protocollayouts::MainProtocol::OnAnonWithError>>
    final {
 public:
  static constexpr bool kHasPayload = true;
  using Payload = ::test_protocollayouts::MainProtocolOnAnonWithErrorRequest;
};
namespace test_protocollayouts {}  // namespace test_protocollayouts

template <>
class ::fidl::Response<::test_protocollayouts::MainProtocol::TwoWayAnonComposed>
    final : public ::fidl::internal::MessageBase<::fidl::Response<
                ::test_protocollayouts::MainProtocol::TwoWayAnonComposed>> {
 public:
  Response() = default;
  ~Response() = default;
  Response(Response&&) noexcept = default;
  Response& operator=(Response&&) noexcept = default;
  Response(::test_protocollayouts_imported::
               ComposedProtocolTwoWayAnonComposedResponse payload)
      : payload_(std::move(payload)) {}
  ::test_protocollayouts_imported::ComposedProtocolTwoWayAnonComposedResponse*
  operator->() {
    return &payload_;
  }
  const ::test_protocollayouts_imported::
      ComposedProtocolTwoWayAnonComposedResponse*
      operator->() const {
    return &payload_;
  }
  ::test_protocollayouts_imported::ComposedProtocolTwoWayAnonComposedResponse&
  operator*() {
    return payload_;
  }
  const ::test_protocollayouts_imported::
      ComposedProtocolTwoWayAnonComposedResponse&
      operator*() const {
    return payload_;
  }

 private:
  ::test_protocollayouts_imported::ComposedProtocolTwoWayAnonComposedResponse
      payload_;
};

template <>
struct ::fidl::internal::MessageTraits<
    ::fidl::Response<::test_protocollayouts::MainProtocol::TwoWayAnonComposed>>
    final {
 public:
  static constexpr bool kHasPayload = true;
  using Payload = ::test_protocollayouts_imported::
      ComposedProtocolTwoWayAnonComposedResponse;
};
namespace test_protocollayouts {}  // namespace test_protocollayouts
template <>
class ::fidl::Result<::test_protocollayouts::MainProtocol::TwoWayAnonComposed>
    final
    : public ::fitx::result<::fidl::Error,
                            ::test_protocollayouts_imported::
                                ComposedProtocolTwoWayAnonComposedResponse> {
 public:
  using ::fitx::result<::fidl::Error,
                       ::test_protocollayouts_imported::
                           ComposedProtocolTwoWayAnonComposedResponse>::result;
};

template <>
class ::fidl::Response<
    ::test_protocollayouts::MainProtocol::TwoWayAnonComposedWithError>
    final
    : public ::fidl::internal::MessageBase<::fidl::Response<
          ::test_protocollayouts::MainProtocol::TwoWayAnonComposedWithError>> {
 public:
  Response() = default;
  ~Response() = default;
  Response(Response&&) noexcept = default;
  Response& operator=(Response&&) noexcept = default;
  Response(::test_protocollayouts_imported::
               ComposedProtocolTwoWayAnonComposedWithErrorTopResponse payload)
      : payload_(std::move(payload)) {}
  ::test_protocollayouts_imported::
      ComposedProtocolTwoWayAnonComposedWithErrorTopResponse*
      operator->() {
    return &payload_;
  }
  const ::test_protocollayouts_imported::
      ComposedProtocolTwoWayAnonComposedWithErrorTopResponse*
      operator->() const {
    return &payload_;
  }
  ::test_protocollayouts_imported::
      ComposedProtocolTwoWayAnonComposedWithErrorTopResponse&
      operator*() {
    return payload_;
  }
  const ::test_protocollayouts_imported::
      ComposedProtocolTwoWayAnonComposedWithErrorTopResponse&
      operator*() const {
    return payload_;
  }

 private:
  ::test_protocollayouts_imported::
      ComposedProtocolTwoWayAnonComposedWithErrorTopResponse payload_;
};

template <>
struct ::fidl::internal::MessageTraits<::fidl::Response<
    ::test_protocollayouts::MainProtocol::TwoWayAnonComposedWithError>>
    final {
 public:
  static constexpr bool kHasPayload = true;
  using Payload = ::test_protocollayouts_imported::
      ComposedProtocolTwoWayAnonComposedWithErrorTopResponse;
};
template <>
class ::fidl::Result<
    ::test_protocollayouts::MainProtocol::TwoWayAnonComposedWithError>
    final : public ::fitx::result<
                ::fidl::AnyErrorIn<::test_protocollayouts::MainProtocol::
                                       TwoWayAnonComposedWithError>,
                ::test_protocollayouts_imported::
                    ComposedProtocol_TwoWayAnonComposedWithError_Response> {
 public:
  using ::fitx::result<
      ::fidl::AnyErrorIn<
          ::test_protocollayouts::MainProtocol::TwoWayAnonComposedWithError>,
      ::test_protocollayouts_imported::
          ComposedProtocol_TwoWayAnonComposedWithError_Response>::result;
};

template <>
class ::fidl::Response<
    ::test_protocollayouts::MainProtocol::TwoWayNamedComposed>
    final : public ::fidl::internal::MessageBase<::fidl::Response<
                ::test_protocollayouts::MainProtocol::TwoWayNamedComposed>> {
 public:
  Response() = default;
  ~Response() = default;
  Response(Response&&) noexcept = default;
  Response& operator=(Response&&) noexcept = default;
  Response(::test_protocollayouts_imported::ImportTablePayload payload)
      : payload_(std::move(payload)) {}
  ::test_protocollayouts_imported::ImportTablePayload* operator->() {
    return &payload_;
  }
  const ::test_protocollayouts_imported::ImportTablePayload* operator->()
      const {
    return &payload_;
  }
  ::test_protocollayouts_imported::ImportTablePayload& operator*() {
    return payload_;
  }
  const ::test_protocollayouts_imported::ImportTablePayload& operator*() const {
    return payload_;
  }

 private:
  ::test_protocollayouts_imported::ImportTablePayload payload_;
};

template <>
struct ::fidl::internal::MessageTraits<
    ::fidl::Response<::test_protocollayouts::MainProtocol::TwoWayNamedComposed>>
    final {
 public:
  static constexpr bool kHasPayload = true;
  using Payload = ::test_protocollayouts_imported::ImportTablePayload;
};
template <>
class ::fidl::Result<::test_protocollayouts::MainProtocol::TwoWayNamedComposed>
    final
    : public ::fitx::result<
          ::fidl::Error, ::test_protocollayouts_imported::ImportTablePayload> {
 public:
  using ::fitx::result<
      ::fidl::Error,
      ::test_protocollayouts_imported::ImportTablePayload>::result;
};

template <>
class ::fidl::Response<
    ::test_protocollayouts::MainProtocol::TwoWayNamedComposedWithError>
    final
    : public ::fidl::internal::MessageBase<::fidl::Response<
          ::test_protocollayouts::MainProtocol::TwoWayNamedComposedWithError>> {
 public:
  Response() = default;
  ~Response() = default;
  Response(Response&&) noexcept = default;
  Response& operator=(Response&&) noexcept = default;
  Response(::test_protocollayouts_imported::
               ComposedProtocolTwoWayNamedComposedWithErrorTopResponse payload)
      : payload_(std::move(payload)) {}
  ::test_protocollayouts_imported::
      ComposedProtocolTwoWayNamedComposedWithErrorTopResponse*
      operator->() {
    return &payload_;
  }
  const ::test_protocollayouts_imported::
      ComposedProtocolTwoWayNamedComposedWithErrorTopResponse*
      operator->() const {
    return &payload_;
  }
  ::test_protocollayouts_imported::
      ComposedProtocolTwoWayNamedComposedWithErrorTopResponse&
      operator*() {
    return payload_;
  }
  const ::test_protocollayouts_imported::
      ComposedProtocolTwoWayNamedComposedWithErrorTopResponse&
      operator*() const {
    return payload_;
  }

 private:
  ::test_protocollayouts_imported::
      ComposedProtocolTwoWayNamedComposedWithErrorTopResponse payload_;
};

template <>
struct ::fidl::internal::MessageTraits<::fidl::Response<
    ::test_protocollayouts::MainProtocol::TwoWayNamedComposedWithError>>
    final {
 public:
  static constexpr bool kHasPayload = true;
  using Payload = ::test_protocollayouts_imported::
      ComposedProtocolTwoWayNamedComposedWithErrorTopResponse;
};
template <>
class ::fidl::Result<
    ::test_protocollayouts::MainProtocol::TwoWayNamedComposedWithError>
    final : public ::fitx::result<
                ::fidl::AnyErrorIn<::test_protocollayouts::MainProtocol::
                                       TwoWayNamedComposedWithError>,
                ::test_protocollayouts_imported::ImportUnionPayload> {
 public:
  using ::fitx::result<
      ::fidl::AnyErrorIn<
          ::test_protocollayouts::MainProtocol::TwoWayNamedComposedWithError>,
      ::test_protocollayouts_imported::ImportUnionPayload>::result;
};

template <>
class ::fidl::Response<::test_protocollayouts::MainProtocol::TwoWayImport> final
    : public ::fidl::internal::MessageBase<::fidl::Response<
          ::test_protocollayouts::MainProtocol::TwoWayImport>> {
 public:
  Response() = default;
  ~Response() = default;
  Response(Response&&) noexcept = default;
  Response& operator=(Response&&) noexcept = default;
  Response(::test_protocollayouts_imported::ImportTablePayload payload)
      : payload_(std::move(payload)) {}
  ::test_protocollayouts_imported::ImportTablePayload* operator->() {
    return &payload_;
  }
  const ::test_protocollayouts_imported::ImportTablePayload* operator->()
      const {
    return &payload_;
  }
  ::test_protocollayouts_imported::ImportTablePayload& operator*() {
    return payload_;
  }
  const ::test_protocollayouts_imported::ImportTablePayload& operator*() const {
    return payload_;
  }

 private:
  ::test_protocollayouts_imported::ImportTablePayload payload_;
};

template <>
struct ::fidl::internal::MessageTraits<
    ::fidl::Response<::test_protocollayouts::MainProtocol::TwoWayImport>>
    final {
 public:
  static constexpr bool kHasPayload = true;
  using Payload = ::test_protocollayouts_imported::ImportTablePayload;
};
template <>
class ::fidl::Result<::test_protocollayouts::MainProtocol::TwoWayImport> final
    : public ::fitx::result<
          ::fidl::Error, ::test_protocollayouts_imported::ImportTablePayload> {
 public:
  using ::fitx::result<
      ::fidl::Error,
      ::test_protocollayouts_imported::ImportTablePayload>::result;
};

template <>
class ::fidl::Response<
    ::test_protocollayouts::MainProtocol::TwoWayImportWithError>
    final : public ::fidl::internal::MessageBase<::fidl::Response<
                ::test_protocollayouts::MainProtocol::TwoWayImportWithError>> {
 public:
  Response() = default;
  ~Response() = default;
  Response(Response&&) noexcept = default;
  Response& operator=(Response&&) noexcept = default;
  Response(::test_protocollayouts::MainProtocolTwoWayImportWithErrorTopResponse
               payload)
      : payload_(std::move(payload)) {}
  ::test_protocollayouts::MainProtocolTwoWayImportWithErrorTopResponse*
  operator->() {
    return &payload_;
  }
  const ::test_protocollayouts::MainProtocolTwoWayImportWithErrorTopResponse*
  operator->() const {
    return &payload_;
  }
  ::test_protocollayouts::MainProtocolTwoWayImportWithErrorTopResponse&
  operator*() {
    return payload_;
  }
  const ::test_protocollayouts::MainProtocolTwoWayImportWithErrorTopResponse&
  operator*() const {
    return payload_;
  }

 private:
  ::test_protocollayouts::MainProtocolTwoWayImportWithErrorTopResponse payload_;
};

template <>
struct ::fidl::internal::MessageTraits<::fidl::Response<
    ::test_protocollayouts::MainProtocol::TwoWayImportWithError>>
    final {
 public:
  static constexpr bool kHasPayload = true;
  using Payload =
      ::test_protocollayouts::MainProtocolTwoWayImportWithErrorTopResponse;
};
template <>
class ::fidl::Result<
    ::test_protocollayouts::MainProtocol::TwoWayImportWithError>
    final
    : public ::fitx::result<
          ::fidl::AnyErrorIn<
              ::test_protocollayouts::MainProtocol::TwoWayImportWithError>,
          ::test_protocollayouts_imported::ImportUnionPayload> {
 public:
  using ::fitx::result<
      ::fidl::AnyErrorIn<
          ::test_protocollayouts::MainProtocol::TwoWayImportWithError>,
      ::test_protocollayouts_imported::ImportUnionPayload>::result;
};

template <>
class ::fidl::Response<::test_protocollayouts::MainProtocol::TwoWayLocal> final
    : public ::fidl::internal::MessageBase<
          ::fidl::Response<::test_protocollayouts::MainProtocol::TwoWayLocal>> {
 public:
  Response() = default;
  ~Response() = default;
  Response(Response&&) noexcept = default;
  Response& operator=(Response&&) noexcept = default;
  Response(::test_protocollayouts::LocalTablePayload payload)
      : payload_(std::move(payload)) {}
  ::test_protocollayouts::LocalTablePayload* operator->() { return &payload_; }
  const ::test_protocollayouts::LocalTablePayload* operator->() const {
    return &payload_;
  }
  ::test_protocollayouts::LocalTablePayload& operator*() { return payload_; }
  const ::test_protocollayouts::LocalTablePayload& operator*() const {
    return payload_;
  }

 private:
  ::test_protocollayouts::LocalTablePayload payload_;
};

template <>
struct ::fidl::internal::MessageTraits<
    ::fidl::Response<::test_protocollayouts::MainProtocol::TwoWayLocal>>
    final {
 public:
  static constexpr bool kHasPayload = true;
  using Payload = ::test_protocollayouts::LocalTablePayload;
};
template <>
class ::fidl::Result<::test_protocollayouts::MainProtocol::TwoWayLocal> final
    : public ::fitx::result<::fidl::Error,
                            ::test_protocollayouts::LocalTablePayload> {
 public:
  using ::fitx::result<::fidl::Error,
                       ::test_protocollayouts::LocalTablePayload>::result;
};

template <>
class ::fidl::Response<
    ::test_protocollayouts::MainProtocol::TwoWayLocalWithError>
    final : public ::fidl::internal::MessageBase<::fidl::Response<
                ::test_protocollayouts::MainProtocol::TwoWayLocalWithError>> {
 public:
  Response() = default;
  ~Response() = default;
  Response(Response&&) noexcept = default;
  Response& operator=(Response&&) noexcept = default;
  Response(::test_protocollayouts::MainProtocolTwoWayLocalWithErrorTopResponse
               payload)
      : payload_(std::move(payload)) {}
  ::test_protocollayouts::MainProtocolTwoWayLocalWithErrorTopResponse*
  operator->() {
    return &payload_;
  }
  const ::test_protocollayouts::MainProtocolTwoWayLocalWithErrorTopResponse*
  operator->() const {
    return &payload_;
  }
  ::test_protocollayouts::MainProtocolTwoWayLocalWithErrorTopResponse&
  operator*() {
    return payload_;
  }
  const ::test_protocollayouts::MainProtocolTwoWayLocalWithErrorTopResponse&
  operator*() const {
    return payload_;
  }

 private:
  ::test_protocollayouts::MainProtocolTwoWayLocalWithErrorTopResponse payload_;
};

template <>
struct ::fidl::internal::MessageTraits<::fidl::Response<
    ::test_protocollayouts::MainProtocol::TwoWayLocalWithError>>
    final {
 public:
  static constexpr bool kHasPayload = true;
  using Payload =
      ::test_protocollayouts::MainProtocolTwoWayLocalWithErrorTopResponse;
};
template <>
class ::fidl::Result<::test_protocollayouts::MainProtocol::TwoWayLocalWithError>
    final : public ::fitx::result<
                ::fidl::AnyErrorIn<
                    ::test_protocollayouts::MainProtocol::TwoWayLocalWithError>,
                ::test_protocollayouts::LocalUnionPayload> {
 public:
  using ::fitx::result<
      ::fidl::AnyErrorIn<
          ::test_protocollayouts::MainProtocol::TwoWayLocalWithError>,
      ::test_protocollayouts::LocalUnionPayload>::result;
};

template <>
class ::fidl::Response<::test_protocollayouts::MainProtocol::TwoWayAnon> final
    : public ::fidl::internal::MessageBase<
          ::fidl::Response<::test_protocollayouts::MainProtocol::TwoWayAnon>> {
 public:
  Response() = default;
  ~Response() = default;
  Response(Response&&) noexcept = default;
  Response& operator=(Response&&) noexcept = default;
  Response(::test_protocollayouts::MainProtocolTwoWayAnonResponse payload)
      : payload_(std::move(payload)) {}
  ::test_protocollayouts::MainProtocolTwoWayAnonResponse* operator->() {
    return &payload_;
  }
  const ::test_protocollayouts::MainProtocolTwoWayAnonResponse* operator->()
      const {
    return &payload_;
  }
  ::test_protocollayouts::MainProtocolTwoWayAnonResponse& operator*() {
    return payload_;
  }
  const ::test_protocollayouts::MainProtocolTwoWayAnonResponse& operator*()
      const {
    return payload_;
  }

 private:
  ::test_protocollayouts::MainProtocolTwoWayAnonResponse payload_;
};

template <>
struct ::fidl::internal::MessageTraits<
    ::fidl::Response<::test_protocollayouts::MainProtocol::TwoWayAnon>>
    final {
 public:
  static constexpr bool kHasPayload = true;
  using Payload = ::test_protocollayouts::MainProtocolTwoWayAnonResponse;
};
template <>
class ::fidl::Result<::test_protocollayouts::MainProtocol::TwoWayAnon> final
    : public ::fitx::result<
          ::fidl::Error,
          ::test_protocollayouts::MainProtocolTwoWayAnonResponse> {
 public:
  using ::fitx::result<
      ::fidl::Error,
      ::test_protocollayouts::MainProtocolTwoWayAnonResponse>::result;
};

template <>
class ::fidl::Response<
    ::test_protocollayouts::MainProtocol::TwoWayAnonWithError>
    final : public ::fidl::internal::MessageBase<::fidl::Response<
                ::test_protocollayouts::MainProtocol::TwoWayAnonWithError>> {
 public:
  Response() = default;
  ~Response() = default;
  Response(Response&&) noexcept = default;
  Response& operator=(Response&&) noexcept = default;
  Response(::test_protocollayouts::MainProtocolTwoWayAnonWithErrorTopResponse
               payload)
      : payload_(std::move(payload)) {}
  ::test_protocollayouts::MainProtocolTwoWayAnonWithErrorTopResponse*
  operator->() {
    return &payload_;
  }
  const ::test_protocollayouts::MainProtocolTwoWayAnonWithErrorTopResponse*
  operator->() const {
    return &payload_;
  }
  ::test_protocollayouts::MainProtocolTwoWayAnonWithErrorTopResponse&
  operator*() {
    return payload_;
  }
  const ::test_protocollayouts::MainProtocolTwoWayAnonWithErrorTopResponse&
  operator*() const {
    return payload_;
  }

 private:
  ::test_protocollayouts::MainProtocolTwoWayAnonWithErrorTopResponse payload_;
};

template <>
struct ::fidl::internal::MessageTraits<
    ::fidl::Response<::test_protocollayouts::MainProtocol::TwoWayAnonWithError>>
    final {
 public:
  static constexpr bool kHasPayload = true;
  using Payload =
      ::test_protocollayouts::MainProtocolTwoWayAnonWithErrorTopResponse;
};
template <>
class ::fidl::Result<::test_protocollayouts::MainProtocol::TwoWayAnonWithError>
    final
    : public ::fitx::result<
          ::fidl::AnyErrorIn<
              ::test_protocollayouts::MainProtocol::TwoWayAnonWithError>,
          ::test_protocollayouts::MainProtocol_TwoWayAnonWithError_Response> {
 public:
  using ::fitx::result<
      ::fidl::AnyErrorIn<
          ::test_protocollayouts::MainProtocol::TwoWayAnonWithError>,
      ::test_protocollayouts::MainProtocol_TwoWayAnonWithError_Response>::
      result;
};

template <>
class ::fidl::internal::NaturalClientImpl<::test_protocollayouts::MainProtocol>
    final : public ::fidl::internal::NaturalClientBase {
 public:
  using NaturalClientBase::NaturalClientBase;
  void TwoWayAnonComposed(
      ::test_protocollayouts_imported::
          ComposedProtocolTwoWayAnonComposedRequest&& payload,
      ::fidl::ClientCallback<
          ::test_protocollayouts::MainProtocol::TwoWayAnonComposed>&& _callback)
      const;

  void TwoWayAnonComposedWithError(
      ::test_protocollayouts_imported::
          ComposedProtocolTwoWayAnonComposedWithErrorRequest&& payload,
      ::fidl::ClientCallback<
          ::test_protocollayouts::MainProtocol::TwoWayAnonComposedWithError>&&
          _callback) const;

  void TwoWayNamedComposed(
      ::test_protocollayouts_imported::ImportUnionPayload&& payload,
      ::fidl::ClientCallback<
          ::test_protocollayouts::MainProtocol::TwoWayNamedComposed>&&
          _callback) const;

  void TwoWayNamedComposedWithError(
      ::test_protocollayouts_imported::ImportTablePayload&& payload,
      ::fidl::ClientCallback<
          ::test_protocollayouts::MainProtocol::TwoWayNamedComposedWithError>&&
          _callback) const;

  void TwoWayImport(
      ::test_protocollayouts_imported::ImportUnionPayload&& payload,
      ::fidl::ClientCallback<
          ::test_protocollayouts::MainProtocol::TwoWayImport>&& _callback)
      const;

  void TwoWayImportWithError(
      ::test_protocollayouts_imported::ImportTablePayload&& payload,
      ::fidl::ClientCallback<
          ::test_protocollayouts::MainProtocol::TwoWayImportWithError>&&
          _callback) const;

  void TwoWayLocal(
      ::test_protocollayouts::LocalUnionPayload&& payload,
      ::fidl::ClientCallback<
          ::test_protocollayouts::MainProtocol::TwoWayLocal>&& _callback) const;

  void TwoWayLocalWithError(
      ::test_protocollayouts::LocalTablePayload&& payload,
      ::fidl::ClientCallback<
          ::test_protocollayouts::MainProtocol::TwoWayLocalWithError>&&
          _callback) const;

  void TwoWayAnon(
      ::test_protocollayouts::MainProtocolTwoWayAnonRequest&& payload,
      ::fidl::ClientCallback<::test_protocollayouts::MainProtocol::TwoWayAnon>&&
          _callback) const;

  void TwoWayAnonWithError(
      ::test_protocollayouts::MainProtocolTwoWayAnonWithErrorRequest&& payload,
      ::fidl::ClientCallback<
          ::test_protocollayouts::MainProtocol::TwoWayAnonWithError>&&
          _callback) const;

  ::fitx::result<::fidl::Error> OneWayAnonComposed(
      ::test_protocollayouts_imported::
          ComposedProtocolOneWayAnonComposedRequest&& payload) const;

  ::fitx::result<::fidl::Error> OneWayNamedComposed(
      ::test_protocollayouts_imported::ImportTablePayload&& payload) const;

  ::fitx::result<::fidl::Error> OneWayImport(
      ::test_protocollayouts_imported::ImportTablePayload&& payload) const;

  ::fitx::result<::fidl::Error> OneWayLocal(
      ::test_protocollayouts::LocalTablePayload&& payload) const;

  ::fitx::result<::fidl::Error> OneWayAnon(
      ::test_protocollayouts::MainProtocolOneWayAnonRequest&& payload) const;
};
namespace test_protocollayouts {
#endif  // __Fuchsia__

}  // namespace test_protocollayouts
#ifdef __Fuchsia__

template <>
class ::fidl::internal::NaturalEventHandlerInterface<
    ::test_protocollayouts::MainProtocol> {
 public:
  NaturalEventHandlerInterface() = default;
  virtual ~NaturalEventHandlerInterface() = default;
  virtual void OnAnonComposed(
      ::fidl::Event<::test_protocollayouts::MainProtocol::OnAnonComposed>&) {}
  virtual void OnAnonComposedWithError(
      ::fidl::Event<
          ::test_protocollayouts::MainProtocol::OnAnonComposedWithError>&) {}
  virtual void OnNamedComposed(
      ::fidl::Event<::test_protocollayouts::MainProtocol::OnNamedComposed>&) {}
  virtual void OnNamedComposedWithError(
      ::fidl::Event<
          ::test_protocollayouts::MainProtocol::OnNamedComposedWithError>&) {}
  virtual void OnImport(
      ::fidl::Event<::test_protocollayouts::MainProtocol::OnImport>&) {}
  virtual void OnImportWithError(
      ::fidl::Event<::test_protocollayouts::MainProtocol::OnImportWithError>&) {
  }
  virtual void OnLocal(
      ::fidl::Event<::test_protocollayouts::MainProtocol::OnLocal>&) {}
  virtual void OnLocalWithError(
      ::fidl::Event<::test_protocollayouts::MainProtocol::OnLocalWithError>&) {}
  virtual void OnAnon(
      ::fidl::Event<::test_protocollayouts::MainProtocol::OnAnon>&) {}
  virtual void OnAnonWithError(
      ::fidl::Event<::test_protocollayouts::MainProtocol::OnAnonWithError>&) {}
};

template <>
class ::fidl::AsyncEventHandler<::test_protocollayouts::MainProtocol>
    : public ::fidl::internal::NaturalEventHandlerInterface<
          ::test_protocollayouts::MainProtocol>,
      public ::fidl::internal::AsyncEventHandler {
 public:
  AsyncEventHandler() = default;
};

template <>
class ::fidl::internal::NaturalEventDispatcher<
    ::test_protocollayouts::MainProtocol>
    final
    : public ::fidl::internal::IncomingEventDispatcher<
          ::fidl::AsyncEventHandler<::test_protocollayouts::MainProtocol>> {
 public:
  explicit NaturalEventDispatcher(
      ::fidl::AsyncEventHandler<::test_protocollayouts::MainProtocol>*
          event_handler)
      : IncomingEventDispatcher(event_handler) {}

 private:
  std::optional<::fidl::UnbindInfo> DispatchEvent(
      ::fidl::IncomingMessage& msg,
      internal::IncomingTransportContext transport_context) override;
};
#endif  // __Fuchsia__

#ifdef __Fuchsia__
template <>
class ::fidl::internal::NaturalWeakEventSender<
    ::test_protocollayouts::MainProtocol>
    : public ::fidl::internal::WeakEventSenderBase {
 public:
  using WeakEventSenderBase::WeakEventSenderBase;

  ::fitx::result<::fidl::Error> OnAnonComposed(
      ::test_protocollayouts_imported::ComposedProtocolOnAnonComposedRequest
          payload);

  ::fitx::result<::fidl::Error> OnAnonComposedWithError(
      ::test_protocollayouts_imported::
          ComposedProtocolOnAnonComposedWithErrorRequest payload);

  ::fitx::result<::fidl::Error> OnNamedComposed(
      ::test_protocollayouts_imported::ImportUnionPayload payload);

  ::fitx::result<::fidl::Error> OnNamedComposedWithError(
      ::test_protocollayouts_imported::
          ComposedProtocolOnNamedComposedWithErrorRequest payload);

  ::fitx::result<::fidl::Error> OnImport(
      ::test_protocollayouts_imported::ImportUnionPayload payload);

  ::fitx::result<::fidl::Error> OnImportWithError(
      ::test_protocollayouts::MainProtocolOnImportWithErrorRequest payload);

  ::fitx::result<::fidl::Error> OnLocal(
      ::test_protocollayouts::LocalUnionPayload payload);

  ::fitx::result<::fidl::Error> OnLocalWithError(
      ::test_protocollayouts::MainProtocolOnLocalWithErrorRequest payload);

  ::fitx::result<::fidl::Error> OnAnon(
      ::test_protocollayouts::MainProtocolOnAnonRequest payload);

  ::fitx::result<::fidl::Error> OnAnonWithError(
      ::test_protocollayouts::MainProtocolOnAnonWithErrorRequest payload);
};

template <>
class ::fidl::internal::NaturalEventSender<::test_protocollayouts::MainProtocol>
    : public ::fidl::internal::SyncEndpointManagedVeneer<
          ::fidl::internal::NaturalEventSender<
              ::test_protocollayouts::MainProtocol>> {
 public:
  using SyncEndpointManagedVeneer::SyncEndpointManagedVeneer;

  ::fitx::result<::fidl::Error> OnAnonComposed(
      ::test_protocollayouts_imported::ComposedProtocolOnAnonComposedRequest
          payload);

  ::fitx::result<::fidl::Error> OnAnonComposedWithError(
      ::test_protocollayouts_imported::
          ComposedProtocolOnAnonComposedWithErrorRequest payload);

  ::fitx::result<::fidl::Error> OnNamedComposed(
      ::test_protocollayouts_imported::ImportUnionPayload payload);

  ::fitx::result<::fidl::Error> OnNamedComposedWithError(
      ::test_protocollayouts_imported::
          ComposedProtocolOnNamedComposedWithErrorRequest payload);

  ::fitx::result<::fidl::Error> OnImport(
      ::test_protocollayouts_imported::ImportUnionPayload payload);

  ::fitx::result<::fidl::Error> OnImportWithError(
      ::test_protocollayouts::MainProtocolOnImportWithErrorRequest payload);

  ::fitx::result<::fidl::Error> OnLocal(
      ::test_protocollayouts::LocalUnionPayload payload);

  ::fitx::result<::fidl::Error> OnLocalWithError(
      ::test_protocollayouts::MainProtocolOnLocalWithErrorRequest payload);

  ::fitx::result<::fidl::Error> OnAnon(
      ::test_protocollayouts::MainProtocolOnAnonRequest payload);

  ::fitx::result<::fidl::Error> OnAnonWithError(
      ::test_protocollayouts::MainProtocolOnAnonWithErrorRequest payload);
};
#endif  // __Fuchsia__

#ifdef __Fuchsia__

template <>
class ::fidl::Request<::test_protocollayouts::MainProtocol::OneWayAnonComposed>
    final : public ::fidl::internal::MessageBase<::fidl::Request<
                ::test_protocollayouts::MainProtocol::OneWayAnonComposed>> {
 public:
  Request() = default;
  ~Request() = default;
  Request(Request&&) noexcept = default;
  Request& operator=(Request&&) noexcept = default;
  Request(
      ::test_protocollayouts_imported::ComposedProtocolOneWayAnonComposedRequest
          payload)
      : payload_(std::move(payload)) {}
  ::test_protocollayouts_imported::ComposedProtocolOneWayAnonComposedRequest*
  operator->() {
    return &payload_;
  }
  const ::test_protocollayouts_imported::
      ComposedProtocolOneWayAnonComposedRequest*
      operator->() const {
    return &payload_;
  }
  ::test_protocollayouts_imported::ComposedProtocolOneWayAnonComposedRequest&
  operator*() {
    return payload_;
  }
  const ::test_protocollayouts_imported::
      ComposedProtocolOneWayAnonComposedRequest&
      operator*() const {
    return payload_;
  }

 private:
  ::test_protocollayouts_imported::ComposedProtocolOneWayAnonComposedRequest
      payload_;
};

template <>
struct ::fidl::internal::MessageTraits<
    ::fidl::Request<::test_protocollayouts::MainProtocol::OneWayAnonComposed>>
    final {
 public:
  static constexpr bool kHasPayload = true;
  using Payload = ::test_protocollayouts_imported::
      ComposedProtocolOneWayAnonComposedRequest;
};
#endif  // __Fuchsia__

#ifdef __Fuchsia__

template <>
class ::fidl::Request<::test_protocollayouts::MainProtocol::TwoWayAnonComposed>
    final : public ::fidl::internal::MessageBase<::fidl::Request<
                ::test_protocollayouts::MainProtocol::TwoWayAnonComposed>> {
 public:
  Request() = default;
  ~Request() = default;
  Request(Request&&) noexcept = default;
  Request& operator=(Request&&) noexcept = default;
  Request(
      ::test_protocollayouts_imported::ComposedProtocolTwoWayAnonComposedRequest
          payload)
      : payload_(std::move(payload)) {}
  ::test_protocollayouts_imported::ComposedProtocolTwoWayAnonComposedRequest*
  operator->() {
    return &payload_;
  }
  const ::test_protocollayouts_imported::
      ComposedProtocolTwoWayAnonComposedRequest*
      operator->() const {
    return &payload_;
  }
  ::test_protocollayouts_imported::ComposedProtocolTwoWayAnonComposedRequest&
  operator*() {
    return payload_;
  }
  const ::test_protocollayouts_imported::
      ComposedProtocolTwoWayAnonComposedRequest&
      operator*() const {
    return payload_;
  }

 private:
  ::test_protocollayouts_imported::ComposedProtocolTwoWayAnonComposedRequest
      payload_;
};

template <>
struct ::fidl::internal::MessageTraits<
    ::fidl::Request<::test_protocollayouts::MainProtocol::TwoWayAnonComposed>>
    final {
 public:
  static constexpr bool kHasPayload = true;
  using Payload = ::test_protocollayouts_imported::
      ComposedProtocolTwoWayAnonComposedRequest;
};
#endif  // __Fuchsia__

#ifdef __Fuchsia__

template <>
class ::fidl::Request<
    ::test_protocollayouts::MainProtocol::TwoWayAnonComposedWithError>
    final
    : public ::fidl::internal::MessageBase<::fidl::Request<
          ::test_protocollayouts::MainProtocol::TwoWayAnonComposedWithError>> {
 public:
  Request() = default;
  ~Request() = default;
  Request(Request&&) noexcept = default;
  Request& operator=(Request&&) noexcept = default;
  Request(::test_protocollayouts_imported::
              ComposedProtocolTwoWayAnonComposedWithErrorRequest payload)
      : payload_(std::move(payload)) {}
  ::test_protocollayouts_imported::
      ComposedProtocolTwoWayAnonComposedWithErrorRequest*
      operator->() {
    return &payload_;
  }
  const ::test_protocollayouts_imported::
      ComposedProtocolTwoWayAnonComposedWithErrorRequest*
      operator->() const {
    return &payload_;
  }
  ::test_protocollayouts_imported::
      ComposedProtocolTwoWayAnonComposedWithErrorRequest&
      operator*() {
    return payload_;
  }
  const ::test_protocollayouts_imported::
      ComposedProtocolTwoWayAnonComposedWithErrorRequest&
      operator*() const {
    return payload_;
  }

 private:
  ::test_protocollayouts_imported::
      ComposedProtocolTwoWayAnonComposedWithErrorRequest payload_;
};

template <>
struct ::fidl::internal::MessageTraits<::fidl::Request<
    ::test_protocollayouts::MainProtocol::TwoWayAnonComposedWithError>>
    final {
 public:
  static constexpr bool kHasPayload = true;
  using Payload = ::test_protocollayouts_imported::
      ComposedProtocolTwoWayAnonComposedWithErrorRequest;
};
#endif  // __Fuchsia__

#ifdef __Fuchsia__

template <>
class ::fidl::Request<::test_protocollayouts::MainProtocol::OneWayNamedComposed>
    final : public ::fidl::internal::MessageBase<::fidl::Request<
                ::test_protocollayouts::MainProtocol::OneWayNamedComposed>> {
 public:
  Request() = default;
  ~Request() = default;
  Request(Request&&) noexcept = default;
  Request& operator=(Request&&) noexcept = default;
  Request(::test_protocollayouts_imported::ImportTablePayload payload)
      : payload_(std::move(payload)) {}
  ::test_protocollayouts_imported::ImportTablePayload* operator->() {
    return &payload_;
  }
  const ::test_protocollayouts_imported::ImportTablePayload* operator->()
      const {
    return &payload_;
  }
  ::test_protocollayouts_imported::ImportTablePayload& operator*() {
    return payload_;
  }
  const ::test_protocollayouts_imported::ImportTablePayload& operator*() const {
    return payload_;
  }

 private:
  ::test_protocollayouts_imported::ImportTablePayload payload_;
};

template <>
struct ::fidl::internal::MessageTraits<
    ::fidl::Request<::test_protocollayouts::MainProtocol::OneWayNamedComposed>>
    final {
 public:
  static constexpr bool kHasPayload = true;
  using Payload = ::test_protocollayouts_imported::ImportTablePayload;
};
#endif  // __Fuchsia__

#ifdef __Fuchsia__

template <>
class ::fidl::Request<::test_protocollayouts::MainProtocol::TwoWayNamedComposed>
    final : public ::fidl::internal::MessageBase<::fidl::Request<
                ::test_protocollayouts::MainProtocol::TwoWayNamedComposed>> {
 public:
  Request() = default;
  ~Request() = default;
  Request(Request&&) noexcept = default;
  Request& operator=(Request&&) noexcept = default;
  Request(::test_protocollayouts_imported::ImportUnionPayload payload)
      : payload_(std::move(payload)) {}
  ::test_protocollayouts_imported::ImportUnionPayload* operator->() {
    return &payload_;
  }
  const ::test_protocollayouts_imported::ImportUnionPayload* operator->()
      const {
    return &payload_;
  }
  ::test_protocollayouts_imported::ImportUnionPayload& operator*() {
    return payload_;
  }
  const ::test_protocollayouts_imported::ImportUnionPayload& operator*() const {
    return payload_;
  }

 private:
  ::test_protocollayouts_imported::ImportUnionPayload payload_;
};

template <>
struct ::fidl::internal::MessageTraits<
    ::fidl::Request<::test_protocollayouts::MainProtocol::TwoWayNamedComposed>>
    final {
 public:
  static constexpr bool kHasPayload = true;
  using Payload = ::test_protocollayouts_imported::ImportUnionPayload;
};
#endif  // __Fuchsia__

#ifdef __Fuchsia__

template <>
class ::fidl::Request<
    ::test_protocollayouts::MainProtocol::TwoWayNamedComposedWithError>
    final
    : public ::fidl::internal::MessageBase<::fidl::Request<
          ::test_protocollayouts::MainProtocol::TwoWayNamedComposedWithError>> {
 public:
  Request() = default;
  ~Request() = default;
  Request(Request&&) noexcept = default;
  Request& operator=(Request&&) noexcept = default;
  Request(::test_protocollayouts_imported::ImportTablePayload payload)
      : payload_(std::move(payload)) {}
  ::test_protocollayouts_imported::ImportTablePayload* operator->() {
    return &payload_;
  }
  const ::test_protocollayouts_imported::ImportTablePayload* operator->()
      const {
    return &payload_;
  }
  ::test_protocollayouts_imported::ImportTablePayload& operator*() {
    return payload_;
  }
  const ::test_protocollayouts_imported::ImportTablePayload& operator*() const {
    return payload_;
  }

 private:
  ::test_protocollayouts_imported::ImportTablePayload payload_;
};

template <>
struct ::fidl::internal::MessageTraits<::fidl::Request<
    ::test_protocollayouts::MainProtocol::TwoWayNamedComposedWithError>>
    final {
 public:
  static constexpr bool kHasPayload = true;
  using Payload = ::test_protocollayouts_imported::ImportTablePayload;
};
#endif  // __Fuchsia__

#ifdef __Fuchsia__

template <>
class ::fidl::Request<::test_protocollayouts::MainProtocol::OneWayImport> final
    : public ::fidl::internal::MessageBase<
          ::fidl::Request<::test_protocollayouts::MainProtocol::OneWayImport>> {
 public:
  Request() = default;
  ~Request() = default;
  Request(Request&&) noexcept = default;
  Request& operator=(Request&&) noexcept = default;
  Request(::test_protocollayouts_imported::ImportTablePayload payload)
      : payload_(std::move(payload)) {}
  ::test_protocollayouts_imported::ImportTablePayload* operator->() {
    return &payload_;
  }
  const ::test_protocollayouts_imported::ImportTablePayload* operator->()
      const {
    return &payload_;
  }
  ::test_protocollayouts_imported::ImportTablePayload& operator*() {
    return payload_;
  }
  const ::test_protocollayouts_imported::ImportTablePayload& operator*() const {
    return payload_;
  }

 private:
  ::test_protocollayouts_imported::ImportTablePayload payload_;
};

template <>
struct ::fidl::internal::MessageTraits<
    ::fidl::Request<::test_protocollayouts::MainProtocol::OneWayImport>>
    final {
 public:
  static constexpr bool kHasPayload = true;
  using Payload = ::test_protocollayouts_imported::ImportTablePayload;
};
#endif  // __Fuchsia__

#ifdef __Fuchsia__

template <>
class ::fidl::Request<::test_protocollayouts::MainProtocol::TwoWayImport> final
    : public ::fidl::internal::MessageBase<
          ::fidl::Request<::test_protocollayouts::MainProtocol::TwoWayImport>> {
 public:
  Request() = default;
  ~Request() = default;
  Request(Request&&) noexcept = default;
  Request& operator=(Request&&) noexcept = default;
  Request(::test_protocollayouts_imported::ImportUnionPayload payload)
      : payload_(std::move(payload)) {}
  ::test_protocollayouts_imported::ImportUnionPayload* operator->() {
    return &payload_;
  }
  const ::test_protocollayouts_imported::ImportUnionPayload* operator->()
      const {
    return &payload_;
  }
  ::test_protocollayouts_imported::ImportUnionPayload& operator*() {
    return payload_;
  }
  const ::test_protocollayouts_imported::ImportUnionPayload& operator*() const {
    return payload_;
  }

 private:
  ::test_protocollayouts_imported::ImportUnionPayload payload_;
};

template <>
struct ::fidl::internal::MessageTraits<
    ::fidl::Request<::test_protocollayouts::MainProtocol::TwoWayImport>>
    final {
 public:
  static constexpr bool kHasPayload = true;
  using Payload = ::test_protocollayouts_imported::ImportUnionPayload;
};
#endif  // __Fuchsia__

#ifdef __Fuchsia__

template <>
class ::fidl::Request<
    ::test_protocollayouts::MainProtocol::TwoWayImportWithError>
    final : public ::fidl::internal::MessageBase<::fidl::Request<
                ::test_protocollayouts::MainProtocol::TwoWayImportWithError>> {
 public:
  Request() = default;
  ~Request() = default;
  Request(Request&&) noexcept = default;
  Request& operator=(Request&&) noexcept = default;
  Request(::test_protocollayouts_imported::ImportTablePayload payload)
      : payload_(std::move(payload)) {}
  ::test_protocollayouts_imported::ImportTablePayload* operator->() {
    return &payload_;
  }
  const ::test_protocollayouts_imported::ImportTablePayload* operator->()
      const {
    return &payload_;
  }
  ::test_protocollayouts_imported::ImportTablePayload& operator*() {
    return payload_;
  }
  const ::test_protocollayouts_imported::ImportTablePayload& operator*() const {
    return payload_;
  }

 private:
  ::test_protocollayouts_imported::ImportTablePayload payload_;
};

template <>
struct ::fidl::internal::MessageTraits<::fidl::Request<
    ::test_protocollayouts::MainProtocol::TwoWayImportWithError>>
    final {
 public:
  static constexpr bool kHasPayload = true;
  using Payload = ::test_protocollayouts_imported::ImportTablePayload;
};
#endif  // __Fuchsia__

#ifdef __Fuchsia__

template <>
class ::fidl::Request<::test_protocollayouts::MainProtocol::OneWayLocal> final
    : public ::fidl::internal::MessageBase<
          ::fidl::Request<::test_protocollayouts::MainProtocol::OneWayLocal>> {
 public:
  Request() = default;
  ~Request() = default;
  Request(Request&&) noexcept = default;
  Request& operator=(Request&&) noexcept = default;
  Request(::test_protocollayouts::LocalTablePayload payload)
      : payload_(std::move(payload)) {}
  ::test_protocollayouts::LocalTablePayload* operator->() { return &payload_; }
  const ::test_protocollayouts::LocalTablePayload* operator->() const {
    return &payload_;
  }
  ::test_protocollayouts::LocalTablePayload& operator*() { return payload_; }
  const ::test_protocollayouts::LocalTablePayload& operator*() const {
    return payload_;
  }

 private:
  ::test_protocollayouts::LocalTablePayload payload_;
};

template <>
struct ::fidl::internal::MessageTraits<
    ::fidl::Request<::test_protocollayouts::MainProtocol::OneWayLocal>>
    final {
 public:
  static constexpr bool kHasPayload = true;
  using Payload = ::test_protocollayouts::LocalTablePayload;
};
#endif  // __Fuchsia__

#ifdef __Fuchsia__

template <>
class ::fidl::Request<::test_protocollayouts::MainProtocol::TwoWayLocal> final
    : public ::fidl::internal::MessageBase<
          ::fidl::Request<::test_protocollayouts::MainProtocol::TwoWayLocal>> {
 public:
  Request() = default;
  ~Request() = default;
  Request(Request&&) noexcept = default;
  Request& operator=(Request&&) noexcept = default;
  Request(::test_protocollayouts::LocalUnionPayload payload)
      : payload_(std::move(payload)) {}
  ::test_protocollayouts::LocalUnionPayload* operator->() { return &payload_; }
  const ::test_protocollayouts::LocalUnionPayload* operator->() const {
    return &payload_;
  }
  ::test_protocollayouts::LocalUnionPayload& operator*() { return payload_; }
  const ::test_protocollayouts::LocalUnionPayload& operator*() const {
    return payload_;
  }

 private:
  ::test_protocollayouts::LocalUnionPayload payload_;
};

template <>
struct ::fidl::internal::MessageTraits<
    ::fidl::Request<::test_protocollayouts::MainProtocol::TwoWayLocal>>
    final {
 public:
  static constexpr bool kHasPayload = true;
  using Payload = ::test_protocollayouts::LocalUnionPayload;
};
#endif  // __Fuchsia__

#ifdef __Fuchsia__

template <>
class ::fidl::Request<
    ::test_protocollayouts::MainProtocol::TwoWayLocalWithError>
    final : public ::fidl::internal::MessageBase<::fidl::Request<
                ::test_protocollayouts::MainProtocol::TwoWayLocalWithError>> {
 public:
  Request() = default;
  ~Request() = default;
  Request(Request&&) noexcept = default;
  Request& operator=(Request&&) noexcept = default;
  Request(::test_protocollayouts::LocalTablePayload payload)
      : payload_(std::move(payload)) {}
  ::test_protocollayouts::LocalTablePayload* operator->() { return &payload_; }
  const ::test_protocollayouts::LocalTablePayload* operator->() const {
    return &payload_;
  }
  ::test_protocollayouts::LocalTablePayload& operator*() { return payload_; }
  const ::test_protocollayouts::LocalTablePayload& operator*() const {
    return payload_;
  }

 private:
  ::test_protocollayouts::LocalTablePayload payload_;
};

template <>
struct ::fidl::internal::MessageTraits<
    ::fidl::Request<::test_protocollayouts::MainProtocol::TwoWayLocalWithError>>
    final {
 public:
  static constexpr bool kHasPayload = true;
  using Payload = ::test_protocollayouts::LocalTablePayload;
};
#endif  // __Fuchsia__

#ifdef __Fuchsia__

template <>
class ::fidl::Request<::test_protocollayouts::MainProtocol::OneWayAnon> final
    : public ::fidl::internal::MessageBase<
          ::fidl::Request<::test_protocollayouts::MainProtocol::OneWayAnon>> {
 public:
  Request() = default;
  ~Request() = default;
  Request(Request&&) noexcept = default;
  Request& operator=(Request&&) noexcept = default;
  Request(::test_protocollayouts::MainProtocolOneWayAnonRequest payload)
      : payload_(std::move(payload)) {}
  ::test_protocollayouts::MainProtocolOneWayAnonRequest* operator->() {
    return &payload_;
  }
  const ::test_protocollayouts::MainProtocolOneWayAnonRequest* operator->()
      const {
    return &payload_;
  }
  ::test_protocollayouts::MainProtocolOneWayAnonRequest& operator*() {
    return payload_;
  }
  const ::test_protocollayouts::MainProtocolOneWayAnonRequest& operator*()
      const {
    return payload_;
  }

 private:
  ::test_protocollayouts::MainProtocolOneWayAnonRequest payload_;
};

template <>
struct ::fidl::internal::MessageTraits<
    ::fidl::Request<::test_protocollayouts::MainProtocol::OneWayAnon>>
    final {
 public:
  static constexpr bool kHasPayload = true;
  using Payload = ::test_protocollayouts::MainProtocolOneWayAnonRequest;
};
#endif  // __Fuchsia__

#ifdef __Fuchsia__

template <>
class ::fidl::Request<::test_protocollayouts::MainProtocol::TwoWayAnon> final
    : public ::fidl::internal::MessageBase<
          ::fidl::Request<::test_protocollayouts::MainProtocol::TwoWayAnon>> {
 public:
  Request() = default;
  ~Request() = default;
  Request(Request&&) noexcept = default;
  Request& operator=(Request&&) noexcept = default;
  Request(::test_protocollayouts::MainProtocolTwoWayAnonRequest payload)
      : payload_(std::move(payload)) {}
  ::test_protocollayouts::MainProtocolTwoWayAnonRequest* operator->() {
    return &payload_;
  }
  const ::test_protocollayouts::MainProtocolTwoWayAnonRequest* operator->()
      const {
    return &payload_;
  }
  ::test_protocollayouts::MainProtocolTwoWayAnonRequest& operator*() {
    return payload_;
  }
  const ::test_protocollayouts::MainProtocolTwoWayAnonRequest& operator*()
      const {
    return payload_;
  }

 private:
  ::test_protocollayouts::MainProtocolTwoWayAnonRequest payload_;
};

template <>
struct ::fidl::internal::MessageTraits<
    ::fidl::Request<::test_protocollayouts::MainProtocol::TwoWayAnon>>
    final {
 public:
  static constexpr bool kHasPayload = true;
  using Payload = ::test_protocollayouts::MainProtocolTwoWayAnonRequest;
};
#endif  // __Fuchsia__

#ifdef __Fuchsia__

template <>
class ::fidl::Request<::test_protocollayouts::MainProtocol::TwoWayAnonWithError>
    final : public ::fidl::internal::MessageBase<::fidl::Request<
                ::test_protocollayouts::MainProtocol::TwoWayAnonWithError>> {
 public:
  Request() = default;
  ~Request() = default;
  Request(Request&&) noexcept = default;
  Request& operator=(Request&&) noexcept = default;
  Request(
      ::test_protocollayouts::MainProtocolTwoWayAnonWithErrorRequest payload)
      : payload_(std::move(payload)) {}
  ::test_protocollayouts::MainProtocolTwoWayAnonWithErrorRequest* operator->() {
    return &payload_;
  }
  const ::test_protocollayouts::MainProtocolTwoWayAnonWithErrorRequest*
  operator->() const {
    return &payload_;
  }
  ::test_protocollayouts::MainProtocolTwoWayAnonWithErrorRequest& operator*() {
    return payload_;
  }
  const ::test_protocollayouts::MainProtocolTwoWayAnonWithErrorRequest&
  operator*() const {
    return payload_;
  }

 private:
  ::test_protocollayouts::MainProtocolTwoWayAnonWithErrorRequest payload_;
};

template <>
struct ::fidl::internal::MessageTraits<
    ::fidl::Request<::test_protocollayouts::MainProtocol::TwoWayAnonWithError>>
    final {
 public:
  static constexpr bool kHasPayload = true;
  using Payload =
      ::test_protocollayouts::MainProtocolTwoWayAnonWithErrorRequest;
};
#endif  // __Fuchsia__

template <>
class ::fidl::internal::NaturalCompleterBase<
    ::test_protocollayouts::MainProtocol::TwoWayAnonComposed>
    : public ::fidl::CompleterBase {
 public:
  void Reply(::test_protocollayouts_imported::
                 ComposedProtocolTwoWayAnonComposedResponse&& payload);

 protected:
  using ::fidl::CompleterBase::CompleterBase;
};

template <>
class ::fidl::internal::NaturalCompleterBase<
    ::test_protocollayouts::MainProtocol::TwoWayAnonComposedWithError>
    : public ::fidl::CompleterBase {
 public:
  void Reply(
      ::test_protocollayouts_imported::
          ComposedProtocolTwoWayAnonComposedWithErrorTopResponse&& payload);

 protected:
  using ::fidl::CompleterBase::CompleterBase;
};

template <>
class ::fidl::internal::NaturalCompleterBase<
    ::test_protocollayouts::MainProtocol::TwoWayNamedComposed>
    : public ::fidl::CompleterBase {
 public:
  void Reply(::test_protocollayouts_imported::ImportTablePayload&& payload);

 protected:
  using ::fidl::CompleterBase::CompleterBase;
};

template <>
class ::fidl::internal::NaturalCompleterBase<
    ::test_protocollayouts::MainProtocol::TwoWayNamedComposedWithError>
    : public ::fidl::CompleterBase {
 public:
  void Reply(
      ::test_protocollayouts_imported::
          ComposedProtocolTwoWayNamedComposedWithErrorTopResponse&& payload);

 protected:
  using ::fidl::CompleterBase::CompleterBase;
};

template <>
class ::fidl::internal::NaturalCompleterBase<
    ::test_protocollayouts::MainProtocol::TwoWayImport>
    : public ::fidl::CompleterBase {
 public:
  void Reply(::test_protocollayouts_imported::ImportTablePayload&& payload);

 protected:
  using ::fidl::CompleterBase::CompleterBase;
};

template <>
class ::fidl::internal::NaturalCompleterBase<
    ::test_protocollayouts::MainProtocol::TwoWayImportWithError>
    : public ::fidl::CompleterBase {
 public:
  void Reply(
      ::test_protocollayouts::MainProtocolTwoWayImportWithErrorTopResponse&&
          payload);

 protected:
  using ::fidl::CompleterBase::CompleterBase;
};

template <>
class ::fidl::internal::NaturalCompleterBase<
    ::test_protocollayouts::MainProtocol::TwoWayLocal>
    : public ::fidl::CompleterBase {
 public:
  void Reply(::test_protocollayouts::LocalTablePayload&& payload);

 protected:
  using ::fidl::CompleterBase::CompleterBase;
};

template <>
class ::fidl::internal::NaturalCompleterBase<
    ::test_protocollayouts::MainProtocol::TwoWayLocalWithError>
    : public ::fidl::CompleterBase {
 public:
  void Reply(
      ::test_protocollayouts::MainProtocolTwoWayLocalWithErrorTopResponse&&
          payload);

 protected:
  using ::fidl::CompleterBase::CompleterBase;
};

template <>
class ::fidl::internal::NaturalCompleterBase<
    ::test_protocollayouts::MainProtocol::TwoWayAnon>
    : public ::fidl::CompleterBase {
 public:
  void Reply(::test_protocollayouts::MainProtocolTwoWayAnonResponse&& payload);

 protected:
  using ::fidl::CompleterBase::CompleterBase;
};

template <>
class ::fidl::internal::NaturalCompleterBase<
    ::test_protocollayouts::MainProtocol::TwoWayAnonWithError>
    : public ::fidl::CompleterBase {
 public:
  void Reply(
      ::test_protocollayouts::MainProtocolTwoWayAnonWithErrorTopResponse&&
          payload);

 protected:
  using ::fidl::CompleterBase::CompleterBase;
};

template <>
class ::fidl::Server<::test_protocollayouts::MainProtocol>
    : public ::fidl::internal::IncomingMessageDispatcher {
 public:
  Server() = default;
  virtual ~Server() = default;

  // The FIDL protocol type that is implemented by this server.
  using _EnclosingProtocol = ::test_protocollayouts::MainProtocol;

  using OneWayAnonComposedRequest =
      ::fidl::Request<::test_protocollayouts::MainProtocol::OneWayAnonComposed>;
  using OneWayAnonComposedCompleter = ::fidl::internal::NaturalCompleter<
      ::test_protocollayouts::MainProtocol::OneWayAnonComposed>;

  virtual void OneWayAnonComposed(
      OneWayAnonComposedRequest& request,
      OneWayAnonComposedCompleter::Sync& completer) = 0;

  using TwoWayAnonComposedRequest =
      ::fidl::Request<::test_protocollayouts::MainProtocol::TwoWayAnonComposed>;
  using TwoWayAnonComposedCompleter = ::fidl::internal::NaturalCompleter<
      ::test_protocollayouts::MainProtocol::TwoWayAnonComposed>;

  virtual void TwoWayAnonComposed(
      TwoWayAnonComposedRequest& request,
      TwoWayAnonComposedCompleter::Sync& completer) = 0;

  using TwoWayAnonComposedWithErrorRequest = ::fidl::Request<
      ::test_protocollayouts::MainProtocol::TwoWayAnonComposedWithError>;
  using TwoWayAnonComposedWithErrorCompleter =
      ::fidl::internal::NaturalCompleter<
          ::test_protocollayouts::MainProtocol::TwoWayAnonComposedWithError>;

  virtual void TwoWayAnonComposedWithError(
      TwoWayAnonComposedWithErrorRequest& request,
      TwoWayAnonComposedWithErrorCompleter::Sync& completer) = 0;

  using OneWayNamedComposedRequest = ::fidl::Request<
      ::test_protocollayouts::MainProtocol::OneWayNamedComposed>;
  using OneWayNamedComposedCompleter = ::fidl::internal::NaturalCompleter<
      ::test_protocollayouts::MainProtocol::OneWayNamedComposed>;

  virtual void OneWayNamedComposed(
      OneWayNamedComposedRequest& request,
      OneWayNamedComposedCompleter::Sync& completer) = 0;

  using TwoWayNamedComposedRequest = ::fidl::Request<
      ::test_protocollayouts::MainProtocol::TwoWayNamedComposed>;
  using TwoWayNamedComposedCompleter = ::fidl::internal::NaturalCompleter<
      ::test_protocollayouts::MainProtocol::TwoWayNamedComposed>;

  virtual void TwoWayNamedComposed(
      TwoWayNamedComposedRequest& request,
      TwoWayNamedComposedCompleter::Sync& completer) = 0;

  using TwoWayNamedComposedWithErrorRequest = ::fidl::Request<
      ::test_protocollayouts::MainProtocol::TwoWayNamedComposedWithError>;
  using TwoWayNamedComposedWithErrorCompleter =
      ::fidl::internal::NaturalCompleter<
          ::test_protocollayouts::MainProtocol::TwoWayNamedComposedWithError>;

  virtual void TwoWayNamedComposedWithError(
      TwoWayNamedComposedWithErrorRequest& request,
      TwoWayNamedComposedWithErrorCompleter::Sync& completer) = 0;

  using OneWayImportRequest =
      ::fidl::Request<::test_protocollayouts::MainProtocol::OneWayImport>;
  using OneWayImportCompleter = ::fidl::internal::NaturalCompleter<
      ::test_protocollayouts::MainProtocol::OneWayImport>;

  virtual void OneWayImport(OneWayImportRequest& request,
                            OneWayImportCompleter::Sync& completer) = 0;

  using TwoWayImportRequest =
      ::fidl::Request<::test_protocollayouts::MainProtocol::TwoWayImport>;
  using TwoWayImportCompleter = ::fidl::internal::NaturalCompleter<
      ::test_protocollayouts::MainProtocol::TwoWayImport>;

  virtual void TwoWayImport(TwoWayImportRequest& request,
                            TwoWayImportCompleter::Sync& completer) = 0;

  using TwoWayImportWithErrorRequest = ::fidl::Request<
      ::test_protocollayouts::MainProtocol::TwoWayImportWithError>;
  using TwoWayImportWithErrorCompleter = ::fidl::internal::NaturalCompleter<
      ::test_protocollayouts::MainProtocol::TwoWayImportWithError>;

  virtual void TwoWayImportWithError(
      TwoWayImportWithErrorRequest& request,
      TwoWayImportWithErrorCompleter::Sync& completer) = 0;

  using OneWayLocalRequest =
      ::fidl::Request<::test_protocollayouts::MainProtocol::OneWayLocal>;
  using OneWayLocalCompleter = ::fidl::internal::NaturalCompleter<
      ::test_protocollayouts::MainProtocol::OneWayLocal>;

  virtual void OneWayLocal(OneWayLocalRequest& request,
                           OneWayLocalCompleter::Sync& completer) = 0;

  using TwoWayLocalRequest =
      ::fidl::Request<::test_protocollayouts::MainProtocol::TwoWayLocal>;
  using TwoWayLocalCompleter = ::fidl::internal::NaturalCompleter<
      ::test_protocollayouts::MainProtocol::TwoWayLocal>;

  virtual void TwoWayLocal(TwoWayLocalRequest& request,
                           TwoWayLocalCompleter::Sync& completer) = 0;

  using TwoWayLocalWithErrorRequest = ::fidl::Request<
      ::test_protocollayouts::MainProtocol::TwoWayLocalWithError>;
  using TwoWayLocalWithErrorCompleter = ::fidl::internal::NaturalCompleter<
      ::test_protocollayouts::MainProtocol::TwoWayLocalWithError>;

  virtual void TwoWayLocalWithError(
      TwoWayLocalWithErrorRequest& request,
      TwoWayLocalWithErrorCompleter::Sync& completer) = 0;

  using OneWayAnonRequest =
      ::fidl::Request<::test_protocollayouts::MainProtocol::OneWayAnon>;
  using OneWayAnonCompleter = ::fidl::internal::NaturalCompleter<
      ::test_protocollayouts::MainProtocol::OneWayAnon>;

  virtual void OneWayAnon(OneWayAnonRequest& request,
                          OneWayAnonCompleter::Sync& completer) = 0;

  using TwoWayAnonRequest =
      ::fidl::Request<::test_protocollayouts::MainProtocol::TwoWayAnon>;
  using TwoWayAnonCompleter = ::fidl::internal::NaturalCompleter<
      ::test_protocollayouts::MainProtocol::TwoWayAnon>;

  virtual void TwoWayAnon(TwoWayAnonRequest& request,
                          TwoWayAnonCompleter::Sync& completer) = 0;

  using TwoWayAnonWithErrorRequest = ::fidl::Request<
      ::test_protocollayouts::MainProtocol::TwoWayAnonWithError>;
  using TwoWayAnonWithErrorCompleter = ::fidl::internal::NaturalCompleter<
      ::test_protocollayouts::MainProtocol::TwoWayAnonWithError>;

  virtual void TwoWayAnonWithError(
      TwoWayAnonWithErrorRequest& request,
      TwoWayAnonWithErrorCompleter::Sync& completer) = 0;

 private:
  void dispatch_message(
      ::fidl::IncomingMessage&& msg, ::fidl::Transaction* txn,
      ::fidl::internal::IncomingTransportContext transport_context) final;
};

#ifdef __Fuchsia__

template <>
struct ::fidl::internal::NaturalServerDispatcher<
    ::test_protocollayouts::MainProtocol>
    final {
  NaturalServerDispatcher() = delete;
  static void Dispatch(
      ::fidl::Server<::test_protocollayouts::MainProtocol>* impl,
      ::fidl::IncomingMessage&& msg,
      internal::IncomingTransportContext transport_context,
      ::fidl::Transaction* txn);

 private:
  static const ::fidl::internal::MethodEntry entries_[];
  static const ::fidl::internal::MethodEntry* entries_end_;
};
#endif  // __Fuchsia__
