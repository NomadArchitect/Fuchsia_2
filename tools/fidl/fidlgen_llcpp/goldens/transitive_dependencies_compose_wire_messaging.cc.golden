// WARNING: This file is machine generated by fidlgen.

#include <fidl/fidl.test.transitivedependenciescompose/cpp/wire_messaging.h>

#include <memory>

namespace fidl_test_transitivedependenciescompose {
[[maybe_unused]] constexpr uint64_t kTop_GetFoo_Ordinal = 3210163844600846111lu;

extern "C" const fidl_type_t
    fidl_test_transitivedependenciescompose_TopGetFooRequestMessageTable;

extern "C" const fidl_type_t
    fidl_test_transitivedependenciescompose_TopGetFooResponseMessageTable;
#ifdef __Fuchsia__
}  // namespace fidl_test_transitivedependenciescompose
::fidl::WireResult<::fidl_test_transitivedependenciescompose::Top::GetFoo>::
    WireResult(
        ::fidl::UnownedClientEnd<::fidl_test_transitivedependenciescompose::Top>
            client,
        ::fidl::WireRequest<
            ::fidl_test_transitivedependenciescompose::Top::GetFoo>* request) {
  FIDL_INTERNAL_DISABLE_AUTO_VAR_INIT
  ::fidl::OwnedEncodedMessage<::fidl::WireRequest<
      ::fidl_test_transitivedependenciescompose::Top::GetFoo>>
      request_message(::fidl::internal::AllowUnownedInputRef{}, request);
  auto& outgoing = request_message.GetOutgoingMessage();
  outgoing.Call<::fidl::WireResponse<
      ::fidl_test_transitivedependenciescompose::Top::GetFoo>>(
      client.channel(), bytes_.data(), static_cast<uint32_t>(bytes_.size()));
  SetResult(outgoing);
}

::fidl::WireResult<::fidl_test_transitivedependenciescompose::Top::GetFoo>::
    WireResult(
        ::fidl::UnownedClientEnd<::fidl_test_transitivedependenciescompose::Top>
            client,
        ::fidl::WireRequest<
            ::fidl_test_transitivedependenciescompose::Top::GetFoo>* request,
        zx_time_t deadline) {
  FIDL_INTERNAL_DISABLE_AUTO_VAR_INIT
  ::fidl::OwnedEncodedMessage<::fidl::WireRequest<
      ::fidl_test_transitivedependenciescompose::Top::GetFoo>>
      request_message(::fidl::internal::AllowUnownedInputRef{}, request);
  auto& outgoing = request_message.GetOutgoingMessage();
  outgoing.Call<::fidl::WireResponse<
      ::fidl_test_transitivedependenciescompose::Top::GetFoo>>(
      client.channel(), bytes_.data(), static_cast<uint32_t>(bytes_.size()),
      fidl::CallOptions{.deadline = deadline});
  SetResult(outgoing);
}
namespace fidl_test_transitivedependenciescompose {
#endif  // __Fuchsia__

#ifdef __Fuchsia__
}  // namespace fidl_test_transitivedependenciescompose
::fidl::WireUnownedResult<
    ::fidl_test_transitivedependenciescompose::Top::GetFoo>::
    WireUnownedResult(
        ::fidl::UnownedClientEnd<::fidl_test_transitivedependenciescompose::Top>
            client_end,
        ::fidl::internal::AnyBufferAllocator& allocator,
        ::fidl::WireRequest<
            ::fidl_test_transitivedependenciescompose::Top::GetFoo>* request) {
  constexpr uint32_t buffer_size = ::fidl::SyncClientMethodBufferSizeInChannel<
      ::fidl_test_transitivedependenciescompose::Top::GetFoo>();
  uint8_t* buffer = allocator.Allocate(buffer_size);
  if (!buffer) {
    ::fidl::Result::operator=(::fidl::Result::EncodeError(
        ZX_ERR_BUFFER_TOO_SMALL,
        ::fidl::internal::kCallerAllocatedBufferTooSmall));
    return;
  }
  constexpr uint32_t request_byte_capacity = ::fidl::MaxSizeInChannel<
      ::fidl::WireRequest<
          ::fidl_test_transitivedependenciescompose::Top::GetFoo>,
      ::fidl::MessageDirection::kSending>();
  uint8_t* request_bytes = buffer;
  static_assert(buffer_size > request_byte_capacity);
  uint32_t response_byte_capacity = buffer_size - request_byte_capacity;
  uint8_t* response_bytes = &buffer[request_byte_capacity];

  ::fidl::UnownedEncodedMessage<::fidl::WireRequest<
      ::fidl_test_transitivedependenciescompose::Top::GetFoo>>
      request_message(request_bytes, request_byte_capacity, request);
  auto& outgoing = request_message.GetOutgoingMessage();
  outgoing.Call<::fidl::WireResponse<
      ::fidl_test_transitivedependenciescompose::Top::GetFoo>>(
      client_end.channel(), response_bytes, response_byte_capacity);
  bytes_ = response_bytes;
  ::fidl::Result::operator=(outgoing);
}
namespace fidl_test_transitivedependenciescompose {
#endif  // __Fuchsia__

}  // namespace fidl_test_transitivedependenciescompose
#ifdef __Fuchsia__

void fidl::internal::
    WireClientImpl<::fidl_test_transitivedependenciescompose::Top>::GetFoo(
        ::fidl::WireClientCallback<
            ::fidl_test_transitivedependenciescompose::Top::GetFoo>
            _cb) {
  using Callback = decltype(_cb);
  class ResponseContext final
      : public ::fidl::WireResponseContext<
            ::fidl_test_transitivedependenciescompose::Top::GetFoo> {
   public:
    ResponseContext(Callback cb) : cb_(std::move(cb)) {}

    void OnResult(::fidl::WireUnownedResult<
                  ::fidl_test_transitivedependenciescompose::Top::GetFoo>&
                      result) override {
      cb_(result);
      delete this;
    }

   private:
    Callback cb_;
  };

  auto* _context = new ResponseContext(std::move(_cb));
  ::fidl::WireRequest<::fidl_test_transitivedependenciescompose::Top::GetFoo>
      _request{};
  FIDL_INTERNAL_DISABLE_AUTO_VAR_INIT
  ::fidl::OwnedEncodedMessage<::fidl::WireRequest<
      ::fidl_test_transitivedependenciescompose::Top::GetFoo>>
      _request_message(::fidl::internal::AllowUnownedInputRef{}, &_request);
  ::fidl::internal::ClientBase::SendTwoWay(
      _request_message.GetOutgoingMessage(), _context);
}

void fidl::internal::
    WireClientImpl<::fidl_test_transitivedependenciescompose::Top>::GetFoo(
        ::fit::callback<void(
            ::fidl::WireResponse<::fidl_test_transitivedependenciescompose::
                                     Top::GetFoo>* response)>
            _cb) {
  using Callback = decltype(_cb);
  class ResponseContext final
      : public ::fidl::WireResponseContext<
            ::fidl_test_transitivedependenciescompose::Top::GetFoo> {
   public:
    ResponseContext(Callback cb) : cb_(std::move(cb)) {}

    void OnResult(::fidl::WireUnownedResult<
                  ::fidl_test_transitivedependenciescompose::Top::GetFoo>&
                      result) override {
      if (result.ok()) {
        ::fidl::WireResponse<
            ::fidl_test_transitivedependenciescompose::Top::GetFoo>* response =
            result.Unwrap();
        cb_(response);
      }
      delete this;
    }

   private:
    Callback cb_;
  };

  auto* _context = new ResponseContext(std::move(_cb));
  ::fidl::WireRequest<::fidl_test_transitivedependenciescompose::Top::GetFoo>
      _request{};
  FIDL_INTERNAL_DISABLE_AUTO_VAR_INIT
  ::fidl::OwnedEncodedMessage<::fidl::WireRequest<
      ::fidl_test_transitivedependenciescompose::Top::GetFoo>>
      _request_message(::fidl::internal::AllowUnownedInputRef{}, &_request);
  ::fidl::internal::ClientBase::SendTwoWay(
      _request_message.GetOutgoingMessage(), _context);
}
void fidl::internal::
    WireClientImpl<::fidl_test_transitivedependenciescompose::Top>::GetFoo(
        ::fidl::WireResponseContext<
            ::fidl_test_transitivedependenciescompose::Top::GetFoo>* _context) {
  ::fidl::WireRequest<::fidl_test_transitivedependenciescompose::Top::GetFoo>
      _request{};

  FIDL_INTERNAL_DISABLE_AUTO_VAR_INIT
  ::fidl::OwnedEncodedMessage<::fidl::WireRequest<
      ::fidl_test_transitivedependenciescompose::Top::GetFoo>>
      _request_message(::fidl::internal::AllowUnownedInputRef{}, &_request);
  ::fidl::internal::ClientBase::SendTwoWay(
      _request_message.GetOutgoingMessage(), _context);
}
::fidl::WireResult<::fidl_test_transitivedependenciescompose::Top::GetFoo>
fidl::internal::WireClientImpl<
    ::fidl_test_transitivedependenciescompose::Top>::GetFoo_Sync() {
  return ::fidl::internal::ClientBase::MakeSyncCallWith(
      [&](std::shared_ptr<::fidl::internal::AnyTransport> _transport) {
        ::fidl::WireRequest<
            ::fidl_test_transitivedependenciescompose::Top::GetFoo>
            _request{};
        return ::fidl::WireResult<
            ::fidl_test_transitivedependenciescompose::Top::GetFoo>(
            ::fidl::UnownedClientEnd<
                ::fidl_test_transitivedependenciescompose::Top>(
                _transport->get<fidl::internal::ChannelTransport>()),
            &_request);
      });
}
::fidl::WireUnownedResult<
    ::fidl_test_transitivedependenciescompose::Top::GetFoo>
fidl::internal::WireClientImpl<::fidl_test_transitivedependenciescompose::Top>::
    GetFoo_Sync(::fidl::BufferSpan _buffer_span) {
  auto _allocator = ::fidl::internal::MakeAnyBufferAllocator(_buffer_span);
  return ::fidl::internal::ClientBase::MakeSyncCallWith(
      [&](std::shared_ptr<::fidl::internal::AnyTransport> _transport) {
        ::fidl::WireRequest<
            ::fidl_test_transitivedependenciescompose::Top::GetFoo>
            _request{};
        return ::fidl::WireUnownedResult<
            ::fidl_test_transitivedependenciescompose::Top::GetFoo>(
            ::fidl::UnownedClientEnd<
                ::fidl_test_transitivedependenciescompose::Top>(
                _transport->get<fidl::internal::ChannelTransport>()),
            _allocator, &_request);
      });
}
#endif  // __Fuchsia__

#ifdef __Fuchsia__

::fidl::Result
fidl::WireSyncEventHandler<::fidl_test_transitivedependenciescompose::Top>::
    HandleOneEvent(
        ::fidl::UnownedClientEnd<::fidl_test_transitivedependenciescompose::Top>
            client_end) {
  zx_status_t status = client_end.channel()->wait_one(
      ZX_CHANNEL_READABLE | ZX_CHANNEL_PEER_CLOSED, ::zx::time::infinite(),
      nullptr);
  if (status != ZX_OK) {
    return ::fidl::Result::TransportError(
        status, ::fidl::internal::kErrorWaitOneFailed);
  }
  constexpr uint32_t kHandleAllocSize = ([]() constexpr {
    uint32_t x = 0;
    if (x > ZX_CHANNEL_MAX_MSG_HANDLES) {
      x = ZX_CHANNEL_MAX_MSG_HANDLES;
    }
    return x;
  })();
  static_assert(kHandleAllocSize <= ZX_CHANNEL_MAX_MSG_HANDLES);
  ::fidl::internal::InlineMessageBuffer<24> read_storage;
  std::array<zx_handle_t, kHandleAllocSize> read_handles;
  // TODO(fxbug.dev/85734) Remove this channel-specific allocation.
  std::array<fidl_channel_handle_metadata_t, kHandleAllocSize>
      read_handle_metadata;
  ::fidl::IncomingMessage msg = ::fidl::MessageRead(
      zx::unowned_channel(client_end.handle()), read_storage.view(),
      read_handles.data(), read_handle_metadata.data(), kHandleAllocSize,
      ReadOptions{.discardable = true});
  if (msg.status() == ZX_ERR_BUFFER_TOO_SMALL) {
    // Message size is unexpectedly larger than calculated.
    // This can only be due to a newer version of the protocol defining a new
    // event, whose size exceeds the maximum of known events in the current
    // protocol.
    return ::fidl::Result::UnexpectedMessage(Unknown());
  }
  if (!msg.ok()) {
    return msg;
  }
  fidl_message_header_t* hdr = msg.header();
  switch (hdr->ordinal) {
    default: {
      return ::fidl::Result::UnexpectedMessage(Unknown());
    }
  }
}

std::optional<::fidl::UnbindInfo> fidl::internal::WireEventDispatcher<
    ::fidl_test_transitivedependenciescompose::Top>::
    DispatchEvent(fidl::IncomingMessage& msg,
                  internal::IncomingTransportContext* transport_context) {
  switch (msg.header()->ordinal) {
    default:
      break;
  }
  return ::fidl::UnbindInfo::UnknownOrdinal();
}
#endif  // __Fuchsia__

#ifdef __Fuchsia__

constexpr ::fidl::internal::MethodEntry fidl::internal::WireServerDispatcher<
    ::fidl_test_transitivedependenciescompose::Top>::entries_[] = {
    {
        ::fidl_test_transitivedependenciescompose::kTop_GetFoo_Ordinal,
        [](void* interface, ::fidl::IncomingMessage&& msg,
           ::fidl::Transaction* txn) {
          auto* primary = reinterpret_cast<::fidl::WireRequest<
              ::fidl_test_transitivedependenciescompose::Top::GetFoo>*>(
              msg.bytes());
          ::fidl::internal::WireCompleter<
              ::fidl_test_transitivedependenciescompose::Top::GetFoo>::Sync
              completer(txn);
          reinterpret_cast<::fidl::WireServer<
              ::fidl_test_transitivedependenciescompose::Top>*>(interface)
              ->GetFoo(primary, completer);
          return ZX_OK;
        },
    },
};

const ::fidl::internal::MethodEntry* fidl::internal::WireServerDispatcher<
    ::fidl_test_transitivedependenciescompose::Top>::entries_end_ =
    &entries_[1];

::fidl::DispatchResult fidl::internal::WireServerDispatcher<
    ::fidl_test_transitivedependenciescompose::Top>::
    TryDispatch(::fidl::WireServer<
                    ::fidl_test_transitivedependenciescompose::Top>* impl,
                ::fidl::IncomingMessage& msg, ::fidl::Transaction* txn) {
  return ::fidl::internal::TryDispatch(impl, msg, txn, entries_, entries_end_);
}

void fidl::internal::WireServerDispatcher<
    ::fidl_test_transitivedependenciescompose::Top>::
    Dispatch(::fidl::WireServer<::fidl_test_transitivedependenciescompose::Top>*
                 impl,
             ::fidl::IncomingMessage&& msg, ::fidl::Transaction* txn) {
  ::fidl::internal::Dispatch(impl, msg, txn, entries_, entries_end_);
}
void fidl::WireServer<::fidl_test_transitivedependenciescompose::Top>::
    dispatch_message(
        ::fidl::IncomingMessage&& msg, ::fidl::Transaction* txn,
        ::fidl::internal::IncomingTransportContext* transport_context) {
  ::fidl::internal::WireServerDispatcher<
      ::fidl_test_transitivedependenciescompose::Top>::Dispatch(this,
                                                                std::move(msg),
                                                                txn);
}
#endif  // __Fuchsia__

#ifdef __Fuchsia__
::fidl::Result fidl::internal::WireCompleterBase<
    ::fidl_test_transitivedependenciescompose::Top::GetFoo>::
    Reply(const ::bottom::wire::Foo& foo) {
  ::fidl::WireResponse<::fidl_test_transitivedependenciescompose::Top::GetFoo>
      _response{foo};
  FIDL_INTERNAL_DISABLE_AUTO_VAR_INIT
  ::fidl::OwnedEncodedMessage<::fidl::WireResponse<
      ::fidl_test_transitivedependenciescompose::Top::GetFoo>>
      _response_message{::fidl::internal::AllowUnownedInputRef{}, &_response};
  return ::fidl::internal::WireCompleterBase<
      ::fidl_test_transitivedependenciescompose::Top::GetFoo>::
      SendReply(&_response_message.GetOutgoingMessage());
}

::fidl::Result fidl::internal::WireCompleterBase<
    ::fidl_test_transitivedependenciescompose::Top::GetFoo>::
    Reply(::fidl::BufferSpan _buffer, const ::bottom::wire::Foo& foo) {
  ::fidl::WireResponse<::fidl_test_transitivedependenciescompose::Top::GetFoo>
      _response{foo};
  ::fidl::UnownedEncodedMessage<::fidl::WireResponse<
      ::fidl_test_transitivedependenciescompose::Top::GetFoo>>
      _response_message(_buffer.data, _buffer.capacity, &_response);
  return CompleterBase::SendReply(&_response_message.GetOutgoingMessage());
}
#endif  // __Fuchsia__

void ::fidl::WireRequest<
    ::fidl_test_transitivedependenciescompose::Top::GetFoo>::_InitHeader() {
  fidl_init_txn_header(
      &_hdr, 0, ::fidl_test_transitivedependenciescompose::kTop_GetFoo_Ordinal);
}

void ::fidl::WireResponse<
    ::fidl_test_transitivedependenciescompose::Top::GetFoo>::_InitHeader() {
  fidl_init_txn_header(
      &_hdr, 0, ::fidl_test_transitivedependenciescompose::kTop_GetFoo_Ordinal);
}

#ifdef __Fuchsia__

#endif  // __Fuchsia__
