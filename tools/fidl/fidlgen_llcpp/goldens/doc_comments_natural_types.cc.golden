// WARNING: This file is machine generated by fidlgen.

#include <fidl/test.doccomments/cpp/natural_types.h>

#ifdef __Fuchsia__

void ::test_doccomments::Struct::EncodeWithoutValidating(
    ::fidl::Encoder& encoder, size_t offset) {
  encoder.Alloc(
      ::fidl::EncodingInlineSize<::test_doccomments::Struct, ::fidl::Encoder>(
          &encoder));
  ::fidl::CodingTraits<::test_doccomments::Struct>::Encode(&encoder, this,
                                                           offset);
}

::test_doccomments::Struct::Struct(::fidl::Decoder& decoder)
    : storage_({::fidl::DecodeAs<int32_t>(&decoder, 0)}) {}
#endif  // __Fuchsia__

::test_doccomments::Struct::Storage_ test_doccomments::Struct::CloneStorage_()
    const {
  return Storage_{::fidl::internal::NaturalClone(storage_.field)};
}

::test_doccomments::Table::Storage_ test_doccomments::Table::CloneStorage_()
    const {
  return Storage_{::fidl::internal::NaturalClone(storage_.field)};
}

std::shared_ptr<::test_doccomments::StrictUnion::Storage_>
test_doccomments::StrictUnion::CloneStorage_() const {
  const Storage_& storage = *storage_;
  switch (storage_->index()) {
    case 1:
      return std::make_shared<Storage_>(
          std::in_place_index<1>,
          ::fidl::internal::NaturalClone(std::get<1>(storage)));
    default:
      return std::make_shared<Storage_>();
  }
}

std::shared_ptr<::test_doccomments::FlexibleUnion::Storage_>
test_doccomments::FlexibleUnion::CloneStorage_() const {
  const Storage_& storage = *storage_;
  switch (storage_->index()) {
    case 1:
      return std::make_shared<Storage_>(
          std::in_place_index<1>,
          ::fidl::internal::NaturalClone(std::get<1>(storage)));
    default:
      return std::make_shared<Storage_>();
  }
}
