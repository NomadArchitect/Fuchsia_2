// WARNING: This file is machine generated by fidlgen.

#pragma once

#include <fidl/test.bindingsdenylist/cpp/markers.h>
#include <fidl/test.bindingsdenylist/cpp/natural_types.h>
#include <fidl/test.bindingsdenylist/cpp/wire_types.h>
#ifdef __Fuchsia__
#include <fidl/test.bindingsdenylist/cpp/natural_messaging.h>
#include <fidl/test.bindingsdenylist/cpp/wire_messaging.h>
#endif  // __Fuchsia__
#include <fidl/test.dependent/cpp/type_conversions.h>
#include <lib/fidl/cpp/wire_natural_conversions.h>
namespace fidl {
namespace internal {

template <>
struct WireNaturalConversionTraits<
    ::test_bindingsdenylist::wire::MemberOnlyAppearsInImportingLibrary,
    ::test_bindingsdenylist::MemberOnlyAppearsInImportingLibrary> {
  static ::test_bindingsdenylist::MemberOnlyAppearsInImportingLibrary ToNatural(
      ::test_bindingsdenylist::wire::MemberOnlyAppearsInImportingLibrary src);
};

template <>
struct NaturalTypeForWireType<
    ::test_bindingsdenylist::wire::MemberOnlyAppearsInImportingLibrary> {
  using type = ::test_bindingsdenylist::MemberOnlyAppearsInImportingLibrary;
};

template <>
struct WireNaturalConversionTraits<
    ::test_bindingsdenylist::wire::OnlyAppearsInImportingLibrary,
    ::test_bindingsdenylist::OnlyAppearsInImportingLibrary> {
  static ::test_bindingsdenylist::OnlyAppearsInImportingLibrary ToNatural(
      ::test_bindingsdenylist::wire::OnlyAppearsInImportingLibrary src);
};

template <>
struct NaturalTypeForWireType<
    ::test_bindingsdenylist::wire::OnlyAppearsInImportingLibrary> {
  using type = ::test_bindingsdenylist::OnlyAppearsInImportingLibrary;
};

template <>
struct WireNaturalConversionTraits<
    ::test_bindingsdenylist::wire::DenyEachBindingOnlyDenySyzkallerResponse,
    ::test_bindingsdenylist::DenyEachBindingOnlyDenySyzkallerResponse> {
  static ::test_bindingsdenylist::DenyEachBindingOnlyDenySyzkallerResponse
  ToNatural(
      ::test_bindingsdenylist::wire::DenyEachBindingOnlyDenySyzkallerResponse
          src);
};

template <>
struct NaturalTypeForWireType<
    ::test_bindingsdenylist::wire::DenyEachBindingOnlyDenySyzkallerResponse> {
  using type =
      ::test_bindingsdenylist::DenyEachBindingOnlyDenySyzkallerResponse;
};

template <>
struct WireNaturalConversionTraits<
    ::test_bindingsdenylist::wire::DenyEachBindingOnlyDenySyzkallerTopResponse,
    ::test_bindingsdenylist::DenyEachBindingOnlyDenySyzkallerTopResponse> {
  static ::test_bindingsdenylist::DenyEachBindingOnlyDenySyzkallerTopResponse
  ToNatural(
      ::test_bindingsdenylist::wire::DenyEachBindingOnlyDenySyzkallerTopResponse
          src);
};

template <>
struct NaturalTypeForWireType<::test_bindingsdenylist::wire::
                                  DenyEachBindingOnlyDenySyzkallerTopResponse> {
  using type =
      ::test_bindingsdenylist::DenyEachBindingOnlyDenySyzkallerTopResponse;
};

template <>
struct WireNaturalConversionTraits<
    ::test_bindingsdenylist::wire::DenyEachBindingOnlyDenyRustResponse,
    ::test_bindingsdenylist::DenyEachBindingOnlyDenyRustResponse> {
  static ::test_bindingsdenylist::DenyEachBindingOnlyDenyRustResponse ToNatural(
      ::test_bindingsdenylist::wire::DenyEachBindingOnlyDenyRustResponse src);
};

template <>
struct NaturalTypeForWireType<
    ::test_bindingsdenylist::wire::DenyEachBindingOnlyDenyRustResponse> {
  using type = ::test_bindingsdenylist::DenyEachBindingOnlyDenyRustResponse;
};

template <>
struct WireNaturalConversionTraits<
    ::test_bindingsdenylist::wire::DenyEachBindingOnlyDenyRustTopResponse,
    ::test_bindingsdenylist::DenyEachBindingOnlyDenyRustTopResponse> {
  static ::test_bindingsdenylist::DenyEachBindingOnlyDenyRustTopResponse
  ToNatural(
      ::test_bindingsdenylist::wire::DenyEachBindingOnlyDenyRustTopResponse
          src);
};

template <>
struct NaturalTypeForWireType<
    ::test_bindingsdenylist::wire::DenyEachBindingOnlyDenyRustTopResponse> {
  using type = ::test_bindingsdenylist::DenyEachBindingOnlyDenyRustTopResponse;
};

template <>
struct WireNaturalConversionTraits<
    ::test_bindingsdenylist::wire::DenyEachBindingOnlyDenyLibfuzzerResponse,
    ::test_bindingsdenylist::DenyEachBindingOnlyDenyLibfuzzerResponse> {
  static ::test_bindingsdenylist::DenyEachBindingOnlyDenyLibfuzzerResponse
  ToNatural(
      ::test_bindingsdenylist::wire::DenyEachBindingOnlyDenyLibfuzzerResponse
          src);
};

template <>
struct NaturalTypeForWireType<
    ::test_bindingsdenylist::wire::DenyEachBindingOnlyDenyLibfuzzerResponse> {
  using type =
      ::test_bindingsdenylist::DenyEachBindingOnlyDenyLibfuzzerResponse;
};

template <>
struct WireNaturalConversionTraits<
    ::test_bindingsdenylist::wire::DenyEachBindingOnlyDenyLibfuzzerTopResponse,
    ::test_bindingsdenylist::DenyEachBindingOnlyDenyLibfuzzerTopResponse> {
  static ::test_bindingsdenylist::DenyEachBindingOnlyDenyLibfuzzerTopResponse
  ToNatural(
      ::test_bindingsdenylist::wire::DenyEachBindingOnlyDenyLibfuzzerTopResponse
          src);
};

template <>
struct NaturalTypeForWireType<::test_bindingsdenylist::wire::
                                  DenyEachBindingOnlyDenyLibfuzzerTopResponse> {
  using type =
      ::test_bindingsdenylist::DenyEachBindingOnlyDenyLibfuzzerTopResponse;
};

template <>
struct WireNaturalConversionTraits<
    ::test_bindingsdenylist::wire::DenyEachBindingOnlyDenyGoResponse,
    ::test_bindingsdenylist::DenyEachBindingOnlyDenyGoResponse> {
  static ::test_bindingsdenylist::DenyEachBindingOnlyDenyGoResponse ToNatural(
      ::test_bindingsdenylist::wire::DenyEachBindingOnlyDenyGoResponse src);
};

template <>
struct NaturalTypeForWireType<
    ::test_bindingsdenylist::wire::DenyEachBindingOnlyDenyGoResponse> {
  using type = ::test_bindingsdenylist::DenyEachBindingOnlyDenyGoResponse;
};

template <>
struct WireNaturalConversionTraits<
    ::test_bindingsdenylist::wire::DenyEachBindingOnlyDenyGoTopResponse,
    ::test_bindingsdenylist::DenyEachBindingOnlyDenyGoTopResponse> {
  static ::test_bindingsdenylist::DenyEachBindingOnlyDenyGoTopResponse
  ToNatural(
      ::test_bindingsdenylist::wire::DenyEachBindingOnlyDenyGoTopResponse src);
};

template <>
struct NaturalTypeForWireType<
    ::test_bindingsdenylist::wire::DenyEachBindingOnlyDenyGoTopResponse> {
  using type = ::test_bindingsdenylist::DenyEachBindingOnlyDenyGoTopResponse;
};

template <>
struct WireNaturalConversionTraits<
    ::test_bindingsdenylist::wire::DenyEachBindingOnlyDenyDartResponse,
    ::test_bindingsdenylist::DenyEachBindingOnlyDenyDartResponse> {
  static ::test_bindingsdenylist::DenyEachBindingOnlyDenyDartResponse ToNatural(
      ::test_bindingsdenylist::wire::DenyEachBindingOnlyDenyDartResponse src);
};

template <>
struct NaturalTypeForWireType<
    ::test_bindingsdenylist::wire::DenyEachBindingOnlyDenyDartResponse> {
  using type = ::test_bindingsdenylist::DenyEachBindingOnlyDenyDartResponse;
};

template <>
struct WireNaturalConversionTraits<
    ::test_bindingsdenylist::wire::DenyEachBindingOnlyDenyDartTopResponse,
    ::test_bindingsdenylist::DenyEachBindingOnlyDenyDartTopResponse> {
  static ::test_bindingsdenylist::DenyEachBindingOnlyDenyDartTopResponse
  ToNatural(
      ::test_bindingsdenylist::wire::DenyEachBindingOnlyDenyDartTopResponse
          src);
};

template <>
struct NaturalTypeForWireType<
    ::test_bindingsdenylist::wire::DenyEachBindingOnlyDenyDartTopResponse> {
  using type = ::test_bindingsdenylist::DenyEachBindingOnlyDenyDartTopResponse;
};

template <>
struct WireNaturalConversionTraits<
    ::test_bindingsdenylist::wire::DenyEachBindingOnlyDenySyzkallerRequest,
    ::test_bindingsdenylist::DenyEachBindingOnlyDenySyzkallerRequest> {
  static ::test_bindingsdenylist::DenyEachBindingOnlyDenySyzkallerRequest
  ToNatural(
      ::test_bindingsdenylist::wire::DenyEachBindingOnlyDenySyzkallerRequest
          src);
};

template <>
struct NaturalTypeForWireType<
    ::test_bindingsdenylist::wire::DenyEachBindingOnlyDenySyzkallerRequest> {
  using type = ::test_bindingsdenylist::DenyEachBindingOnlyDenySyzkallerRequest;
};

template <>
struct WireNaturalConversionTraits<
    ::test_bindingsdenylist::wire::DenyEachBindingOnlyDenyRustRequest,
    ::test_bindingsdenylist::DenyEachBindingOnlyDenyRustRequest> {
  static ::test_bindingsdenylist::DenyEachBindingOnlyDenyRustRequest ToNatural(
      ::test_bindingsdenylist::wire::DenyEachBindingOnlyDenyRustRequest src);
};

template <>
struct NaturalTypeForWireType<
    ::test_bindingsdenylist::wire::DenyEachBindingOnlyDenyRustRequest> {
  using type = ::test_bindingsdenylist::DenyEachBindingOnlyDenyRustRequest;
};

template <>
struct WireNaturalConversionTraits<
    ::test_bindingsdenylist::wire::DenyEachBindingOnlyDenyLibfuzzerRequest,
    ::test_bindingsdenylist::DenyEachBindingOnlyDenyLibfuzzerRequest> {
  static ::test_bindingsdenylist::DenyEachBindingOnlyDenyLibfuzzerRequest
  ToNatural(
      ::test_bindingsdenylist::wire::DenyEachBindingOnlyDenyLibfuzzerRequest
          src);
};

template <>
struct NaturalTypeForWireType<
    ::test_bindingsdenylist::wire::DenyEachBindingOnlyDenyLibfuzzerRequest> {
  using type = ::test_bindingsdenylist::DenyEachBindingOnlyDenyLibfuzzerRequest;
};

template <>
struct WireNaturalConversionTraits<
    ::test_bindingsdenylist::wire::DenyEachBindingOnlyDenyGoRequest,
    ::test_bindingsdenylist::DenyEachBindingOnlyDenyGoRequest> {
  static ::test_bindingsdenylist::DenyEachBindingOnlyDenyGoRequest ToNatural(
      ::test_bindingsdenylist::wire::DenyEachBindingOnlyDenyGoRequest src);
};

template <>
struct NaturalTypeForWireType<
    ::test_bindingsdenylist::wire::DenyEachBindingOnlyDenyGoRequest> {
  using type = ::test_bindingsdenylist::DenyEachBindingOnlyDenyGoRequest;
};

template <>
struct WireNaturalConversionTraits<
    ::test_bindingsdenylist::wire::DenyEachBindingOnlyDenyDartRequest,
    ::test_bindingsdenylist::DenyEachBindingOnlyDenyDartRequest> {
  static ::test_bindingsdenylist::DenyEachBindingOnlyDenyDartRequest ToNatural(
      ::test_bindingsdenylist::wire::DenyEachBindingOnlyDenyDartRequest src);
};

template <>
struct NaturalTypeForWireType<
    ::test_bindingsdenylist::wire::DenyEachBindingOnlyDenyDartRequest> {
  using type = ::test_bindingsdenylist::DenyEachBindingOnlyDenyDartRequest;
};

template <>
struct WireNaturalConversionTraits<::test_bindingsdenylist::wire::OnlyLlcpp,
                                   ::test_bindingsdenylist::OnlyLlcpp> {
  static ::test_bindingsdenylist::OnlyLlcpp ToNatural(
      ::test_bindingsdenylist::wire::OnlyLlcpp src);
};

template <>
struct WireNaturalConversionTraits<
    ::test_bindingsdenylist::wire::OnlyLlcpp,
    std::unique_ptr<::test_bindingsdenylist::OnlyLlcpp>> {
  static std::unique_ptr<::test_bindingsdenylist::OnlyLlcpp> ToNatural(
      ::test_bindingsdenylist::wire::OnlyLlcpp src);
};

template <>
struct NaturalTypeForWireType<::test_bindingsdenylist::wire::OnlyLlcpp> {
  using type = std::unique_ptr<::test_bindingsdenylist::OnlyLlcpp>;
};

template <>
struct WireNaturalConversionTraits<
    ::test_bindingsdenylist::wire::DenyEachBindingOnlyDenySyzkallerResult,
    ::test_bindingsdenylist::DenyEachBindingOnlyDenySyzkallerResult> {
  static ::test_bindingsdenylist::DenyEachBindingOnlyDenySyzkallerResult
  ToNatural(
      ::test_bindingsdenylist::wire::DenyEachBindingOnlyDenySyzkallerResult
          src);
};

template <>
struct WireNaturalConversionTraits<
    ::test_bindingsdenylist::wire::DenyEachBindingOnlyDenySyzkallerResult,
    std::unique_ptr<
        ::test_bindingsdenylist::DenyEachBindingOnlyDenySyzkallerResult>> {
  static std::unique_ptr<
      ::test_bindingsdenylist::DenyEachBindingOnlyDenySyzkallerResult>
  ToNatural(
      ::test_bindingsdenylist::wire::DenyEachBindingOnlyDenySyzkallerResult
          src);
};

template <>
struct NaturalTypeForWireType<
    ::test_bindingsdenylist::wire::DenyEachBindingOnlyDenySyzkallerResult> {
  using type = std::unique_ptr<
      ::test_bindingsdenylist::DenyEachBindingOnlyDenySyzkallerResult>;
};

template <>
struct WireNaturalConversionTraits<
    ::test_bindingsdenylist::wire::DenyEachBindingOnlyDenyRustResult,
    ::test_bindingsdenylist::DenyEachBindingOnlyDenyRustResult> {
  static ::test_bindingsdenylist::DenyEachBindingOnlyDenyRustResult ToNatural(
      ::test_bindingsdenylist::wire::DenyEachBindingOnlyDenyRustResult src);
};

template <>
struct WireNaturalConversionTraits<
    ::test_bindingsdenylist::wire::DenyEachBindingOnlyDenyRustResult,
    std::unique_ptr<
        ::test_bindingsdenylist::DenyEachBindingOnlyDenyRustResult>> {
  static std::unique_ptr<
      ::test_bindingsdenylist::DenyEachBindingOnlyDenyRustResult>
  ToNatural(
      ::test_bindingsdenylist::wire::DenyEachBindingOnlyDenyRustResult src);
};

template <>
struct NaturalTypeForWireType<
    ::test_bindingsdenylist::wire::DenyEachBindingOnlyDenyRustResult> {
  using type = std::unique_ptr<
      ::test_bindingsdenylist::DenyEachBindingOnlyDenyRustResult>;
};

template <>
struct WireNaturalConversionTraits<
    ::test_bindingsdenylist::wire::DenyEachBindingOnlyDenyLibfuzzerResult,
    ::test_bindingsdenylist::DenyEachBindingOnlyDenyLibfuzzerResult> {
  static ::test_bindingsdenylist::DenyEachBindingOnlyDenyLibfuzzerResult
  ToNatural(
      ::test_bindingsdenylist::wire::DenyEachBindingOnlyDenyLibfuzzerResult
          src);
};

template <>
struct WireNaturalConversionTraits<
    ::test_bindingsdenylist::wire::DenyEachBindingOnlyDenyLibfuzzerResult,
    std::unique_ptr<
        ::test_bindingsdenylist::DenyEachBindingOnlyDenyLibfuzzerResult>> {
  static std::unique_ptr<
      ::test_bindingsdenylist::DenyEachBindingOnlyDenyLibfuzzerResult>
  ToNatural(
      ::test_bindingsdenylist::wire::DenyEachBindingOnlyDenyLibfuzzerResult
          src);
};

template <>
struct NaturalTypeForWireType<
    ::test_bindingsdenylist::wire::DenyEachBindingOnlyDenyLibfuzzerResult> {
  using type = std::unique_ptr<
      ::test_bindingsdenylist::DenyEachBindingOnlyDenyLibfuzzerResult>;
};

template <>
struct WireNaturalConversionTraits<
    ::test_bindingsdenylist::wire::DenyEachBindingOnlyDenyGoResult,
    ::test_bindingsdenylist::DenyEachBindingOnlyDenyGoResult> {
  static ::test_bindingsdenylist::DenyEachBindingOnlyDenyGoResult ToNatural(
      ::test_bindingsdenylist::wire::DenyEachBindingOnlyDenyGoResult src);
};

template <>
struct WireNaturalConversionTraits<
    ::test_bindingsdenylist::wire::DenyEachBindingOnlyDenyGoResult,
    std::unique_ptr<::test_bindingsdenylist::DenyEachBindingOnlyDenyGoResult>> {
  static std::unique_ptr<
      ::test_bindingsdenylist::DenyEachBindingOnlyDenyGoResult>
  ToNatural(::test_bindingsdenylist::wire::DenyEachBindingOnlyDenyGoResult src);
};

template <>
struct NaturalTypeForWireType<
    ::test_bindingsdenylist::wire::DenyEachBindingOnlyDenyGoResult> {
  using type =
      std::unique_ptr<::test_bindingsdenylist::DenyEachBindingOnlyDenyGoResult>;
};

template <>
struct WireNaturalConversionTraits<
    ::test_bindingsdenylist::wire::DenyEachBindingOnlyDenyDartResult,
    ::test_bindingsdenylist::DenyEachBindingOnlyDenyDartResult> {
  static ::test_bindingsdenylist::DenyEachBindingOnlyDenyDartResult ToNatural(
      ::test_bindingsdenylist::wire::DenyEachBindingOnlyDenyDartResult src);
};

template <>
struct WireNaturalConversionTraits<
    ::test_bindingsdenylist::wire::DenyEachBindingOnlyDenyDartResult,
    std::unique_ptr<
        ::test_bindingsdenylist::DenyEachBindingOnlyDenyDartResult>> {
  static std::unique_ptr<
      ::test_bindingsdenylist::DenyEachBindingOnlyDenyDartResult>
  ToNatural(
      ::test_bindingsdenylist::wire::DenyEachBindingOnlyDenyDartResult src);
};

template <>
struct NaturalTypeForWireType<
    ::test_bindingsdenylist::wire::DenyEachBindingOnlyDenyDartResult> {
  using type = std::unique_ptr<
      ::test_bindingsdenylist::DenyEachBindingOnlyDenyDartResult>;
};

#ifdef __Fuchsia__

template <>
struct WireNaturalConversionTraits<
    ::fidl::WireRequest<::test_bindingsdenylist::OnlyLibfuzzerAndDeps::
                            LibfuzzerNeedsNonemptyProtocol>,
    ::fidl::Request<::test_bindingsdenylist::OnlyLibfuzzerAndDeps::
                        LibfuzzerNeedsNonemptyProtocol>> {
  static ::fidl::Request<::test_bindingsdenylist::OnlyLibfuzzerAndDeps::
                             LibfuzzerNeedsNonemptyProtocol>
  ToNatural(::fidl::WireRequest<::test_bindingsdenylist::OnlyLibfuzzerAndDeps::
                                    LibfuzzerNeedsNonemptyProtocol>
                src);
};

template <>
struct NaturalTypeForWireType<
    ::fidl::WireRequest<::test_bindingsdenylist::OnlyLibfuzzerAndDeps::
                            LibfuzzerNeedsNonemptyProtocol>> {
  using type = ::fidl::Request<::test_bindingsdenylist::OnlyLibfuzzerAndDeps::
                                   LibfuzzerNeedsNonemptyProtocol>;
};

template <>
struct WireNaturalConversionTraits<
    ::fidl::WireResponse<::test_bindingsdenylist::OnlyLibfuzzerAndDeps::
                             LibfuzzerNeedsNonemptyProtocol>,
    ::fidl::Response<::test_bindingsdenylist::OnlyLibfuzzerAndDeps::
                         LibfuzzerNeedsNonemptyProtocol>> {
  static ::fidl::Response<::test_bindingsdenylist::OnlyLibfuzzerAndDeps::
                              LibfuzzerNeedsNonemptyProtocol>
  ToNatural(::fidl::WireResponse<::test_bindingsdenylist::OnlyLibfuzzerAndDeps::
                                     LibfuzzerNeedsNonemptyProtocol>
                src);
};

template <>
struct NaturalTypeForWireType<
    ::fidl::WireResponse<::test_bindingsdenylist::OnlyLibfuzzerAndDeps::
                             LibfuzzerNeedsNonemptyProtocol>> {
  using type = ::fidl::Response<::test_bindingsdenylist::OnlyLibfuzzerAndDeps::
                                    LibfuzzerNeedsNonemptyProtocol>;
};

template <>
struct WireNaturalConversionTraits<
    ::fidl::WireRequest<
        ::test_bindingsdenylist::ImportsSameNameContext::Unattributed>,
    ::fidl::Request<
        ::test_bindingsdenylist::ImportsSameNameContext::Unattributed>> {
  static ::fidl::Request<
      ::test_bindingsdenylist::ImportsSameNameContext::Unattributed>
  ToNatural(::fidl::WireRequest<
            ::test_bindingsdenylist::ImportsSameNameContext::Unattributed>
                src);
};

template <>
struct NaturalTypeForWireType<::fidl::WireRequest<
    ::test_bindingsdenylist::ImportsSameNameContext::Unattributed>> {
  using type = ::fidl::Request<
      ::test_bindingsdenylist::ImportsSameNameContext::Unattributed>;
};

template <>
struct WireNaturalConversionTraits<
    ::fidl::WireRequest<::test_bindingsdenylist::ImportsSameNameContext::
                            AlwaysAppearsInImportingLibrary>,
    ::fidl::Request<::test_bindingsdenylist::ImportsSameNameContext::
                        AlwaysAppearsInImportingLibrary>> {
  static ::fidl::Request<::test_bindingsdenylist::ImportsSameNameContext::
                             AlwaysAppearsInImportingLibrary>
  ToNatural(
      ::fidl::WireRequest<::test_bindingsdenylist::ImportsSameNameContext::
                              AlwaysAppearsInImportingLibrary>
          src);
};

template <>
struct NaturalTypeForWireType<
    ::fidl::WireRequest<::test_bindingsdenylist::ImportsSameNameContext::
                            AlwaysAppearsInImportingLibrary>> {
  using type = ::fidl::Request<::test_bindingsdenylist::ImportsSameNameContext::
                                   AlwaysAppearsInImportingLibrary>;
};

template <>
struct WireNaturalConversionTraits<
    ::fidl::WireRequest<::test_bindingsdenylist::DenyEachBinding::OnlyDenyDart>,
    ::fidl::Request<::test_bindingsdenylist::DenyEachBinding::OnlyDenyDart>> {
  static ::fidl::Request<::test_bindingsdenylist::DenyEachBinding::OnlyDenyDart>
  ToNatural(::fidl::WireRequest<
            ::test_bindingsdenylist::DenyEachBinding::OnlyDenyDart>
                src);
};

template <>
struct NaturalTypeForWireType<::fidl::WireRequest<
    ::test_bindingsdenylist::DenyEachBinding::OnlyDenyDart>> {
  using type =
      ::fidl::Request<::test_bindingsdenylist::DenyEachBinding::OnlyDenyDart>;
};

template <>
struct WireNaturalConversionTraits<
    ::fidl::WireRequest<::test_bindingsdenylist::DenyEachBinding::OnlyDenyGo>,
    ::fidl::Request<::test_bindingsdenylist::DenyEachBinding::OnlyDenyGo>> {
  static ::fidl::Request<::test_bindingsdenylist::DenyEachBinding::OnlyDenyGo>
  ToNatural(
      ::fidl::WireRequest<::test_bindingsdenylist::DenyEachBinding::OnlyDenyGo>
          src);
};

template <>
struct NaturalTypeForWireType<
    ::fidl::WireRequest<::test_bindingsdenylist::DenyEachBinding::OnlyDenyGo>> {
  using type =
      ::fidl::Request<::test_bindingsdenylist::DenyEachBinding::OnlyDenyGo>;
};

template <>
struct WireNaturalConversionTraits<
    ::fidl::WireRequest<
        ::test_bindingsdenylist::DenyEachBinding::OnlyDenyLibfuzzer>,
    ::fidl::Request<
        ::test_bindingsdenylist::DenyEachBinding::OnlyDenyLibfuzzer>> {
  static ::fidl::Request<
      ::test_bindingsdenylist::DenyEachBinding::OnlyDenyLibfuzzer>
  ToNatural(::fidl::WireRequest<
            ::test_bindingsdenylist::DenyEachBinding::OnlyDenyLibfuzzer>
                src);
};

template <>
struct NaturalTypeForWireType<::fidl::WireRequest<
    ::test_bindingsdenylist::DenyEachBinding::OnlyDenyLibfuzzer>> {
  using type = ::fidl::Request<
      ::test_bindingsdenylist::DenyEachBinding::OnlyDenyLibfuzzer>;
};

template <>
struct WireNaturalConversionTraits<
    ::fidl::WireRequest<::test_bindingsdenylist::DenyEachBinding::OnlyDenyRust>,
    ::fidl::Request<::test_bindingsdenylist::DenyEachBinding::OnlyDenyRust>> {
  static ::fidl::Request<::test_bindingsdenylist::DenyEachBinding::OnlyDenyRust>
  ToNatural(::fidl::WireRequest<
            ::test_bindingsdenylist::DenyEachBinding::OnlyDenyRust>
                src);
};

template <>
struct NaturalTypeForWireType<::fidl::WireRequest<
    ::test_bindingsdenylist::DenyEachBinding::OnlyDenyRust>> {
  using type =
      ::fidl::Request<::test_bindingsdenylist::DenyEachBinding::OnlyDenyRust>;
};

template <>
struct WireNaturalConversionTraits<
    ::fidl::WireRequest<
        ::test_bindingsdenylist::DenyEachBinding::OnlyDenySyzkaller>,
    ::fidl::Request<
        ::test_bindingsdenylist::DenyEachBinding::OnlyDenySyzkaller>> {
  static ::fidl::Request<
      ::test_bindingsdenylist::DenyEachBinding::OnlyDenySyzkaller>
  ToNatural(::fidl::WireRequest<
            ::test_bindingsdenylist::DenyEachBinding::OnlyDenySyzkaller>
                src);
};

template <>
struct NaturalTypeForWireType<::fidl::WireRequest<
    ::test_bindingsdenylist::DenyEachBinding::OnlyDenySyzkaller>> {
  using type = ::fidl::Request<
      ::test_bindingsdenylist::DenyEachBinding::OnlyDenySyzkaller>;
};

template <>
struct WireNaturalConversionTraits<
    ::fidl::WireResponse<
        ::test_bindingsdenylist::DenyEachBinding::OnlyDenyDart>,
    ::fidl::Response<::test_bindingsdenylist::DenyEachBinding::OnlyDenyDart>> {
  static ::fidl::Response<
      ::test_bindingsdenylist::DenyEachBinding::OnlyDenyDart>
  ToNatural(::fidl::WireResponse<
            ::test_bindingsdenylist::DenyEachBinding::OnlyDenyDart>
                src);
};

template <>
struct NaturalTypeForWireType<::fidl::WireResponse<
    ::test_bindingsdenylist::DenyEachBinding::OnlyDenyDart>> {
  using type =
      ::fidl::Response<::test_bindingsdenylist::DenyEachBinding::OnlyDenyDart>;
};

template <>
struct WireNaturalConversionTraits<
    ::fidl::WireResponse<::test_bindingsdenylist::DenyEachBinding::OnlyDenyGo>,
    ::fidl::Response<::test_bindingsdenylist::DenyEachBinding::OnlyDenyGo>> {
  static ::fidl::Response<::test_bindingsdenylist::DenyEachBinding::OnlyDenyGo>
  ToNatural(
      ::fidl::WireResponse<::test_bindingsdenylist::DenyEachBinding::OnlyDenyGo>
          src);
};

template <>
struct NaturalTypeForWireType<::fidl::WireResponse<
    ::test_bindingsdenylist::DenyEachBinding::OnlyDenyGo>> {
  using type =
      ::fidl::Response<::test_bindingsdenylist::DenyEachBinding::OnlyDenyGo>;
};

template <>
struct WireNaturalConversionTraits<
    ::fidl::WireResponse<
        ::test_bindingsdenylist::DenyEachBinding::OnlyDenyLibfuzzer>,
    ::fidl::Response<
        ::test_bindingsdenylist::DenyEachBinding::OnlyDenyLibfuzzer>> {
  static ::fidl::Response<
      ::test_bindingsdenylist::DenyEachBinding::OnlyDenyLibfuzzer>
  ToNatural(::fidl::WireResponse<
            ::test_bindingsdenylist::DenyEachBinding::OnlyDenyLibfuzzer>
                src);
};

template <>
struct NaturalTypeForWireType<::fidl::WireResponse<
    ::test_bindingsdenylist::DenyEachBinding::OnlyDenyLibfuzzer>> {
  using type = ::fidl::Response<
      ::test_bindingsdenylist::DenyEachBinding::OnlyDenyLibfuzzer>;
};

template <>
struct WireNaturalConversionTraits<
    ::fidl::WireResponse<
        ::test_bindingsdenylist::DenyEachBinding::OnlyDenyRust>,
    ::fidl::Response<::test_bindingsdenylist::DenyEachBinding::OnlyDenyRust>> {
  static ::fidl::Response<
      ::test_bindingsdenylist::DenyEachBinding::OnlyDenyRust>
  ToNatural(::fidl::WireResponse<
            ::test_bindingsdenylist::DenyEachBinding::OnlyDenyRust>
                src);
};

template <>
struct NaturalTypeForWireType<::fidl::WireResponse<
    ::test_bindingsdenylist::DenyEachBinding::OnlyDenyRust>> {
  using type =
      ::fidl::Response<::test_bindingsdenylist::DenyEachBinding::OnlyDenyRust>;
};

template <>
struct WireNaturalConversionTraits<
    ::fidl::WireResponse<
        ::test_bindingsdenylist::DenyEachBinding::OnlyDenySyzkaller>,
    ::fidl::Response<
        ::test_bindingsdenylist::DenyEachBinding::OnlyDenySyzkaller>> {
  static ::fidl::Response<
      ::test_bindingsdenylist::DenyEachBinding::OnlyDenySyzkaller>
  ToNatural(::fidl::WireResponse<
            ::test_bindingsdenylist::DenyEachBinding::OnlyDenySyzkaller>
                src);
};

template <>
struct NaturalTypeForWireType<::fidl::WireResponse<
    ::test_bindingsdenylist::DenyEachBinding::OnlyDenySyzkaller>> {
  using type = ::fidl::Response<
      ::test_bindingsdenylist::DenyEachBinding::OnlyDenySyzkaller>;
};
#endif  // __Fuchsia__
}  // namespace internal
}  // namespace fidl
