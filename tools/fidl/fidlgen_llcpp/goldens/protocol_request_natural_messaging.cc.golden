// WARNING: This file is machine generated by fidlgen_llcpp.

#include <fidl/test.protocolrequest/cpp/natural_messaging.h>

namespace test_protocolrequest {
[[maybe_unused]] constexpr inline uint64_t kParent_GetChild_Ordinal =
    881818649151440699lu;

[[maybe_unused]] constexpr inline uint64_t kParent_GetChildRequest_Ordinal =
    1096855814967598201lu;

[[maybe_unused]] constexpr inline uint64_t kParent_TakeChild_Ordinal =
    4470101341872267920lu;

[[maybe_unused]] constexpr inline uint64_t kParent_TakeChildRequest_Ordinal =
    2333981071306416007lu;

#ifdef __Fuchsia__
}  // namespace test_protocolrequest
::fidl::internal::NaturalThenable<::test_protocolrequest::Parent::GetChild>
fidl::internal::NaturalClientImpl<::test_protocolrequest::Parent>::GetChild()
    const {
  ::fidl::internal::NaturalMessageEncoder _encoder{
      &::fidl::internal::ChannelTransport::VTable,
      ::test_protocolrequest::kParent_GetChild_Ordinal};
  return ::fidl::internal::NaturalThenable<
      ::test_protocolrequest::Parent::GetChild>(
      messenger().client_base(), {}, std::move(_encoder),
      [](::fidl::internal::ThenableBase* base,
         ::fidl::internal::NaturalMessageEncoder& encoder,
         ::fidl::internal::ResponseContext* response_context) {
        ::fidl::OutgoingMessage msg = encoder.GetMessage();
        return base->SendTwoWay(msg, response_context);
      });
}

::fidl::internal::NaturalThenable<
    ::test_protocolrequest::Parent::GetChildRequest>
fidl::internal::NaturalClientImpl<
    ::test_protocolrequest::Parent>::GetChildRequest() const {
  ::fidl::internal::NaturalMessageEncoder _encoder{
      &::fidl::internal::ChannelTransport::VTable,
      ::test_protocolrequest::kParent_GetChildRequest_Ordinal};
  return ::fidl::internal::NaturalThenable<
      ::test_protocolrequest::Parent::GetChildRequest>(
      messenger().client_base(), {}, std::move(_encoder),
      [](::fidl::internal::ThenableBase* base,
         ::fidl::internal::NaturalMessageEncoder& encoder,
         ::fidl::internal::ResponseContext* response_context) {
        ::fidl::OutgoingMessage msg = encoder.GetMessage();
        return base->SendTwoWay(msg, response_context);
      });
}

::fitx::result<::fidl::Error>
fidl::internal::NaturalClientImpl<::test_protocolrequest::Parent>::TakeChild(
    ::fidl::Request<::test_protocolrequest::Parent::TakeChild> request) const {
  ::fidl::internal::NaturalMessageEncoder _encoder{
      &::fidl::internal::ChannelTransport::VTable,
      ::test_protocolrequest::kParent_TakeChild_Ordinal};
  _encoder.EncodeBody(
      ::fidl::internal::NaturalMessageConverter<
          ::fidl::Request<::test_protocolrequest::Parent::TakeChild>>::
          IntoDomainObject(std::move(request)));

  ::fidl::Status status = messenger().OneWay(_encoder.GetMessage());
  return ::fidl::internal::ToFitxResult(status);
}

::fitx::result<::fidl::Error> fidl::internal::
    NaturalClientImpl<::test_protocolrequest::Parent>::TakeChildRequest(
        ::fidl::Request<::test_protocolrequest::Parent::TakeChildRequest>
            request) const {
  ::fidl::internal::NaturalMessageEncoder _encoder{
      &::fidl::internal::ChannelTransport::VTable,
      ::test_protocolrequest::kParent_TakeChildRequest_Ordinal};
  _encoder.EncodeBody(
      ::fidl::internal::NaturalMessageConverter<
          ::fidl::Request<::test_protocolrequest::Parent::TakeChildRequest>>::
          IntoDomainObject(std::move(request)));

  ::fidl::Status status = messenger().OneWay(_encoder.GetMessage());
  return ::fidl::internal::ToFitxResult(status);
}
namespace test_protocolrequest {
#endif  // __Fuchsia__

}  // namespace test_protocolrequest
#ifdef __Fuchsia__

std::optional<::fidl::UnbindInfo> fidl::internal::
    NaturalEventDispatcher<::test_protocolrequest::Parent>::DispatchEvent(
        ::fidl::IncomingMessage& msg,
        ::fidl::internal::IncomingTransportContext transport_context) {
  return ::fidl::UnbindInfo::UnknownOrdinal();
}
#endif  // __Fuchsia__

#ifdef __Fuchsia__

#endif  // __Fuchsia__

void fidl::internal::
    NaturalCompleterBase<::test_protocolrequest::Parent::GetChild>::Reply(
        ::fidl::Response<::test_protocolrequest::Parent::GetChild>&& response) {
  ::fidl::internal::NaturalServerMessenger _messenger{this};
  ::fidl::internal::NaturalMessageEncoder _encoder{
      &::fidl::internal::ChannelTransport::VTable,
      ::test_protocolrequest::kParent_GetChild_Ordinal};
  _encoder.EncodeBody(
      ::fidl::internal::NaturalMessageConverter<
          ::fidl::Response<::test_protocolrequest::Parent::GetChild>>::
          IntoDomainObject(std::move(response)));
  _messenger.SendReply(_encoder.GetMessage(),
                       ::fidl::internal::OutgoingTransportContext{});
}

void fidl::internal::NaturalCompleterBase<
    ::test_protocolrequest::Parent::GetChildRequest>::
    Reply(::fidl::Response<::test_protocolrequest::Parent::GetChildRequest>&&
              response) {
  ::fidl::internal::NaturalServerMessenger _messenger{this};
  ::fidl::internal::NaturalMessageEncoder _encoder{
      &::fidl::internal::ChannelTransport::VTable,
      ::test_protocolrequest::kParent_GetChildRequest_Ordinal};
  _encoder.EncodeBody(
      ::fidl::internal::NaturalMessageConverter<
          ::fidl::Response<::test_protocolrequest::Parent::GetChildRequest>>::
          IntoDomainObject(std::move(response)));
  _messenger.SendReply(_encoder.GetMessage(),
                       ::fidl::internal::OutgoingTransportContext{});
}

#ifdef __Fuchsia__

constexpr ::fidl::internal::MethodEntry fidl::internal::NaturalServerDispatcher<
    ::test_protocolrequest::Parent>::entries_[] = {
    {
        ::test_protocolrequest::kParent_GetChild_Ordinal,
        [](void* interface, ::fidl::IncomingMessage&& msg,
           internal::IncomingTransportContext transport_context,
           ::fidl::Transaction* txn) {
          ::fitx::result decoded =
              ::fidl::internal::DecodeTransactionalMessage(std::move(msg));
          if (decoded.is_error()) {
            return decoded.error_value().status();
          }
          ::fidl::Request<::test_protocolrequest::Parent::GetChild> request;
          ::fidl::internal::NaturalCompleter<
              ::test_protocolrequest::Parent::GetChild>::Sync completer(txn);
          static_cast<::fidl::Server<::test_protocolrequest::Parent>*>(
              interface)
              ->GetChild(request, completer);
          return ZX_OK;
        },
    },
    {
        ::test_protocolrequest::kParent_GetChildRequest_Ordinal,
        [](void* interface, ::fidl::IncomingMessage&& msg,
           internal::IncomingTransportContext transport_context,
           ::fidl::Transaction* txn) {
          ::fitx::result decoded =
              ::fidl::internal::DecodeTransactionalMessage(std::move(msg));
          if (decoded.is_error()) {
            return decoded.error_value().status();
          }
          ::fidl::Request<::test_protocolrequest::Parent::GetChildRequest>
              request;
          ::fidl::internal::NaturalCompleter<
              ::test_protocolrequest::Parent::GetChildRequest>::Sync
              completer(txn);
          static_cast<::fidl::Server<::test_protocolrequest::Parent>*>(
              interface)
              ->GetChildRequest(request, completer);
          return ZX_OK;
        },
    },
    {
        ::test_protocolrequest::kParent_TakeChild_Ordinal,
        [](void* interface, ::fidl::IncomingMessage&& msg,
           internal::IncomingTransportContext transport_context,
           ::fidl::Transaction* txn) {
          ::fitx::result decoded = ::fidl::internal::DecodeTransactionalMessage<
              ::test_protocolrequest::ParentTakeChildRequest>(std::move(msg));
          if (decoded.is_error()) {
            return decoded.error_value().status();
          }
          ::fidl::Request<::test_protocolrequest::Parent::TakeChild> request =
              ::fidl::internal::NaturalMessageConverter<
                  ::fidl::Request<::test_protocolrequest::Parent::TakeChild>>::
                  FromDomainObject(std::move(decoded.value()));
          ::fidl::internal::NaturalCompleter<
              ::test_protocolrequest::Parent::TakeChild>::Sync completer(txn);
          static_cast<::fidl::Server<::test_protocolrequest::Parent>*>(
              interface)
              ->TakeChild(request, completer);
          return ZX_OK;
        },
    },
    {
        ::test_protocolrequest::kParent_TakeChildRequest_Ordinal,
        [](void* interface, ::fidl::IncomingMessage&& msg,
           internal::IncomingTransportContext transport_context,
           ::fidl::Transaction* txn) {
          ::fitx::result decoded = ::fidl::internal::DecodeTransactionalMessage<
              ::test_protocolrequest::ParentTakeChildRequestRequest>(
              std::move(msg));
          if (decoded.is_error()) {
            return decoded.error_value().status();
          }
          ::fidl::Request<::test_protocolrequest::Parent::TakeChildRequest>
              request =
                  ::fidl::internal::NaturalMessageConverter<::fidl::Request<
                      ::test_protocolrequest::Parent::TakeChildRequest>>::
                      FromDomainObject(std::move(decoded.value()));
          ::fidl::internal::NaturalCompleter<
              ::test_protocolrequest::Parent::TakeChildRequest>::Sync
              completer(txn);
          static_cast<::fidl::Server<::test_protocolrequest::Parent>*>(
              interface)
              ->TakeChildRequest(request, completer);
          return ZX_OK;
        },
    },
};

const ::fidl::internal::MethodEntry* fidl::internal::NaturalServerDispatcher<
    ::test_protocolrequest::Parent>::entries_end_ = &entries_[4];

void fidl::internal::NaturalServerDispatcher<::test_protocolrequest::Parent>::
    Dispatch(::fidl::Server<::test_protocolrequest::Parent>* impl,
             ::fidl::IncomingMessage&& msg,
             internal::IncomingTransportContext transport_context,
             ::fidl::Transaction* txn) {
  ::fidl::internal::Dispatch(impl, msg, std::move(transport_context), txn,
                             entries_, entries_end_);
}
void fidl::Server<::test_protocolrequest::Parent>::dispatch_message(
    ::fidl::IncomingMessage&& msg, ::fidl::Transaction* txn,
    ::fidl::internal::IncomingTransportContext transport_context) {
  ::fidl::internal::NaturalServerDispatcher<
      ::test_protocolrequest::Parent>::Dispatch(this, std::move(msg),
                                                std::move(transport_context),
                                                txn);
}
#endif  // __Fuchsia__

#ifdef __Fuchsia__

#endif  // __Fuchsia__

#ifdef __Fuchsia__

std::optional<::fidl::UnbindInfo> fidl::internal::
    NaturalEventDispatcher<::test_protocolrequest::Child>::DispatchEvent(
        ::fidl::IncomingMessage& msg,
        ::fidl::internal::IncomingTransportContext transport_context) {
  return ::fidl::UnbindInfo::UnknownOrdinal();
}
#endif  // __Fuchsia__

#ifdef __Fuchsia__

#endif  // __Fuchsia__

#ifdef __Fuchsia__

constexpr ::fidl::internal::MethodEntry fidl::internal::NaturalServerDispatcher<
    ::test_protocolrequest::Child>::entries_[] = {};

const ::fidl::internal::MethodEntry* fidl::internal::NaturalServerDispatcher<
    ::test_protocolrequest::Child>::entries_end_ = &entries_[0];

void fidl::internal::NaturalServerDispatcher<::test_protocolrequest::Child>::
    Dispatch(::fidl::Server<::test_protocolrequest::Child>* impl,
             ::fidl::IncomingMessage&& msg,
             internal::IncomingTransportContext transport_context,
             ::fidl::Transaction* txn) {
  ::fidl::internal::Dispatch(impl, msg, std::move(transport_context), txn,
                             entries_, entries_end_);
}
void fidl::Server<::test_protocolrequest::Child>::dispatch_message(
    ::fidl::IncomingMessage&& msg, ::fidl::Transaction* txn,
    ::fidl::internal::IncomingTransportContext transport_context) {
  ::fidl::internal::NaturalServerDispatcher<
      ::test_protocolrequest::Child>::Dispatch(this, std::move(msg),
                                               std::move(transport_context),
                                               txn);
}
#endif  // __Fuchsia__
