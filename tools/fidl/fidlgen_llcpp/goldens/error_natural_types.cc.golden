// WARNING: This file is machine generated by fidlgen.

#include <fidl/test.error/cpp/natural_types.h>

#ifdef __Fuchsia__

void ::test_error::Example_foo_Response::EncodeWithoutValidating(
    ::fidl::Encoder& encoder, size_t offset) {
  encoder.Alloc(::fidl::EncodingInlineSize<::test_error::Example_foo_Response,
                                           ::fidl::Encoder>(&encoder));
  ::fidl::CodingTraits<::test_error::Example_foo_Response>::Encode(
      &encoder, this, offset);
}

::test_error::Example_foo_Response::Example_foo_Response(
    ::fidl::Decoder& decoder)
    : storage_({::fidl::DecodeAs<int64_t>(&decoder, 0)}) {}
#endif  // __Fuchsia__

::test_error::Example_foo_Response::Storage_
test_error::Example_foo_Response::CloneStorage_() const {
  return Storage_{::fidl::internal::NaturalClone(storage_.y)};
}
#ifdef __Fuchsia__

void ::test_error::ExampleFooTopResponse::EncodeWithoutValidating(
    ::fidl::Encoder& encoder, size_t offset) {
  encoder.Alloc(::fidl::EncodingInlineSize<::test_error::ExampleFooTopResponse,
                                           ::fidl::Encoder>(&encoder));
  ::fidl::CodingTraits<::test_error::ExampleFooTopResponse>::Encode(
      &encoder, this, offset);
}

::test_error::ExampleFooTopResponse::ExampleFooTopResponse(
    ::fidl::Decoder& decoder)
    : storage_(
          {::fidl::DecodeAs<::test_error::Example_foo_Result>(&decoder, 0)}) {}
#endif  // __Fuchsia__

::test_error::ExampleFooTopResponse::Storage_
test_error::ExampleFooTopResponse::CloneStorage_() const {
  return Storage_{::fidl::internal::NaturalClone(storage_.result)};
}
#ifdef __Fuchsia__

void ::test_error::ExampleFooRequest::EncodeWithoutValidating(
    ::fidl::Encoder& encoder, size_t offset) {
  encoder.Alloc(::fidl::EncodingInlineSize<::test_error::ExampleFooRequest,
                                           ::fidl::Encoder>(&encoder));
  ::fidl::CodingTraits<::test_error::ExampleFooRequest>::Encode(&encoder, this,
                                                                offset);
}

::test_error::ExampleFooRequest::ExampleFooRequest(::fidl::Decoder& decoder)
    : storage_({::fidl::DecodeAs<::std::string>(&decoder, 0)}) {}
#endif  // __Fuchsia__

::test_error::ExampleFooRequest::Storage_
test_error::ExampleFooRequest::CloneStorage_() const {
  return Storage_{::fidl::internal::NaturalClone(storage_.s)};
}

std::shared_ptr<::test_error::Example_foo_Result::Storage>
test_error::Example_foo_Result::CloneStorage() const {
  const Storage& storage = *storage_;
  switch (storage_->index()) {
    case 1:
      return std::make_shared<Storage>(
          std::in_place_index<1>,
          ::fidl::internal::NaturalClone(std::get<1>(storage)));
    case 2:
      return std::make_shared<Storage>(
          std::in_place_index<2>,
          ::fidl::internal::NaturalClone(std::get<2>(storage)));
    default:
      return std::make_shared<Storage>();
  }
}
