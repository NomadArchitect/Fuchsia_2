// WARNING: This file is machine generated by fidlgen_llcpp.

#pragma once

#include <fidl/test.unknowninteractions/cpp/markers.h>
#include <fidl/test.unknowninteractions/cpp/natural_types.h>
#include <lib/fidl/cpp/channel.h>
#include <lib/fidl/cpp/client.h>
#include <lib/fidl/cpp/internal/message_extensions.h>
#include <lib/fidl/cpp/internal/natural_client_messenger.h>
#include <lib/fidl/cpp/internal/natural_server_messenger.h>
#include <lib/fidl/cpp/natural_types.h>
#include <lib/fidl/cpp/unified_messaging.h>

namespace fidl {

#ifdef __Fuchsia__
}  // namespace fidl

template <>
class ::fidl::Event<::test_unknowninteractions::Example::StrictEvent> final
    : public ::fidl::internal::MessageBase<
          ::fidl::Event<::test_unknowninteractions::Example::StrictEvent>> {
 public:
  Event() = default;
  ~Event() = default;
  Event(Event&&) noexcept = default;
  Event& operator=(Event&&) noexcept = default;

 private:
};

template <>
struct ::fidl::internal::MessageTraits<
    ::fidl::Event<::test_unknowninteractions::Example::StrictEvent>>
    final {
 public:
  static constexpr bool kHasPayload = false;
};
namespace fidl {}  // namespace fidl

template <>
class ::fidl::Event<::test_unknowninteractions::Example::FlexibleEvent> final
    : public ::fidl::internal::MessageBase<
          ::fidl::Event<::test_unknowninteractions::Example::FlexibleEvent>> {
 public:
  Event() = default;
  ~Event() = default;
  Event(Event&&) noexcept = default;
  Event& operator=(Event&&) noexcept = default;

 private:
};

template <>
struct ::fidl::internal::MessageTraits<
    ::fidl::Event<::test_unknowninteractions::Example::FlexibleEvent>>
    final {
 public:
  static constexpr bool kHasPayload = false;
};
namespace fidl {}  // namespace fidl

template <>
class ::fidl::Response<::test_unknowninteractions::Example::StrictTwoWay> final
    : public ::fidl::internal::MessageBase<
          ::fidl::Response<::test_unknowninteractions::Example::StrictTwoWay>> {
 public:
  Response() = default;
  ~Response() = default;
  Response(Response&&) noexcept = default;
  Response& operator=(Response&&) noexcept = default;

 private:
};

template <>
struct ::fidl::internal::MessageTraits<
    ::fidl::Response<::test_unknowninteractions::Example::StrictTwoWay>>
    final {
 public:
  static constexpr bool kHasPayload = false;
};
namespace fidl {}  // namespace fidl
template <>
class ::fidl::internal::ClientCallbackTraits<
    ::test_unknowninteractions::Example::StrictTwoWay>
    final {
 public:
  ClientCallbackTraits() = delete;
  using ResultCallback = ::fit::callback<void(
      ::fitx::result<::fidl::Error,
                     ::fidl::Response<
                         ::test_unknowninteractions::Example::StrictTwoWay>>&)>;
  using ResponseCallback = ::fit::callback<void(
      ::fidl::Response<::test_unknowninteractions::Example::StrictTwoWay>&)>;
};

template <>
class ::fidl::Response<::test_unknowninteractions::Example::FlexibleTwoWay>
    final : public ::fidl::internal::MessageBase<::fidl::Response<
                ::test_unknowninteractions::Example::FlexibleTwoWay>> {
 public:
  Response() = default;
  ~Response() = default;
  Response(Response&&) noexcept = default;
  Response& operator=(Response&&) noexcept = default;

 private:
};

template <>
struct ::fidl::internal::MessageTraits<
    ::fidl::Response<::test_unknowninteractions::Example::FlexibleTwoWay>>
    final {
 public:
  static constexpr bool kHasPayload = false;
};
template <>
class ::fidl::internal::ClientCallbackTraits<
    ::test_unknowninteractions::Example::FlexibleTwoWay>
    final {
 public:
  ClientCallbackTraits() = delete;
  using ResultCallback = ::fit::callback<void(
      ::fitx::result<::fidl::Error,
                     ::fidl::Response<::test_unknowninteractions::Example::
                                          FlexibleTwoWay>>&)>;
  using ResponseCallback = ::fit::callback<void(
      ::fidl::Response<::test_unknowninteractions::Example::FlexibleTwoWay>&)>;
};

template <>
class ::fidl::internal::NaturalClientImpl<::test_unknowninteractions::Example>
    final : public ::fidl::internal::NaturalClientBase {
 public:
  using NaturalClientBase::NaturalClientBase;
  void StrictTwoWay(
      ::fidl::ClientCallback<
          ::test_unknowninteractions::Example::StrictTwoWay>&& _callback) const;

  void StrictTwoWay(
      ::fidl::ClientResponseCallback<
          ::test_unknowninteractions::Example::StrictTwoWay>&& _callback) const;

  void FlexibleTwoWay(::fidl::ClientCallback<
                      ::test_unknowninteractions::Example::FlexibleTwoWay>&&
                          _callback) const;

  void FlexibleTwoWay(::fidl::ClientResponseCallback<
                      ::test_unknowninteractions::Example::FlexibleTwoWay>&&
                          _callback) const;

  ::fitx::result<::fidl::Error> StrictOneWay() const;

  ::fitx::result<::fidl::Error> FlexibleOneWay() const;
};
namespace fidl {
#endif  // __Fuchsia__

}  // namespace fidl
#ifdef __Fuchsia__

template <>
class ::fidl::internal::NaturalEventHandlerInterface<
    ::test_unknowninteractions::Example> {
 public:
  NaturalEventHandlerInterface() = default;
  virtual ~NaturalEventHandlerInterface() = default;
  virtual void StrictEvent(
      ::fidl::Event<::test_unknowninteractions::Example::StrictEvent>&) {}
  virtual void FlexibleEvent(
      ::fidl::Event<::test_unknowninteractions::Example::FlexibleEvent>&) {}
};

template <>
class ::fidl::AsyncEventHandler<::test_unknowninteractions::Example>
    : public ::fidl::internal::NaturalEventHandlerInterface<
          ::test_unknowninteractions::Example>,
      public ::fidl::internal::AsyncEventHandler {
 public:
  AsyncEventHandler() = default;
};

template <>
class ::fidl::internal::NaturalEventDispatcher<
    ::test_unknowninteractions::Example>
    final
    : public ::fidl::internal::IncomingEventDispatcher<
          ::fidl::AsyncEventHandler<::test_unknowninteractions::Example>> {
 public:
  explicit NaturalEventDispatcher(
      ::fidl::AsyncEventHandler<::test_unknowninteractions::Example>*
          event_handler)
      : IncomingEventDispatcher(event_handler) {}

 private:
  std::optional<::fidl::UnbindInfo> DispatchEvent(
      ::fidl::IncomingMessage& msg,
      internal::IncomingTransportContext transport_context) override;
};
#endif  // __Fuchsia__

#ifdef __Fuchsia__
template <>
class ::fidl::internal::NaturalWeakEventSender<
    ::test_unknowninteractions::Example>
    : public ::fidl::internal::WeakEventSenderBase {
 public:
  using WeakEventSenderBase::WeakEventSenderBase;

  ::fitx::result<::fidl::Error> StrictEvent();

  ::fitx::result<::fidl::Error> FlexibleEvent();
};

template <>
class ::fidl::internal::NaturalEventSender<::test_unknowninteractions::Example>
    : public ::fidl::internal::SyncEndpointManagedVeneer<
          ::fidl::internal::NaturalEventSender<
              ::test_unknowninteractions::Example>> {
 public:
  using SyncEndpointManagedVeneer::SyncEndpointManagedVeneer;

  ::fitx::result<::fidl::Error> StrictEvent();

  ::fitx::result<::fidl::Error> FlexibleEvent();
};
#endif  // __Fuchsia__

#ifdef __Fuchsia__

template <>
class ::fidl::Request<::test_unknowninteractions::Example::StrictOneWay> final
    : public ::fidl::internal::MessageBase<
          ::fidl::Request<::test_unknowninteractions::Example::StrictOneWay>> {
 public:
  Request() = default;
  ~Request() = default;
  Request(Request&&) noexcept = default;
  Request& operator=(Request&&) noexcept = default;

 private:
};

template <>
struct ::fidl::internal::MessageTraits<
    ::fidl::Request<::test_unknowninteractions::Example::StrictOneWay>>
    final {
 public:
  static constexpr bool kHasPayload = false;
};
#endif  // __Fuchsia__

#ifdef __Fuchsia__

template <>
class ::fidl::Request<::test_unknowninteractions::Example::FlexibleOneWay> final
    : public ::fidl::internal::MessageBase<::fidl::Request<
          ::test_unknowninteractions::Example::FlexibleOneWay>> {
 public:
  Request() = default;
  ~Request() = default;
  Request(Request&&) noexcept = default;
  Request& operator=(Request&&) noexcept = default;

 private:
};

template <>
struct ::fidl::internal::MessageTraits<
    ::fidl::Request<::test_unknowninteractions::Example::FlexibleOneWay>>
    final {
 public:
  static constexpr bool kHasPayload = false;
};
#endif  // __Fuchsia__

#ifdef __Fuchsia__

template <>
class ::fidl::Request<::test_unknowninteractions::Example::StrictTwoWay> final
    : public ::fidl::internal::MessageBase<
          ::fidl::Request<::test_unknowninteractions::Example::StrictTwoWay>> {
 public:
  Request() = default;
  ~Request() = default;
  Request(Request&&) noexcept = default;
  Request& operator=(Request&&) noexcept = default;

 private:
};

template <>
struct ::fidl::internal::MessageTraits<
    ::fidl::Request<::test_unknowninteractions::Example::StrictTwoWay>>
    final {
 public:
  static constexpr bool kHasPayload = false;
};
#endif  // __Fuchsia__

#ifdef __Fuchsia__

template <>
class ::fidl::Request<::test_unknowninteractions::Example::FlexibleTwoWay> final
    : public ::fidl::internal::MessageBase<::fidl::Request<
          ::test_unknowninteractions::Example::FlexibleTwoWay>> {
 public:
  Request() = default;
  ~Request() = default;
  Request(Request&&) noexcept = default;
  Request& operator=(Request&&) noexcept = default;

 private:
};

template <>
struct ::fidl::internal::MessageTraits<
    ::fidl::Request<::test_unknowninteractions::Example::FlexibleTwoWay>>
    final {
 public:
  static constexpr bool kHasPayload = false;
};
#endif  // __Fuchsia__

template <>
class ::fidl::internal::NaturalCompleterBase<
    ::test_unknowninteractions::Example::StrictTwoWay>
    : public ::fidl::CompleterBase {
 public:
  void Reply();

 protected:
  using ::fidl::CompleterBase::CompleterBase;
};

template <>
struct ::fidl::internal::MethodTypes<
    ::test_unknowninteractions::Example::StrictTwoWay> {
  using Completer = fidl::Completer<::fidl::internal::NaturalCompleterBase<
      ::test_unknowninteractions::Example::StrictTwoWay>>;
};

template <>
class ::fidl::internal::NaturalCompleterBase<
    ::test_unknowninteractions::Example::FlexibleTwoWay>
    : public ::fidl::CompleterBase {
 public:
  void Reply();

 protected:
  using ::fidl::CompleterBase::CompleterBase;
};

template <>
struct ::fidl::internal::MethodTypes<
    ::test_unknowninteractions::Example::FlexibleTwoWay> {
  using Completer = fidl::Completer<::fidl::internal::NaturalCompleterBase<
      ::test_unknowninteractions::Example::FlexibleTwoWay>>;
};

template <>
class ::fidl::Server<::test_unknowninteractions::Example>
    : public ::fidl::internal::IncomingMessageDispatcher {
 public:
  Server() = default;
  virtual ~Server() = default;

  // The FIDL protocol type that is implemented by this server.
  using _EnclosingProtocol = ::test_unknowninteractions::Example;

  using StrictOneWayRequest =
      ::fidl::Request<::test_unknowninteractions::Example::StrictOneWay>;
  using StrictOneWayCompleter = ::fidl::internal::NaturalCompleter<
      ::test_unknowninteractions::Example::StrictOneWay>;

  virtual void StrictOneWay(StrictOneWayRequest& request,
                            StrictOneWayCompleter::Sync& completer) = 0;

  using FlexibleOneWayRequest =
      ::fidl::Request<::test_unknowninteractions::Example::FlexibleOneWay>;
  using FlexibleOneWayCompleter = ::fidl::internal::NaturalCompleter<
      ::test_unknowninteractions::Example::FlexibleOneWay>;

  virtual void FlexibleOneWay(FlexibleOneWayRequest& request,
                              FlexibleOneWayCompleter::Sync& completer) = 0;

  using StrictTwoWayRequest =
      ::fidl::Request<::test_unknowninteractions::Example::StrictTwoWay>;
  using StrictTwoWayCompleter = ::fidl::internal::NaturalCompleter<
      ::test_unknowninteractions::Example::StrictTwoWay>;

  virtual void StrictTwoWay(StrictTwoWayRequest& request,
                            StrictTwoWayCompleter::Sync& completer) = 0;

  using FlexibleTwoWayRequest =
      ::fidl::Request<::test_unknowninteractions::Example::FlexibleTwoWay>;
  using FlexibleTwoWayCompleter = ::fidl::internal::NaturalCompleter<
      ::test_unknowninteractions::Example::FlexibleTwoWay>;

  virtual void FlexibleTwoWay(FlexibleTwoWayRequest& request,
                              FlexibleTwoWayCompleter::Sync& completer) = 0;

 private:
  void dispatch_message(
      ::fidl::IncomingMessage&& msg, ::fidl::Transaction* txn,
      ::fidl::internal::IncomingTransportContext transport_context) final;
};

#ifdef __Fuchsia__

template <>
struct ::fidl::internal::NaturalServerDispatcher<
    ::test_unknowninteractions::Example>
    final {
  NaturalServerDispatcher() = delete;
  static void Dispatch(
      ::fidl::Server<::test_unknowninteractions::Example>* impl,
      ::fidl::IncomingMessage&& msg,
      internal::IncomingTransportContext transport_context,
      ::fidl::Transaction* txn);

 private:
  static const ::fidl::internal::MethodEntry entries_[];
  static const ::fidl::internal::MethodEntry* entries_end_;
};
#endif  // __Fuchsia__
