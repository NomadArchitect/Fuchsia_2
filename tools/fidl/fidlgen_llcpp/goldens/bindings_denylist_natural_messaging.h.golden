// WARNING: This file is machine generated by fidlgen_llcpp.

#pragma once

#include <fidl/test.bindingsdenylist/cpp/markers.h>
#include <fidl/test.bindingsdenylist/cpp/natural_types.h>
#include <lib/fidl/cpp/client.h>
#include <lib/fidl/cpp/internal/codable_base.h>
#include <lib/fidl/cpp/internal/message_extensions.h>
#include <lib/fidl/cpp/internal/natural_client_messenger.h>
#include <lib/fidl/cpp/internal/natural_server_messenger.h>
#include <lib/fidl/cpp/natural_types.h>
#include <lib/fidl/cpp/unified_messaging.h>

namespace fidl {}  // namespace fidl
namespace test_bindingsdenylist {
__LOCAL extern "C" const fidl_type_t
    test_bindingsdenylist_OnlyLibfuzzerAndDepsLibfuzzerNeedsNonemptyProtocolRequestMessageTable;

__LOCAL extern "C" const fidl_type_t
    test_bindingsdenylist_OnlyLibfuzzerAndDepsLibfuzzerNeedsNonemptyProtocolResponseMessageTable;

#ifdef __Fuchsia__
}  // namespace test_bindingsdenylist

template <>
class ::fidl::Response<::test_bindingsdenylist::OnlyLibfuzzerAndDeps::
                           LibfuzzerNeedsNonemptyProtocol>
    final : public ::fidl::internal::MessageBase<
                ::fidl::Response<::test_bindingsdenylist::OnlyLibfuzzerAndDeps::
                                     LibfuzzerNeedsNonemptyProtocol>> {
 public:
  Response() = default;
  ~Response() = default;
  Response(Response&&) noexcept = default;
  Response& operator=(Response&&) noexcept = default;

 private:
};

template <>
struct ::fidl::internal::MessageTraits<
    ::fidl::Response<::test_bindingsdenylist::OnlyLibfuzzerAndDeps::
                         LibfuzzerNeedsNonemptyProtocol>>
    final {
 public:
  static constexpr bool kHasPayload = false;
};
namespace test_bindingsdenylist {}  // namespace test_bindingsdenylist
template <>
class ::fidl::internal::ClientCallbackTraits<
    ::test_bindingsdenylist::OnlyLibfuzzerAndDeps::
        LibfuzzerNeedsNonemptyProtocol>
    final {
 public:
  ClientCallbackTraits() = delete;
  using ResultCallback = ::fit::callback<void(
      ::fitx::result<
          ::fidl::Error,
          ::fidl::Response<::test_bindingsdenylist::OnlyLibfuzzerAndDeps::
                               LibfuzzerNeedsNonemptyProtocol>>&)>;
  using ResponseCallback = ::fit::callback<void(
      ::fidl::Response<::test_bindingsdenylist::OnlyLibfuzzerAndDeps::
                           LibfuzzerNeedsNonemptyProtocol>&)>;
};

template <>
class ::fidl::internal::NaturalClientImpl<
    ::test_bindingsdenylist::OnlyLibfuzzerAndDeps>
    final : public ::fidl::internal::NaturalClientBase {
 public:
  using NaturalClientBase::NaturalClientBase;
  void LibfuzzerNeedsNonemptyProtocol(
      ::fidl::ClientCallback<::test_bindingsdenylist::OnlyLibfuzzerAndDeps::
                                 LibfuzzerNeedsNonemptyProtocol>&& _callback)
      const;

  void LibfuzzerNeedsNonemptyProtocol(
      ::fidl::ClientResponseCallback<
          ::test_bindingsdenylist::OnlyLibfuzzerAndDeps::
              LibfuzzerNeedsNonemptyProtocol>&& _callback) const;
};
namespace test_bindingsdenylist {
#endif  // __Fuchsia__

}  // namespace test_bindingsdenylist
#ifdef __Fuchsia__

template <>
class ::fidl::internal::NaturalEventHandlerInterface<
    ::test_bindingsdenylist::OnlyLibfuzzerAndDeps> {
 public:
  NaturalEventHandlerInterface() = default;
  virtual ~NaturalEventHandlerInterface() = default;
};

template <>
class ::fidl::AsyncEventHandler<::test_bindingsdenylist::OnlyLibfuzzerAndDeps>
    : public ::fidl::internal::NaturalEventHandlerInterface<
          ::test_bindingsdenylist::OnlyLibfuzzerAndDeps>,
      public ::fidl::internal::AsyncEventHandler {
 public:
  AsyncEventHandler() = default;
};

template <>
class ::fidl::internal::NaturalEventDispatcher<
    ::test_bindingsdenylist::OnlyLibfuzzerAndDeps>
    final : public ::fidl::internal::IncomingEventDispatcher<
                ::fidl::AsyncEventHandler<
                    ::test_bindingsdenylist::OnlyLibfuzzerAndDeps>> {
 public:
  explicit NaturalEventDispatcher(
      ::fidl::AsyncEventHandler<::test_bindingsdenylist::OnlyLibfuzzerAndDeps>*
          event_handler)
      : IncomingEventDispatcher(event_handler) {}

 private:
  std::optional<::fidl::UnbindInfo> DispatchEvent(
      ::fidl::IncomingMessage& msg,
      internal::IncomingTransportContext transport_context) override;
};
#endif  // __Fuchsia__

#ifdef __Fuchsia__

template <>
class ::fidl::Request<::test_bindingsdenylist::OnlyLibfuzzerAndDeps::
                          LibfuzzerNeedsNonemptyProtocol>
    final : public ::fidl::internal::MessageBase<
                ::fidl::Request<::test_bindingsdenylist::OnlyLibfuzzerAndDeps::
                                    LibfuzzerNeedsNonemptyProtocol>> {
 public:
  Request() = default;
  ~Request() = default;
  Request(Request&&) noexcept = default;
  Request& operator=(Request&&) noexcept = default;

 private:
};

template <>
struct ::fidl::internal::MessageTraits<
    ::fidl::Request<::test_bindingsdenylist::OnlyLibfuzzerAndDeps::
                        LibfuzzerNeedsNonemptyProtocol>>
    final {
 public:
  static constexpr bool kHasPayload = false;
};
#endif  // __Fuchsia__

template <>
class ::fidl::internal::NaturalCompleterBase<
    ::test_bindingsdenylist::OnlyLibfuzzerAndDeps::
        LibfuzzerNeedsNonemptyProtocol> : public ::fidl::CompleterBase {
 public:
  void Reply();

 protected:
  using ::fidl::CompleterBase::CompleterBase;

 private:
  ::fidl::internal::NaturalServerMessenger messenger_{this};
};

template <>
struct ::fidl::internal::MethodTypes<
    ::test_bindingsdenylist::OnlyLibfuzzerAndDeps::
        LibfuzzerNeedsNonemptyProtocol> {
  using Completer = fidl::Completer<::fidl::internal::NaturalCompleterBase<
      ::test_bindingsdenylist::OnlyLibfuzzerAndDeps::
          LibfuzzerNeedsNonemptyProtocol>>;
};

template <>
class ::fidl::Server<::test_bindingsdenylist::OnlyLibfuzzerAndDeps>
    : public ::fidl::internal::IncomingMessageDispatcher {
 public:
  Server() = default;
  virtual ~Server() = default;

  // The FIDL protocol type that is implemented by this server.
  using _EnclosingProtocol = ::test_bindingsdenylist::OnlyLibfuzzerAndDeps;

  using LibfuzzerNeedsNonemptyProtocolRequest =
      ::fidl::Request<::test_bindingsdenylist::OnlyLibfuzzerAndDeps::
                          LibfuzzerNeedsNonemptyProtocol>;
  using LibfuzzerNeedsNonemptyProtocolCompleter =
      ::fidl::internal::NaturalCompleter<
          ::test_bindingsdenylist::OnlyLibfuzzerAndDeps::
              LibfuzzerNeedsNonemptyProtocol>;

  virtual void LibfuzzerNeedsNonemptyProtocol(
      LibfuzzerNeedsNonemptyProtocolRequest& request,
      LibfuzzerNeedsNonemptyProtocolCompleter::Sync& completer) = 0;

 private:
  void dispatch_message(
      ::fidl::IncomingMessage&& msg, ::fidl::Transaction* txn,
      ::fidl::internal::IncomingTransportContext transport_context) final;
};

#ifdef __Fuchsia__

template <>
struct ::fidl::internal::NaturalServerDispatcher<
    ::test_bindingsdenylist::OnlyLibfuzzerAndDeps>
    final {
  NaturalServerDispatcher() = delete;
  static void Dispatch(
      ::fidl::Server<::test_bindingsdenylist::OnlyLibfuzzerAndDeps>* impl,
      ::fidl::IncomingMessage&& msg,
      internal::IncomingTransportContext transport_context,
      ::fidl::Transaction* txn);

 private:
  static const ::fidl::internal::MethodEntry entries_[];
  static const ::fidl::internal::MethodEntry* entries_end_;
};
#endif  // __Fuchsia__

#ifdef __Fuchsia__

template <>
class ::fidl::internal::NaturalClientImpl<
    ::test_bindingsdenylist::OnlyCppAndDeps>
    final : public ::fidl::internal::NaturalClientBase {
 public:
  using NaturalClientBase::NaturalClientBase;
};
#endif  // __Fuchsia__

#ifdef __Fuchsia__

template <>
class ::fidl::internal::NaturalEventHandlerInterface<
    ::test_bindingsdenylist::OnlyCppAndDeps> {
 public:
  NaturalEventHandlerInterface() = default;
  virtual ~NaturalEventHandlerInterface() = default;
};

template <>
class ::fidl::AsyncEventHandler<::test_bindingsdenylist::OnlyCppAndDeps>
    : public ::fidl::internal::NaturalEventHandlerInterface<
          ::test_bindingsdenylist::OnlyCppAndDeps>,
      public ::fidl::internal::AsyncEventHandler {
 public:
  AsyncEventHandler() = default;
};

template <>
class ::fidl::internal::NaturalEventDispatcher<
    ::test_bindingsdenylist::OnlyCppAndDeps>
    final
    : public ::fidl::internal::IncomingEventDispatcher<
          ::fidl::AsyncEventHandler<::test_bindingsdenylist::OnlyCppAndDeps>> {
 public:
  explicit NaturalEventDispatcher(
      ::fidl::AsyncEventHandler<::test_bindingsdenylist::OnlyCppAndDeps>*
          event_handler)
      : IncomingEventDispatcher(event_handler) {}

 private:
  std::optional<::fidl::UnbindInfo> DispatchEvent(
      ::fidl::IncomingMessage& msg,
      internal::IncomingTransportContext transport_context) override;
};
#endif  // __Fuchsia__

template <>
class ::fidl::Server<::test_bindingsdenylist::OnlyCppAndDeps>
    : public ::fidl::internal::IncomingMessageDispatcher {
 public:
  Server() = default;
  virtual ~Server() = default;

  // The FIDL protocol type that is implemented by this server.
  using _EnclosingProtocol = ::test_bindingsdenylist::OnlyCppAndDeps;

 private:
  void dispatch_message(
      ::fidl::IncomingMessage&& msg, ::fidl::Transaction* txn,
      ::fidl::internal::IncomingTransportContext transport_context) final;
};

#ifdef __Fuchsia__

template <>
struct ::fidl::internal::NaturalServerDispatcher<
    ::test_bindingsdenylist::OnlyCppAndDeps>
    final {
  NaturalServerDispatcher() = delete;
  static void Dispatch(
      ::fidl::Server<::test_bindingsdenylist::OnlyCppAndDeps>* impl,
      ::fidl::IncomingMessage&& msg,
      internal::IncomingTransportContext transport_context,
      ::fidl::Transaction* txn);

 private:
  static const ::fidl::internal::MethodEntry entries_[];
  static const ::fidl::internal::MethodEntry* entries_end_;
};
#endif  // __Fuchsia__
