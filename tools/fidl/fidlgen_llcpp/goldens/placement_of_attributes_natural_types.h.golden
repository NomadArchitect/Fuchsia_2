// WARNING: This file is machine generated by fidlgen.

#pragma once

#include <fidl/test.placementofattributes/cpp/common_types.h>
#include <fidl/test.placementofattributes/cpp/markers.h>
#include <lib/fidl/cpp/coding_traits.h>
#include <lib/fidl/cpp/internal/codable_base.h>
#include <lib/fidl/cpp/unified_messaging.h>

#include <cinttypes>
#include <string>

#ifdef __Fuchsia__

#include <lib/zx/channel.h>

#endif  // __Fuchsia__

#include <fidl/test.exampleusing/cpp/natural_types.h>

namespace test_placementofattributes {
class ExampleStruct;

class ExampleProtocolMethodRequest;

class ExampleTable;

class ExampleXUnion;

class ExampleUnion;

extern "C" const fidl_type_t test_placementofattributes_ExampleXUnionTable;

class ExampleXUnion final {
 public:
  // TODO: share union tag types between wire & natural.
  enum class Tag : fidl_union_tag_t {
    kVariant = 1,  // 0x1
    kUnknown = ::std::numeric_limits<::fidl_union_tag_t>::max(),
  };

 private:
  using Storage = cpp17::variant<cpp17::monostate, uint32_t>;
  std::shared_ptr<Storage> storage_;
  std::shared_ptr<Storage> CloneStorage() const;
  friend struct ::fidl::internal::NaturalUnionCodingTraits<
      ::test_placementofattributes::ExampleXUnion>;
  static constexpr std::array<std::optional<::fidl::HandleInformation>, 2>
      Members = {std::nullopt, std::nullopt};

  explicit ExampleXUnion(std::shared_ptr<Storage> storage)
      : storage_(std::move(storage)) {}

  static constexpr size_t TagToIndex(
      ::test_placementofattributes::ExampleXUnion::Tag tag) {
    switch (tag) {
      case ::test_placementofattributes::ExampleXUnion::Tag::kVariant:
        return 1;
      case ::test_placementofattributes::ExampleXUnion::Tag::kUnknown:
        return 0;
    }
  }

  static constexpr ::test_placementofattributes::ExampleXUnion::Tag IndexToTag(
      size_t index) {
    switch (index) {
      case 1:
        return ::test_placementofattributes::ExampleXUnion::Tag::kVariant;
      default:
        return ::test_placementofattributes::ExampleXUnion::Tag::kUnknown;
    }
  }

 public:
  // Create an unknown value of this union.
  ExampleXUnion() : storage_(std::make_shared<Storage>()) {}

  ExampleXUnion(ExampleXUnion&&) noexcept = default;
  ExampleXUnion& operator=(ExampleXUnion&&) noexcept = default;
  ExampleXUnion(const ExampleXUnion& other) noexcept
      : ExampleXUnion(other.CloneStorage()) {}
  ExampleXUnion& operator=(const ExampleXUnion& other) noexcept {
    storage_ = other.CloneStorage();
    return *this;
  }

  constexpr ::test_placementofattributes::ExampleXUnion::Tag Which() const {
    return ExampleXUnion::IndexToTag(storage_->index());
  }
  static ExampleXUnion WithVariant(uint32_t val) {
    return ExampleXUnion(std::make_shared<Storage>(
        std::in_place_index_t<TagToIndex(
            ::test_placementofattributes::ExampleXUnion::Tag::kVariant)>{},
        std::move(val)));
  }

  const ::fidl::internal::UnionMemberView<1, Storage> variant() const {
    return ::fidl::internal::UnionMemberView<1, Storage>(storage_);
  }
  ::fidl::internal::UnionMemberView<1, Storage> variant() {
    return ::fidl::internal::UnionMemberView<1, Storage>(storage_);
  }
};

extern "C" const fidl_type_t test_placementofattributes_ExampleUnionTable;

class ExampleUnion final {
 public:
  // TODO: share union tag types between wire & natural.
  enum class Tag : fidl_union_tag_t {
    kVariant = 1,  // 0x1
  };

 private:
  using Storage = cpp17::variant<cpp17::monostate, uint32_t>;
  std::shared_ptr<Storage> storage_;
  std::shared_ptr<Storage> CloneStorage() const;
  friend struct ::fidl::internal::NaturalUnionCodingTraits<
      ::test_placementofattributes::ExampleUnion>;
  static constexpr std::array<std::optional<::fidl::HandleInformation>, 2>
      Members = {std::nullopt, std::nullopt};

  explicit ExampleUnion(std::shared_ptr<Storage> storage)
      : storage_(std::move(storage)) {}

  static constexpr size_t TagToIndex(
      ::test_placementofattributes::ExampleUnion::Tag tag) {
    switch (tag) {
      case ::test_placementofattributes::ExampleUnion::Tag::kVariant:
        return 1;
    }
  }

  static constexpr ::test_placementofattributes::ExampleUnion::Tag IndexToTag(
      size_t index) {
    switch (index) {
      case 1:
        return ::test_placementofattributes::ExampleUnion::Tag::kVariant;
      // TODO: what's the right thing to do here?
      default:
        return ::test_placementofattributes::ExampleUnion::Tag::kVariant;
    }
  }

 public:
  // Create an unknown value of this union.
  ExampleUnion() : storage_(std::make_shared<Storage>()) {}

  ExampleUnion(ExampleUnion&&) noexcept = default;
  ExampleUnion& operator=(ExampleUnion&&) noexcept = default;
  ExampleUnion(const ExampleUnion& other) noexcept
      : ExampleUnion(other.CloneStorage()) {}
  ExampleUnion& operator=(const ExampleUnion& other) noexcept {
    storage_ = other.CloneStorage();
    return *this;
  }

  constexpr ::test_placementofattributes::ExampleUnion::Tag Which() const {
    return ExampleUnion::IndexToTag(storage_->index());
  }
  static ExampleUnion WithVariant(uint32_t val) {
    return ExampleUnion(std::make_shared<Storage>(
        std::in_place_index_t<TagToIndex(
            ::test_placementofattributes::ExampleUnion::Tag::kVariant)>{},
        std::move(val)));
  }

  const ::fidl::internal::UnionMemberView<1, Storage> variant() const {
    return ::fidl::internal::UnionMemberView<1, Storage>(storage_);
  }
  ::fidl::internal::UnionMemberView<1, Storage> variant() {
    return ::fidl::internal::UnionMemberView<1, Storage>(storage_);
  }
};

extern "C" const fidl_type_t test_placementofattributes_ExampleTableTable;

class ExampleTable final {
 public:
  struct Storage final {
    ::cpp17::optional<uint32_t> member{};
  };

  ExampleTable(Storage storage) noexcept : storage_(std::move(storage)) {}
  ExampleTable() noexcept = default;
  ExampleTable(ExampleTable&&) noexcept = default;
  ExampleTable& operator=(ExampleTable&&) noexcept = default;
  ExampleTable(const ExampleTable& other) noexcept
      : ExampleTable(other.CloneStorage()) {}
  ExampleTable& operator=(const ExampleTable& other) noexcept {
    storage_ = other.CloneStorage();
    return *this;
  }

  bool IsEmpty() const { return !(storage_.member.has_value()); }

  size_t MaxOrdinal() const;

  const cpp17::optional<uint32_t>& member() const { return storage_.member; }
  ::cpp17::optional<uint32_t>& member() { return storage_.member; }

 private:
  // TODO(https://fxbug.dev/91252): Box the storage.
  Storage storage_;
  Storage CloneStorage() const;
  friend struct ::fidl::internal::NaturalTableCodingTraits<
      ::test_placementofattributes::ExampleTable>;
  static constexpr auto Members =
      std::make_tuple(std::make_tuple(1, &Storage::member, std::nullopt));
};

extern "C" const fidl_type_t test_placementofattributes_ExampleStructTable;

class ExampleStruct final
    : public ::fidl::internal::CodableBase<ExampleStruct> {
 private:
  friend ::fidl::internal::CodableBase<ExampleStruct>;
  friend ::fidl::CodingTraits<ExampleStruct>;
  ExampleStruct(::fidl::Decoder& decoder);
  template <typename Payload>
  friend auto ::fidl::internal::EncodeTransactionalMessageWithoutValidating(
      ::fidl::Encoder& encoder, Payload&& payload)
      -> ::fidl::HLCPPOutgoingMessage;
  void EncodeWithoutValidating(::fidl::Encoder& encoder, size_t offset);

 public:
  struct Storage final {
    uint32_t member{};
  };

  ExampleStruct(Storage storage) noexcept : storage_(std::move(storage)) {}
  ExampleStruct(uint32_t member) noexcept
      : storage_({.member = std::move(member)}) {}
  ExampleStruct() : ExampleStruct(Storage{}) {}

  ExampleStruct(ExampleStruct&&) noexcept = default;
  ExampleStruct& operator=(ExampleStruct&&) noexcept = default;
  ExampleStruct(const ExampleStruct& other) noexcept
      : ExampleStruct(other.CloneStorage()) {}
  ExampleStruct& operator=(const ExampleStruct& other) noexcept {
    storage_ = other.CloneStorage();
    return *this;
  }

  uint32_t member() const { return storage_.member; }

  uint32_t& member() { return storage_.member; }

 private:
  Storage storage_;
  Storage CloneStorage() const;
};

extern "C" const fidl_type_t
    test_placementofattributes_ExampleProtocolMethodRequestTable;

class ExampleProtocolMethodRequest final
    : public ::fidl::internal::CodableBase<ExampleProtocolMethodRequest> {
 private:
  friend ::fidl::internal::CodableBase<ExampleProtocolMethodRequest>;
  friend ::fidl::CodingTraits<ExampleProtocolMethodRequest>;
  ExampleProtocolMethodRequest(::fidl::Decoder& decoder);
  template <typename Payload>
  friend auto ::fidl::internal::EncodeTransactionalMessageWithoutValidating(
      ::fidl::Encoder& encoder, Payload&& payload)
      -> ::fidl::HLCPPOutgoingMessage;
  void EncodeWithoutValidating(::fidl::Encoder& encoder, size_t offset);

 public:
  struct Storage final {
    ::test_exampleusing::Empty arg{};
  };

  ExampleProtocolMethodRequest(Storage storage) noexcept
      : storage_(std::move(storage)) {}
  ExampleProtocolMethodRequest(::test_exampleusing::Empty arg) noexcept
      : storage_({.arg = std::move(arg)}) {}
  ExampleProtocolMethodRequest() : ExampleProtocolMethodRequest(Storage{}) {}

  ExampleProtocolMethodRequest(ExampleProtocolMethodRequest&&) noexcept =
      default;
  ExampleProtocolMethodRequest& operator=(
      ExampleProtocolMethodRequest&&) noexcept = default;
  ExampleProtocolMethodRequest(
      const ExampleProtocolMethodRequest& other) noexcept
      : ExampleProtocolMethodRequest(other.CloneStorage()) {}
  ExampleProtocolMethodRequest& operator=(
      const ExampleProtocolMethodRequest& other) noexcept {
    storage_ = other.CloneStorage();
    return *this;
  }

  const ::test_exampleusing::Empty& arg() const { return storage_.arg; }

  ::test_exampleusing::Empty& arg() { return storage_.arg; }

 private:
  Storage storage_;
  Storage CloneStorage() const;
};

constexpr uint32_t EXAMPLE_CONST = 0u;

}  // namespace test_placementofattributes
namespace fidl {

#ifdef __Fuchsia__
extern "C" const fidl_type_t test_placementofattributes_ExampleStructTable;

template <>
struct IsFidlType<::test_placementofattributes::ExampleStruct>
    : public std::true_type {};

template <>
struct ::fidl::internal::TypeTraits<::test_placementofattributes::ExampleStruct>
    final {
 public:
  static constexpr const fidl_type_t* kCodingTable =
      &test_placementofattributes_ExampleStructTable;
};

template <>
struct CodingTraits<::test_placementofattributes::ExampleStruct> {
  static constexpr size_t inline_size_v1_no_ee = 4;
  static constexpr size_t inline_size_v2 = 4;

  template <class EncoderImpl>
  static void Encode(
      EncoderImpl* encoder, ::test_placementofattributes::ExampleStruct* value,
      size_t offset,
      cpp17::optional<HandleInformation> maybe_handle_info = cpp17::nullopt) {
    [[maybe_unused]] uint32_t field_offset;
    field_offset =
        encoder->wire_format() == ::fidl::internal::WireFormatVersion::kV1 ? 0
                                                                           : 0;
    ::fidl::Encode(encoder, &value->storage_.member, offset + field_offset);
  }

  template <typename DecoderImpl>
  static void Decode(DecoderImpl* decoder,
                     ::test_placementofattributes::ExampleStruct* value,
                     size_t offset) {
    ::fidl::Decode(decoder, &value->storage_.member, offset + 0);
  }
};
#endif  // __Fuchsia__

#ifdef __Fuchsia__
extern "C" const fidl_type_t
    test_placementofattributes_ExampleProtocolMethodRequestTable;

template <>
struct IsFidlType<::test_placementofattributes::ExampleProtocolMethodRequest>
    : public std::true_type {};

template <>
struct ::fidl::internal::TypeTraits<
    ::test_placementofattributes::ExampleProtocolMethodRequest>
    final {
 public:
  static constexpr const fidl_type_t* kCodingTable =
      &test_placementofattributes_ExampleProtocolMethodRequestTable;
};

template <>
struct CodingTraits<
    ::test_placementofattributes::ExampleProtocolMethodRequest> {
  static constexpr size_t inline_size_v1_no_ee = 8;
  static constexpr size_t inline_size_v2 = 8;

  template <class EncoderImpl>
  static void Encode(
      EncoderImpl* encoder,
      ::test_placementofattributes::ExampleProtocolMethodRequest* value,
      size_t offset,
      cpp17::optional<HandleInformation> maybe_handle_info = cpp17::nullopt) {
    [[maybe_unused]] uint32_t field_offset;
    field_offset =
        encoder->wire_format() == ::fidl::internal::WireFormatVersion::kV1 ? 0
                                                                           : 0;
    ::fidl::Encode(encoder, &value->storage_.arg, offset + field_offset);
  }

  template <typename DecoderImpl>
  static void Decode(
      DecoderImpl* decoder,
      ::test_placementofattributes::ExampleProtocolMethodRequest* value,
      size_t offset) {
    ::fidl::Decode(decoder, &value->storage_.arg, offset + 0);
  }
};
#endif  // __Fuchsia__

template <>
struct IsFidlType<::test_placementofattributes::ExampleTable>
    : public std::true_type {};

template <>
struct CodingTraits<::test_placementofattributes::ExampleTable>
    : public ::fidl::internal::NaturalTableCodingTraits<
          ::test_placementofattributes::ExampleTable> {};

template <>
struct IsFidlType<::test_placementofattributes::ExampleXUnion>
    : public std::true_type {};

template <>
struct CodingTraits<::test_placementofattributes::ExampleXUnion> final
    : public ::fidl::internal::NaturalUnionCodingTraits<
          ::test_placementofattributes::ExampleXUnion> {};

template <>
struct IsFidlType<::test_placementofattributes::ExampleUnion>
    : public std::true_type {};

template <>
struct CodingTraits<::test_placementofattributes::ExampleUnion> final
    : public ::fidl::internal::NaturalUnionCodingTraits<
          ::test_placementofattributes::ExampleUnion> {};

template <>
struct CodingTraits<::test_placementofattributes::ExampleBits> {
  static constexpr size_t inline_size_v1_no_ee = sizeof(uint32_t);
  static constexpr size_t inline_size_v2 = sizeof(uint32_t);

  template <class EncoderImpl>
  static void Encode(
      EncoderImpl* encoder, ::test_placementofattributes::ExampleBits* value,
      size_t offset,
      cpp17::optional<HandleInformation> maybe_handle_info = cpp17::nullopt) {
    // TODO: encode
  }
  template <typename DecoderImpl>
  static void Decode(DecoderImpl* decoder,
                     ::test_placementofattributes::ExampleBits* value,
                     size_t offset) {
    // TODO: decode
  }
};

template <>
struct CodingTraits<::test_placementofattributes::ExampleEnum> {
  static constexpr size_t inline_size_v1_no_ee = sizeof(uint32_t);
  static constexpr size_t inline_size_v2 = sizeof(uint32_t);

  template <class EncoderImpl>
  static void Encode(
      EncoderImpl* encoder, ::test_placementofattributes::ExampleEnum* value,
      size_t offset,
      cpp17::optional<HandleInformation> maybe_handle_info = cpp17::nullopt) {
    // TODO: encode
  }
  template <typename DecoderImpl>
  static void Decode(DecoderImpl* decoder,
                     ::test_placementofattributes::ExampleEnum* value,
                     size_t offset) {
    // TODO: decode
  }
};

}  // namespace fidl
