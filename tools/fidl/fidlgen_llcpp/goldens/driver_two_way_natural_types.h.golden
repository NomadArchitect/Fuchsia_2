// WARNING: This file is machine generated by fidlgen.

#pragma once

#include <fidl/test.drivertwoway/cpp/common_types.h>
#include <fidl/test.drivertwoway/cpp/markers.h>
#include <lib/fidl/cpp/coding_traits.h>
#include <lib/fidl/cpp/internal/codable_base.h>
#include <lib/fidl/cpp/unified_messaging.h>

#include <cinttypes>
#include <string>

#ifdef __Fuchsia__

#include <lib/zx/channel.h>

#endif  // __Fuchsia__

namespace test_drivertwoway {
class TwoWayAddTopResponse;

class TwoWayAddRequest;

extern "C" const fidl_type_t test_drivertwoway_TwoWayAddTopResponseTable;

class TwoWayAddTopResponse final
    : public ::fidl::internal::CodableBase<TwoWayAddTopResponse> {
 private:
  friend ::fidl::internal::CodableBase<TwoWayAddTopResponse>;
  friend ::fidl::CodingTraits<TwoWayAddTopResponse>;
  TwoWayAddTopResponse(::fidl::Decoder& decoder);
  template <typename Payload>
  friend auto ::fidl::internal::EncodeTransactionalMessageWithoutValidating(
      ::fidl::Encoder& encoder, Payload&& payload)
      -> ::fidl::HLCPPOutgoingMessage;
  void EncodeWithoutValidating(::fidl::Encoder& encoder, size_t offset);

 public:
  struct Storage final {
    uint16_t sum{};
  };

  TwoWayAddTopResponse(Storage storage) noexcept
      : storage_(std::move(storage)) {}
  TwoWayAddTopResponse(uint16_t sum) noexcept
      : storage_({.sum = std::move(sum)}) {}
  TwoWayAddTopResponse() : TwoWayAddTopResponse(Storage{}) {}

  TwoWayAddTopResponse(TwoWayAddTopResponse&&) noexcept = default;
  TwoWayAddTopResponse& operator=(TwoWayAddTopResponse&&) noexcept = default;
  TwoWayAddTopResponse(const TwoWayAddTopResponse& other) noexcept
      : TwoWayAddTopResponse(other.CloneStorage()) {}
  TwoWayAddTopResponse& operator=(const TwoWayAddTopResponse& other) noexcept {
    storage_ = other.CloneStorage();
    return *this;
  }

  uint16_t sum() const { return storage_.sum; }

  uint16_t& sum() { return storage_.sum; }

 private:
  Storage storage_;
  Storage CloneStorage() const;
};

extern "C" const fidl_type_t test_drivertwoway_TwoWayAddRequestTable;

class TwoWayAddRequest final
    : public ::fidl::internal::CodableBase<TwoWayAddRequest> {
 private:
  friend ::fidl::internal::CodableBase<TwoWayAddRequest>;
  friend ::fidl::CodingTraits<TwoWayAddRequest>;
  TwoWayAddRequest(::fidl::Decoder& decoder);
  template <typename Payload>
  friend auto ::fidl::internal::EncodeTransactionalMessageWithoutValidating(
      ::fidl::Encoder& encoder, Payload&& payload)
      -> ::fidl::HLCPPOutgoingMessage;
  void EncodeWithoutValidating(::fidl::Encoder& encoder, size_t offset);

 public:
  struct Storage final {
    uint16_t addend1{};
    uint16_t addend2{};
  };

  TwoWayAddRequest(Storage storage) noexcept : storage_(std::move(storage)) {}
  TwoWayAddRequest(uint16_t addend1, uint16_t addend2) noexcept
      : storage_(
            {.addend1 = std::move(addend1), .addend2 = std::move(addend2)}) {}
  TwoWayAddRequest() : TwoWayAddRequest(Storage{}) {}

  TwoWayAddRequest(TwoWayAddRequest&&) noexcept = default;
  TwoWayAddRequest& operator=(TwoWayAddRequest&&) noexcept = default;
  TwoWayAddRequest(const TwoWayAddRequest& other) noexcept
      : TwoWayAddRequest(other.CloneStorage()) {}
  TwoWayAddRequest& operator=(const TwoWayAddRequest& other) noexcept {
    storage_ = other.CloneStorage();
    return *this;
  }

  uint16_t addend1() const { return storage_.addend1; }

  uint16_t& addend1() { return storage_.addend1; }

  uint16_t addend2() const { return storage_.addend2; }

  uint16_t& addend2() { return storage_.addend2; }

 private:
  Storage storage_;
  Storage CloneStorage() const;
};

}  // namespace test_drivertwoway
namespace fidl {

#ifdef __Fuchsia__
extern "C" const fidl_type_t test_drivertwoway_TwoWayAddTopResponseTable;

template <>
struct IsFidlType<::test_drivertwoway::TwoWayAddTopResponse>
    : public std::true_type {};

template <>
struct ::fidl::internal::TypeTraits<::test_drivertwoway::TwoWayAddTopResponse>
    final {
 public:
  static constexpr const fidl_type_t* kCodingTable =
      &test_drivertwoway_TwoWayAddTopResponseTable;
};

template <>
struct CodingTraits<::test_drivertwoway::TwoWayAddTopResponse> {
  static constexpr size_t inline_size_v1_no_ee = 8;
  static constexpr size_t inline_size_v2 = 8;

  template <class EncoderImpl>
  static void Encode(
      EncoderImpl* encoder, ::test_drivertwoway::TwoWayAddTopResponse* value,
      size_t offset,
      cpp17::optional<HandleInformation> maybe_handle_info = cpp17::nullopt) {
    [[maybe_unused]] uint32_t field_offset;
    field_offset =
        encoder->wire_format() == ::fidl::internal::WireFormatVersion::kV1 ? 0
                                                                           : 0;
    ::fidl::Encode(encoder, &value->storage_.sum, offset + field_offset);
  }

  template <typename DecoderImpl>
  static void Decode(DecoderImpl* decoder,
                     ::test_drivertwoway::TwoWayAddTopResponse* value,
                     size_t offset) {
    ::fidl::Decode(decoder, &value->storage_.sum, offset + 0);
  }
};
#endif  // __Fuchsia__

#ifdef __Fuchsia__
extern "C" const fidl_type_t test_drivertwoway_TwoWayAddRequestTable;

template <>
struct IsFidlType<::test_drivertwoway::TwoWayAddRequest>
    : public std::true_type {};

template <>
struct ::fidl::internal::TypeTraits<::test_drivertwoway::TwoWayAddRequest>
    final {
 public:
  static constexpr const fidl_type_t* kCodingTable =
      &test_drivertwoway_TwoWayAddRequestTable;
};

template <>
struct CodingTraits<::test_drivertwoway::TwoWayAddRequest> {
  static constexpr size_t inline_size_v1_no_ee = 8;
  static constexpr size_t inline_size_v2 = 8;

  template <class EncoderImpl>
  static void Encode(
      EncoderImpl* encoder, ::test_drivertwoway::TwoWayAddRequest* value,
      size_t offset,
      cpp17::optional<HandleInformation> maybe_handle_info = cpp17::nullopt) {
    [[maybe_unused]] uint32_t field_offset;
    field_offset =
        encoder->wire_format() == ::fidl::internal::WireFormatVersion::kV1 ? 0
                                                                           : 0;
    ::fidl::Encode(encoder, &value->storage_.addend1, offset + field_offset);
    field_offset =
        encoder->wire_format() == ::fidl::internal::WireFormatVersion::kV1 ? 2
                                                                           : 2;
    ::fidl::Encode(encoder, &value->storage_.addend2, offset + field_offset);
  }

  template <typename DecoderImpl>
  static void Decode(DecoderImpl* decoder,
                     ::test_drivertwoway::TwoWayAddRequest* value,
                     size_t offset) {
    ::fidl::Decode(decoder, &value->storage_.addend1, offset + 0);
    ::fidl::Decode(decoder, &value->storage_.addend2, offset + 2);
  }
};
#endif  // __Fuchsia__

}  // namespace fidl
