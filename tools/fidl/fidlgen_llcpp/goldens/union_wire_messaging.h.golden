// WARNING: This file is machine generated by fidlgen.

#pragma once

#include <fidl/test.union/cpp/markers.h>
#include <fidl/test.union/cpp/wire_types.h>
#include <lib/fidl/llcpp/wire_messaging.h>

#ifdef __Fuchsia__

#include <lib/fidl/llcpp/client.h>
#include <lib/fidl/llcpp/connect_service.h>
#include <lib/fidl/llcpp/server.h>
#include <lib/fidl/llcpp/service_handler_interface.h>
#include <lib/fidl/llcpp/sync_call.h>

#endif  // __Fuchsia__

namespace test_union {
class TestProtocol;

__LOCAL extern "C" const fidl_type_t
    test_union_TestProtocolStrictXUnionHenceResponseMayBeStackAllocatedRequestMessageTable;

__LOCAL extern "C" const fidl_type_t
    test_union_TestProtocolStrictXUnionHenceResponseMayBeStackAllocatedResponseMessageTable;

__LOCAL extern "C" const fidl_type_t
    test_union_TestProtocolFlexibleXUnionHenceResponseMustBeHeapAllocatedRequestMessageTable;

__LOCAL extern "C" const fidl_type_t
    test_union_TestProtocolFlexibleXUnionHenceResponseMustBeHeapAllocatedResponseMessageTable;
}  // namespace test_union
template <>
struct ::fidl::internal::WireOrdinal<
    ::test_union::TestProtocol::StrictXUnionHenceResponseMayBeStackAllocated>
    final {
  static constexpr uint64_t value = 582913180652179677lu;
};
template <>
struct ::fidl::internal::WireOrdinal<
    ::test_union::TestProtocol::FlexibleXUnionHenceResponseMustBeHeapAllocated>
    final {
  static constexpr uint64_t value = 7698084639218919941lu;
};

namespace test_union {}  // namespace test_union
#ifdef __Fuchsia__

template <>
struct ::fidl::internal::ProtocolDetails<::test_union::TestProtocol> {};
#endif  // __Fuchsia__

#ifdef __Fuchsia__

template <>
struct ::fidl::internal::WireServerDispatcher<::test_union::TestProtocol>
    final {
  WireServerDispatcher() = delete;
  static ::fidl::DispatchResult TryDispatch(
      ::fidl::WireServer<::test_union::TestProtocol>* impl,
      ::fidl::IncomingMessage& msg, ::fidl::Transaction* txn);
  static void Dispatch(::fidl::WireServer<::test_union::TestProtocol>* impl,
                       ::fidl::IncomingMessage&& msg, ::fidl::Transaction* txn);

 private:
  static const ::fidl::internal::MethodEntry entries_[];
  static const ::fidl::internal::MethodEntry* entries_end_;
};
#endif  // __Fuchsia__

template <>
struct ::fidl::WireRequest<
    ::test_union::TestProtocol::StrictXUnionHenceResponseMayBeStackAllocated>
    final {
  FIDL_ALIGNDECL
  fidl_message_header_t _hdr;

  WireRequest() { _InitHeader(); }

  static constexpr const fidl_type_t* Type =
      &::fidl::_llcpp_coding_AnyZeroArgMessageTable;
  static constexpr uint32_t MaxNumHandles = 0;
  static constexpr uint32_t PrimarySize = 16;
  static constexpr uint32_t PrimarySizeV1 = 16;
  static constexpr uint32_t MaxOutOfLine = 0;
  static constexpr uint32_t MaxOutOfLineV1 = 0;
  static constexpr bool HasFlexibleEnvelope = false;
  static constexpr bool HasPointer = false;
  static constexpr ::fidl::internal::TransactionalMessageKind MessageKind =
      ::fidl::internal::TransactionalMessageKind::kRequest;
  using ResponseType = ::fidl::WireResponse<
      ::test_union::TestProtocol::StrictXUnionHenceResponseMayBeStackAllocated>;

  class UnownedEncodedMessage;
  class OwnedEncodedMessage;

 public:
  class DecodedMessage;

 private:
  void _InitHeader();
};
template <>
struct ::fidl::WireResponse<
    ::test_union::TestProtocol::StrictXUnionHenceResponseMayBeStackAllocated>
    final {
  FIDL_ALIGNDECL
  fidl_message_header_t _hdr;
  ::test_union::wire::StrictBoundedXUnion xu;

  explicit WireResponse(::test_union::wire::StrictBoundedXUnion xu) : xu(xu) {
    _InitHeader();
  }
  WireResponse() { _InitHeader(); }

  static constexpr const fidl_type_t* Type =
      &::test_union::
          test_union_TestProtocolStrictXUnionHenceResponseMayBeStackAllocatedResponseMessageTable;
  static constexpr uint32_t MaxNumHandles = 0;
  static constexpr uint32_t PrimarySize = 32;
  static constexpr uint32_t PrimarySizeV1 = 40;
  static constexpr uint32_t MaxOutOfLine = 32;
  static constexpr uint32_t MaxOutOfLineV1 = 32;
  static constexpr bool HasFlexibleEnvelope = false;
  static constexpr bool HasPointer = true;
  static constexpr ::fidl::internal::TransactionalMessageKind MessageKind =
      ::fidl::internal::TransactionalMessageKind::kResponse;

  class UnownedEncodedMessage;
  class OwnedEncodedMessage;

 public:
  class DecodedMessage;

 private:
  void _InitHeader();
};
template <>
struct ::fidl::WireRequest<
    ::test_union::TestProtocol::FlexibleXUnionHenceResponseMustBeHeapAllocated>
    final {
  FIDL_ALIGNDECL
  fidl_message_header_t _hdr;

  WireRequest() { _InitHeader(); }

  static constexpr const fidl_type_t* Type =
      &::fidl::_llcpp_coding_AnyZeroArgMessageTable;
  static constexpr uint32_t MaxNumHandles = 0;
  static constexpr uint32_t PrimarySize = 16;
  static constexpr uint32_t PrimarySizeV1 = 16;
  static constexpr uint32_t MaxOutOfLine = 0;
  static constexpr uint32_t MaxOutOfLineV1 = 0;
  static constexpr bool HasFlexibleEnvelope = false;
  static constexpr bool HasPointer = false;
  static constexpr ::fidl::internal::TransactionalMessageKind MessageKind =
      ::fidl::internal::TransactionalMessageKind::kRequest;
  using ResponseType =
      ::fidl::WireResponse<::test_union::TestProtocol::
                               FlexibleXUnionHenceResponseMustBeHeapAllocated>;

  class UnownedEncodedMessage;
  class OwnedEncodedMessage;

 public:
  class DecodedMessage;

 private:
  void _InitHeader();
};
template <>
struct ::fidl::WireResponse<
    ::test_union::TestProtocol::FlexibleXUnionHenceResponseMustBeHeapAllocated>
    final {
  FIDL_ALIGNDECL
  fidl_message_header_t _hdr;
  ::test_union::wire::OlderSimpleUnion xu;

  explicit WireResponse(::test_union::wire::OlderSimpleUnion xu) : xu(xu) {
    _InitHeader();
  }
  WireResponse() { _InitHeader(); }

  static constexpr const fidl_type_t* Type =
      &::test_union::
          test_union_TestProtocolFlexibleXUnionHenceResponseMustBeHeapAllocatedResponseMessageTable;
  static constexpr uint32_t MaxNumHandles = 0;
  static constexpr uint32_t PrimarySize = 32;
  static constexpr uint32_t PrimarySizeV1 = 40;
  static constexpr uint32_t MaxOutOfLine = 8;
  static constexpr uint32_t MaxOutOfLineV1 = 8;
  static constexpr bool HasFlexibleEnvelope = true;
  static constexpr bool HasPointer = true;
  static constexpr ::fidl::internal::TransactionalMessageKind MessageKind =
      ::fidl::internal::TransactionalMessageKind::kResponse;

  class UnownedEncodedMessage;
  class OwnedEncodedMessage;

 public:
  class DecodedMessage;

 private:
  void _InitHeader();
};
#ifdef __Fuchsia__

template <>
class ::fidl::WireResult<
    ::test_union::TestProtocol::StrictXUnionHenceResponseMayBeStackAllocated>
    final : public ::fidl::Result {
 public:
  WireResult(::fidl::UnownedClientEnd<::test_union::TestProtocol> client,
             ::fidl::WireRequest<
                 ::test_union::TestProtocol::
                     StrictXUnionHenceResponseMayBeStackAllocated>* request);
  WireResult(::fidl::UnownedClientEnd<::test_union::TestProtocol> client,
             ::fidl::WireRequest<
                 ::test_union::TestProtocol::
                     StrictXUnionHenceResponseMayBeStackAllocated>* request,
             zx_time_t _deadline);
  explicit WireResult(const ::fidl::Result& result) : ::fidl::Result(result) {}
  WireResult(WireResult&&) = delete;
  WireResult(const WireResult&) = delete;
  WireResult* operator=(WireResult&&) = delete;
  WireResult* operator=(const WireResult&) = delete;
  ~WireResult() = default;

  ::fidl::WireResponse<
      ::test_union::TestProtocol::StrictXUnionHenceResponseMayBeStackAllocated>*
  Unwrap() {
    ZX_DEBUG_ASSERT(ok());
    return reinterpret_cast<::fidl::WireResponse<
        ::test_union::TestProtocol::
            StrictXUnionHenceResponseMayBeStackAllocated>*>(bytes_.data());
  }
  const ::fidl::WireResponse<
      ::test_union::TestProtocol::StrictXUnionHenceResponseMayBeStackAllocated>*
  Unwrap() const {
    ZX_DEBUG_ASSERT(ok());
    return reinterpret_cast<const ::fidl::WireResponse<
        ::test_union::TestProtocol::
            StrictXUnionHenceResponseMayBeStackAllocated>*>(bytes_.data());
  }

  ::fidl::WireResponse<
      ::test_union::TestProtocol::StrictXUnionHenceResponseMayBeStackAllocated>&
  value() {
    return *Unwrap();
  }
  const ::fidl::WireResponse<
      ::test_union::TestProtocol::StrictXUnionHenceResponseMayBeStackAllocated>&
  value() const {
    return *Unwrap();
  }

  ::fidl::WireResponse<
      ::test_union::TestProtocol::StrictXUnionHenceResponseMayBeStackAllocated>*
  operator->() {
    return &value();
  }
  const ::fidl::WireResponse<
      ::test_union::TestProtocol::StrictXUnionHenceResponseMayBeStackAllocated>*
  operator->() const {
    return &value();
  }

  ::fidl::WireResponse<
      ::test_union::TestProtocol::StrictXUnionHenceResponseMayBeStackAllocated>&
  operator*() {
    return value();
  }
  const ::fidl::WireResponse<
      ::test_union::TestProtocol::StrictXUnionHenceResponseMayBeStackAllocated>&
  operator*() const {
    return value();
  }

 private:
  ::fidl::internal::InlineMessageBuffer<72> bytes_;
};
template <>
class ::fidl::WireUnownedResult<
    ::test_union::TestProtocol::StrictXUnionHenceResponseMayBeStackAllocated>
    final : public ::fidl::Result {
 public:
  explicit WireUnownedResult(
      ::fidl::UnownedClientEnd<::test_union::TestProtocol> client_end,
      ::fidl::internal::AnyBufferAllocator& allocator,
      ::fidl::WireRequest<::test_union::TestProtocol::
                              StrictXUnionHenceResponseMayBeStackAllocated>*
          request);
  explicit WireUnownedResult(
      ::fidl::WireResponse<::test_union::TestProtocol::
                               StrictXUnionHenceResponseMayBeStackAllocated>*
          response)
      : bytes_(reinterpret_cast<uint8_t*>(response)) {}
  explicit WireUnownedResult(const ::fidl::Result& result)
      : ::fidl::Result(result) {}
  explicit WireUnownedResult(
      ::fidl::DecodedMessage<::fidl::WireResponse<
          ::test_union::TestProtocol::
              StrictXUnionHenceResponseMayBeStackAllocated>>&& decoded)
      : ::fidl::Result(decoded) {
    if (decoded.ok()) {
      bytes_ = reinterpret_cast<uint8_t*>(decoded.PrimaryObject());
    } else {
      bytes_ = nullptr;
    }
    decoded.ReleasePrimaryObject();
  }
  WireUnownedResult(WireUnownedResult&&) = delete;
  WireUnownedResult(const WireUnownedResult&) = delete;
  WireUnownedResult* operator=(WireUnownedResult&&) = delete;
  WireUnownedResult* operator=(const WireUnownedResult&) = delete;
  ~WireUnownedResult() = default;

  ::fidl::WireResponse<
      ::test_union::TestProtocol::StrictXUnionHenceResponseMayBeStackAllocated>*
  Unwrap() {
    ZX_DEBUG_ASSERT(ok());
    return reinterpret_cast<::fidl::WireResponse<
        ::test_union::TestProtocol::
            StrictXUnionHenceResponseMayBeStackAllocated>*>(bytes_);
  }
  const ::fidl::WireResponse<
      ::test_union::TestProtocol::StrictXUnionHenceResponseMayBeStackAllocated>*
  Unwrap() const {
    ZX_DEBUG_ASSERT(ok());
    return reinterpret_cast<const ::fidl::WireResponse<
        ::test_union::TestProtocol::
            StrictXUnionHenceResponseMayBeStackAllocated>*>(bytes_);
  }

  ::fidl::WireResponse<
      ::test_union::TestProtocol::StrictXUnionHenceResponseMayBeStackAllocated>&
  value() {
    return *Unwrap();
  }
  const ::fidl::WireResponse<
      ::test_union::TestProtocol::StrictXUnionHenceResponseMayBeStackAllocated>&
  value() const {
    return *Unwrap();
  }

  ::fidl::WireResponse<
      ::test_union::TestProtocol::StrictXUnionHenceResponseMayBeStackAllocated>*
  operator->() {
    return &value();
  }
  const ::fidl::WireResponse<
      ::test_union::TestProtocol::StrictXUnionHenceResponseMayBeStackAllocated>*
  operator->() const {
    return &value();
  }

  ::fidl::WireResponse<
      ::test_union::TestProtocol::StrictXUnionHenceResponseMayBeStackAllocated>&
  operator*() {
    return value();
  }
  const ::fidl::WireResponse<
      ::test_union::TestProtocol::StrictXUnionHenceResponseMayBeStackAllocated>&
  operator*() const {
    return value();
  }

 private:
  uint8_t* bytes_;
};
template <>
class ::fidl::WireResult<
    ::test_union::TestProtocol::FlexibleXUnionHenceResponseMustBeHeapAllocated>
    final : public ::fidl::Result {
 public:
  WireResult(::fidl::UnownedClientEnd<::test_union::TestProtocol> client,
             ::fidl::WireRequest<
                 ::test_union::TestProtocol::
                     FlexibleXUnionHenceResponseMustBeHeapAllocated>* request);
  WireResult(::fidl::UnownedClientEnd<::test_union::TestProtocol> client,
             ::fidl::WireRequest<
                 ::test_union::TestProtocol::
                     FlexibleXUnionHenceResponseMustBeHeapAllocated>* request,
             zx_time_t _deadline);
  explicit WireResult(const ::fidl::Result& result) : ::fidl::Result(result) {}
  WireResult(WireResult&&) = delete;
  WireResult(const WireResult&) = delete;
  WireResult* operator=(WireResult&&) = delete;
  WireResult* operator=(const WireResult&) = delete;
  ~WireResult() = default;

  ::fidl::WireResponse<::test_union::TestProtocol::
                           FlexibleXUnionHenceResponseMustBeHeapAllocated>*
  Unwrap() {
    ZX_DEBUG_ASSERT(ok());
    return reinterpret_cast<::fidl::WireResponse<
        ::test_union::TestProtocol::
            FlexibleXUnionHenceResponseMustBeHeapAllocated>*>(bytes_.data());
  }
  const ::fidl::WireResponse<
      ::test_union::TestProtocol::
          FlexibleXUnionHenceResponseMustBeHeapAllocated>*
  Unwrap() const {
    ZX_DEBUG_ASSERT(ok());
    return reinterpret_cast<const ::fidl::WireResponse<
        ::test_union::TestProtocol::
            FlexibleXUnionHenceResponseMustBeHeapAllocated>*>(bytes_.data());
  }

  ::fidl::WireResponse<::test_union::TestProtocol::
                           FlexibleXUnionHenceResponseMustBeHeapAllocated>&
  value() {
    return *Unwrap();
  }
  const ::fidl::WireResponse<
      ::test_union::TestProtocol::
          FlexibleXUnionHenceResponseMustBeHeapAllocated>&
  value() const {
    return *Unwrap();
  }

  ::fidl::WireResponse<::test_union::TestProtocol::
                           FlexibleXUnionHenceResponseMustBeHeapAllocated>*
  operator->() {
    return &value();
  }
  const ::fidl::WireResponse<
      ::test_union::TestProtocol::
          FlexibleXUnionHenceResponseMustBeHeapAllocated>*
  operator->() const {
    return &value();
  }

  ::fidl::WireResponse<::test_union::TestProtocol::
                           FlexibleXUnionHenceResponseMustBeHeapAllocated>&
  operator*() {
    return value();
  }
  const ::fidl::WireResponse<
      ::test_union::TestProtocol::
          FlexibleXUnionHenceResponseMustBeHeapAllocated>&
  operator*() const {
    return value();
  }

 private:
  ::fidl::internal::BoxedMessageBuffer<ZX_CHANNEL_MAX_MSG_BYTES> bytes_;
};
template <>
class ::fidl::WireUnownedResult<
    ::test_union::TestProtocol::FlexibleXUnionHenceResponseMustBeHeapAllocated>
    final : public ::fidl::Result {
 public:
  explicit WireUnownedResult(
      ::fidl::UnownedClientEnd<::test_union::TestProtocol> client_end,
      ::fidl::internal::AnyBufferAllocator& allocator,
      ::fidl::WireRequest<::test_union::TestProtocol::
                              FlexibleXUnionHenceResponseMustBeHeapAllocated>*
          request);
  explicit WireUnownedResult(
      ::fidl::WireResponse<::test_union::TestProtocol::
                               FlexibleXUnionHenceResponseMustBeHeapAllocated>*
          response)
      : bytes_(reinterpret_cast<uint8_t*>(response)) {}
  explicit WireUnownedResult(const ::fidl::Result& result)
      : ::fidl::Result(result) {}
  explicit WireUnownedResult(
      ::fidl::DecodedMessage<::fidl::WireResponse<
          ::test_union::TestProtocol::
              FlexibleXUnionHenceResponseMustBeHeapAllocated>>&& decoded)
      : ::fidl::Result(decoded) {
    if (decoded.ok()) {
      bytes_ = reinterpret_cast<uint8_t*>(decoded.PrimaryObject());
    } else {
      bytes_ = nullptr;
    }
    decoded.ReleasePrimaryObject();
  }
  WireUnownedResult(WireUnownedResult&&) = delete;
  WireUnownedResult(const WireUnownedResult&) = delete;
  WireUnownedResult* operator=(WireUnownedResult&&) = delete;
  WireUnownedResult* operator=(const WireUnownedResult&) = delete;
  ~WireUnownedResult() = default;

  ::fidl::WireResponse<::test_union::TestProtocol::
                           FlexibleXUnionHenceResponseMustBeHeapAllocated>*
  Unwrap() {
    ZX_DEBUG_ASSERT(ok());
    return reinterpret_cast<::fidl::WireResponse<
        ::test_union::TestProtocol::
            FlexibleXUnionHenceResponseMustBeHeapAllocated>*>(bytes_);
  }
  const ::fidl::WireResponse<
      ::test_union::TestProtocol::
          FlexibleXUnionHenceResponseMustBeHeapAllocated>*
  Unwrap() const {
    ZX_DEBUG_ASSERT(ok());
    return reinterpret_cast<const ::fidl::WireResponse<
        ::test_union::TestProtocol::
            FlexibleXUnionHenceResponseMustBeHeapAllocated>*>(bytes_);
  }

  ::fidl::WireResponse<::test_union::TestProtocol::
                           FlexibleXUnionHenceResponseMustBeHeapAllocated>&
  value() {
    return *Unwrap();
  }
  const ::fidl::WireResponse<
      ::test_union::TestProtocol::
          FlexibleXUnionHenceResponseMustBeHeapAllocated>&
  value() const {
    return *Unwrap();
  }

  ::fidl::WireResponse<::test_union::TestProtocol::
                           FlexibleXUnionHenceResponseMustBeHeapAllocated>*
  operator->() {
    return &value();
  }
  const ::fidl::WireResponse<
      ::test_union::TestProtocol::
          FlexibleXUnionHenceResponseMustBeHeapAllocated>*
  operator->() const {
    return &value();
  }

  ::fidl::WireResponse<::test_union::TestProtocol::
                           FlexibleXUnionHenceResponseMustBeHeapAllocated>&
  operator*() {
    return value();
  }
  const ::fidl::WireResponse<
      ::test_union::TestProtocol::
          FlexibleXUnionHenceResponseMustBeHeapAllocated>&
  operator*() const {
    return value();
  }

 private:
  uint8_t* bytes_;
};
template <>
class ::fidl::internal::WireEventHandlerInterface<::test_union::TestProtocol> {
 public:
  WireEventHandlerInterface() = default;
  virtual ~WireEventHandlerInterface() = default;
};

template <>
class ::fidl::WireAsyncEventHandler<::test_union::TestProtocol>
    : public ::fidl::internal::WireEventHandlerInterface<
          ::test_union::TestProtocol>,
      public ::fidl::internal::AsyncEventHandler {
 public:
  WireAsyncEventHandler() = default;
};

template <>
class ::fidl::WireSyncEventHandler<::test_union::TestProtocol>
    : public ::fidl::internal::WireEventHandlerInterface<
          ::test_union::TestProtocol> {
 public:
  WireSyncEventHandler() = default;

  // Method called when an unknown event is found. This methods gives the status
  // which, in this case, is returned by HandleOneEvent.
  virtual zx_status_t Unknown() = 0;

  // Handle all possible events defined in this protocol.
  // Blocks to consume exactly one message from the channel, then call the
  // corresponding virtual method.
  ::fidl::Result HandleOneEvent(
      ::fidl::UnownedClientEnd<::test_union::TestProtocol> client_end);
};

template <>
class ::fidl::internal::WireEventDispatcher<::test_union::TestProtocol> final
    : public ::fidl::internal::IncomingEventDispatcher<
          ::fidl::WireAsyncEventHandler<::test_union::TestProtocol>> {
 public:
  explicit WireEventDispatcher(
      ::fidl::WireAsyncEventHandler<::test_union::TestProtocol>* event_handler)
      : IncomingEventDispatcher(event_handler) {}

 private:
  std::optional<::fidl::UnbindInfo> DispatchEvent(
      ::fidl::IncomingMessage& msg,
      internal::IncomingTransportContext* transport_context) override;
};

// Methods to make a sync FIDL call directly on an unowned channel or a
// const reference to a |fidl::ClientEnd<::test_union::TestProtocol>|,
// avoiding setting up a client.
template <>
class ::fidl::internal::WireSyncClientImpl<::test_union::TestProtocol> final
    : public ::fidl::internal::SyncEndpointManagedVeneer<
          ::fidl::internal::WireSyncClientImpl<::test_union::TestProtocol>> {
 public:
  // Allocates 80 bytes of message buffer on the stack. No heap allocation
  // necessary.
  ::fidl::WireResult<
      ::test_union::TestProtocol::StrictXUnionHenceResponseMayBeStackAllocated>
  StrictXUnionHenceResponseMayBeStackAllocated() {
    ::fidl::WireRequest<::test_union::TestProtocol::
                            StrictXUnionHenceResponseMayBeStackAllocated>
        _request{};
    return ::fidl::WireResult<::test_union::TestProtocol::
                                  StrictXUnionHenceResponseMayBeStackAllocated>(
        _client_end(), &_request);
  }

  // Allocates 16 bytes of request buffer on the stack. Response is
  // heap-allocated.
  ::fidl::WireResult<::test_union::TestProtocol::
                         FlexibleXUnionHenceResponseMustBeHeapAllocated>
  FlexibleXUnionHenceResponseMustBeHeapAllocated() {
    ::fidl::WireRequest<::test_union::TestProtocol::
                            FlexibleXUnionHenceResponseMustBeHeapAllocated>
        _request{};
    return ::fidl::WireResult<
        ::test_union::TestProtocol::
            FlexibleXUnionHenceResponseMustBeHeapAllocated>(_client_end(),
                                                            &_request);
  }

 private:
  ::fidl::UnownedClientEnd<::test_union::TestProtocol> _client_end() const {
    return ::fidl::UnownedClientEnd<::test_union::TestProtocol>(_channel());
  }
};

template <>
class ::fidl::internal::WireSyncBufferClientImpl<::test_union::TestProtocol>
    final : public ::fidl::internal::SyncEndpointBufferVeneer<
                ::fidl::internal::WireSyncBufferClientImpl<
                    ::test_union::TestProtocol>> {
 public:
  // Caller provides the backing storage for FIDL message via an argument to
  // `.buffer()`.
  ::fidl::WireUnownedResult<
      ::test_union::TestProtocol::StrictXUnionHenceResponseMayBeStackAllocated>
  StrictXUnionHenceResponseMayBeStackAllocated() {
    ::fidl::WireRequest<::test_union::TestProtocol::
                            StrictXUnionHenceResponseMayBeStackAllocated>
        _request{};
    return ::fidl::WireUnownedResult<
        ::test_union::TestProtocol::
            StrictXUnionHenceResponseMayBeStackAllocated>(
        _client_end(), _allocator(), &_request);
  }

  // Caller provides the backing storage for FIDL message via an argument to
  // `.buffer()`.
  ::fidl::WireUnownedResult<::test_union::TestProtocol::
                                FlexibleXUnionHenceResponseMustBeHeapAllocated>
  FlexibleXUnionHenceResponseMustBeHeapAllocated() {
    ::fidl::WireRequest<::test_union::TestProtocol::
                            FlexibleXUnionHenceResponseMustBeHeapAllocated>
        _request{};
    return ::fidl::WireUnownedResult<
        ::test_union::TestProtocol::
            FlexibleXUnionHenceResponseMustBeHeapAllocated>(
        _client_end(), _allocator(), &_request);
  }

 private:
  ::fidl::UnownedClientEnd<::test_union::TestProtocol> _client_end() const {
    return ::fidl::UnownedClientEnd<::test_union::TestProtocol>(_channel());
  }
};
template <>
class ::fidl::WireSyncClient<::test_union::TestProtocol> final
    : public ::fidl::internal::WireSyncClientBase<::test_union::TestProtocol> {
 public:
  using ::fidl::internal::WireSyncClientBase<
      ::test_union::TestProtocol>::WireSyncClientBase;
};

template <>
class ::fidl::internal::WireCompleterBase<
    ::test_union::TestProtocol::StrictXUnionHenceResponseMayBeStackAllocated>
    : public ::fidl::CompleterBase {
 public:
  // In the following methods, the return value indicates internal errors during
  // the reply, such as encoding or writing to the transport.
  // Note that any error will automatically lead to the destruction of the
  // binding, after which the |on_unbound| callback will be triggered with a
  // detailed reason.
  //
  // See //zircon/system/ulib/fidl/include/lib/fidl/llcpp/server.h.
  //
  // Because the reply status is identical to the unbinding status, it can be
  // safely ignored.
  ::fidl::Result Reply(::test_union::wire::StrictBoundedXUnion xu);
  ::fidl::Result Reply(::fidl::BufferSpan _buffer,
                       ::test_union::wire::StrictBoundedXUnion xu);

 protected:
  using ::fidl::CompleterBase::CompleterBase;
};

template <>
struct ::fidl::internal::WireMethodTypes<
    ::test_union::TestProtocol::StrictXUnionHenceResponseMayBeStackAllocated> {
  using Completer = fidl::Completer<::fidl::internal::WireCompleterBase<
      ::test_union::TestProtocol::
          StrictXUnionHenceResponseMayBeStackAllocated>>;
};

template <>
class ::fidl::internal::WireCompleterBase<
    ::test_union::TestProtocol::FlexibleXUnionHenceResponseMustBeHeapAllocated>
    : public ::fidl::CompleterBase {
 public:
  // In the following methods, the return value indicates internal errors during
  // the reply, such as encoding or writing to the transport.
  // Note that any error will automatically lead to the destruction of the
  // binding, after which the |on_unbound| callback will be triggered with a
  // detailed reason.
  //
  // See //zircon/system/ulib/fidl/include/lib/fidl/llcpp/server.h.
  //
  // Because the reply status is identical to the unbinding status, it can be
  // safely ignored.
  ::fidl::Result Reply(::test_union::wire::OlderSimpleUnion xu);
  ::fidl::Result Reply(::fidl::BufferSpan _buffer,
                       ::test_union::wire::OlderSimpleUnion xu);

 protected:
  using ::fidl::CompleterBase::CompleterBase;
};

template <>
struct ::fidl::internal::WireMethodTypes<
    ::test_union::TestProtocol::
        FlexibleXUnionHenceResponseMustBeHeapAllocated> {
  using Completer = fidl::Completer<::fidl::internal::WireCompleterBase<
      ::test_union::TestProtocol::
          FlexibleXUnionHenceResponseMustBeHeapAllocated>>;
};

// Pure-virtual interface to be implemented by a server.
// This interface uses typed channels (i.e. |fidl::ClientEnd<SomeProtocol>|
// and |fidl::ServerEnd<SomeProtocol>|).
template <>
class ::fidl::WireServer<::test_union::TestProtocol>
    : public ::fidl::internal::IncomingMessageDispatcher {
 public:
  WireServer() = default;
  virtual ~WireServer() = default;

  // The FIDL protocol type that is implemented by this server.
  using _EnclosingProtocol = ::test_union::TestProtocol;

  using StrictXUnionHenceResponseMayBeStackAllocatedCompleter =
      ::fidl::internal::WireCompleter<
          ::test_union::TestProtocol::
              StrictXUnionHenceResponseMayBeStackAllocated>;
  using StrictXUnionHenceResponseMayBeStackAllocatedRequestView =
      ::fidl::internal::WireRequestView<
          ::test_union::TestProtocol::
              StrictXUnionHenceResponseMayBeStackAllocated>;

  virtual void StrictXUnionHenceResponseMayBeStackAllocated(
      StrictXUnionHenceResponseMayBeStackAllocatedRequestView request,
      StrictXUnionHenceResponseMayBeStackAllocatedCompleter::Sync&
          _completer) = 0;

  using FlexibleXUnionHenceResponseMustBeHeapAllocatedCompleter =
      ::fidl::internal::WireCompleter<
          ::test_union::TestProtocol::
              FlexibleXUnionHenceResponseMustBeHeapAllocated>;
  using FlexibleXUnionHenceResponseMustBeHeapAllocatedRequestView =
      ::fidl::internal::WireRequestView<
          ::test_union::TestProtocol::
              FlexibleXUnionHenceResponseMustBeHeapAllocated>;

  virtual void FlexibleXUnionHenceResponseMustBeHeapAllocated(
      FlexibleXUnionHenceResponseMustBeHeapAllocatedRequestView request,
      FlexibleXUnionHenceResponseMustBeHeapAllocatedCompleter::Sync&
          _completer) = 0;

 private:
  void dispatch_message(
      ::fidl::IncomingMessage&& msg, ::fidl::Transaction* txn,
      internal::IncomingTransportContext* transport_context) final;
};
#endif  // __Fuchsia__

namespace fidl {

template <>
struct IsFidlType<::fidl::WireRequest<
    ::test_union::TestProtocol::StrictXUnionHenceResponseMayBeStackAllocated>>
    : public std::true_type {};
template <>
struct IsFidlMessage<::fidl::WireRequest<
    ::test_union::TestProtocol::StrictXUnionHenceResponseMayBeStackAllocated>>
    : public std::true_type {};
static_assert(
    sizeof(::fidl::WireRequest<
           ::test_union::TestProtocol::
               StrictXUnionHenceResponseMayBeStackAllocated>) ==
    ::fidl::WireRequest<
        ::test_union::TestProtocol::
            StrictXUnionHenceResponseMayBeStackAllocated>::PrimarySize);

template <>
struct IsFidlType<::fidl::WireResponse<
    ::test_union::TestProtocol::StrictXUnionHenceResponseMayBeStackAllocated>>
    : public std::true_type {};
template <>
struct IsFidlMessage<::fidl::WireResponse<
    ::test_union::TestProtocol::StrictXUnionHenceResponseMayBeStackAllocated>>
    : public std::true_type {};
static_assert(
    sizeof(::fidl::WireResponse<
           ::test_union::TestProtocol::
               StrictXUnionHenceResponseMayBeStackAllocated>) ==
    ::fidl::WireResponse<
        ::test_union::TestProtocol::
            StrictXUnionHenceResponseMayBeStackAllocated>::PrimarySize);
static_assert(
    offsetof(
        ::fidl::WireResponse<::test_union::TestProtocol::
                                 StrictXUnionHenceResponseMayBeStackAllocated>,
        xu) == 16);

template <>
struct IsFidlType<::fidl::WireRequest<
    ::test_union::TestProtocol::FlexibleXUnionHenceResponseMustBeHeapAllocated>>
    : public std::true_type {};
template <>
struct IsFidlMessage<::fidl::WireRequest<
    ::test_union::TestProtocol::FlexibleXUnionHenceResponseMustBeHeapAllocated>>
    : public std::true_type {};
static_assert(
    sizeof(::fidl::WireRequest<
           ::test_union::TestProtocol::
               FlexibleXUnionHenceResponseMustBeHeapAllocated>) ==
    ::fidl::WireRequest<
        ::test_union::TestProtocol::
            FlexibleXUnionHenceResponseMustBeHeapAllocated>::PrimarySize);

template <>
struct IsFidlType<::fidl::WireResponse<
    ::test_union::TestProtocol::FlexibleXUnionHenceResponseMustBeHeapAllocated>>
    : public std::true_type {};
template <>
struct IsFidlMessage<::fidl::WireResponse<
    ::test_union::TestProtocol::FlexibleXUnionHenceResponseMustBeHeapAllocated>>
    : public std::true_type {};
static_assert(
    sizeof(::fidl::WireResponse<
           ::test_union::TestProtocol::
               FlexibleXUnionHenceResponseMustBeHeapAllocated>) ==
    ::fidl::WireResponse<
        ::test_union::TestProtocol::
            FlexibleXUnionHenceResponseMustBeHeapAllocated>::PrimarySize);
static_assert(offsetof(::fidl::WireResponse<
                           ::test_union::TestProtocol::
                               FlexibleXUnionHenceResponseMustBeHeapAllocated>,
                       xu) == 16);

#ifdef __Fuchsia__
}  // namespace fidl
template <>
class ::fidl::internal::WireClientImpl<::test_union::TestProtocol> final
    : public ::fidl::internal::ClientBase {
 public:
  // Asynchronous variant of
  // |TestProtocol.StrictXUnionHenceResponseMayBeStackAllocated()|. Allocates 16
  // bytes of request buffer on the stack. The callback is stored on the heap.
  void StrictXUnionHenceResponseMayBeStackAllocated(
      ::fidl::WireClientCallback<
          ::test_union::TestProtocol::
              StrictXUnionHenceResponseMayBeStackAllocated>
          _cb);

  void StrictXUnionHenceResponseMayBeStackAllocated(
      ::fit::callback<
          void(::fidl::WireResponse<
               ::test_union::TestProtocol::
                   StrictXUnionHenceResponseMayBeStackAllocated>* response)>
          _cb);

  // Asynchronous variant of
  // |TestProtocol.StrictXUnionHenceResponseMayBeStackAllocated()|. Caller
  // provides the backing storage for FIDL message via request buffer. Ownership
  // of |_context| is given unsafely to the binding until |OnError| or |OnReply|
  // are called on it.
  void StrictXUnionHenceResponseMayBeStackAllocated(
      ::fidl::WireResponseContext<
          ::test_union::TestProtocol::
              StrictXUnionHenceResponseMayBeStackAllocated>* _context);

  // Synchronous variant of
  // |StrictXUnionHenceResponseMayBeStackAllocated.StrictXUnionHenceResponseMayBeStackAllocated()|.
  // Allocates 80 bytes of message buffer on the stack. No heap allocation
  // necessary.
  ::fidl::WireResult<
      ::test_union::TestProtocol::StrictXUnionHenceResponseMayBeStackAllocated>
  StrictXUnionHenceResponseMayBeStackAllocated_Sync();

  // Synchronous variant of
  // |StrictXUnionHenceResponseMayBeStackAllocated.StrictXUnionHenceResponseMayBeStackAllocated()|.
  // Caller provides the backing storage for FIDL message via request and
  // response buffers.
  ::fidl::WireUnownedResult<
      ::test_union::TestProtocol::StrictXUnionHenceResponseMayBeStackAllocated>
  StrictXUnionHenceResponseMayBeStackAllocated_Sync(
      ::fidl::BufferSpan _buffer_span);
  // Asynchronous variant of
  // |TestProtocol.FlexibleXUnionHenceResponseMustBeHeapAllocated()|. Allocates
  // 16 bytes of request buffer on the stack. The callback is stored on the
  // heap.
  void FlexibleXUnionHenceResponseMustBeHeapAllocated(
      ::fidl::WireClientCallback<
          ::test_union::TestProtocol::
              FlexibleXUnionHenceResponseMustBeHeapAllocated>
          _cb);

  void FlexibleXUnionHenceResponseMustBeHeapAllocated(
      ::fit::callback<
          void(::fidl::WireResponse<
               ::test_union::TestProtocol::
                   FlexibleXUnionHenceResponseMustBeHeapAllocated>* response)>
          _cb);

  // Asynchronous variant of
  // |TestProtocol.FlexibleXUnionHenceResponseMustBeHeapAllocated()|. Caller
  // provides the backing storage for FIDL message via request buffer. Ownership
  // of |_context| is given unsafely to the binding until |OnError| or |OnReply|
  // are called on it.
  void FlexibleXUnionHenceResponseMustBeHeapAllocated(
      ::fidl::WireResponseContext<
          ::test_union::TestProtocol::
              FlexibleXUnionHenceResponseMustBeHeapAllocated>* _context);

  // Synchronous variant of
  // |FlexibleXUnionHenceResponseMustBeHeapAllocated.FlexibleXUnionHenceResponseMustBeHeapAllocated()|.
  // Allocates 16 bytes of request buffer on the stack. Response is
  // heap-allocated.
  ::fidl::WireResult<::test_union::TestProtocol::
                         FlexibleXUnionHenceResponseMustBeHeapAllocated>
  FlexibleXUnionHenceResponseMustBeHeapAllocated_Sync();

  // Synchronous variant of
  // |FlexibleXUnionHenceResponseMustBeHeapAllocated.FlexibleXUnionHenceResponseMustBeHeapAllocated()|.
  // Caller provides the backing storage for FIDL message via request and
  // response buffers.
  ::fidl::WireUnownedResult<::test_union::TestProtocol::
                                FlexibleXUnionHenceResponseMustBeHeapAllocated>
  FlexibleXUnionHenceResponseMustBeHeapAllocated_Sync(
      ::fidl::BufferSpan _buffer_span);
  WireClientImpl() = default;
};
namespace fidl {
#endif  // __Fuchsia__

}  // namespace fidl
#ifdef __Fuchsia__
// |EventSender| owns a server endpoint of a channel speaking
// the TestProtocol protocol, and can send events in that protocol.
template <>
class ::fidl::WireEventSender<::test_union::TestProtocol> {
 public:
  // Constructs an event sender with an invalid channel.
  WireEventSender() = default;

  explicit WireEventSender(
      ::fidl::ServerEnd<::test_union::TestProtocol> server_end)
      : server_end_(std::move(server_end)) {}

  // The underlying server channel endpoint, which may be replaced at run-time.
  const ::fidl::ServerEnd<::test_union::TestProtocol>& server_end() const {
    return server_end_;
  }
  ::fidl::ServerEnd<::test_union::TestProtocol>& server_end() {
    return server_end_;
  }

  const ::zx::channel& channel() const { return server_end_.channel(); }
  ::zx::channel& channel() { return server_end_.channel(); }

  // Whether the underlying channel is valid.
  bool is_valid() const { return server_end_.is_valid(); }

 private:
  ::fidl::ServerEnd<::test_union::TestProtocol> server_end_;
};

template <>
class ::fidl::internal::WireWeakEventSender<::test_union::TestProtocol> {
 public:
  WireWeakEventSender(
      std::weak_ptr<::fidl::internal::AsyncServerBinding>&& binding)
      : inner_(std::move(binding)) {}

 private:
  friend ServerBindingRefImpl<::test_union::TestProtocol,
                              typename ::test_union::TestProtocol::Transport>;

  ::fidl::internal::WeakEventSenderInner inner_;
};
#endif  // __Fuchsia__
