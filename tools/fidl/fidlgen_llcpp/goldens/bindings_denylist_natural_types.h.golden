// WARNING: This file is machine generated by fidlgen.

#pragma once

#include <fidl/test.bindingsdenylist/cpp/common_types.h>
#include <fidl/test.bindingsdenylist/cpp/markers.h>
#include <lib/fidl/cpp/coding_traits.h>
#include <lib/fidl/cpp/internal/codable_base.h>
#include <lib/fidl/cpp/unified_messaging.h>

#include <cinttypes>
#include <string>

#ifdef __Fuchsia__

#include <lib/zx/channel.h>

#endif  // __Fuchsia__

namespace test_bindingsdenylist {

class OnlyLlcpp;

extern "C" const fidl_type_t test_bindingsdenylist_OnlyLlcppTable;

class OnlyLlcpp final {
 public:
  // TODO: share union tag types between wire & natural.
  enum class Tag : fidl_union_tag_t {
    kX = 1,  // 0x1
  };

 private:
  using Storage = cpp17::variant<cpp17::monostate, uint32_t>;
  std::shared_ptr<Storage> storage_;
  std::shared_ptr<Storage> CloneStorage() const;
  friend struct ::fidl::internal::NaturalUnionCodingTraits<
      ::test_bindingsdenylist::OnlyLlcpp>;
  static constexpr std::array<std::optional<::fidl::HandleInformation>, 2>
      Members = {std::nullopt, std::nullopt};

  explicit OnlyLlcpp(std::shared_ptr<Storage> storage)
      : storage_(std::move(storage)) {}

  static constexpr size_t TagToIndex(
      ::test_bindingsdenylist::OnlyLlcpp::Tag tag) {
    switch (tag) {
      case ::test_bindingsdenylist::OnlyLlcpp::Tag::kX:
        return 1;
    }
  }

  static constexpr ::test_bindingsdenylist::OnlyLlcpp::Tag IndexToTag(
      size_t index) {
    switch (index) {
      case 1:
        return ::test_bindingsdenylist::OnlyLlcpp::Tag::kX;
      // TODO: what's the right thing to do here?
      default:
        return ::test_bindingsdenylist::OnlyLlcpp::Tag::kX;
    }
  }

 public:
  // Create an unknown value of this union.
  OnlyLlcpp() : storage_(std::make_shared<Storage>()) {}

  OnlyLlcpp(OnlyLlcpp&&) noexcept = default;
  OnlyLlcpp& operator=(OnlyLlcpp&&) noexcept = default;
  OnlyLlcpp(const OnlyLlcpp& other) noexcept
      : OnlyLlcpp(other.CloneStorage()) {}
  OnlyLlcpp& operator=(const OnlyLlcpp& other) noexcept {
    storage_ = other.CloneStorage();
    return *this;
  }

  constexpr ::test_bindingsdenylist::OnlyLlcpp::Tag Which() const {
    return OnlyLlcpp::IndexToTag(storage_->index());
  }
  static OnlyLlcpp WithX(uint32_t val) {
    return OnlyLlcpp(std::make_shared<Storage>(
        std::in_place_index_t<TagToIndex(
            ::test_bindingsdenylist::OnlyLlcpp::Tag::kX)>{},
        std::move(val)));
  }

  const ::fidl::internal::UnionMemberView<1, Storage> x() const {
    return ::fidl::internal::UnionMemberView<1, Storage>(storage_);
  }
  ::fidl::internal::UnionMemberView<1, Storage> x() {
    return ::fidl::internal::UnionMemberView<1, Storage>(storage_);
  }
};

constexpr uint32_t AllBindings = 0u;

}  // namespace test_bindingsdenylist
namespace fidl {

template <>
struct IsFidlType<::test_bindingsdenylist::OnlyLlcpp> : public std::true_type {
};

template <>
struct CodingTraits<::test_bindingsdenylist::OnlyLlcpp> final
    : public ::fidl::internal::NaturalUnionCodingTraits<
          ::test_bindingsdenylist::OnlyLlcpp> {};

}  // namespace fidl
