// WARNING: This file is machine generated by fidlgen_llcpp.

#include <fidl/test.bindingsdenylist/cpp/natural_messaging.h>

namespace test_bindingsdenylist {
[[maybe_unused]] constexpr inline uint64_t
    kOnlyLibfuzzerAndDeps_LibfuzzerNeedsNonemptyProtocol_Ordinal =
        2342407566057198902lu;

#ifdef __Fuchsia__
}  // namespace test_bindingsdenylist
void fidl::internal::NaturalClientImpl<
    ::test_bindingsdenylist::OnlyLibfuzzerAndDeps>::
    LibfuzzerNeedsNonemptyProtocol(
        ::fidl::ClientCallback<::test_bindingsdenylist::OnlyLibfuzzerAndDeps::
                                   LibfuzzerNeedsNonemptyProtocol>&& _callback)
        const {
  ::fidl::Encoder _encoder{
      ::test_bindingsdenylist::
          kOnlyLibfuzzerAndDeps_LibfuzzerNeedsNonemptyProtocol_Ordinal};
  return messenger().TwoWay(
      &::test_bindingsdenylist::
          test_bindingsdenylist_OnlyLibfuzzerAndDepsLibfuzzerNeedsNonemptyProtocolRequestMessageTable,
      ::fidl::internal::EncodeTransactionalMessageWithoutValidating(_encoder),
      ::fidl::internal::MakeResponseContext<
          ::fidl::Response<::test_bindingsdenylist::OnlyLibfuzzerAndDeps::
                               LibfuzzerNeedsNonemptyProtocol>,
          ::fidl::ClientCallback<::test_bindingsdenylist::OnlyLibfuzzerAndDeps::
                                     LibfuzzerNeedsNonemptyProtocol>>(
          ::test_bindingsdenylist::
              kOnlyLibfuzzerAndDeps_LibfuzzerNeedsNonemptyProtocol_Ordinal,
          std::move(_callback)));
}
void fidl::internal::NaturalClientImpl<
    ::test_bindingsdenylist::OnlyLibfuzzerAndDeps>::
    LibfuzzerNeedsNonemptyProtocol(
        ::fidl::ClientResponseCallback<
            ::test_bindingsdenylist::OnlyLibfuzzerAndDeps::
                LibfuzzerNeedsNonemptyProtocol>&& _callback) const {
  ::fidl::Encoder _encoder{
      ::test_bindingsdenylist::
          kOnlyLibfuzzerAndDeps_LibfuzzerNeedsNonemptyProtocol_Ordinal};
  return messenger().TwoWay(
      &::test_bindingsdenylist::
          test_bindingsdenylist_OnlyLibfuzzerAndDepsLibfuzzerNeedsNonemptyProtocolRequestMessageTable,
      ::fidl::internal::EncodeTransactionalMessageWithoutValidating(_encoder),
      ::fidl::internal::MakeResponseContext<
          ::fidl::Response<::test_bindingsdenylist::OnlyLibfuzzerAndDeps::
                               LibfuzzerNeedsNonemptyProtocol>,
          ::fidl::ClientResponseCallback<
              ::test_bindingsdenylist::OnlyLibfuzzerAndDeps::
                  LibfuzzerNeedsNonemptyProtocol>>(
          ::test_bindingsdenylist::
              kOnlyLibfuzzerAndDeps_LibfuzzerNeedsNonemptyProtocol_Ordinal,
          std::move(_callback)));
}
namespace test_bindingsdenylist {
#endif  // __Fuchsia__

}  // namespace test_bindingsdenylist
#ifdef __Fuchsia__

std::optional<::fidl::UnbindInfo> fidl::internal::NaturalEventDispatcher<
    ::test_bindingsdenylist::OnlyLibfuzzerAndDeps>::
    DispatchEvent(
        ::fidl::IncomingMessage& msg,
        ::fidl::internal::IncomingTransportContext transport_context) {
  return ::fidl::UnbindInfo::UnknownOrdinal();
}
#endif  // __Fuchsia__

void fidl::internal::NaturalCompleterBase<
    ::test_bindingsdenylist::OnlyLibfuzzerAndDeps::
        LibfuzzerNeedsNonemptyProtocol>::Reply() {
  ::fidl::Encoder _encoder{
      ::test_bindingsdenylist::
          kOnlyLibfuzzerAndDeps_LibfuzzerNeedsNonemptyProtocol_Ordinal};
  messenger_.SendReply(
      &::test_bindingsdenylist::
          test_bindingsdenylist_OnlyLibfuzzerAndDepsLibfuzzerNeedsNonemptyProtocolResponseMessageTable,
      ::fidl::internal::EncodeTransactionalMessageWithoutValidating(_encoder));
}

#ifdef __Fuchsia__

constexpr ::fidl::internal::MethodEntry fidl::internal::NaturalServerDispatcher<
    ::test_bindingsdenylist::OnlyLibfuzzerAndDeps>::entries_[] = {
    {
        ::test_bindingsdenylist::
            kOnlyLibfuzzerAndDeps_LibfuzzerNeedsNonemptyProtocol_Ordinal,
        [](void* interface, ::fidl::IncomingMessage&& msg,
           internal::IncomingTransportContext transport_context,
           ::fidl::Transaction* txn) {
          ::fitx::result<
              ::fidl::Error,
              ::fidl::Request<::test_bindingsdenylist::OnlyLibfuzzerAndDeps::
                                  LibfuzzerNeedsNonemptyProtocol>>
              decoded = ::fidl::Request<
                  ::test_bindingsdenylist::OnlyLibfuzzerAndDeps::
                      LibfuzzerNeedsNonemptyProtocol>::
                  DecodeTransactional(std::move(msg));
          if (decoded.is_error()) {
            return decoded.error_value().status();
          }
          ::fidl::internal::NaturalCompleter<
              ::test_bindingsdenylist::OnlyLibfuzzerAndDeps::
                  LibfuzzerNeedsNonemptyProtocol>::Sync completer(txn);
          static_cast<
              ::fidl::Server<::test_bindingsdenylist::OnlyLibfuzzerAndDeps>*>(
              interface)
              ->LibfuzzerNeedsNonemptyProtocol(decoded.value(), completer);
          return ZX_OK;
        },
    },
};

const ::fidl::internal::MethodEntry* fidl::internal::NaturalServerDispatcher<
    ::test_bindingsdenylist::OnlyLibfuzzerAndDeps>::entries_end_ = &entries_[1];

void fidl::internal::NaturalServerDispatcher<
    ::test_bindingsdenylist::OnlyLibfuzzerAndDeps>::
    Dispatch(
        ::fidl::Server<::test_bindingsdenylist::OnlyLibfuzzerAndDeps>* impl,
        ::fidl::IncomingMessage&& msg,
        internal::IncomingTransportContext transport_context,
        ::fidl::Transaction* txn) {
  ::fidl::internal::Dispatch(impl, msg, std::move(transport_context), txn,
                             entries_, entries_end_);
}
void fidl::Server<::test_bindingsdenylist::OnlyLibfuzzerAndDeps>::
    dispatch_message(
        ::fidl::IncomingMessage&& msg, ::fidl::Transaction* txn,
        ::fidl::internal::IncomingTransportContext transport_context) {
  ::fidl::internal::NaturalServerDispatcher<
      ::test_bindingsdenylist::OnlyLibfuzzerAndDeps>::
      Dispatch(this, std::move(msg), std::move(transport_context), txn);
}
#endif  // __Fuchsia__

#ifdef __Fuchsia__

#endif  // __Fuchsia__

#ifdef __Fuchsia__

std::optional<::fidl::UnbindInfo> fidl::internal::NaturalEventDispatcher<
    ::test_bindingsdenylist::OnlyCppAndDeps>::
    DispatchEvent(
        ::fidl::IncomingMessage& msg,
        ::fidl::internal::IncomingTransportContext transport_context) {
  return ::fidl::UnbindInfo::UnknownOrdinal();
}
#endif  // __Fuchsia__

#ifdef __Fuchsia__

constexpr ::fidl::internal::MethodEntry fidl::internal::NaturalServerDispatcher<
    ::test_bindingsdenylist::OnlyCppAndDeps>::entries_[] = {};

const ::fidl::internal::MethodEntry* fidl::internal::NaturalServerDispatcher<
    ::test_bindingsdenylist::OnlyCppAndDeps>::entries_end_ = &entries_[0];

void fidl::internal::
    NaturalServerDispatcher<::test_bindingsdenylist::OnlyCppAndDeps>::Dispatch(
        ::fidl::Server<::test_bindingsdenylist::OnlyCppAndDeps>* impl,
        ::fidl::IncomingMessage&& msg,
        internal::IncomingTransportContext transport_context,
        ::fidl::Transaction* txn) {
  ::fidl::internal::Dispatch(impl, msg, std::move(transport_context), txn,
                             entries_, entries_end_);
}
void fidl::Server<::test_bindingsdenylist::OnlyCppAndDeps>::dispatch_message(
    ::fidl::IncomingMessage&& msg, ::fidl::Transaction* txn,
    ::fidl::internal::IncomingTransportContext transport_context) {
  ::fidl::internal::NaturalServerDispatcher<
      ::test_bindingsdenylist::OnlyCppAndDeps>::Dispatch(this, std::move(msg),
                                                         std::move(
                                                             transport_context),
                                                         txn);
}
#endif  // __Fuchsia__
