// WARNING: This file is machine generated by fidlgen.

#pragma once

#include <fidl/fidl.test.driveroneway/cpp/markers.h>
#include <fidl/fidl.test.driveroneway/cpp/wire_types.h>
#include <lib/fidl_driver/cpp/wire_messaging.h>

#ifdef __Fuchsia__

#include <lib/fidl/llcpp/client.h>
#include <lib/fidl/llcpp/connect_service.h>
#include <lib/fidl/llcpp/server.h>
#include <lib/fidl/llcpp/service_handler_interface.h>
#include <lib/fidl/llcpp/sync_call.h>

#endif  // __Fuchsia__

namespace fidl_test_driveroneway {
class OneWay;

__LOCAL extern "C" const fidl_type_t
    fidl_test_driveroneway_OneWaySendRequestMessageTable;

__LOCAL extern "C" const fidl_type_t
    fidl_test_driveroneway_OneWaySendResponseMessageTable;
}  // namespace fidl_test_driveroneway
template <>
struct ::fidl::internal::WireOrdinal<::fidl_test_driveroneway::OneWay::Send>
    final {
  static constexpr uint64_t value = 4532960833911862287lu;
};

namespace fidl_test_driveroneway {}  // namespace fidl_test_driveroneway
#ifdef __Fuchsia__

template <>
struct ::fidl::internal::ProtocolDetails<::fidl_test_driveroneway::OneWay> {};
#endif  // __Fuchsia__

#ifdef __Fuchsia__

template <>
struct ::fidl::internal::WireServerDispatcher<::fidl_test_driveroneway::OneWay>
    final {
  WireServerDispatcher() = delete;
  static ::fidl::DispatchResult TryDispatch(
      ::fidl::WireServer<::fidl_test_driveroneway::OneWay>* impl,
      ::fidl::IncomingMessage& msg, ::fidl::Transaction* txn);
  static void Dispatch(
      ::fidl::WireServer<::fidl_test_driveroneway::OneWay>* impl,
      ::fidl::IncomingMessage&& msg, ::fidl::Transaction* txn);

 private:
  static const ::fidl::internal::MethodEntry entries_[];
  static const ::fidl::internal::MethodEntry* entries_end_;
};
#endif  // __Fuchsia__

template <>
struct ::fidl::WireRequest<::fidl_test_driveroneway::OneWay::Send> final {
  FIDL_ALIGNDECL
  fidl_message_header_t _hdr;
  ::fidl_test_driveroneway::wire::Payload payload;

  explicit WireRequest(const ::fidl_test_driveroneway::wire::Payload& payload)
      : payload(payload) {
    _InitHeader();
  }
  WireRequest() { _InitHeader(); }

  static constexpr const fidl_type_t* Type =
      &::fidl_test_driveroneway::
          fidl_test_driveroneway_OneWaySendRequestMessageTable;
  static constexpr uint32_t MaxNumHandles = 0;
  static constexpr uint32_t PrimarySize = 24;
  static constexpr uint32_t PrimarySizeV1 = 24;
  static constexpr uint32_t MaxOutOfLine = 0;
  static constexpr uint32_t MaxOutOfLineV1 = 0;
  static constexpr bool HasFlexibleEnvelope = false;
  static constexpr bool HasPointer = false;
  static constexpr ::fidl::internal::TransactionalMessageKind MessageKind =
      ::fidl::internal::TransactionalMessageKind::kRequest;

  class UnownedEncodedMessage;
  class OwnedEncodedMessage;

 public:
  class DecodedMessage;

 private:
  void _InitHeader();
};
#ifdef __Fuchsia__

template <>
class ::fidl::WireResult<::fidl_test_driveroneway::OneWay::Send> final
    : public ::fidl::Result {
 public:
  WireResult(
      ::fidl::UnownedClientEnd<::fidl_test_driveroneway::OneWay> client,
      ::fidl::WireRequest<::fidl_test_driveroneway::OneWay::Send>* request);
  explicit WireResult(const ::fidl::Result& result) : ::fidl::Result(result) {}
  WireResult(WireResult&&) = delete;
  WireResult(const WireResult&) = delete;
  WireResult* operator=(WireResult&&) = delete;
  WireResult* operator=(const WireResult&) = delete;
  ~WireResult() = default;

 private:
};
template <>
class ::fidl::WireUnownedResult<::fidl_test_driveroneway::OneWay::Send> final
    : public ::fidl::Result {
 public:
  explicit WireUnownedResult(
      ::fidl::UnownedClientEnd<::fidl_test_driveroneway::OneWay> client_end,
      ::fidl::internal::AnyBufferAllocator& allocator,
      ::fidl::WireRequest<::fidl_test_driveroneway::OneWay::Send>* request);
  explicit WireUnownedResult(const ::fidl::Result& result)
      : ::fidl::Result(result) {}
  WireUnownedResult(WireUnownedResult&&) = delete;
  WireUnownedResult(const WireUnownedResult&) = delete;
  WireUnownedResult* operator=(WireUnownedResult&&) = delete;
  WireUnownedResult* operator=(const WireUnownedResult&) = delete;
  ~WireUnownedResult() = default;
};

// Methods to make a sync FIDL call directly on an unowned channel or a
// const reference to a |fidl::ClientEnd<::fidl_test_driveroneway::OneWay>|,
// avoiding setting up a client.
template <>
class ::fidl::internal::WireSyncClientImpl<::fidl_test_driveroneway::OneWay>
    final : public ::fidl::internal::SyncEndpointManagedVeneer<
                ::fidl::internal::WireSyncClientImpl<
                    ::fidl_test_driveroneway::OneWay>> {
 public:
  // Allocates 24 bytes of message buffer on the stack. No heap allocation
  // necessary.
  ::fidl::WireResult<::fidl_test_driveroneway::OneWay::Send> Send(
      const ::fidl_test_driveroneway::wire::Payload& payload) {
    ::fidl::WireRequest<::fidl_test_driveroneway::OneWay::Send> _request{
        payload};
    return ::fidl::WireResult<::fidl_test_driveroneway::OneWay::Send>(
        _client_end(), &_request);
  }

 private:
  ::fidl::UnownedClientEnd<::fidl_test_driveroneway::OneWay> _client_end()
      const {
    return ::fidl::UnownedClientEnd<::fidl_test_driveroneway::OneWay>(
        _channel());
  }
};

template <>
class ::fidl::internal::WireSyncBufferClientImpl<
    ::fidl_test_driveroneway::OneWay>
    final : public ::fidl::internal::SyncEndpointBufferVeneer<
                ::fidl::internal::WireSyncBufferClientImpl<
                    ::fidl_test_driveroneway::OneWay>> {
 public:
  // Caller provides the backing storage for FIDL message via an argument to
  // `.buffer()`.
  ::fidl::WireUnownedResult<::fidl_test_driveroneway::OneWay::Send> Send(
      const ::fidl_test_driveroneway::wire::Payload& payload) {
    ::fidl::WireRequest<::fidl_test_driveroneway::OneWay::Send> _request{
        payload};
    return ::fidl::WireUnownedResult<::fidl_test_driveroneway::OneWay::Send>(
        _client_end(), _allocator(), &_request);
  }

 private:
  ::fidl::UnownedClientEnd<::fidl_test_driveroneway::OneWay> _client_end()
      const {
    return ::fidl::UnownedClientEnd<::fidl_test_driveroneway::OneWay>(
        _channel());
  }
};
template <>
class ::fidl::internal::WireEventHandlerInterface<
    ::fidl_test_driveroneway::OneWay> {
 public:
  WireEventHandlerInterface() = default;
  virtual ~WireEventHandlerInterface() = default;
};

template <>
class ::fidl::WireAsyncEventHandler<::fidl_test_driveroneway::OneWay>
    : public ::fidl::internal::WireEventHandlerInterface<
          ::fidl_test_driveroneway::OneWay>,
      public ::fidl::internal::AsyncEventHandler {
 public:
  WireAsyncEventHandler() = default;
};

template <>
class ::fidl::WireSyncEventHandler<::fidl_test_driveroneway::OneWay>
    : public ::fidl::internal::WireEventHandlerInterface<
          ::fidl_test_driveroneway::OneWay> {
 public:
  WireSyncEventHandler() = default;

  // Method called when an unknown event is found. This methods gives the status
  // which, in this case, is returned by HandleOneEvent.
  virtual zx_status_t Unknown() = 0;

  // Handle all possible events defined in this protocol.
  // Blocks to consume exactly one message from the channel, then call the
  // corresponding virtual method.
  ::fidl::Result HandleOneEvent(
      ::fidl::UnownedClientEnd<::fidl_test_driveroneway::OneWay> client_end);
};
template <>
class ::fidl::WireSyncClient<::fidl_test_driveroneway::OneWay> final
    : public ::fidl::internal::WireSyncClientBase<
          ::fidl_test_driveroneway::OneWay> {
 public:
  using ::fidl::internal::WireSyncClientBase<
      ::fidl_test_driveroneway::OneWay>::WireSyncClientBase;
};

// Pure-virtual interface to be implemented by a server.
// This interface uses typed channels (i.e. |fidl::ClientEnd<SomeProtocol>|
// and |fidl::ServerEnd<SomeProtocol>|).
template <>
class ::fidl::WireServer<::fidl_test_driveroneway::OneWay>
    : public ::fidl::internal::IncomingMessageDispatcher {
 public:
  WireServer() = default;
  virtual ~WireServer() = default;

  // The FIDL protocol type that is implemented by this server.
  using _EnclosingProtocol = ::fidl_test_driveroneway::OneWay;
  using _Transport = ::fidl::internal::ChannelTransport;

  using SendCompleter =
      ::fidl::internal::WireCompleter<::fidl_test_driveroneway::OneWay::Send>;
  using SendRequestView =
      ::fidl::internal::WireRequestView<::fidl_test_driveroneway::OneWay::Send>;

  virtual void Send(SendRequestView request,
                    SendCompleter::Sync& _completer) = 0;

 private:
  void dispatch_message(
      ::fidl::IncomingMessage&& msg, ::fidl::Transaction* txn,
      internal::IncomingTransportContext* transport_context) final;
};
#endif  // __Fuchsia__

namespace fidl {

template <>
struct IsFidlType<::fidl::WireRequest<::fidl_test_driveroneway::OneWay::Send>>
    : public std::true_type {};
template <>
struct IsFidlMessage<
    ::fidl::WireRequest<::fidl_test_driveroneway::OneWay::Send>>
    : public std::true_type {};
static_assert(
    sizeof(::fidl::WireRequest<::fidl_test_driveroneway::OneWay::Send>) ==
    ::fidl::WireRequest<::fidl_test_driveroneway::OneWay::Send>::PrimarySize);
static_assert(
    offsetof(::fidl::WireRequest<::fidl_test_driveroneway::OneWay::Send>,
             payload) == 16);

#ifdef __Fuchsia__
}  // namespace fidl
template <>
class ::fidl::internal::WireClientImpl<::fidl_test_driveroneway::OneWay> final
    : public ::fidl::internal::ClientBase {
 public:
  // Allocates 24 bytes of message buffer on the stack. No heap allocation
  // necessary.
  ::fidl::Result Send(const ::fidl_test_driveroneway::wire::Payload& payload);

  // Caller provides the backing storage for FIDL message via request buffer.
  ::fidl::Result Send(::fidl::BufferSpan _buffer_span,
                      const ::fidl_test_driveroneway::wire::Payload& payload);
  WireClientImpl() = default;

 private:
  std::optional<::fidl::UnbindInfo> DispatchEvent(
      ::fidl::IncomingMessage& msg,
      ::fidl::internal::AsyncEventHandler* maybe_event_handler,
      internal::IncomingTransportContext* transport_context) override;
};
namespace fidl {
#endif  // __Fuchsia__

}  // namespace fidl
#ifdef __Fuchsia__
// |EventSender| owns a server endpoint of a channel speaking
// the OneWay protocol, and can send events in that protocol.
template <>
class ::fidl::WireEventSender<::fidl_test_driveroneway::OneWay> {
 public:
  // Constructs an event sender with an invalid channel.
  WireEventSender() = default;

  explicit WireEventSender(
      ::fidl::ServerEnd<::fidl_test_driveroneway::OneWay> server_end)
      : server_end_(std::move(server_end)) {}

  // The underlying server channel endpoint, which may be replaced at run-time.
  const ::fidl::ServerEnd<::fidl_test_driveroneway::OneWay>& server_end()
      const {
    return server_end_;
  }
  ::fidl::ServerEnd<::fidl_test_driveroneway::OneWay>& server_end() {
    return server_end_;
  }

  const ::zx::channel& channel() const { return server_end_.channel(); }
  ::zx::channel& channel() { return server_end_.channel(); }

  // Whether the underlying channel is valid.
  bool is_valid() const { return server_end_.is_valid(); }

 private:
  ::fidl::ServerEnd<::fidl_test_driveroneway::OneWay> server_end_;
};

template <>
class ::fidl::internal::WireWeakEventSender<::fidl_test_driveroneway::OneWay> {
 public:
  WireWeakEventSender(
      std::weak_ptr<::fidl::internal::AsyncServerBinding>&& binding)
      : inner_(std::move(binding)) {}

 private:
  friend ServerBindingRef<::fidl_test_driveroneway::OneWay,
                          ::fidl::internal::ChannelTransport>;

  ::fidl::internal::WeakEventSenderInner inner_;
};
#endif  // __Fuchsia__
