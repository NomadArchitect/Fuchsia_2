// WARNING: This file is machine generated by fidlgen.

#pragma once

#include <lib/fidl/llcpp/array.h>
#include <lib/fidl/llcpp/coding.h>
#include <lib/fidl/llcpp/envelope.h>
#include <lib/fidl/llcpp/message.h>
#include <lib/fidl/llcpp/message_storage.h>
#include <lib/fidl/llcpp/object_view.h>
#include <lib/fidl/llcpp/string_view.h>
#include <lib/fidl/llcpp/traits.h>
#include <lib/fidl/llcpp/wire_types.h>
#include <lib/stdcompat/optional.h>

#include <cinttypes>
#ifdef __Fuchsia__

#endif  // __Fuchsia__

#include <fidl/fidl.test.arrays/cpp/markers.h>

namespace fidl_test_arrays {
namespace wire {
struct StructSmallArray;

struct StructLargeArray;

class TableSmallArray;

class TableLargeArray;

class UnionSmallArray;

class UnionLargeArray;

}  // namespace wire
}  // namespace fidl_test_arrays
template <>
struct ::fidl::WireTableFrame<::fidl_test_arrays::wire::TableSmallArray> final {
 public:
  WireTableFrame() = default;
  // In its intended usage, WireTableFrame will be referenced by an ObjectView.
  // If the ObjectView is assigned before a move or copy, then it will reference
  // the old invalid object. Because this is unsafe, copies are disallowed and
  // moves are only allowed by friend classes that operate safely.
  WireTableFrame(const WireTableFrame&) = delete;
  WireTableFrame& operator=(const WireTableFrame&) = delete;

 private:
  WireTableFrame(WireTableFrame&&) noexcept = default;
  WireTableFrame& operator=(WireTableFrame&&) noexcept = default;
  ::fidl::Envelope<::fidl::Array<uint32_t, 2>> a_;

  friend class ::fidl_test_arrays::wire::TableSmallArray;
};

namespace fidl_test_arrays {
namespace wire {
extern "C" const fidl_type_t fidl_test_arrays_TableSmallArrayTable;

class TableSmallArray final {
 public:
  // Returns whether no field is set.
  bool IsEmpty() const { return max_ordinal_ == 0; }

  const ::fidl::Array<uint32_t, 2>& a() const {
    ZX_ASSERT(has_a());
    return frame_ptr_->a_.get_data();
  }
  ::fidl::Array<uint32_t, 2>& a() {
    ZX_ASSERT(has_a());
    return frame_ptr_->a_.get_data();
  }
  bool has_a() const { return max_ordinal_ >= 1 && frame_ptr_->a_.has_data(); }
  TableSmallArray& set_a(::fidl::ObjectView<::fidl::Array<uint32_t, 2>> elem) {
    ZX_DEBUG_ASSERT(frame_ptr_ != nullptr);
    frame_ptr_->a_.set_data(elem);
    max_ordinal_ = std::max(max_ordinal_, static_cast<uint64_t>(1));
    return *this;
  }
  TableSmallArray& set_a(std::nullptr_t) {
    ZX_DEBUG_ASSERT(frame_ptr_ != nullptr);
    frame_ptr_->a_.set_data(nullptr);
    return *this;
  }

  TableSmallArray& clear_a() {
    ZX_DEBUG_ASSERT(frame_ptr_ != nullptr);
    frame_ptr_->a_.clear_data();
    return *this;
  }

  template <typename... Args>
  TableSmallArray& set_a(::fidl::AnyArena& allocator, Args&&... args) {
    ZX_DEBUG_ASSERT(frame_ptr_ != nullptr);
    frame_ptr_->a_.set_data(::fidl::ObjectView<::fidl::Array<uint32_t, 2>>(
        allocator, std::forward<Args>(args)...));
    max_ordinal_ = std::max(max_ordinal_, static_cast<uint64_t>(1));
    return *this;
  }

  TableSmallArray() = default;
  explicit TableSmallArray(::fidl::AnyArena& allocator)
      : frame_ptr_(::fidl::ObjectView<::fidl::WireTableFrame<
                       ::fidl_test_arrays::wire::TableSmallArray>>(allocator)) {
  }
  // This constructor allows a user controlled allocation (not using a Arena).
  // It should only be used when performance is key.
  // As soon as the frame is given to the table, it must not be used directly or
  // for another table.
  explicit TableSmallArray(
      ::fidl::ObjectView<
          ::fidl::WireTableFrame<::fidl_test_arrays::wire::TableSmallArray>>&&
          frame)
      : frame_ptr_(std::move(frame)) {}
  ~TableSmallArray() = default;
  TableSmallArray(const TableSmallArray& other) noexcept = default;
  TableSmallArray& operator=(const TableSmallArray& other) noexcept = default;
  TableSmallArray(TableSmallArray&& other) noexcept = default;
  TableSmallArray& operator=(TableSmallArray&& other) noexcept = default;

  static constexpr const fidl_type_t* Type =
      &fidl_test_arrays_TableSmallArrayTable;
  static constexpr uint32_t MaxNumHandles = 0;
  static constexpr uint32_t PrimarySize = 16;
  [[maybe_unused]] static constexpr uint32_t MaxOutOfLine = 16;
  static constexpr bool HasPointer = true;

  void Allocate(::fidl::AnyArena& allocator) {
    max_ordinal_ = 0;
    frame_ptr_ = ::fidl::ObjectView<
        ::fidl::WireTableFrame<::fidl_test_arrays::wire::TableSmallArray>>(
        allocator);
  }
  void Init(::fidl::ObjectView<::fidl::WireTableFrame<
                ::fidl_test_arrays::wire::TableSmallArray>>&& frame_ptr) {
    max_ordinal_ = 0;
    frame_ptr_ = std::move(frame_ptr);
  }

  class UnownedEncodedMessage;
  class OwnedEncodedMessage;
  class DecodedMessage;

 private:
  uint64_t max_ordinal_ = 0;
  ::fidl::ObjectView<
      ::fidl::WireTableFrame<::fidl_test_arrays::wire::TableSmallArray>>
      frame_ptr_;
};

class TableSmallArray::UnownedEncodedMessage final {
 public:
  UnownedEncodedMessage(uint8_t* backing_buffer, uint32_t backing_buffer_size,
                        TableSmallArray* value)
      : UnownedEncodedMessage(::fidl::internal::IovecBufferSize, backing_buffer,
                              backing_buffer_size, value) {}
  UnownedEncodedMessage(uint32_t iovec_capacity, uint8_t* backing_buffer,
                        uint32_t backing_buffer_size, TableSmallArray* value)
      : message_(::fidl::OutgoingMessage::ConstructorArgs{
            .iovecs = iovecs_,
            .iovec_capacity = iovec_capacity,
            .backing_buffer = backing_buffer,
            .backing_buffer_capacity = backing_buffer_size,
        }) {
    ZX_ASSERT(iovec_capacity <= std::size(iovecs_));
    message_.Encode<TableSmallArray>(value);
  }
  UnownedEncodedMessage(const UnownedEncodedMessage&) = delete;
  UnownedEncodedMessage(UnownedEncodedMessage&&) = delete;
  UnownedEncodedMessage* operator=(const UnownedEncodedMessage&) = delete;
  UnownedEncodedMessage* operator=(UnownedEncodedMessage&&) = delete;

  zx_status_t status() const { return message_.status(); }
#ifdef __Fuchsia__
  const char* status_string() const { return message_.status_string(); }
#endif  // __Fuchsia__
  bool ok() const { return message_.status() == ZX_OK; }
  std::string FormatDescription() const { return message_.FormatDescription(); }
  const char* lossy_description() const { return message_.lossy_description(); }
  const ::fidl::Result& error() const { return message_.error(); }

  ::fidl::OutgoingMessage& GetOutgoingMessage() { return message_; }

 private:
  ::fidl::internal::IovecBuffer iovecs_;
  ::fidl::OutgoingMessage message_;
};

class TableSmallArray::OwnedEncodedMessage final {
 public:
  explicit OwnedEncodedMessage(TableSmallArray* value)
      : message_(1u, backing_buffer_.data(),
                 static_cast<uint32_t>(backing_buffer_.size()), value) {}
  // Construct a message using owned buffers.
  // If |iovec_capacity>1|, then the message in OwnedEncodedMessage may point
  // the input FIDL object, which is not owned by it.
  explicit OwnedEncodedMessage(
      ::fidl::internal::AllowUnownedInputRef allow_unowned,
      TableSmallArray* value)
      : message_(::fidl::internal::IovecBufferSize, backing_buffer_.data(),
                 static_cast<uint32_t>(backing_buffer_.size()), value) {}
  OwnedEncodedMessage(const OwnedEncodedMessage&) = delete;
  OwnedEncodedMessage(OwnedEncodedMessage&&) = delete;
  OwnedEncodedMessage* operator=(const OwnedEncodedMessage&) = delete;
  OwnedEncodedMessage* operator=(OwnedEncodedMessage&&) = delete;

  zx_status_t status() const { return message_.status(); }
#ifdef __Fuchsia__
  const char* status_string() const { return message_.status_string(); }
#endif  // __Fuchsia__
  bool ok() const { return message_.ok(); }
  std::string FormatDescription() const { return message_.FormatDescription(); }
  const char* lossy_description() const { return message_.lossy_description(); }
  const ::fidl::Result& error() const { return message_.error(); }

  ::fidl::OutgoingMessage& GetOutgoingMessage() {
    return message_.GetOutgoingMessage();
  }

 private:
  ::fidl::internal::InlineMessageBuffer<40> backing_buffer_;
  UnownedEncodedMessage message_;
};

class TableSmallArray::DecodedMessage final
    : public ::fidl::internal::DecodedMessageBase<TableSmallArray> {
 public:
  using DecodedMessageBase<TableSmallArray>::DecodedMessageBase;

  DecodedMessage(uint8_t* bytes, uint32_t byte_actual,
                 zx_handle_info_t* handles = nullptr,
                 uint32_t handle_actual = 0)
      : DecodedMessageBase(
            ::fidl::internal::kLLCPPEncodedWireFormatVersion,
            ::fidl::IncomingMessage(
                bytes, byte_actual, handles, handle_actual,
                ::fidl::IncomingMessage::kSkipMessageHeaderValidation)) {}

  // Internal constructor for specifying a specific wire format version.
  DecodedMessage(::fidl::internal::WireFormatVersion wire_format_version,
                 uint8_t* bytes, uint32_t byte_actual,
                 zx_handle_info_t* handles = nullptr,
                 uint32_t handle_actual = 0)
      : DecodedMessageBase(
            wire_format_version,
            ::fidl::IncomingMessage(
                bytes, byte_actual, handles, handle_actual,
                ::fidl::IncomingMessage::kSkipMessageHeaderValidation)) {}

  DecodedMessage(const fidl_incoming_msg_t* c_msg)
      : DecodedMessage(reinterpret_cast<uint8_t*>(c_msg->bytes),
                       c_msg->num_bytes, c_msg->handles, c_msg->num_handles) {}

  // Internal constructor for specifying a specific wire format version.
  DecodedMessage(::fidl::internal::WireFormatVersion wire_format_version,
                 const fidl_incoming_msg_t* c_msg)
      : DecodedMessage(wire_format_version,
                       reinterpret_cast<uint8_t*>(c_msg->bytes),
                       c_msg->num_bytes, c_msg->handles, c_msg->num_handles) {}

  TableSmallArray* PrimaryObject() {
    ZX_DEBUG_ASSERT(ok());
    return reinterpret_cast<TableSmallArray*>(bytes());
  }

  // Release the ownership of the decoded message. That means that the handles
  // won't be closed When the object is destroyed. After calling this method,
  // the |DecodedMessage| object should not be used anymore.
  void ReleasePrimaryObject() { ResetBytes(); }
};

}  // namespace wire
}  // namespace fidl_test_arrays
template <>
struct ::fidl::WireTableFrame<::fidl_test_arrays::wire::TableLargeArray> final {
 public:
  WireTableFrame() = default;
  // In its intended usage, WireTableFrame will be referenced by an ObjectView.
  // If the ObjectView is assigned before a move or copy, then it will reference
  // the old invalid object. Because this is unsafe, copies are disallowed and
  // moves are only allowed by friend classes that operate safely.
  WireTableFrame(const WireTableFrame&) = delete;
  WireTableFrame& operator=(const WireTableFrame&) = delete;

 private:
  WireTableFrame(WireTableFrame&&) noexcept = default;
  WireTableFrame& operator=(WireTableFrame&&) noexcept = default;
  ::fidl::Envelope<::fidl::Array<uint32_t, 100>> a_;

  friend class ::fidl_test_arrays::wire::TableLargeArray;
};

namespace fidl_test_arrays {
namespace wire {
extern "C" const fidl_type_t fidl_test_arrays_TableLargeArrayTable;

class TableLargeArray final {
 public:
  // Returns whether no field is set.
  bool IsEmpty() const { return max_ordinal_ == 0; }

  const ::fidl::Array<uint32_t, 100>& a() const {
    ZX_ASSERT(has_a());
    return frame_ptr_->a_.get_data();
  }
  ::fidl::Array<uint32_t, 100>& a() {
    ZX_ASSERT(has_a());
    return frame_ptr_->a_.get_data();
  }
  bool has_a() const { return max_ordinal_ >= 1 && frame_ptr_->a_.has_data(); }
  TableLargeArray& set_a(
      ::fidl::ObjectView<::fidl::Array<uint32_t, 100>> elem) {
    ZX_DEBUG_ASSERT(frame_ptr_ != nullptr);
    frame_ptr_->a_.set_data(elem);
    max_ordinal_ = std::max(max_ordinal_, static_cast<uint64_t>(1));
    return *this;
  }
  TableLargeArray& set_a(std::nullptr_t) {
    ZX_DEBUG_ASSERT(frame_ptr_ != nullptr);
    frame_ptr_->a_.set_data(nullptr);
    return *this;
  }

  TableLargeArray& clear_a() {
    ZX_DEBUG_ASSERT(frame_ptr_ != nullptr);
    frame_ptr_->a_.clear_data();
    return *this;
  }

  template <typename... Args>
  TableLargeArray& set_a(::fidl::AnyArena& allocator, Args&&... args) {
    ZX_DEBUG_ASSERT(frame_ptr_ != nullptr);
    frame_ptr_->a_.set_data(::fidl::ObjectView<::fidl::Array<uint32_t, 100>>(
        allocator, std::forward<Args>(args)...));
    max_ordinal_ = std::max(max_ordinal_, static_cast<uint64_t>(1));
    return *this;
  }

  TableLargeArray() = default;
  explicit TableLargeArray(::fidl::AnyArena& allocator)
      : frame_ptr_(::fidl::ObjectView<::fidl::WireTableFrame<
                       ::fidl_test_arrays::wire::TableLargeArray>>(allocator)) {
  }
  // This constructor allows a user controlled allocation (not using a Arena).
  // It should only be used when performance is key.
  // As soon as the frame is given to the table, it must not be used directly or
  // for another table.
  explicit TableLargeArray(
      ::fidl::ObjectView<
          ::fidl::WireTableFrame<::fidl_test_arrays::wire::TableLargeArray>>&&
          frame)
      : frame_ptr_(std::move(frame)) {}
  ~TableLargeArray() = default;
  TableLargeArray(const TableLargeArray& other) noexcept = default;
  TableLargeArray& operator=(const TableLargeArray& other) noexcept = default;
  TableLargeArray(TableLargeArray&& other) noexcept = default;
  TableLargeArray& operator=(TableLargeArray&& other) noexcept = default;

  static constexpr const fidl_type_t* Type =
      &fidl_test_arrays_TableLargeArrayTable;
  static constexpr uint32_t MaxNumHandles = 0;
  static constexpr uint32_t PrimarySize = 16;
  [[maybe_unused]] static constexpr uint32_t MaxOutOfLine = 408;
  static constexpr bool HasPointer = true;

  void Allocate(::fidl::AnyArena& allocator) {
    max_ordinal_ = 0;
    frame_ptr_ = ::fidl::ObjectView<
        ::fidl::WireTableFrame<::fidl_test_arrays::wire::TableLargeArray>>(
        allocator);
  }
  void Init(::fidl::ObjectView<::fidl::WireTableFrame<
                ::fidl_test_arrays::wire::TableLargeArray>>&& frame_ptr) {
    max_ordinal_ = 0;
    frame_ptr_ = std::move(frame_ptr);
  }

  class UnownedEncodedMessage;
  class OwnedEncodedMessage;
  class DecodedMessage;

 private:
  uint64_t max_ordinal_ = 0;
  ::fidl::ObjectView<
      ::fidl::WireTableFrame<::fidl_test_arrays::wire::TableLargeArray>>
      frame_ptr_;
};

class TableLargeArray::UnownedEncodedMessage final {
 public:
  UnownedEncodedMessage(uint8_t* backing_buffer, uint32_t backing_buffer_size,
                        TableLargeArray* value)
      : UnownedEncodedMessage(::fidl::internal::IovecBufferSize, backing_buffer,
                              backing_buffer_size, value) {}
  UnownedEncodedMessage(uint32_t iovec_capacity, uint8_t* backing_buffer,
                        uint32_t backing_buffer_size, TableLargeArray* value)
      : message_(::fidl::OutgoingMessage::ConstructorArgs{
            .iovecs = iovecs_,
            .iovec_capacity = iovec_capacity,
            .backing_buffer = backing_buffer,
            .backing_buffer_capacity = backing_buffer_size,
        }) {
    ZX_ASSERT(iovec_capacity <= std::size(iovecs_));
    message_.Encode<TableLargeArray>(value);
  }
  UnownedEncodedMessage(const UnownedEncodedMessage&) = delete;
  UnownedEncodedMessage(UnownedEncodedMessage&&) = delete;
  UnownedEncodedMessage* operator=(const UnownedEncodedMessage&) = delete;
  UnownedEncodedMessage* operator=(UnownedEncodedMessage&&) = delete;

  zx_status_t status() const { return message_.status(); }
#ifdef __Fuchsia__
  const char* status_string() const { return message_.status_string(); }
#endif  // __Fuchsia__
  bool ok() const { return message_.status() == ZX_OK; }
  std::string FormatDescription() const { return message_.FormatDescription(); }
  const char* lossy_description() const { return message_.lossy_description(); }
  const ::fidl::Result& error() const { return message_.error(); }

  ::fidl::OutgoingMessage& GetOutgoingMessage() { return message_; }

 private:
  ::fidl::internal::IovecBuffer iovecs_;
  ::fidl::OutgoingMessage message_;
};

class TableLargeArray::OwnedEncodedMessage final {
 public:
  explicit OwnedEncodedMessage(TableLargeArray* value)
      : message_(1u, backing_buffer_.data(),
                 static_cast<uint32_t>(backing_buffer_.size()), value) {}
  // Construct a message using owned buffers.
  // If |iovec_capacity>1|, then the message in OwnedEncodedMessage may point
  // the input FIDL object, which is not owned by it.
  explicit OwnedEncodedMessage(
      ::fidl::internal::AllowUnownedInputRef allow_unowned,
      TableLargeArray* value)
      : message_(::fidl::internal::IovecBufferSize, backing_buffer_.data(),
                 static_cast<uint32_t>(backing_buffer_.size()), value) {}
  OwnedEncodedMessage(const OwnedEncodedMessage&) = delete;
  OwnedEncodedMessage(OwnedEncodedMessage&&) = delete;
  OwnedEncodedMessage* operator=(const OwnedEncodedMessage&) = delete;
  OwnedEncodedMessage* operator=(OwnedEncodedMessage&&) = delete;

  zx_status_t status() const { return message_.status(); }
#ifdef __Fuchsia__
  const char* status_string() const { return message_.status_string(); }
#endif  // __Fuchsia__
  bool ok() const { return message_.ok(); }
  std::string FormatDescription() const { return message_.FormatDescription(); }
  const char* lossy_description() const { return message_.lossy_description(); }
  const ::fidl::Result& error() const { return message_.error(); }

  ::fidl::OutgoingMessage& GetOutgoingMessage() {
    return message_.GetOutgoingMessage();
  }

 private:
  ::fidl::internal::InlineMessageBuffer<432> backing_buffer_;
  UnownedEncodedMessage message_;
};

class TableLargeArray::DecodedMessage final
    : public ::fidl::internal::DecodedMessageBase<TableLargeArray> {
 public:
  using DecodedMessageBase<TableLargeArray>::DecodedMessageBase;

  DecodedMessage(uint8_t* bytes, uint32_t byte_actual,
                 zx_handle_info_t* handles = nullptr,
                 uint32_t handle_actual = 0)
      : DecodedMessageBase(
            ::fidl::internal::kLLCPPEncodedWireFormatVersion,
            ::fidl::IncomingMessage(
                bytes, byte_actual, handles, handle_actual,
                ::fidl::IncomingMessage::kSkipMessageHeaderValidation)) {}

  // Internal constructor for specifying a specific wire format version.
  DecodedMessage(::fidl::internal::WireFormatVersion wire_format_version,
                 uint8_t* bytes, uint32_t byte_actual,
                 zx_handle_info_t* handles = nullptr,
                 uint32_t handle_actual = 0)
      : DecodedMessageBase(
            wire_format_version,
            ::fidl::IncomingMessage(
                bytes, byte_actual, handles, handle_actual,
                ::fidl::IncomingMessage::kSkipMessageHeaderValidation)) {}

  DecodedMessage(const fidl_incoming_msg_t* c_msg)
      : DecodedMessage(reinterpret_cast<uint8_t*>(c_msg->bytes),
                       c_msg->num_bytes, c_msg->handles, c_msg->num_handles) {}

  // Internal constructor for specifying a specific wire format version.
  DecodedMessage(::fidl::internal::WireFormatVersion wire_format_version,
                 const fidl_incoming_msg_t* c_msg)
      : DecodedMessage(wire_format_version,
                       reinterpret_cast<uint8_t*>(c_msg->bytes),
                       c_msg->num_bytes, c_msg->handles, c_msg->num_handles) {}

  TableLargeArray* PrimaryObject() {
    ZX_DEBUG_ASSERT(ok());
    return reinterpret_cast<TableLargeArray*>(bytes());
  }

  // Release the ownership of the decoded message. That means that the handles
  // won't be closed When the object is destroyed. After calling this method,
  // the |DecodedMessage| object should not be used anymore.
  void ReleasePrimaryObject() { ResetBytes(); }
};

extern "C" const fidl_type_t fidl_test_arrays_UnionSmallArrayTable;

class UnionSmallArray {
 public:
  UnionSmallArray()
      : ordinal_(::fidl_test_arrays::wire::UnionSmallArray::Ordinal::Invalid),
        envelope_{} {}

  UnionSmallArray(const UnionSmallArray&) = default;
  UnionSmallArray& operator=(const UnionSmallArray&) = default;
  UnionSmallArray(UnionSmallArray&&) = default;
  UnionSmallArray& operator=(UnionSmallArray&&) = default;

  enum class Tag : fidl_xunion_tag_t {
    kA = 1,  // 0x1
  };

  bool has_invalid_tag() const {
    return ordinal_ ==
           ::fidl_test_arrays::wire::UnionSmallArray::Ordinal::Invalid;
  }

  bool is_a() const {
    return ordinal_ == ::fidl_test_arrays::wire::UnionSmallArray::Ordinal::kA;
  }
  static UnionSmallArray WithA(
      ::fidl::ObjectView<::fidl::Array<uint32_t, 2>> val) {
    UnionSmallArray result;
    result.set_a(val);
    return result;
  }

  template <typename... Args>
  static UnionSmallArray WithA(::fidl::AnyArena& allocator, Args&&... args) {
    UnionSmallArray result;
    result.set_a(::fidl::ObjectView<::fidl::Array<uint32_t, 2>>(
        allocator, std::forward<Args>(args)...));
    return result;
  }

  void set_a(::fidl::ObjectView<::fidl::Array<uint32_t, 2>> elem) {
    ordinal_ = ::fidl_test_arrays::wire::UnionSmallArray::Ordinal::kA;
    envelope_.As<::fidl::Array<uint32_t, 2>>().set_data(std::move(elem));
  }

  template <typename... Args>
  void set_a(::fidl::AnyArena& allocator, Args&&... args) {
    ordinal_ = ::fidl_test_arrays::wire::UnionSmallArray::Ordinal::kA;
    set_a(::fidl::ObjectView<::fidl::Array<uint32_t, 2>>(
        allocator, std::forward<Args>(args)...));
  }

  ::fidl::Array<uint32_t, 2>& mutable_a() {
    ZX_ASSERT(ordinal_ ==
              ::fidl_test_arrays::wire::UnionSmallArray::Ordinal::kA);
    return envelope_.As<::fidl::Array<uint32_t, 2>>().get_data();
  }
  const ::fidl::Array<uint32_t, 2>& a() const {
    ZX_ASSERT(ordinal_ ==
              ::fidl_test_arrays::wire::UnionSmallArray::Ordinal::kA);
    return envelope_.As<::fidl::Array<uint32_t, 2>>().get_data();
  }
  ::fidl_test_arrays::wire::UnionSmallArray::Tag which() const {
    ZX_ASSERT(!has_invalid_tag());
    return static_cast<::fidl_test_arrays::wire::UnionSmallArray::Tag>(
        ordinal_);
  }

  static constexpr const fidl_type_t* Type =
      &fidl_test_arrays_UnionSmallArrayTable;
  static constexpr uint32_t MaxNumHandles = 0;
  static constexpr uint32_t PrimarySize = 16;
  [[maybe_unused]] static constexpr uint32_t MaxOutOfLine = 8;
  static constexpr bool HasPointer = true;

 private:
  enum class Ordinal : fidl_xunion_tag_t {
    Invalid = 0,
    kA = 1,  // 0x1
  };

  static void SizeAndOffsetAssertionHelper();
  ::fidl_test_arrays::wire::UnionSmallArray::Ordinal ordinal_;
  FIDL_ALIGNDECL
  ::fidl::UntypedEnvelope envelope_;
};

extern "C" const fidl_type_t fidl_test_arrays_UnionLargeArrayTable;

class UnionLargeArray {
 public:
  UnionLargeArray()
      : ordinal_(::fidl_test_arrays::wire::UnionLargeArray::Ordinal::Invalid),
        envelope_{} {}

  UnionLargeArray(const UnionLargeArray&) = default;
  UnionLargeArray& operator=(const UnionLargeArray&) = default;
  UnionLargeArray(UnionLargeArray&&) = default;
  UnionLargeArray& operator=(UnionLargeArray&&) = default;

  enum class Tag : fidl_xunion_tag_t {
    kA = 1,  // 0x1
  };

  bool has_invalid_tag() const {
    return ordinal_ ==
           ::fidl_test_arrays::wire::UnionLargeArray::Ordinal::Invalid;
  }

  bool is_a() const {
    return ordinal_ == ::fidl_test_arrays::wire::UnionLargeArray::Ordinal::kA;
  }
  static UnionLargeArray WithA(
      ::fidl::ObjectView<::fidl::Array<uint32_t, 100>> val) {
    UnionLargeArray result;
    result.set_a(val);
    return result;
  }

  template <typename... Args>
  static UnionLargeArray WithA(::fidl::AnyArena& allocator, Args&&... args) {
    UnionLargeArray result;
    result.set_a(::fidl::ObjectView<::fidl::Array<uint32_t, 100>>(
        allocator, std::forward<Args>(args)...));
    return result;
  }

  void set_a(::fidl::ObjectView<::fidl::Array<uint32_t, 100>> elem) {
    ordinal_ = ::fidl_test_arrays::wire::UnionLargeArray::Ordinal::kA;
    envelope_.As<::fidl::Array<uint32_t, 100>>().set_data(std::move(elem));
  }

  template <typename... Args>
  void set_a(::fidl::AnyArena& allocator, Args&&... args) {
    ordinal_ = ::fidl_test_arrays::wire::UnionLargeArray::Ordinal::kA;
    set_a(::fidl::ObjectView<::fidl::Array<uint32_t, 100>>(
        allocator, std::forward<Args>(args)...));
  }

  ::fidl::Array<uint32_t, 100>& mutable_a() {
    ZX_ASSERT(ordinal_ ==
              ::fidl_test_arrays::wire::UnionLargeArray::Ordinal::kA);
    return envelope_.As<::fidl::Array<uint32_t, 100>>().get_data();
  }
  const ::fidl::Array<uint32_t, 100>& a() const {
    ZX_ASSERT(ordinal_ ==
              ::fidl_test_arrays::wire::UnionLargeArray::Ordinal::kA);
    return envelope_.As<::fidl::Array<uint32_t, 100>>().get_data();
  }
  ::fidl_test_arrays::wire::UnionLargeArray::Tag which() const {
    ZX_ASSERT(!has_invalid_tag());
    return static_cast<::fidl_test_arrays::wire::UnionLargeArray::Tag>(
        ordinal_);
  }

  static constexpr const fidl_type_t* Type =
      &fidl_test_arrays_UnionLargeArrayTable;
  static constexpr uint32_t MaxNumHandles = 0;
  static constexpr uint32_t PrimarySize = 16;
  [[maybe_unused]] static constexpr uint32_t MaxOutOfLine = 400;
  static constexpr bool HasPointer = true;

 private:
  enum class Ordinal : fidl_xunion_tag_t {
    Invalid = 0,
    kA = 1,  // 0x1
  };

  static void SizeAndOffsetAssertionHelper();
  ::fidl_test_arrays::wire::UnionLargeArray::Ordinal ordinal_;
  FIDL_ALIGNDECL
  ::fidl::UntypedEnvelope envelope_;
};

extern "C" const fidl_type_t fidl_test_arrays_StructSmallArrayTable;

struct StructSmallArray {
  static constexpr const fidl_type_t* Type =
      &fidl_test_arrays_StructSmallArrayTable;
  static constexpr uint32_t MaxNumHandles = 0;
  static constexpr uint32_t PrimarySize = 8;
  [[maybe_unused]] static constexpr uint32_t MaxOutOfLine = 0;
  static constexpr bool HasPointer = false;

  ::fidl::Array<uint32_t, 2> a = {};

  class UnownedEncodedMessage;
  class OwnedEncodedMessage;
  class DecodedMessage;
};

class StructSmallArray::UnownedEncodedMessage final {
 public:
  UnownedEncodedMessage(uint8_t* backing_buffer, uint32_t backing_buffer_size,
                        StructSmallArray* value)
      : UnownedEncodedMessage(::fidl::internal::IovecBufferSize, backing_buffer,
                              backing_buffer_size, value) {}
  UnownedEncodedMessage(uint32_t iovec_capacity, uint8_t* backing_buffer,
                        uint32_t backing_buffer_size, StructSmallArray* value)
      : message_(::fidl::OutgoingMessage::ConstructorArgs{
            .iovecs = iovecs_,
            .iovec_capacity = iovec_capacity,
            .backing_buffer = backing_buffer,
            .backing_buffer_capacity = backing_buffer_size,
        }) {
    ZX_ASSERT(iovec_capacity <= std::size(iovecs_));
    message_.Encode<StructSmallArray>(value);
  }
  UnownedEncodedMessage(const UnownedEncodedMessage&) = delete;
  UnownedEncodedMessage(UnownedEncodedMessage&&) = delete;
  UnownedEncodedMessage* operator=(const UnownedEncodedMessage&) = delete;
  UnownedEncodedMessage* operator=(UnownedEncodedMessage&&) = delete;

  zx_status_t status() const { return message_.status(); }
#ifdef __Fuchsia__
  const char* status_string() const { return message_.status_string(); }
#endif  // __Fuchsia__
  bool ok() const { return message_.status() == ZX_OK; }
  std::string FormatDescription() const { return message_.FormatDescription(); }
  const char* lossy_description() const { return message_.lossy_description(); }
  const ::fidl::Result& error() const { return message_.error(); }

  ::fidl::OutgoingMessage& GetOutgoingMessage() { return message_; }

 private:
  ::fidl::internal::IovecBuffer iovecs_;
  ::fidl::OutgoingMessage message_;
};

class StructSmallArray::OwnedEncodedMessage final {
 public:
  explicit OwnedEncodedMessage(StructSmallArray* value)
      : message_(1u, backing_buffer_.data(),
                 static_cast<uint32_t>(backing_buffer_.size()), value) {}
  // Internal constructor.
  explicit OwnedEncodedMessage(
      ::fidl::internal::AllowUnownedInputRef allow_unowned,
      StructSmallArray* value)
      : message_(::fidl::internal::IovecBufferSize, backing_buffer_.data(),
                 static_cast<uint32_t>(backing_buffer_.size()), value) {}
  OwnedEncodedMessage(const OwnedEncodedMessage&) = delete;
  OwnedEncodedMessage(OwnedEncodedMessage&&) = delete;
  OwnedEncodedMessage* operator=(const OwnedEncodedMessage&) = delete;
  OwnedEncodedMessage* operator=(OwnedEncodedMessage&&) = delete;

  zx_status_t status() const { return message_.status(); }
#ifdef __Fuchsia__
  const char* status_string() const { return message_.status_string(); }
#endif  // __Fuchsia__
  bool ok() const { return message_.ok(); }
  std::string FormatDescription() const { return message_.FormatDescription(); }
  const char* lossy_description() const { return message_.lossy_description(); }
  const ::fidl::Result& error() const { return message_.error(); }

  ::fidl::OutgoingMessage& GetOutgoingMessage() {
    return message_.GetOutgoingMessage();
  }

 private:
  ::fidl::internal::InlineMessageBuffer<8> backing_buffer_;
  UnownedEncodedMessage message_;
};

class StructSmallArray::DecodedMessage final
    : public ::fidl::internal::DecodedMessageBase<StructSmallArray> {
 public:
  using DecodedMessageBase<StructSmallArray>::DecodedMessageBase;

  DecodedMessage(uint8_t* bytes, uint32_t byte_actual,
                 zx_handle_info_t* handles = nullptr,
                 uint32_t handle_actual = 0)
      : DecodedMessageBase(
            ::fidl::internal::kLLCPPEncodedWireFormatVersion,
            ::fidl::IncomingMessage(
                bytes, byte_actual, handles, handle_actual,
                ::fidl::IncomingMessage::kSkipMessageHeaderValidation)) {}

  // Internal constructor for specifying a specific wire format version.
  DecodedMessage(::fidl::internal::WireFormatVersion wire_format_version,
                 uint8_t* bytes, uint32_t byte_actual,
                 zx_handle_info_t* handles = nullptr,
                 uint32_t handle_actual = 0)
      : DecodedMessageBase(
            wire_format_version,
            ::fidl::IncomingMessage(
                bytes, byte_actual, handles, handle_actual,
                ::fidl::IncomingMessage::kSkipMessageHeaderValidation)) {}

  DecodedMessage(const fidl_incoming_msg_t* c_msg)
      : DecodedMessage(reinterpret_cast<uint8_t*>(c_msg->bytes),
                       c_msg->num_bytes, c_msg->handles, c_msg->num_handles) {}

  // Internal constructor for specifying a specific wire format version.
  DecodedMessage(::fidl::internal::WireFormatVersion wire_format_version,
                 const fidl_incoming_msg_t* c_msg)
      : DecodedMessage(wire_format_version,
                       reinterpret_cast<uint8_t*>(c_msg->bytes),
                       c_msg->num_bytes, c_msg->handles, c_msg->num_handles) {}

  StructSmallArray* PrimaryObject() {
    ZX_DEBUG_ASSERT(ok());
    return reinterpret_cast<StructSmallArray*>(bytes());
  }

  // Release the ownership of the decoded message. That means that the handles
  // won't be closed When the object is destroyed. After calling this method,
  // the |DecodedMessage| object should not be used anymore.
  void ReleasePrimaryObject() { ResetBytes(); }
};

extern "C" const fidl_type_t fidl_test_arrays_StructLargeArrayTable;

struct StructLargeArray {
  static constexpr const fidl_type_t* Type =
      &fidl_test_arrays_StructLargeArrayTable;
  static constexpr uint32_t MaxNumHandles = 0;
  static constexpr uint32_t PrimarySize = 400;
  [[maybe_unused]] static constexpr uint32_t MaxOutOfLine = 0;
  static constexpr bool HasPointer = false;

  ::fidl::Array<uint32_t, 100> a = {};

  class UnownedEncodedMessage;
  class OwnedEncodedMessage;
  class DecodedMessage;
};

class StructLargeArray::UnownedEncodedMessage final {
 public:
  UnownedEncodedMessage(uint8_t* backing_buffer, uint32_t backing_buffer_size,
                        StructLargeArray* value)
      : UnownedEncodedMessage(::fidl::internal::IovecBufferSize, backing_buffer,
                              backing_buffer_size, value) {}
  UnownedEncodedMessage(uint32_t iovec_capacity, uint8_t* backing_buffer,
                        uint32_t backing_buffer_size, StructLargeArray* value)
      : message_(::fidl::OutgoingMessage::ConstructorArgs{
            .iovecs = iovecs_,
            .iovec_capacity = iovec_capacity,
            .backing_buffer = backing_buffer,
            .backing_buffer_capacity = backing_buffer_size,
        }) {
    ZX_ASSERT(iovec_capacity <= std::size(iovecs_));
    message_.Encode<StructLargeArray>(value);
  }
  UnownedEncodedMessage(const UnownedEncodedMessage&) = delete;
  UnownedEncodedMessage(UnownedEncodedMessage&&) = delete;
  UnownedEncodedMessage* operator=(const UnownedEncodedMessage&) = delete;
  UnownedEncodedMessage* operator=(UnownedEncodedMessage&&) = delete;

  zx_status_t status() const { return message_.status(); }
#ifdef __Fuchsia__
  const char* status_string() const { return message_.status_string(); }
#endif  // __Fuchsia__
  bool ok() const { return message_.status() == ZX_OK; }
  std::string FormatDescription() const { return message_.FormatDescription(); }
  const char* lossy_description() const { return message_.lossy_description(); }
  const ::fidl::Result& error() const { return message_.error(); }

  ::fidl::OutgoingMessage& GetOutgoingMessage() { return message_; }

 private:
  ::fidl::internal::IovecBuffer iovecs_;
  ::fidl::OutgoingMessage message_;
};

class StructLargeArray::OwnedEncodedMessage final {
 public:
  explicit OwnedEncodedMessage(StructLargeArray* value)
      : message_(1u, backing_buffer_.data(),
                 static_cast<uint32_t>(backing_buffer_.size()), value) {}
  // Internal constructor.
  explicit OwnedEncodedMessage(
      ::fidl::internal::AllowUnownedInputRef allow_unowned,
      StructLargeArray* value)
      : message_(::fidl::internal::IovecBufferSize, backing_buffer_.data(),
                 static_cast<uint32_t>(backing_buffer_.size()), value) {}
  OwnedEncodedMessage(const OwnedEncodedMessage&) = delete;
  OwnedEncodedMessage(OwnedEncodedMessage&&) = delete;
  OwnedEncodedMessage* operator=(const OwnedEncodedMessage&) = delete;
  OwnedEncodedMessage* operator=(OwnedEncodedMessage&&) = delete;

  zx_status_t status() const { return message_.status(); }
#ifdef __Fuchsia__
  const char* status_string() const { return message_.status_string(); }
#endif  // __Fuchsia__
  bool ok() const { return message_.ok(); }
  std::string FormatDescription() const { return message_.FormatDescription(); }
  const char* lossy_description() const { return message_.lossy_description(); }
  const ::fidl::Result& error() const { return message_.error(); }

  ::fidl::OutgoingMessage& GetOutgoingMessage() {
    return message_.GetOutgoingMessage();
  }

 private:
  ::fidl::internal::InlineMessageBuffer<400> backing_buffer_;
  UnownedEncodedMessage message_;
};

class StructLargeArray::DecodedMessage final
    : public ::fidl::internal::DecodedMessageBase<StructLargeArray> {
 public:
  using DecodedMessageBase<StructLargeArray>::DecodedMessageBase;

  DecodedMessage(uint8_t* bytes, uint32_t byte_actual,
                 zx_handle_info_t* handles = nullptr,
                 uint32_t handle_actual = 0)
      : DecodedMessageBase(
            ::fidl::internal::kLLCPPEncodedWireFormatVersion,
            ::fidl::IncomingMessage(
                bytes, byte_actual, handles, handle_actual,
                ::fidl::IncomingMessage::kSkipMessageHeaderValidation)) {}

  // Internal constructor for specifying a specific wire format version.
  DecodedMessage(::fidl::internal::WireFormatVersion wire_format_version,
                 uint8_t* bytes, uint32_t byte_actual,
                 zx_handle_info_t* handles = nullptr,
                 uint32_t handle_actual = 0)
      : DecodedMessageBase(
            wire_format_version,
            ::fidl::IncomingMessage(
                bytes, byte_actual, handles, handle_actual,
                ::fidl::IncomingMessage::kSkipMessageHeaderValidation)) {}

  DecodedMessage(const fidl_incoming_msg_t* c_msg)
      : DecodedMessage(reinterpret_cast<uint8_t*>(c_msg->bytes),
                       c_msg->num_bytes, c_msg->handles, c_msg->num_handles) {}

  // Internal constructor for specifying a specific wire format version.
  DecodedMessage(::fidl::internal::WireFormatVersion wire_format_version,
                 const fidl_incoming_msg_t* c_msg)
      : DecodedMessage(wire_format_version,
                       reinterpret_cast<uint8_t*>(c_msg->bytes),
                       c_msg->num_bytes, c_msg->handles, c_msg->num_handles) {}

  StructLargeArray* PrimaryObject() {
    ZX_DEBUG_ASSERT(ok());
    return reinterpret_cast<StructLargeArray*>(bytes());
  }

  // Release the ownership of the decoded message. That means that the handles
  // won't be closed When the object is destroyed. After calling this method,
  // the |DecodedMessage| object should not be used anymore.
  void ReleasePrimaryObject() { ResetBytes(); }
};

}  // namespace wire
}  // namespace fidl_test_arrays
namespace fidl {

template <>
struct IsFidlType<::fidl_test_arrays::wire::StructSmallArray>
    : public std::true_type {};
template <>
struct IsStruct<::fidl_test_arrays::wire::StructSmallArray>
    : public std::true_type {};
static_assert(
    std::is_standard_layout_v<::fidl_test_arrays::wire::StructSmallArray>);
static_assert(offsetof(::fidl_test_arrays::wire::StructSmallArray, a) == 0);
static_assert(sizeof(::fidl_test_arrays::wire::StructSmallArray) ==
              ::fidl_test_arrays::wire::StructSmallArray::PrimarySize);

template <>
struct IsFidlType<::fidl_test_arrays::wire::StructLargeArray>
    : public std::true_type {};
template <>
struct IsStruct<::fidl_test_arrays::wire::StructLargeArray>
    : public std::true_type {};
static_assert(
    std::is_standard_layout_v<::fidl_test_arrays::wire::StructLargeArray>);
static_assert(offsetof(::fidl_test_arrays::wire::StructLargeArray, a) == 0);
static_assert(sizeof(::fidl_test_arrays::wire::StructLargeArray) ==
              ::fidl_test_arrays::wire::StructLargeArray::PrimarySize);

template <>
struct IsFidlType<::fidl_test_arrays::wire::TableSmallArray>
    : public std::true_type {};
template <>
struct IsTable<::fidl_test_arrays::wire::TableSmallArray>
    : public std::true_type {};
static_assert(
    std::is_standard_layout_v<::fidl_test_arrays::wire::TableSmallArray>);

template <>
struct IsFidlType<::fidl_test_arrays::wire::TableLargeArray>
    : public std::true_type {};
template <>
struct IsTable<::fidl_test_arrays::wire::TableLargeArray>
    : public std::true_type {};
static_assert(
    std::is_standard_layout_v<::fidl_test_arrays::wire::TableLargeArray>);

template <>
struct IsFidlType<::fidl_test_arrays::wire::UnionSmallArray>
    : public std::true_type {};
template <>
struct IsUnion<::fidl_test_arrays::wire::UnionSmallArray>
    : public std::true_type {};
static_assert(
    std::is_standard_layout_v<::fidl_test_arrays::wire::UnionSmallArray>);

template <>
struct IsFidlType<::fidl_test_arrays::wire::UnionLargeArray>
    : public std::true_type {};
template <>
struct IsUnion<::fidl_test_arrays::wire::UnionLargeArray>
    : public std::true_type {};
static_assert(
    std::is_standard_layout_v<::fidl_test_arrays::wire::UnionLargeArray>);

}  // namespace fidl
