// WARNING: This file is machine generated by fidlgen.

#pragma once

#include <lib/fidl/llcpp/array.h>
#include <lib/fidl/llcpp/coding.h>
#include <lib/fidl/llcpp/envelope.h>
#include <lib/fidl/llcpp/message.h>
#include <lib/fidl/llcpp/message_storage.h>
#include <lib/fidl/llcpp/object_view.h>
#include <lib/fidl/llcpp/string_view.h>
#include <lib/fidl/llcpp/traits.h>
#include <lib/fidl/llcpp/wire_types.h>
#include <lib/stdcompat/optional.h>

#include <cinttypes>
#ifdef __Fuchsia__

#endif  // __Fuchsia__

#include <fidl/test.arrays/cpp/common_types.h>
#include <fidl/test.arrays/cpp/markers.h>

namespace test_arrays {
namespace wire {
struct StructSmallArray;

struct StructLargeArray;

class TableSmallArray;

class TableLargeArray;

class UnionSmallArray;

class UnionLargeArray;

}  // namespace wire
}  // namespace test_arrays
template <>
struct ::fidl::WireTableFrame<::test_arrays::wire::TableSmallArray> final {
 public:
  WireTableFrame() = default;
  // In its intended usage, WireTableFrame will be referenced by an ObjectView.
  // If the ObjectView is assigned before a move or copy, then it will reference
  // the old invalid object. Because this is unsafe, copies are disallowed and
  // moves are only allowed by friend classes that operate safely.
  WireTableFrame(const WireTableFrame&) = delete;
  WireTableFrame& operator=(const WireTableFrame&) = delete;

 private:
  WireTableFrame(WireTableFrame&&) noexcept = default;
  WireTableFrame& operator=(WireTableFrame&&) noexcept = default;
  ::fidl::Envelope<::fidl::Array<uint32_t, 2>> a_;

  friend class ::test_arrays::wire::TableSmallArray;
};

namespace test_arrays {
namespace wire {
extern "C" const fidl_type_t test_arrays_TableSmallArrayTable;

class TableSmallArray final {
 public:
  // Returns whether no field is set.
  bool IsEmpty() const { return max_ordinal_ == 0; }

  const ::fidl::Array<uint32_t, 2>& a() const {
    ZX_ASSERT(has_a());
    return frame_ptr_->a_.get_data();
  }
  ::fidl::Array<uint32_t, 2>& a() {
    ZX_ASSERT(has_a());
    return frame_ptr_->a_.get_data();
  }
  bool has_a() const { return max_ordinal_ >= 1 && frame_ptr_->a_.has_data(); }
  TableSmallArray& set_a(::fidl::ObjectView<::fidl::Array<uint32_t, 2>> elem) {
    ZX_DEBUG_ASSERT(frame_ptr_ != nullptr);
    frame_ptr_->a_.set_data(elem);
    max_ordinal_ = std::max(max_ordinal_, static_cast<uint64_t>(1));
    return *this;
  }
  TableSmallArray& set_a(std::nullptr_t) {
    ZX_DEBUG_ASSERT(frame_ptr_ != nullptr);
    frame_ptr_->a_.set_data(nullptr);
    return *this;
  }
  template <typename... Args>
  TableSmallArray& set_a(::fidl::AnyArena& allocator, Args&&... args) {
    ZX_DEBUG_ASSERT(frame_ptr_ != nullptr);
    frame_ptr_->a_.set_data(::fidl::ObjectView<::fidl::Array<uint32_t, 2>>(
        allocator, std::forward<Args>(args)...));
    max_ordinal_ = std::max(max_ordinal_, static_cast<uint64_t>(1));
    return *this;
  }

  TableSmallArray& clear_a() {
    ZX_DEBUG_ASSERT(frame_ptr_ != nullptr);
    frame_ptr_->a_.clear_data();
    return *this;
  }

  TableSmallArray() = default;
  explicit TableSmallArray(::fidl::AnyArena& allocator)
      : frame_ptr_(
            ::fidl::ObjectView<
                ::fidl::WireTableFrame<::test_arrays::wire::TableSmallArray>>(
                allocator)) {}
  // This constructor allows a user controlled allocation (not using a Arena).
  // It should only be used when performance is key.
  // As soon as the frame is given to the table, it must not be used directly or
  // for another table.
  explicit TableSmallArray(
      ::fidl::ObjectView<
          ::fidl::WireTableFrame<::test_arrays::wire::TableSmallArray>>&& frame)
      : frame_ptr_(std::move(frame)) {}
  ~TableSmallArray() = default;
  TableSmallArray(const TableSmallArray& other) noexcept = default;
  TableSmallArray& operator=(const TableSmallArray& other) noexcept = default;
  TableSmallArray(TableSmallArray&& other) noexcept = default;
  TableSmallArray& operator=(TableSmallArray&& other) noexcept = default;

  static constexpr const fidl_type_t* Type = &test_arrays_TableSmallArrayTable;
  static constexpr uint32_t MaxNumHandles = 0;
  static constexpr uint32_t PrimarySize = 16;
  static constexpr uint32_t PrimarySizeV1 = 16;
  [[maybe_unused]] static constexpr uint32_t MaxOutOfLine = 16;
  static constexpr uint32_t MaxOutOfLineV1 = 24;
  static constexpr bool HasPointer = true;

  void Allocate(::fidl::AnyArena& allocator) {
    max_ordinal_ = 0;
    frame_ptr_ = ::fidl::ObjectView<
        ::fidl::WireTableFrame<::test_arrays::wire::TableSmallArray>>(
        allocator);
  }
  void Init(::fidl::ObjectView<::fidl::WireTableFrame<
                ::test_arrays::wire::TableSmallArray>>&& frame_ptr) {
    max_ordinal_ = 0;
    frame_ptr_ = std::move(frame_ptr);
  }

  class UnownedEncodedMessage;
  class OwnedEncodedMessage;
  class DecodedMessage;

 private:
  uint64_t max_ordinal_ = 0;
  ::fidl::ObjectView<
      ::fidl::WireTableFrame<::test_arrays::wire::TableSmallArray>>
      frame_ptr_;
};

}  // namespace wire
}  // namespace test_arrays
template <>
struct ::fidl::WireTableFrame<::test_arrays::wire::TableLargeArray> final {
 public:
  WireTableFrame() = default;
  // In its intended usage, WireTableFrame will be referenced by an ObjectView.
  // If the ObjectView is assigned before a move or copy, then it will reference
  // the old invalid object. Because this is unsafe, copies are disallowed and
  // moves are only allowed by friend classes that operate safely.
  WireTableFrame(const WireTableFrame&) = delete;
  WireTableFrame& operator=(const WireTableFrame&) = delete;

 private:
  WireTableFrame(WireTableFrame&&) noexcept = default;
  WireTableFrame& operator=(WireTableFrame&&) noexcept = default;
  ::fidl::Envelope<::fidl::Array<uint32_t, 100>> a_;

  friend class ::test_arrays::wire::TableLargeArray;
};

namespace test_arrays {
namespace wire {
extern "C" const fidl_type_t test_arrays_TableLargeArrayTable;

class TableLargeArray final {
 public:
  // Returns whether no field is set.
  bool IsEmpty() const { return max_ordinal_ == 0; }

  const ::fidl::Array<uint32_t, 100>& a() const {
    ZX_ASSERT(has_a());
    return frame_ptr_->a_.get_data();
  }
  ::fidl::Array<uint32_t, 100>& a() {
    ZX_ASSERT(has_a());
    return frame_ptr_->a_.get_data();
  }
  bool has_a() const { return max_ordinal_ >= 1 && frame_ptr_->a_.has_data(); }
  TableLargeArray& set_a(
      ::fidl::ObjectView<::fidl::Array<uint32_t, 100>> elem) {
    ZX_DEBUG_ASSERT(frame_ptr_ != nullptr);
    frame_ptr_->a_.set_data(elem);
    max_ordinal_ = std::max(max_ordinal_, static_cast<uint64_t>(1));
    return *this;
  }
  TableLargeArray& set_a(std::nullptr_t) {
    ZX_DEBUG_ASSERT(frame_ptr_ != nullptr);
    frame_ptr_->a_.set_data(nullptr);
    return *this;
  }
  template <typename... Args>
  TableLargeArray& set_a(::fidl::AnyArena& allocator, Args&&... args) {
    ZX_DEBUG_ASSERT(frame_ptr_ != nullptr);
    frame_ptr_->a_.set_data(::fidl::ObjectView<::fidl::Array<uint32_t, 100>>(
        allocator, std::forward<Args>(args)...));
    max_ordinal_ = std::max(max_ordinal_, static_cast<uint64_t>(1));
    return *this;
  }

  TableLargeArray& clear_a() {
    ZX_DEBUG_ASSERT(frame_ptr_ != nullptr);
    frame_ptr_->a_.clear_data();
    return *this;
  }

  TableLargeArray() = default;
  explicit TableLargeArray(::fidl::AnyArena& allocator)
      : frame_ptr_(
            ::fidl::ObjectView<
                ::fidl::WireTableFrame<::test_arrays::wire::TableLargeArray>>(
                allocator)) {}
  // This constructor allows a user controlled allocation (not using a Arena).
  // It should only be used when performance is key.
  // As soon as the frame is given to the table, it must not be used directly or
  // for another table.
  explicit TableLargeArray(
      ::fidl::ObjectView<
          ::fidl::WireTableFrame<::test_arrays::wire::TableLargeArray>>&& frame)
      : frame_ptr_(std::move(frame)) {}
  ~TableLargeArray() = default;
  TableLargeArray(const TableLargeArray& other) noexcept = default;
  TableLargeArray& operator=(const TableLargeArray& other) noexcept = default;
  TableLargeArray(TableLargeArray&& other) noexcept = default;
  TableLargeArray& operator=(TableLargeArray&& other) noexcept = default;

  static constexpr const fidl_type_t* Type = &test_arrays_TableLargeArrayTable;
  static constexpr uint32_t MaxNumHandles = 0;
  static constexpr uint32_t PrimarySize = 16;
  static constexpr uint32_t PrimarySizeV1 = 16;
  [[maybe_unused]] static constexpr uint32_t MaxOutOfLine = 408;
  static constexpr uint32_t MaxOutOfLineV1 = 416;
  static constexpr bool HasPointer = true;

  void Allocate(::fidl::AnyArena& allocator) {
    max_ordinal_ = 0;
    frame_ptr_ = ::fidl::ObjectView<
        ::fidl::WireTableFrame<::test_arrays::wire::TableLargeArray>>(
        allocator);
  }
  void Init(::fidl::ObjectView<::fidl::WireTableFrame<
                ::test_arrays::wire::TableLargeArray>>&& frame_ptr) {
    max_ordinal_ = 0;
    frame_ptr_ = std::move(frame_ptr);
  }

  class UnownedEncodedMessage;
  class OwnedEncodedMessage;
  class DecodedMessage;

 private:
  uint64_t max_ordinal_ = 0;
  ::fidl::ObjectView<
      ::fidl::WireTableFrame<::test_arrays::wire::TableLargeArray>>
      frame_ptr_;
};

extern "C" const fidl_type_t test_arrays_UnionSmallArrayTable;

class UnionSmallArray {
 public:
  UnionSmallArray()
      : ordinal_(::test_arrays::wire::UnionSmallArray::Ordinal::Invalid),
        envelope_ {}
  {}

  UnionSmallArray(const UnionSmallArray&) = default;
  UnionSmallArray& operator=(const UnionSmallArray&) = default;
  UnionSmallArray(UnionSmallArray&&) = default;
  UnionSmallArray& operator=(UnionSmallArray&&) = default;

  enum class Tag : fidl_xunion_tag_t {
    kA = 1,  // 0x1
  };

  bool has_invalid_tag() const {
    return ordinal_ == ::test_arrays::wire::UnionSmallArray::Ordinal::Invalid;
  }

  bool is_a() const {
    return ordinal_ == ::test_arrays::wire::UnionSmallArray::Ordinal::kA;
  }
  static UnionSmallArray WithA(
      ::fidl::ObjectView<::fidl::Array<uint32_t, 2>> val) {
    UnionSmallArray result;
    result.set_a(val);
    return result;
  }

  template <typename... Args>
  static UnionSmallArray WithA(::fidl::AnyArena& allocator, Args&&... args) {
    UnionSmallArray result;
    result.set_a(::fidl::ObjectView<::fidl::Array<uint32_t, 2>>(
        allocator, std::forward<Args>(args)...));
    return result;
  }

  void set_a(::fidl::ObjectView<::fidl::Array<uint32_t, 2>> elem) {
    ordinal_ = ::test_arrays::wire::UnionSmallArray::Ordinal::kA;
    envelope_.As<::fidl::Array<uint32_t, 2>>().set_data(std::move(elem));
  }

  template <typename... Args>
  void set_a(::fidl::AnyArena& allocator, Args&&... args) {
    ordinal_ = ::test_arrays::wire::UnionSmallArray::Ordinal::kA;
    set_a(::fidl::ObjectView<::fidl::Array<uint32_t, 2>>(
        allocator, std::forward<Args>(args)...));
  }

  ::fidl::Array<uint32_t, 2>& mutable_a() {
    ZX_ASSERT(ordinal_ == ::test_arrays::wire::UnionSmallArray::Ordinal::kA);
    return envelope_.As<::fidl::Array<uint32_t, 2>>().get_data();
  }
  const ::fidl::Array<uint32_t, 2>& a() const {
    ZX_ASSERT(ordinal_ == ::test_arrays::wire::UnionSmallArray::Ordinal::kA);
    return envelope_.As<::fidl::Array<uint32_t, 2>>().get_data();
  }
  ::test_arrays::wire::UnionSmallArray::Tag which() const {
    ZX_ASSERT(!has_invalid_tag());
    return static_cast<::test_arrays::wire::UnionSmallArray::Tag>(ordinal_);
  }

  static constexpr const fidl_type_t* Type = &test_arrays_UnionSmallArrayTable;
  static constexpr uint32_t MaxNumHandles = 0;
  static constexpr uint32_t PrimarySize = 16;
  static constexpr uint32_t PrimarySizeV1 = 24;
  [[maybe_unused]] static constexpr uint32_t MaxOutOfLine = 8;
  static constexpr uint32_t MaxOutOfLineV1 = 8;
  static constexpr bool HasPointer = true;

  class UnownedEncodedMessage;
  class OwnedEncodedMessage;
  class DecodedMessage;

 private:
  enum class Ordinal : fidl_xunion_tag_t {
    Invalid = 0,
    kA = 1,  // 0x1
  };

  static void SizeAndOffsetAssertionHelper();
  ::test_arrays::wire::UnionSmallArray::Ordinal ordinal_;
  FIDL_ALIGNDECL
  ::fidl::UntypedEnvelope envelope_;
};

extern "C" const fidl_type_t test_arrays_UnionLargeArrayTable;

class UnionLargeArray {
 public:
  UnionLargeArray()
      : ordinal_(::test_arrays::wire::UnionLargeArray::Ordinal::Invalid),
        envelope_ {}
  {}

  UnionLargeArray(const UnionLargeArray&) = default;
  UnionLargeArray& operator=(const UnionLargeArray&) = default;
  UnionLargeArray(UnionLargeArray&&) = default;
  UnionLargeArray& operator=(UnionLargeArray&&) = default;

  enum class Tag : fidl_xunion_tag_t {
    kA = 1,  // 0x1
  };

  bool has_invalid_tag() const {
    return ordinal_ == ::test_arrays::wire::UnionLargeArray::Ordinal::Invalid;
  }

  bool is_a() const {
    return ordinal_ == ::test_arrays::wire::UnionLargeArray::Ordinal::kA;
  }
  static UnionLargeArray WithA(
      ::fidl::ObjectView<::fidl::Array<uint32_t, 100>> val) {
    UnionLargeArray result;
    result.set_a(val);
    return result;
  }

  template <typename... Args>
  static UnionLargeArray WithA(::fidl::AnyArena& allocator, Args&&... args) {
    UnionLargeArray result;
    result.set_a(::fidl::ObjectView<::fidl::Array<uint32_t, 100>>(
        allocator, std::forward<Args>(args)...));
    return result;
  }

  void set_a(::fidl::ObjectView<::fidl::Array<uint32_t, 100>> elem) {
    ordinal_ = ::test_arrays::wire::UnionLargeArray::Ordinal::kA;
    envelope_.As<::fidl::Array<uint32_t, 100>>().set_data(std::move(elem));
  }

  template <typename... Args>
  void set_a(::fidl::AnyArena& allocator, Args&&... args) {
    ordinal_ = ::test_arrays::wire::UnionLargeArray::Ordinal::kA;
    set_a(::fidl::ObjectView<::fidl::Array<uint32_t, 100>>(
        allocator, std::forward<Args>(args)...));
  }

  ::fidl::Array<uint32_t, 100>& mutable_a() {
    ZX_ASSERT(ordinal_ == ::test_arrays::wire::UnionLargeArray::Ordinal::kA);
    return envelope_.As<::fidl::Array<uint32_t, 100>>().get_data();
  }
  const ::fidl::Array<uint32_t, 100>& a() const {
    ZX_ASSERT(ordinal_ == ::test_arrays::wire::UnionLargeArray::Ordinal::kA);
    return envelope_.As<::fidl::Array<uint32_t, 100>>().get_data();
  }
  ::test_arrays::wire::UnionLargeArray::Tag which() const {
    ZX_ASSERT(!has_invalid_tag());
    return static_cast<::test_arrays::wire::UnionLargeArray::Tag>(ordinal_);
  }

  static constexpr const fidl_type_t* Type = &test_arrays_UnionLargeArrayTable;
  static constexpr uint32_t MaxNumHandles = 0;
  static constexpr uint32_t PrimarySize = 16;
  static constexpr uint32_t PrimarySizeV1 = 24;
  [[maybe_unused]] static constexpr uint32_t MaxOutOfLine = 400;
  static constexpr uint32_t MaxOutOfLineV1 = 400;
  static constexpr bool HasPointer = true;

  class UnownedEncodedMessage;
  class OwnedEncodedMessage;
  class DecodedMessage;

 private:
  enum class Ordinal : fidl_xunion_tag_t {
    Invalid = 0,
    kA = 1,  // 0x1
  };

  static void SizeAndOffsetAssertionHelper();
  ::test_arrays::wire::UnionLargeArray::Ordinal ordinal_;
  FIDL_ALIGNDECL
  ::fidl::UntypedEnvelope envelope_;
};

extern "C" const fidl_type_t test_arrays_StructSmallArrayTable;

struct StructSmallArray {
  static constexpr const fidl_type_t* Type = &test_arrays_StructSmallArrayTable;
  static constexpr uint32_t MaxNumHandles = 0;
  static constexpr uint32_t PrimarySize = 8;
  static constexpr uint32_t PrimarySizeV1 = 8;
  [[maybe_unused]] static constexpr uint32_t MaxOutOfLine = 0;
  static constexpr uint32_t MaxOutOfLineV1 = 0;
  static constexpr bool HasPointer = false;

  ::fidl::Array<uint32_t, 2> a = {};

  class UnownedEncodedMessage;
  class OwnedEncodedMessage;
  class DecodedMessage;
};

extern "C" const fidl_type_t test_arrays_StructLargeArrayTable;

struct StructLargeArray {
  static constexpr const fidl_type_t* Type = &test_arrays_StructLargeArrayTable;
  static constexpr uint32_t MaxNumHandles = 0;
  static constexpr uint32_t PrimarySize = 400;
  static constexpr uint32_t PrimarySizeV1 = 400;
  [[maybe_unused]] static constexpr uint32_t MaxOutOfLine = 0;
  static constexpr uint32_t MaxOutOfLineV1 = 0;
  static constexpr bool HasPointer = false;

  ::fidl::Array<uint32_t, 100> a = {};

  class UnownedEncodedMessage;
  class OwnedEncodedMessage;
  class DecodedMessage;
};

}  // namespace wire
}  // namespace test_arrays
namespace fidl {

template <>
struct IsFidlType<::test_arrays::wire::StructSmallArray>
    : public std::true_type {};
template <>
struct IsStruct<::test_arrays::wire::StructSmallArray> : public std::true_type {
};
static_assert(std::is_standard_layout_v<::test_arrays::wire::StructSmallArray>);
static_assert(offsetof(::test_arrays::wire::StructSmallArray, a) == 0);
static_assert(sizeof(::test_arrays::wire::StructSmallArray) ==
              ::test_arrays::wire::StructSmallArray::PrimarySize);

template <>
struct IsFidlType<::test_arrays::wire::StructLargeArray>
    : public std::true_type {};
template <>
struct IsStruct<::test_arrays::wire::StructLargeArray> : public std::true_type {
};
static_assert(std::is_standard_layout_v<::test_arrays::wire::StructLargeArray>);
static_assert(offsetof(::test_arrays::wire::StructLargeArray, a) == 0);
static_assert(sizeof(::test_arrays::wire::StructLargeArray) ==
              ::test_arrays::wire::StructLargeArray::PrimarySize);

template <>
struct IsFidlType<::test_arrays::wire::TableSmallArray>
    : public std::true_type {};
template <>
struct IsTable<::test_arrays::wire::TableSmallArray> : public std::true_type {};
static_assert(std::is_standard_layout_v<::test_arrays::wire::TableSmallArray>);

template <>
struct IsFidlType<::test_arrays::wire::TableLargeArray>
    : public std::true_type {};
template <>
struct IsTable<::test_arrays::wire::TableLargeArray> : public std::true_type {};
static_assert(std::is_standard_layout_v<::test_arrays::wire::TableLargeArray>);

template <>
struct IsFidlType<::test_arrays::wire::UnionSmallArray>
    : public std::true_type {};
template <>
struct IsUnion<::test_arrays::wire::UnionSmallArray> : public std::true_type {};
static_assert(std::is_standard_layout_v<::test_arrays::wire::UnionSmallArray>);

template <>
struct IsFidlType<::test_arrays::wire::UnionLargeArray>
    : public std::true_type {};
template <>
struct IsUnion<::test_arrays::wire::UnionLargeArray> : public std::true_type {};
static_assert(std::is_standard_layout_v<::test_arrays::wire::UnionLargeArray>);

}  // namespace fidl
