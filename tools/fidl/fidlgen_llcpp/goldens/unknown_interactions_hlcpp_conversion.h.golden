// WARNING: This file is machine generated by fidlgen.

#pragma once

#include <fidl/test.unknowninteractions/cpp/natural_types.h>
#include <lib/fidl/cpp/hlcpp_conversion.h>
#include <lib/fidl/llcpp/internal/transport_channel.h>
#include <test/unknowninteractions/cpp/fidl.h>

namespace fidl {
namespace internal {

template <>
struct NaturalToHLCPPTraits<fidl::ClientEnd<::test_unknowninteractions::Example>> {
  using HLCPPType = fidl::InterfaceHandle<::test::unknowninteractions::Example>;
  static inline fidl::InterfaceHandle<::test::unknowninteractions::Example> Convert(fidl::ClientEnd<::test_unknowninteractions::Example>&& c) {
    return fidl::InterfaceHandle<::test::unknowninteractions::Example>(c.TakeChannel());
  }
};

template <>
struct NaturalToHLCPPTraits<fidl::ServerEnd<::test_unknowninteractions::Example>> {
  using HLCPPType = fidl::InterfaceRequest<::test::unknowninteractions::Example>;
  static inline fidl::InterfaceRequest<::test::unknowninteractions::Example> Convert(fidl::ServerEnd<::test_unknowninteractions::Example>&& c) {
    return fidl::InterfaceRequest<::test::unknowninteractions::Example>(c.TakeChannel());
  }
};

template <>
struct HLCPPToNaturalTraits<fidl::InterfaceHandle<::test::unknowninteractions::Example>> {
  using NaturalType = fidl::ClientEnd<::test_unknowninteractions::Example>;
  static inline fidl::ClientEnd<::test_unknowninteractions::Example> Convert(fidl::InterfaceHandle<::test::unknowninteractions::Example>&& c) {
    return fidl::ClientEnd<::test_unknowninteractions::Example>(c.TakeChannel());
  }
};

template <>
struct HLCPPToNaturalTraits<fidl::InterfaceRequest<::test::unknowninteractions::Example>> {
  using NaturalType = fidl::ServerEnd<::test_unknowninteractions::Example>;
  static inline fidl::ServerEnd<::test_unknowninteractions::Example> Convert(fidl::InterfaceRequest<::test::unknowninteractions::Example>&& c) {
    return fidl::ServerEnd<::test_unknowninteractions::Example>(c.TakeChannel());
  }
};

template <>
struct NaturalToHLCPPTraits<::test_unknowninteractions::ExampleFlexibleTwoWayResponse> {
  using HLCPPType = ::test::unknowninteractions::Example_FlexibleTwoWay_Response;
  static inline ::test::unknowninteractions::Example_FlexibleTwoWay_Response Convert(::test_unknowninteractions::ExampleFlexibleTwoWayResponse&&);
};
template <>
struct HLCPPToNaturalTraits<::test::unknowninteractions::Example_FlexibleTwoWay_Response> {
  using NaturalType = ::test_unknowninteractions::ExampleFlexibleTwoWayResponse;
  static inline ::test_unknowninteractions::ExampleFlexibleTwoWayResponse Convert(::test::unknowninteractions::Example_FlexibleTwoWay_Response&&);
};
template <>
struct NaturalToHLCPPTraits<::test_unknowninteractions::ExampleFlexibleTwoWayTopResponse> {
  using HLCPPType = ::test::unknowninteractions::ExampleFlexibleTwoWayTopResponse;
  static inline ::test::unknowninteractions::ExampleFlexibleTwoWayTopResponse Convert(::test_unknowninteractions::ExampleFlexibleTwoWayTopResponse&&);
};
template <>
struct HLCPPToNaturalTraits<::test::unknowninteractions::ExampleFlexibleTwoWayTopResponse> {
  using NaturalType = ::test_unknowninteractions::ExampleFlexibleTwoWayTopResponse;
  static inline ::test_unknowninteractions::ExampleFlexibleTwoWayTopResponse Convert(::test::unknowninteractions::ExampleFlexibleTwoWayTopResponse&&);
};
template <>
struct NaturalToHLCPPTraits<::test_unknowninteractions::ExampleFlexibleTwoWayResult> {
  using HLCPPType = ::test::unknowninteractions::Example_FlexibleTwoWay_Result;
  static inline ::test::unknowninteractions::Example_FlexibleTwoWay_Result Convert(::test_unknowninteractions::ExampleFlexibleTwoWayResult&&);
};
template <>
struct HLCPPToNaturalTraits<::test::unknowninteractions::Example_FlexibleTwoWay_Result> {
  using NaturalType = ::test_unknowninteractions::ExampleFlexibleTwoWayResult;
  static inline ::test_unknowninteractions::ExampleFlexibleTwoWayResult Convert(::test::unknowninteractions::Example_FlexibleTwoWay_Result&&);
};

::test::unknowninteractions::Example_FlexibleTwoWay_Response NaturalToHLCPPTraits<::test_unknowninteractions::ExampleFlexibleTwoWayResponse>::Convert(::test_unknowninteractions::ExampleFlexibleTwoWayResponse&& value) {
  ::test::unknowninteractions::Example_FlexibleTwoWay_Response hlcpp;
  hlcpp.__reserved = ::fidl::NaturalToHLCPP(std::move(value.__reserved()));
  return hlcpp;
}

::test_unknowninteractions::ExampleFlexibleTwoWayResponse HLCPPToNaturalTraits<::test::unknowninteractions::Example_FlexibleTwoWay_Response>::Convert(::test::unknowninteractions::Example_FlexibleTwoWay_Response&& value) {
  return ::test_unknowninteractions::ExampleFlexibleTwoWayResponse{{
      .__reserved = ::fidl::HLCPPToNatural(std::move(value.__reserved)),
  }};
}
::test::unknowninteractions::ExampleFlexibleTwoWayTopResponse NaturalToHLCPPTraits<::test_unknowninteractions::ExampleFlexibleTwoWayTopResponse>::Convert(::test_unknowninteractions::ExampleFlexibleTwoWayTopResponse&& value) {
  ::test::unknowninteractions::ExampleFlexibleTwoWayTopResponse hlcpp;
  hlcpp.result = ::fidl::NaturalToHLCPP(std::move(value.result()));
  return hlcpp;
}

::test_unknowninteractions::ExampleFlexibleTwoWayTopResponse HLCPPToNaturalTraits<::test::unknowninteractions::ExampleFlexibleTwoWayTopResponse>::Convert(::test::unknowninteractions::ExampleFlexibleTwoWayTopResponse&& value) {
  return ::test_unknowninteractions::ExampleFlexibleTwoWayTopResponse{{
      .result = ::fidl::HLCPPToNatural(std::move(value.result)),
  }};
}

::test::unknowninteractions::Example_FlexibleTwoWay_Result NaturalToHLCPPTraits<::test_unknowninteractions::ExampleFlexibleTwoWayResult>::Convert(::test_unknowninteractions::ExampleFlexibleTwoWayResult&& value) {
  ::test::unknowninteractions::Example_FlexibleTwoWay_Result hlcpp;
  switch (value.Which()) {
    case ::test_unknowninteractions::ExampleFlexibleTwoWayResult::Tag::kResponse:
      hlcpp.set_response(::fidl::NaturalToHLCPP(std::move(value.response().value())));
      break;
    case ::test_unknowninteractions::ExampleFlexibleTwoWayResult::Tag::kTransportErr:
      hlcpp.set_transport_err(::fidl::NaturalToHLCPP(std::move(value.transport_err().value())));
      break;
    default:
      break;
  }
  return hlcpp;
}

::test_unknowninteractions::ExampleFlexibleTwoWayResult HLCPPToNaturalTraits<::test::unknowninteractions::Example_FlexibleTwoWay_Result>::Convert(::test::unknowninteractions::Example_FlexibleTwoWay_Result&& value) {
  using _NaturalUnion = ::test_unknowninteractions::ExampleFlexibleTwoWayResult;
  switch (value.Which()) {
    case ::test::unknowninteractions::Example_FlexibleTwoWay_Result::Tag::kResponse:
      return _NaturalUnion::WithResponse(
          ::fidl::HLCPPToNatural(std::move(value.response())));
    case ::test::unknowninteractions::Example_FlexibleTwoWay_Result::Tag::kTransportErr:
      return _NaturalUnion::WithTransportErr(
          ::fidl::HLCPPToNatural(std::move(value.transport_err())));
    default:
      ZX_PANIC("Can't convert invalid strict union %s from HLCPP to Natural", "::test::unknowninteractions::Example_FlexibleTwoWay_Result");
  }
}

}  // namespace internal
}  // namespace fidl
