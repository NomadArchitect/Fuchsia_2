// WARNING: This file is machine generated by fidlgen.

#include <fidl/test.byteandbytes/cpp/natural_types.h>

#ifdef __Fuchsia__

void ::test_byteandbytes::ByteAndBytes::EncodeWithoutValidating(
    ::fidl::Encoder& encoder, size_t offset) {
  encoder.Alloc(::fidl::EncodingInlineSize<::test_byteandbytes::ByteAndBytes,
                                           ::fidl::Encoder>(&encoder));
  ::fidl::CodingTraits<::test_byteandbytes::ByteAndBytes>::Encode(&encoder,
                                                                  this, offset);
}

::test_byteandbytes::ByteAndBytes::ByteAndBytes(::fidl::Decoder& decoder)
    : storage_({::fidl::DecodeAs<uint8_t>(&decoder, 0),
                ::fidl::DecodeAs<::std::vector<uint8_t>>(&decoder, 8),
                ::fidl::DecodeAs<::std::vector<uint8_t>>(&decoder, 24),
                ::fidl::DecodeAs<::cpp17::optional<::std::vector<uint8_t>>>(
                    &decoder, 40)}) {}
#endif  // __Fuchsia__

::test_byteandbytes::ByteAndBytes::Storage
test_byteandbytes::ByteAndBytes::CloneStorage() const {
  return Storage{::fidl::internal::NaturalClone(storage_.single_byte),
                 ::fidl::internal::NaturalClone(storage_.many_bytes),
                 ::fidl::internal::NaturalClone(storage_.only_one_k_bytes),
                 ::fidl::internal::NaturalClone(storage_.opt_only_one_k_bytes)};
}
