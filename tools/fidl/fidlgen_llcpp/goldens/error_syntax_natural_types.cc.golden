// WARNING: This file is machine generated by fidlgen.

#include <fidl/test.errorsyntax/cpp/natural_types.h>

#ifdef __Fuchsia__

void ::test_errorsyntax::ExampleUseOfErrorSyntax_CallWhichMayFail_Response::
    EncodeWithoutValidating(::fidl::Encoder& encoder, size_t offset) {
  encoder.Alloc(
      ::fidl::EncodingInlineSize<
          ::test_errorsyntax::ExampleUseOfErrorSyntax_CallWhichMayFail_Response,
          ::fidl::Encoder>(&encoder));
  ::fidl::CodingTraits<
      ::test_errorsyntax::ExampleUseOfErrorSyntax_CallWhichMayFail_Response>::
      Encode(&encoder, this, offset);
}

::test_errorsyntax::ExampleUseOfErrorSyntax_CallWhichMayFail_Response::
    ExampleUseOfErrorSyntax_CallWhichMayFail_Response(::fidl::Decoder& decoder)
    : storage_({::fidl::DecodeAs<int64_t>(&decoder, 0)}) {}
#endif  // __Fuchsia__

::test_errorsyntax::ExampleUseOfErrorSyntax_CallWhichMayFail_Response::Storage_
test_errorsyntax::ExampleUseOfErrorSyntax_CallWhichMayFail_Response::
    CloneStorage_() const {
  return Storage_{::fidl::internal::NaturalClone(storage_.value)};
}
#ifdef __Fuchsia__

void ::test_errorsyntax::ExampleUseOfErrorSyntaxCallWhichMayFailTopResponse::
    EncodeWithoutValidating(::fidl::Encoder& encoder, size_t offset) {
  encoder.Alloc(::fidl::EncodingInlineSize<
                ::test_errorsyntax::
                    ExampleUseOfErrorSyntaxCallWhichMayFailTopResponse,
                ::fidl::Encoder>(&encoder));
  ::fidl::CodingTraits<
      ::test_errorsyntax::ExampleUseOfErrorSyntaxCallWhichMayFailTopResponse>::
      Encode(&encoder, this, offset);
}

::test_errorsyntax::ExampleUseOfErrorSyntaxCallWhichMayFailTopResponse::
    ExampleUseOfErrorSyntaxCallWhichMayFailTopResponse(::fidl::Decoder& decoder)
    : storage_({::fidl::DecodeAs<
          ::test_errorsyntax::ExampleUseOfErrorSyntax_CallWhichMayFail_Result>(
          &decoder, 0)}) {}
#endif  // __Fuchsia__

::test_errorsyntax::ExampleUseOfErrorSyntaxCallWhichMayFailTopResponse::Storage_
test_errorsyntax::ExampleUseOfErrorSyntaxCallWhichMayFailTopResponse::
    CloneStorage_() const {
  return Storage_{::fidl::internal::NaturalClone(storage_.result)};
}
#ifdef __Fuchsia__

void ::test_errorsyntax::ExampleUseOfErrorSyntaxCallWhichMayFailRequest::
    EncodeWithoutValidating(::fidl::Encoder& encoder, size_t offset) {
  encoder.Alloc(
      ::fidl::EncodingInlineSize<
          ::test_errorsyntax::ExampleUseOfErrorSyntaxCallWhichMayFailRequest,
          ::fidl::Encoder>(&encoder));
  ::fidl::CodingTraits<
      ::test_errorsyntax::ExampleUseOfErrorSyntaxCallWhichMayFailRequest>::
      Encode(&encoder, this, offset);
}

::test_errorsyntax::ExampleUseOfErrorSyntaxCallWhichMayFailRequest::
    ExampleUseOfErrorSyntaxCallWhichMayFailRequest(::fidl::Decoder& decoder)
    : storage_({::fidl::DecodeAs<::std::string>(&decoder, 0)}) {}
#endif  // __Fuchsia__

::test_errorsyntax::ExampleUseOfErrorSyntaxCallWhichMayFailRequest::Storage_
test_errorsyntax::ExampleUseOfErrorSyntaxCallWhichMayFailRequest::
    CloneStorage_() const {
  return Storage_{::fidl::internal::NaturalClone(storage_.s)};
}

std::shared_ptr<::test_errorsyntax::
                    ExampleUseOfErrorSyntax_CallWhichMayFail_Result::Storage>
test_errorsyntax::ExampleUseOfErrorSyntax_CallWhichMayFail_Result::
    CloneStorage() const {
  const Storage& storage = *storage_;
  switch (storage_->index()) {
    case 1:
      return std::make_shared<Storage>(
          std::in_place_index<1>,
          ::fidl::internal::NaturalClone(std::get<1>(storage)));
    case 2:
      return std::make_shared<Storage>(
          std::in_place_index<2>,
          ::fidl::internal::NaturalClone(std::get<2>(storage)));
    default:
      return std::make_shared<Storage>();
  }
}
