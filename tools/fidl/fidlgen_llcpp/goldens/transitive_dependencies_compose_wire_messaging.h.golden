// WARNING: This file is machine generated by fidlgen.

#pragma once

#include <fidl/test.transitivedependenciescompose/cpp/markers.h>
#include <fidl/test.transitivedependenciescompose/cpp/wire_types.h>
#include <lib/fidl/llcpp/wire_messaging.h>

#ifdef __Fuchsia__

#include <lib/fidl/llcpp/client.h>
#include <lib/fidl/llcpp/connect_service.h>
#include <lib/fidl/llcpp/server.h>
#include <lib/fidl/llcpp/service_handler_interface.h>
#include <lib/fidl/llcpp/sync_call.h>

#endif  // __Fuchsia__

#include <fidl/test.bottom/cpp/wire_messaging.h>
#include <fidl/test.middle/cpp/wire_messaging.h>

namespace test_transitivedependenciescompose {
class Top;

__LOCAL extern "C" const fidl_type_t
    test_transitivedependenciescompose_TopGetFooRequestMessageTable;

__LOCAL extern "C" const fidl_type_t
    test_transitivedependenciescompose_TopGetFooResponseMessageTable;
}  // namespace test_transitivedependenciescompose
template <>
struct ::fidl::internal::WireOrdinal<
    ::test_transitivedependenciescompose::Top::GetFoo>
    final {
  static constexpr uint64_t value = 2618685789258237543lu;
};

namespace test_transitivedependenciescompose {
}  // namespace test_transitivedependenciescompose
#ifdef __Fuchsia__

template <>
struct ::fidl::internal::ProtocolDetails<
    ::test_transitivedependenciescompose::Top> {};
#endif  // __Fuchsia__

#ifdef __Fuchsia__

template <>
struct ::fidl::internal::WireServerDispatcher<
    ::test_transitivedependenciescompose::Top>
    final {
  WireServerDispatcher() = delete;
  static ::fidl::DispatchResult TryDispatch(
      ::fidl::WireServer<::test_transitivedependenciescompose::Top>* impl,
      ::fidl::IncomingMessage& msg,
      internal::IncomingTransportContext transport_context,
      ::fidl::Transaction* txn);
  static void Dispatch(
      ::fidl::WireServer<::test_transitivedependenciescompose::Top>* impl,
      ::fidl::IncomingMessage&& msg,
      internal::IncomingTransportContext transport_context,
      ::fidl::Transaction* txn);

 private:
  static const ::fidl::internal::MethodEntry entries_[];
  static const ::fidl::internal::MethodEntry* entries_end_;
};
#endif  // __Fuchsia__

template <>
struct ::fidl::WireRequest<::test_transitivedependenciescompose::Top::GetFoo>
    final {
  FIDL_ALIGNDECL
  fidl_message_header_t _hdr;

  WireRequest() { _InitHeader(); }

  static constexpr const fidl_type_t* Type =
      &::fidl::_llcpp_coding_AnyZeroArgMessageTable;
  static constexpr uint32_t MaxNumHandles = 0;
  static constexpr uint32_t PrimarySize = 16;
  static constexpr uint32_t PrimarySizeV1 = 16;
  static constexpr uint32_t MaxOutOfLine = 0;
  static constexpr uint32_t MaxOutOfLineV1 = 0;
  static constexpr bool HasFlexibleEnvelope = false;
  static constexpr bool HasPointer = false;
  static constexpr ::fidl::internal::TransactionalMessageKind MessageKind =
      ::fidl::internal::TransactionalMessageKind::kRequest;
  using ResponseType =
      ::fidl::WireResponse<::test_transitivedependenciescompose::Top::GetFoo>;

  class UnownedEncodedMessage;
  class OwnedEncodedMessage;

 public:
  class DecodedMessage;

 private:
  void _InitHeader();
};
template <>
struct ::fidl::WireResponse<::test_transitivedependenciescompose::Top::GetFoo>
    final {
  FIDL_ALIGNDECL
  fidl_message_header_t _hdr;
  ::test_bottom::wire::Foo foo;

  explicit WireResponse(const ::test_bottom::wire::Foo& foo) : foo(foo) {
    _InitHeader();
  }
  WireResponse() { _InitHeader(); }

  static constexpr const fidl_type_t* Type =
      &::test_transitivedependenciescompose::
          test_transitivedependenciescompose_TopGetFooResponseMessageTable;
  static constexpr uint32_t MaxNumHandles = 0;
  static constexpr uint32_t PrimarySize = 24;
  static constexpr uint32_t PrimarySizeV1 = 24;
  static constexpr uint32_t MaxOutOfLine = 0;
  static constexpr uint32_t MaxOutOfLineV1 = 0;
  static constexpr bool HasFlexibleEnvelope = false;
  static constexpr bool HasPointer = false;
  static constexpr ::fidl::internal::TransactionalMessageKind MessageKind =
      ::fidl::internal::TransactionalMessageKind::kResponse;

  class UnownedEncodedMessage;
  class OwnedEncodedMessage;

 public:
  class DecodedMessage;

 private:
  void _InitHeader();
};
#ifdef __Fuchsia__

template <>
class ::fidl::WireResult<::test_transitivedependenciescompose::Top::GetFoo>
    final : public ::fidl::Result {
 public:
  WireResult(
      ::fidl::UnownedClientEnd<::test_transitivedependenciescompose::Top>
          client,
      ::fidl::WireRequest<::test_transitivedependenciescompose::Top::GetFoo>*
          request);
  WireResult(
      ::fidl::UnownedClientEnd<::test_transitivedependenciescompose::Top>
          client,
      ::fidl::WireRequest<::test_transitivedependenciescompose::Top::GetFoo>*
          request,
      zx_time_t _deadline);
  explicit WireResult(const ::fidl::Result& result) : ::fidl::Result(result) {}
  WireResult(WireResult&&) = delete;
  WireResult(const WireResult&) = delete;
  WireResult* operator=(WireResult&&) = delete;
  WireResult* operator=(const WireResult&) = delete;
  ~WireResult() = default;

  ::fidl::WireResponse<::test_transitivedependenciescompose::Top::GetFoo>*
  Unwrap() {
    ZX_DEBUG_ASSERT(ok());
    return reinterpret_cast<::fidl::WireResponse<
        ::test_transitivedependenciescompose::Top::GetFoo>*>(bytes_.data());
  }
  const ::fidl::WireResponse<::test_transitivedependenciescompose::Top::GetFoo>*
  Unwrap() const {
    ZX_DEBUG_ASSERT(ok());
    return reinterpret_cast<const ::fidl::WireResponse<
        ::test_transitivedependenciescompose::Top::GetFoo>*>(bytes_.data());
  }

  ::fidl::WireResponse<::test_transitivedependenciescompose::Top::GetFoo>&
  value() {
    return *Unwrap();
  }
  const ::fidl::WireResponse<::test_transitivedependenciescompose::Top::GetFoo>&
  value() const {
    return *Unwrap();
  }

  ::fidl::WireResponse<::test_transitivedependenciescompose::Top::GetFoo>*
  operator->() {
    return &value();
  }
  const ::fidl::WireResponse<::test_transitivedependenciescompose::Top::GetFoo>*
  operator->() const {
    return &value();
  }

  ::fidl::WireResponse<::test_transitivedependenciescompose::Top::GetFoo>&
  operator*() {
    return value();
  }
  const ::fidl::WireResponse<::test_transitivedependenciescompose::Top::GetFoo>&
  operator*() const {
    return value();
  }

 private:
  ::fidl::internal::InlineMessageBuffer<24> bytes_;
};
template <>
class ::fidl::WireUnownedResult<
    ::test_transitivedependenciescompose::Top::GetFoo>
    final : public ::fidl::Result {
 public:
  explicit WireUnownedResult(
      ::fidl::UnownedClientEnd<::test_transitivedependenciescompose::Top>
          client_end,
      ::fidl::internal::AnyBufferAllocator& allocator,
      ::fidl::WireRequest<::test_transitivedependenciescompose::Top::GetFoo>*
          request);
  explicit WireUnownedResult(
      ::fidl::WireResponse<::test_transitivedependenciescompose::Top::GetFoo>*
          response)
      : bytes_(reinterpret_cast<uint8_t*>(response)) {}
  explicit WireUnownedResult(const ::fidl::Result& result)
      : ::fidl::Result(result) {}
  explicit WireUnownedResult(
      ::fidl::DecodedMessage<::fidl::WireResponse<
          ::test_transitivedependenciescompose::Top::GetFoo>>&& decoded,
      ::fidl::internal::IncomingTransportContext context)
      : ::fidl::Result(decoded) {
    if (decoded.ok()) {
      bytes_ = reinterpret_cast<uint8_t*>(decoded.PrimaryObject());
    } else {
      bytes_ = nullptr;
    }
    decoded.ReleasePrimaryObject();
  }
  WireUnownedResult(WireUnownedResult&&) = delete;
  WireUnownedResult(const WireUnownedResult&) = delete;
  WireUnownedResult* operator=(WireUnownedResult&&) = delete;
  WireUnownedResult* operator=(const WireUnownedResult&) = delete;
  ~WireUnownedResult() = default;

  ::fidl::WireResponse<::test_transitivedependenciescompose::Top::GetFoo>*
  Unwrap() {
    ZX_DEBUG_ASSERT(ok());
    return reinterpret_cast<::fidl::WireResponse<
        ::test_transitivedependenciescompose::Top::GetFoo>*>(bytes_);
  }
  const ::fidl::WireResponse<::test_transitivedependenciescompose::Top::GetFoo>*
  Unwrap() const {
    ZX_DEBUG_ASSERT(ok());
    return reinterpret_cast<const ::fidl::WireResponse<
        ::test_transitivedependenciescompose::Top::GetFoo>*>(bytes_);
  }

  ::fidl::WireResponse<::test_transitivedependenciescompose::Top::GetFoo>&
  value() {
    return *Unwrap();
  }
  const ::fidl::WireResponse<::test_transitivedependenciescompose::Top::GetFoo>&
  value() const {
    return *Unwrap();
  }

  ::fidl::WireResponse<::test_transitivedependenciescompose::Top::GetFoo>*
  operator->() {
    return &value();
  }
  const ::fidl::WireResponse<::test_transitivedependenciescompose::Top::GetFoo>*
  operator->() const {
    return &value();
  }

  ::fidl::WireResponse<::test_transitivedependenciescompose::Top::GetFoo>&
  operator*() {
    return value();
  }
  const ::fidl::WireResponse<::test_transitivedependenciescompose::Top::GetFoo>&
  operator*() const {
    return value();
  }

 private:
  uint8_t* bytes_;
};
template <>
class ::fidl::internal::WireEventHandlerInterface<
    ::test_transitivedependenciescompose::Top> {
 public:
  WireEventHandlerInterface() = default;
  virtual ~WireEventHandlerInterface() = default;
};

template <>
class ::fidl::WireAsyncEventHandler<::test_transitivedependenciescompose::Top>
    : public ::fidl::internal::WireEventHandlerInterface<
          ::test_transitivedependenciescompose::Top>,
      public ::fidl::internal::AsyncEventHandler {
 public:
  WireAsyncEventHandler() = default;
};

template <>
class ::fidl::WireSyncEventHandler<::test_transitivedependenciescompose::Top>
    : public ::fidl::internal::WireEventHandlerInterface<
          ::test_transitivedependenciescompose::Top> {
 public:
  WireSyncEventHandler() = default;

  // Method called when an unknown event is found. This methods gives the status
  // which, in this case, is returned by HandleOneEvent.
  virtual zx_status_t Unknown() = 0;

  // Handle all possible events defined in this protocol.
  // Blocks to consume exactly one message from the channel, then call the
  // corresponding virtual method.
  ::fidl::Result HandleOneEvent(
      ::fidl::UnownedClientEnd<::test_transitivedependenciescompose::Top>
          client_end);
};

template <>
class ::fidl::internal::WireEventDispatcher<
    ::test_transitivedependenciescompose::Top>
    final : public ::fidl::internal::IncomingEventDispatcher<
                ::fidl::WireAsyncEventHandler<
                    ::test_transitivedependenciescompose::Top>> {
 public:
  explicit WireEventDispatcher(
      ::fidl::WireAsyncEventHandler<::test_transitivedependenciescompose::Top>*
          event_handler)
      : IncomingEventDispatcher(event_handler) {}

 private:
  std::optional<::fidl::UnbindInfo> DispatchEvent(
      ::fidl::IncomingMessage& msg,
      ::fidl::internal::IncomingTransportContext transport_context) override;
};

// Methods to make a sync FIDL call directly on an unowned channel or a
// const reference to a
// |fidl::ClientEnd<::test_transitivedependenciescompose::Top>|, avoiding
// setting up a client.
template <>
class ::fidl::internal::WireSyncClientImpl<
    ::test_transitivedependenciescompose::Top>
    final : public ::fidl::internal::SyncEndpointManagedVeneer<
                ::fidl::internal::WireSyncClientImpl<
                    ::test_transitivedependenciescompose::Top>> {
 public:
  // Allocates 40 bytes of message buffer on the stack. No heap allocation
  // necessary.
  ::fidl::WireResult<::test_transitivedependenciescompose::Top::GetFoo>
  GetFoo() {
    ::fidl::WireRequest<::test_transitivedependenciescompose::Top::GetFoo>
        _request{};
    return ::fidl::WireResult<
        ::test_transitivedependenciescompose::Top::GetFoo>(_client_end(),
                                                           &_request);
  }

 private:
  ::fidl::UnownedClientEnd<::test_transitivedependenciescompose::Top>
  _client_end() const {
    return ::fidl::UnownedClientEnd<::test_transitivedependenciescompose::Top>(
        _channel());
  }
};

template <>
class ::fidl::internal::WireSyncBufferClientImpl<
    ::test_transitivedependenciescompose::Top>
    final : public ::fidl::internal::SyncEndpointBufferVeneer<
                ::fidl::internal::WireSyncBufferClientImpl<
                    ::test_transitivedependenciescompose::Top>> {
 public:
  // Caller provides the backing storage for FIDL message via an argument to
  // `.buffer()`.
  ::fidl::WireUnownedResult<::test_transitivedependenciescompose::Top::GetFoo>
  GetFoo() {
    ::fidl::WireRequest<::test_transitivedependenciescompose::Top::GetFoo>
        _request{};
    return ::fidl::WireUnownedResult<
        ::test_transitivedependenciescompose::Top::GetFoo>(
        _client_end(), _allocator(), &_request);
  }

 private:
  ::fidl::UnownedClientEnd<::test_transitivedependenciescompose::Top>
  _client_end() const {
    return ::fidl::UnownedClientEnd<::test_transitivedependenciescompose::Top>(
        _channel());
  }
};

template <>
class ::fidl::internal::WireCompleterBase<
    ::test_transitivedependenciescompose::Top::GetFoo>
    : public ::fidl::CompleterBase {
 public:
  // In the following methods, the return value indicates internal errors during
  // the reply, such as encoding or writing to the transport.
  // Note that any error will automatically lead to the destruction of the
  // binding, after which the |on_unbound| callback will be triggered with a
  // detailed reason.
  //
  // See //zircon/system/ulib/fidl/include/lib/fidl/llcpp/server.h.
  //
  // Because the reply status is identical to the unbinding status, it can be
  // safely ignored.
  ::fidl::Result Reply(const ::test_bottom::wire::Foo& foo);
  ::fidl::Result Reply(::fidl::BufferSpan _buffer,
                       const ::test_bottom::wire::Foo& foo);

 protected:
  using ::fidl::CompleterBase::CompleterBase;
};

template <>
struct ::fidl::internal::WireMethodTypes<
    ::test_transitivedependenciescompose::Top::GetFoo> {
  using Completer = fidl::Completer<::fidl::internal::WireCompleterBase<
      ::test_transitivedependenciescompose::Top::GetFoo>>;
};

// Pure-virtual interface to be implemented by a server.
// This interface uses typed channels (i.e. |fidl::ClientEnd<SomeProtocol>|
// and |fidl::ServerEnd<SomeProtocol>|).
template <>
class ::fidl::WireServer<::test_transitivedependenciescompose::Top>
    : public ::fidl::internal::IncomingMessageDispatcher {
 public:
  WireServer() = default;
  virtual ~WireServer() = default;

  // The FIDL protocol type that is implemented by this server.
  using _EnclosingProtocol = ::test_transitivedependenciescompose::Top;

  using GetFooCompleter = ::fidl::internal::WireCompleter<
      ::test_transitivedependenciescompose::Top::GetFoo>;
  using GetFooRequestView = ::fidl::internal::WireRequestView<
      ::test_transitivedependenciescompose::Top::GetFoo>;

  virtual void GetFoo(GetFooRequestView request,
                      GetFooCompleter::Sync& _completer) = 0;

 private:
  void dispatch_message(
      ::fidl::IncomingMessage&& msg, ::fidl::Transaction* txn,
      ::fidl::internal::IncomingTransportContext transport_context) final;
};
#endif  // __Fuchsia__

namespace fidl {

template <>
struct IsFidlType<
    ::fidl::WireRequest<::test_transitivedependenciescompose::Top::GetFoo>>
    : public std::true_type {};
template <>
struct IsFidlMessage<
    ::fidl::WireRequest<::test_transitivedependenciescompose::Top::GetFoo>>
    : public std::true_type {};
static_assert(
    sizeof(::fidl::WireRequest<
           ::test_transitivedependenciescompose::Top::GetFoo>) ==
    ::fidl::WireRequest<
        ::test_transitivedependenciescompose::Top::GetFoo>::PrimarySize);

template <>
struct IsFidlType<
    ::fidl::WireResponse<::test_transitivedependenciescompose::Top::GetFoo>>
    : public std::true_type {};
template <>
struct IsFidlMessage<
    ::fidl::WireResponse<::test_transitivedependenciescompose::Top::GetFoo>>
    : public std::true_type {};
static_assert(
    sizeof(::fidl::WireResponse<
           ::test_transitivedependenciescompose::Top::GetFoo>) ==
    ::fidl::WireResponse<
        ::test_transitivedependenciescompose::Top::GetFoo>::PrimarySize);
static_assert(
    offsetof(
        ::fidl::WireResponse<::test_transitivedependenciescompose::Top::GetFoo>,
        foo) == 16);

#ifdef __Fuchsia__
}  // namespace fidl

template <>
class ::fidl::internal::WireClientImpl<
    ::test_transitivedependenciescompose::Top>
    final : public ::fidl::internal::ClientBase {
 public:
  // Asynchronous variant of |Top.GetFoo()|.
  // Allocates 16 bytes of request buffer on the stack. The callback is stored
  // on the heap.
  void GetFoo(::fidl::WireClientCallback<
              ::test_transitivedependenciescompose::Top::GetFoo>
                  _cb);

  void GetFoo(
      ::fit::callback<
          void(::fidl::WireResponse<
               ::test_transitivedependenciescompose::Top::GetFoo>* response)>
          _cb);

  // Asynchronous variant of |Top.GetFoo()|.
  // Caller provides the backing storage for FIDL message via request buffer.
  // Ownership of |_context| is given unsafely to the binding until |OnError|
  // or |OnReply| are called on it.
  void GetFoo(::fidl::WireResponseContext<
              ::test_transitivedependenciescompose::Top::GetFoo>* _context);

  // Synchronous variant of |GetFoo.GetFoo()|.
  // Allocates 40 bytes of message buffer on the stack. No heap allocation
  // necessary.
  ::fidl::WireResult<::test_transitivedependenciescompose::Top::GetFoo>
  GetFoo_Sync();

  // Synchronous variant of |GetFoo.GetFoo()|.
  // Caller provides the backing storage for FIDL message via request and
  // response buffers.
  ::fidl::WireUnownedResult<::test_transitivedependenciescompose::Top::GetFoo>
  GetFoo_Sync(::fidl::BufferSpan _buffer_span);
  WireClientImpl() = default;
};

template <>
class ::fidl::internal::WireWeakOnewayBufferClientImpl<
    ::test_transitivedependenciescompose::Top>
    : public ::fidl::internal::BufferClientImplBase {
 public:
  using BufferClientImplBase::BufferClientImplBase;
};

template <>
class ::fidl::internal::WireWeakAsyncBufferClientImpl<
    ::test_transitivedependenciescompose::Top>
    final : public ::fidl::internal::WireWeakOnewayBufferClientImpl<
                ::test_transitivedependenciescompose::Top> {
 public:
  using WireWeakOnewayBufferClientImpl::WireWeakOnewayBufferClientImpl;

  // Caller provides the backing storage for FIDL message.
  void GetFoo(::fidl::WireResponseContext<
              ::test_transitivedependenciescompose::Top::GetFoo>* _context);
};
namespace fidl {
#endif  // __Fuchsia__

}  // namespace fidl
#ifdef __Fuchsia__
// |EventSender| owns a server endpoint of a channel speaking
// the Top protocol, and can send events in that protocol.
template <>
class ::fidl::WireEventSender<::test_transitivedependenciescompose::Top> {
 public:
  // Constructs an event sender with an invalid channel.
  WireEventSender() = default;

  explicit WireEventSender(
      ::fidl::ServerEnd<::test_transitivedependenciescompose::Top> server_end)
      : server_end_(std::move(server_end)) {}

  // The underlying server channel endpoint, which may be replaced at run-time.
  const ::fidl::ServerEnd<::test_transitivedependenciescompose::Top>&
  server_end() const {
    return server_end_;
  }
  ::fidl::ServerEnd<::test_transitivedependenciescompose::Top>& server_end() {
    return server_end_;
  }

  const ::zx::channel& channel() const { return server_end_.channel(); }
  ::zx::channel& channel() { return server_end_.channel(); }

  // Whether the underlying channel is valid.
  bool is_valid() const { return server_end_.is_valid(); }

 private:
  ::fidl::ServerEnd<::test_transitivedependenciescompose::Top> server_end_;
};

template <>
class ::fidl::internal::WireWeakEventSender<
    ::test_transitivedependenciescompose::Top> {
 public:
  WireWeakEventSender(
      std::weak_ptr<::fidl::internal::AsyncServerBinding>&& binding)
      : inner_(std::move(binding)) {}

 private:
  friend ServerBindingRefImpl<
      ::test_transitivedependenciescompose::Top,
      typename ::test_transitivedependenciescompose::Top::Transport>;

  ::fidl::internal::WeakEventSenderInner inner_;
};
#endif  // __Fuchsia__
