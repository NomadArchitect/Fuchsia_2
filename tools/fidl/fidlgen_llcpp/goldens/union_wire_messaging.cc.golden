// WARNING: This file is machine generated by fidlgen.

#include <fidl/fidl.test.union/cpp/wire_messaging.h>

#include <memory>

namespace fidl_test_union {
[[maybe_unused]] constexpr uint64_t
    kTestProtocol_StrictXUnionHenceResponseMayBeStackAllocated_Ordinal =
        8393311445612289086lu;

extern "C" const fidl_type_t
    fidl_test_union_TestProtocolStrictXUnionHenceResponseMayBeStackAllocatedRequestTable;

extern "C" const fidl_type_t
    fidl_test_union_TestProtocolStrictXUnionHenceResponseMayBeStackAllocatedResponseTable;

[[maybe_unused]] constexpr uint64_t
    kTestProtocol_FlexibleXUnionHenceResponseMustBeHeapAllocated_Ordinal =
        6296412872266712530lu;

extern "C" const fidl_type_t
    fidl_test_union_TestProtocolFlexibleXUnionHenceResponseMustBeHeapAllocatedRequestTable;

extern "C" const fidl_type_t
    fidl_test_union_TestProtocolFlexibleXUnionHenceResponseMustBeHeapAllocatedResponseTable;
#ifdef __Fuchsia__
}  // namespace fidl_test_union
::fidl::WireResult<::fidl_test_union::TestProtocol::
                       StrictXUnionHenceResponseMayBeStackAllocated>::
    WireResult(
        ::fidl::UnownedClientEnd<::fidl_test_union::TestProtocol> _client) {
  FIDL_INTERNAL_DISABLE_AUTO_VAR_INIT
  ::fidl::OwnedEncodedMessage<
      ::fidl::WireRequest<::fidl_test_union::TestProtocol::
                              StrictXUnionHenceResponseMayBeStackAllocated>>
      _request(::fidl::internal::AllowUnownedInputRef{});
  auto& _outgoing = _request.GetOutgoingMessage();
  _outgoing.Call<
      ::fidl::WireResponse<::fidl_test_union::TestProtocol::
                               StrictXUnionHenceResponseMayBeStackAllocated>>(
      _client.channel(), bytes_.data(), static_cast<uint32_t>(bytes_.size()));
  SetResult(_outgoing);
}

::fidl::WireResult<::fidl_test_union::TestProtocol::
                       StrictXUnionHenceResponseMayBeStackAllocated>::
    WireResult(
        ::fidl::UnownedClientEnd<::fidl_test_union::TestProtocol> _client,
        zx_time_t _deadline) {
  FIDL_INTERNAL_DISABLE_AUTO_VAR_INIT
  ::fidl::OwnedEncodedMessage<
      ::fidl::WireRequest<::fidl_test_union::TestProtocol::
                              StrictXUnionHenceResponseMayBeStackAllocated>>
      _request(::fidl::internal::AllowUnownedInputRef{});
  auto& _outgoing = _request.GetOutgoingMessage();
  _outgoing.Call<
      ::fidl::WireResponse<::fidl_test_union::TestProtocol::
                               StrictXUnionHenceResponseMayBeStackAllocated>>(
      _client.channel(), bytes_.data(), static_cast<uint32_t>(bytes_.size()),
      _deadline);
  SetResult(_outgoing);
}
namespace fidl_test_union {
#endif  // __Fuchsia__

#ifdef __Fuchsia__
}  // namespace fidl_test_union
::fidl::WireUnownedResult<::fidl_test_union::TestProtocol::
                              StrictXUnionHenceResponseMayBeStackAllocated>::
    WireUnownedResult(
        ::fidl::UnownedClientEnd<::fidl_test_union::TestProtocol> _client,
        uint8_t* _response_bytes, uint32_t _response_byte_capacity)
    : bytes_(_response_bytes) {
  FIDL_INTERNAL_DISABLE_AUTO_VAR_INIT
  ::fidl::OwnedEncodedMessage<
      ::fidl::WireRequest<::fidl_test_union::TestProtocol::
                              StrictXUnionHenceResponseMayBeStackAllocated>>
      _request(::fidl::internal::AllowUnownedInputRef{});
  auto& _outgoing = _request.GetOutgoingMessage();
  _outgoing.Call<
      ::fidl::WireResponse<::fidl_test_union::TestProtocol::
                               StrictXUnionHenceResponseMayBeStackAllocated>>(
      _client.channel(), _response_bytes, _response_byte_capacity);
  ::fidl::Result::operator=(_outgoing);
}
namespace fidl_test_union {
#endif  // __Fuchsia__

#ifdef __Fuchsia__
}  // namespace fidl_test_union
::fidl::WireResult<::fidl_test_union::TestProtocol::
                       FlexibleXUnionHenceResponseMustBeHeapAllocated>::
    WireResult(
        ::fidl::UnownedClientEnd<::fidl_test_union::TestProtocol> _client) {
  FIDL_INTERNAL_DISABLE_AUTO_VAR_INIT
  ::fidl::OwnedEncodedMessage<
      ::fidl::WireRequest<::fidl_test_union::TestProtocol::
                              FlexibleXUnionHenceResponseMustBeHeapAllocated>>
      _request(::fidl::internal::AllowUnownedInputRef{});
  auto& _outgoing = _request.GetOutgoingMessage();
  _outgoing.Call<
      ::fidl::WireResponse<::fidl_test_union::TestProtocol::
                               FlexibleXUnionHenceResponseMustBeHeapAllocated>>(
      _client.channel(), bytes_.data(), static_cast<uint32_t>(bytes_.size()));
  SetResult(_outgoing);
}

::fidl::WireResult<::fidl_test_union::TestProtocol::
                       FlexibleXUnionHenceResponseMustBeHeapAllocated>::
    WireResult(
        ::fidl::UnownedClientEnd<::fidl_test_union::TestProtocol> _client,
        zx_time_t _deadline) {
  FIDL_INTERNAL_DISABLE_AUTO_VAR_INIT
  ::fidl::OwnedEncodedMessage<
      ::fidl::WireRequest<::fidl_test_union::TestProtocol::
                              FlexibleXUnionHenceResponseMustBeHeapAllocated>>
      _request(::fidl::internal::AllowUnownedInputRef{});
  auto& _outgoing = _request.GetOutgoingMessage();
  _outgoing.Call<
      ::fidl::WireResponse<::fidl_test_union::TestProtocol::
                               FlexibleXUnionHenceResponseMustBeHeapAllocated>>(
      _client.channel(), bytes_.data(), static_cast<uint32_t>(bytes_.size()),
      _deadline);
  SetResult(_outgoing);
}
namespace fidl_test_union {
#endif  // __Fuchsia__

#ifdef __Fuchsia__
}  // namespace fidl_test_union
::fidl::WireUnownedResult<::fidl_test_union::TestProtocol::
                              FlexibleXUnionHenceResponseMustBeHeapAllocated>::
    WireUnownedResult(
        ::fidl::UnownedClientEnd<::fidl_test_union::TestProtocol> _client,
        uint8_t* _response_bytes, uint32_t _response_byte_capacity)
    : bytes_(_response_bytes) {
  FIDL_INTERNAL_DISABLE_AUTO_VAR_INIT
  ::fidl::OwnedEncodedMessage<
      ::fidl::WireRequest<::fidl_test_union::TestProtocol::
                              FlexibleXUnionHenceResponseMustBeHeapAllocated>>
      _request(::fidl::internal::AllowUnownedInputRef{});
  auto& _outgoing = _request.GetOutgoingMessage();
  _outgoing.Call<
      ::fidl::WireResponse<::fidl_test_union::TestProtocol::
                               FlexibleXUnionHenceResponseMustBeHeapAllocated>>(
      _client.channel(), _response_bytes, _response_byte_capacity);
  ::fidl::Result::operator=(_outgoing);
}
namespace fidl_test_union {
#endif  // __Fuchsia__

}  // namespace fidl_test_union
#ifdef __Fuchsia__

::fidl::WireResponseContext<
    ::fidl_test_union::TestProtocol::
        StrictXUnionHenceResponseMayBeStackAllocated>::WireResponseContext()
    : ::fidl::internal::ResponseContext(
          ::fidl_test_union::
              kTestProtocol_StrictXUnionHenceResponseMayBeStackAllocated_Ordinal) {
}

::cpp17::optional<::fidl::UnbindInfo>
fidl::WireResponseContext<::fidl_test_union::TestProtocol::
                              StrictXUnionHenceResponseMayBeStackAllocated>::
    OnRawResult(::fidl::IncomingMessage&& msg) {
  if (unlikely(!msg.ok())) {
    ::fidl::WireUnownedResult<::fidl_test_union::TestProtocol::
                                  StrictXUnionHenceResponseMayBeStackAllocated>
        result{msg.error()};
    OnResult(result);
    return cpp17::nullopt;
  }
  ::fidl::DecodedMessage<
      ::fidl::WireResponse<::fidl_test_union::TestProtocol::
                               StrictXUnionHenceResponseMayBeStackAllocated>>
      decoded{std::move(msg)};
  ::fidl::Result maybe_error = decoded;
  ::fidl::WireUnownedResult<::fidl_test_union::TestProtocol::
                                StrictXUnionHenceResponseMayBeStackAllocated>
      result{std::move(decoded)};
  OnResult(result);
  if (unlikely(!maybe_error.ok())) {
    return ::fidl::UnbindInfo(maybe_error);
  }
  return cpp17::nullopt;
}
#endif  // __Fuchsia__

#ifdef __Fuchsia__

::fidl::WireResponseContext<
    ::fidl_test_union::TestProtocol::
        FlexibleXUnionHenceResponseMustBeHeapAllocated>::WireResponseContext()
    : ::fidl::internal::ResponseContext(
          ::fidl_test_union::
              kTestProtocol_FlexibleXUnionHenceResponseMustBeHeapAllocated_Ordinal) {
}

::cpp17::optional<::fidl::UnbindInfo>
fidl::WireResponseContext<::fidl_test_union::TestProtocol::
                              FlexibleXUnionHenceResponseMustBeHeapAllocated>::
    OnRawResult(::fidl::IncomingMessage&& msg) {
  if (unlikely(!msg.ok())) {
    ::fidl::WireUnownedResult<
        ::fidl_test_union::TestProtocol::
            FlexibleXUnionHenceResponseMustBeHeapAllocated>
        result{msg.error()};
    OnResult(result);
    return cpp17::nullopt;
  }
  ::fidl::DecodedMessage<
      ::fidl::WireResponse<::fidl_test_union::TestProtocol::
                               FlexibleXUnionHenceResponseMustBeHeapAllocated>>
      decoded{std::move(msg)};
  ::fidl::Result maybe_error = decoded;
  ::fidl::WireUnownedResult<::fidl_test_union::TestProtocol::
                                FlexibleXUnionHenceResponseMustBeHeapAllocated>
      result{std::move(decoded)};
  OnResult(result);
  if (unlikely(!maybe_error.ok())) {
    return ::fidl::UnbindInfo(maybe_error);
  }
  return cpp17::nullopt;
}
#endif  // __Fuchsia__

#ifdef __Fuchsia__

void fidl::internal::WireClientImpl<::fidl_test_union::TestProtocol>::
    StrictXUnionHenceResponseMayBeStackAllocated(
        ::fidl::WireClientCallback<
            ::fidl_test_union::TestProtocol::
                StrictXUnionHenceResponseMayBeStackAllocated>
            _cb) {
  using Callback = decltype(_cb);
  class ResponseContext final
      : public ::fidl::WireResponseContext<
            ::fidl_test_union::TestProtocol::
                StrictXUnionHenceResponseMayBeStackAllocated> {
   public:
    ResponseContext(Callback cb) : cb_(std::move(cb)) {}

    void OnResult(::fidl::WireUnownedResult<
                  ::fidl_test_union::TestProtocol::
                      StrictXUnionHenceResponseMayBeStackAllocated>& result)
        override {
      cb_(result);
      delete this;
    }

   private:
    Callback cb_;
  };

  auto* _context = new ResponseContext(std::move(_cb));
  FIDL_INTERNAL_DISABLE_AUTO_VAR_INIT
  ::fidl::WireRequest<::fidl_test_union::TestProtocol::
                          StrictXUnionHenceResponseMayBeStackAllocated>::
      OwnedEncodedMessage _request(::fidl::internal::AllowUnownedInputRef{});
  ::fidl::internal::ClientBase::SendTwoWay(_request.GetOutgoingMessage(),
                                           _context);
}

void fidl::internal::WireClientImpl<::fidl_test_union::TestProtocol>::
    StrictXUnionHenceResponseMayBeStackAllocated(
        ::fit::callback<
            void(::fidl::WireResponse<
                 ::fidl_test_union::TestProtocol::
                     StrictXUnionHenceResponseMayBeStackAllocated>* response)>
            _cb) {
  using Callback = decltype(_cb);
  class ResponseContext final
      : public ::fidl::WireResponseContext<
            ::fidl_test_union::TestProtocol::
                StrictXUnionHenceResponseMayBeStackAllocated> {
   public:
    ResponseContext(Callback cb) : cb_(std::move(cb)) {}

    void OnResult(::fidl::WireUnownedResult<
                  ::fidl_test_union::TestProtocol::
                      StrictXUnionHenceResponseMayBeStackAllocated>& result)
        override {
      if (result.ok()) {
        ::fidl::WireResponse<::fidl_test_union::TestProtocol::
                                 StrictXUnionHenceResponseMayBeStackAllocated>*
            response = result.Unwrap();
        cb_(response);
      }
      delete this;
    }

   private:
    Callback cb_;
  };

  auto* _context = new ResponseContext(std::move(_cb));
  FIDL_INTERNAL_DISABLE_AUTO_VAR_INIT
  ::fidl::WireRequest<::fidl_test_union::TestProtocol::
                          StrictXUnionHenceResponseMayBeStackAllocated>::
      OwnedEncodedMessage _request(::fidl::internal::AllowUnownedInputRef{});
  ::fidl::internal::ClientBase::SendTwoWay(_request.GetOutgoingMessage(),
                                           _context);
}
void fidl::internal::WireClientImpl<::fidl_test_union::TestProtocol>::
    StrictXUnionHenceResponseMayBeStackAllocated(
        ::fidl::WireResponseContext<
            ::fidl_test_union::TestProtocol::
                StrictXUnionHenceResponseMayBeStackAllocated>* _context) {
  FIDL_INTERNAL_DISABLE_AUTO_VAR_INIT
  ::fidl::WireRequest<::fidl_test_union::TestProtocol::
                          StrictXUnionHenceResponseMayBeStackAllocated>::
      OwnedEncodedMessage _request(::fidl::internal::AllowUnownedInputRef{});
  ::fidl::internal::ClientBase::SendTwoWay(_request.GetOutgoingMessage(),
                                           _context);
}
::fidl::WireResult<::fidl_test_union::TestProtocol::
                       StrictXUnionHenceResponseMayBeStackAllocated>
fidl::internal::WireClientImpl<::fidl_test_union::TestProtocol>::
    StrictXUnionHenceResponseMayBeStackAllocated_Sync() {
  return ::fidl::internal::ClientBase::MakeSyncCallWith(
      [&](std::shared_ptr<::fidl::internal::AnyTransport> _transport) {
        return ::fidl::WireResult<
            ::fidl_test_union::TestProtocol::
                StrictXUnionHenceResponseMayBeStackAllocated>(
            ::fidl::UnownedClientEnd<::fidl_test_union::TestProtocol>(
                _transport->get<fidl::internal::ChannelTransport>()));
      });
}
::fidl::WireUnownedResult<::fidl_test_union::TestProtocol::
                              StrictXUnionHenceResponseMayBeStackAllocated>
fidl::internal::WireClientImpl<::fidl_test_union::TestProtocol>::
    StrictXUnionHenceResponseMayBeStackAllocated_Sync(
        ::fidl::BufferSpan _response_buffer) {
  return ::fidl::internal::ClientBase::MakeSyncCallWith(
      [&](std::shared_ptr<::fidl::internal::AnyTransport> _transport) {
        return ::fidl::WireUnownedResult<
            ::fidl_test_union::TestProtocol::
                StrictXUnionHenceResponseMayBeStackAllocated>(
            ::fidl::UnownedClientEnd<::fidl_test_union::TestProtocol>(
                _transport->get<fidl::internal::ChannelTransport>()),
            _response_buffer.data, _response_buffer.capacity);
      });
}
void fidl::internal::WireClientImpl<::fidl_test_union::TestProtocol>::
    FlexibleXUnionHenceResponseMustBeHeapAllocated(
        ::fidl::WireClientCallback<
            ::fidl_test_union::TestProtocol::
                FlexibleXUnionHenceResponseMustBeHeapAllocated>
            _cb) {
  using Callback = decltype(_cb);
  class ResponseContext final
      : public ::fidl::WireResponseContext<
            ::fidl_test_union::TestProtocol::
                FlexibleXUnionHenceResponseMustBeHeapAllocated> {
   public:
    ResponseContext(Callback cb) : cb_(std::move(cb)) {}

    void OnResult(::fidl::WireUnownedResult<
                  ::fidl_test_union::TestProtocol::
                      FlexibleXUnionHenceResponseMustBeHeapAllocated>& result)
        override {
      cb_(result);
      delete this;
    }

   private:
    Callback cb_;
  };

  auto* _context = new ResponseContext(std::move(_cb));
  FIDL_INTERNAL_DISABLE_AUTO_VAR_INIT
  ::fidl::WireRequest<::fidl_test_union::TestProtocol::
                          FlexibleXUnionHenceResponseMustBeHeapAllocated>::
      OwnedEncodedMessage _request(::fidl::internal::AllowUnownedInputRef{});
  ::fidl::internal::ClientBase::SendTwoWay(_request.GetOutgoingMessage(),
                                           _context);
}

void fidl::internal::WireClientImpl<::fidl_test_union::TestProtocol>::
    FlexibleXUnionHenceResponseMustBeHeapAllocated(
        ::fit::callback<
            void(::fidl::WireResponse<
                 ::fidl_test_union::TestProtocol::
                     FlexibleXUnionHenceResponseMustBeHeapAllocated>* response)>
            _cb) {
  using Callback = decltype(_cb);
  class ResponseContext final
      : public ::fidl::WireResponseContext<
            ::fidl_test_union::TestProtocol::
                FlexibleXUnionHenceResponseMustBeHeapAllocated> {
   public:
    ResponseContext(Callback cb) : cb_(std::move(cb)) {}

    void OnResult(::fidl::WireUnownedResult<
                  ::fidl_test_union::TestProtocol::
                      FlexibleXUnionHenceResponseMustBeHeapAllocated>& result)
        override {
      if (result.ok()) {
        ::fidl::WireResponse<
            ::fidl_test_union::TestProtocol::
                FlexibleXUnionHenceResponseMustBeHeapAllocated>* response =
            result.Unwrap();
        cb_(response);
      }
      delete this;
    }

   private:
    Callback cb_;
  };

  auto* _context = new ResponseContext(std::move(_cb));
  FIDL_INTERNAL_DISABLE_AUTO_VAR_INIT
  ::fidl::WireRequest<::fidl_test_union::TestProtocol::
                          FlexibleXUnionHenceResponseMustBeHeapAllocated>::
      OwnedEncodedMessage _request(::fidl::internal::AllowUnownedInputRef{});
  ::fidl::internal::ClientBase::SendTwoWay(_request.GetOutgoingMessage(),
                                           _context);
}
void fidl::internal::WireClientImpl<::fidl_test_union::TestProtocol>::
    FlexibleXUnionHenceResponseMustBeHeapAllocated(
        ::fidl::WireResponseContext<
            ::fidl_test_union::TestProtocol::
                FlexibleXUnionHenceResponseMustBeHeapAllocated>* _context) {
  FIDL_INTERNAL_DISABLE_AUTO_VAR_INIT
  ::fidl::WireRequest<::fidl_test_union::TestProtocol::
                          FlexibleXUnionHenceResponseMustBeHeapAllocated>::
      OwnedEncodedMessage _request(::fidl::internal::AllowUnownedInputRef{});
  ::fidl::internal::ClientBase::SendTwoWay(_request.GetOutgoingMessage(),
                                           _context);
}
::fidl::WireResult<::fidl_test_union::TestProtocol::
                       FlexibleXUnionHenceResponseMustBeHeapAllocated>
fidl::internal::WireClientImpl<::fidl_test_union::TestProtocol>::
    FlexibleXUnionHenceResponseMustBeHeapAllocated_Sync() {
  return ::fidl::internal::ClientBase::MakeSyncCallWith(
      [&](std::shared_ptr<::fidl::internal::AnyTransport> _transport) {
        return ::fidl::WireResult<
            ::fidl_test_union::TestProtocol::
                FlexibleXUnionHenceResponseMustBeHeapAllocated>(
            ::fidl::UnownedClientEnd<::fidl_test_union::TestProtocol>(
                _transport->get<fidl::internal::ChannelTransport>()));
      });
}
::fidl::WireUnownedResult<::fidl_test_union::TestProtocol::
                              FlexibleXUnionHenceResponseMustBeHeapAllocated>
fidl::internal::WireClientImpl<::fidl_test_union::TestProtocol>::
    FlexibleXUnionHenceResponseMustBeHeapAllocated_Sync(
        ::fidl::BufferSpan _response_buffer) {
  return ::fidl::internal::ClientBase::MakeSyncCallWith(
      [&](std::shared_ptr<::fidl::internal::AnyTransport> _transport) {
        return ::fidl::WireUnownedResult<
            ::fidl_test_union::TestProtocol::
                FlexibleXUnionHenceResponseMustBeHeapAllocated>(
            ::fidl::UnownedClientEnd<::fidl_test_union::TestProtocol>(
                _transport->get<fidl::internal::ChannelTransport>()),
            _response_buffer.data, _response_buffer.capacity);
      });
}

std::optional<::fidl::UnbindInfo>
fidl::internal::WireClientImpl<::fidl_test_union::TestProtocol>::DispatchEvent(
    fidl::IncomingMessage& msg,
    ::fidl::internal::AsyncEventHandler* maybe_event_handler) {
  return ::fidl::UnbindInfo::UnknownOrdinal();
}
#endif  // __Fuchsia__

#ifdef __Fuchsia__

constexpr ::fidl::internal::MethodEntry fidl::internal::WireServerDispatcher<
    ::fidl_test_union::TestProtocol>::entries_[] = {
    {
        ::fidl_test_union::
            kTestProtocol_StrictXUnionHenceResponseMayBeStackAllocated_Ordinal,
        [](void* interface, ::fidl::IncomingMessage&& msg,
           ::fidl::Transaction* txn) {
          auto* primary = reinterpret_cast<::fidl::WireRequest<
              ::fidl_test_union::TestProtocol::
                  StrictXUnionHenceResponseMayBeStackAllocated>*>(msg.bytes());
          ::fidl::internal::WireCompleter<
              ::fidl_test_union::TestProtocol::
                  StrictXUnionHenceResponseMayBeStackAllocated>::Sync
              completer(txn);
          reinterpret_cast<
              ::fidl::WireServer<::fidl_test_union::TestProtocol>*>(interface)
              ->StrictXUnionHenceResponseMayBeStackAllocated(primary,
                                                             completer);
          return ZX_OK;
        },
    },
    {
        ::fidl_test_union::
            kTestProtocol_FlexibleXUnionHenceResponseMustBeHeapAllocated_Ordinal,
        [](void* interface, ::fidl::IncomingMessage&& msg,
           ::fidl::Transaction* txn) {
          auto* primary = reinterpret_cast<::fidl::WireRequest<
              ::fidl_test_union::TestProtocol::
                  FlexibleXUnionHenceResponseMustBeHeapAllocated>*>(
              msg.bytes());
          ::fidl::internal::WireCompleter<
              ::fidl_test_union::TestProtocol::
                  FlexibleXUnionHenceResponseMustBeHeapAllocated>::Sync
              completer(txn);
          reinterpret_cast<
              ::fidl::WireServer<::fidl_test_union::TestProtocol>*>(interface)
              ->FlexibleXUnionHenceResponseMustBeHeapAllocated(primary,
                                                               completer);
          return ZX_OK;
        },
    },
};

const ::fidl::internal::MethodEntry* fidl::internal::WireServerDispatcher<
    ::fidl_test_union::TestProtocol>::entries_end_ = &entries_[2];

::fidl::DispatchResult fidl::internal::
    WireServerDispatcher<::fidl_test_union::TestProtocol>::TryDispatch(
        ::fidl::WireServer<::fidl_test_union::TestProtocol>* impl,
        ::fidl::IncomingMessage& msg, ::fidl::Transaction* txn) {
  return ::fidl::internal::TryDispatch(impl, msg, txn, entries_, entries_end_);
}

void fidl::internal::WireServerDispatcher<::fidl_test_union::TestProtocol>::
    Dispatch(::fidl::WireServer<::fidl_test_union::TestProtocol>* impl,
             ::fidl::IncomingMessage&& msg, ::fidl::Transaction* txn) {
  ::fidl::internal::Dispatch(impl, msg, txn, entries_, entries_end_);
}
void fidl::WireServer<::fidl_test_union::TestProtocol>::dispatch_message(
    fidl::IncomingMessage&& msg, ::fidl::Transaction* txn) {
  ::fidl::internal::WireServerDispatcher<
      ::fidl_test_union::TestProtocol>::Dispatch(this, std::move(msg), txn);
}
#endif  // __Fuchsia__

#ifdef __Fuchsia__
::fidl::Result fidl::internal::WireCompleterBase<
    ::fidl_test_union::TestProtocol::
        StrictXUnionHenceResponseMayBeStackAllocated>::
    Reply(::fidl_test_union::wire::StrictBoundedXUnion xu) {
  FIDL_INTERNAL_DISABLE_AUTO_VAR_INIT
  ::fidl::OwnedEncodedMessage<
      ::fidl::WireResponse<::fidl_test_union::TestProtocol::
                               StrictXUnionHenceResponseMayBeStackAllocated>>
      _response{::fidl::internal::AllowUnownedInputRef{}, xu};
  return ::fidl::internal::WireCompleterBase<
      ::fidl_test_union::TestProtocol::
          StrictXUnionHenceResponseMayBeStackAllocated>::
      SendReply(&_response.GetOutgoingMessage());
}

::fidl::Result fidl::internal::WireCompleterBase<
    ::fidl_test_union::TestProtocol::
        StrictXUnionHenceResponseMayBeStackAllocated>::
    Reply(::fidl::BufferSpan _buffer,
          ::fidl_test_union::wire::StrictBoundedXUnion xu) {
  ::fidl::WireResponse<::fidl_test_union::TestProtocol::
                           StrictXUnionHenceResponseMayBeStackAllocated>::
      UnownedEncodedMessage _response(_buffer.data, _buffer.capacity, xu);
  return CompleterBase::SendReply(&_response.GetOutgoingMessage());
}
#endif  // __Fuchsia__

#ifdef __Fuchsia__
::fidl::Result fidl::internal::WireCompleterBase<
    ::fidl_test_union::TestProtocol::
        FlexibleXUnionHenceResponseMustBeHeapAllocated>::
    Reply(::fidl_test_union::wire::OlderSimpleUnion xu) {
  FIDL_INTERNAL_DISABLE_AUTO_VAR_INIT
  ::fidl::OwnedEncodedMessage<
      ::fidl::WireResponse<::fidl_test_union::TestProtocol::
                               FlexibleXUnionHenceResponseMustBeHeapAllocated>>
      _response{::fidl::internal::AllowUnownedInputRef{}, xu};
  return ::fidl::internal::WireCompleterBase<
      ::fidl_test_union::TestProtocol::
          FlexibleXUnionHenceResponseMustBeHeapAllocated>::
      SendReply(&_response.GetOutgoingMessage());
}

::fidl::Result fidl::internal::WireCompleterBase<
    ::fidl_test_union::TestProtocol::
        FlexibleXUnionHenceResponseMustBeHeapAllocated>::
    Reply(::fidl::BufferSpan _buffer,
          ::fidl_test_union::wire::OlderSimpleUnion xu) {
  ::fidl::WireResponse<::fidl_test_union::TestProtocol::
                           FlexibleXUnionHenceResponseMustBeHeapAllocated>::
      UnownedEncodedMessage _response(_buffer.data, _buffer.capacity, xu);
  return CompleterBase::SendReply(&_response.GetOutgoingMessage());
}
#endif  // __Fuchsia__

void ::fidl::WireRequest<
    ::fidl_test_union::TestProtocol::
        StrictXUnionHenceResponseMayBeStackAllocated>::_InitHeader() {
  fidl_init_txn_header(
      &_hdr, 0,
      ::fidl_test_union::
          kTestProtocol_StrictXUnionHenceResponseMayBeStackAllocated_Ordinal);
}

void ::fidl::WireResponse<
    ::fidl_test_union::TestProtocol::
        StrictXUnionHenceResponseMayBeStackAllocated>::_InitHeader() {
  fidl_init_txn_header(
      &_hdr, 0,
      ::fidl_test_union::
          kTestProtocol_StrictXUnionHenceResponseMayBeStackAllocated_Ordinal);
}

void ::fidl::WireRequest<
    ::fidl_test_union::TestProtocol::
        FlexibleXUnionHenceResponseMustBeHeapAllocated>::_InitHeader() {
  fidl_init_txn_header(
      &_hdr, 0,
      ::fidl_test_union::
          kTestProtocol_FlexibleXUnionHenceResponseMustBeHeapAllocated_Ordinal);
}

void ::fidl::WireResponse<
    ::fidl_test_union::TestProtocol::
        FlexibleXUnionHenceResponseMustBeHeapAllocated>::_InitHeader() {
  fidl_init_txn_header(
      &_hdr, 0,
      ::fidl_test_union::
          kTestProtocol_FlexibleXUnionHenceResponseMustBeHeapAllocated_Ordinal);
}

#ifdef __Fuchsia__

#endif  // __Fuchsia__
