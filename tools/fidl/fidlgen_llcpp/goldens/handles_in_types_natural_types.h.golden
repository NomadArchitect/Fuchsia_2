// WARNING: This file is machine generated by fidlgen.

#pragma once

#include <fidl/test.handlesintypes/cpp/common_types.h>
#include <fidl/test.handlesintypes/cpp/markers.h>
#include <lib/fidl/cpp/coding_traits.h>
#include <lib/fidl/cpp/internal/codable_base.h>
#include <lib/fidl/cpp/unified_messaging.h>

#include <cinttypes>
#include <string>

#ifdef __Fuchsia__

#include <lib/zx/vmo.h>

#endif  // __Fuchsia__

namespace test_handlesintypes {
class HandlesInTypes;

class TableWithHandle;

class UnionWithHandle;

#ifdef __Fuchsia__

extern "C" const fidl_type_t test_handlesintypes_UnionWithHandleTable;

class UnionWithHandle final {
 public:
  // TODO: share union tag types between wire & natural.
  enum class Tag : fidl_union_tag_t {
    kH = 1,  // 0x1
    kUnknown = ::std::numeric_limits<::fidl_union_tag_t>::max(),
  };

 private:
  using Storage = cpp17::variant<cpp17::monostate, ::zx::vmo>;
  std::shared_ptr<Storage> storage_;
  friend struct ::fidl::internal::NaturalUnionCodingTraits<
      ::test_handlesintypes::UnionWithHandle>;
  static constexpr std::array<std::optional<::fidl::HandleInformation>, 2>
      Members = {std::nullopt,
                 std::make_optional<::fidl::HandleInformation>(
                     {.object_type = ZX_OBJ_TYPE_VMO, .rights = 0x80000000})};

  explicit UnionWithHandle(std::shared_ptr<Storage> storage)
      : storage_(std::move(storage)) {}

  static constexpr size_t TagToIndex(
      ::test_handlesintypes::UnionWithHandle::Tag tag) {
    switch (tag) {
      case ::test_handlesintypes::UnionWithHandle::Tag::kH:
        return 1;
      case ::test_handlesintypes::UnionWithHandle::Tag::kUnknown:
        return 0;
    }
  }

  static constexpr ::test_handlesintypes::UnionWithHandle::Tag IndexToTag(
      size_t index) {
    switch (index) {
      case 1:
        return ::test_handlesintypes::UnionWithHandle::Tag::kH;
      default:
        return ::test_handlesintypes::UnionWithHandle::Tag::kUnknown;
    }
  }

 public:
  // Create an unknown value of this union.
  UnionWithHandle() : storage_(std::make_shared<Storage>()) {}

  UnionWithHandle(UnionWithHandle&&) noexcept = default;
  UnionWithHandle& operator=(UnionWithHandle&&) noexcept = default;

  constexpr ::test_handlesintypes::UnionWithHandle::Tag Which() const {
    return UnionWithHandle::IndexToTag(storage_->index());
  }
  static UnionWithHandle WithH(::zx::vmo val) {
    return UnionWithHandle(std::make_shared<Storage>(
        std::in_place_index_t<TagToIndex(
            ::test_handlesintypes::UnionWithHandle::Tag::kH)>{},
        std::move(val)));
  }

  const ::fidl::internal::UnionMemberView<1, Storage> h() const {
    return ::fidl::internal::UnionMemberView<1, Storage>(storage_);
  }
  ::fidl::internal::UnionMemberView<1, Storage> h() {
    return ::fidl::internal::UnionMemberView<1, Storage>(storage_);
  }
};

#endif  // __Fuchsia__

#ifdef __Fuchsia__

extern "C" const fidl_type_t test_handlesintypes_TableWithHandleTable;

class TableWithHandle final {
 public:
  struct Storage final {
    ::cpp17::optional<::zx::vmo> h{};
  };

  TableWithHandle(Storage storage) noexcept : storage_(std::move(storage)) {}
  TableWithHandle() noexcept = default;
  TableWithHandle(TableWithHandle&&) noexcept = default;
  TableWithHandle& operator=(TableWithHandle&&) noexcept = default;

  bool IsEmpty() const { return !(storage_.h.has_value()); }

  size_t MaxOrdinal() const;

  const cpp17::optional<::zx::vmo>& h() const { return storage_.h; }
  ::cpp17::optional<::zx::vmo>& h() { return storage_.h; }

 private:
  // TODO(https://fxbug.dev/91252): Box the storage.
  Storage storage_;
  friend struct ::fidl::internal::NaturalTableCodingTraits<
      ::test_handlesintypes::TableWithHandle>;
  static constexpr auto Members = std::make_tuple(std::make_tuple(
      1, &Storage::h,
      std::make_optional<::fidl::HandleInformation>(
          {.object_type = ZX_OBJ_TYPE_VMO, .rights = 0x80000000})));
};

#endif  // __Fuchsia__

#ifdef __Fuchsia__

extern "C" const fidl_type_t test_handlesintypes_HandlesInTypesTable;

class HandlesInTypes final
    : public ::fidl::internal::CodableBase<HandlesInTypes> {
 private:
  struct Storage_;

 public:
  HandlesInTypes(Storage_ storage) noexcept : storage_(std::move(storage)) {}
  HandlesInTypes(
      ::zx::vmo normal_handle, ::std::vector<::zx::vmo> handle_in_vec,
      ::std::array<::zx::vmo, 5> handle_in_array,
      ::std::vector<::std::array<::zx::vmo, 5>> handle_in_mixed_vec_array,
      ::test_handlesintypes::TableWithHandle table_with_handle,
      ::test_handlesintypes::UnionWithHandle union_with_handle) noexcept
      : storage_(
            {.normal_handle = std::move(normal_handle),
             .handle_in_vec = std::move(handle_in_vec),
             .handle_in_array = std::move(handle_in_array),
             .handle_in_mixed_vec_array = std::move(handle_in_mixed_vec_array),
             .table_with_handle = std::move(table_with_handle),
             .union_with_handle = std::move(union_with_handle)}) {}
  HandlesInTypes() : HandlesInTypes(Storage_{}) {}

  HandlesInTypes(HandlesInTypes&&) noexcept = default;
  HandlesInTypes& operator=(HandlesInTypes&&) noexcept = default;

  const ::zx::vmo& normal_handle() const { return storage_.normal_handle; }

  ::zx::vmo& normal_handle() { return storage_.normal_handle; }

  const ::std::vector<::zx::vmo>& handle_in_vec() const {
    return storage_.handle_in_vec;
  }

  ::std::vector<::zx::vmo>& handle_in_vec() { return storage_.handle_in_vec; }

  const ::std::array<::zx::vmo, 5>& handle_in_array() const {
    return storage_.handle_in_array;
  }

  ::std::array<::zx::vmo, 5>& handle_in_array() {
    return storage_.handle_in_array;
  }

  const ::std::vector<::std::array<::zx::vmo, 5>>& handle_in_mixed_vec_array()
      const {
    return storage_.handle_in_mixed_vec_array;
  }

  ::std::vector<::std::array<::zx::vmo, 5>>& handle_in_mixed_vec_array() {
    return storage_.handle_in_mixed_vec_array;
  }

  const ::test_handlesintypes::TableWithHandle& table_with_handle() const {
    return storage_.table_with_handle;
  }

  ::test_handlesintypes::TableWithHandle& table_with_handle() {
    return storage_.table_with_handle;
  }

  const ::test_handlesintypes::UnionWithHandle& union_with_handle() const {
    return storage_.union_with_handle;
  }

  ::test_handlesintypes::UnionWithHandle& union_with_handle() {
    return storage_.union_with_handle;
  }

 private:
  friend ::fidl::internal::CodableBase<HandlesInTypes>;
  friend ::fidl::CodingTraits<HandlesInTypes>;
  HandlesInTypes(::fidl::Decoder& decoder);
  template <typename Payload>
  friend auto ::fidl::internal::EncodeTransactionalMessageWithoutValidating(
      ::fidl::Encoder& encoder, Payload&& payload)
      -> ::fidl::HLCPPOutgoingMessage;
  void EncodeWithoutValidating(::fidl::Encoder& encoder, size_t offset);

  struct Storage_ final {
    ::zx::vmo normal_handle{};
    ::std::vector<::zx::vmo> handle_in_vec{};
    ::std::array<::zx::vmo, 5> handle_in_array{};
    ::std::vector<::std::array<::zx::vmo, 5>> handle_in_mixed_vec_array{};
    ::test_handlesintypes::TableWithHandle table_with_handle{};
    ::test_handlesintypes::UnionWithHandle union_with_handle{};
  };

  Storage_ storage_;
};

#endif  // __Fuchsia__

}  // namespace test_handlesintypes
namespace fidl {

#ifdef __Fuchsia__
extern "C" const fidl_type_t test_handlesintypes_HandlesInTypesTable;

template <>
struct IsResource<::test_handlesintypes::HandlesInTypes>
    : public std::true_type {};
template <>
struct IsFidlType<::test_handlesintypes::HandlesInTypes>
    : public std::true_type {};

template <>
struct ::fidl::internal::TypeTraits<::test_handlesintypes::HandlesInTypes>
    final {
 public:
  static constexpr const fidl_type_t* kCodingTable =
      &test_handlesintypes_HandlesInTypesTable;
};

template <>
struct CodingTraits<::test_handlesintypes::HandlesInTypes> {
  static constexpr size_t inline_size_v1_no_ee = 104;
  static constexpr size_t inline_size_v2 = 96;

  template <class EncoderImpl>
  static void Encode(
      EncoderImpl* encoder, ::test_handlesintypes::HandlesInTypes* value,
      size_t offset,
      cpp17::optional<HandleInformation> maybe_handle_info = cpp17::nullopt) {
    [[maybe_unused]] uint32_t field_offset;
    field_offset =
        encoder->wire_format() == ::fidl::internal::WireFormatVersion::kV1 ? 0
                                                                           : 0;
    ::fidl::Encode(encoder, &value->storage_.normal_handle,
                   offset + field_offset,
                   ::fidl::HandleInformation{
                       .object_type = ZX_OBJ_TYPE_VMO,
                       .rights = 0x80000000,
                   });
    field_offset =
        encoder->wire_format() == ::fidl::internal::WireFormatVersion::kV1 ? 8
                                                                           : 8;
    ::fidl::Encode(encoder, &value->storage_.handle_in_vec,
                   offset + field_offset,
                   ::fidl::HandleInformation{
                       .object_type = ZX_OBJ_TYPE_VMO,
                       .rights = 0x80000000,
                   });
    field_offset =
        encoder->wire_format() == ::fidl::internal::WireFormatVersion::kV1 ? 24
                                                                           : 24;
    ::fidl::Encode(encoder, &value->storage_.handle_in_array,
                   offset + field_offset,
                   ::fidl::HandleInformation{
                       .object_type = ZX_OBJ_TYPE_VMO,
                       .rights = 0x80000000,
                   });
    field_offset =
        encoder->wire_format() == ::fidl::internal::WireFormatVersion::kV1 ? 48
                                                                           : 48;
    ::fidl::Encode(encoder, &value->storage_.handle_in_mixed_vec_array,
                   offset + field_offset,
                   ::fidl::HandleInformation{
                       .object_type = ZX_OBJ_TYPE_VMO,
                       .rights = 0x80000000,
                   });
    field_offset =
        encoder->wire_format() == ::fidl::internal::WireFormatVersion::kV1 ? 64
                                                                           : 64;
    ::fidl::Encode(encoder, &value->storage_.table_with_handle,
                   offset + field_offset);
    field_offset =
        encoder->wire_format() == ::fidl::internal::WireFormatVersion::kV1 ? 80
                                                                           : 80;
    ::fidl::Encode(encoder, &value->storage_.union_with_handle,
                   offset + field_offset);
  }

  template <typename DecoderImpl>
  static void Decode(DecoderImpl* decoder,
                     ::test_handlesintypes::HandlesInTypes* value,
                     size_t offset) {
    ::fidl::Decode(decoder, &value->storage_.normal_handle, offset + 0);
    ::fidl::Decode(decoder, &value->storage_.handle_in_vec, offset + 8);
    ::fidl::Decode(decoder, &value->storage_.handle_in_array, offset + 24);
    ::fidl::Decode(decoder, &value->storage_.handle_in_mixed_vec_array,
                   offset + 48);
    ::fidl::Decode(decoder, &value->storage_.table_with_handle, offset + 64);
    ::fidl::Decode(decoder, &value->storage_.union_with_handle, offset + 80);
  }
};
#endif  // __Fuchsia__

template <>
struct IsResource<::test_handlesintypes::TableWithHandle>
    : public std::true_type {};
template <>
struct IsFidlType<::test_handlesintypes::TableWithHandle>
    : public std::true_type {};

template <>
struct CodingTraits<::test_handlesintypes::TableWithHandle>
    : public ::fidl::internal::NaturalTableCodingTraits<
          ::test_handlesintypes::TableWithHandle> {};

template <>
struct IsResource<::test_handlesintypes::UnionWithHandle>
    : public std::true_type {};
template <>
struct IsFidlType<::test_handlesintypes::UnionWithHandle>
    : public std::true_type {};

template <>
struct CodingTraits<::test_handlesintypes::UnionWithHandle> final
    : public ::fidl::internal::NaturalUnionCodingTraits<
          ::test_handlesintypes::UnionWithHandle> {};

template <>
struct CodingTraits<::test_handlesintypes::obj_type> {
  static constexpr size_t inline_size_v1_no_ee = sizeof(uint32_t);
  static constexpr size_t inline_size_v2 = sizeof(uint32_t);

  template <class EncoderImpl>
  static void Encode(
      EncoderImpl* encoder, ::test_handlesintypes::obj_type* value,
      size_t offset,
      cpp17::optional<HandleInformation> maybe_handle_info = cpp17::nullopt) {
    // TODO: encode
  }
  template <typename DecoderImpl>
  static void Decode(DecoderImpl* decoder,
                     ::test_handlesintypes::obj_type* value, size_t offset) {
    // TODO: decode
  }
};

}  // namespace fidl
