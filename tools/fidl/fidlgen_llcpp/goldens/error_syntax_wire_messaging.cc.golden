// WARNING: This file is machine generated by fidlgen.

#include <fidl/fidl.test.errorsyntax/cpp/wire_messaging.h>

#include <memory>

namespace fidl_test_errorsyntax {
[[maybe_unused]] constexpr uint64_t
    kExampleUseOfErrorSyntax_ComposedCallWhichMayFail_Ordinal =
        8210161374538322484lu;

extern "C" const fidl_type_t
    fidl_test_errorsyntax_ExampleUseOfErrorSyntaxComposedCallWhichMayFailRequestTable;

extern "C" const fidl_type_t
    fidl_test_errorsyntax_ExampleUseOfErrorSyntaxComposedCallWhichMayFailResponseTable;

[[maybe_unused]] constexpr uint64_t
    kExampleUseOfErrorSyntax_CallWhichMayFail_Ordinal = 7435809829353441431lu;

extern "C" const fidl_type_t
    fidl_test_errorsyntax_ExampleUseOfErrorSyntaxCallWhichMayFailRequestTable;

extern "C" const fidl_type_t
    fidl_test_errorsyntax_ExampleUseOfErrorSyntaxCallWhichMayFailResponseTable;
#ifdef __Fuchsia__
}  // namespace fidl_test_errorsyntax
::fidl::WireResult<::fidl_test_errorsyntax::ExampleUseOfErrorSyntax::
                       ComposedCallWhichMayFail>::
    WireResult(
        ::fidl::UnownedClientEnd<
            ::fidl_test_errorsyntax::ExampleUseOfErrorSyntax>
            client,
        ::fidl::WireRequest<::fidl_test_errorsyntax::ExampleUseOfErrorSyntax::
                                ComposedCallWhichMayFail>* request) {
  FIDL_INTERNAL_DISABLE_AUTO_VAR_INIT
  ::fidl::OwnedEncodedMessage<
      ::fidl::WireRequest<::fidl_test_errorsyntax::ExampleUseOfErrorSyntax::
                              ComposedCallWhichMayFail>>
      request_message(::fidl::internal::AllowUnownedInputRef{}, request);
  auto& outgoing = request_message.GetOutgoingMessage();
  outgoing.Call<
      ::fidl::WireResponse<::fidl_test_errorsyntax::ExampleUseOfErrorSyntax::
                               ComposedCallWhichMayFail>>(
      client.channel(), bytes_.data(), static_cast<uint32_t>(bytes_.size()));
  SetResult(outgoing);
}

::fidl::WireResult<::fidl_test_errorsyntax::ExampleUseOfErrorSyntax::
                       ComposedCallWhichMayFail>::
    WireResult(
        ::fidl::UnownedClientEnd<
            ::fidl_test_errorsyntax::ExampleUseOfErrorSyntax>
            client,
        ::fidl::WireRequest<::fidl_test_errorsyntax::ExampleUseOfErrorSyntax::
                                ComposedCallWhichMayFail>* request,
        zx_time_t deadline) {
  FIDL_INTERNAL_DISABLE_AUTO_VAR_INIT
  ::fidl::OwnedEncodedMessage<
      ::fidl::WireRequest<::fidl_test_errorsyntax::ExampleUseOfErrorSyntax::
                              ComposedCallWhichMayFail>>
      request_message(::fidl::internal::AllowUnownedInputRef{}, request);
  auto& outgoing = request_message.GetOutgoingMessage();
  outgoing.Call<
      ::fidl::WireResponse<::fidl_test_errorsyntax::ExampleUseOfErrorSyntax::
                               ComposedCallWhichMayFail>>(
      client.channel(), bytes_.data(), static_cast<uint32_t>(bytes_.size()),
      deadline);
  SetResult(outgoing);
}
namespace fidl_test_errorsyntax {
#endif  // __Fuchsia__

#ifdef __Fuchsia__
}  // namespace fidl_test_errorsyntax
::fidl::WireUnownedResult<::fidl_test_errorsyntax::ExampleUseOfErrorSyntax::
                              ComposedCallWhichMayFail>::
    WireUnownedResult(
        ::fidl::UnownedClientEnd<
            ::fidl_test_errorsyntax::ExampleUseOfErrorSyntax>
            client,
        uint8_t* request_bytes, uint32_t request_byte_capacity,
        ::fidl::WireRequest<::fidl_test_errorsyntax::ExampleUseOfErrorSyntax::
                                ComposedCallWhichMayFail>* request,
        uint8_t* response_bytes, uint32_t response_byte_capacity)
    : bytes_(response_bytes) {
  ::fidl::UnownedEncodedMessage<
      ::fidl::WireRequest<::fidl_test_errorsyntax::ExampleUseOfErrorSyntax::
                              ComposedCallWhichMayFail>>
      request_message(request_bytes, request_byte_capacity, request);
  auto& outgoing = request_message.GetOutgoingMessage();
  outgoing.Call<
      ::fidl::WireResponse<::fidl_test_errorsyntax::ExampleUseOfErrorSyntax::
                               ComposedCallWhichMayFail>>(
      client.channel(), response_bytes, response_byte_capacity);
  ::fidl::Result::operator=(outgoing);
}
namespace fidl_test_errorsyntax {
#endif  // __Fuchsia__

#ifdef __Fuchsia__
}  // namespace fidl_test_errorsyntax
::fidl::WireResult<
    ::fidl_test_errorsyntax::ExampleUseOfErrorSyntax::CallWhichMayFail>::
    WireResult(
        ::fidl::UnownedClientEnd<
            ::fidl_test_errorsyntax::ExampleUseOfErrorSyntax>
            client,
        ::fidl::WireRequest<
            ::fidl_test_errorsyntax::ExampleUseOfErrorSyntax::CallWhichMayFail>*
            request) {
  FIDL_INTERNAL_DISABLE_AUTO_VAR_INIT
  ::fidl::OwnedEncodedMessage<::fidl::WireRequest<
      ::fidl_test_errorsyntax::ExampleUseOfErrorSyntax::CallWhichMayFail>>
      request_message(::fidl::internal::AllowUnownedInputRef{}, request);
  auto& outgoing = request_message.GetOutgoingMessage();
  outgoing.Call<::fidl::WireResponse<
      ::fidl_test_errorsyntax::ExampleUseOfErrorSyntax::CallWhichMayFail>>(
      client.channel(), bytes_.data(), static_cast<uint32_t>(bytes_.size()));
  SetResult(outgoing);
}

::fidl::WireResult<
    ::fidl_test_errorsyntax::ExampleUseOfErrorSyntax::CallWhichMayFail>::
    WireResult(
        ::fidl::UnownedClientEnd<
            ::fidl_test_errorsyntax::ExampleUseOfErrorSyntax>
            client,
        ::fidl::WireRequest<
            ::fidl_test_errorsyntax::ExampleUseOfErrorSyntax::CallWhichMayFail>*
            request,
        zx_time_t deadline) {
  FIDL_INTERNAL_DISABLE_AUTO_VAR_INIT
  ::fidl::OwnedEncodedMessage<::fidl::WireRequest<
      ::fidl_test_errorsyntax::ExampleUseOfErrorSyntax::CallWhichMayFail>>
      request_message(::fidl::internal::AllowUnownedInputRef{}, request);
  auto& outgoing = request_message.GetOutgoingMessage();
  outgoing.Call<::fidl::WireResponse<
      ::fidl_test_errorsyntax::ExampleUseOfErrorSyntax::CallWhichMayFail>>(
      client.channel(), bytes_.data(), static_cast<uint32_t>(bytes_.size()),
      deadline);
  SetResult(outgoing);
}
namespace fidl_test_errorsyntax {
#endif  // __Fuchsia__

#ifdef __Fuchsia__
}  // namespace fidl_test_errorsyntax
::fidl::WireUnownedResult<
    ::fidl_test_errorsyntax::ExampleUseOfErrorSyntax::CallWhichMayFail>::
    WireUnownedResult(
        ::fidl::UnownedClientEnd<
            ::fidl_test_errorsyntax::ExampleUseOfErrorSyntax>
            client,
        uint8_t* request_bytes, uint32_t request_byte_capacity,
        ::fidl::WireRequest<
            ::fidl_test_errorsyntax::ExampleUseOfErrorSyntax::CallWhichMayFail>*
            request,
        uint8_t* response_bytes, uint32_t response_byte_capacity)
    : bytes_(response_bytes) {
  ::fidl::UnownedEncodedMessage<::fidl::WireRequest<
      ::fidl_test_errorsyntax::ExampleUseOfErrorSyntax::CallWhichMayFail>>
      request_message(request_bytes, request_byte_capacity, request);
  auto& outgoing = request_message.GetOutgoingMessage();
  outgoing.Call<::fidl::WireResponse<
      ::fidl_test_errorsyntax::ExampleUseOfErrorSyntax::CallWhichMayFail>>(
      client.channel(), response_bytes, response_byte_capacity);
  ::fidl::Result::operator=(outgoing);
}
namespace fidl_test_errorsyntax {
#endif  // __Fuchsia__

}  // namespace fidl_test_errorsyntax
#ifdef __Fuchsia__

::fidl::WireResponseContext<::fidl_test_errorsyntax::ExampleUseOfErrorSyntax::
                                ComposedCallWhichMayFail>::WireResponseContext()
    : ::fidl::internal::ResponseContext(
          ::fidl_test_errorsyntax::
              kExampleUseOfErrorSyntax_ComposedCallWhichMayFail_Ordinal) {}

::cpp17::optional<::fidl::UnbindInfo> fidl::WireResponseContext<
    ::fidl_test_errorsyntax::ExampleUseOfErrorSyntax::
        ComposedCallWhichMayFail>::OnRawResult(::fidl::IncomingMessage&& msg) {
  if (unlikely(!msg.ok())) {
    ::fidl::WireUnownedResult<::fidl_test_errorsyntax::ExampleUseOfErrorSyntax::
                                  ComposedCallWhichMayFail>
        result{msg.error()};
    OnResult(result);
    return cpp17::nullopt;
  }
  ::fidl::DecodedMessage<
      ::fidl::WireResponse<::fidl_test_errorsyntax::ExampleUseOfErrorSyntax::
                               ComposedCallWhichMayFail>>
      decoded{std::move(msg)};
  ::fidl::Result maybe_error = decoded;
  ::fidl::WireUnownedResult<::fidl_test_errorsyntax::ExampleUseOfErrorSyntax::
                                ComposedCallWhichMayFail>
      result{std::move(decoded)};
  OnResult(result);
  if (unlikely(!maybe_error.ok())) {
    return ::fidl::UnbindInfo(maybe_error);
  }
  return cpp17::nullopt;
}
#endif  // __Fuchsia__

#ifdef __Fuchsia__

::fidl::WireResponseContext<::fidl_test_errorsyntax::ExampleUseOfErrorSyntax::
                                CallWhichMayFail>::WireResponseContext()
    : ::fidl::internal::ResponseContext(
          ::fidl_test_errorsyntax::
              kExampleUseOfErrorSyntax_CallWhichMayFail_Ordinal) {}

::cpp17::optional<::fidl::UnbindInfo> fidl::WireResponseContext<
    ::fidl_test_errorsyntax::ExampleUseOfErrorSyntax::CallWhichMayFail>::
    OnRawResult(::fidl::IncomingMessage&& msg) {
  if (unlikely(!msg.ok())) {
    ::fidl::WireUnownedResult<
        ::fidl_test_errorsyntax::ExampleUseOfErrorSyntax::CallWhichMayFail>
        result{msg.error()};
    OnResult(result);
    return cpp17::nullopt;
  }
  ::fidl::DecodedMessage<::fidl::WireResponse<
      ::fidl_test_errorsyntax::ExampleUseOfErrorSyntax::CallWhichMayFail>>
      decoded{std::move(msg)};
  ::fidl::Result maybe_error = decoded;
  ::fidl::WireUnownedResult<
      ::fidl_test_errorsyntax::ExampleUseOfErrorSyntax::CallWhichMayFail>
      result{std::move(decoded)};
  OnResult(result);
  if (unlikely(!maybe_error.ok())) {
    return ::fidl::UnbindInfo(maybe_error);
  }
  return cpp17::nullopt;
}
#endif  // __Fuchsia__

#ifdef __Fuchsia__

void fidl::internal::WireClientImpl<
    ::fidl_test_errorsyntax::ExampleUseOfErrorSyntax>::
    ComposedCallWhichMayFail(
        ::fidl::StringView s,
        ::fidl::WireClientCallback<
            ::fidl_test_errorsyntax::ExampleUseOfErrorSyntax::
                ComposedCallWhichMayFail>
            _cb) {
  using Callback = decltype(_cb);
  class ResponseContext final
      : public ::fidl::WireResponseContext<
            ::fidl_test_errorsyntax::ExampleUseOfErrorSyntax::
                ComposedCallWhichMayFail> {
   public:
    ResponseContext(Callback cb) : cb_(std::move(cb)) {}

    void OnResult(::fidl::WireUnownedResult<
                  ::fidl_test_errorsyntax::ExampleUseOfErrorSyntax::
                      ComposedCallWhichMayFail>& result) override {
      cb_(result);
      delete this;
    }

   private:
    Callback cb_;
  };

  auto* _context = new ResponseContext(std::move(_cb));
  ::fidl::WireRequest<::fidl_test_errorsyntax::ExampleUseOfErrorSyntax::
                          ComposedCallWhichMayFail>
      _request{s};
  FIDL_INTERNAL_DISABLE_AUTO_VAR_INIT
  ::fidl::WireRequest<::fidl_test_errorsyntax::ExampleUseOfErrorSyntax::
                          ComposedCallWhichMayFail>::OwnedEncodedMessage
      _request_message(::fidl::internal::AllowUnownedInputRef{}, &_request);
  ::fidl::internal::ClientBase::SendTwoWay(
      _request_message.GetOutgoingMessage(), _context);
}

void fidl::internal::WireClientImpl<
    ::fidl_test_errorsyntax::ExampleUseOfErrorSyntax>::
    ComposedCallWhichMayFail(
        ::fidl::StringView s,
        ::fit::callback<void(::fidl::WireResponse<
                             ::fidl_test_errorsyntax::ExampleUseOfErrorSyntax::
                                 ComposedCallWhichMayFail>* response)>
            _cb) {
  using Callback = decltype(_cb);
  class ResponseContext final
      : public ::fidl::WireResponseContext<
            ::fidl_test_errorsyntax::ExampleUseOfErrorSyntax::
                ComposedCallWhichMayFail> {
   public:
    ResponseContext(Callback cb) : cb_(std::move(cb)) {}

    void OnResult(::fidl::WireUnownedResult<
                  ::fidl_test_errorsyntax::ExampleUseOfErrorSyntax::
                      ComposedCallWhichMayFail>& result) override {
      if (result.ok()) {
        ::fidl::WireResponse<::fidl_test_errorsyntax::ExampleUseOfErrorSyntax::
                                 ComposedCallWhichMayFail>* response =
            result.Unwrap();
        cb_(response);
      }
      delete this;
    }

   private:
    Callback cb_;
  };

  auto* _context = new ResponseContext(std::move(_cb));
  ::fidl::WireRequest<::fidl_test_errorsyntax::ExampleUseOfErrorSyntax::
                          ComposedCallWhichMayFail>
      _request{s};
  FIDL_INTERNAL_DISABLE_AUTO_VAR_INIT
  ::fidl::WireRequest<::fidl_test_errorsyntax::ExampleUseOfErrorSyntax::
                          ComposedCallWhichMayFail>::OwnedEncodedMessage
      _request_message(::fidl::internal::AllowUnownedInputRef{}, &_request);
  ::fidl::internal::ClientBase::SendTwoWay(
      _request_message.GetOutgoingMessage(), _context);
}
void fidl::internal::WireClientImpl<
    ::fidl_test_errorsyntax::ExampleUseOfErrorSyntax>::
    ComposedCallWhichMayFail(
        ::fidl::BufferSpan _request_buffer, ::fidl::StringView s,
        ::fidl::WireResponseContext<
            ::fidl_test_errorsyntax::ExampleUseOfErrorSyntax::
                ComposedCallWhichMayFail>* _context) {
  ::fidl::WireRequest<::fidl_test_errorsyntax::ExampleUseOfErrorSyntax::
                          ComposedCallWhichMayFail>
      _request{s};

  ::fidl::WireRequest<::fidl_test_errorsyntax::ExampleUseOfErrorSyntax::
                          ComposedCallWhichMayFail>::UnownedEncodedMessage
      _request_message(_request_buffer.data, _request_buffer.capacity,
                       &_request);
  ::fidl::internal::ClientBase::SendTwoWay(
      _request_message.GetOutgoingMessage(), _context);
}
::fidl::WireResult<
    ::fidl_test_errorsyntax::ExampleUseOfErrorSyntax::ComposedCallWhichMayFail>
fidl::internal::WireClientImpl<
    ::fidl_test_errorsyntax::ExampleUseOfErrorSyntax>::
    ComposedCallWhichMayFail_Sync(::fidl::StringView s) {
  return ::fidl::internal::ClientBase::MakeSyncCallWith(
      [&](std::shared_ptr<::fidl::internal::AnyTransport> _transport) {
        ::fidl::WireRequest<::fidl_test_errorsyntax::ExampleUseOfErrorSyntax::
                                ComposedCallWhichMayFail>
            _request{s};
        return ::fidl::WireResult<
            ::fidl_test_errorsyntax::ExampleUseOfErrorSyntax::
                ComposedCallWhichMayFail>(
            ::fidl::UnownedClientEnd<
                ::fidl_test_errorsyntax::ExampleUseOfErrorSyntax>(
                _transport->get<fidl::internal::ChannelTransport>()),
            &_request);
      });
}
::fidl::WireUnownedResult<
    ::fidl_test_errorsyntax::ExampleUseOfErrorSyntax::ComposedCallWhichMayFail>
fidl::internal::WireClientImpl<
    ::fidl_test_errorsyntax::ExampleUseOfErrorSyntax>::
    ComposedCallWhichMayFail_Sync(::fidl::BufferSpan _request_buffer,
                                  ::fidl::StringView s,
                                  ::fidl::BufferSpan _response_buffer) {
  return ::fidl::internal::ClientBase::MakeSyncCallWith(
      [&](std::shared_ptr<::fidl::internal::AnyTransport> _transport) {
        ::fidl::WireRequest<::fidl_test_errorsyntax::ExampleUseOfErrorSyntax::
                                ComposedCallWhichMayFail>
            _request{s};
        return ::fidl::WireUnownedResult<
            ::fidl_test_errorsyntax::ExampleUseOfErrorSyntax::
                ComposedCallWhichMayFail>(
            ::fidl::UnownedClientEnd<
                ::fidl_test_errorsyntax::ExampleUseOfErrorSyntax>(
                _transport->get<fidl::internal::ChannelTransport>()),
            _request_buffer.data, _request_buffer.capacity, &_request,
            _response_buffer.data, _response_buffer.capacity);
      });
}
void fidl::internal::WireClientImpl<
    ::fidl_test_errorsyntax::ExampleUseOfErrorSyntax>::
    CallWhichMayFail(
        ::fidl::StringView s,
        ::fidl::WireClientCallback<
            ::fidl_test_errorsyntax::ExampleUseOfErrorSyntax::CallWhichMayFail>
            _cb) {
  using Callback = decltype(_cb);
  class ResponseContext final
      : public ::fidl::WireResponseContext<
            ::fidl_test_errorsyntax::ExampleUseOfErrorSyntax::
                CallWhichMayFail> {
   public:
    ResponseContext(Callback cb) : cb_(std::move(cb)) {}

    void OnResult(
        ::fidl::WireUnownedResult<
            ::fidl_test_errorsyntax::ExampleUseOfErrorSyntax::CallWhichMayFail>&
            result) override {
      cb_(result);
      delete this;
    }

   private:
    Callback cb_;
  };

  auto* _context = new ResponseContext(std::move(_cb));
  ::fidl::WireRequest<
      ::fidl_test_errorsyntax::ExampleUseOfErrorSyntax::CallWhichMayFail>
      _request{s};
  FIDL_INTERNAL_DISABLE_AUTO_VAR_INIT
  ::fidl::WireRequest<
      ::fidl_test_errorsyntax::ExampleUseOfErrorSyntax::CallWhichMayFail>::
      OwnedEncodedMessage _request_message(
          ::fidl::internal::AllowUnownedInputRef{}, &_request);
  ::fidl::internal::ClientBase::SendTwoWay(
      _request_message.GetOutgoingMessage(), _context);
}

void fidl::internal::WireClientImpl<
    ::fidl_test_errorsyntax::ExampleUseOfErrorSyntax>::
    CallWhichMayFail(
        ::fidl::StringView s,
        ::fit::callback<void(::fidl::WireResponse<
                             ::fidl_test_errorsyntax::ExampleUseOfErrorSyntax::
                                 CallWhichMayFail>* response)>
            _cb) {
  using Callback = decltype(_cb);
  class ResponseContext final
      : public ::fidl::WireResponseContext<
            ::fidl_test_errorsyntax::ExampleUseOfErrorSyntax::
                CallWhichMayFail> {
   public:
    ResponseContext(Callback cb) : cb_(std::move(cb)) {}

    void OnResult(
        ::fidl::WireUnownedResult<
            ::fidl_test_errorsyntax::ExampleUseOfErrorSyntax::CallWhichMayFail>&
            result) override {
      if (result.ok()) {
        ::fidl::WireResponse<
            ::fidl_test_errorsyntax::ExampleUseOfErrorSyntax::CallWhichMayFail>*
            response = result.Unwrap();
        cb_(response);
      }
      delete this;
    }

   private:
    Callback cb_;
  };

  auto* _context = new ResponseContext(std::move(_cb));
  ::fidl::WireRequest<
      ::fidl_test_errorsyntax::ExampleUseOfErrorSyntax::CallWhichMayFail>
      _request{s};
  FIDL_INTERNAL_DISABLE_AUTO_VAR_INIT
  ::fidl::WireRequest<
      ::fidl_test_errorsyntax::ExampleUseOfErrorSyntax::CallWhichMayFail>::
      OwnedEncodedMessage _request_message(
          ::fidl::internal::AllowUnownedInputRef{}, &_request);
  ::fidl::internal::ClientBase::SendTwoWay(
      _request_message.GetOutgoingMessage(), _context);
}
void fidl::internal::WireClientImpl<
    ::fidl_test_errorsyntax::ExampleUseOfErrorSyntax>::
    CallWhichMayFail(
        ::fidl::BufferSpan _request_buffer, ::fidl::StringView s,
        ::fidl::WireResponseContext<
            ::fidl_test_errorsyntax::ExampleUseOfErrorSyntax::CallWhichMayFail>*
            _context) {
  ::fidl::WireRequest<
      ::fidl_test_errorsyntax::ExampleUseOfErrorSyntax::CallWhichMayFail>
      _request{s};

  ::fidl::WireRequest<
      ::fidl_test_errorsyntax::ExampleUseOfErrorSyntax::CallWhichMayFail>::
      UnownedEncodedMessage _request_message(
          _request_buffer.data, _request_buffer.capacity, &_request);
  ::fidl::internal::ClientBase::SendTwoWay(
      _request_message.GetOutgoingMessage(), _context);
}
::fidl::WireResult<
    ::fidl_test_errorsyntax::ExampleUseOfErrorSyntax::CallWhichMayFail>
fidl::internal::WireClientImpl<
    ::fidl_test_errorsyntax::ExampleUseOfErrorSyntax>::
    CallWhichMayFail_Sync(::fidl::StringView s) {
  return ::fidl::internal::ClientBase::MakeSyncCallWith(
      [&](std::shared_ptr<::fidl::internal::AnyTransport> _transport) {
        ::fidl::WireRequest<
            ::fidl_test_errorsyntax::ExampleUseOfErrorSyntax::CallWhichMayFail>
            _request{s};
        return ::fidl::WireResult<
            ::fidl_test_errorsyntax::ExampleUseOfErrorSyntax::CallWhichMayFail>(
            ::fidl::UnownedClientEnd<
                ::fidl_test_errorsyntax::ExampleUseOfErrorSyntax>(
                _transport->get<fidl::internal::ChannelTransport>()),
            &_request);
      });
}
::fidl::WireUnownedResult<
    ::fidl_test_errorsyntax::ExampleUseOfErrorSyntax::CallWhichMayFail>
fidl::internal::WireClientImpl<
    ::fidl_test_errorsyntax::ExampleUseOfErrorSyntax>::
    CallWhichMayFail_Sync(::fidl::BufferSpan _request_buffer,
                          ::fidl::StringView s,
                          ::fidl::BufferSpan _response_buffer) {
  return ::fidl::internal::ClientBase::MakeSyncCallWith(
      [&](std::shared_ptr<::fidl::internal::AnyTransport> _transport) {
        ::fidl::WireRequest<
            ::fidl_test_errorsyntax::ExampleUseOfErrorSyntax::CallWhichMayFail>
            _request{s};
        return ::fidl::WireUnownedResult<
            ::fidl_test_errorsyntax::ExampleUseOfErrorSyntax::CallWhichMayFail>(
            ::fidl::UnownedClientEnd<
                ::fidl_test_errorsyntax::ExampleUseOfErrorSyntax>(
                _transport->get<fidl::internal::ChannelTransport>()),
            _request_buffer.data, _request_buffer.capacity, &_request,
            _response_buffer.data, _response_buffer.capacity);
      });
}

std::optional<::fidl::UnbindInfo> fidl::internal::WireClientImpl<
    ::fidl_test_errorsyntax::ExampleUseOfErrorSyntax>::
    DispatchEvent(fidl::IncomingMessage& msg,
                  ::fidl::internal::AsyncEventHandler* maybe_event_handler) {
  return ::fidl::UnbindInfo::UnknownOrdinal();
}
#endif  // __Fuchsia__

#ifdef __Fuchsia__

constexpr ::fidl::internal::MethodEntry fidl::internal::WireServerDispatcher<
    ::fidl_test_errorsyntax::ExampleUseOfErrorSyntax>::entries_[] = {
    {
        ::fidl_test_errorsyntax::
            kExampleUseOfErrorSyntax_ComposedCallWhichMayFail_Ordinal,
        [](void* interface, ::fidl::IncomingMessage&& msg,
           ::fidl::Transaction* txn) {
          ::fidl::DecodedMessage<::fidl::WireRequest<
              ::fidl_test_errorsyntax::ExampleUseOfErrorSyntax::
                  ComposedCallWhichMayFail>>
              decoded{std::move(msg)};
          if (unlikely(!decoded.ok())) {
            return decoded.status();
          }
          auto* primary = decoded.PrimaryObject();
          ::fidl::internal::WireCompleter<
              ::fidl_test_errorsyntax::ExampleUseOfErrorSyntax::
                  ComposedCallWhichMayFail>::Sync completer(txn);
          reinterpret_cast<::fidl::WireServer<
              ::fidl_test_errorsyntax::ExampleUseOfErrorSyntax>*>(interface)
              ->ComposedCallWhichMayFail(primary, completer);
          return ZX_OK;
        },
    },
    {
        ::fidl_test_errorsyntax::
            kExampleUseOfErrorSyntax_CallWhichMayFail_Ordinal,
        [](void* interface, ::fidl::IncomingMessage&& msg,
           ::fidl::Transaction* txn) {
          ::fidl::DecodedMessage<::fidl::WireRequest<
              ::fidl_test_errorsyntax::ExampleUseOfErrorSyntax::
                  CallWhichMayFail>>
              decoded{std::move(msg)};
          if (unlikely(!decoded.ok())) {
            return decoded.status();
          }
          auto* primary = decoded.PrimaryObject();
          ::fidl::internal::WireCompleter<
              ::fidl_test_errorsyntax::ExampleUseOfErrorSyntax::
                  CallWhichMayFail>::Sync completer(txn);
          reinterpret_cast<::fidl::WireServer<
              ::fidl_test_errorsyntax::ExampleUseOfErrorSyntax>*>(interface)
              ->CallWhichMayFail(primary, completer);
          return ZX_OK;
        },
    },
};

const ::fidl::internal::MethodEntry* fidl::internal::WireServerDispatcher<
    ::fidl_test_errorsyntax::ExampleUseOfErrorSyntax>::entries_end_ =
    &entries_[2];

::fidl::DispatchResult fidl::internal::WireServerDispatcher<
    ::fidl_test_errorsyntax::ExampleUseOfErrorSyntax>::
    TryDispatch(::fidl::WireServer<
                    ::fidl_test_errorsyntax::ExampleUseOfErrorSyntax>* impl,
                ::fidl::IncomingMessage& msg, ::fidl::Transaction* txn) {
  return ::fidl::internal::TryDispatch(impl, msg, txn, entries_, entries_end_);
}

void fidl::internal::WireServerDispatcher<
    ::fidl_test_errorsyntax::ExampleUseOfErrorSyntax>::
    Dispatch(::fidl::WireServer<
                 ::fidl_test_errorsyntax::ExampleUseOfErrorSyntax>* impl,
             ::fidl::IncomingMessage&& msg, ::fidl::Transaction* txn) {
  ::fidl::internal::Dispatch(impl, msg, txn, entries_, entries_end_);
}
void fidl::WireServer<::fidl_test_errorsyntax::ExampleUseOfErrorSyntax>::
    dispatch_message(fidl::IncomingMessage&& msg, ::fidl::Transaction* txn) {
  ::fidl::internal::WireServerDispatcher<
      ::fidl_test_errorsyntax::ExampleUseOfErrorSyntax>::Dispatch(this,
                                                                  std::move(
                                                                      msg),
                                                                  txn);
}
#endif  // __Fuchsia__

#ifdef __Fuchsia__
::fidl::Result fidl::internal::WireCompleterBase<
    ::fidl_test_errorsyntax::ExampleUseOfErrorSyntax::
        ComposedCallWhichMayFail>::
    Reply(::fidl_test_errorsyntax_parent::wire::
              ParentUsesErrorSyntaxComposedCallWhichMayFailResult result) {
  ::fidl::WireResponse<::fidl_test_errorsyntax::ExampleUseOfErrorSyntax::
                           ComposedCallWhichMayFail>
      _response{result};
  FIDL_INTERNAL_DISABLE_AUTO_VAR_INIT
  ::fidl::OwnedEncodedMessage<
      ::fidl::WireResponse<::fidl_test_errorsyntax::ExampleUseOfErrorSyntax::
                               ComposedCallWhichMayFail>>
      _response_message{::fidl::internal::AllowUnownedInputRef{}, &_response};
  return ::fidl::internal::WireCompleterBase<
      ::fidl_test_errorsyntax::ExampleUseOfErrorSyntax::
          ComposedCallWhichMayFail>::SendReply(&_response_message
                                                    .GetOutgoingMessage());
}

::fidl::Result fidl::internal::WireCompleterBase<
    ::fidl_test_errorsyntax::ExampleUseOfErrorSyntax::
        ComposedCallWhichMayFail>::
    Reply(::fidl::BufferSpan _buffer,
          ::fidl_test_errorsyntax_parent::wire::
              ParentUsesErrorSyntaxComposedCallWhichMayFailResult result) {
  ::fidl::WireResponse<::fidl_test_errorsyntax::ExampleUseOfErrorSyntax::
                           ComposedCallWhichMayFail>
      _response{result};
  ::fidl::WireResponse<::fidl_test_errorsyntax::ExampleUseOfErrorSyntax::
                           ComposedCallWhichMayFail>::UnownedEncodedMessage
      _response_message(_buffer.data, _buffer.capacity, &_response);
  return CompleterBase::SendReply(&_response_message.GetOutgoingMessage());
}
#endif  // __Fuchsia__

#ifdef __Fuchsia__
::fidl::Result fidl::internal::WireCompleterBase<
    ::fidl_test_errorsyntax::ExampleUseOfErrorSyntax::CallWhichMayFail>::
    Reply(::fidl_test_errorsyntax::wire::
              ExampleUseOfErrorSyntaxCallWhichMayFailResult result) {
  ::fidl::WireResponse<
      ::fidl_test_errorsyntax::ExampleUseOfErrorSyntax::CallWhichMayFail>
      _response{result};
  FIDL_INTERNAL_DISABLE_AUTO_VAR_INIT
  ::fidl::OwnedEncodedMessage<::fidl::WireResponse<
      ::fidl_test_errorsyntax::ExampleUseOfErrorSyntax::CallWhichMayFail>>
      _response_message{::fidl::internal::AllowUnownedInputRef{}, &_response};
  return ::fidl::internal::WireCompleterBase<
      ::fidl_test_errorsyntax::ExampleUseOfErrorSyntax::CallWhichMayFail>::
      SendReply(&_response_message.GetOutgoingMessage());
}
::fidl::Result fidl::internal::WireCompleterBase<
    ::fidl_test_errorsyntax::ExampleUseOfErrorSyntax::CallWhichMayFail>::
    ReplySuccess(int64_t value) {
  ::fidl_test_errorsyntax::wire::ExampleUseOfErrorSyntaxCallWhichMayFailResponse
      _response;
  _response.value = std::move(value);
  return Reply(
      ::fidl_test_errorsyntax::wire::
          ExampleUseOfErrorSyntaxCallWhichMayFailResult::WithResponse(
              ::fidl::ObjectView<
                  ::fidl_test_errorsyntax::wire::
                      ExampleUseOfErrorSyntaxCallWhichMayFailResponse>::
                  FromExternal(&_response)));
}

::fidl::Result fidl::internal::WireCompleterBase<
    ::fidl_test_errorsyntax::ExampleUseOfErrorSyntax::CallWhichMayFail>::
    ReplyError(uint32_t error) {
  return Reply(::fidl_test_errorsyntax::wire::
                   ExampleUseOfErrorSyntaxCallWhichMayFailResult::WithErr(
                       std::move(error)));
}

::fidl::Result fidl::internal::WireCompleterBase<
    ::fidl_test_errorsyntax::ExampleUseOfErrorSyntax::CallWhichMayFail>::
    Reply(::fidl::BufferSpan _buffer,
          ::fidl_test_errorsyntax::wire::
              ExampleUseOfErrorSyntaxCallWhichMayFailResult result) {
  ::fidl::WireResponse<
      ::fidl_test_errorsyntax::ExampleUseOfErrorSyntax::CallWhichMayFail>
      _response{result};
  ::fidl::WireResponse<
      ::fidl_test_errorsyntax::ExampleUseOfErrorSyntax::CallWhichMayFail>::
      UnownedEncodedMessage _response_message(_buffer.data, _buffer.capacity,
                                              &_response);
  return CompleterBase::SendReply(&_response_message.GetOutgoingMessage());
}
::fidl::Result fidl::internal::WireCompleterBase<
    ::fidl_test_errorsyntax::ExampleUseOfErrorSyntax::CallWhichMayFail>::
    ReplySuccess(::fidl::BufferSpan _buffer, int64_t value) {
  ::fidl_test_errorsyntax::wire::ExampleUseOfErrorSyntaxCallWhichMayFailResponse
      response;
  response.value = std::move(value);
  return Reply(
      std::move(_buffer),
      ::fidl_test_errorsyntax::wire::
          ExampleUseOfErrorSyntaxCallWhichMayFailResult::WithResponse(
              ::fidl::ObjectView<
                  ::fidl_test_errorsyntax::wire::
                      ExampleUseOfErrorSyntaxCallWhichMayFailResponse>::
                  FromExternal(&response)));
}
#endif  // __Fuchsia__

void ::fidl::WireRequest<::fidl_test_errorsyntax::ExampleUseOfErrorSyntax::
                             ComposedCallWhichMayFail>::_InitHeader() {
  fidl_init_txn_header(
      &_hdr, 0,
      ::fidl_test_errorsyntax::
          kExampleUseOfErrorSyntax_ComposedCallWhichMayFail_Ordinal);
}

void ::fidl::WireResponse<::fidl_test_errorsyntax::ExampleUseOfErrorSyntax::
                              ComposedCallWhichMayFail>::_InitHeader() {
  fidl_init_txn_header(
      &_hdr, 0,
      ::fidl_test_errorsyntax::
          kExampleUseOfErrorSyntax_ComposedCallWhichMayFail_Ordinal);
}

void ::fidl::WireRequest<::fidl_test_errorsyntax::ExampleUseOfErrorSyntax::
                             CallWhichMayFail>::_InitHeader() {
  fidl_init_txn_header(&_hdr, 0,
                       ::fidl_test_errorsyntax::
                           kExampleUseOfErrorSyntax_CallWhichMayFail_Ordinal);
}

void ::fidl::WireResponse<::fidl_test_errorsyntax::ExampleUseOfErrorSyntax::
                              CallWhichMayFail>::_InitHeader() {
  fidl_init_txn_header(&_hdr, 0,
                       ::fidl_test_errorsyntax::
                           kExampleUseOfErrorSyntax_CallWhichMayFail_Ordinal);
}

#ifdef __Fuchsia__

#endif  // __Fuchsia__
