// WARNING: This file is machine generated by fidlgen.

#include <fidl/test.unionsandwich/cpp/natural_types.h>

#ifdef __Fuchsia__

void ::test_unionsandwich::SandwichUnionSize8Alignment4::
    EncodeWithoutValidating(::fidl::Encoder& encoder, size_t offset) {
  encoder.Alloc(
      ::fidl::EncodingInlineSize<
          ::test_unionsandwich::SandwichUnionSize8Alignment4, ::fidl::Encoder>(
          &encoder));
  ::fidl::CodingTraits<
      ::test_unionsandwich::SandwichUnionSize8Alignment4>::Encode(&encoder,
                                                                  this, offset);
}

::test_unionsandwich::SandwichUnionSize8Alignment4::
    SandwichUnionSize8Alignment4(::fidl::Decoder& decoder)
    : storage_({::fidl::DecodeAs<uint32_t>(&decoder, 0),
                ::fidl::DecodeAs<::test_unionsandwich::UnionSize8Alignment4>(
                    &decoder, 8),
                ::fidl::DecodeAs<uint32_t>(&decoder, 24)}) {}
#endif  // __Fuchsia__

::test_unionsandwich::SandwichUnionSize8Alignment4::Storage_
test_unionsandwich::SandwichUnionSize8Alignment4::CloneStorage_() const {
  return Storage_{::fidl::internal::NaturalClone(storage_.before),
                  ::fidl::internal::NaturalClone(storage_.union_),
                  ::fidl::internal::NaturalClone(storage_.after)};
}
#ifdef __Fuchsia__

void ::test_unionsandwich::SandwichUnionSize36Alignment4::
    EncodeWithoutValidating(::fidl::Encoder& encoder, size_t offset) {
  encoder.Alloc(
      ::fidl::EncodingInlineSize<
          ::test_unionsandwich::SandwichUnionSize36Alignment4, ::fidl::Encoder>(
          &encoder));
  ::fidl::CodingTraits<
      ::test_unionsandwich::SandwichUnionSize36Alignment4>::Encode(&encoder,
                                                                   this,
                                                                   offset);
}

::test_unionsandwich::SandwichUnionSize36Alignment4::
    SandwichUnionSize36Alignment4(::fidl::Decoder& decoder)
    : storage_({::fidl::DecodeAs<uint32_t>(&decoder, 0),
                ::fidl::DecodeAs<::test_unionsandwich::UnionSize36Alignment4>(
                    &decoder, 8),
                ::fidl::DecodeAs<uint32_t>(&decoder, 24)}) {}
#endif  // __Fuchsia__

::test_unionsandwich::SandwichUnionSize36Alignment4::Storage_
test_unionsandwich::SandwichUnionSize36Alignment4::CloneStorage_() const {
  return Storage_{::fidl::internal::NaturalClone(storage_.before),
                  ::fidl::internal::NaturalClone(storage_.union_),
                  ::fidl::internal::NaturalClone(storage_.after)};
}
#ifdef __Fuchsia__

void ::test_unionsandwich::SandwichUnionSize12Alignment4::
    EncodeWithoutValidating(::fidl::Encoder& encoder, size_t offset) {
  encoder.Alloc(
      ::fidl::EncodingInlineSize<
          ::test_unionsandwich::SandwichUnionSize12Alignment4, ::fidl::Encoder>(
          &encoder));
  ::fidl::CodingTraits<
      ::test_unionsandwich::SandwichUnionSize12Alignment4>::Encode(&encoder,
                                                                   this,
                                                                   offset);
}

::test_unionsandwich::SandwichUnionSize12Alignment4::
    SandwichUnionSize12Alignment4(::fidl::Decoder& decoder)
    : storage_({::fidl::DecodeAs<uint32_t>(&decoder, 0),
                ::fidl::DecodeAs<::test_unionsandwich::UnionSize12Alignment4>(
                    &decoder, 8),
                ::fidl::DecodeAs<int32_t>(&decoder, 24)}) {}
#endif  // __Fuchsia__

::test_unionsandwich::SandwichUnionSize12Alignment4::Storage_
test_unionsandwich::SandwichUnionSize12Alignment4::CloneStorage_() const {
  return Storage_{::fidl::internal::NaturalClone(storage_.before),
                  ::fidl::internal::NaturalClone(storage_.union_),
                  ::fidl::internal::NaturalClone(storage_.after)};
}
#ifdef __Fuchsia__

void ::test_unionsandwich::StructSize16Alignment8::EncodeWithoutValidating(
    ::fidl::Encoder& encoder, size_t offset) {
  encoder.Alloc(
      ::fidl::EncodingInlineSize<::test_unionsandwich::StructSize16Alignment8,
                                 ::fidl::Encoder>(&encoder));
  ::fidl::CodingTraits<::test_unionsandwich::StructSize16Alignment8>::Encode(
      &encoder, this, offset);
}

::test_unionsandwich::StructSize16Alignment8::StructSize16Alignment8(
    ::fidl::Decoder& decoder)
    : storage_({::fidl::DecodeAs<uint64_t>(&decoder, 0),
                ::fidl::DecodeAs<uint64_t>(&decoder, 8)}) {}
#endif  // __Fuchsia__

::test_unionsandwich::StructSize16Alignment8::Storage_
test_unionsandwich::StructSize16Alignment8::CloneStorage_() const {
  return Storage_{::fidl::internal::NaturalClone(storage_.f1),
                  ::fidl::internal::NaturalClone(storage_.f2)};
}
#ifdef __Fuchsia__

void ::test_unionsandwich::SandwichUnionSize24Alignment8::
    EncodeWithoutValidating(::fidl::Encoder& encoder, size_t offset) {
  encoder.Alloc(
      ::fidl::EncodingInlineSize<
          ::test_unionsandwich::SandwichUnionSize24Alignment8, ::fidl::Encoder>(
          &encoder));
  ::fidl::CodingTraits<
      ::test_unionsandwich::SandwichUnionSize24Alignment8>::Encode(&encoder,
                                                                   this,
                                                                   offset);
}

::test_unionsandwich::SandwichUnionSize24Alignment8::
    SandwichUnionSize24Alignment8(::fidl::Decoder& decoder)
    : storage_({::fidl::DecodeAs<uint32_t>(&decoder, 0),
                ::fidl::DecodeAs<::test_unionsandwich::UnionSize24Alignment8>(
                    &decoder, 8),
                ::fidl::DecodeAs<uint32_t>(&decoder, 24)}) {}
#endif  // __Fuchsia__

::test_unionsandwich::SandwichUnionSize24Alignment8::Storage_
test_unionsandwich::SandwichUnionSize24Alignment8::CloneStorage_() const {
  return Storage_{::fidl::internal::NaturalClone(storage_.before),
                  ::fidl::internal::NaturalClone(storage_.union_),
                  ::fidl::internal::NaturalClone(storage_.after)};
}

std::shared_ptr<::test_unionsandwich::UnionSize8Alignment4::Storage_>
test_unionsandwich::UnionSize8Alignment4::CloneStorage_() const {
  const Storage_& storage = *storage_;
  switch (storage_->index()) {
    case 1:
      return std::make_shared<Storage_>(
          std::in_place_index<1>,
          ::fidl::internal::NaturalClone(std::get<1>(storage)));
    default:
      return std::make_shared<Storage_>();
  }
}

std::shared_ptr<::test_unionsandwich::UnionSize36Alignment4::Storage_>
test_unionsandwich::UnionSize36Alignment4::CloneStorage_() const {
  const Storage_& storage = *storage_;
  switch (storage_->index()) {
    case 1:
      return std::make_shared<Storage_>(
          std::in_place_index<1>,
          ::fidl::internal::NaturalClone(std::get<1>(storage)));
    default:
      return std::make_shared<Storage_>();
  }
}

std::shared_ptr<::test_unionsandwich::UnionSize12Alignment4::Storage_>
test_unionsandwich::UnionSize12Alignment4::CloneStorage_() const {
  const Storage_& storage = *storage_;
  switch (storage_->index()) {
    case 1:
      return std::make_shared<Storage_>(
          std::in_place_index<1>,
          ::fidl::internal::NaturalClone(std::get<1>(storage)));
    default:
      return std::make_shared<Storage_>();
  }
}

std::shared_ptr<::test_unionsandwich::UnionSize24Alignment8::Storage_>
test_unionsandwich::UnionSize24Alignment8::CloneStorage_() const {
  const Storage_& storage = *storage_;
  switch (storage_->index()) {
    case 1:
      return std::make_shared<Storage_>(
          std::in_place_index<1>,
          ::fidl::internal::NaturalClone(std::get<1>(storage)));
    default:
      return std::make_shared<Storage_>();
  }
}
