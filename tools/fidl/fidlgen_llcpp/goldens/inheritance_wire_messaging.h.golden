// WARNING: This file is machine generated by fidlgen.

#pragma once

#include <fidl/fidl.test.inheritance/cpp/markers.h>
#include <fidl/fidl.test.inheritance/cpp/wire_types.h>
#include <lib/fidl/llcpp/wire_messaging.h>

#ifdef __Fuchsia__

#include <lib/fidl/llcpp/client.h>
#include <lib/fidl/llcpp/connect_service.h>
#include <lib/fidl/llcpp/server.h>
#include <lib/fidl/llcpp/service_handler_interface.h>
#include <lib/fidl/llcpp/sync_call.h>

#endif  // __Fuchsia__

namespace fidl_test_inheritance {
class Super;

class Sub;

__LOCAL extern "C" const fidl_type_t
    fidl_test_inheritance_superfooRequestMessageTable;

__LOCAL extern "C" const fidl_type_t
    fidl_test_inheritance_superfooResponseMessageTable;

}  // namespace fidl_test_inheritance
#ifdef __Fuchsia__

template <>
struct ::fidl::internal::ProtocolDetails<::fidl_test_inheritance::Super> {};
#endif  // __Fuchsia__

#ifdef __Fuchsia__

template <>
struct ::fidl::internal::WireServerDispatcher<::fidl_test_inheritance::Super>
    final {
  WireServerDispatcher() = delete;
  static ::fidl::DispatchResult TryDispatch(
      ::fidl::WireServer<::fidl_test_inheritance::Super>* impl,
      ::fidl::IncomingMessage& msg, ::fidl::Transaction* txn);
  static void Dispatch(::fidl::WireServer<::fidl_test_inheritance::Super>* impl,
                       ::fidl::IncomingMessage&& msg, ::fidl::Transaction* txn);

 private:
  static const ::fidl::internal::MethodEntry entries_[];
  static const ::fidl::internal::MethodEntry* entries_end_;
};
#endif  // __Fuchsia__

template <>
struct ::fidl::WireRequest<::fidl_test_inheritance::Super::Foo> final {
  FIDL_ALIGNDECL
  fidl_message_header_t _hdr;
  ::fidl::StringView s;

  explicit WireRequest(::fidl::StringView s) : s(s) { _InitHeader(); }
  WireRequest() { _InitHeader(); }

  static constexpr const fidl_type_t* Type =
      &::fidl_test_inheritance::
          fidl_test_inheritance_superfooRequestMessageTable;
  static constexpr uint32_t MaxNumHandles = 0;
  static constexpr uint32_t PrimarySize = 32;
  static constexpr uint32_t PrimarySizeV1 = 32;
  static constexpr uint32_t MaxOutOfLine = 4294967295;
  static constexpr uint32_t MaxOutOfLineV1 = 4294967295;
  static constexpr bool HasFlexibleEnvelope = false;
  static constexpr bool HasPointer = true;
  static constexpr ::fidl::internal::TransactionalMessageKind MessageKind =
      ::fidl::internal::TransactionalMessageKind::kRequest;
  using ResponseType =
      ::fidl::WireResponse<::fidl_test_inheritance::Super::Foo>;

  class UnownedEncodedMessage;
  class OwnedEncodedMessage;

 public:
  class DecodedMessage;

 private:
  void _InitHeader();
};
template <>
struct ::fidl::WireResponse<::fidl_test_inheritance::Super::Foo> final {
  FIDL_ALIGNDECL
  fidl_message_header_t _hdr;
  int64_t y;

  explicit WireResponse(int64_t y) : y(y) { _InitHeader(); }
  WireResponse() { _InitHeader(); }

  static constexpr const fidl_type_t* Type =
      &::fidl_test_inheritance::
          fidl_test_inheritance_superfooResponseMessageTable;
  static constexpr uint32_t MaxNumHandles = 0;
  static constexpr uint32_t PrimarySize = 24;
  static constexpr uint32_t PrimarySizeV1 = 24;
  static constexpr uint32_t MaxOutOfLine = 0;
  static constexpr uint32_t MaxOutOfLineV1 = 0;
  static constexpr bool HasFlexibleEnvelope = false;
  static constexpr bool HasPointer = false;
  static constexpr ::fidl::internal::TransactionalMessageKind MessageKind =
      ::fidl::internal::TransactionalMessageKind::kResponse;

  class UnownedEncodedMessage;
  class OwnedEncodedMessage;

 public:
  class DecodedMessage;

 private:
  void _InitHeader();
};
#ifdef __Fuchsia__

template <>
class ::fidl::WireResult<::fidl_test_inheritance::Super::Foo> final
    : public ::fidl::Result {
 public:
  WireResult(::fidl::UnownedClientEnd<::fidl_test_inheritance::Super> client,
             ::fidl::WireRequest<::fidl_test_inheritance::Super::Foo>* request);
  WireResult(::fidl::UnownedClientEnd<::fidl_test_inheritance::Super> client,
             ::fidl::WireRequest<::fidl_test_inheritance::Super::Foo>* request,
             zx_time_t _deadline);
  explicit WireResult(const ::fidl::Result& result) : ::fidl::Result(result) {}
  WireResult(WireResult&&) = delete;
  WireResult(const WireResult&) = delete;
  WireResult* operator=(WireResult&&) = delete;
  WireResult* operator=(const WireResult&) = delete;
  ~WireResult() = default;

  ::fidl::WireResponse<::fidl_test_inheritance::Super::Foo>* Unwrap() {
    ZX_DEBUG_ASSERT(ok());
    return reinterpret_cast<
        ::fidl::WireResponse<::fidl_test_inheritance::Super::Foo>*>(
        bytes_.data());
  }
  const ::fidl::WireResponse<::fidl_test_inheritance::Super::Foo>* Unwrap()
      const {
    ZX_DEBUG_ASSERT(ok());
    return reinterpret_cast<
        const ::fidl::WireResponse<::fidl_test_inheritance::Super::Foo>*>(
        bytes_.data());
  }

  ::fidl::WireResponse<::fidl_test_inheritance::Super::Foo>& value() {
    return *Unwrap();
  }
  const ::fidl::WireResponse<::fidl_test_inheritance::Super::Foo>& value()
      const {
    return *Unwrap();
  }

  ::fidl::WireResponse<::fidl_test_inheritance::Super::Foo>* operator->() {
    return &value();
  }
  const ::fidl::WireResponse<::fidl_test_inheritance::Super::Foo>* operator->()
      const {
    return &value();
  }

  ::fidl::WireResponse<::fidl_test_inheritance::Super::Foo>& operator*() {
    return value();
  }
  const ::fidl::WireResponse<::fidl_test_inheritance::Super::Foo>& operator*()
      const {
    return value();
  }

 private:
  ::fidl::internal::InlineMessageBuffer<24> bytes_;
};
template <>
class ::fidl::WireUnownedResult<::fidl_test_inheritance::Super::Foo> final
    : public ::fidl::Result {
 public:
  explicit WireUnownedResult(
      ::fidl::UnownedClientEnd<::fidl_test_inheritance::Super> client_end,
      ::fidl::internal::AnyBufferAllocator& allocator,
      ::fidl::WireRequest<::fidl_test_inheritance::Super::Foo>* request);
  explicit WireUnownedResult(
      ::fidl::WireResponse<::fidl_test_inheritance::Super::Foo>* response)
      : bytes_(reinterpret_cast<uint8_t*>(response)) {}
  explicit WireUnownedResult(const ::fidl::Result& result)
      : ::fidl::Result(result) {}
  explicit WireUnownedResult(
      ::fidl::DecodedMessage<
          ::fidl::WireResponse<::fidl_test_inheritance::Super::Foo>>&& decoded)
      : ::fidl::Result(decoded) {
    if (decoded.ok()) {
      bytes_ = reinterpret_cast<uint8_t*>(decoded.PrimaryObject());
    } else {
      bytes_ = nullptr;
    }
    decoded.ReleasePrimaryObject();
  }
  WireUnownedResult(WireUnownedResult&&) = delete;
  WireUnownedResult(const WireUnownedResult&) = delete;
  WireUnownedResult* operator=(WireUnownedResult&&) = delete;
  WireUnownedResult* operator=(const WireUnownedResult&) = delete;
  ~WireUnownedResult() = default;

  ::fidl::WireResponse<::fidl_test_inheritance::Super::Foo>* Unwrap() {
    ZX_DEBUG_ASSERT(ok());
    return reinterpret_cast<
        ::fidl::WireResponse<::fidl_test_inheritance::Super::Foo>*>(bytes_);
  }
  const ::fidl::WireResponse<::fidl_test_inheritance::Super::Foo>* Unwrap()
      const {
    ZX_DEBUG_ASSERT(ok());
    return reinterpret_cast<
        const ::fidl::WireResponse<::fidl_test_inheritance::Super::Foo>*>(
        bytes_);
  }

  ::fidl::WireResponse<::fidl_test_inheritance::Super::Foo>& value() {
    return *Unwrap();
  }
  const ::fidl::WireResponse<::fidl_test_inheritance::Super::Foo>& value()
      const {
    return *Unwrap();
  }

  ::fidl::WireResponse<::fidl_test_inheritance::Super::Foo>* operator->() {
    return &value();
  }
  const ::fidl::WireResponse<::fidl_test_inheritance::Super::Foo>* operator->()
      const {
    return &value();
  }

  ::fidl::WireResponse<::fidl_test_inheritance::Super::Foo>& operator*() {
    return value();
  }
  const ::fidl::WireResponse<::fidl_test_inheritance::Super::Foo>& operator*()
      const {
    return value();
  }

 private:
  uint8_t* bytes_;
};

// Methods to make a sync FIDL call directly on an unowned channel or a
// const reference to a |fidl::ClientEnd<::fidl_test_inheritance::Super>|,
// avoiding setting up a client.
template <>
class ::fidl::internal::WireSyncClientImpl<::fidl_test_inheritance::Super> final
    : public ::fidl::internal::SyncEndpointManagedVeneer<
          ::fidl::internal::WireSyncClientImpl<
              ::fidl_test_inheritance::Super>> {
 public:
  // Allocates 24 bytes of response buffer on the stack. Request is
  // heap-allocated.
  ::fidl::WireResult<::fidl_test_inheritance::Super::Foo> Foo(
      ::fidl::StringView s) {
    ::fidl::WireRequest<::fidl_test_inheritance::Super::Foo> _request{s};
    return ::fidl::WireResult<::fidl_test_inheritance::Super::Foo>(
        _client_end(), &_request);
  }

 private:
  ::fidl::UnownedClientEnd<::fidl_test_inheritance::Super> _client_end() const {
    return ::fidl::UnownedClientEnd<::fidl_test_inheritance::Super>(_channel());
  }
};

template <>
class ::fidl::internal::WireSyncBufferClientImpl<::fidl_test_inheritance::Super>
    final : public ::fidl::internal::SyncEndpointBufferVeneer<
                ::fidl::internal::WireSyncBufferClientImpl<
                    ::fidl_test_inheritance::Super>> {
 public:
  // Caller provides the backing storage for FIDL message via an argument to
  // `.buffer()`.
  ::fidl::WireUnownedResult<::fidl_test_inheritance::Super::Foo> Foo(
      ::fidl::StringView s) {
    ::fidl::WireRequest<::fidl_test_inheritance::Super::Foo> _request{s};
    return ::fidl::WireUnownedResult<::fidl_test_inheritance::Super::Foo>(
        _client_end(), _allocator(), &_request);
  }

 private:
  ::fidl::UnownedClientEnd<::fidl_test_inheritance::Super> _client_end() const {
    return ::fidl::UnownedClientEnd<::fidl_test_inheritance::Super>(_channel());
  }
};
template <>
class ::fidl::internal::WireEventHandlerInterface<
    ::fidl_test_inheritance::Super> {
 public:
  WireEventHandlerInterface() = default;
  virtual ~WireEventHandlerInterface() = default;
};

template <>
class ::fidl::WireAsyncEventHandler<::fidl_test_inheritance::Super>
    : public ::fidl::internal::WireEventHandlerInterface<
          ::fidl_test_inheritance::Super>,
      public ::fidl::internal::AsyncEventHandler {
 public:
  WireAsyncEventHandler() = default;
};

template <>
class ::fidl::WireSyncEventHandler<::fidl_test_inheritance::Super>
    : public ::fidl::internal::WireEventHandlerInterface<
          ::fidl_test_inheritance::Super> {
 public:
  WireSyncEventHandler() = default;

  // Method called when an unknown event is found. This methods gives the status
  // which, in this case, is returned by HandleOneEvent.
  virtual zx_status_t Unknown() = 0;

  // Handle all possible events defined in this protocol.
  // Blocks to consume exactly one message from the channel, then call the
  // corresponding virtual method.
  ::fidl::Result HandleOneEvent(
      ::fidl::UnownedClientEnd<::fidl_test_inheritance::Super> client_end);
};
template <>
class ::fidl::WireSyncClient<::fidl_test_inheritance::Super> final
    : public ::fidl::internal::WireSyncClientBase<
          ::fidl_test_inheritance::Super> {
 public:
  using ::fidl::internal::WireSyncClientBase<
      ::fidl_test_inheritance::Super>::WireSyncClientBase;
};

template <>
class ::fidl::internal::WireCompleterBase<::fidl_test_inheritance::Super::Foo>
    : public ::fidl::CompleterBase {
 public:
  // In the following methods, the return value indicates internal errors during
  // the reply, such as encoding or writing to the transport.
  // Note that any error will automatically lead to the destruction of the
  // binding, after which the |on_unbound| callback will be triggered with a
  // detailed reason.
  //
  // See //zircon/system/ulib/fidl/include/lib/fidl/llcpp/server.h.
  //
  // Because the reply status is identical to the unbinding status, it can be
  // safely ignored.
  ::fidl::Result Reply(int64_t y);
  ::fidl::Result Reply(::fidl::BufferSpan _buffer, int64_t y);

 protected:
  using ::fidl::CompleterBase::CompleterBase;
};

template <>
struct ::fidl::internal::WireMethodTypes<::fidl_test_inheritance::Super::Foo> {
  using Completer = fidl::Completer<
      ::fidl::internal::WireCompleterBase<::fidl_test_inheritance::Super::Foo>>;
};

// Pure-virtual interface to be implemented by a server.
// This interface uses typed channels (i.e. |fidl::ClientEnd<SomeProtocol>|
// and |fidl::ServerEnd<SomeProtocol>|).
template <>
class ::fidl::WireServer<::fidl_test_inheritance::Super>
    : public ::fidl::internal::IncomingMessageDispatcher {
 public:
  WireServer() = default;
  virtual ~WireServer() = default;

  // The FIDL protocol type that is implemented by this server.
  using _EnclosingProtocol = ::fidl_test_inheritance::Super;

  using FooCompleter =
      ::fidl::internal::WireCompleter<::fidl_test_inheritance::Super::Foo>;
  using FooRequestView =
      ::fidl::internal::WireRequestView<::fidl_test_inheritance::Super::Foo>;

  virtual void Foo(FooRequestView request, FooCompleter::Sync& _completer) = 0;

 private:
  void dispatch_message(
      ::fidl::IncomingMessage&& msg, ::fidl::Transaction* txn,
      const internal::IncomingTransportContext* transport_context) final;
};
#endif  // __Fuchsia__

namespace fidl_test_inheritance {
__LOCAL extern "C" const fidl_type_t
    fidl_test_inheritance_subfooRequestMessageTable;

__LOCAL extern "C" const fidl_type_t
    fidl_test_inheritance_subfooResponseMessageTable;

}  // namespace fidl_test_inheritance
#ifdef __Fuchsia__

template <>
struct ::fidl::internal::ProtocolDetails<::fidl_test_inheritance::Sub> {};
#endif  // __Fuchsia__

#ifdef __Fuchsia__

template <>
struct ::fidl::internal::WireServerDispatcher<::fidl_test_inheritance::Sub>
    final {
  WireServerDispatcher() = delete;
  static ::fidl::DispatchResult TryDispatch(
      ::fidl::WireServer<::fidl_test_inheritance::Sub>* impl,
      ::fidl::IncomingMessage& msg, ::fidl::Transaction* txn);
  static void Dispatch(::fidl::WireServer<::fidl_test_inheritance::Sub>* impl,
                       ::fidl::IncomingMessage&& msg, ::fidl::Transaction* txn);

 private:
  static const ::fidl::internal::MethodEntry entries_[];
  static const ::fidl::internal::MethodEntry* entries_end_;
};
#endif  // __Fuchsia__

template <>
struct ::fidl::WireRequest<::fidl_test_inheritance::Sub::Foo> final {
  FIDL_ALIGNDECL
  fidl_message_header_t _hdr;
  ::fidl::StringView s;

  explicit WireRequest(::fidl::StringView s) : s(s) { _InitHeader(); }
  WireRequest() { _InitHeader(); }

  static constexpr const fidl_type_t* Type =
      &::fidl_test_inheritance::fidl_test_inheritance_subfooRequestMessageTable;
  static constexpr uint32_t MaxNumHandles = 0;
  static constexpr uint32_t PrimarySize = 32;
  static constexpr uint32_t PrimarySizeV1 = 32;
  static constexpr uint32_t MaxOutOfLine = 4294967295;
  static constexpr uint32_t MaxOutOfLineV1 = 4294967295;
  static constexpr bool HasFlexibleEnvelope = false;
  static constexpr bool HasPointer = true;
  static constexpr ::fidl::internal::TransactionalMessageKind MessageKind =
      ::fidl::internal::TransactionalMessageKind::kRequest;
  using ResponseType = ::fidl::WireResponse<::fidl_test_inheritance::Sub::Foo>;

  class UnownedEncodedMessage;
  class OwnedEncodedMessage;

 public:
  class DecodedMessage;

 private:
  void _InitHeader();
};
template <>
struct ::fidl::WireResponse<::fidl_test_inheritance::Sub::Foo> final {
  FIDL_ALIGNDECL
  fidl_message_header_t _hdr;
  int64_t y;

  explicit WireResponse(int64_t y) : y(y) { _InitHeader(); }
  WireResponse() { _InitHeader(); }

  static constexpr const fidl_type_t* Type =
      &::fidl_test_inheritance::
          fidl_test_inheritance_subfooResponseMessageTable;
  static constexpr uint32_t MaxNumHandles = 0;
  static constexpr uint32_t PrimarySize = 24;
  static constexpr uint32_t PrimarySizeV1 = 24;
  static constexpr uint32_t MaxOutOfLine = 0;
  static constexpr uint32_t MaxOutOfLineV1 = 0;
  static constexpr bool HasFlexibleEnvelope = false;
  static constexpr bool HasPointer = false;
  static constexpr ::fidl::internal::TransactionalMessageKind MessageKind =
      ::fidl::internal::TransactionalMessageKind::kResponse;

  class UnownedEncodedMessage;
  class OwnedEncodedMessage;

 public:
  class DecodedMessage;

 private:
  void _InitHeader();
};
#ifdef __Fuchsia__

template <>
class ::fidl::WireResult<::fidl_test_inheritance::Sub::Foo> final
    : public ::fidl::Result {
 public:
  WireResult(::fidl::UnownedClientEnd<::fidl_test_inheritance::Sub> client,
             ::fidl::WireRequest<::fidl_test_inheritance::Sub::Foo>* request);
  WireResult(::fidl::UnownedClientEnd<::fidl_test_inheritance::Sub> client,
             ::fidl::WireRequest<::fidl_test_inheritance::Sub::Foo>* request,
             zx_time_t _deadline);
  explicit WireResult(const ::fidl::Result& result) : ::fidl::Result(result) {}
  WireResult(WireResult&&) = delete;
  WireResult(const WireResult&) = delete;
  WireResult* operator=(WireResult&&) = delete;
  WireResult* operator=(const WireResult&) = delete;
  ~WireResult() = default;

  ::fidl::WireResponse<::fidl_test_inheritance::Sub::Foo>* Unwrap() {
    ZX_DEBUG_ASSERT(ok());
    return reinterpret_cast<
        ::fidl::WireResponse<::fidl_test_inheritance::Sub::Foo>*>(
        bytes_.data());
  }
  const ::fidl::WireResponse<::fidl_test_inheritance::Sub::Foo>* Unwrap()
      const {
    ZX_DEBUG_ASSERT(ok());
    return reinterpret_cast<
        const ::fidl::WireResponse<::fidl_test_inheritance::Sub::Foo>*>(
        bytes_.data());
  }

  ::fidl::WireResponse<::fidl_test_inheritance::Sub::Foo>& value() {
    return *Unwrap();
  }
  const ::fidl::WireResponse<::fidl_test_inheritance::Sub::Foo>& value() const {
    return *Unwrap();
  }

  ::fidl::WireResponse<::fidl_test_inheritance::Sub::Foo>* operator->() {
    return &value();
  }
  const ::fidl::WireResponse<::fidl_test_inheritance::Sub::Foo>* operator->()
      const {
    return &value();
  }

  ::fidl::WireResponse<::fidl_test_inheritance::Sub::Foo>& operator*() {
    return value();
  }
  const ::fidl::WireResponse<::fidl_test_inheritance::Sub::Foo>& operator*()
      const {
    return value();
  }

 private:
  ::fidl::internal::InlineMessageBuffer<24> bytes_;
};
template <>
class ::fidl::WireUnownedResult<::fidl_test_inheritance::Sub::Foo> final
    : public ::fidl::Result {
 public:
  explicit WireUnownedResult(
      ::fidl::UnownedClientEnd<::fidl_test_inheritance::Sub> client_end,
      ::fidl::internal::AnyBufferAllocator& allocator,
      ::fidl::WireRequest<::fidl_test_inheritance::Sub::Foo>* request);
  explicit WireUnownedResult(
      ::fidl::WireResponse<::fidl_test_inheritance::Sub::Foo>* response)
      : bytes_(reinterpret_cast<uint8_t*>(response)) {}
  explicit WireUnownedResult(const ::fidl::Result& result)
      : ::fidl::Result(result) {}
  explicit WireUnownedResult(
      ::fidl::DecodedMessage<
          ::fidl::WireResponse<::fidl_test_inheritance::Sub::Foo>>&& decoded)
      : ::fidl::Result(decoded) {
    if (decoded.ok()) {
      bytes_ = reinterpret_cast<uint8_t*>(decoded.PrimaryObject());
    } else {
      bytes_ = nullptr;
    }
    decoded.ReleasePrimaryObject();
  }
  WireUnownedResult(WireUnownedResult&&) = delete;
  WireUnownedResult(const WireUnownedResult&) = delete;
  WireUnownedResult* operator=(WireUnownedResult&&) = delete;
  WireUnownedResult* operator=(const WireUnownedResult&) = delete;
  ~WireUnownedResult() = default;

  ::fidl::WireResponse<::fidl_test_inheritance::Sub::Foo>* Unwrap() {
    ZX_DEBUG_ASSERT(ok());
    return reinterpret_cast<
        ::fidl::WireResponse<::fidl_test_inheritance::Sub::Foo>*>(bytes_);
  }
  const ::fidl::WireResponse<::fidl_test_inheritance::Sub::Foo>* Unwrap()
      const {
    ZX_DEBUG_ASSERT(ok());
    return reinterpret_cast<
        const ::fidl::WireResponse<::fidl_test_inheritance::Sub::Foo>*>(bytes_);
  }

  ::fidl::WireResponse<::fidl_test_inheritance::Sub::Foo>& value() {
    return *Unwrap();
  }
  const ::fidl::WireResponse<::fidl_test_inheritance::Sub::Foo>& value() const {
    return *Unwrap();
  }

  ::fidl::WireResponse<::fidl_test_inheritance::Sub::Foo>* operator->() {
    return &value();
  }
  const ::fidl::WireResponse<::fidl_test_inheritance::Sub::Foo>* operator->()
      const {
    return &value();
  }

  ::fidl::WireResponse<::fidl_test_inheritance::Sub::Foo>& operator*() {
    return value();
  }
  const ::fidl::WireResponse<::fidl_test_inheritance::Sub::Foo>& operator*()
      const {
    return value();
  }

 private:
  uint8_t* bytes_;
};

// Methods to make a sync FIDL call directly on an unowned channel or a
// const reference to a |fidl::ClientEnd<::fidl_test_inheritance::Sub>|,
// avoiding setting up a client.
template <>
class ::fidl::internal::WireSyncClientImpl<::fidl_test_inheritance::Sub> final
    : public ::fidl::internal::SyncEndpointManagedVeneer<
          ::fidl::internal::WireSyncClientImpl<::fidl_test_inheritance::Sub>> {
 public:
  // Allocates 24 bytes of response buffer on the stack. Request is
  // heap-allocated.
  ::fidl::WireResult<::fidl_test_inheritance::Sub::Foo> Foo(
      ::fidl::StringView s) {
    ::fidl::WireRequest<::fidl_test_inheritance::Sub::Foo> _request{s};
    return ::fidl::WireResult<::fidl_test_inheritance::Sub::Foo>(_client_end(),
                                                                 &_request);
  }

 private:
  ::fidl::UnownedClientEnd<::fidl_test_inheritance::Sub> _client_end() const {
    return ::fidl::UnownedClientEnd<::fidl_test_inheritance::Sub>(_channel());
  }
};

template <>
class ::fidl::internal::WireSyncBufferClientImpl<::fidl_test_inheritance::Sub>
    final : public ::fidl::internal::SyncEndpointBufferVeneer<
                ::fidl::internal::WireSyncBufferClientImpl<
                    ::fidl_test_inheritance::Sub>> {
 public:
  // Caller provides the backing storage for FIDL message via an argument to
  // `.buffer()`.
  ::fidl::WireUnownedResult<::fidl_test_inheritance::Sub::Foo> Foo(
      ::fidl::StringView s) {
    ::fidl::WireRequest<::fidl_test_inheritance::Sub::Foo> _request{s};
    return ::fidl::WireUnownedResult<::fidl_test_inheritance::Sub::Foo>(
        _client_end(), _allocator(), &_request);
  }

 private:
  ::fidl::UnownedClientEnd<::fidl_test_inheritance::Sub> _client_end() const {
    return ::fidl::UnownedClientEnd<::fidl_test_inheritance::Sub>(_channel());
  }
};
template <>
class ::fidl::internal::WireEventHandlerInterface<
    ::fidl_test_inheritance::Sub> {
 public:
  WireEventHandlerInterface() = default;
  virtual ~WireEventHandlerInterface() = default;
};

template <>
class ::fidl::WireAsyncEventHandler<::fidl_test_inheritance::Sub>
    : public ::fidl::internal::WireEventHandlerInterface<
          ::fidl_test_inheritance::Sub>,
      public ::fidl::internal::AsyncEventHandler {
 public:
  WireAsyncEventHandler() = default;
};

template <>
class ::fidl::WireSyncEventHandler<::fidl_test_inheritance::Sub>
    : public ::fidl::internal::WireEventHandlerInterface<
          ::fidl_test_inheritance::Sub> {
 public:
  WireSyncEventHandler() = default;

  // Method called when an unknown event is found. This methods gives the status
  // which, in this case, is returned by HandleOneEvent.
  virtual zx_status_t Unknown() = 0;

  // Handle all possible events defined in this protocol.
  // Blocks to consume exactly one message from the channel, then call the
  // corresponding virtual method.
  ::fidl::Result HandleOneEvent(
      ::fidl::UnownedClientEnd<::fidl_test_inheritance::Sub> client_end);
};
template <>
class ::fidl::WireSyncClient<::fidl_test_inheritance::Sub> final
    : public ::fidl::internal::WireSyncClientBase<
          ::fidl_test_inheritance::Sub> {
 public:
  using ::fidl::internal::WireSyncClientBase<
      ::fidl_test_inheritance::Sub>::WireSyncClientBase;
};

template <>
class ::fidl::internal::WireCompleterBase<::fidl_test_inheritance::Sub::Foo>
    : public ::fidl::CompleterBase {
 public:
  // In the following methods, the return value indicates internal errors during
  // the reply, such as encoding or writing to the transport.
  // Note that any error will automatically lead to the destruction of the
  // binding, after which the |on_unbound| callback will be triggered with a
  // detailed reason.
  //
  // See //zircon/system/ulib/fidl/include/lib/fidl/llcpp/server.h.
  //
  // Because the reply status is identical to the unbinding status, it can be
  // safely ignored.
  ::fidl::Result Reply(int64_t y);
  ::fidl::Result Reply(::fidl::BufferSpan _buffer, int64_t y);

 protected:
  using ::fidl::CompleterBase::CompleterBase;
};

template <>
struct ::fidl::internal::WireMethodTypes<::fidl_test_inheritance::Sub::Foo> {
  using Completer = fidl::Completer<
      ::fidl::internal::WireCompleterBase<::fidl_test_inheritance::Sub::Foo>>;
};

// Pure-virtual interface to be implemented by a server.
// This interface uses typed channels (i.e. |fidl::ClientEnd<SomeProtocol>|
// and |fidl::ServerEnd<SomeProtocol>|).
template <>
class ::fidl::WireServer<::fidl_test_inheritance::Sub>
    : public ::fidl::internal::IncomingMessageDispatcher {
 public:
  WireServer() = default;
  virtual ~WireServer() = default;

  // The FIDL protocol type that is implemented by this server.
  using _EnclosingProtocol = ::fidl_test_inheritance::Sub;

  using FooCompleter =
      ::fidl::internal::WireCompleter<::fidl_test_inheritance::Sub::Foo>;
  using FooRequestView =
      ::fidl::internal::WireRequestView<::fidl_test_inheritance::Sub::Foo>;

  virtual void Foo(FooRequestView request, FooCompleter::Sync& _completer) = 0;

 private:
  void dispatch_message(
      ::fidl::IncomingMessage&& msg, ::fidl::Transaction* txn,
      const internal::IncomingTransportContext* transport_context) final;
};
#endif  // __Fuchsia__

namespace fidl {

template <>
struct IsFidlType<::fidl::WireRequest<::fidl_test_inheritance::Super::Foo>>
    : public std::true_type {};
template <>
struct IsFidlMessage<::fidl::WireRequest<::fidl_test_inheritance::Super::Foo>>
    : public std::true_type {};
static_assert(
    sizeof(::fidl::WireRequest<::fidl_test_inheritance::Super::Foo>) ==
    ::fidl::WireRequest<::fidl_test_inheritance::Super::Foo>::PrimarySize);
static_assert(offsetof(::fidl::WireRequest<::fidl_test_inheritance::Super::Foo>,
                       s) == 16);

template <>
struct IsFidlType<::fidl::WireResponse<::fidl_test_inheritance::Super::Foo>>
    : public std::true_type {};
template <>
struct IsFidlMessage<::fidl::WireResponse<::fidl_test_inheritance::Super::Foo>>
    : public std::true_type {};
static_assert(
    sizeof(::fidl::WireResponse<::fidl_test_inheritance::Super::Foo>) ==
    ::fidl::WireResponse<::fidl_test_inheritance::Super::Foo>::PrimarySize);
static_assert(
    offsetof(::fidl::WireResponse<::fidl_test_inheritance::Super::Foo>, y) ==
    16);

template <>
struct IsFidlType<::fidl::WireRequest<::fidl_test_inheritance::Sub::Foo>>
    : public std::true_type {};
template <>
struct IsFidlMessage<::fidl::WireRequest<::fidl_test_inheritance::Sub::Foo>>
    : public std::true_type {};
static_assert(
    sizeof(::fidl::WireRequest<::fidl_test_inheritance::Sub::Foo>) ==
    ::fidl::WireRequest<::fidl_test_inheritance::Sub::Foo>::PrimarySize);
static_assert(offsetof(::fidl::WireRequest<::fidl_test_inheritance::Sub::Foo>,
                       s) == 16);

template <>
struct IsFidlType<::fidl::WireResponse<::fidl_test_inheritance::Sub::Foo>>
    : public std::true_type {};
template <>
struct IsFidlMessage<::fidl::WireResponse<::fidl_test_inheritance::Sub::Foo>>
    : public std::true_type {};
static_assert(
    sizeof(::fidl::WireResponse<::fidl_test_inheritance::Sub::Foo>) ==
    ::fidl::WireResponse<::fidl_test_inheritance::Sub::Foo>::PrimarySize);
static_assert(offsetof(::fidl::WireResponse<::fidl_test_inheritance::Sub::Foo>,
                       y) == 16);
}  // namespace fidl
#ifdef __Fuchsia__

template <>
class ::fidl::WireResponseContext<::fidl_test_inheritance::Super::Foo>
    : public ::fidl::internal::ResponseContext {
 public:
  WireResponseContext();

  virtual void OnResult(
      ::fidl::WireUnownedResult<::fidl_test_inheritance::Super::Foo>&
          result) = 0;

 private:
  ::cpp17::optional<::fidl::UnbindInfo> OnRawResult(
      ::fidl::IncomingMessage&& msg,
      const internal::IncomingTransportContext* transport_context) override;
};
#endif  // __Fuchsia__

#ifdef __Fuchsia__

template <>
class ::fidl::internal::WireClientImpl<::fidl_test_inheritance::Super> final
    : public ::fidl::internal::ClientBase {
 public:
  // Asynchronous variant of |Super.Foo()|.
  // The request and callback are allocated on the heap.
  void Foo(::fidl::StringView s,
           ::fidl::WireClientCallback<::fidl_test_inheritance::Super::Foo> _cb);

  void Foo(
      ::fidl::StringView s,
      ::fit::callback<void(
          ::fidl::WireResponse<::fidl_test_inheritance::Super::Foo>* response)>
          _cb);

  // Asynchronous variant of |Super.Foo()|.
  // Caller provides the backing storage for FIDL message via request buffer.
  // Ownership of |_context| is given unsafely to the binding until |OnError|
  // or |OnReply| are called on it.
  void Foo(::fidl::BufferSpan _request_buffer, ::fidl::StringView s,
           ::fidl::WireResponseContext<::fidl_test_inheritance::Super::Foo>*
               _context);

  // Synchronous variant of |Foo.Foo()|.
  // Allocates 24 bytes of response buffer on the stack. Request is
  // heap-allocated.
  ::fidl::WireResult<::fidl_test_inheritance::Super::Foo> Foo_Sync(
      ::fidl::StringView s);

  // Synchronous variant of |Foo.Foo()|.
  // Caller provides the backing storage for FIDL message via request and
  // response buffers.
  ::fidl::WireUnownedResult<::fidl_test_inheritance::Super::Foo> Foo_Sync(
      ::fidl::BufferSpan _buffer_span, ::fidl::StringView s);
  WireClientImpl() = default;

 private:
  std::optional<::fidl::UnbindInfo> DispatchEvent(
      ::fidl::IncomingMessage& msg,
      ::fidl::internal::AsyncEventHandler* maybe_event_handler,
      const internal::IncomingTransportContext* transport_context) override;
};
#endif  // __Fuchsia__

#ifdef __Fuchsia__
// |EventSender| owns a server endpoint of a channel speaking
// the Super protocol, and can send events in that protocol.
template <>
class ::fidl::WireEventSender<::fidl_test_inheritance::Super> {
 public:
  // Constructs an event sender with an invalid channel.
  WireEventSender() = default;

  explicit WireEventSender(
      ::fidl::ServerEnd<::fidl_test_inheritance::Super> server_end)
      : server_end_(std::move(server_end)) {}

  // The underlying server channel endpoint, which may be replaced at run-time.
  const ::fidl::ServerEnd<::fidl_test_inheritance::Super>& server_end() const {
    return server_end_;
  }
  ::fidl::ServerEnd<::fidl_test_inheritance::Super>& server_end() {
    return server_end_;
  }

  const ::zx::channel& channel() const { return server_end_.channel(); }
  ::zx::channel& channel() { return server_end_.channel(); }

  // Whether the underlying channel is valid.
  bool is_valid() const { return server_end_.is_valid(); }

 private:
  ::fidl::ServerEnd<::fidl_test_inheritance::Super> server_end_;
};

template <>
class ::fidl::internal::WireWeakEventSender<::fidl_test_inheritance::Super> {
 public:
  WireWeakEventSender(
      std::weak_ptr<::fidl::internal::AsyncServerBinding>&& binding)
      : inner_(std::move(binding)) {}

 private:
  friend ServerBindingRef<::fidl_test_inheritance::Super>;

  ::fidl::internal::WeakEventSenderInner inner_;
};
#endif  // __Fuchsia__

#ifdef __Fuchsia__

template <>
class ::fidl::WireResponseContext<::fidl_test_inheritance::Sub::Foo>
    : public ::fidl::internal::ResponseContext {
 public:
  WireResponseContext();

  virtual void OnResult(
      ::fidl::WireUnownedResult<::fidl_test_inheritance::Sub::Foo>& result) = 0;

 private:
  ::cpp17::optional<::fidl::UnbindInfo> OnRawResult(
      ::fidl::IncomingMessage&& msg,
      const internal::IncomingTransportContext* transport_context) override;
};
#endif  // __Fuchsia__

#ifdef __Fuchsia__

template <>
class ::fidl::internal::WireClientImpl<::fidl_test_inheritance::Sub> final
    : public ::fidl::internal::ClientBase {
 public:
  // Asynchronous variant of |Sub.Foo()|.
  // The request and callback are allocated on the heap.
  void Foo(::fidl::StringView s,
           ::fidl::WireClientCallback<::fidl_test_inheritance::Sub::Foo> _cb);

  void Foo(
      ::fidl::StringView s,
      ::fit::callback<void(
          ::fidl::WireResponse<::fidl_test_inheritance::Sub::Foo>* response)>
          _cb);

  // Asynchronous variant of |Sub.Foo()|.
  // Caller provides the backing storage for FIDL message via request buffer.
  // Ownership of |_context| is given unsafely to the binding until |OnError|
  // or |OnReply| are called on it.
  void Foo(
      ::fidl::BufferSpan _request_buffer, ::fidl::StringView s,
      ::fidl::WireResponseContext<::fidl_test_inheritance::Sub::Foo>* _context);

  // Synchronous variant of |Foo.Foo()|.
  // Allocates 24 bytes of response buffer on the stack. Request is
  // heap-allocated.
  ::fidl::WireResult<::fidl_test_inheritance::Sub::Foo> Foo_Sync(
      ::fidl::StringView s);

  // Synchronous variant of |Foo.Foo()|.
  // Caller provides the backing storage for FIDL message via request and
  // response buffers.
  ::fidl::WireUnownedResult<::fidl_test_inheritance::Sub::Foo> Foo_Sync(
      ::fidl::BufferSpan _buffer_span, ::fidl::StringView s);
  WireClientImpl() = default;

 private:
  std::optional<::fidl::UnbindInfo> DispatchEvent(
      ::fidl::IncomingMessage& msg,
      ::fidl::internal::AsyncEventHandler* maybe_event_handler,
      const internal::IncomingTransportContext* transport_context) override;
};
#endif  // __Fuchsia__

#ifdef __Fuchsia__
// |EventSender| owns a server endpoint of a channel speaking
// the Sub protocol, and can send events in that protocol.
template <>
class ::fidl::WireEventSender<::fidl_test_inheritance::Sub> {
 public:
  // Constructs an event sender with an invalid channel.
  WireEventSender() = default;

  explicit WireEventSender(
      ::fidl::ServerEnd<::fidl_test_inheritance::Sub> server_end)
      : server_end_(std::move(server_end)) {}

  // The underlying server channel endpoint, which may be replaced at run-time.
  const ::fidl::ServerEnd<::fidl_test_inheritance::Sub>& server_end() const {
    return server_end_;
  }
  ::fidl::ServerEnd<::fidl_test_inheritance::Sub>& server_end() {
    return server_end_;
  }

  const ::zx::channel& channel() const { return server_end_.channel(); }
  ::zx::channel& channel() { return server_end_.channel(); }

  // Whether the underlying channel is valid.
  bool is_valid() const { return server_end_.is_valid(); }

 private:
  ::fidl::ServerEnd<::fidl_test_inheritance::Sub> server_end_;
};

template <>
class ::fidl::internal::WireWeakEventSender<::fidl_test_inheritance::Sub> {
 public:
  WireWeakEventSender(
      std::weak_ptr<::fidl::internal::AsyncServerBinding>&& binding)
      : inner_(std::move(binding)) {}

 private:
  friend ServerBindingRef<::fidl_test_inheritance::Sub>;

  ::fidl::internal::WeakEventSenderInner inner_;
};
#endif  // __Fuchsia__
