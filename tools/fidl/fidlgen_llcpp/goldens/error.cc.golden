// WARNING: This file is machine generated by fidlgen.

#include <fidl/test/error/llcpp/fidl.h>

#include <memory>

void ::fidl_test_error::wire::ExampleFooResult::SizeAndOffsetAssertionHelper() {
  static_assert(sizeof(ExampleFooResult) == sizeof(fidl_xunion_t));
  static_assert(offsetof(ExampleFooResult, ordinal_) ==
                offsetof(fidl_xunion_t, tag));
  static_assert(offsetof(ExampleFooResult, envelope_) ==
                offsetof(fidl_xunion_t, envelope));
}

namespace fidl_test_error {
[[maybe_unused]] constexpr uint64_t kExample_foo_Ordinal =
    6333213382893778862lu;

extern "C" const fidl_type_t fidl_test_error_ExamplefooRequestTable;

extern "C" const fidl_type_t fidl_test_error_ExamplefooResponseTable;
#ifdef __Fuchsia__
}  // namespace fidl_test_error
::fidl::WireResult<::fidl_test_error::Example::Foo>::WireResult(
    ::fidl::UnownedClientEnd<::fidl_test_error::Example> _client,
    ::fidl::StringView s) {
  ::fidl::OwnedEncodedMessage<
      ::fidl::WireRequest<::fidl_test_error::Example::Foo>>
      _request(zx_txid_t(0), s);
  _request.GetOutgoingMessage()
      .Call<::fidl::WireResponse<::fidl_test_error::Example::Foo>>(
          _client, bytes_.data(), bytes_.size());
  status_ = _request.status();
  error_ = _request.error();
}

::fidl::WireResult<::fidl_test_error::Example::Foo>::WireResult(
    ::fidl::UnownedClientEnd<::fidl_test_error::Example> _client,
    ::fidl::StringView s, zx_time_t _deadline) {
  ::fidl::OwnedEncodedMessage<
      ::fidl::WireRequest<::fidl_test_error::Example::Foo>>
      _request(zx_txid_t(0), s);
  _request.GetOutgoingMessage()
      .Call<::fidl::WireResponse<::fidl_test_error::Example::Foo>>(
          _client, bytes_.data(), bytes_.size(), _deadline);
  status_ = _request.status();
  error_ = _request.error();
}
namespace fidl_test_error {
#endif  // __Fuchsia__

#ifdef __Fuchsia__
}  // namespace fidl_test_error
::fidl::WireUnownedResult<::fidl_test_error::Example::Foo>::WireUnownedResult(
    ::fidl::UnownedClientEnd<::fidl_test_error::Example> _client,
    uint8_t* _request_bytes, uint32_t _request_byte_capacity,
    ::fidl::StringView s, uint8_t* _response_bytes,
    uint32_t _response_byte_capacity)
    : bytes_(_response_bytes) {
  ::fidl::UnownedEncodedMessage<
      ::fidl::WireRequest<::fidl_test_error::Example::Foo>>
      _request(_request_bytes, _request_byte_capacity, 0, s);
  _request.GetOutgoingMessage()
      .Call<::fidl::WireResponse<::fidl_test_error::Example::Foo>>(
          _client, _response_bytes, _response_byte_capacity);
  status_ = _request.status();
  error_ = _request.error();
}
namespace fidl_test_error {
#endif  // __Fuchsia__

}  // namespace fidl_test_error
#ifdef __Fuchsia__
::fidl::WireResult<::fidl_test_error::Example::Foo>
fidl::internal::WireClientImpl<::fidl_test_error::Example>::Foo_Sync(
    ::fidl::StringView s) {
  if (auto _channel = ::fidl::internal::ClientBase::GetChannel()) {
    return ::fidl::WireResult<::fidl_test_error::Example::Foo>(
        ::fidl::UnownedClientEnd<::fidl_test_error::Example>(
            _channel->handle()),
        s);
  }
  return ::fidl::WireResult<::fidl_test_error::Example::Foo>(
      ::fidl::Result(ZX_ERR_CANCELED, ::fidl::kErrorChannelUnbound));
}
#endif  // __Fuchsia__

#ifdef __Fuchsia__
::fidl::WireUnownedResult<::fidl_test_error::Example::Foo>
fidl::internal::WireClientImpl<::fidl_test_error::Example>::Foo_Sync(
    ::fidl::BufferSpan _request_buffer, ::fidl::StringView s,
    ::fidl::BufferSpan _response_buffer) {
  if (auto _channel = ::fidl::internal::ClientBase::GetChannel()) {
    return ::fidl::WireUnownedResult<::fidl_test_error::Example::Foo>(
        ::fidl::UnownedClientEnd<::fidl_test_error::Example>(
            _channel->handle()),
        _request_buffer.data, _request_buffer.capacity, s,
        _response_buffer.data, _response_buffer.capacity);
  }
  return ::fidl::WireUnownedResult<::fidl_test_error::Example::Foo>(
      ::fidl::Result(ZX_ERR_CANCELED, ::fidl::kErrorChannelUnbound));
}
#endif  // __Fuchsia__

#ifdef __Fuchsia__

::fidl::WireResponseContext<
    ::fidl_test_error::Example::Foo>::WireResponseContext()
    : ::fidl::internal::ResponseContext(
          ::fidl_test_error::kExample_foo_Ordinal) {}

zx_status_t fidl::WireResponseContext<
    ::fidl_test_error::Example::Foo>::OnRawReply(fidl_incoming_msg_t* msg) {
  zx_status_t status = fidl_decode_msg(
      ::fidl::WireResponse<::fidl_test_error::Example::Foo>::Type, msg,
      nullptr);
  if (unlikely(status != ZX_OK)) {
    return status;
  }
  OnReply(
      reinterpret_cast<::fidl::WireResponse<::fidl_test_error::Example::Foo>*>(
          msg->bytes));
  return ZX_OK;
}
#endif  // __Fuchsia__

#ifdef __Fuchsia__
::fidl::Result fidl::internal::WireClientImpl<::fidl_test_error::Example>::Foo(
    ::fidl::StringView s,
    ::fit::callback<
        void(::fidl::WireResponse<::fidl_test_error::Example::Foo>* response)>
        _cb) {
  class ResponseContext final
      : public ::fidl::WireResponseContext<::fidl_test_error::Example::Foo> {
   public:
    ResponseContext(
        ::fit::callback<void(
            ::fidl::WireResponse<::fidl_test_error::Example::Foo>* response)>
            cb)
        : cb_(std::move(cb)) {}

    void OnReply(::fidl::WireResponse<::fidl_test_error::Example::Foo>*
                     response) override {
      cb_(response);

      delete this;
    }

    void OnError() override { delete this; }

   private:
    ::fit::callback<void(
        ::fidl::WireResponse<::fidl_test_error::Example::Foo>* response)>
        cb_;
  };

  auto* _context = new ResponseContext(std::move(_cb));
  ::fidl::internal::ClientBase::PrepareAsyncTxn(_context);
  ::fidl::WireRequest<::fidl_test_error::Example::Foo>::OwnedEncodedMessage
      _request(_context->Txid(), s);
  return _request.GetOutgoingMessage().Write(this, _context);
}

::fidl::Result fidl::internal::WireClientImpl<::fidl_test_error::Example>::Foo(
    ::fidl::BufferSpan _request_buffer, ::fidl::StringView s,
    ::fidl::WireResponseContext<::fidl_test_error::Example::Foo>* _context) {
  ::fidl::internal::ClientBase::PrepareAsyncTxn(_context);

  ::fidl::WireRequest<::fidl_test_error::Example::Foo>::UnownedEncodedMessage
      _request(_request_buffer.data, _request_buffer.capacity, _context->Txid(),
               s);
  return _request.GetOutgoingMessage().Write(this, _context);
}
#endif  // __Fuchsia__

#ifdef __Fuchsia__
std::optional<::fidl::UnbindInfo> fidl::internal::WireClientImpl<
    ::fidl_test_error::Example>::DispatchEvent(fidl_incoming_msg_t* msg) {
  FidlHandleInfoCloseMany(msg->handles, msg->num_handles);
  return ::fidl::UnbindInfo{::fidl::UnbindInfo::kUnexpectedMessage,
                            ZX_ERR_NOT_SUPPORTED};
}
#endif  // __Fuchsia__

#ifdef __Fuchsia__

::fidl::DispatchResult
fidl::internal::WireServerDispatcher<::fidl_test_error::Example>::TryDispatch(
    ::fidl::WireServer<::fidl_test_error::Example>* impl,
    fidl_incoming_msg_t* msg, ::fidl::Transaction* txn) {
  static const ::fidl::internal::MethodEntry entries[] = {
      {
          ::fidl_test_error::kExample_foo_Ordinal,
          [](void* interface, fidl_incoming_msg_t* msg,
             ::fidl::Transaction* txn) {
            zx_status_t status = fidl_decode_msg(
                ::fidl::WireRequest<::fidl_test_error::Example::Foo>::Type, msg,
                nullptr);
            if (unlikely(status != ZX_OK)) {
              return status;
            }
            ::fidl::WireServer<::fidl_test_error::Example>::FooCompleter::Sync
                completer(txn);
            reinterpret_cast<::fidl::WireServer<::fidl_test_error::Example>*>(
                interface)
                ->Foo(
                    reinterpret_cast<
                        ::fidl::WireRequest<::fidl_test_error::Example::Foo>*>(
                        msg->bytes),
                    completer);
            return ZX_OK;
          },
      },
  };
  return ::fidl::internal::TryDispatch(
      impl, msg, txn, entries,
      entries + sizeof(entries) / sizeof(::fidl::internal::MethodEntry));
}

::fidl::DispatchResult
fidl::internal::WireServerDispatcher<::fidl_test_error::Example>::Dispatch(
    ::fidl::WireServer<::fidl_test_error::Example>* impl,
    fidl_incoming_msg_t* msg, ::fidl::Transaction* txn) {
  ::fidl::DispatchResult dispatch_result = TryDispatch(impl, msg, txn);
  if (unlikely(dispatch_result == ::fidl::DispatchResult::kNotFound)) {
    FidlHandleInfoCloseMany(msg->handles, msg->num_handles);
    txn->InternalError(
        {::fidl::UnbindInfo::kUnexpectedMessage, ZX_ERR_NOT_SUPPORTED});
  }
  return dispatch_result;
}
::fidl::DispatchResult
fidl::WireServer<::fidl_test_error::Example>::dispatch_message(
    fidl_incoming_msg_t* msg, ::fidl::Transaction* txn) {
  return ::fidl::internal::WireServerDispatcher<
      ::fidl_test_error::Example>::Dispatch(this, msg, txn);
}

::fidl::DispatchResult
fidl::internal::WireDispatcher<::fidl_test_error::Example>::TryDispatch(
    ::fidl::WireInterface<::fidl_test_error::Example>* impl,
    fidl_incoming_msg_t* msg, ::fidl::Transaction* txn) {
  static const ::fidl::internal::MethodEntry entries[] = {
      {
          ::fidl_test_error::kExample_foo_Ordinal,
          [](void* interface, fidl_incoming_msg_t* msg,
             ::fidl::Transaction* txn) {
            zx_status_t status = fidl_decode_msg(
                ::fidl::WireRequest<::fidl_test_error::Example::Foo>::Type, msg,
                nullptr);
            if (unlikely(status != ZX_OK)) {
              return status;
            }
            auto message = reinterpret_cast<
                ::fidl::WireRequest<::fidl_test_error::Example::Foo>*>(
                msg->bytes);
            ::fidl::WireServer<::fidl_test_error::Example>::FooCompleter::Sync
                completer(txn);
            reinterpret_cast<
                ::fidl::WireInterface<::fidl_test_error::Example>*>(interface)
                ->Foo(std::move(message->s), completer);
            return ZX_OK;
          },
      },
  };
  return ::fidl::internal::TryDispatch(
      impl, msg, txn, entries,
      entries + sizeof(entries) / sizeof(::fidl::internal::MethodEntry));
}

::fidl::DispatchResult
fidl::internal::WireDispatcher<::fidl_test_error::Example>::Dispatch(
    ::fidl::WireInterface<::fidl_test_error::Example>* impl,
    fidl_incoming_msg_t* msg, ::fidl::Transaction* txn) {
  ::fidl::DispatchResult dispatch_result = TryDispatch(impl, msg, txn);
  if (unlikely(dispatch_result == ::fidl::DispatchResult::kNotFound)) {
    FidlHandleInfoCloseMany(msg->handles, msg->num_handles);
    txn->InternalError(
        {::fidl::UnbindInfo::kUnexpectedMessage, ZX_ERR_NOT_SUPPORTED});
  }
  return dispatch_result;
}
::fidl::DispatchResult
fidl::WireInterface<::fidl_test_error::Example>::dispatch_message(
    fidl_incoming_msg_t* msg, ::fidl::Transaction* txn) {
  return ::fidl::internal::WireDispatcher<::fidl_test_error::Example>::Dispatch(
      this, msg, txn);
}
#endif  // __Fuchsia__

#ifdef __Fuchsia__
::fidl::Result
fidl::WireServer<::fidl_test_error::Example>::FooCompleterBase::Reply(
    ::fidl_test_error::wire::ExampleFooResult result) {
  ::fidl::OwnedEncodedMessage<
      ::fidl::WireResponse<::fidl_test_error::Example::Foo>>
      _response{result};
  return ::fidl::WireServer<::fidl_test_error::Example>::FooCompleterBase::
      SendReply(&_response.GetOutgoingMessage());
}
#endif  // __Fuchsia__

#ifdef __Fuchsia__
::fidl::Result fidl::WireServer<
    ::fidl_test_error::Example>::FooCompleterBase::ReplySuccess(int64_t y) {
  ::fidl_test_error::wire::ExampleFooResponse _response;
  _response.y = std::move(y);

  return Reply(::fidl_test_error::wire::ExampleFooResult::WithResponse(
      ::fidl::ObjectView<::fidl_test_error::wire::ExampleFooResponse>::
          FromExternal(&_response)));
}
#endif  // __Fuchsia__

#ifdef __Fuchsia__
::fidl::Result fidl::WireServer<
    ::fidl_test_error::Example>::FooCompleterBase::ReplyError(uint32_t error) {
  return Reply(::fidl_test_error::wire::ExampleFooResult::WithErr(
      ::fidl::ObjectView<uint32_t>::FromExternal(&error)));
}
#endif  // __Fuchsia__

#ifdef __Fuchsia__
::fidl::Result
fidl::WireServer<::fidl_test_error::Example>::FooCompleterBase::Reply(
    ::fidl::BufferSpan _backing_buffer,
    ::fidl_test_error::wire::ExampleFooResult result) {
  ::fidl::WireResponse<::fidl_test_error::Example::Foo>::UnownedEncodedMessage
      _response(_backing_buffer.data, _backing_buffer.capacity, result);
  return CompleterBase::SendReply(&_response.GetOutgoingMessage());
}
#endif  // __Fuchsia__

#ifdef __Fuchsia__
::fidl::Result
fidl::WireServer<::fidl_test_error::Example>::FooCompleterBase::ReplySuccess(
    ::fidl::BufferSpan _buffer, int64_t y) {
  ::fidl_test_error::wire::ExampleFooResponse response;
  response.y = std::move(y);

  return Reply(
      std::move(_buffer),
      ::fidl_test_error::wire::ExampleFooResult::WithResponse(
          ::fidl::ObjectView<::fidl_test_error::wire::ExampleFooResponse>::
              FromExternal(&response)));
}
#endif  // __Fuchsia__

void ::fidl::WireRequest<::fidl_test_error::Example::Foo>::_InitHeader(
    zx_txid_t _txid) {
  fidl_init_txn_header(&_hdr, _txid, ::fidl_test_error::kExample_foo_Ordinal);
}

void ::fidl::WireResponse<::fidl_test_error::Example::Foo>::_InitHeader() {
  fidl_init_txn_header(&_hdr, 0, ::fidl_test_error::kExample_foo_Ordinal);
}

#ifdef __Fuchsia__

#endif  // __Fuchsia__
