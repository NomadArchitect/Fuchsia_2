// WARNING: This file is machine generated by fidlgen.

#include <fidl/fidl.test.error/cpp/wire.h>

#include <memory>

void ::fidl_test_error::wire::ExampleFooResult::SizeAndOffsetAssertionHelper() {
  static_assert(sizeof(ExampleFooResult) == sizeof(fidl_xunion_t));
  static_assert(offsetof(ExampleFooResult, ordinal_) ==
                offsetof(fidl_xunion_t, tag));
  static_assert(offsetof(ExampleFooResult, envelope_) ==
                offsetof(fidl_xunion_t, envelope));
}

namespace fidl_test_error {
[[maybe_unused]] constexpr uint64_t kExample_foo_Ordinal =
    6333213382893778862lu;

extern "C" const fidl_type_t fidl_test_error_ExamplefooRequestTable;

extern "C" const fidl_type_t fidl_test_error_ExamplefooResponseTable;
#ifdef __Fuchsia__
}  // namespace fidl_test_error
::fidl::WireResult<::fidl_test_error::Example::Foo>::WireResult(
    ::fidl::UnownedClientEnd<::fidl_test_error::Example> _client,
    ::fidl::StringView s) {
  FIDL_INTERNAL_DISABLE_AUTO_VAR_INIT
  ::fidl::OwnedEncodedMessage<
      ::fidl::WireRequest<::fidl_test_error::Example::Foo>>
      _request(::fidl::internal::AllowUnownedInputRef{}, s);
  auto& _outgoing = _request.GetOutgoingMessage();
  _outgoing.Call<::fidl::WireResponse<::fidl_test_error::Example::Foo>>(
      _client, bytes_.data(), static_cast<uint32_t>(bytes_.size()));
  SetResult(_outgoing);
}

::fidl::WireResult<::fidl_test_error::Example::Foo>::WireResult(
    ::fidl::UnownedClientEnd<::fidl_test_error::Example> _client,
    ::fidl::StringView s, zx_time_t _deadline) {
  FIDL_INTERNAL_DISABLE_AUTO_VAR_INIT
  ::fidl::OwnedEncodedMessage<
      ::fidl::WireRequest<::fidl_test_error::Example::Foo>>
      _request(::fidl::internal::AllowUnownedInputRef{}, s);
  auto& _outgoing = _request.GetOutgoingMessage();
  _outgoing.Call<::fidl::WireResponse<::fidl_test_error::Example::Foo>>(
      _client, bytes_.data(), static_cast<uint32_t>(bytes_.size()), _deadline);
  SetResult(_outgoing);
}
namespace fidl_test_error {
#endif  // __Fuchsia__

#ifdef __Fuchsia__
}  // namespace fidl_test_error
::fidl::WireUnownedResult<::fidl_test_error::Example::Foo>::WireUnownedResult(
    ::fidl::UnownedClientEnd<::fidl_test_error::Example> _client,
    uint8_t* _request_bytes, uint32_t _request_byte_capacity,
    ::fidl::StringView s, uint8_t* _response_bytes,
    uint32_t _response_byte_capacity)
    : bytes_(_response_bytes) {
  ::fidl::UnownedEncodedMessage<
      ::fidl::WireRequest<::fidl_test_error::Example::Foo>>
      _request(_request_bytes, _request_byte_capacity, s);
  auto& _outgoing = _request.GetOutgoingMessage();
  _outgoing.Call<::fidl::WireResponse<::fidl_test_error::Example::Foo>>(
      _client, _response_bytes, _response_byte_capacity);
  ::fidl::Result::operator=(_outgoing);
}
namespace fidl_test_error {
#endif  // __Fuchsia__

}  // namespace fidl_test_error
#ifdef __Fuchsia__

::fidl::WireResponseContext<
    ::fidl_test_error::Example::Foo>::WireResponseContext()
    : ::fidl::internal::ResponseContext(
          ::fidl_test_error::kExample_foo_Ordinal) {}

::cpp17::optional<::fidl::UnbindInfo>
fidl::WireResponseContext<::fidl_test_error::Example::Foo>::OnRawResult(
    ::fidl::IncomingMessage&& msg) {
  if (unlikely(!msg.ok())) {
    ::fidl::WireUnownedResult<::fidl_test_error::Example::Foo> result{
        msg.error()};
    OnResult(result);
    return cpp17::nullopt;
  }
  ::fidl::DecodedMessage<::fidl::WireResponse<::fidl_test_error::Example::Foo>>
      decoded{std::move(msg)};
  ::fidl::Result maybe_error = decoded;
  ::fidl::WireUnownedResult<::fidl_test_error::Example::Foo> result{
      std::move(decoded)};
  OnResult(result);
  if (unlikely(!maybe_error.ok())) {
    return ::fidl::UnbindInfo(maybe_error);
  }
  return cpp17::nullopt;
}
#endif  // __Fuchsia__

#ifdef __Fuchsia__

void fidl::internal::WireClientImpl<::fidl_test_error::Example>::Foo(
    ::fidl::StringView s,
    ::fidl::WireClientCallback<::fidl_test_error::Example::Foo> _cb) {
  using Callback = decltype(_cb);
  class ResponseContext final
      : public ::fidl::WireResponseContext<::fidl_test_error::Example::Foo> {
   public:
    ResponseContext(Callback cb) : cb_(std::move(cb)) {}

    void OnResult(::fidl::WireUnownedResult<::fidl_test_error::Example::Foo>&
                      result) override {
      cb_(result);
      delete this;
    }

   private:
    Callback cb_;
  };

  auto* _context = new ResponseContext(std::move(_cb));
  FIDL_INTERNAL_DISABLE_AUTO_VAR_INIT
  ::fidl::WireRequest<::fidl_test_error::Example::Foo>::OwnedEncodedMessage
      _request(::fidl::internal::AllowUnownedInputRef{}, s);
  ::fidl::internal::ClientBase::SendTwoWay(_request.GetOutgoingMessage(),
                                           _context);
}

void fidl::internal::WireClientImpl<::fidl_test_error::Example>::Foo(
    ::fidl::StringView s,
    ::fit::callback<
        void(::fidl::WireResponse<::fidl_test_error::Example::Foo>* response)>
        _cb) {
  using Callback = decltype(_cb);
  class ResponseContext final
      : public ::fidl::WireResponseContext<::fidl_test_error::Example::Foo> {
   public:
    ResponseContext(Callback cb) : cb_(std::move(cb)) {}

    void OnResult(::fidl::WireUnownedResult<::fidl_test_error::Example::Foo>&
                      result) override {
      if (result.ok()) {
        ::fidl::WireResponse<::fidl_test_error::Example::Foo>* response =
            result.Unwrap();
        cb_(response);
      }
      delete this;
    }

   private:
    Callback cb_;
  };

  auto* _context = new ResponseContext(std::move(_cb));
  FIDL_INTERNAL_DISABLE_AUTO_VAR_INIT
  ::fidl::WireRequest<::fidl_test_error::Example::Foo>::OwnedEncodedMessage
      _request(::fidl::internal::AllowUnownedInputRef{}, s);
  ::fidl::internal::ClientBase::SendTwoWay(_request.GetOutgoingMessage(),
                                           _context);
}
void fidl::internal::WireClientImpl<::fidl_test_error::Example>::Foo(
    ::fidl::BufferSpan _request_buffer, ::fidl::StringView s,
    ::fidl::WireResponseContext<::fidl_test_error::Example::Foo>* _context) {
  ::fidl::WireRequest<::fidl_test_error::Example::Foo>::UnownedEncodedMessage
      _request(_request_buffer.data, _request_buffer.capacity, s);
  ::fidl::internal::ClientBase::SendTwoWay(_request.GetOutgoingMessage(),
                                           _context);
}
::fidl::WireResult<::fidl_test_error::Example::Foo>
fidl::internal::WireClientImpl<::fidl_test_error::Example>::Foo_Sync(
    ::fidl::StringView s) {
  return ::fidl::internal::ClientBase::MakeSyncCallWith(
      [&](std::shared_ptr<ChannelRef> _channel) {
        return ::fidl::WireResult<::fidl_test_error::Example::Foo>(
            ::fidl::UnownedClientEnd<::fidl_test_error::Example>(
                _channel->handle()),
            s);
      });
}
::fidl::WireUnownedResult<::fidl_test_error::Example::Foo>
fidl::internal::WireClientImpl<::fidl_test_error::Example>::Foo_Sync(
    ::fidl::BufferSpan _request_buffer, ::fidl::StringView s,
    ::fidl::BufferSpan _response_buffer) {
  return ::fidl::internal::ClientBase::MakeSyncCallWith(
      [&](std::shared_ptr<ChannelRef> _channel) {
        return ::fidl::WireUnownedResult<::fidl_test_error::Example::Foo>(
            ::fidl::UnownedClientEnd<::fidl_test_error::Example>(
                _channel->handle()),
            _request_buffer.data, _request_buffer.capacity, s,
            _response_buffer.data, _response_buffer.capacity);
      });
}

std::optional<::fidl::UnbindInfo>
fidl::internal::WireClientImpl<::fidl_test_error::Example>::DispatchEvent(
    fidl::IncomingMessage& msg,
    ::fidl::internal::AsyncEventHandler* maybe_event_handler) {
  return ::fidl::UnbindInfo::UnknownOrdinal();
}
#endif  // __Fuchsia__

#ifdef __Fuchsia__

::fidl::DispatchResult
fidl::internal::WireServerDispatcher<::fidl_test_error::Example>::TryDispatch(
    ::fidl::WireServer<::fidl_test_error::Example>* impl,
    ::fidl::IncomingMessage& msg, ::fidl::Transaction* txn) {
  static const ::fidl::internal::MethodEntry entries[] = {
      {
          ::fidl_test_error::kExample_foo_Ordinal,
          [](void* interface, ::fidl::IncomingMessage&& msg,
             ::fidl::Transaction* txn) {
            ::fidl::DecodedMessage<
                ::fidl::WireRequest<::fidl_test_error::Example::Foo>>
                decoded{std::move(msg)};
            if (unlikely(!decoded.ok())) {
              return decoded.status();
            }
            auto* primary = decoded.PrimaryObject();
            ::fidl::internal::WireCompleter<
                ::fidl_test_error::Example::Foo>::Sync completer(txn);
            reinterpret_cast<::fidl::WireServer<::fidl_test_error::Example>*>(
                interface)
                ->Foo(primary, completer);
            return ZX_OK;
          },
      },
  };
  return ::fidl::internal::TryDispatch(
      impl, msg, txn, entries,
      entries + sizeof(entries) / sizeof(::fidl::internal::MethodEntry));
}

::fidl::DispatchResult
fidl::internal::WireServerDispatcher<::fidl_test_error::Example>::Dispatch(
    ::fidl::WireServer<::fidl_test_error::Example>* impl,
    ::fidl::IncomingMessage&& msg, ::fidl::Transaction* txn) {
  ::fidl::DispatchResult dispatch_result = TryDispatch(impl, msg, txn);
  if (unlikely(dispatch_result == ::fidl::DispatchResult::kNotFound)) {
    std::move(msg).CloseHandles();
    txn->InternalError(::fidl::UnbindInfo::UnknownOrdinal());
  }
  return dispatch_result;
}
::fidl::DispatchResult
fidl::WireServer<::fidl_test_error::Example>::dispatch_message(
    fidl::IncomingMessage&& msg, ::fidl::Transaction* txn) {
  return ::fidl::internal::WireServerDispatcher<
      ::fidl_test_error::Example>::Dispatch(this, std::move(msg), txn);
}
#endif  // __Fuchsia__

#ifdef __Fuchsia__
::fidl::Result
fidl::internal::WireCompleterBase<::fidl_test_error::Example::Foo>::Reply(
    ::fidl_test_error::wire::ExampleFooResult result) {
  FIDL_INTERNAL_DISABLE_AUTO_VAR_INIT
  ::fidl::OwnedEncodedMessage<
      ::fidl::WireResponse<::fidl_test_error::Example::Foo>>
      _response{::fidl::internal::AllowUnownedInputRef{}, result};
  return ::fidl::internal::WireCompleterBase<::fidl_test_error::Example::Foo>::
      SendReply(&_response.GetOutgoingMessage());
}
::fidl::Result fidl::internal::WireCompleterBase<
    ::fidl_test_error::Example::Foo>::ReplySuccess(int64_t y) {
  ::fidl_test_error::wire::ExampleFooResponse _response;
  _response.y = std::move(y);

  return Reply(::fidl_test_error::wire::ExampleFooResult::WithResponse(
      ::fidl::ObjectView<::fidl_test_error::wire::ExampleFooResponse>::
          FromExternal(&_response)));
}

::fidl::Result fidl::internal::WireCompleterBase<
    ::fidl_test_error::Example::Foo>::ReplyError(uint32_t error) {
  return Reply(::fidl_test_error::wire::ExampleFooResult::WithErr(
      ::fidl::ObjectView<uint32_t>::FromExternal(&error)));
}

::fidl::Result
fidl::internal::WireCompleterBase<::fidl_test_error::Example::Foo>::Reply(
    ::fidl::BufferSpan _buffer,
    ::fidl_test_error::wire::ExampleFooResult result) {
  ::fidl::WireResponse<::fidl_test_error::Example::Foo>::UnownedEncodedMessage
      _response(_buffer.data, _buffer.capacity, result);
  return CompleterBase::SendReply(&_response.GetOutgoingMessage());
}
::fidl::Result fidl::internal::WireCompleterBase<
    ::fidl_test_error::Example::Foo>::ReplySuccess(::fidl::BufferSpan _buffer,
                                                   int64_t y) {
  ::fidl_test_error::wire::ExampleFooResponse response;
  response.y = std::move(y);
  return Reply(
      std::move(_buffer),
      ::fidl_test_error::wire::ExampleFooResult::WithResponse(
          ::fidl::ObjectView<::fidl_test_error::wire::ExampleFooResponse>::
              FromExternal(&response)));
}
#endif  // __Fuchsia__

void ::fidl::WireRequest<::fidl_test_error::Example::Foo>::_InitHeader() {
  fidl_init_txn_header(&_hdr, 0, ::fidl_test_error::kExample_foo_Ordinal);
}

void ::fidl::WireResponse<::fidl_test_error::Example::Foo>::_InitHeader() {
  fidl_init_txn_header(&_hdr, 0, ::fidl_test_error::kExample_foo_Ordinal);
}

#ifdef __Fuchsia__

#endif  // __Fuchsia__
