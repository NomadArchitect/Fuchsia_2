// WARNING: This file is machine generated by fidlgen.

#include <fidl/test/error/llcpp/fidl.h>

#include <memory>

void ::fidl_test_error::wire::Example_foo_Result::
    SizeAndOffsetAssertionHelper() {
  static_assert(sizeof(Example_foo_Result) == sizeof(fidl_xunion_t));
  static_assert(offsetof(Example_foo_Result, ordinal_) ==
                offsetof(fidl_xunion_t, tag));
  static_assert(offsetof(Example_foo_Result, envelope_) ==
                offsetof(fidl_xunion_t, envelope));
}

namespace fidl_test_error {
[[maybe_unused]] constexpr uint64_t kExample_foo_Ordinal =
    6333213382893778862lu;

extern "C" const fidl_type_t fidl_test_error_ExamplefooRequestTable;

extern "C" const fidl_type_t fidl_test_error_ExamplefooResponseTable;
#ifdef __Fuchsia__
::fidl_test_error::Example::ResultOf::foo::foo(
    ::fidl::UnownedClientEnd<::fidl_test_error::Example> _client,
    const ::fidl::StringView& s) {
  ::fidl::OwnedEncodedMessage<::fidl_test_error::Example::fooRequest> _request(
      zx_txid_t(0), s);
  _request.GetOutgoingMessage().Call<::fidl_test_error::Example::fooResponse>(
      _client, bytes_.data(), bytes_.size());
  status_ = _request.status();
  error_ = _request.error();
}

::fidl_test_error::Example::ResultOf::foo::foo(
    ::fidl::UnownedClientEnd<::fidl_test_error::Example> _client,
    const ::fidl::StringView& s, zx_time_t _deadline) {
  ::fidl::OwnedEncodedMessage<::fidl_test_error::Example::fooRequest> _request(
      zx_txid_t(0), s);
  _request.GetOutgoingMessage().Call<::fidl_test_error::Example::fooResponse>(
      _client, bytes_.data(), bytes_.size(), _deadline);
  status_ = _request.status();
  error_ = _request.error();
}
#endif

#ifdef __Fuchsia__
::fidl_test_error::Example::UnownedResultOf::foo::foo(
    ::fidl::UnownedClientEnd<::fidl_test_error::Example> _client,
    uint8_t* _request_bytes, uint32_t _request_byte_capacity,
    const ::fidl::StringView& s, uint8_t* _response_bytes,
    uint32_t _response_byte_capacity)
    : bytes_(_response_bytes) {
  ::fidl::UnownedEncodedMessage<::fidl_test_error::Example::fooRequest>
      _request(_request_bytes, _request_byte_capacity, 0, s);
  _request.GetOutgoingMessage().Call<::fidl_test_error::Example::fooResponse>(
      _client, _response_bytes, _response_byte_capacity);
  status_ = _request.status();
  error_ = _request.error();
}
#endif

}  // namespace fidl_test_error
#ifdef __Fuchsia__
::fidl_test_error::Example::ResultOf::foo fidl::internal::WireClientImpl<
    ::fidl_test_error::Example>::foo_Sync(::fidl::StringView s) {
  if (auto _channel = ::fidl::internal::ClientBase::GetChannel()) {
    return ::fidl_test_error::Example::ResultOf::foo(
        ::fidl::UnownedClientEnd<::fidl_test_error::Example>(
            _channel->handle()),
        s);
  }
  return ::fidl_test_error::Example::ResultOf::foo(
      ::fidl::Result(ZX_ERR_CANCELED, ::fidl::kErrorChannelUnbound));
}
#endif

#ifdef __Fuchsia__
::fidl_test_error::Example::UnownedResultOf::foo
fidl::internal::WireClientImpl<::fidl_test_error::Example>::foo_Sync(
    ::fidl::BufferSpan _request_buffer, ::fidl::StringView s,
    ::fidl::BufferSpan _response_buffer) {
  if (auto _channel = ::fidl::internal::ClientBase::GetChannel()) {
    return ::fidl_test_error::Example::UnownedResultOf::foo(
        ::fidl::UnownedClientEnd<::fidl_test_error::Example>(
            _channel->handle()),
        _request_buffer.data, _request_buffer.capacity, s,
        _response_buffer.data, _response_buffer.capacity);
  }
  return ::fidl_test_error::Example::UnownedResultOf::foo(
      ::fidl::Result(ZX_ERR_CANCELED, ::fidl::kErrorChannelUnbound));
}
#endif

#ifdef __Fuchsia__
::fidl_test_error::Example::fooResponseContext::fooResponseContext()
    : ::fidl::internal::ResponseContext(
          ::fidl_test_error::Example::fooResponse::Type,
          ::fidl_test_error::kExample_foo_Ordinal) {}

void ::fidl_test_error::Example::fooResponseContext::OnReply(uint8_t* reply) {
  OnReply(reinterpret_cast<::fidl_test_error::Example::fooResponse*>(reply));
}

::fidl::Result fidl::internal::WireClientImpl<::fidl_test_error::Example>::foo(
    ::fidl::StringView s,
    ::fit::callback<void(::fidl_test_error::Example::fooResponse* response)>
        _cb) {
  class ResponseContext final
      : public ::fidl_test_error::Example::fooResponseContext {
   public:
    ResponseContext(
        ::fit::callback<void(::fidl_test_error::Example::fooResponse* response)>
            cb)
        : cb_(std::move(cb)) {}

    void OnReply(::fidl_test_error::Example::fooResponse* response) override {
      cb_(response);

      delete this;
    }

    void OnError() override { delete this; }

   private:
    ::fit::callback<void(::fidl_test_error::Example::fooResponse* response)>
        cb_;
  };

  auto* _context = new ResponseContext(std::move(_cb));
  ::fidl::internal::ClientBase::PrepareAsyncTxn(_context);
  ::fidl_test_error::Example::fooRequest::OwnedEncodedMessage _request(
      _context->Txid(), s);
  return _request.GetOutgoingMessage().Write(this, _context);
}

::fidl::Result fidl::internal::WireClientImpl<::fidl_test_error::Example>::foo(
    ::fidl::BufferSpan _request_buffer, ::fidl::StringView s,
    ::fidl_test_error::Example::fooResponseContext* _context) {
  ::fidl::internal::ClientBase::PrepareAsyncTxn(_context);

  ::fidl_test_error::Example::fooRequest::UnownedEncodedMessage _request(
      _request_buffer.data, _request_buffer.capacity, _context->Txid(), s);
  return _request.GetOutgoingMessage().Write(this, _context);
}
#endif

#ifdef __Fuchsia__
std::optional<::fidl::UnbindInfo> fidl::internal::WireClientImpl<
    ::fidl_test_error::Example>::DispatchEvent(fidl_incoming_msg_t* msg) {
  FidlHandleInfoCloseMany(msg->handles, msg->num_handles);
  return ::fidl::UnbindInfo{::fidl::UnbindInfo::kUnexpectedMessage,
                            ZX_ERR_NOT_SUPPORTED};
}
#endif

namespace fidl_test_error {
#ifdef __Fuchsia__
namespace methods {

void ExampleDispatchfoo(void* interface, void* bytes,
                        ::fidl::Transaction* txn) {
  auto message =
      reinterpret_cast<::fidl_test_error::Example::fooRequest*>(bytes);
  ::fidl::WireInterface<::fidl_test_error::Example>::fooCompleter::Sync
      completer(txn);
  reinterpret_cast<::fidl_test_error::Example::Interface*>(interface)->foo(
      std::move(message->s), completer);
}

}  // namespace methods

namespace entries {

::fidl::internal::MethodEntry Example[] = {
    {::fidl_test_error::kExample_foo_Ordinal,
     ::fidl_test_error::Example::fooRequest::Type, methods::ExampleDispatchfoo},
};

}  // namespace entries

::fidl::DispatchResult Example::TryDispatch(Interface* impl,
                                            fidl_incoming_msg_t* msg,
                                            ::fidl::Transaction* txn) {
  return ::fidl::internal::TryDispatch(
      impl, msg, txn, entries::Example,
      entries::Example +
          sizeof(entries::Example) / sizeof(::fidl::internal::MethodEntry));
}
#endif
}  // namespace fidl_test_error

namespace fidl_test_error {
#ifdef __Fuchsia__
::fidl::DispatchResult Example::Dispatch(Interface* impl,
                                         fidl_incoming_msg_t* msg,
                                         ::fidl::Transaction* txn) {
  ::fidl::DispatchResult dispatch_result = TryDispatch(impl, msg, txn);
  if (dispatch_result == ::fidl::DispatchResult::kNotFound) {
    FidlHandleInfoCloseMany(msg->handles, msg->num_handles);
    txn->InternalError(
        {::fidl::UnbindInfo::kUnexpectedMessage, ZX_ERR_NOT_SUPPORTED});
  }
  return dispatch_result;
}
}  // namespace fidl_test_error
::fidl::DispatchResult
fidl::WireInterface<::fidl_test_error::Example>::dispatch_message(
    fidl_incoming_msg_t* msg, ::fidl::Transaction* txn) {
  return ::fidl_test_error::Example::Dispatch(this, msg, txn);
}
#endif

#ifdef __Fuchsia__
::fidl::Result
fidl::WireInterface<::fidl_test_error::Example>::fooCompleterBase::Reply(
    ::fidl_test_error::wire::Example_foo_Result result) {
  ::fidl::OwnedEncodedMessage<::fidl_test_error::Example::fooResponse>
      _response{result};
  return ::fidl::WireInterface<::fidl_test_error::Example>::fooCompleterBase::
      SendReply(&_response.GetOutgoingMessage());
}
#endif

#ifdef __Fuchsia__
::fidl::Result fidl::WireInterface<
    ::fidl_test_error::Example>::fooCompleterBase::ReplySuccess(int64_t y) {
  ::fidl_test_error::wire::Example_foo_Response _response;
  _response.y = std::move(y);

  return Reply(::fidl_test_error::wire::Example_foo_Result::WithResponse(
      ::fidl::unowned_ptr(&_response)));
}
#endif

#ifdef __Fuchsia__
::fidl::Result fidl::WireInterface<
    ::fidl_test_error::Example>::fooCompleterBase::ReplyError(uint32_t error) {
  return Reply(::fidl_test_error::wire::Example_foo_Result::WithErr(
      ::fidl::unowned_ptr(&error)));
}
#endif

#ifdef __Fuchsia__
::fidl::Result
fidl::WireInterface<::fidl_test_error::Example>::fooCompleterBase::Reply(
    ::fidl::BufferSpan _buffer,
    ::fidl_test_error::wire::Example_foo_Result result) {
  ::fidl_test_error::Example::fooResponse::UnownedEncodedMessage _response(
      _buffer.data, _buffer.capacity, result);
  return CompleterBase::SendReply(&_response.GetOutgoingMessage());
}
#endif
#ifdef __Fuchsia__
::fidl::Result
fidl::WireInterface<::fidl_test_error::Example>::fooCompleterBase::ReplySuccess(
    ::fidl::BufferSpan _buffer, int64_t y) {
  ::fidl_test_error::wire::Example_foo_Response response;
  response.y = std::move(y);

  return Reply(std::move(_buffer),
               ::fidl_test_error::wire::Example_foo_Result::WithResponse(
                   ::fidl::unowned_ptr(&response)));
}
#endif

void ::fidl_test_error::Example::fooRequest::_InitHeader(zx_txid_t _txid) {
  fidl_init_txn_header(&_hdr, _txid, ::fidl_test_error::kExample_foo_Ordinal);
}

void ::fidl_test_error::Example::fooResponse::_InitHeader() {
  fidl_init_txn_header(&_hdr, 0, ::fidl_test_error::kExample_foo_Ordinal);
}

#ifdef __Fuchsia__
#endif
