// WARNING: This file is machine generated by fidlgen.

#pragma once

#include <lib/fidl/llcpp/array.h>
#include <lib/fidl/llcpp/coding.h>
#include <lib/fidl/llcpp/envelope.h>
#include <lib/fidl/llcpp/message.h>
#include <lib/fidl/llcpp/message_storage.h>
#include <lib/fidl/llcpp/object_view.h>
#include <lib/fidl/llcpp/string_view.h>
#include <lib/fidl/llcpp/traits.h>
#include <lib/fidl/llcpp/wire_types.h>
#include <lib/stdcompat/optional.h>

#include <cinttypes>
#ifdef __Fuchsia__
#include <lib/zx/channel.h>

#endif  // __Fuchsia__

#include <fidl/fidl.test.typealiases/cpp/markers.h>
#include <fidl/someotherlibrary/cpp/wire_types.h>

namespace fidl_test_typealiases {
namespace wire {

enum class ObjType : uint32_t {

  kNone = 0u,

  kChannel = 4u,
};

struct ExampleOfUseOfAliases;

#ifdef __Fuchsia__

extern "C" const fidl_type_t fidl_test_typealiases_ExampleOfUseOfAliasesTable;

struct ExampleOfUseOfAliases {
  static constexpr const fidl_type_t* Type =
      &fidl_test_typealiases_ExampleOfUseOfAliasesTable;
  static constexpr uint32_t MaxNumHandles = 3;
  static constexpr uint32_t PrimarySize = 88;
  static constexpr uint32_t PrimarySizeV1 = 88;
  [[maybe_unused]] static constexpr uint32_t MaxOutOfLine = 4294967295;
  static constexpr uint32_t MaxOutOfLineV1 = 4294967295;
  static constexpr bool HasPointer = true;

  uint32_t field_of_u32 = {};

  ::fidl::VectorView<::fidl::StringView> field_of_vec_of_strings = {};

  ::fidl::VectorView<::fidl::StringView> field_of_vec_of_strings_at_most_nine =
      {};

  ::fidl::VectorView<::fidl::StringView> field_of_vec_of_strings_at_most_5 = {};

  ::fidl::VectorView<::someotherlibrary::wire::ReferenceMe>
      field_of_vec_of_ref_me_at_most_5 = {};

  ::zx::channel field_of_channel = {};

  ::zx::channel field_of_client_end = {};

  ::zx::channel field_of_nullable_client_end = {};

  void _CloseHandles();

  class UnownedEncodedMessage;
  class OwnedEncodedMessage;
  class DecodedMessage;
};
#endif  // __Fuchsia__

}  // namespace wire
}  // namespace fidl_test_typealiases
namespace fidl {

#ifdef __Fuchsia__
template <>
struct IsResource<::fidl_test_typealiases::wire::ExampleOfUseOfAliases>
    : public std::true_type {};
template <>
struct IsFidlType<::fidl_test_typealiases::wire::ExampleOfUseOfAliases>
    : public std::true_type {};
template <>
struct IsStruct<::fidl_test_typealiases::wire::ExampleOfUseOfAliases>
    : public std::true_type {};
static_assert(std::is_standard_layout_v<
              ::fidl_test_typealiases::wire::ExampleOfUseOfAliases>);
static_assert(offsetof(::fidl_test_typealiases::wire::ExampleOfUseOfAliases,
                       field_of_u32) == 0);
static_assert(offsetof(::fidl_test_typealiases::wire::ExampleOfUseOfAliases,
                       field_of_vec_of_strings) == 8);
static_assert(offsetof(::fidl_test_typealiases::wire::ExampleOfUseOfAliases,
                       field_of_vec_of_strings_at_most_nine) == 24);
static_assert(offsetof(::fidl_test_typealiases::wire::ExampleOfUseOfAliases,
                       field_of_vec_of_strings_at_most_5) == 40);
static_assert(offsetof(::fidl_test_typealiases::wire::ExampleOfUseOfAliases,
                       field_of_vec_of_ref_me_at_most_5) == 56);
static_assert(offsetof(::fidl_test_typealiases::wire::ExampleOfUseOfAliases,
                       field_of_channel) == 72);
static_assert(offsetof(::fidl_test_typealiases::wire::ExampleOfUseOfAliases,
                       field_of_client_end) == 76);
static_assert(offsetof(::fidl_test_typealiases::wire::ExampleOfUseOfAliases,
                       field_of_nullable_client_end) == 80);
static_assert(
    sizeof(::fidl_test_typealiases::wire::ExampleOfUseOfAliases) ==
    ::fidl_test_typealiases::wire::ExampleOfUseOfAliases::PrimarySize);
#endif  // __Fuchsia__

template <>
struct IsFidlType<::fidl_test_typealiases::wire::ObjType>
    : public std::true_type {};
template <>
struct ContainsHandle<::fidl_test_typealiases::wire::ObjType>
    : public std::false_type {};

}  // namespace fidl
