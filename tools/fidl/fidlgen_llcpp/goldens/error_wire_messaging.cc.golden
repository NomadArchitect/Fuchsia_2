// WARNING: This file is machine generated by fidlgen.

#include <fidl/fidl.test.error/cpp/wire_messaging.h>

#include <memory>

namespace fidl_test_error {
[[maybe_unused]] constexpr uint64_t kExample_foo_Ordinal =
    6333213382893778862lu;

extern "C" const fidl_type_t fidl_test_error_ExamplefooRequestMessageTable;

extern "C" const fidl_type_t fidl_test_error_ExamplefooResponseMessageTable;
#ifdef __Fuchsia__
}  // namespace fidl_test_error
::fidl::WireResult<::fidl_test_error::Example::Foo>::WireResult(
    ::fidl::UnownedClientEnd<::fidl_test_error::Example> client,
    ::fidl::WireRequest<::fidl_test_error::Example::Foo>* request) {
  FIDL_INTERNAL_DISABLE_AUTO_VAR_INIT
  ::fidl::OwnedEncodedMessage<
      ::fidl::WireRequest<::fidl_test_error::Example::Foo>>
      request_message(::fidl::internal::AllowUnownedInputRef{}, request);
  auto& outgoing = request_message.GetOutgoingMessage();
  outgoing.Call<::fidl::WireResponse<::fidl_test_error::Example::Foo>>(
      client.channel(), bytes_.data(), static_cast<uint32_t>(bytes_.size()));
  SetResult(outgoing);
}

::fidl::WireResult<::fidl_test_error::Example::Foo>::WireResult(
    ::fidl::UnownedClientEnd<::fidl_test_error::Example> client,
    ::fidl::WireRequest<::fidl_test_error::Example::Foo>* request,
    zx_time_t deadline) {
  FIDL_INTERNAL_DISABLE_AUTO_VAR_INIT
  ::fidl::OwnedEncodedMessage<
      ::fidl::WireRequest<::fidl_test_error::Example::Foo>>
      request_message(::fidl::internal::AllowUnownedInputRef{}, request);
  auto& outgoing = request_message.GetOutgoingMessage();
  outgoing.Call<::fidl::WireResponse<::fidl_test_error::Example::Foo>>(
      client.channel(), bytes_.data(), static_cast<uint32_t>(bytes_.size()),
      fidl::CallOptions{.deadline = deadline});
  SetResult(outgoing);
}
namespace fidl_test_error {
#endif  // __Fuchsia__

#ifdef __Fuchsia__
}  // namespace fidl_test_error
::fidl::WireUnownedResult<::fidl_test_error::Example::Foo>::WireUnownedResult(
    ::fidl::UnownedClientEnd<::fidl_test_error::Example> client_end,
    ::fidl::internal::AnyBufferAllocator& allocator,
    ::fidl::WireRequest<::fidl_test_error::Example::Foo>* request) {
  constexpr uint32_t buffer_size = ::fidl::SyncClientMethodBufferSizeInChannel<
      ::fidl_test_error::Example::Foo>();
  uint8_t* buffer = allocator.Allocate(buffer_size);
  if (!buffer) {
    ::fidl::Result::operator=(::fidl::Result::EncodeError(
        ZX_ERR_BUFFER_TOO_SMALL,
        ::fidl::internal::kCallerAllocatedBufferTooSmall));
    return;
  }
  constexpr uint32_t request_byte_capacity = ::fidl::MaxSizeInChannel<
      ::fidl::WireRequest<::fidl_test_error::Example::Foo>,
      ::fidl::MessageDirection::kSending>();
  uint8_t* request_bytes = buffer;
  static_assert(buffer_size > request_byte_capacity);
  uint32_t response_byte_capacity = buffer_size - request_byte_capacity;
  uint8_t* response_bytes = &buffer[request_byte_capacity];

  ::fidl::UnownedEncodedMessage<
      ::fidl::WireRequest<::fidl_test_error::Example::Foo>>
      request_message(request_bytes, request_byte_capacity, request);
  auto& outgoing = request_message.GetOutgoingMessage();
  outgoing.Call<::fidl::WireResponse<::fidl_test_error::Example::Foo>>(
      client_end.channel(), response_bytes, response_byte_capacity);
  bytes_ = response_bytes;
  ::fidl::Result::operator=(outgoing);
}
namespace fidl_test_error {
#endif  // __Fuchsia__

}  // namespace fidl_test_error
#ifdef __Fuchsia__

::fidl::WireResponseContext<
    ::fidl_test_error::Example::Foo>::WireResponseContext()
    : ::fidl::internal::ResponseContext(
          ::fidl_test_error::kExample_foo_Ordinal) {}

::cpp17::optional<::fidl::UnbindInfo>
fidl::WireResponseContext<::fidl_test_error::Example::Foo>::OnRawResult(
    ::fidl::IncomingMessage&& msg,
    internal::IncomingTransportContext* transport_context) {
  if (unlikely(!msg.ok())) {
    ::fidl::WireUnownedResult<::fidl_test_error::Example::Foo> result{
        msg.error()};
    OnResult(result);
    return cpp17::nullopt;
  }
  ::fidl::DecodedMessage<::fidl::WireResponse<::fidl_test_error::Example::Foo>>
      decoded{std::move(msg)};
  ::fidl::Result maybe_error = decoded;
  ::fidl::WireUnownedResult<::fidl_test_error::Example::Foo> result{
      std::move(decoded)};
  OnResult(result);
  if (unlikely(!maybe_error.ok())) {
    return ::fidl::UnbindInfo(maybe_error);
  }
  return cpp17::nullopt;
}
#endif  // __Fuchsia__

#ifdef __Fuchsia__

void fidl::internal::WireClientImpl<::fidl_test_error::Example>::Foo(
    ::fidl::StringView s,
    ::fidl::WireClientCallback<::fidl_test_error::Example::Foo> _cb) {
  using Callback = decltype(_cb);
  class ResponseContext final
      : public ::fidl::WireResponseContext<::fidl_test_error::Example::Foo> {
   public:
    ResponseContext(Callback cb) : cb_(std::move(cb)) {}

    void OnResult(::fidl::WireUnownedResult<::fidl_test_error::Example::Foo>&
                      result) override {
      cb_(result);
      delete this;
    }

   private:
    Callback cb_;
  };

  auto* _context = new ResponseContext(std::move(_cb));
  ::fidl::WireRequest<::fidl_test_error::Example::Foo> _request{s};
  FIDL_INTERNAL_DISABLE_AUTO_VAR_INIT
  ::fidl::OwnedEncodedMessage<
      ::fidl::WireRequest<::fidl_test_error::Example::Foo>>
      _request_message(::fidl::internal::AllowUnownedInputRef{}, &_request);
  ::fidl::internal::ClientBase::SendTwoWay(
      _request_message.GetOutgoingMessage(), _context);
}

void fidl::internal::WireClientImpl<::fidl_test_error::Example>::Foo(
    ::fidl::StringView s,
    ::fit::callback<
        void(::fidl::WireResponse<::fidl_test_error::Example::Foo>* response)>
        _cb) {
  using Callback = decltype(_cb);
  class ResponseContext final
      : public ::fidl::WireResponseContext<::fidl_test_error::Example::Foo> {
   public:
    ResponseContext(Callback cb) : cb_(std::move(cb)) {}

    void OnResult(::fidl::WireUnownedResult<::fidl_test_error::Example::Foo>&
                      result) override {
      if (result.ok()) {
        ::fidl::WireResponse<::fidl_test_error::Example::Foo>* response =
            result.Unwrap();
        cb_(response);
      }
      delete this;
    }

   private:
    Callback cb_;
  };

  auto* _context = new ResponseContext(std::move(_cb));
  ::fidl::WireRequest<::fidl_test_error::Example::Foo> _request{s};
  FIDL_INTERNAL_DISABLE_AUTO_VAR_INIT
  ::fidl::OwnedEncodedMessage<
      ::fidl::WireRequest<::fidl_test_error::Example::Foo>>
      _request_message(::fidl::internal::AllowUnownedInputRef{}, &_request);
  ::fidl::internal::ClientBase::SendTwoWay(
      _request_message.GetOutgoingMessage(), _context);
}
void fidl::internal::WireClientImpl<::fidl_test_error::Example>::Foo(
    ::fidl::BufferSpan _request_buffer, ::fidl::StringView s,
    ::fidl::WireResponseContext<::fidl_test_error::Example::Foo>* _context) {
  ::fidl::WireRequest<::fidl_test_error::Example::Foo> _request{s};

  ::fidl::UnownedEncodedMessage<
      ::fidl::WireRequest<::fidl_test_error::Example::Foo>>
      _request_message(_request_buffer.data, _request_buffer.capacity,
                       &_request);
  ::fidl::internal::ClientBase::SendTwoWay(
      _request_message.GetOutgoingMessage(), _context);
}
::fidl::WireResult<::fidl_test_error::Example::Foo>
fidl::internal::WireClientImpl<::fidl_test_error::Example>::Foo_Sync(
    ::fidl::StringView s) {
  return ::fidl::internal::ClientBase::MakeSyncCallWith(
      [&](std::shared_ptr<::fidl::internal::AnyTransport> _transport) {
        ::fidl::WireRequest<::fidl_test_error::Example::Foo> _request{s};
        return ::fidl::WireResult<::fidl_test_error::Example::Foo>(
            ::fidl::UnownedClientEnd<::fidl_test_error::Example>(
                _transport->get<fidl::internal::ChannelTransport>()),
            &_request);
      });
}
::fidl::WireUnownedResult<::fidl_test_error::Example::Foo>
fidl::internal::WireClientImpl<::fidl_test_error::Example>::Foo_Sync(
    ::fidl::BufferSpan _buffer_span, ::fidl::StringView s) {
  auto _allocator = ::fidl::internal::MakeAnyBufferAllocator(_buffer_span);
  return ::fidl::internal::ClientBase::MakeSyncCallWith(
      [&](std::shared_ptr<::fidl::internal::AnyTransport> _transport) {
        ::fidl::WireRequest<::fidl_test_error::Example::Foo> _request{s};
        return ::fidl::WireUnownedResult<::fidl_test_error::Example::Foo>(
            ::fidl::UnownedClientEnd<::fidl_test_error::Example>(
                _transport->get<fidl::internal::ChannelTransport>()),
            _allocator, &_request);
      });
}

std::optional<::fidl::UnbindInfo>
fidl::internal::WireClientImpl<::fidl_test_error::Example>::DispatchEvent(
    fidl::IncomingMessage& msg,
    ::fidl::internal::AsyncEventHandler* maybe_event_handler,
    internal::IncomingTransportContext* transport_context) {
  return ::fidl::UnbindInfo::UnknownOrdinal();
}
#endif  // __Fuchsia__

#ifdef __Fuchsia__

constexpr ::fidl::internal::MethodEntry fidl::internal::WireServerDispatcher<
    ::fidl_test_error::Example>::entries_[] = {
    {
        ::fidl_test_error::kExample_foo_Ordinal,
        [](void* interface, ::fidl::IncomingMessage&& msg,
           ::fidl::Transaction* txn) {
          ::fidl::DecodedMessage<
              ::fidl::WireRequest<::fidl_test_error::Example::Foo>>
              decoded{std::move(msg)};
          if (unlikely(!decoded.ok())) {
            return decoded.status();
          }
          auto* primary = decoded.PrimaryObject();
          ::fidl::internal::WireCompleter<::fidl_test_error::Example::Foo>::Sync
              completer(txn);
          reinterpret_cast<::fidl::WireServer<::fidl_test_error::Example>*>(
              interface)
              ->Foo(primary, completer);
          return ZX_OK;
        },
    },
};

const ::fidl::internal::MethodEntry* fidl::internal::WireServerDispatcher<
    ::fidl_test_error::Example>::entries_end_ = &entries_[1];

::fidl::DispatchResult
fidl::internal::WireServerDispatcher<::fidl_test_error::Example>::TryDispatch(
    ::fidl::WireServer<::fidl_test_error::Example>* impl,
    ::fidl::IncomingMessage& msg, ::fidl::Transaction* txn) {
  return ::fidl::internal::TryDispatch(impl, msg, txn, entries_, entries_end_);
}

void fidl::internal::WireServerDispatcher<::fidl_test_error::Example>::Dispatch(
    ::fidl::WireServer<::fidl_test_error::Example>* impl,
    ::fidl::IncomingMessage&& msg, ::fidl::Transaction* txn) {
  ::fidl::internal::Dispatch(impl, msg, txn, entries_, entries_end_);
}
void fidl::WireServer<::fidl_test_error::Example>::dispatch_message(
    ::fidl::IncomingMessage&& msg, ::fidl::Transaction* txn,
    ::fidl::internal::IncomingTransportContext* transport_context) {
  ::fidl::internal::WireServerDispatcher<::fidl_test_error::Example>::Dispatch(
      this, std::move(msg), txn);
}
#endif  // __Fuchsia__

#ifdef __Fuchsia__
::fidl::Result
fidl::internal::WireCompleterBase<::fidl_test_error::Example::Foo>::Reply(
    ::fidl_test_error::wire::ExampleFooResult result) {
  ::fidl::WireResponse<::fidl_test_error::Example::Foo> _response{result};
  FIDL_INTERNAL_DISABLE_AUTO_VAR_INIT
  ::fidl::OwnedEncodedMessage<
      ::fidl::WireResponse<::fidl_test_error::Example::Foo>>
      _response_message{::fidl::internal::AllowUnownedInputRef{}, &_response};
  return ::fidl::internal::WireCompleterBase<::fidl_test_error::Example::Foo>::
      SendReply(&_response_message.GetOutgoingMessage());
}
::fidl::Result fidl::internal::WireCompleterBase<
    ::fidl_test_error::Example::Foo>::ReplySuccess(int64_t y) {
  ::fidl_test_error::wire::ExampleFooResponse _response;
  _response.y = std::move(y);
  return Reply(::fidl_test_error::wire::ExampleFooResult::WithResponse(
      ::fidl::ObjectView<::fidl_test_error::wire::ExampleFooResponse>::
          FromExternal(&_response)));
}

::fidl::Result fidl::internal::WireCompleterBase<
    ::fidl_test_error::Example::Foo>::ReplyError(uint32_t error) {
  return Reply(
      ::fidl_test_error::wire::ExampleFooResult::WithErr(std::move(error)));
}

::fidl::Result
fidl::internal::WireCompleterBase<::fidl_test_error::Example::Foo>::Reply(
    ::fidl::BufferSpan _buffer,
    ::fidl_test_error::wire::ExampleFooResult result) {
  ::fidl::WireResponse<::fidl_test_error::Example::Foo> _response{result};
  ::fidl::UnownedEncodedMessage<
      ::fidl::WireResponse<::fidl_test_error::Example::Foo>>
      _response_message(_buffer.data, _buffer.capacity, &_response);
  return CompleterBase::SendReply(&_response_message.GetOutgoingMessage());
}
::fidl::Result fidl::internal::WireCompleterBase<
    ::fidl_test_error::Example::Foo>::ReplySuccess(::fidl::BufferSpan _buffer,
                                                   int64_t y) {
  ::fidl_test_error::wire::ExampleFooResponse response;
  response.y = std::move(y);
  return Reply(
      std::move(_buffer),
      ::fidl_test_error::wire::ExampleFooResult::WithResponse(
          ::fidl::ObjectView<::fidl_test_error::wire::ExampleFooResponse>::
              FromExternal(&response)));
}
#endif  // __Fuchsia__

void ::fidl::WireRequest<::fidl_test_error::Example::Foo>::_InitHeader() {
  fidl_init_txn_header(&_hdr, 0, ::fidl_test_error::kExample_foo_Ordinal);
}

void ::fidl::WireResponse<::fidl_test_error::Example::Foo>::_InitHeader() {
  fidl_init_txn_header(&_hdr, 0, ::fidl_test_error::kExample_foo_Ordinal);
}

#ifdef __Fuchsia__

#endif  // __Fuchsia__
