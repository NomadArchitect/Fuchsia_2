// WARNING: This file is machine generated by fidlgen.

#include <fidl/fidl.test.doccomments/cpp/wire.h>

#include <memory>

void ::fidl_test_doccomments::wire::StrictUnion::
    SizeAndOffsetAssertionHelper() {
  static_assert(sizeof(StrictUnion) == sizeof(fidl_xunion_v2_t));
  static_assert(offsetof(StrictUnion, ordinal_) ==
                offsetof(fidl_xunion_v2_t, tag));
  static_assert(offsetof(StrictUnion, envelope_) ==
                offsetof(fidl_xunion_v2_t, envelope));
}

namespace fidl_test_doccomments {
[[maybe_unused]] constexpr uint64_t kInterface_Method_Ordinal =
    6649887292072346213lu;

extern "C" const fidl_type_t fidl_test_doccomments_InterfaceMethodRequestTable;

extern "C" const fidl_type_t fidl_test_doccomments_InterfaceMethodResponseTable;

[[maybe_unused]] constexpr uint64_t kInterface_OnEvent_Ordinal =
    3999525675942213370lu;

extern "C" const fidl_type_t fidl_test_doccomments_InterfaceOnEventRequestTable;

extern "C" const fidl_type_t fidl_test_doccomments_InterfaceOnEventEventTable;
#ifdef __Fuchsia__
}  // namespace fidl_test_doccomments
::fidl::WireResult<::fidl_test_doccomments::Interface::Method>::WireResult(
    ::fidl::UnownedClientEnd<::fidl_test_doccomments::Interface> _client) {
  FIDL_INTERNAL_DISABLE_AUTO_VAR_INIT
  ::fidl::OwnedEncodedMessage<
      ::fidl::WireRequest<::fidl_test_doccomments::Interface::Method>>
      _request(::fidl::internal::AllowUnownedInputRef{});
  auto& _outgoing = _request.GetOutgoingMessage();
  _outgoing.Write(_client);
  SetResult(_outgoing);
}
namespace fidl_test_doccomments {
#endif  // __Fuchsia__

}  // namespace fidl_test_doccomments
#ifdef __Fuchsia__

::fidl::Result
fidl::internal::WireClientImpl<::fidl_test_doccomments::Interface>::Method() {
  FIDL_INTERNAL_DISABLE_AUTO_VAR_INIT
  ::fidl::OwnedEncodedMessage<
      ::fidl::WireRequest<::fidl_test_doccomments::Interface::Method>>
      _request(::fidl::internal::AllowUnownedInputRef{});
  return ::fidl::internal::ClientBase::SendOneWay(
      _request.GetOutgoingMessage());
}

std::optional<::fidl::UnbindInfo> fidl::internal::
    WireClientImpl<::fidl_test_doccomments::Interface>::DispatchEvent(
        fidl::IncomingMessage& msg,
        ::fidl::internal::AsyncEventHandler* maybe_event_handler) {
  auto* event_handler = static_cast<
      ::fidl::WireAsyncEventHandler<::fidl_test_doccomments::Interface>*>(
      maybe_event_handler);
  fidl_message_header_t* hdr = msg.header();
  switch (hdr->ordinal) {
    case ::fidl_test_doccomments::kInterface_OnEvent_Ordinal: {
      ::fidl::DecodedMessage<
          ::fidl::WireResponse<::fidl_test_doccomments::Interface::OnEvent>>
          decoded{std::move(msg)};
      if (!decoded.ok()) {
        return ::fidl::UnbindInfo{decoded};
      }
      if (event_handler) {
        event_handler->OnEvent(decoded.PrimaryObject());
      }
      return std::nullopt;
    }
    default:
      break;
  }
  return ::fidl::UnbindInfo::UnknownOrdinal();
}
#endif  // __Fuchsia__

::fidl::Result
fidl::WireSyncEventHandler<::fidl_test_doccomments::Interface>::HandleOneEvent(
    ::fidl::UnownedClientEnd<::fidl_test_doccomments::Interface> client_end) {
  zx_status_t status = client_end.channel()->wait_one(
      ZX_CHANNEL_READABLE | ZX_CHANNEL_PEER_CLOSED, ::zx::time::infinite(),
      nullptr);
  if (status != ZX_OK) {
    return ::fidl::Result::TransportError(
        status, ::fidl::internal::kErrorWaitOneFailed);
  }
  constexpr uint32_t kHandleAllocSize = ([]() constexpr {
    uint32_t x = 0;
    if (::fidl::WireResponse<
            ::fidl_test_doccomments::Interface::OnEvent>::MaxNumHandles >= x) {
      x = ::fidl::WireResponse<
          ::fidl_test_doccomments::Interface::OnEvent>::MaxNumHandles;
    }
    if (x > ZX_CHANNEL_MAX_MSG_HANDLES) {
      x = ZX_CHANNEL_MAX_MSG_HANDLES;
    }
    return x;
  })();
  static_assert(kHandleAllocSize <= ZX_CHANNEL_MAX_MSG_HANDLES);
  ::fidl::internal::InlineMessageBuffer<16> read_storage;
  std::array<zx_handle_info_t, kHandleAllocSize> read_handles;
  ::fidl::IncomingMessage msg =
      fidl::ChannelReadEtc(client_end.handle(), ZX_CHANNEL_READ_MAY_DISCARD,
                           read_storage.view(), cpp20::span(read_handles));
  if (msg.status() == ZX_ERR_BUFFER_TOO_SMALL) {
    // Message size is unexpectedly larger than calculated.
    // This can only be due to a newer version of the protocol defining a new
    // event, whose size exceeds the maximum of known events in the current
    // protocol.
    return ::fidl::Result::UnexpectedMessage(Unknown());
  }
  if (!msg.ok()) {
    return msg;
  }
  fidl_message_header_t* hdr = msg.header();
  switch (hdr->ordinal) {
    case ::fidl_test_doccomments::kInterface_OnEvent_Ordinal: {
      ::fidl::DecodedMessage<
          ::fidl::WireResponse<::fidl_test_doccomments::Interface::OnEvent>>
          decoded{::std::move(msg)};
      if (!decoded.ok()) {
        return ::fidl::Result(decoded);
      }
      OnEvent(decoded.PrimaryObject());
      return ::fidl::Result::Ok();
    }
    default: {
      return ::fidl::Result::UnexpectedMessage(Unknown());
    }
  }
}

#ifdef __Fuchsia__

::fidl::DispatchResult fidl::internal::
    WireServerDispatcher<::fidl_test_doccomments::Interface>::TryDispatch(
        ::fidl::WireServer<::fidl_test_doccomments::Interface>* impl,
        ::fidl::IncomingMessage& msg, ::fidl::Transaction* txn) {
  static const ::fidl::internal::MethodEntry entries[] = {
      {
          ::fidl_test_doccomments::kInterface_Method_Ordinal,
          [](void* interface, ::fidl::IncomingMessage&& msg,
             ::fidl::Transaction* txn) {
            auto* primary = reinterpret_cast<::fidl::WireRequest<
                ::fidl_test_doccomments::Interface::Method>*>(msg.bytes());
            ::fidl::internal::WireCompleter<
                ::fidl_test_doccomments::Interface::Method>::Sync
                completer(txn);
            reinterpret_cast<
                ::fidl::WireServer<::fidl_test_doccomments::Interface>*>(
                interface)
                ->Method(primary, completer);
            return ZX_OK;
          },
      },
  };
  return ::fidl::internal::TryDispatch(
      impl, msg, txn, entries,
      entries + sizeof(entries) / sizeof(::fidl::internal::MethodEntry));
}

::fidl::DispatchResult fidl::internal::
    WireServerDispatcher<::fidl_test_doccomments::Interface>::Dispatch(
        ::fidl::WireServer<::fidl_test_doccomments::Interface>* impl,
        ::fidl::IncomingMessage&& msg, ::fidl::Transaction* txn) {
  ::fidl::DispatchResult dispatch_result = TryDispatch(impl, msg, txn);
  if (unlikely(dispatch_result == ::fidl::DispatchResult::kNotFound)) {
    std::move(msg).CloseHandles();
    txn->InternalError(::fidl::UnbindInfo::UnknownOrdinal());
  }
  return dispatch_result;
}
::fidl::DispatchResult
fidl::WireServer<::fidl_test_doccomments::Interface>::dispatch_message(
    fidl::IncomingMessage&& msg, ::fidl::Transaction* txn) {
  return ::fidl::internal::WireServerDispatcher<
      ::fidl_test_doccomments::Interface>::Dispatch(this, std::move(msg), txn);
}
#endif  // __Fuchsia__

void ::fidl::WireRequest<
    ::fidl_test_doccomments::Interface::Method>::_InitHeader() {
  fidl_init_txn_header(&_hdr, 0,
                       ::fidl_test_doccomments::kInterface_Method_Ordinal);
}

void ::fidl::WireResponse<
    ::fidl_test_doccomments::Interface::OnEvent>::_InitHeader() {
  fidl_init_txn_header(&_hdr, 0,
                       ::fidl_test_doccomments::kInterface_OnEvent_Ordinal);
}

#ifdef __Fuchsia__

fidl::Result
fidl::WireEventSender<::fidl_test_doccomments::Interface>::OnEvent() const {
  FIDL_INTERNAL_DISABLE_AUTO_VAR_INIT
  ::fidl::OwnedEncodedMessage<
      ::fidl::WireResponse<::fidl_test_doccomments::Interface::OnEvent>>
      _response{::fidl::internal::AllowUnownedInputRef{}};
  auto& _message = _response.GetOutgoingMessage();
  _message.Write(server_end_);
  return ::fidl::Result{_message};
}

fidl::Result fidl::internal::WireWeakEventSender<
    ::fidl_test_doccomments::Interface>::OnEvent() const {
  FIDL_INTERNAL_DISABLE_AUTO_VAR_INIT
  ::fidl::OwnedEncodedMessage<
      ::fidl::WireResponse<::fidl_test_doccomments::Interface::OnEvent>>
      _response{::fidl::internal::AllowUnownedInputRef{}};
  return inner_.SendEvent(_response.GetOutgoingMessage());
}
#endif  // __Fuchsia__

auto ::fidl_test_doccomments::wire::FlexibleUnion::which() const
    -> ::fidl_test_doccomments::wire::FlexibleUnion::Tag {
  ZX_ASSERT(!has_invalid_tag());
  switch (ordinal_) {
    case ::fidl_test_doccomments::wire::FlexibleUnion::Ordinal::kField:
      return static_cast<::fidl_test_doccomments::wire::FlexibleUnion::Tag>(
          ordinal_);
    default:
      return ::fidl_test_doccomments::wire::FlexibleUnion::Tag::kUnknown;
  }
}

void ::fidl_test_doccomments::wire::FlexibleUnion::
    SizeAndOffsetAssertionHelper() {
  static_assert(sizeof(FlexibleUnion) == sizeof(fidl_xunion_v2_t));
  static_assert(offsetof(FlexibleUnion, ordinal_) ==
                offsetof(fidl_xunion_v2_t, tag));
  static_assert(offsetof(FlexibleUnion, envelope_) ==
                offsetof(fidl_xunion_v2_t, envelope));
}
