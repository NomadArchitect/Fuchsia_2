// WARNING: This file is machine generated by fidlgen.

#include <fidl/test.protocollayouts/cpp/type_conversions.h>

namespace fidl {
namespace internal {

::test_protocollayouts::MainProtocolTwoWayImportWithErrorTopResponse
WireNaturalConversionTraits<
    ::test_protocollayouts::wire::MainProtocolTwoWayImportWithErrorTopResponse,
    ::test_protocollayouts::MainProtocolTwoWayImportWithErrorTopResponse>::
    ToNatural(::test_protocollayouts::wire::
                  MainProtocolTwoWayImportWithErrorTopResponse src) {
  return ::test_protocollayouts::MainProtocolTwoWayImportWithErrorTopResponse(
      WireNaturalConversionTraits<
          ::test_protocollayouts::wire::MainProtocolTwoWayImportWithErrorResult,
          ::test_protocollayouts::MainProtocolTwoWayImportWithErrorResult>::
          ToNatural(std::move(src.result)));
}

::test_protocollayouts::MainProtocolTwoWayAnonWithErrorTopResponse
WireNaturalConversionTraits<
    ::test_protocollayouts::wire::MainProtocolTwoWayAnonWithErrorTopResponse,
    ::test_protocollayouts::MainProtocolTwoWayAnonWithErrorTopResponse>::
    ToNatural(
        ::test_protocollayouts::wire::MainProtocolTwoWayAnonWithErrorTopResponse
            src) {
  return ::test_protocollayouts::MainProtocolTwoWayAnonWithErrorTopResponse(
      WireNaturalConversionTraits<
          ::test_protocollayouts::wire::MainProtocolTwoWayAnonWithErrorResult,
          ::test_protocollayouts::MainProtocolTwoWayAnonWithErrorResult>::
          ToNatural(std::move(src.result)));
}

::test_protocollayouts::MainProtocolOnImportWithErrorRequest
WireNaturalConversionTraits<
    ::test_protocollayouts::wire::MainProtocolOnImportWithErrorRequest,
    ::test_protocollayouts::MainProtocolOnImportWithErrorRequest>::
    ToNatural(::test_protocollayouts::wire::MainProtocolOnImportWithErrorRequest
                  src) {
  return ::test_protocollayouts::MainProtocolOnImportWithErrorRequest(
      WireNaturalConversionTraits<
          ::test_protocollayouts::wire::MainProtocolOnImportWithErrorResult,
          ::test_protocollayouts::MainProtocolOnImportWithErrorResult>::
          ToNatural(std::move(src.result)));
}

::test_protocollayouts::MainProtocolOnAnonWithErrorRequest
WireNaturalConversionTraits<
    ::test_protocollayouts::wire::MainProtocolOnAnonWithErrorRequest,
    ::test_protocollayouts::MainProtocolOnAnonWithErrorRequest>::
    ToNatural(
        ::test_protocollayouts::wire::MainProtocolOnAnonWithErrorRequest src) {
  return ::test_protocollayouts::MainProtocolOnAnonWithErrorRequest(
      WireNaturalConversionTraits<
          ::test_protocollayouts::wire::MainProtocolOnAnonWithErrorResult,
          ::test_protocollayouts::MainProtocolOnAnonWithErrorResult>::
          ToNatural(std::move(src.result)));
}

::test_protocollayouts::MainProtocolTwoWayLocalWithErrorTopResponse
WireNaturalConversionTraits<
    ::test_protocollayouts::wire::MainProtocolTwoWayLocalWithErrorTopResponse,
    ::test_protocollayouts::MainProtocolTwoWayLocalWithErrorTopResponse>::
    ToNatural(::test_protocollayouts::wire::
                  MainProtocolTwoWayLocalWithErrorTopResponse src) {
  return ::test_protocollayouts::MainProtocolTwoWayLocalWithErrorTopResponse(
      WireNaturalConversionTraits<
          ::test_protocollayouts::wire::MainProtocolTwoWayLocalWithErrorResult,
          ::test_protocollayouts::MainProtocolTwoWayLocalWithErrorResult>::
          ToNatural(std::move(src.result)));
}

::test_protocollayouts::MainProtocolOnLocalWithErrorRequest
WireNaturalConversionTraits<
    ::test_protocollayouts::wire::MainProtocolOnLocalWithErrorRequest,
    ::test_protocollayouts::MainProtocolOnLocalWithErrorRequest>::
    ToNatural(
        ::test_protocollayouts::wire::MainProtocolOnLocalWithErrorRequest src) {
  return ::test_protocollayouts::MainProtocolOnLocalWithErrorRequest(
      WireNaturalConversionTraits<
          ::test_protocollayouts::wire::MainProtocolOnLocalWithErrorResult,
          ::test_protocollayouts::MainProtocolOnLocalWithErrorResult>::
          ToNatural(std::move(src.result)));
}

::test_protocollayouts::MainProtocolOnAnonWithErrorResponse
WireNaturalConversionTraits<
    ::test_protocollayouts::wire::MainProtocolOnAnonWithErrorResponse,
    ::test_protocollayouts::MainProtocolOnAnonWithErrorResponse>::
    ToNatural(
        ::test_protocollayouts::wire::MainProtocolOnAnonWithErrorResponse src) {
  ::test_protocollayouts::MainProtocolOnAnonWithErrorResponse dst;
  if (src.has_a()) {
    dst.a() = WireNaturalConversionTraits<uint16_t, uint16_t>::ToNatural(
        std::move(src.a()));
  }

  return dst;
}

::test_protocollayouts::MainProtocolTwoWayAnonWithErrorRequest
WireNaturalConversionTraits<
    ::test_protocollayouts::wire::MainProtocolTwoWayAnonWithErrorRequest,
    ::test_protocollayouts::MainProtocolTwoWayAnonWithErrorRequest>::
    ToNatural(
        ::test_protocollayouts::wire::MainProtocolTwoWayAnonWithErrorRequest
            src) {
  ::test_protocollayouts::MainProtocolTwoWayAnonWithErrorRequest dst;
  if (src.has_a()) {
    dst.a() = WireNaturalConversionTraits<uint16_t, uint16_t>::ToNatural(
        std::move(src.a()));
  }

  return dst;
}

::test_protocollayouts::MainProtocolTwoWayAnonResponse
WireNaturalConversionTraits<
    ::test_protocollayouts::wire::MainProtocolTwoWayAnonResponse,
    ::test_protocollayouts::MainProtocolTwoWayAnonResponse>::
    ToNatural(
        ::test_protocollayouts::wire::MainProtocolTwoWayAnonResponse src) {
  ::test_protocollayouts::MainProtocolTwoWayAnonResponse dst;
  if (src.has_a()) {
    dst.a() = WireNaturalConversionTraits<uint16_t, uint16_t>::ToNatural(
        std::move(src.a()));
  }

  return dst;
}

::test_protocollayouts::MainProtocolOneWayAnonRequest
WireNaturalConversionTraits<
    ::test_protocollayouts::wire::MainProtocolOneWayAnonRequest,
    ::test_protocollayouts::MainProtocolOneWayAnonRequest>::
    ToNatural(::test_protocollayouts::wire::MainProtocolOneWayAnonRequest src) {
  ::test_protocollayouts::MainProtocolOneWayAnonRequest dst;
  if (src.has_a()) {
    dst.a() = WireNaturalConversionTraits<uint16_t, uint16_t>::ToNatural(
        std::move(src.a()));
  }

  return dst;
}

::test_protocollayouts::LocalTablePayload
WireNaturalConversionTraits<::test_protocollayouts::wire::LocalTablePayload,
                            ::test_protocollayouts::LocalTablePayload>::
    ToNatural(::test_protocollayouts::wire::LocalTablePayload src) {
  ::test_protocollayouts::LocalTablePayload dst;
  if (src.has_a()) {
    dst.a() = WireNaturalConversionTraits<uint16_t, uint16_t>::ToNatural(
        std::move(src.a()));
  }

  return dst;
}

::test_protocollayouts::MainProtocolTwoWayImportWithErrorResult
WireNaturalConversionTraits<
    ::test_protocollayouts::wire::MainProtocolTwoWayImportWithErrorResult,
    ::test_protocollayouts::MainProtocolTwoWayImportWithErrorResult>::
    ToNatural(
        ::test_protocollayouts::wire::MainProtocolTwoWayImportWithErrorResult
            src) {
  switch (src.Which()) {
    case ::test_protocollayouts::wire::MainProtocolTwoWayImportWithErrorResult::
        Tag::kResponse:
      return ::test_protocollayouts::MainProtocolTwoWayImportWithErrorResult::
          WithResponse(
              WireNaturalConversionTraits<
                  ::test_protocollayouts_imported::wire::ImportUnionPayload,
                  ::test_protocollayouts_imported::ImportUnionPayload>::
                  ToNatural(std::move(src.response())));
    case ::test_protocollayouts::wire::MainProtocolTwoWayImportWithErrorResult::
        Tag::kErr:
      return ::test_protocollayouts::MainProtocolTwoWayImportWithErrorResult::
          WithErr(WireNaturalConversionTraits<uint32_t, uint32_t>::ToNatural(
              std::move(src.err())));
    default:
      ZX_PANIC("unknown union tag in strict union");
  }
}

std::unique_ptr<::test_protocollayouts::MainProtocolTwoWayImportWithErrorResult>
WireNaturalConversionTraits<
    ::test_protocollayouts::wire::MainProtocolTwoWayImportWithErrorResult,
    std::unique_ptr<
        ::test_protocollayouts::MainProtocolTwoWayImportWithErrorResult>>::
    ToNatural(
        ::test_protocollayouts::wire::MainProtocolTwoWayImportWithErrorResult
            src) {
  if (src.has_invalid_tag()) {
    return nullptr;
  }
  return std::make_unique<
      ::test_protocollayouts::MainProtocolTwoWayImportWithErrorResult>(
      WireNaturalConversionTraits<
          ::test_protocollayouts::wire::MainProtocolTwoWayImportWithErrorResult,
          ::test_protocollayouts::MainProtocolTwoWayImportWithErrorResult>::
          ToNatural(std::move(src)));
}

::test_protocollayouts::MainProtocolTwoWayAnonWithErrorResponse
WireNaturalConversionTraits<
    ::test_protocollayouts::wire::MainProtocolTwoWayAnonWithErrorResponse,
    ::test_protocollayouts::MainProtocolTwoWayAnonWithErrorResponse>::
    ToNatural(
        ::test_protocollayouts::wire::MainProtocolTwoWayAnonWithErrorResponse
            src) {
  switch (src.Which()) {
    case ::test_protocollayouts::wire::MainProtocolTwoWayAnonWithErrorResponse::
        Tag::kB:
      return ::test_protocollayouts::MainProtocolTwoWayAnonWithErrorResponse::
          WithB(WireNaturalConversionTraits<bool, bool>::ToNatural(
              std::move(src.b())));
    default:
      return ::test_protocollayouts::MainProtocolTwoWayAnonWithErrorResponse();
  }
}

std::unique_ptr<::test_protocollayouts::MainProtocolTwoWayAnonWithErrorResponse>
WireNaturalConversionTraits<
    ::test_protocollayouts::wire::MainProtocolTwoWayAnonWithErrorResponse,
    std::unique_ptr<
        ::test_protocollayouts::MainProtocolTwoWayAnonWithErrorResponse>>::
    ToNatural(
        ::test_protocollayouts::wire::MainProtocolTwoWayAnonWithErrorResponse
            src) {
  if (src.has_invalid_tag()) {
    return nullptr;
  }
  return std::make_unique<
      ::test_protocollayouts::MainProtocolTwoWayAnonWithErrorResponse>(
      WireNaturalConversionTraits<
          ::test_protocollayouts::wire::MainProtocolTwoWayAnonWithErrorResponse,
          ::test_protocollayouts::MainProtocolTwoWayAnonWithErrorResponse>::
          ToNatural(std::move(src)));
}

::test_protocollayouts::MainProtocolTwoWayAnonWithErrorResult
WireNaturalConversionTraits<
    ::test_protocollayouts::wire::MainProtocolTwoWayAnonWithErrorResult,
    ::test_protocollayouts::MainProtocolTwoWayAnonWithErrorResult>::
    ToNatural(
        ::test_protocollayouts::wire::MainProtocolTwoWayAnonWithErrorResult
            src) {
  switch (src.Which()) {
    case ::test_protocollayouts::wire::MainProtocolTwoWayAnonWithErrorResult::
        Tag::kResponse:
      return ::test_protocollayouts::MainProtocolTwoWayAnonWithErrorResult::
          WithResponse(WireNaturalConversionTraits<
                       ::test_protocollayouts::wire::
                           MainProtocolTwoWayAnonWithErrorResponse,
                       ::test_protocollayouts::
                           MainProtocolTwoWayAnonWithErrorResponse>::
                           ToNatural(std::move(src.response())));
    case ::test_protocollayouts::wire::MainProtocolTwoWayAnonWithErrorResult::
        Tag::kErr:
      return ::test_protocollayouts::MainProtocolTwoWayAnonWithErrorResult::
          WithErr(WireNaturalConversionTraits<uint32_t, uint32_t>::ToNatural(
              std::move(src.err())));
    default:
      ZX_PANIC("unknown union tag in strict union");
  }
}

std::unique_ptr<::test_protocollayouts::MainProtocolTwoWayAnonWithErrorResult>
WireNaturalConversionTraits<
    ::test_protocollayouts::wire::MainProtocolTwoWayAnonWithErrorResult,
    std::unique_ptr<
        ::test_protocollayouts::MainProtocolTwoWayAnonWithErrorResult>>::
    ToNatural(
        ::test_protocollayouts::wire::MainProtocolTwoWayAnonWithErrorResult
            src) {
  if (src.has_invalid_tag()) {
    return nullptr;
  }
  return std::make_unique<
      ::test_protocollayouts::MainProtocolTwoWayAnonWithErrorResult>(
      WireNaturalConversionTraits<
          ::test_protocollayouts::wire::MainProtocolTwoWayAnonWithErrorResult,
          ::test_protocollayouts::MainProtocolTwoWayAnonWithErrorResult>::
          ToNatural(std::move(src)));
}

::test_protocollayouts::MainProtocolOnImportWithErrorResult
WireNaturalConversionTraits<
    ::test_protocollayouts::wire::MainProtocolOnImportWithErrorResult,
    ::test_protocollayouts::MainProtocolOnImportWithErrorResult>::
    ToNatural(
        ::test_protocollayouts::wire::MainProtocolOnImportWithErrorResult src) {
  switch (src.Which()) {
    case ::test_protocollayouts::wire::MainProtocolOnImportWithErrorResult::
        Tag::kResponse:
      return ::test_protocollayouts::MainProtocolOnImportWithErrorResult::
          WithResponse(
              WireNaturalConversionTraits<
                  ::test_protocollayouts_imported::wire::ImportTablePayload,
                  ::test_protocollayouts_imported::ImportTablePayload>::
                  ToNatural(std::move(src.response())));
    case ::test_protocollayouts::wire::MainProtocolOnImportWithErrorResult::
        Tag::kErr:
      return ::test_protocollayouts::MainProtocolOnImportWithErrorResult::
          WithErr(WireNaturalConversionTraits<uint32_t, uint32_t>::ToNatural(
              std::move(src.err())));
    default:
      ZX_PANIC("unknown union tag in strict union");
  }
}

std::unique_ptr<::test_protocollayouts::MainProtocolOnImportWithErrorResult>
WireNaturalConversionTraits<
    ::test_protocollayouts::wire::MainProtocolOnImportWithErrorResult,
    std::unique_ptr<
        ::test_protocollayouts::MainProtocolOnImportWithErrorResult>>::
    ToNatural(
        ::test_protocollayouts::wire::MainProtocolOnImportWithErrorResult src) {
  if (src.has_invalid_tag()) {
    return nullptr;
  }
  return std::make_unique<
      ::test_protocollayouts::MainProtocolOnImportWithErrorResult>(
      WireNaturalConversionTraits<
          ::test_protocollayouts::wire::MainProtocolOnImportWithErrorResult,
          ::test_protocollayouts::MainProtocolOnImportWithErrorResult>::
          ToNatural(std::move(src)));
}

::test_protocollayouts::MainProtocolOnAnonWithErrorResult
WireNaturalConversionTraits<
    ::test_protocollayouts::wire::MainProtocolOnAnonWithErrorResult,
    ::test_protocollayouts::MainProtocolOnAnonWithErrorResult>::
    ToNatural(
        ::test_protocollayouts::wire::MainProtocolOnAnonWithErrorResult src) {
  switch (src.Which()) {
    case ::test_protocollayouts::wire::MainProtocolOnAnonWithErrorResult::Tag::
        kResponse:
      return ::test_protocollayouts::MainProtocolOnAnonWithErrorResult::
          WithResponse(
              WireNaturalConversionTraits<
                  ::test_protocollayouts::wire::
                      MainProtocolOnAnonWithErrorResponse,
                  ::test_protocollayouts::MainProtocolOnAnonWithErrorResponse>::
                  ToNatural(std::move(src.response())));
    case ::test_protocollayouts::wire::MainProtocolOnAnonWithErrorResult::Tag::
        kErr:
      return ::test_protocollayouts::MainProtocolOnAnonWithErrorResult::WithErr(
          WireNaturalConversionTraits<uint32_t, uint32_t>::ToNatural(
              std::move(src.err())));
    default:
      ZX_PANIC("unknown union tag in strict union");
  }
}

std::unique_ptr<::test_protocollayouts::MainProtocolOnAnonWithErrorResult>
WireNaturalConversionTraits<
    ::test_protocollayouts::wire::MainProtocolOnAnonWithErrorResult,
    std::unique_ptr<
        ::test_protocollayouts::MainProtocolOnAnonWithErrorResult>>::
    ToNatural(
        ::test_protocollayouts::wire::MainProtocolOnAnonWithErrorResult src) {
  if (src.has_invalid_tag()) {
    return nullptr;
  }
  return std::make_unique<
      ::test_protocollayouts::MainProtocolOnAnonWithErrorResult>(
      WireNaturalConversionTraits<
          ::test_protocollayouts::wire::MainProtocolOnAnonWithErrorResult,
          ::test_protocollayouts::MainProtocolOnAnonWithErrorResult>::
          ToNatural(std::move(src)));
}

::test_protocollayouts::MainProtocolTwoWayAnonRequest
WireNaturalConversionTraits<
    ::test_protocollayouts::wire::MainProtocolTwoWayAnonRequest,
    ::test_protocollayouts::MainProtocolTwoWayAnonRequest>::
    ToNatural(::test_protocollayouts::wire::MainProtocolTwoWayAnonRequest src) {
  switch (src.Which()) {
    case ::test_protocollayouts::wire::MainProtocolTwoWayAnonRequest::Tag::kB:
      return ::test_protocollayouts::MainProtocolTwoWayAnonRequest::WithB(
          WireNaturalConversionTraits<bool, bool>::ToNatural(
              std::move(src.b())));
    default:
      return ::test_protocollayouts::MainProtocolTwoWayAnonRequest();
  }
}

std::unique_ptr<::test_protocollayouts::MainProtocolTwoWayAnonRequest>
WireNaturalConversionTraits<
    ::test_protocollayouts::wire::MainProtocolTwoWayAnonRequest,
    std::unique_ptr<::test_protocollayouts::MainProtocolTwoWayAnonRequest>>::
    ToNatural(::test_protocollayouts::wire::MainProtocolTwoWayAnonRequest src) {
  if (src.has_invalid_tag()) {
    return nullptr;
  }
  return std::make_unique<
      ::test_protocollayouts::MainProtocolTwoWayAnonRequest>(
      WireNaturalConversionTraits<
          ::test_protocollayouts::wire::MainProtocolTwoWayAnonRequest,
          ::test_protocollayouts::MainProtocolTwoWayAnonRequest>::
          ToNatural(std::move(src)));
}

::test_protocollayouts::MainProtocolOnAnonRequest WireNaturalConversionTraits<
    ::test_protocollayouts::wire::MainProtocolOnAnonRequest,
    ::test_protocollayouts::MainProtocolOnAnonRequest>::
    ToNatural(::test_protocollayouts::wire::MainProtocolOnAnonRequest src) {
  switch (src.Which()) {
    case ::test_protocollayouts::wire::MainProtocolOnAnonRequest::Tag::kB:
      return ::test_protocollayouts::MainProtocolOnAnonRequest::WithB(
          WireNaturalConversionTraits<bool, bool>::ToNatural(
              std::move(src.b())));
    default:
      return ::test_protocollayouts::MainProtocolOnAnonRequest();
  }
}

std::unique_ptr<::test_protocollayouts::MainProtocolOnAnonRequest>
WireNaturalConversionTraits<
    ::test_protocollayouts::wire::MainProtocolOnAnonRequest,
    std::unique_ptr<::test_protocollayouts::MainProtocolOnAnonRequest>>::
    ToNatural(::test_protocollayouts::wire::MainProtocolOnAnonRequest src) {
  if (src.has_invalid_tag()) {
    return nullptr;
  }
  return std::make_unique<::test_protocollayouts::MainProtocolOnAnonRequest>(
      WireNaturalConversionTraits<
          ::test_protocollayouts::wire::MainProtocolOnAnonRequest,
          ::test_protocollayouts::MainProtocolOnAnonRequest>::
          ToNatural(std::move(src)));
}

::test_protocollayouts::LocalUnionPayload
WireNaturalConversionTraits<::test_protocollayouts::wire::LocalUnionPayload,
                            ::test_protocollayouts::LocalUnionPayload>::
    ToNatural(::test_protocollayouts::wire::LocalUnionPayload src) {
  switch (src.Which()) {
    case ::test_protocollayouts::wire::LocalUnionPayload::Tag::kB:
      return ::test_protocollayouts::LocalUnionPayload::WithB(
          WireNaturalConversionTraits<bool, bool>::ToNatural(
              std::move(src.b())));
    default:
      return ::test_protocollayouts::LocalUnionPayload();
  }
}

std::unique_ptr<::test_protocollayouts::LocalUnionPayload>
WireNaturalConversionTraits<
    ::test_protocollayouts::wire::LocalUnionPayload,
    std::unique_ptr<::test_protocollayouts::LocalUnionPayload>>::
    ToNatural(::test_protocollayouts::wire::LocalUnionPayload src) {
  if (src.has_invalid_tag()) {
    return nullptr;
  }
  return std::make_unique<::test_protocollayouts::LocalUnionPayload>(
      WireNaturalConversionTraits<
          ::test_protocollayouts::wire::LocalUnionPayload,
          ::test_protocollayouts::LocalUnionPayload>::
          ToNatural(std::move(src)));
}

::test_protocollayouts::MainProtocolTwoWayLocalWithErrorResult
WireNaturalConversionTraits<
    ::test_protocollayouts::wire::MainProtocolTwoWayLocalWithErrorResult,
    ::test_protocollayouts::MainProtocolTwoWayLocalWithErrorResult>::
    ToNatural(
        ::test_protocollayouts::wire::MainProtocolTwoWayLocalWithErrorResult
            src) {
  switch (src.Which()) {
    case ::test_protocollayouts::wire::MainProtocolTwoWayLocalWithErrorResult::
        Tag::kResponse:
      return ::test_protocollayouts::MainProtocolTwoWayLocalWithErrorResult::
          WithResponse(WireNaturalConversionTraits<
                       ::test_protocollayouts::wire::LocalUnionPayload,
                       ::test_protocollayouts::LocalUnionPayload>::
                           ToNatural(std::move(src.response())));
    case ::test_protocollayouts::wire::MainProtocolTwoWayLocalWithErrorResult::
        Tag::kErr:
      return ::test_protocollayouts::MainProtocolTwoWayLocalWithErrorResult::
          WithErr(WireNaturalConversionTraits<uint32_t, uint32_t>::ToNatural(
              std::move(src.err())));
    default:
      ZX_PANIC("unknown union tag in strict union");
  }
}

std::unique_ptr<::test_protocollayouts::MainProtocolTwoWayLocalWithErrorResult>
WireNaturalConversionTraits<
    ::test_protocollayouts::wire::MainProtocolTwoWayLocalWithErrorResult,
    std::unique_ptr<
        ::test_protocollayouts::MainProtocolTwoWayLocalWithErrorResult>>::
    ToNatural(
        ::test_protocollayouts::wire::MainProtocolTwoWayLocalWithErrorResult
            src) {
  if (src.has_invalid_tag()) {
    return nullptr;
  }
  return std::make_unique<
      ::test_protocollayouts::MainProtocolTwoWayLocalWithErrorResult>(
      WireNaturalConversionTraits<
          ::test_protocollayouts::wire::MainProtocolTwoWayLocalWithErrorResult,
          ::test_protocollayouts::MainProtocolTwoWayLocalWithErrorResult>::
          ToNatural(std::move(src)));
}

::test_protocollayouts::MainProtocolOnLocalWithErrorResult
WireNaturalConversionTraits<
    ::test_protocollayouts::wire::MainProtocolOnLocalWithErrorResult,
    ::test_protocollayouts::MainProtocolOnLocalWithErrorResult>::
    ToNatural(
        ::test_protocollayouts::wire::MainProtocolOnLocalWithErrorResult src) {
  switch (src.Which()) {
    case ::test_protocollayouts::wire::MainProtocolOnLocalWithErrorResult::Tag::
        kResponse:
      return ::test_protocollayouts::MainProtocolOnLocalWithErrorResult::
          WithResponse(WireNaturalConversionTraits<
                       ::test_protocollayouts::wire::LocalTablePayload,
                       ::test_protocollayouts::LocalTablePayload>::
                           ToNatural(std::move(src.response())));
    case ::test_protocollayouts::wire::MainProtocolOnLocalWithErrorResult::Tag::
        kErr:
      return ::test_protocollayouts::MainProtocolOnLocalWithErrorResult::
          WithErr(WireNaturalConversionTraits<uint32_t, uint32_t>::ToNatural(
              std::move(src.err())));
    default:
      ZX_PANIC("unknown union tag in strict union");
  }
}

std::unique_ptr<::test_protocollayouts::MainProtocolOnLocalWithErrorResult>
WireNaturalConversionTraits<
    ::test_protocollayouts::wire::MainProtocolOnLocalWithErrorResult,
    std::unique_ptr<
        ::test_protocollayouts::MainProtocolOnLocalWithErrorResult>>::
    ToNatural(
        ::test_protocollayouts::wire::MainProtocolOnLocalWithErrorResult src) {
  if (src.has_invalid_tag()) {
    return nullptr;
  }
  return std::make_unique<
      ::test_protocollayouts::MainProtocolOnLocalWithErrorResult>(
      WireNaturalConversionTraits<
          ::test_protocollayouts::wire::MainProtocolOnLocalWithErrorResult,
          ::test_protocollayouts::MainProtocolOnLocalWithErrorResult>::
          ToNatural(std::move(src)));
}

#ifdef __Fuchsia__

::fidl::Request<::test_protocollayouts::MainProtocol::OneWayAnonComposed>
WireNaturalConversionTraits<
    ::fidl::WireRequest<
        ::test_protocollayouts::MainProtocol::OneWayAnonComposed>,
    ::fidl::Request<::test_protocollayouts::MainProtocol::OneWayAnonComposed>>::
    ToNatural(::fidl::WireRequest<
              ::test_protocollayouts::MainProtocol::OneWayAnonComposed>
                  src) {
  return ::fidl::Request<
      ::test_protocollayouts::MainProtocol::OneWayAnonComposed>(
      WireNaturalConversionTraits<
          ::test_protocollayouts_imported::wire::
              ComposedProtocolOneWayAnonComposedRequest,
          ::test_protocollayouts_imported::
              ComposedProtocolOneWayAnonComposedRequest>::
          ToNatural(std::move(src)));
}

::fidl::Request<::test_protocollayouts::MainProtocol::TwoWayAnonComposed>
WireNaturalConversionTraits<
    ::fidl::WireRequest<
        ::test_protocollayouts::MainProtocol::TwoWayAnonComposed>,
    ::fidl::Request<::test_protocollayouts::MainProtocol::TwoWayAnonComposed>>::
    ToNatural(::fidl::WireRequest<
              ::test_protocollayouts::MainProtocol::TwoWayAnonComposed>
                  src) {
  return ::fidl::Request<
      ::test_protocollayouts::MainProtocol::TwoWayAnonComposed>(
      WireNaturalConversionTraits<
          ::test_protocollayouts_imported::wire::
              ComposedProtocolTwoWayAnonComposedRequest,
          ::test_protocollayouts_imported::
              ComposedProtocolTwoWayAnonComposedRequest>::
          ToNatural(std::move(src)));
}

::fidl::Request<
    ::test_protocollayouts::MainProtocol::TwoWayAnonComposedWithError>
WireNaturalConversionTraits<
    ::fidl::WireRequest<
        ::test_protocollayouts::MainProtocol::TwoWayAnonComposedWithError>,
    ::fidl::Request<
        ::test_protocollayouts::MainProtocol::TwoWayAnonComposedWithError>>::
    ToNatural(::fidl::WireRequest<
              ::test_protocollayouts::MainProtocol::TwoWayAnonComposedWithError>
                  src) {
  return ::fidl::Request<
      ::test_protocollayouts::MainProtocol::TwoWayAnonComposedWithError>(
      WireNaturalConversionTraits<
          ::test_protocollayouts_imported::wire::
              ComposedProtocolTwoWayAnonComposedWithErrorRequest,
          ::test_protocollayouts_imported::
              ComposedProtocolTwoWayAnonComposedWithErrorRequest>::
          ToNatural(std::move(src)));
}

::fidl::Request<::test_protocollayouts::MainProtocol::OneWayNamedComposed>
WireNaturalConversionTraits<
    ::fidl::WireRequest<
        ::test_protocollayouts::MainProtocol::OneWayNamedComposed>,
    ::fidl::Request<
        ::test_protocollayouts::MainProtocol::OneWayNamedComposed>>::
    ToNatural(::fidl::WireRequest<
              ::test_protocollayouts::MainProtocol::OneWayNamedComposed>
                  src) {
  return ::fidl::Request<
      ::test_protocollayouts::MainProtocol::OneWayNamedComposed>(
      WireNaturalConversionTraits<
          ::test_protocollayouts_imported::wire::ImportTablePayload,
          ::test_protocollayouts_imported::ImportTablePayload>::
          ToNatural(std::move(src)));
}

::fidl::Request<::test_protocollayouts::MainProtocol::TwoWayNamedComposed>
WireNaturalConversionTraits<
    ::fidl::WireRequest<
        ::test_protocollayouts::MainProtocol::TwoWayNamedComposed>,
    ::fidl::Request<
        ::test_protocollayouts::MainProtocol::TwoWayNamedComposed>>::
    ToNatural(::fidl::WireRequest<
              ::test_protocollayouts::MainProtocol::TwoWayNamedComposed>
                  src) {
  return ::fidl::Request<
      ::test_protocollayouts::MainProtocol::TwoWayNamedComposed>(
      WireNaturalConversionTraits<
          ::test_protocollayouts_imported::wire::ImportUnionPayload,
          ::test_protocollayouts_imported::ImportUnionPayload>::
          ToNatural(std::move(src)));
}

::fidl::Request<
    ::test_protocollayouts::MainProtocol::TwoWayNamedComposedWithError>
WireNaturalConversionTraits<
    ::fidl::WireRequest<
        ::test_protocollayouts::MainProtocol::TwoWayNamedComposedWithError>,
    ::fidl::Request<
        ::test_protocollayouts::MainProtocol::TwoWayNamedComposedWithError>>::
    ToNatural(
        ::fidl::WireRequest<
            ::test_protocollayouts::MainProtocol::TwoWayNamedComposedWithError>
            src) {
  return ::fidl::Request<
      ::test_protocollayouts::MainProtocol::TwoWayNamedComposedWithError>(
      WireNaturalConversionTraits<
          ::test_protocollayouts_imported::wire::ImportTablePayload,
          ::test_protocollayouts_imported::ImportTablePayload>::
          ToNatural(std::move(src)));
}

::fidl::Request<::test_protocollayouts::MainProtocol::OneWayImport>
WireNaturalConversionTraits<
    ::fidl::WireRequest<::test_protocollayouts::MainProtocol::OneWayImport>,
    ::fidl::Request<::test_protocollayouts::MainProtocol::OneWayImport>>::
    ToNatural(
        ::fidl::WireRequest<::test_protocollayouts::MainProtocol::OneWayImport>
            src) {
  return ::fidl::Request<::test_protocollayouts::MainProtocol::OneWayImport>(
      WireNaturalConversionTraits<
          ::test_protocollayouts_imported::wire::ImportTablePayload,
          ::test_protocollayouts_imported::ImportTablePayload>::
          ToNatural(std::move(src)));
}

::fidl::Request<::test_protocollayouts::MainProtocol::TwoWayImport>
WireNaturalConversionTraits<
    ::fidl::WireRequest<::test_protocollayouts::MainProtocol::TwoWayImport>,
    ::fidl::Request<::test_protocollayouts::MainProtocol::TwoWayImport>>::
    ToNatural(
        ::fidl::WireRequest<::test_protocollayouts::MainProtocol::TwoWayImport>
            src) {
  return ::fidl::Request<::test_protocollayouts::MainProtocol::TwoWayImport>(
      WireNaturalConversionTraits<
          ::test_protocollayouts_imported::wire::ImportUnionPayload,
          ::test_protocollayouts_imported::ImportUnionPayload>::
          ToNatural(std::move(src)));
}

::fidl::Request<::test_protocollayouts::MainProtocol::TwoWayImportWithError>
WireNaturalConversionTraits<
    ::fidl::WireRequest<
        ::test_protocollayouts::MainProtocol::TwoWayImportWithError>,
    ::fidl::Request<
        ::test_protocollayouts::MainProtocol::TwoWayImportWithError>>::
    ToNatural(::fidl::WireRequest<
              ::test_protocollayouts::MainProtocol::TwoWayImportWithError>
                  src) {
  return ::fidl::Request<
      ::test_protocollayouts::MainProtocol::TwoWayImportWithError>(
      WireNaturalConversionTraits<
          ::test_protocollayouts_imported::wire::ImportTablePayload,
          ::test_protocollayouts_imported::ImportTablePayload>::
          ToNatural(std::move(src)));
}

::fidl::Request<::test_protocollayouts::MainProtocol::OneWayLocal>
WireNaturalConversionTraits<
    ::fidl::WireRequest<::test_protocollayouts::MainProtocol::OneWayLocal>,
    ::fidl::Request<::test_protocollayouts::MainProtocol::OneWayLocal>>::
    ToNatural(
        ::fidl::WireRequest<::test_protocollayouts::MainProtocol::OneWayLocal>
            src) {
  return ::fidl::Request<::test_protocollayouts::MainProtocol::OneWayLocal>(
      WireNaturalConversionTraits<
          ::test_protocollayouts::wire::LocalTablePayload,
          ::test_protocollayouts::LocalTablePayload>::
          ToNatural(std::move(src)));
}

::fidl::Request<::test_protocollayouts::MainProtocol::TwoWayLocal>
WireNaturalConversionTraits<
    ::fidl::WireRequest<::test_protocollayouts::MainProtocol::TwoWayLocal>,
    ::fidl::Request<::test_protocollayouts::MainProtocol::TwoWayLocal>>::
    ToNatural(
        ::fidl::WireRequest<::test_protocollayouts::MainProtocol::TwoWayLocal>
            src) {
  return ::fidl::Request<::test_protocollayouts::MainProtocol::TwoWayLocal>(
      WireNaturalConversionTraits<
          ::test_protocollayouts::wire::LocalUnionPayload,
          ::test_protocollayouts::LocalUnionPayload>::
          ToNatural(std::move(src)));
}

::fidl::Request<::test_protocollayouts::MainProtocol::TwoWayLocalWithError>
WireNaturalConversionTraits<
    ::fidl::WireRequest<
        ::test_protocollayouts::MainProtocol::TwoWayLocalWithError>,
    ::fidl::Request<
        ::test_protocollayouts::MainProtocol::TwoWayLocalWithError>>::
    ToNatural(::fidl::WireRequest<
              ::test_protocollayouts::MainProtocol::TwoWayLocalWithError>
                  src) {
  return ::fidl::Request<
      ::test_protocollayouts::MainProtocol::TwoWayLocalWithError>(
      WireNaturalConversionTraits<
          ::test_protocollayouts::wire::LocalTablePayload,
          ::test_protocollayouts::LocalTablePayload>::
          ToNatural(std::move(src)));
}

::fidl::Request<::test_protocollayouts::MainProtocol::OneWayAnon>
WireNaturalConversionTraits<
    ::fidl::WireRequest<::test_protocollayouts::MainProtocol::OneWayAnon>,
    ::fidl::Request<::test_protocollayouts::MainProtocol::OneWayAnon>>::
    ToNatural(
        ::fidl::WireRequest<::test_protocollayouts::MainProtocol::OneWayAnon>
            src) {
  return ::fidl::Request<::test_protocollayouts::MainProtocol::OneWayAnon>(
      WireNaturalConversionTraits<
          ::test_protocollayouts::wire::MainProtocolOneWayAnonRequest,
          ::test_protocollayouts::MainProtocolOneWayAnonRequest>::
          ToNatural(std::move(src)));
}

::fidl::Request<::test_protocollayouts::MainProtocol::TwoWayAnon>
WireNaturalConversionTraits<
    ::fidl::WireRequest<::test_protocollayouts::MainProtocol::TwoWayAnon>,
    ::fidl::Request<::test_protocollayouts::MainProtocol::TwoWayAnon>>::
    ToNatural(
        ::fidl::WireRequest<::test_protocollayouts::MainProtocol::TwoWayAnon>
            src) {
  return ::fidl::Request<::test_protocollayouts::MainProtocol::TwoWayAnon>(
      WireNaturalConversionTraits<
          ::test_protocollayouts::wire::MainProtocolTwoWayAnonRequest,
          ::test_protocollayouts::MainProtocolTwoWayAnonRequest>::
          ToNatural(std::move(src)));
}

::fidl::Request<::test_protocollayouts::MainProtocol::TwoWayAnonWithError>
WireNaturalConversionTraits<
    ::fidl::WireRequest<
        ::test_protocollayouts::MainProtocol::TwoWayAnonWithError>,
    ::fidl::Request<
        ::test_protocollayouts::MainProtocol::TwoWayAnonWithError>>::
    ToNatural(::fidl::WireRequest<
              ::test_protocollayouts::MainProtocol::TwoWayAnonWithError>
                  src) {
  return ::fidl::Request<
      ::test_protocollayouts::MainProtocol::TwoWayAnonWithError>(
      WireNaturalConversionTraits<
          ::test_protocollayouts::wire::MainProtocolTwoWayAnonWithErrorRequest,
          ::test_protocollayouts::MainProtocolTwoWayAnonWithErrorRequest>::
          ToNatural(std::move(src)));
}

::fidl::Response<::test_protocollayouts::MainProtocol::TwoWayAnonComposed>
WireNaturalConversionTraits<
    ::fidl::WireResponse<
        ::test_protocollayouts::MainProtocol::TwoWayAnonComposed>,
    ::fidl::Response<
        ::test_protocollayouts::MainProtocol::TwoWayAnonComposed>>::
    ToNatural(::fidl::WireResponse<
              ::test_protocollayouts::MainProtocol::TwoWayAnonComposed>
                  src) {
  return ::fidl::Response<
      ::test_protocollayouts::MainProtocol::TwoWayAnonComposed>(
      WireNaturalConversionTraits<
          ::test_protocollayouts_imported::wire::
              ComposedProtocolTwoWayAnonComposedResponse,
          ::test_protocollayouts_imported::
              ComposedProtocolTwoWayAnonComposedResponse>::
          ToNatural(std::move(src)));
}

::fidl::Response<
    ::test_protocollayouts::MainProtocol::TwoWayAnonComposedWithError>
WireNaturalConversionTraits<
    ::fidl::WireResponse<
        ::test_protocollayouts::MainProtocol::TwoWayAnonComposedWithError>,
    ::fidl::Response<
        ::test_protocollayouts::MainProtocol::TwoWayAnonComposedWithError>>::
    ToNatural(::fidl::WireResponse<
              ::test_protocollayouts::MainProtocol::TwoWayAnonComposedWithError>
                  src) {
  return ::fidl::Response<
      ::test_protocollayouts::MainProtocol::TwoWayAnonComposedWithError>(
      WireNaturalConversionTraits<
          ::test_protocollayouts_imported::wire::
              ComposedProtocolTwoWayAnonComposedWithErrorTopResponse,
          ::fitx::result<
              uint32_t,
              ::test_protocollayouts_imported::
                  ComposedProtocolTwoWayAnonComposedWithErrorResponse>>::
          ToNatural(std::move(src)));
}

::fidl::Response<::test_protocollayouts::MainProtocol::TwoWayNamedComposed>
WireNaturalConversionTraits<
    ::fidl::WireResponse<
        ::test_protocollayouts::MainProtocol::TwoWayNamedComposed>,
    ::fidl::Response<
        ::test_protocollayouts::MainProtocol::TwoWayNamedComposed>>::
    ToNatural(::fidl::WireResponse<
              ::test_protocollayouts::MainProtocol::TwoWayNamedComposed>
                  src) {
  return ::fidl::Response<
      ::test_protocollayouts::MainProtocol::TwoWayNamedComposed>(
      WireNaturalConversionTraits<
          ::test_protocollayouts_imported::wire::ImportTablePayload,
          ::test_protocollayouts_imported::ImportTablePayload>::
          ToNatural(std::move(src)));
}

::fidl::Response<
    ::test_protocollayouts::MainProtocol::TwoWayNamedComposedWithError>
WireNaturalConversionTraits<
    ::fidl::WireResponse<
        ::test_protocollayouts::MainProtocol::TwoWayNamedComposedWithError>,
    ::fidl::Response<
        ::test_protocollayouts::MainProtocol::TwoWayNamedComposedWithError>>::
    ToNatural(
        ::fidl::WireResponse<
            ::test_protocollayouts::MainProtocol::TwoWayNamedComposedWithError>
            src) {
  return ::fidl::Response<
      ::test_protocollayouts::MainProtocol::TwoWayNamedComposedWithError>(
      WireNaturalConversionTraits<
          ::test_protocollayouts_imported::wire::
              ComposedProtocolTwoWayNamedComposedWithErrorTopResponse,
          ::fitx::result<uint32_t,
                         ::test_protocollayouts_imported::ImportUnionPayload>>::
          ToNatural(std::move(src)));
}

::fidl::Response<::test_protocollayouts::MainProtocol::TwoWayImport>
WireNaturalConversionTraits<
    ::fidl::WireResponse<::test_protocollayouts::MainProtocol::TwoWayImport>,
    ::fidl::Response<::test_protocollayouts::MainProtocol::TwoWayImport>>::
    ToNatural(
        ::fidl::WireResponse<::test_protocollayouts::MainProtocol::TwoWayImport>
            src) {
  return ::fidl::Response<::test_protocollayouts::MainProtocol::TwoWayImport>(
      WireNaturalConversionTraits<
          ::test_protocollayouts_imported::wire::ImportTablePayload,
          ::test_protocollayouts_imported::ImportTablePayload>::
          ToNatural(std::move(src)));
}

::fidl::Response<::test_protocollayouts::MainProtocol::TwoWayImportWithError>
WireNaturalConversionTraits<
    ::fidl::WireResponse<
        ::test_protocollayouts::MainProtocol::TwoWayImportWithError>,
    ::fidl::Response<
        ::test_protocollayouts::MainProtocol::TwoWayImportWithError>>::
    ToNatural(::fidl::WireResponse<
              ::test_protocollayouts::MainProtocol::TwoWayImportWithError>
                  src) {
  return ::fidl::Response<
      ::test_protocollayouts::MainProtocol::TwoWayImportWithError>(
      WireNaturalConversionTraits<
          ::test_protocollayouts::wire::
              MainProtocolTwoWayImportWithErrorTopResponse,
          ::fitx::result<uint32_t,
                         ::test_protocollayouts_imported::ImportUnionPayload>>::
          ToNatural(std::move(src)));
}

::fidl::Response<::test_protocollayouts::MainProtocol::TwoWayLocal>
WireNaturalConversionTraits<
    ::fidl::WireResponse<::test_protocollayouts::MainProtocol::TwoWayLocal>,
    ::fidl::Response<::test_protocollayouts::MainProtocol::TwoWayLocal>>::
    ToNatural(
        ::fidl::WireResponse<::test_protocollayouts::MainProtocol::TwoWayLocal>
            src) {
  return ::fidl::Response<::test_protocollayouts::MainProtocol::TwoWayLocal>(
      WireNaturalConversionTraits<
          ::test_protocollayouts::wire::LocalTablePayload,
          ::test_protocollayouts::LocalTablePayload>::
          ToNatural(std::move(src)));
}

::fidl::Response<::test_protocollayouts::MainProtocol::TwoWayLocalWithError>
WireNaturalConversionTraits<
    ::fidl::WireResponse<
        ::test_protocollayouts::MainProtocol::TwoWayLocalWithError>,
    ::fidl::Response<
        ::test_protocollayouts::MainProtocol::TwoWayLocalWithError>>::
    ToNatural(::fidl::WireResponse<
              ::test_protocollayouts::MainProtocol::TwoWayLocalWithError>
                  src) {
  return ::fidl::Response<
      ::test_protocollayouts::MainProtocol::TwoWayLocalWithError>(
      WireNaturalConversionTraits<
          ::test_protocollayouts::wire::
              MainProtocolTwoWayLocalWithErrorTopResponse,
          ::fitx::result<uint32_t, ::test_protocollayouts::LocalUnionPayload>>::
          ToNatural(std::move(src)));
}

::fidl::Response<::test_protocollayouts::MainProtocol::TwoWayAnon>
WireNaturalConversionTraits<
    ::fidl::WireResponse<::test_protocollayouts::MainProtocol::TwoWayAnon>,
    ::fidl::Response<::test_protocollayouts::MainProtocol::TwoWayAnon>>::
    ToNatural(
        ::fidl::WireResponse<::test_protocollayouts::MainProtocol::TwoWayAnon>
            src) {
  return ::fidl::Response<::test_protocollayouts::MainProtocol::TwoWayAnon>(
      WireNaturalConversionTraits<
          ::test_protocollayouts::wire::MainProtocolTwoWayAnonResponse,
          ::test_protocollayouts::MainProtocolTwoWayAnonResponse>::
          ToNatural(std::move(src)));
}

::fidl::Response<::test_protocollayouts::MainProtocol::TwoWayAnonWithError>
WireNaturalConversionTraits<
    ::fidl::WireResponse<
        ::test_protocollayouts::MainProtocol::TwoWayAnonWithError>,
    ::fidl::Response<
        ::test_protocollayouts::MainProtocol::TwoWayAnonWithError>>::
    ToNatural(::fidl::WireResponse<
              ::test_protocollayouts::MainProtocol::TwoWayAnonWithError>
                  src) {
  return ::fidl::Response<
      ::test_protocollayouts::MainProtocol::TwoWayAnonWithError>(
      WireNaturalConversionTraits<
          ::test_protocollayouts::wire::
              MainProtocolTwoWayAnonWithErrorTopResponse,
          ::fitx::result<uint32_t,
                         ::test_protocollayouts::
                             MainProtocolTwoWayAnonWithErrorResponse>>::
          ToNatural(std::move(src)));
}

::fidl::Event<::test_protocollayouts::MainProtocol::OnAnonComposed>
WireNaturalConversionTraits<
    ::fidl::WireEvent<::test_protocollayouts::MainProtocol::OnAnonComposed>,
    ::fidl::Event<::test_protocollayouts::MainProtocol::OnAnonComposed>>::
    ToNatural(
        ::fidl::WireEvent<::test_protocollayouts::MainProtocol::OnAnonComposed>
            src) {
  return ::fidl::Event<::test_protocollayouts::MainProtocol::OnAnonComposed>(
      WireNaturalConversionTraits<::test_protocollayouts_imported::wire::
                                      ComposedProtocolOnAnonComposedRequest,
                                  ::test_protocollayouts_imported::
                                      ComposedProtocolOnAnonComposedRequest>::
          ToNatural(std::move(src)));
}

::fidl::Event<::test_protocollayouts::MainProtocol::OnAnonComposedWithError>
WireNaturalConversionTraits<
    ::fidl::WireEvent<
        ::test_protocollayouts::MainProtocol::OnAnonComposedWithError>,
    ::fidl::Event<
        ::test_protocollayouts::MainProtocol::OnAnonComposedWithError>>::
    ToNatural(::fidl::WireEvent<
              ::test_protocollayouts::MainProtocol::OnAnonComposedWithError>
                  src) {
  return ::fidl::Event<
      ::test_protocollayouts::MainProtocol::OnAnonComposedWithError>(
      WireNaturalConversionTraits<
          ::test_protocollayouts_imported::wire::
              ComposedProtocolOnAnonComposedWithErrorRequest,
          ::fitx::result<uint32_t,
                         ::test_protocollayouts_imported::
                             ComposedProtocolOnAnonComposedWithErrorResponse>>::
          ToNatural(std::move(src)));
}

::fidl::Event<::test_protocollayouts::MainProtocol::OnNamedComposed>
WireNaturalConversionTraits<
    ::fidl::WireEvent<::test_protocollayouts::MainProtocol::OnNamedComposed>,
    ::fidl::Event<::test_protocollayouts::MainProtocol::OnNamedComposed>>::
    ToNatural(
        ::fidl::WireEvent<::test_protocollayouts::MainProtocol::OnNamedComposed>
            src) {
  return ::fidl::Event<::test_protocollayouts::MainProtocol::OnNamedComposed>(
      WireNaturalConversionTraits<
          ::test_protocollayouts_imported::wire::ImportUnionPayload,
          ::test_protocollayouts_imported::ImportUnionPayload>::
          ToNatural(std::move(src)));
}

::fidl::Event<::test_protocollayouts::MainProtocol::OnNamedComposedWithError>
WireNaturalConversionTraits<
    ::fidl::WireEvent<
        ::test_protocollayouts::MainProtocol::OnNamedComposedWithError>,
    ::fidl::Event<
        ::test_protocollayouts::MainProtocol::OnNamedComposedWithError>>::
    ToNatural(::fidl::WireEvent<
              ::test_protocollayouts::MainProtocol::OnNamedComposedWithError>
                  src) {
  return ::fidl::Event<
      ::test_protocollayouts::MainProtocol::OnNamedComposedWithError>(
      WireNaturalConversionTraits<
          ::test_protocollayouts_imported::wire::
              ComposedProtocolOnNamedComposedWithErrorRequest,
          ::fitx::result<uint32_t,
                         ::test_protocollayouts_imported::ImportTablePayload>>::
          ToNatural(std::move(src)));
}

::fidl::Event<::test_protocollayouts::MainProtocol::OnImport>
WireNaturalConversionTraits<
    ::fidl::WireEvent<::test_protocollayouts::MainProtocol::OnImport>,
    ::fidl::Event<::test_protocollayouts::MainProtocol::OnImport>>::
    ToNatural(
        ::fidl::WireEvent<::test_protocollayouts::MainProtocol::OnImport> src) {
  return ::fidl::Event<::test_protocollayouts::MainProtocol::OnImport>(
      WireNaturalConversionTraits<
          ::test_protocollayouts_imported::wire::ImportUnionPayload,
          ::test_protocollayouts_imported::ImportUnionPayload>::
          ToNatural(std::move(src)));
}

::fidl::Event<::test_protocollayouts::MainProtocol::OnImportWithError>
WireNaturalConversionTraits<
    ::fidl::WireEvent<::test_protocollayouts::MainProtocol::OnImportWithError>,
    ::fidl::Event<::test_protocollayouts::MainProtocol::OnImportWithError>>::
    ToNatural(::fidl::WireEvent<
              ::test_protocollayouts::MainProtocol::OnImportWithError>
                  src) {
  return ::fidl::Event<::test_protocollayouts::MainProtocol::OnImportWithError>(
      WireNaturalConversionTraits<
          ::test_protocollayouts::wire::MainProtocolOnImportWithErrorRequest,
          ::fitx::result<uint32_t,
                         ::test_protocollayouts_imported::ImportTablePayload>>::
          ToNatural(std::move(src)));
}

::fidl::Event<::test_protocollayouts::MainProtocol::OnLocal>
WireNaturalConversionTraits<
    ::fidl::WireEvent<::test_protocollayouts::MainProtocol::OnLocal>,
    ::fidl::Event<::test_protocollayouts::MainProtocol::OnLocal>>::
    ToNatural(
        ::fidl::WireEvent<::test_protocollayouts::MainProtocol::OnLocal> src) {
  return ::fidl::Event<::test_protocollayouts::MainProtocol::OnLocal>(
      WireNaturalConversionTraits<
          ::test_protocollayouts::wire::LocalUnionPayload,
          ::test_protocollayouts::LocalUnionPayload>::
          ToNatural(std::move(src)));
}

::fidl::Event<::test_protocollayouts::MainProtocol::OnLocalWithError>
WireNaturalConversionTraits<
    ::fidl::WireEvent<::test_protocollayouts::MainProtocol::OnLocalWithError>,
    ::fidl::Event<::test_protocollayouts::MainProtocol::OnLocalWithError>>::
    ToNatural(::fidl::WireEvent<
              ::test_protocollayouts::MainProtocol::OnLocalWithError>
                  src) {
  return ::fidl::Event<::test_protocollayouts::MainProtocol::OnLocalWithError>(
      WireNaturalConversionTraits<
          ::test_protocollayouts::wire::MainProtocolOnLocalWithErrorRequest,
          ::fitx::result<uint32_t, ::test_protocollayouts::LocalTablePayload>>::
          ToNatural(std::move(src)));
}

::fidl::Event<::test_protocollayouts::MainProtocol::OnAnon>
WireNaturalConversionTraits<
    ::fidl::WireEvent<::test_protocollayouts::MainProtocol::OnAnon>,
    ::fidl::Event<::test_protocollayouts::MainProtocol::OnAnon>>::
    ToNatural(
        ::fidl::WireEvent<::test_protocollayouts::MainProtocol::OnAnon> src) {
  return ::fidl::Event<::test_protocollayouts::MainProtocol::OnAnon>(
      WireNaturalConversionTraits<
          ::test_protocollayouts::wire::MainProtocolOnAnonRequest,
          ::test_protocollayouts::MainProtocolOnAnonRequest>::
          ToNatural(std::move(src)));
}

::fidl::Event<::test_protocollayouts::MainProtocol::OnAnonWithError>
WireNaturalConversionTraits<
    ::fidl::WireEvent<::test_protocollayouts::MainProtocol::OnAnonWithError>,
    ::fidl::Event<::test_protocollayouts::MainProtocol::OnAnonWithError>>::
    ToNatural(
        ::fidl::WireEvent<::test_protocollayouts::MainProtocol::OnAnonWithError>
            src) {
  return ::fidl::Event<::test_protocollayouts::MainProtocol::OnAnonWithError>(
      WireNaturalConversionTraits<
          ::test_protocollayouts::wire::MainProtocolOnAnonWithErrorRequest,
          ::fitx::result<uint32_t, ::test_protocollayouts::
                                       MainProtocolOnAnonWithErrorResponse>>::
          ToNatural(std::move(src)));
}
#endif  // __Fuchsia__
}  // namespace internal
}  // namespace fidl
