// WARNING: This file is machine generated by fidlgen.

#pragma once

#include <fidl/fidl.test.requestflexibleenvelope/cpp/markers.h>
#include <fidl/fidl.test.requestflexibleenvelope/cpp/wire_types.h>
#include <lib/fidl/llcpp/wire_messaging.h>

#ifdef __Fuchsia__

#include <lib/fidl/llcpp/client.h>
#include <lib/fidl/llcpp/connect_service.h>
#include <lib/fidl/llcpp/server.h>
#include <lib/fidl/llcpp/service_handler_interface.h>
#include <lib/fidl/llcpp/sync_call.h>

#endif  // __Fuchsia__

namespace fidl_test_requestflexibleenvelope {
class Protocol;

__LOCAL extern "C" const fidl_type_t
    fidl_test_requestflexibleenvelope_ProtocolRequestStrictResponseFlexibleRequestMessageTable;

__LOCAL extern "C" const fidl_type_t
    fidl_test_requestflexibleenvelope_ProtocolRequestStrictResponseFlexibleResponseMessageTable;

__LOCAL extern "C" const fidl_type_t
    fidl_test_requestflexibleenvelope_ProtocolRequestFlexibleResponseStrictRequestMessageTable;

__LOCAL extern "C" const fidl_type_t
    fidl_test_requestflexibleenvelope_ProtocolRequestFlexibleResponseStrictResponseMessageTable;

}  // namespace fidl_test_requestflexibleenvelope
#ifdef __Fuchsia__

template <>
struct ::fidl::internal::ProtocolDetails<
    ::fidl_test_requestflexibleenvelope::Protocol> {};
#endif  // __Fuchsia__

#ifdef __Fuchsia__

template <>
struct ::fidl::internal::WireServerDispatcher<
    ::fidl_test_requestflexibleenvelope::Protocol>
    final {
  WireServerDispatcher() = delete;
  static ::fidl::DispatchResult TryDispatch(
      ::fidl::WireServer<::fidl_test_requestflexibleenvelope::Protocol>* impl,
      ::fidl::IncomingMessage& msg, ::fidl::Transaction* txn);
  static void Dispatch(
      ::fidl::WireServer<::fidl_test_requestflexibleenvelope::Protocol>* impl,
      ::fidl::IncomingMessage&& msg, ::fidl::Transaction* txn);

 private:
  static const ::fidl::internal::MethodEntry entries_[];
  static const ::fidl::internal::MethodEntry* entries_end_;
};
#endif  // __Fuchsia__

template <>
struct ::fidl::WireRequest<::fidl_test_requestflexibleenvelope::Protocol::
                               RequestStrictResponseFlexible>
    final {
  FIDL_ALIGNDECL
  fidl_message_header_t _hdr;
  ::fidl_test_requestflexibleenvelope::wire::StrictFoo s;

  explicit WireRequest(::fidl_test_requestflexibleenvelope::wire::StrictFoo s)
      : s(s) {
    _InitHeader();
  }
  WireRequest() { _InitHeader(); }

  static constexpr const fidl_type_t* Type =
      &::fidl_test_requestflexibleenvelope::
          fidl_test_requestflexibleenvelope_ProtocolRequestStrictResponseFlexibleRequestMessageTable;
  static constexpr uint32_t MaxNumHandles = 0;
  static constexpr uint32_t PrimarySize = 32;
  static constexpr uint32_t PrimarySizeV1 = 40;
  static constexpr uint32_t MaxOutOfLine = 4294967295;
  static constexpr uint32_t MaxOutOfLineV1 = 4294967295;
  static constexpr bool HasFlexibleEnvelope = false;
  static constexpr bool HasPointer = true;
  static constexpr ::fidl::internal::TransactionalMessageKind MessageKind =
      ::fidl::internal::TransactionalMessageKind::kRequest;
  using ResponseType =
      ::fidl::WireResponse<::fidl_test_requestflexibleenvelope::Protocol::
                               RequestStrictResponseFlexible>;

  class UnownedEncodedMessage;
  class OwnedEncodedMessage;

 public:
  class DecodedMessage;

 private:
  void _InitHeader();
};

class ::fidl::WireRequest<
    ::fidl_test_requestflexibleenvelope::Protocol::
        RequestStrictResponseFlexible>::UnownedEncodedMessage final {
 public:
  UnownedEncodedMessage(uint8_t* _backing_buffer, uint32_t _backing_buffer_size,
                        WireRequest* request)
      : UnownedEncodedMessage(::fidl::internal::IovecBufferSize,
                              _backing_buffer, _backing_buffer_size, request) {}
  UnownedEncodedMessage(uint32_t _iovec_capacity, uint8_t* _backing_buffer,
                        uint32_t _backing_buffer_size, WireRequest* request)
      : message_(::fidl::OutgoingMessage::CreateInternal(
            ::fidl::OutgoingMessage::ConstructorArgs{
                .transport_vtable = &::fidl::internal::ChannelTransport::VTable,
                .iovecs = iovecs_,
                .iovec_capacity = _iovec_capacity,
                .backing_buffer = _backing_buffer,
                .backing_buffer_capacity = _backing_buffer_size,
            })) {
    ZX_ASSERT(_iovec_capacity <= std::size(iovecs_));
    message_.Encode<WireRequest>(request);
  }
  UnownedEncodedMessage(const UnownedEncodedMessage&) = delete;
  UnownedEncodedMessage(UnownedEncodedMessage&&) = delete;
  UnownedEncodedMessage* operator=(const UnownedEncodedMessage&) = delete;
  UnownedEncodedMessage* operator=(UnownedEncodedMessage&&) = delete;

  zx_status_t status() const { return message_.status(); }
#ifdef __Fuchsia__
  const char* status_string() const { return message_.status_string(); }
#endif  // __Fuchsia__
  bool ok() const { return message_.status() == ZX_OK; }
  std::string FormatDescription() const { return message_.FormatDescription(); }
  const char* lossy_description() const { return message_.lossy_description(); }
  const ::fidl::Result& error() const { return message_.error(); }

  ::fidl::OutgoingMessage& GetOutgoingMessage() { return message_; }
#ifdef __Fuchsia__
  template <typename TransportLike>
  void Write(TransportLike&& transport) {
    message_.Write(std::forward<TransportLike>(transport));
  }
#endif  // __Fuchsia__
 private:
  ::fidl::internal::IovecBuffer iovecs_;
  ::fidl::OutgoingMessage message_;
};

class ::fidl::WireRequest<
    ::fidl_test_requestflexibleenvelope::Protocol::
        RequestStrictResponseFlexible>::OwnedEncodedMessage final {
 public:
  explicit OwnedEncodedMessage(WireRequest* request)
      : message_(1u, backing_buffer_.data(),
                 static_cast<uint32_t>(backing_buffer_.size()), request) {}
  // Internal constructor.
  explicit OwnedEncodedMessage(
      ::fidl::internal::AllowUnownedInputRef allow_unowned,
      WireRequest* request)
      : message_(::fidl::internal::IovecBufferSize, backing_buffer_.data(),
                 static_cast<uint32_t>(backing_buffer_.size()), request) {}
  OwnedEncodedMessage(const OwnedEncodedMessage&) = delete;
  OwnedEncodedMessage(OwnedEncodedMessage&&) = delete;
  OwnedEncodedMessage* operator=(const OwnedEncodedMessage&) = delete;
  OwnedEncodedMessage* operator=(OwnedEncodedMessage&&) = delete;

  zx_status_t status() const { return message_.status(); }
#ifdef __Fuchsia__
  const char* status_string() const { return message_.status_string(); }
#endif  // __Fuchsia__
  bool ok() const { return message_.ok(); }
  std::string FormatDescription() const { return message_.FormatDescription(); }
  const char* lossy_description() const { return message_.lossy_description(); }
  const ::fidl::Result& error() const { return message_.error(); }

  ::fidl::OutgoingMessage& GetOutgoingMessage() {
    return message_.GetOutgoingMessage();
  }
#ifdef __Fuchsia__
  template <typename ChannelLike>
  void Write(ChannelLike&& client) {
    message_.Write(std::forward<ChannelLike>(client));
  }
#endif  // __Fuchsia__
 private:
  ::fidl::internal::BoxedMessageBuffer<ZX_CHANNEL_MAX_MSG_BYTES>
      backing_buffer_;
  UnownedEncodedMessage message_;
};

class ::fidl::WireRequest<::fidl_test_requestflexibleenvelope::Protocol::
                              RequestStrictResponseFlexible>::DecodedMessage
    final
    : public ::fidl::internal::DecodedMessageBase<
          ::fidl::WireRequest<::fidl_test_requestflexibleenvelope::Protocol::
                                  RequestStrictResponseFlexible>> {
 public:
  using DecodedMessageBase<::fidl::WireRequest<
      ::fidl_test_requestflexibleenvelope::Protocol::
          RequestStrictResponseFlexible>>::DecodedMessageBase;

  DecodedMessage(uint8_t* bytes, uint32_t byte_actual,
                 zx_handle_t* handles = nullptr,
                 fidl_channel_handle_metadata_t* handle_metadata = nullptr,
                 uint32_t handle_actual = 0)
      : DecodedMessageBase(::fidl::IncomingMessage::Create(
            bytes, byte_actual, handles, handle_metadata, handle_actual)) {}

  ::fidl::WireRequest<::fidl_test_requestflexibleenvelope::Protocol::
                          RequestStrictResponseFlexible>*
  PrimaryObject() {
    ZX_DEBUG_ASSERT(ok());
    return reinterpret_cast<
        ::fidl::WireRequest<::fidl_test_requestflexibleenvelope::Protocol::
                                RequestStrictResponseFlexible>*>(bytes());
  }

  // Release the ownership of the decoded message. That means that the handles
  // won't be closed When the object is destroyed. After calling this method,
  // the |DecodedMessage| object should not be used anymore.
  void ReleasePrimaryObject() { ResetBytes(); }
};
template <>
struct ::fidl::WireResponse<::fidl_test_requestflexibleenvelope::Protocol::
                                RequestStrictResponseFlexible>
    final {
  FIDL_ALIGNDECL
  fidl_message_header_t _hdr;
  ::fidl_test_requestflexibleenvelope::wire::FlexibleFoo f;

  explicit WireResponse(
      ::fidl_test_requestflexibleenvelope::wire::FlexibleFoo f)
      : f(f) {
    _InitHeader();
  }
  WireResponse() { _InitHeader(); }

  static constexpr const fidl_type_t* Type =
      &::fidl_test_requestflexibleenvelope::
          fidl_test_requestflexibleenvelope_ProtocolRequestStrictResponseFlexibleResponseMessageTable;
  static constexpr uint32_t MaxNumHandles = 0;
  static constexpr uint32_t PrimarySize = 32;
  static constexpr uint32_t PrimarySizeV1 = 40;
  static constexpr uint32_t MaxOutOfLine = 4294967295;
  static constexpr uint32_t MaxOutOfLineV1 = 4294967295;
  static constexpr bool HasFlexibleEnvelope = true;
  static constexpr bool HasPointer = true;
  static constexpr ::fidl::internal::TransactionalMessageKind MessageKind =
      ::fidl::internal::TransactionalMessageKind::kResponse;

  class UnownedEncodedMessage;
  class OwnedEncodedMessage;

 public:
  class DecodedMessage;

 private:
  void _InitHeader();
};

class ::fidl::WireResponse<
    ::fidl_test_requestflexibleenvelope::Protocol::
        RequestStrictResponseFlexible>::UnownedEncodedMessage final {
 public:
  UnownedEncodedMessage(uint8_t* _backing_buffer, uint32_t _backing_buffer_size,
                        WireResponse* response)
      : UnownedEncodedMessage(::fidl::internal::IovecBufferSize,
                              _backing_buffer, _backing_buffer_size, response) {
  }
  UnownedEncodedMessage(uint32_t _iovec_capacity, uint8_t* _backing_buffer,
                        uint32_t _backing_buffer_size, WireResponse* response)
      : message_(::fidl::OutgoingMessage::CreateInternal(
            ::fidl::OutgoingMessage::ConstructorArgs{
                .transport_vtable = &::fidl::internal::ChannelTransport::VTable,
                .iovecs = iovecs_,
                .iovec_capacity = _iovec_capacity,
                .backing_buffer = _backing_buffer,
                .backing_buffer_capacity = _backing_buffer_size,
            })) {
    ZX_ASSERT(_iovec_capacity <= std::size(iovecs_));
    message_.Encode<
        ::fidl::WireResponse<::fidl_test_requestflexibleenvelope::Protocol::
                                 RequestStrictResponseFlexible>>(response);
  }
  UnownedEncodedMessage(const UnownedEncodedMessage&) = delete;
  UnownedEncodedMessage(UnownedEncodedMessage&&) = delete;
  UnownedEncodedMessage* operator=(const UnownedEncodedMessage&) = delete;
  UnownedEncodedMessage* operator=(UnownedEncodedMessage&&) = delete;

  zx_status_t status() const { return message_.status(); }
#ifdef __Fuchsia__
  const char* status_string() const { return message_.status_string(); }
#endif  // __Fuchsia__
  bool ok() const { return message_.status() == ZX_OK; }
  std::string FormatDescription() const { return message_.FormatDescription(); }
  const char* lossy_description() const { return message_.lossy_description(); }
  const ::fidl::Result& error() const { return message_.error(); }

  ::fidl::OutgoingMessage& GetOutgoingMessage() { return message_; }
#ifdef __Fuchsia__
  template <typename TransportLike>
  void Write(TransportLike&& transport) {
    message_.Write(std::forward<TransportLike>(transport));
  }
#endif  // __Fuchsia__
 private:
  ::fidl::internal::IovecBuffer iovecs_;
  ::fidl::OutgoingMessage message_;
};

class ::fidl::WireResponse<
    ::fidl_test_requestflexibleenvelope::Protocol::
        RequestStrictResponseFlexible>::OwnedEncodedMessage final {
 public:
  explicit OwnedEncodedMessage(
      ::fidl::WireResponse<::fidl_test_requestflexibleenvelope::Protocol::
                               RequestStrictResponseFlexible>* response)
      : message_(1u, backing_buffer_.data(),
                 static_cast<uint32_t>(backing_buffer_.size()), response) {}
  // Internal constructor.
  explicit OwnedEncodedMessage(
      ::fidl::internal::AllowUnownedInputRef allow_unowned,
      ::fidl::WireResponse<::fidl_test_requestflexibleenvelope::Protocol::
                               RequestStrictResponseFlexible>* response)
      : message_(::fidl::internal::IovecBufferSize, backing_buffer_.data(),
                 static_cast<uint32_t>(backing_buffer_.size()), response) {}
  OwnedEncodedMessage(const OwnedEncodedMessage&) = delete;
  OwnedEncodedMessage(OwnedEncodedMessage&&) = delete;
  OwnedEncodedMessage* operator=(const OwnedEncodedMessage&) = delete;
  OwnedEncodedMessage* operator=(OwnedEncodedMessage&&) = delete;

  zx_status_t status() const { return message_.status(); }
#ifdef __Fuchsia__
  const char* status_string() const { return message_.status_string(); }
#endif  // __Fuchsia__
  bool ok() const { return message_.ok(); }
  std::string FormatDescription() const { return message_.FormatDescription(); }
  const char* lossy_description() const { return message_.lossy_description(); }
  const ::fidl::Result& error() const { return message_.error(); }

  ::fidl::OutgoingMessage& GetOutgoingMessage() {
    return message_.GetOutgoingMessage();
  }
#ifdef __Fuchsia__
  template <typename ChannelLike>
  void Write(ChannelLike&& client) {
    message_.Write(std::forward<ChannelLike>(client));
  }
#endif  // __Fuchsia__
 private:
  ::fidl::internal::BoxedMessageBuffer<ZX_CHANNEL_MAX_MSG_BYTES>
      backing_buffer_;
  UnownedEncodedMessage message_;
};

class ::fidl::WireResponse<::fidl_test_requestflexibleenvelope::Protocol::
                               RequestStrictResponseFlexible>::DecodedMessage
    final
    : public ::fidl::internal::DecodedMessageBase<
          ::fidl::WireResponse<::fidl_test_requestflexibleenvelope::Protocol::
                                   RequestStrictResponseFlexible>> {
 public:
  using DecodedMessageBase<::fidl::WireResponse<
      ::fidl_test_requestflexibleenvelope::Protocol::
          RequestStrictResponseFlexible>>::DecodedMessageBase;

  DecodedMessage(uint8_t* bytes, uint32_t byte_actual,
                 zx_handle_t* handles = nullptr,
                 fidl_channel_handle_metadata_t* handle_metadata = nullptr,
                 uint32_t handle_actual = 0)
      : DecodedMessageBase(::fidl::IncomingMessage::Create(
            bytes, byte_actual, handles, handle_metadata, handle_actual)) {}

  ::fidl::WireResponse<::fidl_test_requestflexibleenvelope::Protocol::
                           RequestStrictResponseFlexible>*
  PrimaryObject() {
    ZX_DEBUG_ASSERT(ok());
    return reinterpret_cast<
        ::fidl::WireResponse<::fidl_test_requestflexibleenvelope::Protocol::
                                 RequestStrictResponseFlexible>*>(bytes());
  }

  // Release the ownership of the decoded message. That means that the handles
  // won't be closed When the object is destroyed. After calling this method,
  // the |DecodedMessage| object should not be used anymore.
  void ReleasePrimaryObject() { ResetBytes(); }
};
template <>
struct ::fidl::WireRequest<::fidl_test_requestflexibleenvelope::Protocol::
                               RequestFlexibleResponseStrict>
    final {
  FIDL_ALIGNDECL
  fidl_message_header_t _hdr;
  ::fidl_test_requestflexibleenvelope::wire::FlexibleFoo s;

  explicit WireRequest(::fidl_test_requestflexibleenvelope::wire::FlexibleFoo s)
      : s(s) {
    _InitHeader();
  }
  WireRequest() { _InitHeader(); }

  static constexpr const fidl_type_t* Type =
      &::fidl_test_requestflexibleenvelope::
          fidl_test_requestflexibleenvelope_ProtocolRequestFlexibleResponseStrictRequestMessageTable;
  static constexpr uint32_t MaxNumHandles = 0;
  static constexpr uint32_t PrimarySize = 32;
  static constexpr uint32_t PrimarySizeV1 = 40;
  static constexpr uint32_t MaxOutOfLine = 4294967295;
  static constexpr uint32_t MaxOutOfLineV1 = 4294967295;
  static constexpr bool HasFlexibleEnvelope = true;
  static constexpr bool HasPointer = true;
  static constexpr ::fidl::internal::TransactionalMessageKind MessageKind =
      ::fidl::internal::TransactionalMessageKind::kRequest;
  using ResponseType =
      ::fidl::WireResponse<::fidl_test_requestflexibleenvelope::Protocol::
                               RequestFlexibleResponseStrict>;

  class UnownedEncodedMessage;
  class OwnedEncodedMessage;

 public:
  class DecodedMessage;

 private:
  void _InitHeader();
};

class ::fidl::WireRequest<
    ::fidl_test_requestflexibleenvelope::Protocol::
        RequestFlexibleResponseStrict>::UnownedEncodedMessage final {
 public:
  UnownedEncodedMessage(uint8_t* _backing_buffer, uint32_t _backing_buffer_size,
                        WireRequest* request)
      : UnownedEncodedMessage(::fidl::internal::IovecBufferSize,
                              _backing_buffer, _backing_buffer_size, request) {}
  UnownedEncodedMessage(uint32_t _iovec_capacity, uint8_t* _backing_buffer,
                        uint32_t _backing_buffer_size, WireRequest* request)
      : message_(::fidl::OutgoingMessage::CreateInternal(
            ::fidl::OutgoingMessage::ConstructorArgs{
                .transport_vtable = &::fidl::internal::ChannelTransport::VTable,
                .iovecs = iovecs_,
                .iovec_capacity = _iovec_capacity,
                .backing_buffer = _backing_buffer,
                .backing_buffer_capacity = _backing_buffer_size,
            })) {
    ZX_ASSERT(_iovec_capacity <= std::size(iovecs_));
    message_.Encode<WireRequest>(request);
  }
  UnownedEncodedMessage(const UnownedEncodedMessage&) = delete;
  UnownedEncodedMessage(UnownedEncodedMessage&&) = delete;
  UnownedEncodedMessage* operator=(const UnownedEncodedMessage&) = delete;
  UnownedEncodedMessage* operator=(UnownedEncodedMessage&&) = delete;

  zx_status_t status() const { return message_.status(); }
#ifdef __Fuchsia__
  const char* status_string() const { return message_.status_string(); }
#endif  // __Fuchsia__
  bool ok() const { return message_.status() == ZX_OK; }
  std::string FormatDescription() const { return message_.FormatDescription(); }
  const char* lossy_description() const { return message_.lossy_description(); }
  const ::fidl::Result& error() const { return message_.error(); }

  ::fidl::OutgoingMessage& GetOutgoingMessage() { return message_; }
#ifdef __Fuchsia__
  template <typename TransportLike>
  void Write(TransportLike&& transport) {
    message_.Write(std::forward<TransportLike>(transport));
  }
#endif  // __Fuchsia__
 private:
  ::fidl::internal::IovecBuffer iovecs_;
  ::fidl::OutgoingMessage message_;
};

class ::fidl::WireRequest<
    ::fidl_test_requestflexibleenvelope::Protocol::
        RequestFlexibleResponseStrict>::OwnedEncodedMessage final {
 public:
  explicit OwnedEncodedMessage(WireRequest* request)
      : message_(1u, backing_buffer_.data(),
                 static_cast<uint32_t>(backing_buffer_.size()), request) {}
  // Internal constructor.
  explicit OwnedEncodedMessage(
      ::fidl::internal::AllowUnownedInputRef allow_unowned,
      WireRequest* request)
      : message_(::fidl::internal::IovecBufferSize, backing_buffer_.data(),
                 static_cast<uint32_t>(backing_buffer_.size()), request) {}
  OwnedEncodedMessage(const OwnedEncodedMessage&) = delete;
  OwnedEncodedMessage(OwnedEncodedMessage&&) = delete;
  OwnedEncodedMessage* operator=(const OwnedEncodedMessage&) = delete;
  OwnedEncodedMessage* operator=(OwnedEncodedMessage&&) = delete;

  zx_status_t status() const { return message_.status(); }
#ifdef __Fuchsia__
  const char* status_string() const { return message_.status_string(); }
#endif  // __Fuchsia__
  bool ok() const { return message_.ok(); }
  std::string FormatDescription() const { return message_.FormatDescription(); }
  const char* lossy_description() const { return message_.lossy_description(); }
  const ::fidl::Result& error() const { return message_.error(); }

  ::fidl::OutgoingMessage& GetOutgoingMessage() {
    return message_.GetOutgoingMessage();
  }
#ifdef __Fuchsia__
  template <typename ChannelLike>
  void Write(ChannelLike&& client) {
    message_.Write(std::forward<ChannelLike>(client));
  }
#endif  // __Fuchsia__
 private:
  ::fidl::internal::BoxedMessageBuffer<ZX_CHANNEL_MAX_MSG_BYTES>
      backing_buffer_;
  UnownedEncodedMessage message_;
};

class ::fidl::WireRequest<::fidl_test_requestflexibleenvelope::Protocol::
                              RequestFlexibleResponseStrict>::DecodedMessage
    final
    : public ::fidl::internal::DecodedMessageBase<
          ::fidl::WireRequest<::fidl_test_requestflexibleenvelope::Protocol::
                                  RequestFlexibleResponseStrict>> {
 public:
  using DecodedMessageBase<::fidl::WireRequest<
      ::fidl_test_requestflexibleenvelope::Protocol::
          RequestFlexibleResponseStrict>>::DecodedMessageBase;

  DecodedMessage(uint8_t* bytes, uint32_t byte_actual,
                 zx_handle_t* handles = nullptr,
                 fidl_channel_handle_metadata_t* handle_metadata = nullptr,
                 uint32_t handle_actual = 0)
      : DecodedMessageBase(::fidl::IncomingMessage::Create(
            bytes, byte_actual, handles, handle_metadata, handle_actual)) {}

  ::fidl::WireRequest<::fidl_test_requestflexibleenvelope::Protocol::
                          RequestFlexibleResponseStrict>*
  PrimaryObject() {
    ZX_DEBUG_ASSERT(ok());
    return reinterpret_cast<
        ::fidl::WireRequest<::fidl_test_requestflexibleenvelope::Protocol::
                                RequestFlexibleResponseStrict>*>(bytes());
  }

  // Release the ownership of the decoded message. That means that the handles
  // won't be closed When the object is destroyed. After calling this method,
  // the |DecodedMessage| object should not be used anymore.
  void ReleasePrimaryObject() { ResetBytes(); }
};
template <>
struct ::fidl::WireResponse<::fidl_test_requestflexibleenvelope::Protocol::
                                RequestFlexibleResponseStrict>
    final {
  FIDL_ALIGNDECL
  fidl_message_header_t _hdr;
  ::fidl_test_requestflexibleenvelope::wire::StrictFoo f;

  explicit WireResponse(::fidl_test_requestflexibleenvelope::wire::StrictFoo f)
      : f(f) {
    _InitHeader();
  }
  WireResponse() { _InitHeader(); }

  static constexpr const fidl_type_t* Type =
      &::fidl_test_requestflexibleenvelope::
          fidl_test_requestflexibleenvelope_ProtocolRequestFlexibleResponseStrictResponseMessageTable;
  static constexpr uint32_t MaxNumHandles = 0;
  static constexpr uint32_t PrimarySize = 32;
  static constexpr uint32_t PrimarySizeV1 = 40;
  static constexpr uint32_t MaxOutOfLine = 4294967295;
  static constexpr uint32_t MaxOutOfLineV1 = 4294967295;
  static constexpr bool HasFlexibleEnvelope = false;
  static constexpr bool HasPointer = true;
  static constexpr ::fidl::internal::TransactionalMessageKind MessageKind =
      ::fidl::internal::TransactionalMessageKind::kResponse;

  class UnownedEncodedMessage;
  class OwnedEncodedMessage;

 public:
  class DecodedMessage;

 private:
  void _InitHeader();
};

class ::fidl::WireResponse<
    ::fidl_test_requestflexibleenvelope::Protocol::
        RequestFlexibleResponseStrict>::UnownedEncodedMessage final {
 public:
  UnownedEncodedMessage(uint8_t* _backing_buffer, uint32_t _backing_buffer_size,
                        WireResponse* response)
      : UnownedEncodedMessage(::fidl::internal::IovecBufferSize,
                              _backing_buffer, _backing_buffer_size, response) {
  }
  UnownedEncodedMessage(uint32_t _iovec_capacity, uint8_t* _backing_buffer,
                        uint32_t _backing_buffer_size, WireResponse* response)
      : message_(::fidl::OutgoingMessage::CreateInternal(
            ::fidl::OutgoingMessage::ConstructorArgs{
                .transport_vtable = &::fidl::internal::ChannelTransport::VTable,
                .iovecs = iovecs_,
                .iovec_capacity = _iovec_capacity,
                .backing_buffer = _backing_buffer,
                .backing_buffer_capacity = _backing_buffer_size,
            })) {
    ZX_ASSERT(_iovec_capacity <= std::size(iovecs_));
    message_.Encode<
        ::fidl::WireResponse<::fidl_test_requestflexibleenvelope::Protocol::
                                 RequestFlexibleResponseStrict>>(response);
  }
  UnownedEncodedMessage(const UnownedEncodedMessage&) = delete;
  UnownedEncodedMessage(UnownedEncodedMessage&&) = delete;
  UnownedEncodedMessage* operator=(const UnownedEncodedMessage&) = delete;
  UnownedEncodedMessage* operator=(UnownedEncodedMessage&&) = delete;

  zx_status_t status() const { return message_.status(); }
#ifdef __Fuchsia__
  const char* status_string() const { return message_.status_string(); }
#endif  // __Fuchsia__
  bool ok() const { return message_.status() == ZX_OK; }
  std::string FormatDescription() const { return message_.FormatDescription(); }
  const char* lossy_description() const { return message_.lossy_description(); }
  const ::fidl::Result& error() const { return message_.error(); }

  ::fidl::OutgoingMessage& GetOutgoingMessage() { return message_; }
#ifdef __Fuchsia__
  template <typename TransportLike>
  void Write(TransportLike&& transport) {
    message_.Write(std::forward<TransportLike>(transport));
  }
#endif  // __Fuchsia__
 private:
  ::fidl::internal::IovecBuffer iovecs_;
  ::fidl::OutgoingMessage message_;
};

class ::fidl::WireResponse<
    ::fidl_test_requestflexibleenvelope::Protocol::
        RequestFlexibleResponseStrict>::OwnedEncodedMessage final {
 public:
  explicit OwnedEncodedMessage(
      ::fidl::WireResponse<::fidl_test_requestflexibleenvelope::Protocol::
                               RequestFlexibleResponseStrict>* response)
      : message_(1u, backing_buffer_.data(),
                 static_cast<uint32_t>(backing_buffer_.size()), response) {}
  // Internal constructor.
  explicit OwnedEncodedMessage(
      ::fidl::internal::AllowUnownedInputRef allow_unowned,
      ::fidl::WireResponse<::fidl_test_requestflexibleenvelope::Protocol::
                               RequestFlexibleResponseStrict>* response)
      : message_(::fidl::internal::IovecBufferSize, backing_buffer_.data(),
                 static_cast<uint32_t>(backing_buffer_.size()), response) {}
  OwnedEncodedMessage(const OwnedEncodedMessage&) = delete;
  OwnedEncodedMessage(OwnedEncodedMessage&&) = delete;
  OwnedEncodedMessage* operator=(const OwnedEncodedMessage&) = delete;
  OwnedEncodedMessage* operator=(OwnedEncodedMessage&&) = delete;

  zx_status_t status() const { return message_.status(); }
#ifdef __Fuchsia__
  const char* status_string() const { return message_.status_string(); }
#endif  // __Fuchsia__
  bool ok() const { return message_.ok(); }
  std::string FormatDescription() const { return message_.FormatDescription(); }
  const char* lossy_description() const { return message_.lossy_description(); }
  const ::fidl::Result& error() const { return message_.error(); }

  ::fidl::OutgoingMessage& GetOutgoingMessage() {
    return message_.GetOutgoingMessage();
  }
#ifdef __Fuchsia__
  template <typename ChannelLike>
  void Write(ChannelLike&& client) {
    message_.Write(std::forward<ChannelLike>(client));
  }
#endif  // __Fuchsia__
 private:
  ::fidl::internal::BoxedMessageBuffer<ZX_CHANNEL_MAX_MSG_BYTES>
      backing_buffer_;
  UnownedEncodedMessage message_;
};

class ::fidl::WireResponse<::fidl_test_requestflexibleenvelope::Protocol::
                               RequestFlexibleResponseStrict>::DecodedMessage
    final
    : public ::fidl::internal::DecodedMessageBase<
          ::fidl::WireResponse<::fidl_test_requestflexibleenvelope::Protocol::
                                   RequestFlexibleResponseStrict>> {
 public:
  using DecodedMessageBase<::fidl::WireResponse<
      ::fidl_test_requestflexibleenvelope::Protocol::
          RequestFlexibleResponseStrict>>::DecodedMessageBase;

  DecodedMessage(uint8_t* bytes, uint32_t byte_actual,
                 zx_handle_t* handles = nullptr,
                 fidl_channel_handle_metadata_t* handle_metadata = nullptr,
                 uint32_t handle_actual = 0)
      : DecodedMessageBase(::fidl::IncomingMessage::Create(
            bytes, byte_actual, handles, handle_metadata, handle_actual)) {}

  ::fidl::WireResponse<::fidl_test_requestflexibleenvelope::Protocol::
                           RequestFlexibleResponseStrict>*
  PrimaryObject() {
    ZX_DEBUG_ASSERT(ok());
    return reinterpret_cast<
        ::fidl::WireResponse<::fidl_test_requestflexibleenvelope::Protocol::
                                 RequestFlexibleResponseStrict>*>(bytes());
  }

  // Release the ownership of the decoded message. That means that the handles
  // won't be closed When the object is destroyed. After calling this method,
  // the |DecodedMessage| object should not be used anymore.
  void ReleasePrimaryObject() { ResetBytes(); }
};
#ifdef __Fuchsia__

template <>
class ::fidl::WireResult<::fidl_test_requestflexibleenvelope::Protocol::
                             RequestStrictResponseFlexible>
    final : public ::fidl::Result {
 public:
  WireResult(
      ::fidl::UnownedClientEnd<::fidl_test_requestflexibleenvelope::Protocol>
          client,
      ::fidl::WireRequest<::fidl_test_requestflexibleenvelope::Protocol::
                              RequestStrictResponseFlexible>* request);
  WireResult(
      ::fidl::UnownedClientEnd<::fidl_test_requestflexibleenvelope::Protocol>
          client,
      ::fidl::WireRequest<::fidl_test_requestflexibleenvelope::Protocol::
                              RequestStrictResponseFlexible>* request,
      zx_time_t _deadline);
  explicit WireResult(const ::fidl::Result& result) : ::fidl::Result(result) {}
  WireResult(WireResult&&) = delete;
  WireResult(const WireResult&) = delete;
  WireResult* operator=(WireResult&&) = delete;
  WireResult* operator=(const WireResult&) = delete;
  ~WireResult() = default;

  ::fidl::WireResponse<::fidl_test_requestflexibleenvelope::Protocol::
                           RequestStrictResponseFlexible>*
  Unwrap() {
    ZX_DEBUG_ASSERT(ok());
    return reinterpret_cast<
        ::fidl::WireResponse<::fidl_test_requestflexibleenvelope::Protocol::
                                 RequestStrictResponseFlexible>*>(
        bytes_.data());
  }
  const ::fidl::WireResponse<::fidl_test_requestflexibleenvelope::Protocol::
                                 RequestStrictResponseFlexible>*
  Unwrap() const {
    ZX_DEBUG_ASSERT(ok());
    return reinterpret_cast<const ::fidl::WireResponse<
        ::fidl_test_requestflexibleenvelope::Protocol::
            RequestStrictResponseFlexible>*>(bytes_.data());
  }

  ::fidl::WireResponse<::fidl_test_requestflexibleenvelope::Protocol::
                           RequestStrictResponseFlexible>&
  value() {
    return *Unwrap();
  }
  const ::fidl::WireResponse<::fidl_test_requestflexibleenvelope::Protocol::
                                 RequestStrictResponseFlexible>&
  value() const {
    return *Unwrap();
  }

  ::fidl::WireResponse<::fidl_test_requestflexibleenvelope::Protocol::
                           RequestStrictResponseFlexible>*
  operator->() {
    return &value();
  }
  const ::fidl::WireResponse<::fidl_test_requestflexibleenvelope::Protocol::
                                 RequestStrictResponseFlexible>*
  operator->() const {
    return &value();
  }

  ::fidl::WireResponse<::fidl_test_requestflexibleenvelope::Protocol::
                           RequestStrictResponseFlexible>&
  operator*() {
    return value();
  }
  const ::fidl::WireResponse<::fidl_test_requestflexibleenvelope::Protocol::
                                 RequestStrictResponseFlexible>&
  operator*() const {
    return value();
  }

 private:
  ::fidl::internal::BoxedMessageBuffer<ZX_CHANNEL_MAX_MSG_BYTES> bytes_;
};
template <>
class ::fidl::WireUnownedResult<::fidl_test_requestflexibleenvelope::Protocol::
                                    RequestStrictResponseFlexible>
    final : public ::fidl::Result {
 public:
  explicit WireUnownedResult(
      ::fidl::UnownedClientEnd<::fidl_test_requestflexibleenvelope::Protocol>
          client_end,
      ::fidl::internal::AnyBufferAllocator& allocator,
      ::fidl::WireRequest<::fidl_test_requestflexibleenvelope::Protocol::
                              RequestStrictResponseFlexible>* request);
  explicit WireUnownedResult(
      ::fidl::WireResponse<::fidl_test_requestflexibleenvelope::Protocol::
                               RequestStrictResponseFlexible>* response)
      : bytes_(reinterpret_cast<uint8_t*>(response)) {}
  explicit WireUnownedResult(const ::fidl::Result& result)
      : ::fidl::Result(result) {}
  explicit WireUnownedResult(
      ::fidl::DecodedMessage<
          ::fidl::WireResponse<::fidl_test_requestflexibleenvelope::Protocol::
                                   RequestStrictResponseFlexible>>&& decoded)
      : ::fidl::Result(decoded) {
    if (decoded.ok()) {
      bytes_ = reinterpret_cast<uint8_t*>(decoded.PrimaryObject());
    } else {
      bytes_ = nullptr;
    }
    decoded.ReleasePrimaryObject();
  }
  WireUnownedResult(WireUnownedResult&&) = delete;
  WireUnownedResult(const WireUnownedResult&) = delete;
  WireUnownedResult* operator=(WireUnownedResult&&) = delete;
  WireUnownedResult* operator=(const WireUnownedResult&) = delete;
  ~WireUnownedResult() = default;

  ::fidl::WireResponse<::fidl_test_requestflexibleenvelope::Protocol::
                           RequestStrictResponseFlexible>*
  Unwrap() {
    ZX_DEBUG_ASSERT(ok());
    return reinterpret_cast<
        ::fidl::WireResponse<::fidl_test_requestflexibleenvelope::Protocol::
                                 RequestStrictResponseFlexible>*>(bytes_);
  }
  const ::fidl::WireResponse<::fidl_test_requestflexibleenvelope::Protocol::
                                 RequestStrictResponseFlexible>*
  Unwrap() const {
    ZX_DEBUG_ASSERT(ok());
    return reinterpret_cast<const ::fidl::WireResponse<
        ::fidl_test_requestflexibleenvelope::Protocol::
            RequestStrictResponseFlexible>*>(bytes_);
  }

  ::fidl::WireResponse<::fidl_test_requestflexibleenvelope::Protocol::
                           RequestStrictResponseFlexible>&
  value() {
    return *Unwrap();
  }
  const ::fidl::WireResponse<::fidl_test_requestflexibleenvelope::Protocol::
                                 RequestStrictResponseFlexible>&
  value() const {
    return *Unwrap();
  }

  ::fidl::WireResponse<::fidl_test_requestflexibleenvelope::Protocol::
                           RequestStrictResponseFlexible>*
  operator->() {
    return &value();
  }
  const ::fidl::WireResponse<::fidl_test_requestflexibleenvelope::Protocol::
                                 RequestStrictResponseFlexible>*
  operator->() const {
    return &value();
  }

  ::fidl::WireResponse<::fidl_test_requestflexibleenvelope::Protocol::
                           RequestStrictResponseFlexible>&
  operator*() {
    return value();
  }
  const ::fidl::WireResponse<::fidl_test_requestflexibleenvelope::Protocol::
                                 RequestStrictResponseFlexible>&
  operator*() const {
    return value();
  }

 private:
  uint8_t* bytes_;
};
template <>
class ::fidl::WireResult<::fidl_test_requestflexibleenvelope::Protocol::
                             RequestFlexibleResponseStrict>
    final : public ::fidl::Result {
 public:
  WireResult(
      ::fidl::UnownedClientEnd<::fidl_test_requestflexibleenvelope::Protocol>
          client,
      ::fidl::WireRequest<::fidl_test_requestflexibleenvelope::Protocol::
                              RequestFlexibleResponseStrict>* request);
  WireResult(
      ::fidl::UnownedClientEnd<::fidl_test_requestflexibleenvelope::Protocol>
          client,
      ::fidl::WireRequest<::fidl_test_requestflexibleenvelope::Protocol::
                              RequestFlexibleResponseStrict>* request,
      zx_time_t _deadline);
  explicit WireResult(const ::fidl::Result& result) : ::fidl::Result(result) {}
  WireResult(WireResult&&) = delete;
  WireResult(const WireResult&) = delete;
  WireResult* operator=(WireResult&&) = delete;
  WireResult* operator=(const WireResult&) = delete;
  ~WireResult() = default;

  ::fidl::WireResponse<::fidl_test_requestflexibleenvelope::Protocol::
                           RequestFlexibleResponseStrict>*
  Unwrap() {
    ZX_DEBUG_ASSERT(ok());
    return reinterpret_cast<
        ::fidl::WireResponse<::fidl_test_requestflexibleenvelope::Protocol::
                                 RequestFlexibleResponseStrict>*>(
        bytes_.data());
  }
  const ::fidl::WireResponse<::fidl_test_requestflexibleenvelope::Protocol::
                                 RequestFlexibleResponseStrict>*
  Unwrap() const {
    ZX_DEBUG_ASSERT(ok());
    return reinterpret_cast<const ::fidl::WireResponse<
        ::fidl_test_requestflexibleenvelope::Protocol::
            RequestFlexibleResponseStrict>*>(bytes_.data());
  }

  ::fidl::WireResponse<::fidl_test_requestflexibleenvelope::Protocol::
                           RequestFlexibleResponseStrict>&
  value() {
    return *Unwrap();
  }
  const ::fidl::WireResponse<::fidl_test_requestflexibleenvelope::Protocol::
                                 RequestFlexibleResponseStrict>&
  value() const {
    return *Unwrap();
  }

  ::fidl::WireResponse<::fidl_test_requestflexibleenvelope::Protocol::
                           RequestFlexibleResponseStrict>*
  operator->() {
    return &value();
  }
  const ::fidl::WireResponse<::fidl_test_requestflexibleenvelope::Protocol::
                                 RequestFlexibleResponseStrict>*
  operator->() const {
    return &value();
  }

  ::fidl::WireResponse<::fidl_test_requestflexibleenvelope::Protocol::
                           RequestFlexibleResponseStrict>&
  operator*() {
    return value();
  }
  const ::fidl::WireResponse<::fidl_test_requestflexibleenvelope::Protocol::
                                 RequestFlexibleResponseStrict>&
  operator*() const {
    return value();
  }

 private:
  ::fidl::internal::BoxedMessageBuffer<ZX_CHANNEL_MAX_MSG_BYTES> bytes_;
};
template <>
class ::fidl::WireUnownedResult<::fidl_test_requestflexibleenvelope::Protocol::
                                    RequestFlexibleResponseStrict>
    final : public ::fidl::Result {
 public:
  explicit WireUnownedResult(
      ::fidl::UnownedClientEnd<::fidl_test_requestflexibleenvelope::Protocol>
          client_end,
      ::fidl::internal::AnyBufferAllocator& allocator,
      ::fidl::WireRequest<::fidl_test_requestflexibleenvelope::Protocol::
                              RequestFlexibleResponseStrict>* request);
  explicit WireUnownedResult(
      ::fidl::WireResponse<::fidl_test_requestflexibleenvelope::Protocol::
                               RequestFlexibleResponseStrict>* response)
      : bytes_(reinterpret_cast<uint8_t*>(response)) {}
  explicit WireUnownedResult(const ::fidl::Result& result)
      : ::fidl::Result(result) {}
  explicit WireUnownedResult(
      ::fidl::DecodedMessage<
          ::fidl::WireResponse<::fidl_test_requestflexibleenvelope::Protocol::
                                   RequestFlexibleResponseStrict>>&& decoded)
      : ::fidl::Result(decoded) {
    if (decoded.ok()) {
      bytes_ = reinterpret_cast<uint8_t*>(decoded.PrimaryObject());
    } else {
      bytes_ = nullptr;
    }
    decoded.ReleasePrimaryObject();
  }
  WireUnownedResult(WireUnownedResult&&) = delete;
  WireUnownedResult(const WireUnownedResult&) = delete;
  WireUnownedResult* operator=(WireUnownedResult&&) = delete;
  WireUnownedResult* operator=(const WireUnownedResult&) = delete;
  ~WireUnownedResult() = default;

  ::fidl::WireResponse<::fidl_test_requestflexibleenvelope::Protocol::
                           RequestFlexibleResponseStrict>*
  Unwrap() {
    ZX_DEBUG_ASSERT(ok());
    return reinterpret_cast<
        ::fidl::WireResponse<::fidl_test_requestflexibleenvelope::Protocol::
                                 RequestFlexibleResponseStrict>*>(bytes_);
  }
  const ::fidl::WireResponse<::fidl_test_requestflexibleenvelope::Protocol::
                                 RequestFlexibleResponseStrict>*
  Unwrap() const {
    ZX_DEBUG_ASSERT(ok());
    return reinterpret_cast<const ::fidl::WireResponse<
        ::fidl_test_requestflexibleenvelope::Protocol::
            RequestFlexibleResponseStrict>*>(bytes_);
  }

  ::fidl::WireResponse<::fidl_test_requestflexibleenvelope::Protocol::
                           RequestFlexibleResponseStrict>&
  value() {
    return *Unwrap();
  }
  const ::fidl::WireResponse<::fidl_test_requestflexibleenvelope::Protocol::
                                 RequestFlexibleResponseStrict>&
  value() const {
    return *Unwrap();
  }

  ::fidl::WireResponse<::fidl_test_requestflexibleenvelope::Protocol::
                           RequestFlexibleResponseStrict>*
  operator->() {
    return &value();
  }
  const ::fidl::WireResponse<::fidl_test_requestflexibleenvelope::Protocol::
                                 RequestFlexibleResponseStrict>*
  operator->() const {
    return &value();
  }

  ::fidl::WireResponse<::fidl_test_requestflexibleenvelope::Protocol::
                           RequestFlexibleResponseStrict>&
  operator*() {
    return value();
  }
  const ::fidl::WireResponse<::fidl_test_requestflexibleenvelope::Protocol::
                                 RequestFlexibleResponseStrict>&
  operator*() const {
    return value();
  }

 private:
  uint8_t* bytes_;
};

// Methods to make a sync FIDL call directly on an unowned channel or a
// const reference to a
// |fidl::ClientEnd<::fidl_test_requestflexibleenvelope::Protocol>|, avoiding
// setting up a client.
template <>
class ::fidl::internal::WireSyncClientImpl<
    ::fidl_test_requestflexibleenvelope::Protocol>
    final : public ::fidl::internal::SyncEndpointManagedVeneer<
                ::fidl::internal::WireSyncClientImpl<
                    ::fidl_test_requestflexibleenvelope::Protocol>> {
 public:
  // Request is heap-allocated. Response is heap-allocated.
  ::fidl::WireResult<::fidl_test_requestflexibleenvelope::Protocol::
                         RequestStrictResponseFlexible>
  RequestStrictResponseFlexible(
      ::fidl_test_requestflexibleenvelope::wire::StrictFoo s) {
    ::fidl::WireRequest<::fidl_test_requestflexibleenvelope::Protocol::
                            RequestStrictResponseFlexible>
        _request{s};
    return ::fidl::WireResult<::fidl_test_requestflexibleenvelope::Protocol::
                                  RequestStrictResponseFlexible>(_client_end(),
                                                                 &_request);
  }

  // Request is heap-allocated. Response is heap-allocated.
  ::fidl::WireResult<::fidl_test_requestflexibleenvelope::Protocol::
                         RequestFlexibleResponseStrict>
  RequestFlexibleResponseStrict(
      ::fidl_test_requestflexibleenvelope::wire::FlexibleFoo s) {
    ::fidl::WireRequest<::fidl_test_requestflexibleenvelope::Protocol::
                            RequestFlexibleResponseStrict>
        _request{s};
    return ::fidl::WireResult<::fidl_test_requestflexibleenvelope::Protocol::
                                  RequestFlexibleResponseStrict>(_client_end(),
                                                                 &_request);
  }

 private:
  ::fidl::UnownedClientEnd<::fidl_test_requestflexibleenvelope::Protocol>
  _client_end() const {
    return ::fidl::UnownedClientEnd<
        ::fidl_test_requestflexibleenvelope::Protocol>(_channel());
  }
};

template <>
class ::fidl::internal::WireSyncBufferClientImpl<
    ::fidl_test_requestflexibleenvelope::Protocol>
    final : public ::fidl::internal::SyncEndpointBufferVeneer<
                ::fidl::internal::WireSyncBufferClientImpl<
                    ::fidl_test_requestflexibleenvelope::Protocol>> {
 public:
  // Caller provides the backing storage for FIDL message via an argument to
  // `.buffer()`.
  ::fidl::WireUnownedResult<::fidl_test_requestflexibleenvelope::Protocol::
                                RequestStrictResponseFlexible>
  RequestStrictResponseFlexible(
      ::fidl_test_requestflexibleenvelope::wire::StrictFoo s) {
    ::fidl::WireRequest<::fidl_test_requestflexibleenvelope::Protocol::
                            RequestStrictResponseFlexible>
        _request{s};
    return ::fidl::WireUnownedResult<
        ::fidl_test_requestflexibleenvelope::Protocol::
            RequestStrictResponseFlexible>(_client_end(), _allocator(),
                                           &_request);
  }

  // Caller provides the backing storage for FIDL message via an argument to
  // `.buffer()`.
  ::fidl::WireUnownedResult<::fidl_test_requestflexibleenvelope::Protocol::
                                RequestFlexibleResponseStrict>
  RequestFlexibleResponseStrict(
      ::fidl_test_requestflexibleenvelope::wire::FlexibleFoo s) {
    ::fidl::WireRequest<::fidl_test_requestflexibleenvelope::Protocol::
                            RequestFlexibleResponseStrict>
        _request{s};
    return ::fidl::WireUnownedResult<
        ::fidl_test_requestflexibleenvelope::Protocol::
            RequestFlexibleResponseStrict>(_client_end(), _allocator(),
                                           &_request);
  }

 private:
  ::fidl::UnownedClientEnd<::fidl_test_requestflexibleenvelope::Protocol>
  _client_end() const {
    return ::fidl::UnownedClientEnd<
        ::fidl_test_requestflexibleenvelope::Protocol>(_channel());
  }
};
template <>
class ::fidl::internal::WireEventHandlerInterface<
    ::fidl_test_requestflexibleenvelope::Protocol> {
 public:
  WireEventHandlerInterface() = default;
  virtual ~WireEventHandlerInterface() = default;
};

template <>
class ::fidl::WireAsyncEventHandler<
    ::fidl_test_requestflexibleenvelope::Protocol>
    : public ::fidl::internal::WireEventHandlerInterface<
          ::fidl_test_requestflexibleenvelope::Protocol>,
      public ::fidl::internal::AsyncEventHandler {
 public:
  WireAsyncEventHandler() = default;
};

template <>
class ::fidl::WireSyncEventHandler<
    ::fidl_test_requestflexibleenvelope::Protocol>
    : public ::fidl::internal::WireEventHandlerInterface<
          ::fidl_test_requestflexibleenvelope::Protocol> {
 public:
  WireSyncEventHandler() = default;

  // Method called when an unknown event is found. This methods gives the status
  // which, in this case, is returned by HandleOneEvent.
  virtual zx_status_t Unknown() = 0;

  // Handle all possible events defined in this protocol.
  // Blocks to consume exactly one message from the channel, then call the
  // corresponding virtual method.
  ::fidl::Result HandleOneEvent(
      ::fidl::UnownedClientEnd<::fidl_test_requestflexibleenvelope::Protocol>
          client_end);
};
template <>
class ::fidl::WireSyncClient<::fidl_test_requestflexibleenvelope::Protocol>
    final : public ::fidl::internal::WireSyncClientBase<
                ::fidl_test_requestflexibleenvelope::Protocol> {
 public:
  using ::fidl::internal::WireSyncClientBase<
      ::fidl_test_requestflexibleenvelope::Protocol>::WireSyncClientBase;
};

template <>
class ::fidl::internal::WireCompleterBase<
    ::fidl_test_requestflexibleenvelope::Protocol::
        RequestStrictResponseFlexible> : public ::fidl::CompleterBase {
 public:
  // In the following methods, the return value indicates internal errors during
  // the reply, such as encoding or writing to the transport.
  // Note that any error will automatically lead to the destruction of the
  // binding, after which the |on_unbound| callback will be triggered with a
  // detailed reason.
  //
  // See //zircon/system/ulib/fidl/include/lib/fidl/llcpp/server.h.
  //
  // Because the reply status is identical to the unbinding status, it can be
  // safely ignored.
  ::fidl::Result Reply(
      ::fidl_test_requestflexibleenvelope::wire::FlexibleFoo f);
  ::fidl::Result Reply(
      ::fidl::BufferSpan _buffer,
      ::fidl_test_requestflexibleenvelope::wire::FlexibleFoo f);

 protected:
  using ::fidl::CompleterBase::CompleterBase;
};

template <>
struct ::fidl::internal::WireMethodTypes<
    ::fidl_test_requestflexibleenvelope::Protocol::
        RequestStrictResponseFlexible> {
  using Completer = fidl::Completer<::fidl::internal::WireCompleterBase<
      ::fidl_test_requestflexibleenvelope::Protocol::
          RequestStrictResponseFlexible>>;
};

template <>
class ::fidl::internal::WireCompleterBase<
    ::fidl_test_requestflexibleenvelope::Protocol::
        RequestFlexibleResponseStrict> : public ::fidl::CompleterBase {
 public:
  // In the following methods, the return value indicates internal errors during
  // the reply, such as encoding or writing to the transport.
  // Note that any error will automatically lead to the destruction of the
  // binding, after which the |on_unbound| callback will be triggered with a
  // detailed reason.
  //
  // See //zircon/system/ulib/fidl/include/lib/fidl/llcpp/server.h.
  //
  // Because the reply status is identical to the unbinding status, it can be
  // safely ignored.
  ::fidl::Result Reply(::fidl_test_requestflexibleenvelope::wire::StrictFoo f);
  ::fidl::Result Reply(::fidl::BufferSpan _buffer,
                       ::fidl_test_requestflexibleenvelope::wire::StrictFoo f);

 protected:
  using ::fidl::CompleterBase::CompleterBase;
};

template <>
struct ::fidl::internal::WireMethodTypes<
    ::fidl_test_requestflexibleenvelope::Protocol::
        RequestFlexibleResponseStrict> {
  using Completer = fidl::Completer<::fidl::internal::WireCompleterBase<
      ::fidl_test_requestflexibleenvelope::Protocol::
          RequestFlexibleResponseStrict>>;
};

// Pure-virtual interface to be implemented by a server.
// This interface uses typed channels (i.e. |fidl::ClientEnd<SomeProtocol>|
// and |fidl::ServerEnd<SomeProtocol>|).
template <>
class ::fidl::WireServer<::fidl_test_requestflexibleenvelope::Protocol>
    : public ::fidl::internal::IncomingMessageDispatcher {
 public:
  WireServer() = default;
  virtual ~WireServer() = default;

  // The FIDL protocol type that is implemented by this server.
  using _EnclosingProtocol = ::fidl_test_requestflexibleenvelope::Protocol;

  using RequestStrictResponseFlexibleCompleter =
      ::fidl::internal::WireCompleter<
          ::fidl_test_requestflexibleenvelope::Protocol::
              RequestStrictResponseFlexible>;
  using RequestStrictResponseFlexibleRequestView =
      ::fidl::internal::WireRequestView<
          ::fidl_test_requestflexibleenvelope::Protocol::
              RequestStrictResponseFlexible>;

  virtual void RequestStrictResponseFlexible(
      RequestStrictResponseFlexibleRequestView request,
      RequestStrictResponseFlexibleCompleter::Sync& _completer) = 0;

  using RequestFlexibleResponseStrictCompleter =
      ::fidl::internal::WireCompleter<
          ::fidl_test_requestflexibleenvelope::Protocol::
              RequestFlexibleResponseStrict>;
  using RequestFlexibleResponseStrictRequestView =
      ::fidl::internal::WireRequestView<
          ::fidl_test_requestflexibleenvelope::Protocol::
              RequestFlexibleResponseStrict>;

  virtual void RequestFlexibleResponseStrict(
      RequestFlexibleResponseStrictRequestView request,
      RequestFlexibleResponseStrictCompleter::Sync& _completer) = 0;

 private:
  void dispatch_message(::fidl::IncomingMessage&& msg,
                        ::fidl::Transaction* txn) final;
};
#endif  // __Fuchsia__

namespace fidl {

template <>
struct IsFidlType<
    ::fidl::WireRequest<::fidl_test_requestflexibleenvelope::Protocol::
                            RequestStrictResponseFlexible>>
    : public std::true_type {};
template <>
struct IsFidlMessage<
    ::fidl::WireRequest<::fidl_test_requestflexibleenvelope::Protocol::
                            RequestStrictResponseFlexible>>
    : public std::true_type {};
static_assert(
    sizeof(::fidl::WireRequest<::fidl_test_requestflexibleenvelope::Protocol::
                                   RequestStrictResponseFlexible>) ==
    ::fidl::WireRequest<::fidl_test_requestflexibleenvelope::Protocol::
                            RequestStrictResponseFlexible>::PrimarySize);
static_assert(
    offsetof(::fidl::WireRequest<::fidl_test_requestflexibleenvelope::Protocol::
                                     RequestStrictResponseFlexible>,
             s) == 16);

template <>
struct IsFidlType<
    ::fidl::WireResponse<::fidl_test_requestflexibleenvelope::Protocol::
                             RequestStrictResponseFlexible>>
    : public std::true_type {};
template <>
struct IsFidlMessage<
    ::fidl::WireResponse<::fidl_test_requestflexibleenvelope::Protocol::
                             RequestStrictResponseFlexible>>
    : public std::true_type {};
static_assert(
    sizeof(::fidl::WireResponse<::fidl_test_requestflexibleenvelope::Protocol::
                                    RequestStrictResponseFlexible>) ==
    ::fidl::WireResponse<::fidl_test_requestflexibleenvelope::Protocol::
                             RequestStrictResponseFlexible>::PrimarySize);
static_assert(
    offsetof(::fidl::WireResponse<::fidl_test_requestflexibleenvelope::
                                      Protocol::RequestStrictResponseFlexible>,
             f) == 16);

template <>
struct IsFidlType<
    ::fidl::WireRequest<::fidl_test_requestflexibleenvelope::Protocol::
                            RequestFlexibleResponseStrict>>
    : public std::true_type {};
template <>
struct IsFidlMessage<
    ::fidl::WireRequest<::fidl_test_requestflexibleenvelope::Protocol::
                            RequestFlexibleResponseStrict>>
    : public std::true_type {};
static_assert(
    sizeof(::fidl::WireRequest<::fidl_test_requestflexibleenvelope::Protocol::
                                   RequestFlexibleResponseStrict>) ==
    ::fidl::WireRequest<::fidl_test_requestflexibleenvelope::Protocol::
                            RequestFlexibleResponseStrict>::PrimarySize);
static_assert(
    offsetof(::fidl::WireRequest<::fidl_test_requestflexibleenvelope::Protocol::
                                     RequestFlexibleResponseStrict>,
             s) == 16);

template <>
struct IsFidlType<
    ::fidl::WireResponse<::fidl_test_requestflexibleenvelope::Protocol::
                             RequestFlexibleResponseStrict>>
    : public std::true_type {};
template <>
struct IsFidlMessage<
    ::fidl::WireResponse<::fidl_test_requestflexibleenvelope::Protocol::
                             RequestFlexibleResponseStrict>>
    : public std::true_type {};
static_assert(
    sizeof(::fidl::WireResponse<::fidl_test_requestflexibleenvelope::Protocol::
                                    RequestFlexibleResponseStrict>) ==
    ::fidl::WireResponse<::fidl_test_requestflexibleenvelope::Protocol::
                             RequestFlexibleResponseStrict>::PrimarySize);
static_assert(
    offsetof(::fidl::WireResponse<::fidl_test_requestflexibleenvelope::
                                      Protocol::RequestFlexibleResponseStrict>,
             f) == 16);
}  // namespace fidl
#ifdef __Fuchsia__

template <>
class ::fidl::WireResponseContext<::fidl_test_requestflexibleenvelope::
                                      Protocol::RequestStrictResponseFlexible>
    : public ::fidl::internal::ResponseContext {
 public:
  WireResponseContext();

  virtual void OnResult(
      ::fidl::WireUnownedResult<::fidl_test_requestflexibleenvelope::Protocol::
                                    RequestStrictResponseFlexible>& result) = 0;

 private:
  ::cpp17::optional<::fidl::UnbindInfo> OnRawResult(
      ::fidl::IncomingMessage&& msg) override;
};
#endif  // __Fuchsia__

#ifdef __Fuchsia__

template <>
class ::fidl::WireResponseContext<::fidl_test_requestflexibleenvelope::
                                      Protocol::RequestFlexibleResponseStrict>
    : public ::fidl::internal::ResponseContext {
 public:
  WireResponseContext();

  virtual void OnResult(
      ::fidl::WireUnownedResult<::fidl_test_requestflexibleenvelope::Protocol::
                                    RequestFlexibleResponseStrict>& result) = 0;

 private:
  ::cpp17::optional<::fidl::UnbindInfo> OnRawResult(
      ::fidl::IncomingMessage&& msg) override;
};
#endif  // __Fuchsia__

#ifdef __Fuchsia__

template <>
class ::fidl::internal::WireClientImpl<
    ::fidl_test_requestflexibleenvelope::Protocol>
    final : public ::fidl::internal::ClientBase {
 public:
  // Asynchronous variant of |Protocol.RequestStrictResponseFlexible()|.
  // The request and callback are allocated on the heap.
  void RequestStrictResponseFlexible(
      ::fidl_test_requestflexibleenvelope::wire::StrictFoo s,
      ::fidl::WireClientCallback<::fidl_test_requestflexibleenvelope::Protocol::
                                     RequestStrictResponseFlexible>
          _cb);

  void RequestStrictResponseFlexible(
      ::fidl_test_requestflexibleenvelope::wire::StrictFoo s,
      ::fit::callback<void(
          ::fidl::WireResponse<::fidl_test_requestflexibleenvelope::Protocol::
                                   RequestStrictResponseFlexible>* response)>
          _cb);

  // Asynchronous variant of |Protocol.RequestStrictResponseFlexible()|.
  // Caller provides the backing storage for FIDL message via request buffer.
  // Ownership of |_context| is given unsafely to the binding until |OnError|
  // or |OnReply| are called on it.
  void RequestStrictResponseFlexible(
      ::fidl::BufferSpan _request_buffer,
      ::fidl_test_requestflexibleenvelope::wire::StrictFoo s,
      ::fidl::WireResponseContext<::fidl_test_requestflexibleenvelope::
                                      Protocol::RequestStrictResponseFlexible>*
          _context);

  // Synchronous variant of
  // |RequestStrictResponseFlexible.RequestStrictResponseFlexible()|. Request is
  // heap-allocated. Response is heap-allocated.
  ::fidl::WireResult<::fidl_test_requestflexibleenvelope::Protocol::
                         RequestStrictResponseFlexible>
  RequestStrictResponseFlexible_Sync(
      ::fidl_test_requestflexibleenvelope::wire::StrictFoo s);

  // Synchronous variant of
  // |RequestStrictResponseFlexible.RequestStrictResponseFlexible()|. Caller
  // provides the backing storage for FIDL message via request and response
  // buffers.
  ::fidl::WireUnownedResult<::fidl_test_requestflexibleenvelope::Protocol::
                                RequestStrictResponseFlexible>
  RequestStrictResponseFlexible_Sync(
      ::fidl::BufferSpan _buffer_span,
      ::fidl_test_requestflexibleenvelope::wire::StrictFoo s);
  // Asynchronous variant of |Protocol.RequestFlexibleResponseStrict()|.
  // The request and callback are allocated on the heap.
  void RequestFlexibleResponseStrict(
      ::fidl_test_requestflexibleenvelope::wire::FlexibleFoo s,
      ::fidl::WireClientCallback<::fidl_test_requestflexibleenvelope::Protocol::
                                     RequestFlexibleResponseStrict>
          _cb);

  void RequestFlexibleResponseStrict(
      ::fidl_test_requestflexibleenvelope::wire::FlexibleFoo s,
      ::fit::callback<void(
          ::fidl::WireResponse<::fidl_test_requestflexibleenvelope::Protocol::
                                   RequestFlexibleResponseStrict>* response)>
          _cb);

  // Asynchronous variant of |Protocol.RequestFlexibleResponseStrict()|.
  // Caller provides the backing storage for FIDL message via request buffer.
  // Ownership of |_context| is given unsafely to the binding until |OnError|
  // or |OnReply| are called on it.
  void RequestFlexibleResponseStrict(
      ::fidl::BufferSpan _request_buffer,
      ::fidl_test_requestflexibleenvelope::wire::FlexibleFoo s,
      ::fidl::WireResponseContext<::fidl_test_requestflexibleenvelope::
                                      Protocol::RequestFlexibleResponseStrict>*
          _context);

  // Synchronous variant of
  // |RequestFlexibleResponseStrict.RequestFlexibleResponseStrict()|. Request is
  // heap-allocated. Response is heap-allocated.
  ::fidl::WireResult<::fidl_test_requestflexibleenvelope::Protocol::
                         RequestFlexibleResponseStrict>
  RequestFlexibleResponseStrict_Sync(
      ::fidl_test_requestflexibleenvelope::wire::FlexibleFoo s);

  // Synchronous variant of
  // |RequestFlexibleResponseStrict.RequestFlexibleResponseStrict()|. Caller
  // provides the backing storage for FIDL message via request and response
  // buffers.
  ::fidl::WireUnownedResult<::fidl_test_requestflexibleenvelope::Protocol::
                                RequestFlexibleResponseStrict>
  RequestFlexibleResponseStrict_Sync(
      ::fidl::BufferSpan _buffer_span,
      ::fidl_test_requestflexibleenvelope::wire::FlexibleFoo s);
  WireClientImpl() = default;

 private:
  std::optional<::fidl::UnbindInfo> DispatchEvent(
      ::fidl::IncomingMessage& msg,
      ::fidl::internal::AsyncEventHandler* maybe_event_handler) override;
};
#endif  // __Fuchsia__

#ifdef __Fuchsia__
// |EventSender| owns a server endpoint of a channel speaking
// the Protocol protocol, and can send events in that protocol.
template <>
class ::fidl::WireEventSender<::fidl_test_requestflexibleenvelope::Protocol> {
 public:
  // Constructs an event sender with an invalid channel.
  WireEventSender() = default;

  explicit WireEventSender(
      ::fidl::ServerEnd<::fidl_test_requestflexibleenvelope::Protocol>
          server_end)
      : server_end_(std::move(server_end)) {}

  // The underlying server channel endpoint, which may be replaced at run-time.
  const ::fidl::ServerEnd<::fidl_test_requestflexibleenvelope::Protocol>&
  server_end() const {
    return server_end_;
  }
  ::fidl::ServerEnd<::fidl_test_requestflexibleenvelope::Protocol>&
  server_end() {
    return server_end_;
  }

  const ::zx::channel& channel() const { return server_end_.channel(); }
  ::zx::channel& channel() { return server_end_.channel(); }

  // Whether the underlying channel is valid.
  bool is_valid() const { return server_end_.is_valid(); }

 private:
  ::fidl::ServerEnd<::fidl_test_requestflexibleenvelope::Protocol> server_end_;
};

template <>
class ::fidl::internal::WireWeakEventSender<
    ::fidl_test_requestflexibleenvelope::Protocol> {
 public:
  WireWeakEventSender(
      std::weak_ptr<::fidl::internal::AsyncServerBinding>&& binding)
      : inner_(std::move(binding)) {}

 private:
  friend ServerBindingRef<::fidl_test_requestflexibleenvelope::Protocol>;

  ::fidl::internal::WeakEventSenderInner inner_;
};
#endif  // __Fuchsia__
