// WARNING: This file is machine generated by fidlgen.

#pragma once

#include <fidl/fidl.test.doccomments/cpp/markers.h>
#include <fidl/fidl.test.doccomments/cpp/wire_types.h>
#include <lib/fidl/llcpp/wire_messaging.h>

#ifdef __Fuchsia__

#include <lib/fidl/llcpp/client.h>
#include <lib/fidl/llcpp/connect_service.h>
#include <lib/fidl/llcpp/server.h>
#include <lib/fidl/llcpp/service_handler_interface.h>
#include <lib/fidl/llcpp/sync_call.h>

#endif  // __Fuchsia__

namespace fidl_test_doccomments {
class Interface;

class Service;

__LOCAL extern "C" const fidl_type_t
    fidl_test_doccomments_InterfaceMethodRequestMessageTable;

__LOCAL extern "C" const fidl_type_t
    fidl_test_doccomments_InterfaceMethodResponseMessageTable;

__LOCAL extern "C" const fidl_type_t
    fidl_test_doccomments_InterfaceOnEventRequestMessageTable;

__LOCAL extern "C" const fidl_type_t
    fidl_test_doccomments_InterfaceOnEventEventMessageTable;
}  // namespace fidl_test_doccomments
template <>
struct ::fidl::internal::WireOrdinal<::fidl_test_doccomments::Interface::Method>
    final {
  static constexpr uint64_t value = 6649887292072346213lu;
};
template <>
struct ::fidl::internal::WireOrdinal<
    ::fidl_test_doccomments::Interface::OnEvent>
    final {
  static constexpr uint64_t value = 3999525675942213370lu;
};

namespace fidl_test_doccomments {}  // namespace fidl_test_doccomments
#ifdef __Fuchsia__

template <>
struct ::fidl::internal::ProtocolDetails<::fidl_test_doccomments::Interface> {};
#endif  // __Fuchsia__

#ifdef __Fuchsia__

template <>
struct ::fidl::internal::WireServerDispatcher<
    ::fidl_test_doccomments::Interface>
    final {
  WireServerDispatcher() = delete;
  static ::fidl::DispatchResult TryDispatch(
      ::fidl::WireServer<::fidl_test_doccomments::Interface>* impl,
      ::fidl::IncomingMessage& msg, ::fidl::Transaction* txn);
  static void Dispatch(
      ::fidl::WireServer<::fidl_test_doccomments::Interface>* impl,
      ::fidl::IncomingMessage&& msg, ::fidl::Transaction* txn);

 private:
  static const ::fidl::internal::MethodEntry entries_[];
  static const ::fidl::internal::MethodEntry* entries_end_;
};
#endif  // __Fuchsia__

template <>
struct ::fidl::WireRequest<::fidl_test_doccomments::Interface::Method> final {
  FIDL_ALIGNDECL
  fidl_message_header_t _hdr;

  WireRequest() { _InitHeader(); }

  static constexpr const fidl_type_t* Type =
      &::fidl::_llcpp_coding_AnyZeroArgMessageTable;
  static constexpr uint32_t MaxNumHandles = 0;
  static constexpr uint32_t PrimarySize = 16;
  static constexpr uint32_t PrimarySizeV1 = 16;
  static constexpr uint32_t MaxOutOfLine = 0;
  static constexpr uint32_t MaxOutOfLineV1 = 0;
  static constexpr bool HasFlexibleEnvelope = false;
  static constexpr bool HasPointer = false;
  static constexpr ::fidl::internal::TransactionalMessageKind MessageKind =
      ::fidl::internal::TransactionalMessageKind::kRequest;

  class UnownedEncodedMessage;
  class OwnedEncodedMessage;

 public:
  class DecodedMessage;

 private:
  void _InitHeader();
};
template <>
struct ::fidl::WireResponse<::fidl_test_doccomments::Interface::OnEvent> final {
  FIDL_ALIGNDECL
  fidl_message_header_t _hdr;

  WireResponse() { _InitHeader(); }

  static constexpr const fidl_type_t* Type =
      &::fidl::_llcpp_coding_AnyZeroArgMessageTable;
  static constexpr uint32_t MaxNumHandles = 0;
  static constexpr uint32_t PrimarySize = 16;
  static constexpr uint32_t PrimarySizeV1 = 16;
  static constexpr uint32_t MaxOutOfLine = 0;
  static constexpr uint32_t MaxOutOfLineV1 = 0;
  static constexpr bool HasFlexibleEnvelope = false;
  static constexpr bool HasPointer = false;
  static constexpr ::fidl::internal::TransactionalMessageKind MessageKind =
      ::fidl::internal::TransactionalMessageKind::kResponse;

  class UnownedEncodedMessage;
  class OwnedEncodedMessage;

 public:
  class DecodedMessage;

 private:
  void _InitHeader();
};
#ifdef __Fuchsia__

template <>
class ::fidl::WireResult<::fidl_test_doccomments::Interface::Method> final
    : public ::fidl::Result {
 public:
  WireResult(
      ::fidl::UnownedClientEnd<::fidl_test_doccomments::Interface> client,
      ::fidl::WireRequest<::fidl_test_doccomments::Interface::Method>* request);
  explicit WireResult(const ::fidl::Result& result) : ::fidl::Result(result) {}
  WireResult(WireResult&&) = delete;
  WireResult(const WireResult&) = delete;
  WireResult* operator=(WireResult&&) = delete;
  WireResult* operator=(const WireResult&) = delete;
  ~WireResult() = default;

 private:
};
template <>
class ::fidl::WireUnownedResult<::fidl_test_doccomments::Interface::Method>
    final : public ::fidl::Result {
 public:
  explicit WireUnownedResult(
      ::fidl::UnownedClientEnd<::fidl_test_doccomments::Interface> client_end,
      ::fidl::internal::AnyBufferAllocator& allocator,
      ::fidl::WireRequest<::fidl_test_doccomments::Interface::Method>* request);
  explicit WireUnownedResult(const ::fidl::Result& result)
      : ::fidl::Result(result) {}
  WireUnownedResult(WireUnownedResult&&) = delete;
  WireUnownedResult(const WireUnownedResult&) = delete;
  WireUnownedResult* operator=(WireUnownedResult&&) = delete;
  WireUnownedResult* operator=(const WireUnownedResult&) = delete;
  ~WireUnownedResult() = default;
};

// Methods to make a sync FIDL call directly on an unowned channel or a
// const reference to a |fidl::ClientEnd<::fidl_test_doccomments::Interface>|,
// avoiding setting up a client.
template <>
class ::fidl::internal::WireSyncClientImpl<::fidl_test_doccomments::Interface>
    final : public ::fidl::internal::SyncEndpointManagedVeneer<
                ::fidl::internal::WireSyncClientImpl<
                    ::fidl_test_doccomments::Interface>> {
 public:
  /// method comment #1
  ///
  /// method comment #3
  // Allocates 16 bytes of message buffer on the stack. No heap allocation
  // necessary.
  ::fidl::WireResult<::fidl_test_doccomments::Interface::Method> Method() {
    ::fidl::WireRequest<::fidl_test_doccomments::Interface::Method> _request{};
    return ::fidl::WireResult<::fidl_test_doccomments::Interface::Method>(
        _client_end(), &_request);
  }

 private:
  ::fidl::UnownedClientEnd<::fidl_test_doccomments::Interface> _client_end()
      const {
    return ::fidl::UnownedClientEnd<::fidl_test_doccomments::Interface>(
        _channel());
  }
};

template <>
class ::fidl::internal::WireSyncBufferClientImpl<
    ::fidl_test_doccomments::Interface>
    final : public ::fidl::internal::SyncEndpointBufferVeneer<
                ::fidl::internal::WireSyncBufferClientImpl<
                    ::fidl_test_doccomments::Interface>> {
 public:
  /// method comment #1
  ///
  /// method comment #3
  // Caller provides the backing storage for FIDL message via an argument to
  // `.buffer()`.
  ::fidl::WireUnownedResult<::fidl_test_doccomments::Interface::Method>
  Method() {
    ::fidl::WireRequest<::fidl_test_doccomments::Interface::Method> _request{};
    return ::fidl::WireUnownedResult<
        ::fidl_test_doccomments::Interface::Method>(_client_end(), _allocator(),
                                                    &_request);
  }

 private:
  ::fidl::UnownedClientEnd<::fidl_test_doccomments::Interface> _client_end()
      const {
    return ::fidl::UnownedClientEnd<::fidl_test_doccomments::Interface>(
        _channel());
  }
};
template <>
class ::fidl::internal::WireEventHandlerInterface<
    ::fidl_test_doccomments::Interface> {
 public:
  WireEventHandlerInterface() = default;
  virtual ~WireEventHandlerInterface() = default;
  /// event comment #1
  ///
  /// event comment #3
  virtual void OnEvent(
      ::fidl::WireResponse<::fidl_test_doccomments::Interface::OnEvent>*
          event) {}
};

template <>
class ::fidl::WireAsyncEventHandler<::fidl_test_doccomments::Interface>
    : public ::fidl::internal::WireEventHandlerInterface<
          ::fidl_test_doccomments::Interface>,
      public ::fidl::internal::AsyncEventHandler {
 public:
  WireAsyncEventHandler() = default;
};

template <>
class ::fidl::WireSyncEventHandler<::fidl_test_doccomments::Interface>
    : public ::fidl::internal::WireEventHandlerInterface<
          ::fidl_test_doccomments::Interface> {
 public:
  WireSyncEventHandler() = default;

  // Method called when an unknown event is found. This methods gives the status
  // which, in this case, is returned by HandleOneEvent.
  virtual zx_status_t Unknown() = 0;

  // Handle all possible events defined in this protocol.
  // Blocks to consume exactly one message from the channel, then call the
  // corresponding virtual method.
  ::fidl::Result HandleOneEvent(
      ::fidl::UnownedClientEnd<::fidl_test_doccomments::Interface> client_end);
};

template <>
class ::fidl::internal::WireEventDispatcher<::fidl_test_doccomments::Interface>
    final
    : public ::fidl::internal::IncomingEventDispatcher<
          ::fidl::WireAsyncEventHandler<::fidl_test_doccomments::Interface>> {
 public:
  explicit WireEventDispatcher(
      ::fidl::WireAsyncEventHandler<::fidl_test_doccomments::Interface>*
          event_handler)
      : IncomingEventDispatcher(event_handler) {}

 private:
  std::optional<::fidl::UnbindInfo> DispatchEvent(
      ::fidl::IncomingMessage& msg,
      internal::IncomingTransportContext* transport_context) override;
};
template <>
class ::fidl::WireSyncClient<::fidl_test_doccomments::Interface> final
    : public ::fidl::internal::WireSyncClientBase<
          ::fidl_test_doccomments::Interface> {
 public:
  using ::fidl::internal::WireSyncClientBase<
      ::fidl_test_doccomments::Interface>::WireSyncClientBase;
  // Handle all possible events defined in this protocol.
  // Blocks to consume exactly one message from the channel, then call the
  // corresponding virtual method defined in |SyncEventHandler|. The return
  // status of the handler function is folded with any transport-level errors
  // and returned.
  ::fidl::Result HandleOneEvent(
      ::fidl::WireSyncEventHandler<::fidl_test_doccomments::Interface>&
          event_handler) const {
    return event_handler.HandleOneEvent(client_end());
  }
};

// Pure-virtual interface to be implemented by a server.
// This interface uses typed channels (i.e. |fidl::ClientEnd<SomeProtocol>|
// and |fidl::ServerEnd<SomeProtocol>|).
template <>
class ::fidl::WireServer<::fidl_test_doccomments::Interface>
    : public ::fidl::internal::IncomingMessageDispatcher {
 public:
  WireServer() = default;
  virtual ~WireServer() = default;

  // The FIDL protocol type that is implemented by this server.
  using _EnclosingProtocol = ::fidl_test_doccomments::Interface;
  using _Transport = ::fidl::internal::ChannelTransport;

  using MethodCompleter = ::fidl::internal::WireCompleter<
      ::fidl_test_doccomments::Interface::Method>;
  using MethodRequestView = ::fidl::internal::WireRequestView<
      ::fidl_test_doccomments::Interface::Method>;

  /// method comment #1
  ///
  /// method comment #3
  virtual void Method(MethodRequestView request,
                      MethodCompleter::Sync& _completer) = 0;

 private:
  void dispatch_message(
      ::fidl::IncomingMessage&& msg, ::fidl::Transaction* txn,
      internal::IncomingTransportContext* transport_context) final;
};
#endif  // __Fuchsia__

namespace fidl_test_doccomments {

/// service comment #1
///
/// service comment #3
class Service final {
  Service() = default;

 public:
  static constexpr char Name[] = "fidl.test.doccomments.Service";

  // Client protocol for connecting to member protocols of a service instance.
  class ServiceClient final {
    ServiceClient() = delete;

   public:
    ServiceClient(::zx::channel dir,
                  ::fidl::internal::ConnectMemberFunc connect_func)
        : dir_(std::move(dir)), connect_func_(connect_func) {}

    // Connects to the member protocol "interface".
    // Returns a |fidl::ClientEnd<::fidl_test_doccomments::Interface>| on
    // success, which can be used with |fidl::BindSyncClient| to create a
    // synchronous client, or |fidl::WireClient| or |fidl::WireSharedClient| to
    // create a client that supports both asynchronous and synchronous
    // operations.
    //
    // # Errors
    //
    // On failure, returns a |zx::error| with status != ZX_OK.
    // Failures can occur if channel creation failed, or if there was an issue
    // making a |fuchsia.io.Directory/Open| call.
    //
    // Since the call to |Open| is asynchronous, an error sent by the remote end
    // will not result in a failure of this method. Any errors sent by the
    // remote will appear on the |ClientEnd| returned from this method.
    ::zx::status<::fidl::ClientEnd<::fidl_test_doccomments::Interface>>
    connect_interface() {
      auto endpoints =
          ::fidl::CreateEndpoints<::fidl_test_doccomments::Interface>();
      if (endpoints.is_error()) {
        return endpoints.take_error();
      }
      auto connection = connect_func_(::zx::unowned_channel(dir_),
                                      ::fidl::StringView("interface"),
                                      endpoints->server.TakeChannel());
      if (connection.is_error()) {
        return connection.take_error();
      }
      return ::zx::ok(std::move(endpoints->client));
    }

   private:
    ::zx::channel dir_;
    ::fidl::internal::ConnectMemberFunc connect_func_;
  };

  // Facilitates member protocol registration for servers.
  class Handler final {
   public:
    // Constructs a FIDL Service-typed handler. Does not take ownership of
    // |service_handler|.
    explicit Handler(::fidl::ServiceHandlerInterface* service_handler)
        : service_handler_(service_handler) {}

    // Adds member "interface" to the service instance. |handler| will be
    // invoked on connection attempts.
    //
    // # Errors
    //
    // Returns ZX_ERR_ALREADY_EXISTS if the member was already added.
    ::zx::status<> add_interface(::fidl::ServiceHandlerInterface::MemberHandler<
                                 ::fidl_test_doccomments::Interface>
                                     handler) {
      return service_handler_->AddMember("interface", std::move(handler));
    }

   private:
    ::fidl::ServiceHandlerInterface* service_handler_;  // Not owned.
  };
};

}  // namespace fidl_test_doccomments
namespace fidl {

template <>
struct IsFidlType<
    ::fidl::WireRequest<::fidl_test_doccomments::Interface::Method>>
    : public std::true_type {};
template <>
struct IsFidlMessage<
    ::fidl::WireRequest<::fidl_test_doccomments::Interface::Method>>
    : public std::true_type {};
static_assert(
    sizeof(::fidl::WireRequest<::fidl_test_doccomments::Interface::Method>) ==
    ::fidl::WireRequest<
        ::fidl_test_doccomments::Interface::Method>::PrimarySize);

template <>
struct IsFidlType<
    ::fidl::WireResponse<::fidl_test_doccomments::Interface::OnEvent>>
    : public std::true_type {};
template <>
struct IsFidlMessage<
    ::fidl::WireResponse<::fidl_test_doccomments::Interface::OnEvent>>
    : public std::true_type {};
static_assert(
    sizeof(::fidl::WireResponse<::fidl_test_doccomments::Interface::OnEvent>) ==
    ::fidl::WireResponse<
        ::fidl_test_doccomments::Interface::OnEvent>::PrimarySize);

#ifdef __Fuchsia__
}  // namespace fidl
template <>
class ::fidl::internal::WireClientImpl<::fidl_test_doccomments::Interface> final
    : public ::fidl::internal::ClientBase {
 public:
  /// method comment #1
  ///
  /// method comment #3
  //
  // Allocates 16 bytes of message buffer on the stack. No heap allocation
  // necessary.
  ::fidl::Result Method();
  WireClientImpl() = default;
};
namespace fidl {
#endif  // __Fuchsia__

}  // namespace fidl
#ifdef __Fuchsia__
// |EventSender| owns a server endpoint of a channel speaking
// the Interface protocol, and can send events in that protocol.
template <>
class ::fidl::WireEventSender<::fidl_test_doccomments::Interface> {
 public:
  // Constructs an event sender with an invalid channel.
  WireEventSender() = default;

  explicit WireEventSender(
      ::fidl::ServerEnd<::fidl_test_doccomments::Interface> server_end)
      : server_end_(std::move(server_end)) {}

  // The underlying server channel endpoint, which may be replaced at run-time.
  const ::fidl::ServerEnd<::fidl_test_doccomments::Interface>& server_end()
      const {
    return server_end_;
  }
  ::fidl::ServerEnd<::fidl_test_doccomments::Interface>& server_end() {
    return server_end_;
  }

  const ::zx::channel& channel() const { return server_end_.channel(); }
  ::zx::channel& channel() { return server_end_.channel(); }

  // Whether the underlying channel is valid.
  bool is_valid() const { return server_end_.is_valid(); }

  /// event comment #1
  ///
  /// event comment #3
  fidl::Result OnEvent() const;

 private:
  ::fidl::ServerEnd<::fidl_test_doccomments::Interface> server_end_;
};

template <>
class ::fidl::internal::WireWeakEventSender<
    ::fidl_test_doccomments::Interface> {
 public:
  WireWeakEventSender(
      std::weak_ptr<::fidl::internal::AsyncServerBinding>&& binding)
      : inner_(std::move(binding)) {}

  /// event comment #1
  ///
  /// event comment #3
  fidl::Result OnEvent() const;

 private:
  friend ServerBindingRef<::fidl_test_doccomments::Interface,
                          ::fidl::internal::ChannelTransport>;

  ::fidl::internal::WeakEventSenderInner inner_;
};
#endif  // __Fuchsia__
