// WARNING: This file is machine generated by fidlgen.

#include <fidl/fidl.test.requestflexibleenvelope/cpp/wire.h>

#include <memory>

void ::fidl_test_requestflexibleenvelope::wire::StrictFoo::
    SizeAndOffsetAssertionHelper() {
  static_assert(sizeof(StrictFoo) == sizeof(fidl_xunion_t));
  static_assert(offsetof(StrictFoo, ordinal_) == offsetof(fidl_xunion_t, tag));
  static_assert(offsetof(StrictFoo, envelope_) ==
                offsetof(fidl_xunion_t, envelope));
}
auto ::fidl_test_requestflexibleenvelope::wire::FlexibleFoo::which() const
    -> ::fidl_test_requestflexibleenvelope::wire::FlexibleFoo::Tag {
  ZX_ASSERT(!has_invalid_tag());
  switch (ordinal_) {
    case ::fidl_test_requestflexibleenvelope::wire::FlexibleFoo::Ordinal::kS:
    case ::fidl_test_requestflexibleenvelope::wire::FlexibleFoo::Ordinal::kI:
      return static_cast<
          ::fidl_test_requestflexibleenvelope::wire::FlexibleFoo::Tag>(
          ordinal_);
    default:
      return ::fidl_test_requestflexibleenvelope::wire::FlexibleFoo::Tag::
          kUnknown;
  }
}

void ::fidl_test_requestflexibleenvelope::wire::FlexibleFoo::
    SizeAndOffsetAssertionHelper() {
  static_assert(sizeof(FlexibleFoo) == sizeof(fidl_xunion_t));
  static_assert(offsetof(FlexibleFoo, ordinal_) ==
                offsetof(fidl_xunion_t, tag));
  static_assert(offsetof(FlexibleFoo, envelope_) ==
                offsetof(fidl_xunion_t, envelope));
}

namespace fidl_test_requestflexibleenvelope {
[[maybe_unused]] constexpr uint64_t
    kProtocol_RequestStrictResponseFlexible_Ordinal = 4346871690266280218lu;

extern "C" const fidl_type_t
    fidl_test_requestflexibleenvelope_ProtocolRequestStrictResponseFlexibleRequestTable;

extern "C" const fidl_type_t
    fidl_test_requestflexibleenvelope_ProtocolRequestStrictResponseFlexibleResponseTable;

[[maybe_unused]] constexpr uint64_t
    kProtocol_RequestFlexibleResponseStrict_Ordinal = 4374294377437089654lu;

extern "C" const fidl_type_t
    fidl_test_requestflexibleenvelope_ProtocolRequestFlexibleResponseStrictRequestTable;

extern "C" const fidl_type_t
    fidl_test_requestflexibleenvelope_ProtocolRequestFlexibleResponseStrictResponseTable;
#ifdef __Fuchsia__
}  // namespace fidl_test_requestflexibleenvelope
::fidl::WireResult<::fidl_test_requestflexibleenvelope::Protocol::
                       RequestStrictResponseFlexible>::
    WireResult(
        ::fidl::UnownedClientEnd<::fidl_test_requestflexibleenvelope::Protocol>
            _client,
        ::fidl_test_requestflexibleenvelope::wire::StrictFoo s) {
  FIDL_INTERNAL_DISABLE_AUTO_VAR_INIT
  ::fidl::OwnedEncodedMessage<
      ::fidl::WireRequest<::fidl_test_requestflexibleenvelope::Protocol::
                              RequestStrictResponseFlexible>>
      _request(::fidl::internal::AllowUnownedInputRef{}, s);
  auto& _outgoing = _request.GetOutgoingMessage();
  _outgoing
      .Call<::fidl::WireResponse<::fidl_test_requestflexibleenvelope::Protocol::
                                     RequestStrictResponseFlexible>>(
          _client, bytes_.data(), static_cast<uint32_t>(bytes_.size()));
  SetResult(_outgoing);
}

::fidl::WireResult<::fidl_test_requestflexibleenvelope::Protocol::
                       RequestStrictResponseFlexible>::
    WireResult(
        ::fidl::UnownedClientEnd<::fidl_test_requestflexibleenvelope::Protocol>
            _client,
        ::fidl_test_requestflexibleenvelope::wire::StrictFoo s,
        zx_time_t _deadline) {
  FIDL_INTERNAL_DISABLE_AUTO_VAR_INIT
  ::fidl::OwnedEncodedMessage<
      ::fidl::WireRequest<::fidl_test_requestflexibleenvelope::Protocol::
                              RequestStrictResponseFlexible>>
      _request(::fidl::internal::AllowUnownedInputRef{}, s);
  auto& _outgoing = _request.GetOutgoingMessage();
  _outgoing
      .Call<::fidl::WireResponse<::fidl_test_requestflexibleenvelope::Protocol::
                                     RequestStrictResponseFlexible>>(
          _client, bytes_.data(), static_cast<uint32_t>(bytes_.size()),
          _deadline);
  SetResult(_outgoing);
}
namespace fidl_test_requestflexibleenvelope {
#endif  // __Fuchsia__

#ifdef __Fuchsia__
}  // namespace fidl_test_requestflexibleenvelope
::fidl::WireUnownedResult<::fidl_test_requestflexibleenvelope::Protocol::
                              RequestStrictResponseFlexible>::
    WireUnownedResult(
        ::fidl::UnownedClientEnd<::fidl_test_requestflexibleenvelope::Protocol>
            _client,
        uint8_t* _request_bytes, uint32_t _request_byte_capacity,
        ::fidl_test_requestflexibleenvelope::wire::StrictFoo s,
        uint8_t* _response_bytes, uint32_t _response_byte_capacity)
    : bytes_(_response_bytes) {
  ::fidl::UnownedEncodedMessage<
      ::fidl::WireRequest<::fidl_test_requestflexibleenvelope::Protocol::
                              RequestStrictResponseFlexible>>
      _request(_request_bytes, _request_byte_capacity, s);
  auto& _outgoing = _request.GetOutgoingMessage();
  _outgoing
      .Call<::fidl::WireResponse<::fidl_test_requestflexibleenvelope::Protocol::
                                     RequestStrictResponseFlexible>>(
          _client, _response_bytes, _response_byte_capacity);
  ::fidl::Result::operator=(_outgoing);
}
namespace fidl_test_requestflexibleenvelope {
#endif  // __Fuchsia__

#ifdef __Fuchsia__
}  // namespace fidl_test_requestflexibleenvelope
::fidl::WireResult<::fidl_test_requestflexibleenvelope::Protocol::
                       RequestFlexibleResponseStrict>::
    WireResult(
        ::fidl::UnownedClientEnd<::fidl_test_requestflexibleenvelope::Protocol>
            _client,
        ::fidl_test_requestflexibleenvelope::wire::FlexibleFoo s) {
  FIDL_INTERNAL_DISABLE_AUTO_VAR_INIT
  ::fidl::OwnedEncodedMessage<
      ::fidl::WireRequest<::fidl_test_requestflexibleenvelope::Protocol::
                              RequestFlexibleResponseStrict>>
      _request(::fidl::internal::AllowUnownedInputRef{}, s);
  auto& _outgoing = _request.GetOutgoingMessage();
  _outgoing
      .Call<::fidl::WireResponse<::fidl_test_requestflexibleenvelope::Protocol::
                                     RequestFlexibleResponseStrict>>(
          _client, bytes_.data(), static_cast<uint32_t>(bytes_.size()));
  SetResult(_outgoing);
}

::fidl::WireResult<::fidl_test_requestflexibleenvelope::Protocol::
                       RequestFlexibleResponseStrict>::
    WireResult(
        ::fidl::UnownedClientEnd<::fidl_test_requestflexibleenvelope::Protocol>
            _client,
        ::fidl_test_requestflexibleenvelope::wire::FlexibleFoo s,
        zx_time_t _deadline) {
  FIDL_INTERNAL_DISABLE_AUTO_VAR_INIT
  ::fidl::OwnedEncodedMessage<
      ::fidl::WireRequest<::fidl_test_requestflexibleenvelope::Protocol::
                              RequestFlexibleResponseStrict>>
      _request(::fidl::internal::AllowUnownedInputRef{}, s);
  auto& _outgoing = _request.GetOutgoingMessage();
  _outgoing
      .Call<::fidl::WireResponse<::fidl_test_requestflexibleenvelope::Protocol::
                                     RequestFlexibleResponseStrict>>(
          _client, bytes_.data(), static_cast<uint32_t>(bytes_.size()),
          _deadline);
  SetResult(_outgoing);
}
namespace fidl_test_requestflexibleenvelope {
#endif  // __Fuchsia__

#ifdef __Fuchsia__
}  // namespace fidl_test_requestflexibleenvelope
::fidl::WireUnownedResult<::fidl_test_requestflexibleenvelope::Protocol::
                              RequestFlexibleResponseStrict>::
    WireUnownedResult(
        ::fidl::UnownedClientEnd<::fidl_test_requestflexibleenvelope::Protocol>
            _client,
        uint8_t* _request_bytes, uint32_t _request_byte_capacity,
        ::fidl_test_requestflexibleenvelope::wire::FlexibleFoo s,
        uint8_t* _response_bytes, uint32_t _response_byte_capacity)
    : bytes_(_response_bytes) {
  ::fidl::UnownedEncodedMessage<
      ::fidl::WireRequest<::fidl_test_requestflexibleenvelope::Protocol::
                              RequestFlexibleResponseStrict>>
      _request(_request_bytes, _request_byte_capacity, s);
  auto& _outgoing = _request.GetOutgoingMessage();
  _outgoing
      .Call<::fidl::WireResponse<::fidl_test_requestflexibleenvelope::Protocol::
                                     RequestFlexibleResponseStrict>>(
          _client, _response_bytes, _response_byte_capacity);
  ::fidl::Result::operator=(_outgoing);
}
namespace fidl_test_requestflexibleenvelope {
#endif  // __Fuchsia__

}  // namespace fidl_test_requestflexibleenvelope
#ifdef __Fuchsia__

::fidl::WireResponseContext<
    ::fidl_test_requestflexibleenvelope::Protocol::
        RequestStrictResponseFlexible>::WireResponseContext()
    : ::fidl::internal::ResponseContext(
          ::fidl_test_requestflexibleenvelope::
              kProtocol_RequestStrictResponseFlexible_Ordinal) {}

::cpp17::optional<::fidl::UnbindInfo> fidl::WireResponseContext<
    ::fidl_test_requestflexibleenvelope::Protocol::
        RequestStrictResponseFlexible>::OnRawResult(::fidl::IncomingMessage&&
                                                        msg) {
  if (unlikely(!msg.ok())) {
    OnResult(
        ::fidl::WireUnownedResult<::fidl_test_requestflexibleenvelope::
                                      Protocol::RequestStrictResponseFlexible>(
            msg.error()));
    return cpp17::nullopt;
  }
  ::fidl::DecodedMessage<
      ::fidl::WireResponse<::fidl_test_requestflexibleenvelope::Protocol::
                               RequestStrictResponseFlexible>>
      decoded{std::move(msg)};
  ::fidl::Result maybe_error = decoded;
  OnResult(
      ::fidl::WireUnownedResult<::fidl_test_requestflexibleenvelope::Protocol::
                                    RequestStrictResponseFlexible>(
          std::move(decoded)));
  if (unlikely(!maybe_error.ok())) {
    return ::fidl::UnbindInfo(maybe_error);
  }
  return cpp17::nullopt;
}
#endif  // __Fuchsia__

#ifdef __Fuchsia__

::fidl::WireResponseContext<
    ::fidl_test_requestflexibleenvelope::Protocol::
        RequestFlexibleResponseStrict>::WireResponseContext()
    : ::fidl::internal::ResponseContext(
          ::fidl_test_requestflexibleenvelope::
              kProtocol_RequestFlexibleResponseStrict_Ordinal) {}

::cpp17::optional<::fidl::UnbindInfo> fidl::WireResponseContext<
    ::fidl_test_requestflexibleenvelope::Protocol::
        RequestFlexibleResponseStrict>::OnRawResult(::fidl::IncomingMessage&&
                                                        msg) {
  if (unlikely(!msg.ok())) {
    OnResult(
        ::fidl::WireUnownedResult<::fidl_test_requestflexibleenvelope::
                                      Protocol::RequestFlexibleResponseStrict>(
            msg.error()));
    return cpp17::nullopt;
  }
  ::fidl::DecodedMessage<
      ::fidl::WireResponse<::fidl_test_requestflexibleenvelope::Protocol::
                               RequestFlexibleResponseStrict>>
      decoded{std::move(msg)};
  ::fidl::Result maybe_error = decoded;
  OnResult(
      ::fidl::WireUnownedResult<::fidl_test_requestflexibleenvelope::Protocol::
                                    RequestFlexibleResponseStrict>(
          std::move(decoded)));
  if (unlikely(!maybe_error.ok())) {
    return ::fidl::UnbindInfo(maybe_error);
  }
  return cpp17::nullopt;
}
#endif  // __Fuchsia__

#ifdef __Fuchsia__

void fidl::internal::WireClientImpl<
    ::fidl_test_requestflexibleenvelope::Protocol>::
    RequestStrictResponseFlexible(
        ::fidl_test_requestflexibleenvelope::wire::StrictFoo s,
        ::fidl::WireClientCallback<::fidl_test_requestflexibleenvelope::
                                       Protocol::RequestStrictResponseFlexible>
            _cb) {
  using Callback = decltype(_cb);
  class ResponseContext final
      : public ::fidl::WireResponseContext<
            ::fidl_test_requestflexibleenvelope::Protocol::
                RequestStrictResponseFlexible> {
   public:
    ResponseContext(Callback cb) : cb_(std::move(cb)) {}

    void OnResult(::fidl::WireUnownedResult<
                  ::fidl_test_requestflexibleenvelope::Protocol::
                      RequestStrictResponseFlexible>&& result) override {
      cb_(std::move(result));
      delete this;
    }

   private:
    Callback cb_;
  };

  auto* _context = new ResponseContext(std::move(_cb));
  FIDL_INTERNAL_DISABLE_AUTO_VAR_INIT
  ::fidl::WireRequest<::fidl_test_requestflexibleenvelope::Protocol::
                          RequestStrictResponseFlexible>::OwnedEncodedMessage
      _request(::fidl::internal::AllowUnownedInputRef{}, s);
  ::fidl::internal::ClientBase::SendTwoWay(_request.GetOutgoingMessage(),
                                           _context);
}

void fidl::internal::WireClientImpl<
    ::fidl_test_requestflexibleenvelope::Protocol>::
    RequestStrictResponseFlexible(
        ::fidl_test_requestflexibleenvelope::wire::StrictFoo s,
        ::fit::callback<void(
            ::fidl::WireResponse<::fidl_test_requestflexibleenvelope::Protocol::
                                     RequestStrictResponseFlexible>* response)>
            _cb) {
  using Callback = decltype(_cb);
  class ResponseContext final
      : public ::fidl::WireResponseContext<
            ::fidl_test_requestflexibleenvelope::Protocol::
                RequestStrictResponseFlexible> {
   public:
    ResponseContext(Callback cb) : cb_(std::move(cb)) {}

    void OnResult(::fidl::WireUnownedResult<
                  ::fidl_test_requestflexibleenvelope::Protocol::
                      RequestStrictResponseFlexible>&& result) override {
      if (result.ok()) {
        ::fidl::WireResponse<::fidl_test_requestflexibleenvelope::Protocol::
                                 RequestStrictResponseFlexible>* response =
            result.Unwrap();
        cb_(std::move(response));
      }
      delete this;
    }

   private:
    Callback cb_;
  };

  auto* _context = new ResponseContext(std::move(_cb));
  FIDL_INTERNAL_DISABLE_AUTO_VAR_INIT
  ::fidl::WireRequest<::fidl_test_requestflexibleenvelope::Protocol::
                          RequestStrictResponseFlexible>::OwnedEncodedMessage
      _request(::fidl::internal::AllowUnownedInputRef{}, s);
  ::fidl::internal::ClientBase::SendTwoWay(_request.GetOutgoingMessage(),
                                           _context);
}
void fidl::internal::WireClientImpl<
    ::fidl_test_requestflexibleenvelope::Protocol>::
    RequestStrictResponseFlexible(
        ::fidl::BufferSpan _request_buffer,
        ::fidl_test_requestflexibleenvelope::wire::StrictFoo s,
        ::fidl::WireResponseContext<
            ::fidl_test_requestflexibleenvelope::Protocol::
                RequestStrictResponseFlexible>* _context) {
  ::fidl::WireRequest<::fidl_test_requestflexibleenvelope::Protocol::
                          RequestStrictResponseFlexible>::UnownedEncodedMessage
      _request(_request_buffer.data, _request_buffer.capacity, s);
  ::fidl::internal::ClientBase::SendTwoWay(_request.GetOutgoingMessage(),
                                           _context);
}
::fidl::WireResult<::fidl_test_requestflexibleenvelope::Protocol::
                       RequestStrictResponseFlexible>
fidl::internal::WireClientImpl<::fidl_test_requestflexibleenvelope::Protocol>::
    RequestStrictResponseFlexible_Sync(
        ::fidl_test_requestflexibleenvelope::wire::StrictFoo s) {
  if (auto _channel = ::fidl::internal::ClientBase::GetChannelForSyncCall()) {
    return ::fidl::WireResult<::fidl_test_requestflexibleenvelope::Protocol::
                                  RequestStrictResponseFlexible>(
        ::fidl::UnownedClientEnd<::fidl_test_requestflexibleenvelope::Protocol>(
            _channel->handle()),
        s);
  }
  return ::fidl::WireResult<::fidl_test_requestflexibleenvelope::Protocol::
                                RequestStrictResponseFlexible>(
      ::fidl::Result::Unbound());
}
::fidl::WireUnownedResult<::fidl_test_requestflexibleenvelope::Protocol::
                              RequestStrictResponseFlexible>
fidl::internal::WireClientImpl<::fidl_test_requestflexibleenvelope::Protocol>::
    RequestStrictResponseFlexible_Sync(
        ::fidl::BufferSpan _request_buffer,
        ::fidl_test_requestflexibleenvelope::wire::StrictFoo s,
        ::fidl::BufferSpan _response_buffer) {
  if (auto _channel = ::fidl::internal::ClientBase::GetChannelForSyncCall()) {
    return ::fidl::WireUnownedResult<
        ::fidl_test_requestflexibleenvelope::Protocol::
            RequestStrictResponseFlexible>(
        ::fidl::UnownedClientEnd<::fidl_test_requestflexibleenvelope::Protocol>(
            _channel->handle()),
        _request_buffer.data, _request_buffer.capacity, s,
        _response_buffer.data, _response_buffer.capacity);
  }
  return ::fidl::WireUnownedResult<::fidl_test_requestflexibleenvelope::
                                       Protocol::RequestStrictResponseFlexible>(
      ::fidl::Result::Unbound());
}
void fidl::internal::WireClientImpl<
    ::fidl_test_requestflexibleenvelope::Protocol>::
    RequestFlexibleResponseStrict(
        ::fidl_test_requestflexibleenvelope::wire::FlexibleFoo s,
        ::fidl::WireClientCallback<::fidl_test_requestflexibleenvelope::
                                       Protocol::RequestFlexibleResponseStrict>
            _cb) {
  using Callback = decltype(_cb);
  class ResponseContext final
      : public ::fidl::WireResponseContext<
            ::fidl_test_requestflexibleenvelope::Protocol::
                RequestFlexibleResponseStrict> {
   public:
    ResponseContext(Callback cb) : cb_(std::move(cb)) {}

    void OnResult(::fidl::WireUnownedResult<
                  ::fidl_test_requestflexibleenvelope::Protocol::
                      RequestFlexibleResponseStrict>&& result) override {
      cb_(std::move(result));
      delete this;
    }

   private:
    Callback cb_;
  };

  auto* _context = new ResponseContext(std::move(_cb));
  FIDL_INTERNAL_DISABLE_AUTO_VAR_INIT
  ::fidl::WireRequest<::fidl_test_requestflexibleenvelope::Protocol::
                          RequestFlexibleResponseStrict>::OwnedEncodedMessage
      _request(::fidl::internal::AllowUnownedInputRef{}, s);
  ::fidl::internal::ClientBase::SendTwoWay(_request.GetOutgoingMessage(),
                                           _context);
}

void fidl::internal::WireClientImpl<
    ::fidl_test_requestflexibleenvelope::Protocol>::
    RequestFlexibleResponseStrict(
        ::fidl_test_requestflexibleenvelope::wire::FlexibleFoo s,
        ::fit::callback<void(
            ::fidl::WireResponse<::fidl_test_requestflexibleenvelope::Protocol::
                                     RequestFlexibleResponseStrict>* response)>
            _cb) {
  using Callback = decltype(_cb);
  class ResponseContext final
      : public ::fidl::WireResponseContext<
            ::fidl_test_requestflexibleenvelope::Protocol::
                RequestFlexibleResponseStrict> {
   public:
    ResponseContext(Callback cb) : cb_(std::move(cb)) {}

    void OnResult(::fidl::WireUnownedResult<
                  ::fidl_test_requestflexibleenvelope::Protocol::
                      RequestFlexibleResponseStrict>&& result) override {
      if (result.ok()) {
        ::fidl::WireResponse<::fidl_test_requestflexibleenvelope::Protocol::
                                 RequestFlexibleResponseStrict>* response =
            result.Unwrap();
        cb_(std::move(response));
      }
      delete this;
    }

   private:
    Callback cb_;
  };

  auto* _context = new ResponseContext(std::move(_cb));
  FIDL_INTERNAL_DISABLE_AUTO_VAR_INIT
  ::fidl::WireRequest<::fidl_test_requestflexibleenvelope::Protocol::
                          RequestFlexibleResponseStrict>::OwnedEncodedMessage
      _request(::fidl::internal::AllowUnownedInputRef{}, s);
  ::fidl::internal::ClientBase::SendTwoWay(_request.GetOutgoingMessage(),
                                           _context);
}
void fidl::internal::WireClientImpl<
    ::fidl_test_requestflexibleenvelope::Protocol>::
    RequestFlexibleResponseStrict(
        ::fidl::BufferSpan _request_buffer,
        ::fidl_test_requestflexibleenvelope::wire::FlexibleFoo s,
        ::fidl::WireResponseContext<
            ::fidl_test_requestflexibleenvelope::Protocol::
                RequestFlexibleResponseStrict>* _context) {
  ::fidl::WireRequest<::fidl_test_requestflexibleenvelope::Protocol::
                          RequestFlexibleResponseStrict>::UnownedEncodedMessage
      _request(_request_buffer.data, _request_buffer.capacity, s);
  ::fidl::internal::ClientBase::SendTwoWay(_request.GetOutgoingMessage(),
                                           _context);
}
::fidl::WireResult<::fidl_test_requestflexibleenvelope::Protocol::
                       RequestFlexibleResponseStrict>
fidl::internal::WireClientImpl<::fidl_test_requestflexibleenvelope::Protocol>::
    RequestFlexibleResponseStrict_Sync(
        ::fidl_test_requestflexibleenvelope::wire::FlexibleFoo s) {
  if (auto _channel = ::fidl::internal::ClientBase::GetChannelForSyncCall()) {
    return ::fidl::WireResult<::fidl_test_requestflexibleenvelope::Protocol::
                                  RequestFlexibleResponseStrict>(
        ::fidl::UnownedClientEnd<::fidl_test_requestflexibleenvelope::Protocol>(
            _channel->handle()),
        s);
  }
  return ::fidl::WireResult<::fidl_test_requestflexibleenvelope::Protocol::
                                RequestFlexibleResponseStrict>(
      ::fidl::Result::Unbound());
}
::fidl::WireUnownedResult<::fidl_test_requestflexibleenvelope::Protocol::
                              RequestFlexibleResponseStrict>
fidl::internal::WireClientImpl<::fidl_test_requestflexibleenvelope::Protocol>::
    RequestFlexibleResponseStrict_Sync(
        ::fidl::BufferSpan _request_buffer,
        ::fidl_test_requestflexibleenvelope::wire::FlexibleFoo s,
        ::fidl::BufferSpan _response_buffer) {
  if (auto _channel = ::fidl::internal::ClientBase::GetChannelForSyncCall()) {
    return ::fidl::WireUnownedResult<
        ::fidl_test_requestflexibleenvelope::Protocol::
            RequestFlexibleResponseStrict>(
        ::fidl::UnownedClientEnd<::fidl_test_requestflexibleenvelope::Protocol>(
            _channel->handle()),
        _request_buffer.data, _request_buffer.capacity, s,
        _response_buffer.data, _response_buffer.capacity);
  }
  return ::fidl::WireUnownedResult<::fidl_test_requestflexibleenvelope::
                                       Protocol::RequestFlexibleResponseStrict>(
      ::fidl::Result::Unbound());
}

std::optional<::fidl::UnbindInfo>
fidl::internal::WireClientImpl<::fidl_test_requestflexibleenvelope::Protocol>::
    DispatchEvent(fidl::IncomingMessage& msg,
                  ::fidl::internal::AsyncEventHandler* maybe_event_handler) {
  return ::fidl::UnbindInfo::UnknownOrdinal();
}
#endif  // __Fuchsia__

#ifdef __Fuchsia__

::fidl::DispatchResult fidl::internal::WireServerDispatcher<
    ::fidl_test_requestflexibleenvelope::Protocol>::
    TryDispatch(
        ::fidl::WireServer<::fidl_test_requestflexibleenvelope::Protocol>* impl,
        ::fidl::IncomingMessage& msg, ::fidl::Transaction* txn) {
  static const ::fidl::internal::MethodEntry entries[] = {
      {
          ::fidl_test_requestflexibleenvelope::
              kProtocol_RequestStrictResponseFlexible_Ordinal,
          [](void* interface, ::fidl::IncomingMessage&& msg,
             ::fidl::Transaction* txn) {
            ::fidl::DecodedMessage<::fidl::WireRequest<
                ::fidl_test_requestflexibleenvelope::Protocol::
                    RequestStrictResponseFlexible>>
                decoded{std::move(msg)};
            if (unlikely(!decoded.ok())) {
              return decoded.status();
            }
            auto* primary = decoded.PrimaryObject();
            ::fidl::internal::WireCompleter<
                ::fidl_test_requestflexibleenvelope::Protocol::
                    RequestStrictResponseFlexible>::Sync completer(txn);
            reinterpret_cast<::fidl::WireServer<
                ::fidl_test_requestflexibleenvelope::Protocol>*>(interface)
                ->RequestStrictResponseFlexible(primary, completer);
            return ZX_OK;
          },
      },
      {
          ::fidl_test_requestflexibleenvelope::
              kProtocol_RequestFlexibleResponseStrict_Ordinal,
          [](void* interface, ::fidl::IncomingMessage&& msg,
             ::fidl::Transaction* txn) {
            ::fidl::DecodedMessage<::fidl::WireRequest<
                ::fidl_test_requestflexibleenvelope::Protocol::
                    RequestFlexibleResponseStrict>>
                decoded{std::move(msg)};
            if (unlikely(!decoded.ok())) {
              return decoded.status();
            }
            auto* primary = decoded.PrimaryObject();
            ::fidl::internal::WireCompleter<
                ::fidl_test_requestflexibleenvelope::Protocol::
                    RequestFlexibleResponseStrict>::Sync completer(txn);
            reinterpret_cast<::fidl::WireServer<
                ::fidl_test_requestflexibleenvelope::Protocol>*>(interface)
                ->RequestFlexibleResponseStrict(primary, completer);
            return ZX_OK;
          },
      },
  };
  return ::fidl::internal::TryDispatch(
      impl, msg, txn, entries,
      entries + sizeof(entries) / sizeof(::fidl::internal::MethodEntry));
}

::fidl::DispatchResult fidl::internal::WireServerDispatcher<
    ::fidl_test_requestflexibleenvelope::Protocol>::
    Dispatch(
        ::fidl::WireServer<::fidl_test_requestflexibleenvelope::Protocol>* impl,
        ::fidl::IncomingMessage&& msg, ::fidl::Transaction* txn) {
  ::fidl::DispatchResult dispatch_result = TryDispatch(impl, msg, txn);
  if (unlikely(dispatch_result == ::fidl::DispatchResult::kNotFound)) {
    std::move(msg).CloseHandles();
    txn->InternalError(::fidl::UnbindInfo::UnknownOrdinal());
  }
  return dispatch_result;
}
::fidl::DispatchResult fidl::
    WireServer<::fidl_test_requestflexibleenvelope::Protocol>::dispatch_message(
        fidl::IncomingMessage&& msg, ::fidl::Transaction* txn) {
  return ::fidl::internal::WireServerDispatcher<
      ::fidl_test_requestflexibleenvelope::Protocol>::Dispatch(this,
                                                               std::move(msg),
                                                               txn);
}
#endif  // __Fuchsia__

#ifdef __Fuchsia__
::fidl::Result
fidl::internal::WireCompleterBase<::fidl_test_requestflexibleenvelope::
                                      Protocol::RequestStrictResponseFlexible>::
    Reply(::fidl_test_requestflexibleenvelope::wire::FlexibleFoo f) {
  FIDL_INTERNAL_DISABLE_AUTO_VAR_INIT
  ::fidl::OwnedEncodedMessage<
      ::fidl::WireResponse<::fidl_test_requestflexibleenvelope::Protocol::
                               RequestStrictResponseFlexible>>
      _response{::fidl::internal::AllowUnownedInputRef{}, f};
  return ::fidl::internal::WireCompleterBase<
      ::fidl_test_requestflexibleenvelope::Protocol::
          RequestStrictResponseFlexible>::SendReply(&_response
                                                         .GetOutgoingMessage());
}

::fidl::Result
fidl::internal::WireCompleterBase<::fidl_test_requestflexibleenvelope::
                                      Protocol::RequestStrictResponseFlexible>::
    Reply(::fidl::BufferSpan _buffer,
          ::fidl_test_requestflexibleenvelope::wire::FlexibleFoo f) {
  ::fidl::WireResponse<::fidl_test_requestflexibleenvelope::Protocol::
                           RequestStrictResponseFlexible>::UnownedEncodedMessage
      _response(_buffer.data, _buffer.capacity, f);
  return CompleterBase::SendReply(&_response.GetOutgoingMessage());
}
#endif  // __Fuchsia__

#ifdef __Fuchsia__
::fidl::Result
fidl::internal::WireCompleterBase<::fidl_test_requestflexibleenvelope::
                                      Protocol::RequestFlexibleResponseStrict>::
    Reply(::fidl_test_requestflexibleenvelope::wire::StrictFoo f) {
  FIDL_INTERNAL_DISABLE_AUTO_VAR_INIT
  ::fidl::OwnedEncodedMessage<
      ::fidl::WireResponse<::fidl_test_requestflexibleenvelope::Protocol::
                               RequestFlexibleResponseStrict>>
      _response{::fidl::internal::AllowUnownedInputRef{}, f};
  return ::fidl::internal::WireCompleterBase<
      ::fidl_test_requestflexibleenvelope::Protocol::
          RequestFlexibleResponseStrict>::SendReply(&_response
                                                         .GetOutgoingMessage());
}

::fidl::Result
fidl::internal::WireCompleterBase<::fidl_test_requestflexibleenvelope::
                                      Protocol::RequestFlexibleResponseStrict>::
    Reply(::fidl::BufferSpan _buffer,
          ::fidl_test_requestflexibleenvelope::wire::StrictFoo f) {
  ::fidl::WireResponse<::fidl_test_requestflexibleenvelope::Protocol::
                           RequestFlexibleResponseStrict>::UnownedEncodedMessage
      _response(_buffer.data, _buffer.capacity, f);
  return CompleterBase::SendReply(&_response.GetOutgoingMessage());
}
#endif  // __Fuchsia__

void ::fidl::WireRequest<::fidl_test_requestflexibleenvelope::Protocol::
                             RequestStrictResponseFlexible>::_InitHeader() {
  fidl_init_txn_header(&_hdr, 0,
                       ::fidl_test_requestflexibleenvelope::
                           kProtocol_RequestStrictResponseFlexible_Ordinal);
}

void ::fidl::WireResponse<::fidl_test_requestflexibleenvelope::Protocol::
                              RequestStrictResponseFlexible>::_InitHeader() {
  fidl_init_txn_header(&_hdr, 0,
                       ::fidl_test_requestflexibleenvelope::
                           kProtocol_RequestStrictResponseFlexible_Ordinal);
}

void ::fidl::WireRequest<::fidl_test_requestflexibleenvelope::Protocol::
                             RequestFlexibleResponseStrict>::_InitHeader() {
  fidl_init_txn_header(&_hdr, 0,
                       ::fidl_test_requestflexibleenvelope::
                           kProtocol_RequestFlexibleResponseStrict_Ordinal);
}

void ::fidl::WireResponse<::fidl_test_requestflexibleenvelope::Protocol::
                              RequestFlexibleResponseStrict>::_InitHeader() {
  fidl_init_txn_header(&_hdr, 0,
                       ::fidl_test_requestflexibleenvelope::
                           kProtocol_RequestFlexibleResponseStrict_Ordinal);
}

#ifdef __Fuchsia__

#endif  // __Fuchsia__
