// WARNING: This file is machine generated by fidlgen.

#pragma once

#include <lib/fidl/llcpp/array.h>
#include <lib/fidl/llcpp/coding.h>
#include <lib/fidl/llcpp/envelope.h>
#include <lib/fidl/llcpp/message.h>
#include <lib/fidl/llcpp/message_storage.h>
#include <lib/fidl/llcpp/object_view.h>
#include <lib/fidl/llcpp/string_view.h>
#include <lib/fidl/llcpp/traits.h>
#include <lib/fidl/llcpp/wire_types.h>
#include <lib/stdcompat/optional.h>

#include <cinttypes>
#ifdef __Fuchsia__
#include <lib/zx/channel.h>

#endif  // __Fuchsia__

#include <fidl/fidl.test.error/cpp/markers.h>

namespace fidl_test_error {
namespace wire {
struct ExampleFooResponse;

class ExampleFooResult;

extern "C" const fidl_type_t fidl_test_error_Example_foo_ResultTable;

class ExampleFooResult {
 public:
  using Response = fidl_test_error::wire::ExampleFooResponse;

  ExampleFooResult()
      : ordinal_(::fidl_test_error::wire::ExampleFooResult::Ordinal::Invalid),
        envelope_{} {}

  ExampleFooResult(const ExampleFooResult&) = default;
  ExampleFooResult& operator=(const ExampleFooResult&) = default;
  ExampleFooResult(ExampleFooResult&&) = default;
  ExampleFooResult& operator=(ExampleFooResult&&) = default;

  enum class Tag : fidl_xunion_tag_t {
    kResponse = 1,  // 0x1
    kErr = 2,       // 0x2
  };

  bool has_invalid_tag() const {
    return ordinal_ ==
           ::fidl_test_error::wire::ExampleFooResult::Ordinal::Invalid;
  }

  bool is_response() const {
    return ordinal_ ==
           ::fidl_test_error::wire::ExampleFooResult::Ordinal::kResponse;
  }
  static ExampleFooResult WithResponse(
      ::fidl::ObjectView<::fidl_test_error::wire::ExampleFooResponse> val) {
    ExampleFooResult result;
    result.set_response(val);
    return result;
  }

  template <typename... Args>
  static ExampleFooResult WithResponse(::fidl::AnyArena& allocator,
                                       Args&&... args) {
    ExampleFooResult result;
    result.set_response(
        ::fidl::ObjectView<::fidl_test_error::wire::ExampleFooResponse>(
            allocator, std::forward<Args>(args)...));
    return result;
  }

  void set_response(
      ::fidl::ObjectView<::fidl_test_error::wire::ExampleFooResponse> elem) {
    ordinal_ = ::fidl_test_error::wire::ExampleFooResult::Ordinal::kResponse;
    envelope_.As<::fidl_test_error::wire::ExampleFooResponse>().set_data(
        std::move(elem));
  }

  template <typename... Args>
  void set_response(::fidl::AnyArena& allocator, Args&&... args) {
    ordinal_ = ::fidl_test_error::wire::ExampleFooResult::Ordinal::kResponse;
    set_response(
        ::fidl::ObjectView<::fidl_test_error::wire::ExampleFooResponse>(
            allocator, std::forward<Args>(args)...));
  }

  ::fidl_test_error::wire::ExampleFooResponse& mutable_response() {
    ZX_ASSERT(ordinal_ ==
              ::fidl_test_error::wire::ExampleFooResult::Ordinal::kResponse);
    return envelope_.As<::fidl_test_error::wire::ExampleFooResponse>()
        .get_data();
  }
  const ::fidl_test_error::wire::ExampleFooResponse& response() const {
    ZX_ASSERT(ordinal_ ==
              ::fidl_test_error::wire::ExampleFooResult::Ordinal::kResponse);
    return envelope_.As<::fidl_test_error::wire::ExampleFooResponse>()
        .get_data();
  }

  bool is_err() const {
    return ordinal_ == ::fidl_test_error::wire::ExampleFooResult::Ordinal::kErr;
  }
  static ExampleFooResult WithErr(uint32_t val) {
    ExampleFooResult result;
    result.set_err(std::move(val));
    return result;
  }

  void set_err(uint32_t elem) {
    ordinal_ = ::fidl_test_error::wire::ExampleFooResult::Ordinal::kErr;
    envelope_.As<uint32_t>().set_data(std::move(elem));
  }

  uint32_t& mutable_err() {
    ZX_ASSERT(ordinal_ ==
              ::fidl_test_error::wire::ExampleFooResult::Ordinal::kErr);
    return envelope_.As<uint32_t>().get_data();
  }
  const uint32_t& err() const {
    ZX_ASSERT(ordinal_ ==
              ::fidl_test_error::wire::ExampleFooResult::Ordinal::kErr);
    return envelope_.As<uint32_t>().get_data();
  }
  ::fidl_test_error::wire::ExampleFooResult::Tag which() const {
    ZX_ASSERT(!has_invalid_tag());
    return static_cast<::fidl_test_error::wire::ExampleFooResult::Tag>(
        ordinal_);
  }

  static constexpr const fidl_type_t* Type =
      &fidl_test_error_Example_foo_ResultTable;
  static constexpr uint32_t MaxNumHandles = 0;
  static constexpr uint32_t PrimarySize = 16;
  [[maybe_unused]] static constexpr uint32_t MaxOutOfLine = 8;
  static constexpr bool HasPointer = true;

  class UnownedEncodedMessage;
  class OwnedEncodedMessage;
  class DecodedMessage;

 private:
  enum class Ordinal : fidl_xunion_tag_t {
    Invalid = 0,
    kResponse = 1,  // 0x1
    kErr = 2,       // 0x2
  };

  static void SizeAndOffsetAssertionHelper();
  ::fidl_test_error::wire::ExampleFooResult::Ordinal ordinal_;
  FIDL_ALIGNDECL
  ::fidl::UntypedEnvelope envelope_;
};

class ExampleFooResult::UnownedEncodedMessage final {
 public:
  UnownedEncodedMessage(uint8_t* backing_buffer, uint32_t backing_buffer_size,
                        ExampleFooResult* value)
      : UnownedEncodedMessage(::fidl::internal::IovecBufferSize, backing_buffer,
                              backing_buffer_size, value) {}
  UnownedEncodedMessage(uint32_t iovec_capacity, uint8_t* backing_buffer,
                        uint32_t backing_buffer_size, ExampleFooResult* value)
      : message_(::fidl::OutgoingMessage::ConstructorArgs{
            .transport_type = FIDL_TRANSPORT_TYPE_CHANNEL,
            .iovecs = iovecs_,
            .iovec_capacity = iovec_capacity,
            .backing_buffer = backing_buffer,
            .backing_buffer_capacity = backing_buffer_size,
        }) {
    ZX_ASSERT(iovec_capacity <= std::size(iovecs_));
    message_.Encode<ExampleFooResult>(value);
  }
  UnownedEncodedMessage(const UnownedEncodedMessage&) = delete;
  UnownedEncodedMessage(UnownedEncodedMessage&&) = delete;
  UnownedEncodedMessage* operator=(const UnownedEncodedMessage&) = delete;
  UnownedEncodedMessage* operator=(UnownedEncodedMessage&&) = delete;

  zx_status_t status() const { return message_.status(); }
#ifdef __Fuchsia__
  const char* status_string() const { return message_.status_string(); }
#endif  // __Fuchsia__
  bool ok() const { return message_.status() == ZX_OK; }
  std::string FormatDescription() const { return message_.FormatDescription(); }
  const char* lossy_description() const { return message_.lossy_description(); }
  const ::fidl::Result& error() const { return message_.error(); }

  ::fidl::OutgoingMessage& GetOutgoingMessage() { return message_; }

 private:
  ::fidl::internal::IovecBuffer iovecs_;
  ::fidl::OutgoingMessage message_;
};

class ExampleFooResult::OwnedEncodedMessage final {
 public:
  explicit OwnedEncodedMessage(ExampleFooResult* value)
      : message_(1u, backing_buffer_.data(),
                 static_cast<uint32_t>(backing_buffer_.size()), value) {}
  // Construct a message using owned buffers.
  // If |iovec_capacity>1|, then the message in OwnedEncodedMessage may point
  // the input FIDL object, which is not owned by it.
  explicit OwnedEncodedMessage(
      ::fidl::internal::AllowUnownedInputRef allow_unowned,
      ExampleFooResult* value)
      : message_(::fidl::internal::IovecBufferSize, backing_buffer_.data(),
                 static_cast<uint32_t>(backing_buffer_.size()), value) {}
  OwnedEncodedMessage(const OwnedEncodedMessage&) = delete;
  OwnedEncodedMessage(OwnedEncodedMessage&&) = delete;
  OwnedEncodedMessage* operator=(const OwnedEncodedMessage&) = delete;
  OwnedEncodedMessage* operator=(OwnedEncodedMessage&&) = delete;

  zx_status_t status() const { return message_.status(); }
#ifdef __Fuchsia__
  const char* status_string() const { return message_.status_string(); }
#endif  // __Fuchsia__
  bool ok() const { return message_.ok(); }
  std::string FormatDescription() const { return message_.FormatDescription(); }
  const char* lossy_description() const { return message_.lossy_description(); }
  const ::fidl::Result& error() const { return message_.error(); }

  ::fidl::OutgoingMessage& GetOutgoingMessage() {
    return message_.GetOutgoingMessage();
  }

 private:
  ::fidl::internal::InlineMessageBuffer<32> backing_buffer_;
  UnownedEncodedMessage message_;
};

class ExampleFooResult::DecodedMessage final
    : public ::fidl::internal::DecodedMessageBase<ExampleFooResult> {
 public:
  using DecodedMessageBase<ExampleFooResult>::DecodedMessageBase;

  DecodedMessage(
      uint8_t* bytes, uint32_t byte_actual, zx_handle_t* handles = nullptr,
      void* handle_metadata = nullptr, uint32_t handle_actual = 0,
      fidl_transport_type transport_type = FIDL_TRANSPORT_TYPE_CHANNEL)
      : DecodedMessageBase(
            ::fidl::internal::kLLCPPEncodedWireFormatVersion,
            ::fidl::IncomingMessage(
                transport_type, bytes, byte_actual, handles, handle_metadata,
                handle_actual,
                ::fidl::IncomingMessage::kSkipMessageHeaderValidation)) {}

  // Internal constructor for specifying a specific wire format version.
  DecodedMessage(
      ::fidl::internal::WireFormatVersion wire_format_version, uint8_t* bytes,
      uint32_t byte_actual, zx_handle_t* handles = nullptr,
      void* handle_metadata = nullptr, uint32_t handle_actual = 0,
      fidl_transport_type transport_type = FIDL_TRANSPORT_TYPE_CHANNEL)
      : DecodedMessageBase(
            wire_format_version,
            ::fidl::IncomingMessage(
                transport_type, bytes, byte_actual, handles, handle_metadata,
                handle_actual,
                ::fidl::IncomingMessage::kSkipMessageHeaderValidation)) {}

  DecodedMessage(const fidl_incoming_msg_t* c_msg)
      : DecodedMessage(reinterpret_cast<uint8_t*>(c_msg->bytes),
                       c_msg->num_bytes, c_msg->handles, c_msg->handle_metadata,
                       c_msg->num_handles, c_msg->transport_type) {}

  // Internal constructor for specifying a specific wire format version.
  DecodedMessage(::fidl::internal::WireFormatVersion wire_format_version,
                 const fidl_incoming_msg_t* c_msg)
      : DecodedMessage(wire_format_version,
                       reinterpret_cast<uint8_t*>(c_msg->bytes),
                       c_msg->num_bytes, c_msg->handles, c_msg->handle_metadata,
                       c_msg->num_handles, c_msg->transport_type) {}

  ExampleFooResult* PrimaryObject() {
    ZX_DEBUG_ASSERT(ok());
    return reinterpret_cast<ExampleFooResult*>(bytes());
  }

  // Release the ownership of the decoded message. That means that the handles
  // won't be closed When the object is destroyed. After calling this method,
  // the |DecodedMessage| object should not be used anymore.
  void ReleasePrimaryObject() { ResetBytes(); }
};

extern "C" const fidl_type_t fidl_test_error_Example_foo_ResponseTable;

struct ExampleFooResponse {
  static constexpr const fidl_type_t* Type =
      &fidl_test_error_Example_foo_ResponseTable;
  static constexpr uint32_t MaxNumHandles = 0;
  static constexpr uint32_t PrimarySize = 8;
  [[maybe_unused]] static constexpr uint32_t MaxOutOfLine = 0;
  static constexpr bool HasPointer = false;

  int64_t y = {};

  class UnownedEncodedMessage;
  class OwnedEncodedMessage;
  class DecodedMessage;
};

class ExampleFooResponse::UnownedEncodedMessage final {
 public:
  UnownedEncodedMessage(uint8_t* backing_buffer, uint32_t backing_buffer_size,
                        ExampleFooResponse* value)
      : UnownedEncodedMessage(::fidl::internal::IovecBufferSize, backing_buffer,
                              backing_buffer_size, value) {}
  UnownedEncodedMessage(uint32_t iovec_capacity, uint8_t* backing_buffer,
                        uint32_t backing_buffer_size, ExampleFooResponse* value)
      : message_(::fidl::OutgoingMessage::ConstructorArgs{
            .transport_type = FIDL_TRANSPORT_TYPE_CHANNEL,
            .iovecs = iovecs_,
            .iovec_capacity = iovec_capacity,
            .backing_buffer = backing_buffer,
            .backing_buffer_capacity = backing_buffer_size,
        }) {
    ZX_ASSERT(iovec_capacity <= std::size(iovecs_));
    message_.Encode<ExampleFooResponse>(value);
  }
  UnownedEncodedMessage(const UnownedEncodedMessage&) = delete;
  UnownedEncodedMessage(UnownedEncodedMessage&&) = delete;
  UnownedEncodedMessage* operator=(const UnownedEncodedMessage&) = delete;
  UnownedEncodedMessage* operator=(UnownedEncodedMessage&&) = delete;

  zx_status_t status() const { return message_.status(); }
#ifdef __Fuchsia__
  const char* status_string() const { return message_.status_string(); }
#endif  // __Fuchsia__
  bool ok() const { return message_.status() == ZX_OK; }
  std::string FormatDescription() const { return message_.FormatDescription(); }
  const char* lossy_description() const { return message_.lossy_description(); }
  const ::fidl::Result& error() const { return message_.error(); }

  ::fidl::OutgoingMessage& GetOutgoingMessage() { return message_; }

 private:
  ::fidl::internal::IovecBuffer iovecs_;
  ::fidl::OutgoingMessage message_;
};

class ExampleFooResponse::OwnedEncodedMessage final {
 public:
  explicit OwnedEncodedMessage(ExampleFooResponse* value)
      : message_(1u, backing_buffer_.data(),
                 static_cast<uint32_t>(backing_buffer_.size()), value) {}
  // Internal constructor.
  explicit OwnedEncodedMessage(
      ::fidl::internal::AllowUnownedInputRef allow_unowned,
      ExampleFooResponse* value)
      : message_(::fidl::internal::IovecBufferSize, backing_buffer_.data(),
                 static_cast<uint32_t>(backing_buffer_.size()), value) {}
  OwnedEncodedMessage(const OwnedEncodedMessage&) = delete;
  OwnedEncodedMessage(OwnedEncodedMessage&&) = delete;
  OwnedEncodedMessage* operator=(const OwnedEncodedMessage&) = delete;
  OwnedEncodedMessage* operator=(OwnedEncodedMessage&&) = delete;

  zx_status_t status() const { return message_.status(); }
#ifdef __Fuchsia__
  const char* status_string() const { return message_.status_string(); }
#endif  // __Fuchsia__
  bool ok() const { return message_.ok(); }
  std::string FormatDescription() const { return message_.FormatDescription(); }
  const char* lossy_description() const { return message_.lossy_description(); }
  const ::fidl::Result& error() const { return message_.error(); }

  ::fidl::OutgoingMessage& GetOutgoingMessage() {
    return message_.GetOutgoingMessage();
  }

 private:
  ::fidl::internal::InlineMessageBuffer<8> backing_buffer_;
  UnownedEncodedMessage message_;
};

class ExampleFooResponse::DecodedMessage final
    : public ::fidl::internal::DecodedMessageBase<ExampleFooResponse> {
 public:
  using DecodedMessageBase<ExampleFooResponse>::DecodedMessageBase;

  DecodedMessage(
      uint8_t* bytes, uint32_t byte_actual, zx_handle_t* handles = nullptr,
      void* handle_metadata = nullptr, uint32_t handle_actual = 0,
      fidl_transport_type transport_type = FIDL_TRANSPORT_TYPE_CHANNEL)
      : DecodedMessageBase(
            ::fidl::internal::kLLCPPEncodedWireFormatVersion,
            ::fidl::IncomingMessage(
                transport_type, bytes, byte_actual, handles, handle_metadata,
                handle_actual,
                ::fidl::IncomingMessage::kSkipMessageHeaderValidation)) {}

  // Internal constructor for specifying a specific wire format version.
  DecodedMessage(
      ::fidl::internal::WireFormatVersion wire_format_version, uint8_t* bytes,
      uint32_t byte_actual, zx_handle_t* handles = nullptr,
      void* handle_metadata = nullptr, uint32_t handle_actual = 0,
      fidl_transport_type transport_type = FIDL_TRANSPORT_TYPE_CHANNEL)
      : DecodedMessageBase(
            wire_format_version,
            ::fidl::IncomingMessage(
                transport_type, bytes, byte_actual, handles, handle_metadata,
                handle_actual,
                ::fidl::IncomingMessage::kSkipMessageHeaderValidation)) {}

  DecodedMessage(const fidl_incoming_msg_t* c_msg)
      : DecodedMessage(reinterpret_cast<uint8_t*>(c_msg->bytes),
                       c_msg->num_bytes, c_msg->handles, c_msg->handle_metadata,
                       c_msg->num_handles, c_msg->transport_type) {}

  // Internal constructor for specifying a specific wire format version.
  DecodedMessage(::fidl::internal::WireFormatVersion wire_format_version,
                 const fidl_incoming_msg_t* c_msg)
      : DecodedMessage(wire_format_version,
                       reinterpret_cast<uint8_t*>(c_msg->bytes),
                       c_msg->num_bytes, c_msg->handles, c_msg->handle_metadata,
                       c_msg->num_handles, c_msg->transport_type) {}

  ExampleFooResponse* PrimaryObject() {
    ZX_DEBUG_ASSERT(ok());
    return reinterpret_cast<ExampleFooResponse*>(bytes());
  }

  // Release the ownership of the decoded message. That means that the handles
  // won't be closed When the object is destroyed. After calling this method,
  // the |DecodedMessage| object should not be used anymore.
  void ReleasePrimaryObject() { ResetBytes(); }
};

}  // namespace wire
}  // namespace fidl_test_error
namespace fidl {

template <>
struct IsFidlType<::fidl_test_error::wire::ExampleFooResponse>
    : public std::true_type {};
template <>
struct IsStruct<::fidl_test_error::wire::ExampleFooResponse>
    : public std::true_type {};
static_assert(
    std::is_standard_layout_v<::fidl_test_error::wire::ExampleFooResponse>);
static_assert(offsetof(::fidl_test_error::wire::ExampleFooResponse, y) == 0);
static_assert(sizeof(::fidl_test_error::wire::ExampleFooResponse) ==
              ::fidl_test_error::wire::ExampleFooResponse::PrimarySize);

template <>
struct IsFidlType<::fidl_test_error::wire::ExampleFooResult>
    : public std::true_type {};
template <>
struct IsUnion<::fidl_test_error::wire::ExampleFooResult>
    : public std::true_type {};
static_assert(
    std::is_standard_layout_v<::fidl_test_error::wire::ExampleFooResult>);

}  // namespace fidl
