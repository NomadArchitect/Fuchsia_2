// WARNING: This file is machine generated by fidlgen.

#pragma once

#include <fidl/fidl.test.inheritancewithrecursivedecl/cpp/markers.h>
#include <fidl/fidl.test.inheritancewithrecursivedecl/cpp/wire_types.h>
#include <lib/fidl/llcpp/wire_messaging.h>

#ifdef __Fuchsia__

#include <lib/fidl/llcpp/client.h>
#include <lib/fidl/llcpp/connect_service.h>
#include <lib/fidl/llcpp/server.h>
#include <lib/fidl/llcpp/service_handler_interface.h>
#include <lib/fidl/llcpp/sync_call.h>

#endif  // __Fuchsia__

namespace fidl_test_inheritancewithrecursivedecl {
class Parent;

class Child;

__LOCAL extern "C" const fidl_type_t
    fidl_test_inheritancewithrecursivedecl_ParentFirstRequestMessageTable;

__LOCAL extern "C" const fidl_type_t
    fidl_test_inheritancewithrecursivedecl_ParentFirstResponseMessageTable;

}  // namespace fidl_test_inheritancewithrecursivedecl
#ifdef __Fuchsia__

template <>
struct ::fidl::internal::ProtocolDetails<
    ::fidl_test_inheritancewithrecursivedecl::Parent> {};
#endif  // __Fuchsia__

#ifdef __Fuchsia__

template <>
struct ::fidl::internal::WireServerDispatcher<
    ::fidl_test_inheritancewithrecursivedecl::Parent>
    final {
  WireServerDispatcher() = delete;
  static ::fidl::DispatchResult TryDispatch(
      ::fidl::WireServer<::fidl_test_inheritancewithrecursivedecl::Parent>*
          impl,
      ::fidl::IncomingMessage& msg, ::fidl::Transaction* txn);
  static void Dispatch(
      ::fidl::WireServer<::fidl_test_inheritancewithrecursivedecl::Parent>*
          impl,
      ::fidl::IncomingMessage&& msg, ::fidl::Transaction* txn);

 private:
  static const ::fidl::internal::MethodEntry entries_[];
  static const ::fidl::internal::MethodEntry* entries_end_;
};
#endif  // __Fuchsia__

#ifdef __Fuchsia__

template <>
struct ::fidl::WireRequest<
    ::fidl_test_inheritancewithrecursivedecl::Parent::First>
    final {
  FIDL_ALIGNDECL
  fidl_message_header_t _hdr;
  ::fidl::ServerEnd<::fidl_test_inheritancewithrecursivedecl::Parent> request;

  explicit WireRequest(
      ::fidl::ServerEnd<::fidl_test_inheritancewithrecursivedecl::Parent>&&
          request)
      : request(std::move(request)) {
    _InitHeader();
  }
  WireRequest() { _InitHeader(); }

  static constexpr const fidl_type_t* Type =
      &::fidl_test_inheritancewithrecursivedecl::
          fidl_test_inheritancewithrecursivedecl_ParentFirstRequestMessageTable;
  static constexpr uint32_t MaxNumHandles = 1;
  static constexpr uint32_t PrimarySize = 24;
  static constexpr uint32_t PrimarySizeV1 = 24;
  static constexpr uint32_t MaxOutOfLine = 0;
  static constexpr uint32_t MaxOutOfLineV1 = 0;
  static constexpr bool HasFlexibleEnvelope = false;
  static constexpr bool HasPointer = false;
  static constexpr ::fidl::internal::TransactionalMessageKind MessageKind =
      ::fidl::internal::TransactionalMessageKind::kRequest;
  void _CloseHandles();

  class UnownedEncodedMessage;
  class OwnedEncodedMessage;

 public:
  class DecodedMessage;

 private:
  void _InitHeader();
};
#endif  // __Fuchsia__

#ifdef __Fuchsia__

template <>
class ::fidl::WireResult<
    ::fidl_test_inheritancewithrecursivedecl::Parent::First>
    final : public ::fidl::Result {
 public:
  WireResult(
      ::fidl::UnownedClientEnd<::fidl_test_inheritancewithrecursivedecl::Parent>
          client,
      ::fidl::WireRequest<
          ::fidl_test_inheritancewithrecursivedecl::Parent::First>* request);
  explicit WireResult(const ::fidl::Result& result) : ::fidl::Result(result) {}
  WireResult(WireResult&&) = delete;
  WireResult(const WireResult&) = delete;
  WireResult* operator=(WireResult&&) = delete;
  WireResult* operator=(const WireResult&) = delete;
  ~WireResult() = default;

 private:
};
template <>
class ::fidl::WireUnownedResult<
    ::fidl_test_inheritancewithrecursivedecl::Parent::First>
    final : public ::fidl::Result {
 public:
  explicit WireUnownedResult(
      ::fidl::UnownedClientEnd<::fidl_test_inheritancewithrecursivedecl::Parent>
          client_end,
      ::fidl::internal::AnyBufferAllocator& allocator,
      ::fidl::WireRequest<
          ::fidl_test_inheritancewithrecursivedecl::Parent::First>* request);
  explicit WireUnownedResult(const ::fidl::Result& result)
      : ::fidl::Result(result) {}
  WireUnownedResult(WireUnownedResult&&) = delete;
  WireUnownedResult(const WireUnownedResult&) = delete;
  WireUnownedResult* operator=(WireUnownedResult&&) = delete;
  WireUnownedResult* operator=(const WireUnownedResult&) = delete;
  ~WireUnownedResult() = default;
};

// Methods to make a sync FIDL call directly on an unowned channel or a
// const reference to a
// |fidl::ClientEnd<::fidl_test_inheritancewithrecursivedecl::Parent>|, avoiding
// setting up a client.
template <>
class ::fidl::internal::WireSyncClientImpl<
    ::fidl_test_inheritancewithrecursivedecl::Parent>
    final : public ::fidl::internal::SyncEndpointManagedVeneer<
                ::fidl::internal::WireSyncClientImpl<
                    ::fidl_test_inheritancewithrecursivedecl::Parent>> {
 public:
  // Allocates 24 bytes of message buffer on the stack. No heap allocation
  // necessary.
  ::fidl::WireResult<::fidl_test_inheritancewithrecursivedecl::Parent::First>
  First(::fidl::ServerEnd<::fidl_test_inheritancewithrecursivedecl::Parent>&&
            request) {
    ::fidl::WireRequest<::fidl_test_inheritancewithrecursivedecl::Parent::First>
        _request{std::move(request)};
    return ::fidl::WireResult<
        ::fidl_test_inheritancewithrecursivedecl::Parent::First>(_client_end(),
                                                                 &_request);
  }

 private:
  ::fidl::UnownedClientEnd<::fidl_test_inheritancewithrecursivedecl::Parent>
  _client_end() const {
    return ::fidl::UnownedClientEnd<
        ::fidl_test_inheritancewithrecursivedecl::Parent>(_channel());
  }
};

template <>
class ::fidl::internal::WireSyncBufferClientImpl<
    ::fidl_test_inheritancewithrecursivedecl::Parent>
    final : public ::fidl::internal::SyncEndpointBufferVeneer<
                ::fidl::internal::WireSyncBufferClientImpl<
                    ::fidl_test_inheritancewithrecursivedecl::Parent>> {
 public:
  // Caller provides the backing storage for FIDL message via an argument to
  // `.buffer()`.
  ::fidl::WireUnownedResult<
      ::fidl_test_inheritancewithrecursivedecl::Parent::First>
  First(::fidl::ServerEnd<::fidl_test_inheritancewithrecursivedecl::Parent>&&
            request) {
    ::fidl::WireRequest<::fidl_test_inheritancewithrecursivedecl::Parent::First>
        _request{std::move(request)};
    return ::fidl::WireUnownedResult<
        ::fidl_test_inheritancewithrecursivedecl::Parent::First>(
        _client_end(), _allocator(), &_request);
  }

 private:
  ::fidl::UnownedClientEnd<::fidl_test_inheritancewithrecursivedecl::Parent>
  _client_end() const {
    return ::fidl::UnownedClientEnd<
        ::fidl_test_inheritancewithrecursivedecl::Parent>(_channel());
  }
};
template <>
class ::fidl::internal::WireEventHandlerInterface<
    ::fidl_test_inheritancewithrecursivedecl::Parent> {
 public:
  WireEventHandlerInterface() = default;
  virtual ~WireEventHandlerInterface() = default;
};

template <>
class ::fidl::WireAsyncEventHandler<
    ::fidl_test_inheritancewithrecursivedecl::Parent>
    : public ::fidl::internal::WireEventHandlerInterface<
          ::fidl_test_inheritancewithrecursivedecl::Parent>,
      public ::fidl::internal::AsyncEventHandler {
 public:
  WireAsyncEventHandler() = default;
};

template <>
class ::fidl::WireSyncEventHandler<
    ::fidl_test_inheritancewithrecursivedecl::Parent>
    : public ::fidl::internal::WireEventHandlerInterface<
          ::fidl_test_inheritancewithrecursivedecl::Parent> {
 public:
  WireSyncEventHandler() = default;

  // Method called when an unknown event is found. This methods gives the status
  // which, in this case, is returned by HandleOneEvent.
  virtual zx_status_t Unknown() = 0;

  // Handle all possible events defined in this protocol.
  // Blocks to consume exactly one message from the channel, then call the
  // corresponding virtual method.
  ::fidl::Result HandleOneEvent(
      ::fidl::UnownedClientEnd<::fidl_test_inheritancewithrecursivedecl::Parent>
          client_end);
};
template <>
class ::fidl::WireSyncClient<::fidl_test_inheritancewithrecursivedecl::Parent>
    final : public ::fidl::internal::WireSyncClientBase<
                ::fidl_test_inheritancewithrecursivedecl::Parent> {
 public:
  using ::fidl::internal::WireSyncClientBase<
      ::fidl_test_inheritancewithrecursivedecl::Parent>::WireSyncClientBase;
};

// Pure-virtual interface to be implemented by a server.
// This interface uses typed channels (i.e. |fidl::ClientEnd<SomeProtocol>|
// and |fidl::ServerEnd<SomeProtocol>|).
template <>
class ::fidl::WireServer<::fidl_test_inheritancewithrecursivedecl::Parent>
    : public ::fidl::internal::IncomingMessageDispatcher {
 public:
  WireServer() = default;
  virtual ~WireServer() = default;

  // The FIDL protocol type that is implemented by this server.
  using _EnclosingProtocol = ::fidl_test_inheritancewithrecursivedecl::Parent;
  using _Transport = ::fidl::internal::ChannelTransport;

  using FirstCompleter = ::fidl::internal::WireCompleter<
      ::fidl_test_inheritancewithrecursivedecl::Parent::First>;
  using FirstRequestView = ::fidl::internal::WireRequestView<
      ::fidl_test_inheritancewithrecursivedecl::Parent::First>;

  virtual void First(FirstRequestView request,
                     FirstCompleter::Sync& _completer) = 0;

 private:
  void dispatch_message(
      ::fidl::IncomingMessage&& msg, ::fidl::Transaction* txn,
      internal::IncomingTransportContext* transport_context) final;
};
#endif  // __Fuchsia__

namespace fidl_test_inheritancewithrecursivedecl {
__LOCAL extern "C" const fidl_type_t
    fidl_test_inheritancewithrecursivedecl_ChildFirstRequestMessageTable;

__LOCAL extern "C" const fidl_type_t
    fidl_test_inheritancewithrecursivedecl_ChildFirstResponseMessageTable;

__LOCAL extern "C" const fidl_type_t
    fidl_test_inheritancewithrecursivedecl_ChildSecondRequestMessageTable;

__LOCAL extern "C" const fidl_type_t
    fidl_test_inheritancewithrecursivedecl_ChildSecondResponseMessageTable;

}  // namespace fidl_test_inheritancewithrecursivedecl
#ifdef __Fuchsia__

template <>
struct ::fidl::internal::ProtocolDetails<
    ::fidl_test_inheritancewithrecursivedecl::Child> {};
#endif  // __Fuchsia__

#ifdef __Fuchsia__

template <>
struct ::fidl::internal::WireServerDispatcher<
    ::fidl_test_inheritancewithrecursivedecl::Child>
    final {
  WireServerDispatcher() = delete;
  static ::fidl::DispatchResult TryDispatch(
      ::fidl::WireServer<::fidl_test_inheritancewithrecursivedecl::Child>* impl,
      ::fidl::IncomingMessage& msg, ::fidl::Transaction* txn);
  static void Dispatch(
      ::fidl::WireServer<::fidl_test_inheritancewithrecursivedecl::Child>* impl,
      ::fidl::IncomingMessage&& msg, ::fidl::Transaction* txn);

 private:
  static const ::fidl::internal::MethodEntry entries_[];
  static const ::fidl::internal::MethodEntry* entries_end_;
};
#endif  // __Fuchsia__

#ifdef __Fuchsia__

template <>
struct ::fidl::WireRequest<
    ::fidl_test_inheritancewithrecursivedecl::Child::First>
    final {
  FIDL_ALIGNDECL
  fidl_message_header_t _hdr;
  ::fidl::ServerEnd<::fidl_test_inheritancewithrecursivedecl::Parent> request;

  explicit WireRequest(
      ::fidl::ServerEnd<::fidl_test_inheritancewithrecursivedecl::Parent>&&
          request)
      : request(std::move(request)) {
    _InitHeader();
  }
  WireRequest() { _InitHeader(); }

  static constexpr const fidl_type_t* Type =
      &::fidl_test_inheritancewithrecursivedecl::
          fidl_test_inheritancewithrecursivedecl_ChildFirstRequestMessageTable;
  static constexpr uint32_t MaxNumHandles = 1;
  static constexpr uint32_t PrimarySize = 24;
  static constexpr uint32_t PrimarySizeV1 = 24;
  static constexpr uint32_t MaxOutOfLine = 0;
  static constexpr uint32_t MaxOutOfLineV1 = 0;
  static constexpr bool HasFlexibleEnvelope = false;
  static constexpr bool HasPointer = false;
  static constexpr ::fidl::internal::TransactionalMessageKind MessageKind =
      ::fidl::internal::TransactionalMessageKind::kRequest;
  void _CloseHandles();

  class UnownedEncodedMessage;
  class OwnedEncodedMessage;

 public:
  class DecodedMessage;

 private:
  void _InitHeader();
};
#endif  // __Fuchsia__

#ifdef __Fuchsia__

template <>
struct ::fidl::WireRequest<
    ::fidl_test_inheritancewithrecursivedecl::Child::Second>
    final {
  FIDL_ALIGNDECL
  fidl_message_header_t _hdr;
  ::fidl::ServerEnd<::fidl_test_inheritancewithrecursivedecl::Parent> request;

  explicit WireRequest(
      ::fidl::ServerEnd<::fidl_test_inheritancewithrecursivedecl::Parent>&&
          request)
      : request(std::move(request)) {
    _InitHeader();
  }
  WireRequest() { _InitHeader(); }

  static constexpr const fidl_type_t* Type =
      &::fidl_test_inheritancewithrecursivedecl::
          fidl_test_inheritancewithrecursivedecl_ChildSecondRequestMessageTable;
  static constexpr uint32_t MaxNumHandles = 1;
  static constexpr uint32_t PrimarySize = 24;
  static constexpr uint32_t PrimarySizeV1 = 24;
  static constexpr uint32_t MaxOutOfLine = 0;
  static constexpr uint32_t MaxOutOfLineV1 = 0;
  static constexpr bool HasFlexibleEnvelope = false;
  static constexpr bool HasPointer = false;
  static constexpr ::fidl::internal::TransactionalMessageKind MessageKind =
      ::fidl::internal::TransactionalMessageKind::kRequest;
  void _CloseHandles();

  class UnownedEncodedMessage;
  class OwnedEncodedMessage;

 public:
  class DecodedMessage;

 private:
  void _InitHeader();
};
#endif  // __Fuchsia__

#ifdef __Fuchsia__

template <>
class ::fidl::WireResult<::fidl_test_inheritancewithrecursivedecl::Child::First>
    final : public ::fidl::Result {
 public:
  WireResult(
      ::fidl::UnownedClientEnd<::fidl_test_inheritancewithrecursivedecl::Child>
          client,
      ::fidl::WireRequest<
          ::fidl_test_inheritancewithrecursivedecl::Child::First>* request);
  explicit WireResult(const ::fidl::Result& result) : ::fidl::Result(result) {}
  WireResult(WireResult&&) = delete;
  WireResult(const WireResult&) = delete;
  WireResult* operator=(WireResult&&) = delete;
  WireResult* operator=(const WireResult&) = delete;
  ~WireResult() = default;

 private:
};
template <>
class ::fidl::WireUnownedResult<
    ::fidl_test_inheritancewithrecursivedecl::Child::First>
    final : public ::fidl::Result {
 public:
  explicit WireUnownedResult(
      ::fidl::UnownedClientEnd<::fidl_test_inheritancewithrecursivedecl::Child>
          client_end,
      ::fidl::internal::AnyBufferAllocator& allocator,
      ::fidl::WireRequest<
          ::fidl_test_inheritancewithrecursivedecl::Child::First>* request);
  explicit WireUnownedResult(const ::fidl::Result& result)
      : ::fidl::Result(result) {}
  WireUnownedResult(WireUnownedResult&&) = delete;
  WireUnownedResult(const WireUnownedResult&) = delete;
  WireUnownedResult* operator=(WireUnownedResult&&) = delete;
  WireUnownedResult* operator=(const WireUnownedResult&) = delete;
  ~WireUnownedResult() = default;
};
template <>
class ::fidl::WireResult<
    ::fidl_test_inheritancewithrecursivedecl::Child::Second>
    final : public ::fidl::Result {
 public:
  WireResult(
      ::fidl::UnownedClientEnd<::fidl_test_inheritancewithrecursivedecl::Child>
          client,
      ::fidl::WireRequest<
          ::fidl_test_inheritancewithrecursivedecl::Child::Second>* request);
  explicit WireResult(const ::fidl::Result& result) : ::fidl::Result(result) {}
  WireResult(WireResult&&) = delete;
  WireResult(const WireResult&) = delete;
  WireResult* operator=(WireResult&&) = delete;
  WireResult* operator=(const WireResult&) = delete;
  ~WireResult() = default;

 private:
};
template <>
class ::fidl::WireUnownedResult<
    ::fidl_test_inheritancewithrecursivedecl::Child::Second>
    final : public ::fidl::Result {
 public:
  explicit WireUnownedResult(
      ::fidl::UnownedClientEnd<::fidl_test_inheritancewithrecursivedecl::Child>
          client_end,
      ::fidl::internal::AnyBufferAllocator& allocator,
      ::fidl::WireRequest<
          ::fidl_test_inheritancewithrecursivedecl::Child::Second>* request);
  explicit WireUnownedResult(const ::fidl::Result& result)
      : ::fidl::Result(result) {}
  WireUnownedResult(WireUnownedResult&&) = delete;
  WireUnownedResult(const WireUnownedResult&) = delete;
  WireUnownedResult* operator=(WireUnownedResult&&) = delete;
  WireUnownedResult* operator=(const WireUnownedResult&) = delete;
  ~WireUnownedResult() = default;
};

// Methods to make a sync FIDL call directly on an unowned channel or a
// const reference to a
// |fidl::ClientEnd<::fidl_test_inheritancewithrecursivedecl::Child>|, avoiding
// setting up a client.
template <>
class ::fidl::internal::WireSyncClientImpl<
    ::fidl_test_inheritancewithrecursivedecl::Child>
    final : public ::fidl::internal::SyncEndpointManagedVeneer<
                ::fidl::internal::WireSyncClientImpl<
                    ::fidl_test_inheritancewithrecursivedecl::Child>> {
 public:
  // Allocates 24 bytes of message buffer on the stack. No heap allocation
  // necessary.
  ::fidl::WireResult<::fidl_test_inheritancewithrecursivedecl::Child::First>
  First(::fidl::ServerEnd<::fidl_test_inheritancewithrecursivedecl::Parent>&&
            request) {
    ::fidl::WireRequest<::fidl_test_inheritancewithrecursivedecl::Child::First>
        _request{std::move(request)};
    return ::fidl::WireResult<
        ::fidl_test_inheritancewithrecursivedecl::Child::First>(_client_end(),
                                                                &_request);
  }

  // Allocates 24 bytes of message buffer on the stack. No heap allocation
  // necessary.
  ::fidl::WireResult<::fidl_test_inheritancewithrecursivedecl::Child::Second>
  Second(::fidl::ServerEnd<::fidl_test_inheritancewithrecursivedecl::Parent>&&
             request) {
    ::fidl::WireRequest<::fidl_test_inheritancewithrecursivedecl::Child::Second>
        _request{std::move(request)};
    return ::fidl::WireResult<
        ::fidl_test_inheritancewithrecursivedecl::Child::Second>(_client_end(),
                                                                 &_request);
  }

 private:
  ::fidl::UnownedClientEnd<::fidl_test_inheritancewithrecursivedecl::Child>
  _client_end() const {
    return ::fidl::UnownedClientEnd<
        ::fidl_test_inheritancewithrecursivedecl::Child>(_channel());
  }
};

template <>
class ::fidl::internal::WireSyncBufferClientImpl<
    ::fidl_test_inheritancewithrecursivedecl::Child>
    final : public ::fidl::internal::SyncEndpointBufferVeneer<
                ::fidl::internal::WireSyncBufferClientImpl<
                    ::fidl_test_inheritancewithrecursivedecl::Child>> {
 public:
  // Caller provides the backing storage for FIDL message via an argument to
  // `.buffer()`.
  ::fidl::WireUnownedResult<
      ::fidl_test_inheritancewithrecursivedecl::Child::First>
  First(::fidl::ServerEnd<::fidl_test_inheritancewithrecursivedecl::Parent>&&
            request) {
    ::fidl::WireRequest<::fidl_test_inheritancewithrecursivedecl::Child::First>
        _request{std::move(request)};
    return ::fidl::WireUnownedResult<
        ::fidl_test_inheritancewithrecursivedecl::Child::First>(
        _client_end(), _allocator(), &_request);
  }

  // Caller provides the backing storage for FIDL message via an argument to
  // `.buffer()`.
  ::fidl::WireUnownedResult<
      ::fidl_test_inheritancewithrecursivedecl::Child::Second>
  Second(::fidl::ServerEnd<::fidl_test_inheritancewithrecursivedecl::Parent>&&
             request) {
    ::fidl::WireRequest<::fidl_test_inheritancewithrecursivedecl::Child::Second>
        _request{std::move(request)};
    return ::fidl::WireUnownedResult<
        ::fidl_test_inheritancewithrecursivedecl::Child::Second>(
        _client_end(), _allocator(), &_request);
  }

 private:
  ::fidl::UnownedClientEnd<::fidl_test_inheritancewithrecursivedecl::Child>
  _client_end() const {
    return ::fidl::UnownedClientEnd<
        ::fidl_test_inheritancewithrecursivedecl::Child>(_channel());
  }
};
template <>
class ::fidl::internal::WireEventHandlerInterface<
    ::fidl_test_inheritancewithrecursivedecl::Child> {
 public:
  WireEventHandlerInterface() = default;
  virtual ~WireEventHandlerInterface() = default;
};

template <>
class ::fidl::WireAsyncEventHandler<
    ::fidl_test_inheritancewithrecursivedecl::Child>
    : public ::fidl::internal::WireEventHandlerInterface<
          ::fidl_test_inheritancewithrecursivedecl::Child>,
      public ::fidl::internal::AsyncEventHandler {
 public:
  WireAsyncEventHandler() = default;
};

template <>
class ::fidl::WireSyncEventHandler<
    ::fidl_test_inheritancewithrecursivedecl::Child>
    : public ::fidl::internal::WireEventHandlerInterface<
          ::fidl_test_inheritancewithrecursivedecl::Child> {
 public:
  WireSyncEventHandler() = default;

  // Method called when an unknown event is found. This methods gives the status
  // which, in this case, is returned by HandleOneEvent.
  virtual zx_status_t Unknown() = 0;

  // Handle all possible events defined in this protocol.
  // Blocks to consume exactly one message from the channel, then call the
  // corresponding virtual method.
  ::fidl::Result HandleOneEvent(
      ::fidl::UnownedClientEnd<::fidl_test_inheritancewithrecursivedecl::Child>
          client_end);
};
template <>
class ::fidl::WireSyncClient<::fidl_test_inheritancewithrecursivedecl::Child>
    final : public ::fidl::internal::WireSyncClientBase<
                ::fidl_test_inheritancewithrecursivedecl::Child> {
 public:
  using ::fidl::internal::WireSyncClientBase<
      ::fidl_test_inheritancewithrecursivedecl::Child>::WireSyncClientBase;
};

// Pure-virtual interface to be implemented by a server.
// This interface uses typed channels (i.e. |fidl::ClientEnd<SomeProtocol>|
// and |fidl::ServerEnd<SomeProtocol>|).
template <>
class ::fidl::WireServer<::fidl_test_inheritancewithrecursivedecl::Child>
    : public ::fidl::internal::IncomingMessageDispatcher {
 public:
  WireServer() = default;
  virtual ~WireServer() = default;

  // The FIDL protocol type that is implemented by this server.
  using _EnclosingProtocol = ::fidl_test_inheritancewithrecursivedecl::Child;
  using _Transport = ::fidl::internal::ChannelTransport;

  using FirstCompleter = ::fidl::internal::WireCompleter<
      ::fidl_test_inheritancewithrecursivedecl::Child::First>;
  using FirstRequestView = ::fidl::internal::WireRequestView<
      ::fidl_test_inheritancewithrecursivedecl::Child::First>;

  virtual void First(FirstRequestView request,
                     FirstCompleter::Sync& _completer) = 0;

  using SecondCompleter = ::fidl::internal::WireCompleter<
      ::fidl_test_inheritancewithrecursivedecl::Child::Second>;
  using SecondRequestView = ::fidl::internal::WireRequestView<
      ::fidl_test_inheritancewithrecursivedecl::Child::Second>;

  virtual void Second(SecondRequestView request,
                      SecondCompleter::Sync& _completer) = 0;

 private:
  void dispatch_message(
      ::fidl::IncomingMessage&& msg, ::fidl::Transaction* txn,
      internal::IncomingTransportContext* transport_context) final;
};
#endif  // __Fuchsia__

namespace fidl {

template <>
struct IsFidlType<::fidl::WireRequest<
    ::fidl_test_inheritancewithrecursivedecl::Parent::First>>
    : public std::true_type {};
template <>
struct IsFidlMessage<::fidl::WireRequest<
    ::fidl_test_inheritancewithrecursivedecl::Parent::First>>
    : public std::true_type {};
#ifdef __Fuchsia__
template <>
struct IsResource<::fidl::WireRequest<
    ::fidl_test_inheritancewithrecursivedecl::Parent::First>>
    : public std::true_type {};
static_assert(
    sizeof(::fidl::WireRequest<
           ::fidl_test_inheritancewithrecursivedecl::Parent::First>) ==
    ::fidl::WireRequest<
        ::fidl_test_inheritancewithrecursivedecl::Parent::First>::PrimarySize);
static_assert(
    offsetof(::fidl::WireRequest<
                 ::fidl_test_inheritancewithrecursivedecl::Parent::First>,
             request) == 16);
#endif  // __Fuchsia__

template <>
struct IsFidlType<
    ::fidl::WireRequest<::fidl_test_inheritancewithrecursivedecl::Child::First>>
    : public std::true_type {};
template <>
struct IsFidlMessage<
    ::fidl::WireRequest<::fidl_test_inheritancewithrecursivedecl::Child::First>>
    : public std::true_type {};
#ifdef __Fuchsia__
template <>
struct IsResource<
    ::fidl::WireRequest<::fidl_test_inheritancewithrecursivedecl::Child::First>>
    : public std::true_type {};
static_assert(
    sizeof(::fidl::WireRequest<
           ::fidl_test_inheritancewithrecursivedecl::Child::First>) ==
    ::fidl::WireRequest<
        ::fidl_test_inheritancewithrecursivedecl::Child::First>::PrimarySize);
static_assert(
    offsetof(::fidl::WireRequest<
                 ::fidl_test_inheritancewithrecursivedecl::Child::First>,
             request) == 16);
#endif  // __Fuchsia__

template <>
struct IsFidlType<::fidl::WireRequest<
    ::fidl_test_inheritancewithrecursivedecl::Child::Second>>
    : public std::true_type {};
template <>
struct IsFidlMessage<::fidl::WireRequest<
    ::fidl_test_inheritancewithrecursivedecl::Child::Second>>
    : public std::true_type {};
#ifdef __Fuchsia__
template <>
struct IsResource<::fidl::WireRequest<
    ::fidl_test_inheritancewithrecursivedecl::Child::Second>>
    : public std::true_type {};
static_assert(
    sizeof(::fidl::WireRequest<
           ::fidl_test_inheritancewithrecursivedecl::Child::Second>) ==
    ::fidl::WireRequest<
        ::fidl_test_inheritancewithrecursivedecl::Child::Second>::PrimarySize);
static_assert(
    offsetof(::fidl::WireRequest<
                 ::fidl_test_inheritancewithrecursivedecl::Child::Second>,
             request) == 16);
#endif  // __Fuchsia__

#ifdef __Fuchsia__
}  // namespace fidl
template <>
class ::fidl::internal::WireClientImpl<
    ::fidl_test_inheritancewithrecursivedecl::Parent>
    final : public ::fidl::internal::ClientBase {
 public:
  // Allocates 24 bytes of message buffer on the stack. No heap allocation
  // necessary.
  ::fidl::Result First(
      ::fidl::ServerEnd<::fidl_test_inheritancewithrecursivedecl::Parent>&&
          request);

  // Caller provides the backing storage for FIDL message via request buffer.
  ::fidl::Result First(
      ::fidl::BufferSpan _buffer_span,
      ::fidl::ServerEnd<::fidl_test_inheritancewithrecursivedecl::Parent>&&
          request);
  WireClientImpl() = default;

 private:
  std::optional<::fidl::UnbindInfo> DispatchEvent(
      ::fidl::IncomingMessage& msg,
      ::fidl::internal::AsyncEventHandler* maybe_event_handler,
      internal::IncomingTransportContext* transport_context) override;
};
namespace fidl {
#endif  // __Fuchsia__

}  // namespace fidl
#ifdef __Fuchsia__
// |EventSender| owns a server endpoint of a channel speaking
// the Parent protocol, and can send events in that protocol.
template <>
class ::fidl::WireEventSender<
    ::fidl_test_inheritancewithrecursivedecl::Parent> {
 public:
  // Constructs an event sender with an invalid channel.
  WireEventSender() = default;

  explicit WireEventSender(
      ::fidl::ServerEnd<::fidl_test_inheritancewithrecursivedecl::Parent>
          server_end)
      : server_end_(std::move(server_end)) {}

  // The underlying server channel endpoint, which may be replaced at run-time.
  const ::fidl::ServerEnd<::fidl_test_inheritancewithrecursivedecl::Parent>&
  server_end() const {
    return server_end_;
  }
  ::fidl::ServerEnd<::fidl_test_inheritancewithrecursivedecl::Parent>&
  server_end() {
    return server_end_;
  }

  const ::zx::channel& channel() const { return server_end_.channel(); }
  ::zx::channel& channel() { return server_end_.channel(); }

  // Whether the underlying channel is valid.
  bool is_valid() const { return server_end_.is_valid(); }

 private:
  ::fidl::ServerEnd<::fidl_test_inheritancewithrecursivedecl::Parent>
      server_end_;
};

template <>
class ::fidl::internal::WireWeakEventSender<
    ::fidl_test_inheritancewithrecursivedecl::Parent> {
 public:
  WireWeakEventSender(
      std::weak_ptr<::fidl::internal::AsyncServerBinding>&& binding)
      : inner_(std::move(binding)) {}

 private:
  friend ServerBindingRef<::fidl_test_inheritancewithrecursivedecl::Parent,
                          ::fidl::internal::ChannelTransport>;

  ::fidl::internal::WeakEventSenderInner inner_;
};
#endif  // __Fuchsia__

#ifdef __Fuchsia__

template <>
class ::fidl::internal::WireClientImpl<
    ::fidl_test_inheritancewithrecursivedecl::Child>
    final : public ::fidl::internal::ClientBase {
 public:
  // Allocates 24 bytes of message buffer on the stack. No heap allocation
  // necessary.
  ::fidl::Result First(
      ::fidl::ServerEnd<::fidl_test_inheritancewithrecursivedecl::Parent>&&
          request);

  // Caller provides the backing storage for FIDL message via request buffer.
  ::fidl::Result First(
      ::fidl::BufferSpan _buffer_span,
      ::fidl::ServerEnd<::fidl_test_inheritancewithrecursivedecl::Parent>&&
          request);

  // Allocates 24 bytes of message buffer on the stack. No heap allocation
  // necessary.
  ::fidl::Result Second(
      ::fidl::ServerEnd<::fidl_test_inheritancewithrecursivedecl::Parent>&&
          request);

  // Caller provides the backing storage for FIDL message via request buffer.
  ::fidl::Result Second(
      ::fidl::BufferSpan _buffer_span,
      ::fidl::ServerEnd<::fidl_test_inheritancewithrecursivedecl::Parent>&&
          request);
  WireClientImpl() = default;

 private:
  std::optional<::fidl::UnbindInfo> DispatchEvent(
      ::fidl::IncomingMessage& msg,
      ::fidl::internal::AsyncEventHandler* maybe_event_handler,
      internal::IncomingTransportContext* transport_context) override;
};
#endif  // __Fuchsia__

#ifdef __Fuchsia__
// |EventSender| owns a server endpoint of a channel speaking
// the Child protocol, and can send events in that protocol.
template <>
class ::fidl::WireEventSender<::fidl_test_inheritancewithrecursivedecl::Child> {
 public:
  // Constructs an event sender with an invalid channel.
  WireEventSender() = default;

  explicit WireEventSender(
      ::fidl::ServerEnd<::fidl_test_inheritancewithrecursivedecl::Child>
          server_end)
      : server_end_(std::move(server_end)) {}

  // The underlying server channel endpoint, which may be replaced at run-time.
  const ::fidl::ServerEnd<::fidl_test_inheritancewithrecursivedecl::Child>&
  server_end() const {
    return server_end_;
  }
  ::fidl::ServerEnd<::fidl_test_inheritancewithrecursivedecl::Child>&
  server_end() {
    return server_end_;
  }

  const ::zx::channel& channel() const { return server_end_.channel(); }
  ::zx::channel& channel() { return server_end_.channel(); }

  // Whether the underlying channel is valid.
  bool is_valid() const { return server_end_.is_valid(); }

 private:
  ::fidl::ServerEnd<::fidl_test_inheritancewithrecursivedecl::Child>
      server_end_;
};

template <>
class ::fidl::internal::WireWeakEventSender<
    ::fidl_test_inheritancewithrecursivedecl::Child> {
 public:
  WireWeakEventSender(
      std::weak_ptr<::fidl::internal::AsyncServerBinding>&& binding)
      : inner_(std::move(binding)) {}

 private:
  friend ServerBindingRef<::fidl_test_inheritancewithrecursivedecl::Child,
                          ::fidl::internal::ChannelTransport>;

  ::fidl::internal::WeakEventSenderInner inner_;
};
#endif  // __Fuchsia__
