// WARNING: This file is machine generated by fidlgen.

#include <fidl/test.anonymous/cpp/natural_types.h>

#ifdef __Fuchsia__

void ::test_anonymous::TableData::EncodeWithoutValidating(
    ::fidl::Encoder& encoder, size_t offset) {
  encoder.Alloc(
      ::fidl::EncodingInlineSize<::test_anonymous::TableData, ::fidl::Encoder>(
          &encoder));
  ::fidl::CodingTraits<::test_anonymous::TableData>::Encode(&encoder, this,
                                                            offset);
}

::test_anonymous::TableData::TableData(::fidl::Decoder& decoder)
    : storage_({::fidl::DecodeAs<uint8_t>(&decoder, 0)}) {}
#endif  // __Fuchsia__

::test_anonymous::TableData::Storage_ test_anonymous::TableData::CloneStorage_()
    const {
  return Storage_{::fidl::internal::NaturalClone(storage_.data)};
}
#ifdef __Fuchsia__

void ::test_anonymous::SomeProtocolSomeMethodRequest::EncodeWithoutValidating(
    ::fidl::Encoder& encoder, size_t offset) {
  encoder.Alloc(
      ::fidl::EncodingInlineSize<
          ::test_anonymous::SomeProtocolSomeMethodRequest, ::fidl::Encoder>(
          &encoder));
  ::fidl::CodingTraits<::test_anonymous::SomeProtocolSomeMethodRequest>::Encode(
      &encoder, this, offset);
}

::test_anonymous::SomeProtocolSomeMethodRequest::SomeProtocolSomeMethodRequest(
    ::fidl::Decoder& decoder)
    : storage_(
          {::fidl::DecodeAs<::test_anonymous::UnionMember>(&decoder, 0),
           ::fidl::DecodeAs<::test_anonymous::TableMember>(&decoder, 16)}) {}
#endif  // __Fuchsia__

::test_anonymous::SomeProtocolSomeMethodRequest::Storage_
test_anonymous::SomeProtocolSomeMethodRequest::CloneStorage_() const {
  return Storage_{::fidl::internal::NaturalClone(storage_.union_member),
                  ::fidl::internal::NaturalClone(storage_.table_member)};
}
#ifdef __Fuchsia__

void ::test_anonymous::OverrideTest::EncodeWithoutValidating(
    ::fidl::Encoder& encoder, size_t offset) {
  encoder.Alloc(::fidl::EncodingInlineSize<::test_anonymous::OverrideTest,
                                           ::fidl::Encoder>(&encoder));
  ::fidl::CodingTraits<::test_anonymous::OverrideTest>::Encode(&encoder, this,
                                                               offset);
}

::test_anonymous::OverrideTest::OverrideTest(::fidl::Decoder& decoder)
    : storage_(
          {::fidl::DecodeAs<::test_anonymous::Op>(&decoder, 0),
           ::fidl::DecodeAs<::std::unique_ptr<::test_anonymous::Expression>>(
               &decoder, 8),
           ::fidl::DecodeAs<::std::unique_ptr<::test_anonymous::Expression>>(
               &decoder, 24)}) {}
#endif  // __Fuchsia__

::test_anonymous::OverrideTest::Storage_
test_anonymous::OverrideTest::CloneStorage_() const {
  return Storage_{::fidl::internal::NaturalClone(storage_.op),
                  ::fidl::internal::NaturalClone(storage_.left),
                  ::fidl::internal::NaturalClone(storage_.right)};
}
#ifdef __Fuchsia__

void ::test_anonymous::SomeProtocol_SomeMethod_Response::
    EncodeWithoutValidating(::fidl::Encoder& encoder, size_t offset) {
  encoder.Alloc(
      ::fidl::EncodingInlineSize<
          ::test_anonymous::SomeProtocol_SomeMethod_Response, ::fidl::Encoder>(
          &encoder));
  ::fidl::CodingTraits<
      ::test_anonymous::SomeProtocol_SomeMethod_Response>::Encode(&encoder,
                                                                  this, offset);
}

::test_anonymous::SomeProtocol_SomeMethod_Response::
    SomeProtocol_SomeMethod_Response(::fidl::Decoder& decoder)
    : storage_({::fidl::DecodeAs<::test_anonymous::BitsMember>(&decoder, 0)}) {}
#endif  // __Fuchsia__

::test_anonymous::SomeProtocol_SomeMethod_Response::Storage_
test_anonymous::SomeProtocol_SomeMethod_Response::CloneStorage_() const {
  return Storage_{::fidl::internal::NaturalClone(storage_.bits_member)};
}
#ifdef __Fuchsia__

void ::test_anonymous::SomeProtocolSomeMethodTopResponse::
    EncodeWithoutValidating(::fidl::Encoder& encoder, size_t offset) {
  encoder.Alloc(
      ::fidl::EncodingInlineSize<
          ::test_anonymous::SomeProtocolSomeMethodTopResponse, ::fidl::Encoder>(
          &encoder));
  ::fidl::CodingTraits<
      ::test_anonymous::SomeProtocolSomeMethodTopResponse>::Encode(&encoder,
                                                                   this,
                                                                   offset);
}

::test_anonymous::SomeProtocolSomeMethodTopResponse::
    SomeProtocolSomeMethodTopResponse(::fidl::Decoder& decoder)
    : storage_(
          {::fidl::DecodeAs<::test_anonymous::SomeProtocol_SomeMethod_Result>(
              &decoder, 0)}) {}
#endif  // __Fuchsia__

::test_anonymous::SomeProtocolSomeMethodTopResponse::Storage_
test_anonymous::SomeProtocolSomeMethodTopResponse::CloneStorage_() const {
  return Storage_{::fidl::internal::NaturalClone(storage_.result)};
}

::test_anonymous::TableMember::Storage_
test_anonymous::TableMember::CloneStorage_() const {
  return Storage_{::fidl::internal::NaturalClone(storage_.table_data)};
}

::test_anonymous::FunctionApplication::Storage_
test_anonymous::FunctionApplication::CloneStorage_() const {
  return Storage_{::fidl::internal::NaturalClone(storage_.func),
                  ::fidl::internal::NaturalClone(storage_.args),
                  ::fidl::internal::NaturalClone(storage_.flags)};
}

std::shared_ptr<::test_anonymous::UnionMember::Storage_>
test_anonymous::UnionMember::CloneStorage_() const {
  const Storage_& storage = *storage_;
  switch (storage_->index()) {
    case 1:
      return std::make_shared<Storage_>(
          std::in_place_index<1>,
          ::fidl::internal::NaturalClone(std::get<1>(storage)));
    default:
      return std::make_shared<Storage_>();
  }
}

std::shared_ptr<::test_anonymous::Expression::Storage_>
test_anonymous::Expression::CloneStorage_() const {
  const Storage_& storage = *storage_;
  switch (storage_->index()) {
    case 1:
      return std::make_shared<Storage_>(
          std::in_place_index<1>,
          ::fidl::internal::NaturalClone(std::get<1>(storage)));
    case 2:
      return std::make_shared<Storage_>(
          std::in_place_index<2>,
          ::fidl::internal::NaturalClone(std::get<2>(storage)));
    case 3:
      return std::make_shared<Storage_>(
          std::in_place_index<3>,
          ::fidl::internal::NaturalClone(std::get<3>(storage)));
    default:
      return std::make_shared<Storage_>();
  }
}

std::shared_ptr<::test_anonymous::SomeProtocol_SomeMethod_Result::Storage_>
test_anonymous::SomeProtocol_SomeMethod_Result::CloneStorage_() const {
  const Storage_& storage = *storage_;
  switch (storage_->index()) {
    case 1:
      return std::make_shared<Storage_>(
          std::in_place_index<1>,
          ::fidl::internal::NaturalClone(std::get<1>(storage)));
    case 2:
      return std::make_shared<Storage_>(
          std::in_place_index<2>,
          ::fidl::internal::NaturalClone(std::get<2>(storage)));
    default:
      return std::make_shared<Storage_>();
  }
}
