// WARNING: This file is machine generated by fidlgen.

#pragma once

#include <fidl/test.protocolpayloads/cpp/markers.h>
#include <fidl/test.protocolpayloads/cpp/natural_types.h>
#include <fidl/test.protocolpayloads/cpp/wire_types.h>
#ifdef __Fuchsia__
#include <fidl/test.protocolpayloads/cpp/natural_messaging.h>
#include <fidl/test.protocolpayloads/cpp/wire_messaging.h>
#endif  // __Fuchsia__
#include <fidl/test.protocolpayloads.imported/cpp/type_conversions.h>
#include <lib/fidl/cpp/wire_natural_conversions.h>
namespace fidl {
namespace internal {

template <>
struct WireNaturalConversionTraits<
    ::test_protocolpayloads::wire::MainProtocolTwoWayImportWithErrorTopResponse,
    ::test_protocolpayloads::MainProtocolTwoWayImportWithErrorTopResponse> {
  static ::test_protocolpayloads::MainProtocolTwoWayImportWithErrorTopResponse
  ToNatural(::test_protocolpayloads::wire::
                MainProtocolTwoWayImportWithErrorTopResponse src);
};

template <>
struct NaturalTypeForWireType<
    ::test_protocolpayloads::wire::
        MainProtocolTwoWayImportWithErrorTopResponse> {
  using type =
      ::test_protocolpayloads::MainProtocolTwoWayImportWithErrorTopResponse;
};

template <>
struct WireNaturalConversionTraits<
    ::test_protocolpayloads::wire::MainProtocolTwoWayAnonWithErrorResponse,
    ::test_protocolpayloads::MainProtocolTwoWayAnonWithErrorResponse> {
  static ::test_protocolpayloads::MainProtocolTwoWayAnonWithErrorResponse
  ToNatural(
      ::test_protocolpayloads::wire::MainProtocolTwoWayAnonWithErrorResponse
          src);
};

template <>
struct NaturalTypeForWireType<
    ::test_protocolpayloads::wire::MainProtocolTwoWayAnonWithErrorResponse> {
  using type = ::test_protocolpayloads::MainProtocolTwoWayAnonWithErrorResponse;
};

template <>
struct WireNaturalConversionTraits<
    ::test_protocolpayloads::wire::MainProtocolTwoWayAnonWithErrorTopResponse,
    ::test_protocolpayloads::MainProtocolTwoWayAnonWithErrorTopResponse> {
  static ::test_protocolpayloads::MainProtocolTwoWayAnonWithErrorTopResponse
  ToNatural(
      ::test_protocolpayloads::wire::MainProtocolTwoWayAnonWithErrorTopResponse
          src);
};

template <>
struct NaturalTypeForWireType<
    ::test_protocolpayloads::wire::MainProtocolTwoWayAnonWithErrorTopResponse> {
  using type =
      ::test_protocolpayloads::MainProtocolTwoWayAnonWithErrorTopResponse;
};

template <>
struct WireNaturalConversionTraits<
    ::test_protocolpayloads::wire::MainProtocolOnImportWithErrorRequest,
    ::test_protocolpayloads::MainProtocolOnImportWithErrorRequest> {
  static ::test_protocolpayloads::MainProtocolOnImportWithErrorRequest
  ToNatural(
      ::test_protocolpayloads::wire::MainProtocolOnImportWithErrorRequest src);
};

template <>
struct NaturalTypeForWireType<
    ::test_protocolpayloads::wire::MainProtocolOnImportWithErrorRequest> {
  using type = ::test_protocolpayloads::MainProtocolOnImportWithErrorRequest;
};

template <>
struct WireNaturalConversionTraits<
    ::test_protocolpayloads::wire::MainProtocolOnAnonWithErrorResponse,
    ::test_protocolpayloads::MainProtocolOnAnonWithErrorResponse> {
  static ::test_protocolpayloads::MainProtocolOnAnonWithErrorResponse ToNatural(
      ::test_protocolpayloads::wire::MainProtocolOnAnonWithErrorResponse src);
};

template <>
struct NaturalTypeForWireType<
    ::test_protocolpayloads::wire::MainProtocolOnAnonWithErrorResponse> {
  using type = ::test_protocolpayloads::MainProtocolOnAnonWithErrorResponse;
};

template <>
struct WireNaturalConversionTraits<
    ::test_protocolpayloads::wire::MainProtocolOnAnonWithErrorRequest,
    ::test_protocolpayloads::MainProtocolOnAnonWithErrorRequest> {
  static ::test_protocolpayloads::MainProtocolOnAnonWithErrorRequest ToNatural(
      ::test_protocolpayloads::wire::MainProtocolOnAnonWithErrorRequest src);
};

template <>
struct NaturalTypeForWireType<
    ::test_protocolpayloads::wire::MainProtocolOnAnonWithErrorRequest> {
  using type = ::test_protocolpayloads::MainProtocolOnAnonWithErrorRequest;
};

template <>
struct WireNaturalConversionTraits<
    ::test_protocolpayloads::wire::MainProtocolTwoWayAnonWithErrorRequest,
    ::test_protocolpayloads::MainProtocolTwoWayAnonWithErrorRequest> {
  static ::test_protocolpayloads::MainProtocolTwoWayAnonWithErrorRequest
  ToNatural(
      ::test_protocolpayloads::wire::MainProtocolTwoWayAnonWithErrorRequest
          src);
};

template <>
struct NaturalTypeForWireType<
    ::test_protocolpayloads::wire::MainProtocolTwoWayAnonWithErrorRequest> {
  using type = ::test_protocolpayloads::MainProtocolTwoWayAnonWithErrorRequest;
};

template <>
struct WireNaturalConversionTraits<
    ::test_protocolpayloads::wire::MainProtocolTwoWayAnonTopResponse,
    ::test_protocolpayloads::MainProtocolTwoWayAnonTopResponse> {
  static ::test_protocolpayloads::MainProtocolTwoWayAnonTopResponse ToNatural(
      ::test_protocolpayloads::wire::MainProtocolTwoWayAnonTopResponse src);
};

template <>
struct NaturalTypeForWireType<
    ::test_protocolpayloads::wire::MainProtocolTwoWayAnonTopResponse> {
  using type = ::test_protocolpayloads::MainProtocolTwoWayAnonTopResponse;
};

template <>
struct WireNaturalConversionTraits<
    ::test_protocolpayloads::wire::MainProtocolTwoWayAnonRequest,
    ::test_protocolpayloads::MainProtocolTwoWayAnonRequest> {
  static ::test_protocolpayloads::MainProtocolTwoWayAnonRequest ToNatural(
      ::test_protocolpayloads::wire::MainProtocolTwoWayAnonRequest src);
};

template <>
struct NaturalTypeForWireType<
    ::test_protocolpayloads::wire::MainProtocolTwoWayAnonRequest> {
  using type = ::test_protocolpayloads::MainProtocolTwoWayAnonRequest;
};

template <>
struct WireNaturalConversionTraits<
    ::test_protocolpayloads::wire::MainProtocolOneWayAnonRequest,
    ::test_protocolpayloads::MainProtocolOneWayAnonRequest> {
  static ::test_protocolpayloads::MainProtocolOneWayAnonRequest ToNatural(
      ::test_protocolpayloads::wire::MainProtocolOneWayAnonRequest src);
};

template <>
struct NaturalTypeForWireType<
    ::test_protocolpayloads::wire::MainProtocolOneWayAnonRequest> {
  using type = ::test_protocolpayloads::MainProtocolOneWayAnonRequest;
};

template <>
struct WireNaturalConversionTraits<
    ::test_protocolpayloads::wire::MainProtocolOnAnonRequest,
    ::test_protocolpayloads::MainProtocolOnAnonRequest> {
  static ::test_protocolpayloads::MainProtocolOnAnonRequest ToNatural(
      ::test_protocolpayloads::wire::MainProtocolOnAnonRequest src);
};

template <>
struct NaturalTypeForWireType<
    ::test_protocolpayloads::wire::MainProtocolOnAnonRequest> {
  using type = ::test_protocolpayloads::MainProtocolOnAnonRequest;
};

template <>
struct WireNaturalConversionTraits<
    ::test_protocolpayloads::wire::LocalStructPayload,
    ::test_protocolpayloads::LocalStructPayload> {
  static ::test_protocolpayloads::LocalStructPayload ToNatural(
      ::test_protocolpayloads::wire::LocalStructPayload src);
};

template <>
struct NaturalTypeForWireType<
    ::test_protocolpayloads::wire::LocalStructPayload> {
  using type = ::test_protocolpayloads::LocalStructPayload;
};

template <>
struct WireNaturalConversionTraits<
    ::test_protocolpayloads::wire::MainProtocolTwoWayLocalWithErrorTopResponse,
    ::test_protocolpayloads::MainProtocolTwoWayLocalWithErrorTopResponse> {
  static ::test_protocolpayloads::MainProtocolTwoWayLocalWithErrorTopResponse
  ToNatural(
      ::test_protocolpayloads::wire::MainProtocolTwoWayLocalWithErrorTopResponse
          src);
};

template <>
struct NaturalTypeForWireType<::test_protocolpayloads::wire::
                                  MainProtocolTwoWayLocalWithErrorTopResponse> {
  using type =
      ::test_protocolpayloads::MainProtocolTwoWayLocalWithErrorTopResponse;
};

template <>
struct WireNaturalConversionTraits<
    ::test_protocolpayloads::wire::MainProtocolOnLocalWithErrorRequest,
    ::test_protocolpayloads::MainProtocolOnLocalWithErrorRequest> {
  static ::test_protocolpayloads::MainProtocolOnLocalWithErrorRequest ToNatural(
      ::test_protocolpayloads::wire::MainProtocolOnLocalWithErrorRequest src);
};

template <>
struct NaturalTypeForWireType<
    ::test_protocolpayloads::wire::MainProtocolOnLocalWithErrorRequest> {
  using type = ::test_protocolpayloads::MainProtocolOnLocalWithErrorRequest;
};

template <>
struct WireNaturalConversionTraits<
    ::test_protocolpayloads::wire::MainProtocolTwoWayImportWithErrorResult,
    ::test_protocolpayloads::MainProtocolTwoWayImportWithErrorResult> {
  static ::test_protocolpayloads::MainProtocolTwoWayImportWithErrorResult
  ToNatural(
      ::test_protocolpayloads::wire::MainProtocolTwoWayImportWithErrorResult
          src);
};

template <>
struct WireNaturalConversionTraits<
    ::test_protocolpayloads::wire::MainProtocolTwoWayImportWithErrorResult,
    std::unique_ptr<
        ::test_protocolpayloads::MainProtocolTwoWayImportWithErrorResult>> {
  static std::unique_ptr<
      ::test_protocolpayloads::MainProtocolTwoWayImportWithErrorResult>
  ToNatural(
      ::test_protocolpayloads::wire::MainProtocolTwoWayImportWithErrorResult
          src);
};

template <>
struct NaturalTypeForWireType<
    ::test_protocolpayloads::wire::MainProtocolTwoWayImportWithErrorResult> {
  using type = std::unique_ptr<
      ::test_protocolpayloads::MainProtocolTwoWayImportWithErrorResult>;
};

template <>
struct WireNaturalConversionTraits<
    ::test_protocolpayloads::wire::MainProtocolTwoWayAnonWithErrorResult,
    ::test_protocolpayloads::MainProtocolTwoWayAnonWithErrorResult> {
  static ::test_protocolpayloads::MainProtocolTwoWayAnonWithErrorResult
  ToNatural(
      ::test_protocolpayloads::wire::MainProtocolTwoWayAnonWithErrorResult src);
};

template <>
struct WireNaturalConversionTraits<
    ::test_protocolpayloads::wire::MainProtocolTwoWayAnonWithErrorResult,
    std::unique_ptr<
        ::test_protocolpayloads::MainProtocolTwoWayAnonWithErrorResult>> {
  static std::unique_ptr<
      ::test_protocolpayloads::MainProtocolTwoWayAnonWithErrorResult>
  ToNatural(
      ::test_protocolpayloads::wire::MainProtocolTwoWayAnonWithErrorResult src);
};

template <>
struct NaturalTypeForWireType<
    ::test_protocolpayloads::wire::MainProtocolTwoWayAnonWithErrorResult> {
  using type = std::unique_ptr<
      ::test_protocolpayloads::MainProtocolTwoWayAnonWithErrorResult>;
};

template <>
struct WireNaturalConversionTraits<
    ::test_protocolpayloads::wire::MainProtocolOnImportWithErrorResult,
    ::test_protocolpayloads::MainProtocolOnImportWithErrorResult> {
  static ::test_protocolpayloads::MainProtocolOnImportWithErrorResult ToNatural(
      ::test_protocolpayloads::wire::MainProtocolOnImportWithErrorResult src);
};

template <>
struct WireNaturalConversionTraits<
    ::test_protocolpayloads::wire::MainProtocolOnImportWithErrorResult,
    std::unique_ptr<
        ::test_protocolpayloads::MainProtocolOnImportWithErrorResult>> {
  static std::unique_ptr<
      ::test_protocolpayloads::MainProtocolOnImportWithErrorResult>
  ToNatural(
      ::test_protocolpayloads::wire::MainProtocolOnImportWithErrorResult src);
};

template <>
struct NaturalTypeForWireType<
    ::test_protocolpayloads::wire::MainProtocolOnImportWithErrorResult> {
  using type = std::unique_ptr<
      ::test_protocolpayloads::MainProtocolOnImportWithErrorResult>;
};

template <>
struct WireNaturalConversionTraits<
    ::test_protocolpayloads::wire::MainProtocolOnAnonWithErrorResult,
    ::test_protocolpayloads::MainProtocolOnAnonWithErrorResult> {
  static ::test_protocolpayloads::MainProtocolOnAnonWithErrorResult ToNatural(
      ::test_protocolpayloads::wire::MainProtocolOnAnonWithErrorResult src);
};

template <>
struct WireNaturalConversionTraits<
    ::test_protocolpayloads::wire::MainProtocolOnAnonWithErrorResult,
    std::unique_ptr<
        ::test_protocolpayloads::MainProtocolOnAnonWithErrorResult>> {
  static std::unique_ptr<
      ::test_protocolpayloads::MainProtocolOnAnonWithErrorResult>
  ToNatural(
      ::test_protocolpayloads::wire::MainProtocolOnAnonWithErrorResult src);
};

template <>
struct NaturalTypeForWireType<
    ::test_protocolpayloads::wire::MainProtocolOnAnonWithErrorResult> {
  using type = std::unique_ptr<
      ::test_protocolpayloads::MainProtocolOnAnonWithErrorResult>;
};

template <>
struct WireNaturalConversionTraits<
    ::test_protocolpayloads::wire::MainProtocolTwoWayLocalWithErrorResult,
    ::test_protocolpayloads::MainProtocolTwoWayLocalWithErrorResult> {
  static ::test_protocolpayloads::MainProtocolTwoWayLocalWithErrorResult
  ToNatural(
      ::test_protocolpayloads::wire::MainProtocolTwoWayLocalWithErrorResult
          src);
};

template <>
struct WireNaturalConversionTraits<
    ::test_protocolpayloads::wire::MainProtocolTwoWayLocalWithErrorResult,
    std::unique_ptr<
        ::test_protocolpayloads::MainProtocolTwoWayLocalWithErrorResult>> {
  static std::unique_ptr<
      ::test_protocolpayloads::MainProtocolTwoWayLocalWithErrorResult>
  ToNatural(
      ::test_protocolpayloads::wire::MainProtocolTwoWayLocalWithErrorResult
          src);
};

template <>
struct NaturalTypeForWireType<
    ::test_protocolpayloads::wire::MainProtocolTwoWayLocalWithErrorResult> {
  using type = std::unique_ptr<
      ::test_protocolpayloads::MainProtocolTwoWayLocalWithErrorResult>;
};

template <>
struct WireNaturalConversionTraits<
    ::test_protocolpayloads::wire::MainProtocolOnLocalWithErrorResult,
    ::test_protocolpayloads::MainProtocolOnLocalWithErrorResult> {
  static ::test_protocolpayloads::MainProtocolOnLocalWithErrorResult ToNatural(
      ::test_protocolpayloads::wire::MainProtocolOnLocalWithErrorResult src);
};

template <>
struct WireNaturalConversionTraits<
    ::test_protocolpayloads::wire::MainProtocolOnLocalWithErrorResult,
    std::unique_ptr<
        ::test_protocolpayloads::MainProtocolOnLocalWithErrorResult>> {
  static std::unique_ptr<
      ::test_protocolpayloads::MainProtocolOnLocalWithErrorResult>
  ToNatural(
      ::test_protocolpayloads::wire::MainProtocolOnLocalWithErrorResult src);
};

template <>
struct NaturalTypeForWireType<
    ::test_protocolpayloads::wire::MainProtocolOnLocalWithErrorResult> {
  using type = std::unique_ptr<
      ::test_protocolpayloads::MainProtocolOnLocalWithErrorResult>;
};

#ifdef __Fuchsia__

template <>
struct WireNaturalConversionTraits<
    ::fidl::WireRequest<::test_protocolpayloads::MainProtocol::OneWayComposed>,
    ::fidl::Request<::test_protocolpayloads::MainProtocol::OneWayComposed>> {
  static ::fidl::Request<::test_protocolpayloads::MainProtocol::OneWayComposed>
  ToNatural(
      ::fidl::WireRequest<::test_protocolpayloads::MainProtocol::OneWayComposed>
          src);
};

template <>
struct NaturalTypeForWireType<::fidl::WireRequest<
    ::test_protocolpayloads::MainProtocol::OneWayComposed>> {
  using type =
      ::fidl::Request<::test_protocolpayloads::MainProtocol::OneWayComposed>;
};

template <>
struct WireNaturalConversionTraits<
    ::fidl::WireRequest<::test_protocolpayloads::MainProtocol::TwoWayComposed>,
    ::fidl::Request<::test_protocolpayloads::MainProtocol::TwoWayComposed>> {
  static ::fidl::Request<::test_protocolpayloads::MainProtocol::TwoWayComposed>
  ToNatural(
      ::fidl::WireRequest<::test_protocolpayloads::MainProtocol::TwoWayComposed>
          src);
};

template <>
struct NaturalTypeForWireType<::fidl::WireRequest<
    ::test_protocolpayloads::MainProtocol::TwoWayComposed>> {
  using type =
      ::fidl::Request<::test_protocolpayloads::MainProtocol::TwoWayComposed>;
};

template <>
struct WireNaturalConversionTraits<
    ::fidl::WireRequest<
        ::test_protocolpayloads::MainProtocol::TwoWayComposedWithError>,
    ::fidl::Request<
        ::test_protocolpayloads::MainProtocol::TwoWayComposedWithError>> {
  static ::fidl::Request<
      ::test_protocolpayloads::MainProtocol::TwoWayComposedWithError>
  ToNatural(::fidl::WireRequest<
            ::test_protocolpayloads::MainProtocol::TwoWayComposedWithError>
                src);
};

template <>
struct NaturalTypeForWireType<::fidl::WireRequest<
    ::test_protocolpayloads::MainProtocol::TwoWayComposedWithError>> {
  using type = ::fidl::Request<
      ::test_protocolpayloads::MainProtocol::TwoWayComposedWithError>;
};

template <>
struct WireNaturalConversionTraits<
    ::fidl::WireRequest<::test_protocolpayloads::MainProtocol::OneWayLocal>,
    ::fidl::Request<::test_protocolpayloads::MainProtocol::OneWayLocal>> {
  static ::fidl::Request<::test_protocolpayloads::MainProtocol::OneWayLocal>
  ToNatural(
      ::fidl::WireRequest<::test_protocolpayloads::MainProtocol::OneWayLocal>
          src);
};

template <>
struct NaturalTypeForWireType<
    ::fidl::WireRequest<::test_protocolpayloads::MainProtocol::OneWayLocal>> {
  using type =
      ::fidl::Request<::test_protocolpayloads::MainProtocol::OneWayLocal>;
};

template <>
struct WireNaturalConversionTraits<
    ::fidl::WireRequest<::test_protocolpayloads::MainProtocol::TwoWayLocal>,
    ::fidl::Request<::test_protocolpayloads::MainProtocol::TwoWayLocal>> {
  static ::fidl::Request<::test_protocolpayloads::MainProtocol::TwoWayLocal>
  ToNatural(
      ::fidl::WireRequest<::test_protocolpayloads::MainProtocol::TwoWayLocal>
          src);
};

template <>
struct NaturalTypeForWireType<
    ::fidl::WireRequest<::test_protocolpayloads::MainProtocol::TwoWayLocal>> {
  using type =
      ::fidl::Request<::test_protocolpayloads::MainProtocol::TwoWayLocal>;
};

template <>
struct WireNaturalConversionTraits<
    ::fidl::WireRequest<
        ::test_protocolpayloads::MainProtocol::TwoWayLocalWithError>,
    ::fidl::Request<
        ::test_protocolpayloads::MainProtocol::TwoWayLocalWithError>> {
  static ::fidl::Request<
      ::test_protocolpayloads::MainProtocol::TwoWayLocalWithError>
  ToNatural(::fidl::WireRequest<
            ::test_protocolpayloads::MainProtocol::TwoWayLocalWithError>
                src);
};

template <>
struct NaturalTypeForWireType<::fidl::WireRequest<
    ::test_protocolpayloads::MainProtocol::TwoWayLocalWithError>> {
  using type = ::fidl::Request<
      ::test_protocolpayloads::MainProtocol::TwoWayLocalWithError>;
};

template <>
struct WireNaturalConversionTraits<
    ::fidl::WireRequest<::test_protocolpayloads::MainProtocol::OneWayImport>,
    ::fidl::Request<::test_protocolpayloads::MainProtocol::OneWayImport>> {
  static ::fidl::Request<::test_protocolpayloads::MainProtocol::OneWayImport>
  ToNatural(
      ::fidl::WireRequest<::test_protocolpayloads::MainProtocol::OneWayImport>
          src);
};

template <>
struct NaturalTypeForWireType<
    ::fidl::WireRequest<::test_protocolpayloads::MainProtocol::OneWayImport>> {
  using type =
      ::fidl::Request<::test_protocolpayloads::MainProtocol::OneWayImport>;
};

template <>
struct WireNaturalConversionTraits<
    ::fidl::WireRequest<::test_protocolpayloads::MainProtocol::TwoWayImport>,
    ::fidl::Request<::test_protocolpayloads::MainProtocol::TwoWayImport>> {
  static ::fidl::Request<::test_protocolpayloads::MainProtocol::TwoWayImport>
  ToNatural(
      ::fidl::WireRequest<::test_protocolpayloads::MainProtocol::TwoWayImport>
          src);
};

template <>
struct NaturalTypeForWireType<
    ::fidl::WireRequest<::test_protocolpayloads::MainProtocol::TwoWayImport>> {
  using type =
      ::fidl::Request<::test_protocolpayloads::MainProtocol::TwoWayImport>;
};

template <>
struct WireNaturalConversionTraits<
    ::fidl::WireRequest<
        ::test_protocolpayloads::MainProtocol::TwoWayImportWithError>,
    ::fidl::Request<
        ::test_protocolpayloads::MainProtocol::TwoWayImportWithError>> {
  static ::fidl::Request<
      ::test_protocolpayloads::MainProtocol::TwoWayImportWithError>
  ToNatural(::fidl::WireRequest<
            ::test_protocolpayloads::MainProtocol::TwoWayImportWithError>
                src);
};

template <>
struct NaturalTypeForWireType<::fidl::WireRequest<
    ::test_protocolpayloads::MainProtocol::TwoWayImportWithError>> {
  using type = ::fidl::Request<
      ::test_protocolpayloads::MainProtocol::TwoWayImportWithError>;
};

template <>
struct WireNaturalConversionTraits<
    ::fidl::WireRequest<::test_protocolpayloads::MainProtocol::OneWayAnon>,
    ::fidl::Request<::test_protocolpayloads::MainProtocol::OneWayAnon>> {
  static ::fidl::Request<::test_protocolpayloads::MainProtocol::OneWayAnon>
  ToNatural(
      ::fidl::WireRequest<::test_protocolpayloads::MainProtocol::OneWayAnon>
          src);
};

template <>
struct NaturalTypeForWireType<
    ::fidl::WireRequest<::test_protocolpayloads::MainProtocol::OneWayAnon>> {
  using type =
      ::fidl::Request<::test_protocolpayloads::MainProtocol::OneWayAnon>;
};

template <>
struct WireNaturalConversionTraits<
    ::fidl::WireRequest<::test_protocolpayloads::MainProtocol::TwoWayAnon>,
    ::fidl::Request<::test_protocolpayloads::MainProtocol::TwoWayAnon>> {
  static ::fidl::Request<::test_protocolpayloads::MainProtocol::TwoWayAnon>
  ToNatural(
      ::fidl::WireRequest<::test_protocolpayloads::MainProtocol::TwoWayAnon>
          src);
};

template <>
struct NaturalTypeForWireType<
    ::fidl::WireRequest<::test_protocolpayloads::MainProtocol::TwoWayAnon>> {
  using type =
      ::fidl::Request<::test_protocolpayloads::MainProtocol::TwoWayAnon>;
};

template <>
struct WireNaturalConversionTraits<
    ::fidl::WireRequest<
        ::test_protocolpayloads::MainProtocol::TwoWayAnonWithError>,
    ::fidl::Request<
        ::test_protocolpayloads::MainProtocol::TwoWayAnonWithError>> {
  static ::fidl::Request<
      ::test_protocolpayloads::MainProtocol::TwoWayAnonWithError>
  ToNatural(::fidl::WireRequest<
            ::test_protocolpayloads::MainProtocol::TwoWayAnonWithError>
                src);
};

template <>
struct NaturalTypeForWireType<::fidl::WireRequest<
    ::test_protocolpayloads::MainProtocol::TwoWayAnonWithError>> {
  using type = ::fidl::Request<
      ::test_protocolpayloads::MainProtocol::TwoWayAnonWithError>;
};

template <>
struct WireNaturalConversionTraits<
    ::fidl::WireResponse<::test_protocolpayloads::MainProtocol::TwoWayComposed>,
    ::fidl::Response<::test_protocolpayloads::MainProtocol::TwoWayComposed>> {
  static ::fidl::Response<::test_protocolpayloads::MainProtocol::TwoWayComposed>
  ToNatural(::fidl::WireResponse<
            ::test_protocolpayloads::MainProtocol::TwoWayComposed>
                src);
};

template <>
struct NaturalTypeForWireType<::fidl::WireResponse<
    ::test_protocolpayloads::MainProtocol::TwoWayComposed>> {
  using type =
      ::fidl::Response<::test_protocolpayloads::MainProtocol::TwoWayComposed>;
};

template <>
struct WireNaturalConversionTraits<
    ::fidl::WireResponse<
        ::test_protocolpayloads::MainProtocol::TwoWayComposedWithError>,
    ::fidl::Response<
        ::test_protocolpayloads::MainProtocol::TwoWayComposedWithError>> {
  static ::fidl::Response<
      ::test_protocolpayloads::MainProtocol::TwoWayComposedWithError>
  ToNatural(::fidl::WireResponse<
            ::test_protocolpayloads::MainProtocol::TwoWayComposedWithError>
                src);
};

template <>
struct NaturalTypeForWireType<::fidl::WireResponse<
    ::test_protocolpayloads::MainProtocol::TwoWayComposedWithError>> {
  using type = ::fidl::Response<
      ::test_protocolpayloads::MainProtocol::TwoWayComposedWithError>;
};

template <>
struct WireNaturalConversionTraits<
    ::fidl::WireResponse<::test_protocolpayloads::MainProtocol::TwoWayLocal>,
    ::fidl::Response<::test_protocolpayloads::MainProtocol::TwoWayLocal>> {
  static ::fidl::Response<::test_protocolpayloads::MainProtocol::TwoWayLocal>
  ToNatural(
      ::fidl::WireResponse<::test_protocolpayloads::MainProtocol::TwoWayLocal>
          src);
};

template <>
struct NaturalTypeForWireType<
    ::fidl::WireResponse<::test_protocolpayloads::MainProtocol::TwoWayLocal>> {
  using type =
      ::fidl::Response<::test_protocolpayloads::MainProtocol::TwoWayLocal>;
};

template <>
struct WireNaturalConversionTraits<
    ::fidl::WireResponse<
        ::test_protocolpayloads::MainProtocol::TwoWayLocalWithError>,
    ::fidl::Response<
        ::test_protocolpayloads::MainProtocol::TwoWayLocalWithError>> {
  static ::fidl::Response<
      ::test_protocolpayloads::MainProtocol::TwoWayLocalWithError>
  ToNatural(::fidl::WireResponse<
            ::test_protocolpayloads::MainProtocol::TwoWayLocalWithError>
                src);
};

template <>
struct NaturalTypeForWireType<::fidl::WireResponse<
    ::test_protocolpayloads::MainProtocol::TwoWayLocalWithError>> {
  using type = ::fidl::Response<
      ::test_protocolpayloads::MainProtocol::TwoWayLocalWithError>;
};

template <>
struct WireNaturalConversionTraits<
    ::fidl::WireResponse<::test_protocolpayloads::MainProtocol::TwoWayImport>,
    ::fidl::Response<::test_protocolpayloads::MainProtocol::TwoWayImport>> {
  static ::fidl::Response<::test_protocolpayloads::MainProtocol::TwoWayImport>
  ToNatural(
      ::fidl::WireResponse<::test_protocolpayloads::MainProtocol::TwoWayImport>
          src);
};

template <>
struct NaturalTypeForWireType<
    ::fidl::WireResponse<::test_protocolpayloads::MainProtocol::TwoWayImport>> {
  using type =
      ::fidl::Response<::test_protocolpayloads::MainProtocol::TwoWayImport>;
};

template <>
struct WireNaturalConversionTraits<
    ::fidl::WireResponse<
        ::test_protocolpayloads::MainProtocol::TwoWayImportWithError>,
    ::fidl::Response<
        ::test_protocolpayloads::MainProtocol::TwoWayImportWithError>> {
  static ::fidl::Response<
      ::test_protocolpayloads::MainProtocol::TwoWayImportWithError>
  ToNatural(::fidl::WireResponse<
            ::test_protocolpayloads::MainProtocol::TwoWayImportWithError>
                src);
};

template <>
struct NaturalTypeForWireType<::fidl::WireResponse<
    ::test_protocolpayloads::MainProtocol::TwoWayImportWithError>> {
  using type = ::fidl::Response<
      ::test_protocolpayloads::MainProtocol::TwoWayImportWithError>;
};

template <>
struct WireNaturalConversionTraits<
    ::fidl::WireResponse<::test_protocolpayloads::MainProtocol::TwoWayAnon>,
    ::fidl::Response<::test_protocolpayloads::MainProtocol::TwoWayAnon>> {
  static ::fidl::Response<::test_protocolpayloads::MainProtocol::TwoWayAnon>
  ToNatural(
      ::fidl::WireResponse<::test_protocolpayloads::MainProtocol::TwoWayAnon>
          src);
};

template <>
struct NaturalTypeForWireType<
    ::fidl::WireResponse<::test_protocolpayloads::MainProtocol::TwoWayAnon>> {
  using type =
      ::fidl::Response<::test_protocolpayloads::MainProtocol::TwoWayAnon>;
};

template <>
struct WireNaturalConversionTraits<
    ::fidl::WireResponse<
        ::test_protocolpayloads::MainProtocol::TwoWayAnonWithError>,
    ::fidl::Response<
        ::test_protocolpayloads::MainProtocol::TwoWayAnonWithError>> {
  static ::fidl::Response<
      ::test_protocolpayloads::MainProtocol::TwoWayAnonWithError>
  ToNatural(::fidl::WireResponse<
            ::test_protocolpayloads::MainProtocol::TwoWayAnonWithError>
                src);
};

template <>
struct NaturalTypeForWireType<::fidl::WireResponse<
    ::test_protocolpayloads::MainProtocol::TwoWayAnonWithError>> {
  using type = ::fidl::Response<
      ::test_protocolpayloads::MainProtocol::TwoWayAnonWithError>;
};

template <>
struct WireNaturalConversionTraits<
    ::fidl::WireEvent<::test_protocolpayloads::MainProtocol::OnComposed>,
    ::fidl::Event<::test_protocolpayloads::MainProtocol::OnComposed>> {
  static ::fidl::Event<::test_protocolpayloads::MainProtocol::OnComposed>
  ToNatural(
      ::fidl::WireEvent<::test_protocolpayloads::MainProtocol::OnComposed> src);
};

template <>
struct NaturalTypeForWireType<
    ::fidl::WireEvent<::test_protocolpayloads::MainProtocol::OnComposed>> {
  using type = ::fidl::Event<::test_protocolpayloads::MainProtocol::OnComposed>;
};

template <>
struct WireNaturalConversionTraits<
    ::fidl::WireEvent<
        ::test_protocolpayloads::MainProtocol::OnComposedWithError>,
    ::fidl::Event<::test_protocolpayloads::MainProtocol::OnComposedWithError>> {
  static ::fidl::Event<
      ::test_protocolpayloads::MainProtocol::OnComposedWithError>
  ToNatural(::fidl::WireEvent<
            ::test_protocolpayloads::MainProtocol::OnComposedWithError>
                src);
};

template <>
struct NaturalTypeForWireType<::fidl::WireEvent<
    ::test_protocolpayloads::MainProtocol::OnComposedWithError>> {
  using type =
      ::fidl::Event<::test_protocolpayloads::MainProtocol::OnComposedWithError>;
};

template <>
struct WireNaturalConversionTraits<
    ::fidl::WireEvent<::test_protocolpayloads::MainProtocol::OnLocal>,
    ::fidl::Event<::test_protocolpayloads::MainProtocol::OnLocal>> {
  static ::fidl::Event<::test_protocolpayloads::MainProtocol::OnLocal>
  ToNatural(
      ::fidl::WireEvent<::test_protocolpayloads::MainProtocol::OnLocal> src);
};

template <>
struct NaturalTypeForWireType<
    ::fidl::WireEvent<::test_protocolpayloads::MainProtocol::OnLocal>> {
  using type = ::fidl::Event<::test_protocolpayloads::MainProtocol::OnLocal>;
};

template <>
struct WireNaturalConversionTraits<
    ::fidl::WireEvent<::test_protocolpayloads::MainProtocol::OnLocalWithError>,
    ::fidl::Event<::test_protocolpayloads::MainProtocol::OnLocalWithError>> {
  static ::fidl::Event<::test_protocolpayloads::MainProtocol::OnLocalWithError>
  ToNatural(
      ::fidl::WireEvent<::test_protocolpayloads::MainProtocol::OnLocalWithError>
          src);
};

template <>
struct NaturalTypeForWireType<::fidl::WireEvent<
    ::test_protocolpayloads::MainProtocol::OnLocalWithError>> {
  using type =
      ::fidl::Event<::test_protocolpayloads::MainProtocol::OnLocalWithError>;
};

template <>
struct WireNaturalConversionTraits<
    ::fidl::WireEvent<::test_protocolpayloads::MainProtocol::OnImport>,
    ::fidl::Event<::test_protocolpayloads::MainProtocol::OnImport>> {
  static ::fidl::Event<::test_protocolpayloads::MainProtocol::OnImport>
  ToNatural(
      ::fidl::WireEvent<::test_protocolpayloads::MainProtocol::OnImport> src);
};

template <>
struct NaturalTypeForWireType<
    ::fidl::WireEvent<::test_protocolpayloads::MainProtocol::OnImport>> {
  using type = ::fidl::Event<::test_protocolpayloads::MainProtocol::OnImport>;
};

template <>
struct WireNaturalConversionTraits<
    ::fidl::WireEvent<::test_protocolpayloads::MainProtocol::OnImportWithError>,
    ::fidl::Event<::test_protocolpayloads::MainProtocol::OnImportWithError>> {
  static ::fidl::Event<::test_protocolpayloads::MainProtocol::OnImportWithError>
  ToNatural(::fidl::WireEvent<
            ::test_protocolpayloads::MainProtocol::OnImportWithError>
                src);
};

template <>
struct NaturalTypeForWireType<::fidl::WireEvent<
    ::test_protocolpayloads::MainProtocol::OnImportWithError>> {
  using type =
      ::fidl::Event<::test_protocolpayloads::MainProtocol::OnImportWithError>;
};

template <>
struct WireNaturalConversionTraits<
    ::fidl::WireEvent<::test_protocolpayloads::MainProtocol::OnAnon>,
    ::fidl::Event<::test_protocolpayloads::MainProtocol::OnAnon>> {
  static ::fidl::Event<::test_protocolpayloads::MainProtocol::OnAnon> ToNatural(
      ::fidl::WireEvent<::test_protocolpayloads::MainProtocol::OnAnon> src);
};

template <>
struct NaturalTypeForWireType<
    ::fidl::WireEvent<::test_protocolpayloads::MainProtocol::OnAnon>> {
  using type = ::fidl::Event<::test_protocolpayloads::MainProtocol::OnAnon>;
};

template <>
struct WireNaturalConversionTraits<
    ::fidl::WireEvent<::test_protocolpayloads::MainProtocol::OnAnonWithError>,
    ::fidl::Event<::test_protocolpayloads::MainProtocol::OnAnonWithError>> {
  static ::fidl::Event<::test_protocolpayloads::MainProtocol::OnAnonWithError>
  ToNatural(
      ::fidl::WireEvent<::test_protocolpayloads::MainProtocol::OnAnonWithError>
          src);
};

template <>
struct NaturalTypeForWireType<
    ::fidl::WireEvent<::test_protocolpayloads::MainProtocol::OnAnonWithError>> {
  using type =
      ::fidl::Event<::test_protocolpayloads::MainProtocol::OnAnonWithError>;
};
#endif  // __Fuchsia__
}  // namespace internal
}  // namespace fidl
