// WARNING: This file is machine generated by fidlgen.

#pragma once

#include <lib/fidl/internal.h>
#include <lib/fidl/llcpp/array.h>
#include <lib/fidl/llcpp/coding.h>
#include <lib/fidl/llcpp/envelope.h>
#include <lib/fidl/llcpp/message.h>
#include <lib/fidl/llcpp/message_storage.h>
#include <lib/fidl/llcpp/object_view.h>
#include <lib/fidl/llcpp/result.h>
#include <lib/fidl/llcpp/string_view.h>
#include <lib/fidl/llcpp/traits.h>
#include <lib/fidl/llcpp/vector_view.h>
#include <lib/fidl/llcpp/wire_messaging.h>
#include <lib/fit/function.h>
#include <lib/stdcompat/optional.h>

#include <algorithm>
#include <cstddef>
#include <variant>
#ifdef __Fuchsia__
#include <lib/fidl/llcpp/client.h>
#include <lib/fidl/llcpp/client_end.h>
#include <lib/fidl/llcpp/connect_service.h>
#include <lib/fidl/llcpp/server.h>
#include <lib/fidl/llcpp/server_end.h>
#include <lib/fidl/llcpp/service_handler_interface.h>
#include <lib/fidl/llcpp/sync_call.h>
#include <lib/fidl/llcpp/transaction.h>
#include <lib/fidl/txn_header.h>
#include <lib/zx/channel.h>

#endif  // __Fuchsia__
#include <bottom/llcpp/fidl.h>
#include <middle/llcpp/fidl.h>
#include <zircon/fidl.h>

namespace fidl_test_foreigntypeinresponseusedthroughcompose {
class Top;

__LOCAL extern "C" const fidl_type_t
    fidl_test_foreigntypeinresponseusedthroughcompose_TopGetFooRequestTable;

__LOCAL extern "C" const fidl_type_t
    fidl_test_foreigntypeinresponseusedthroughcompose_TopGetFooResponseTable;

class Top final {
  Top() = delete;

 public:
  class GetFoo final {
    GetFoo() = delete;
  };
};
}  // namespace fidl_test_foreigntypeinresponseusedthroughcompose
#ifdef __Fuchsia__

template <>
struct ::fidl::internal::ProtocolDetails<
    ::fidl_test_foreigntypeinresponseusedthroughcompose::Top> {};
#endif  // __Fuchsia__

#ifdef __Fuchsia__

template <>
struct ::fidl::internal::WireServerDispatcher<
    ::fidl_test_foreigntypeinresponseusedthroughcompose::Top>
    final {
  WireServerDispatcher() = delete;
  static ::fidl::DispatchResult TryDispatch(
      ::fidl::WireServer<
          ::fidl_test_foreigntypeinresponseusedthroughcompose::Top>* impl,
      ::fidl::IncomingMessage& msg, ::fidl::Transaction* txn);
  static ::fidl::DispatchResult Dispatch(
      ::fidl::WireServer<
          ::fidl_test_foreigntypeinresponseusedthroughcompose::Top>* impl,
      ::fidl::IncomingMessage&& msg, ::fidl::Transaction* txn);
};
#endif  // __Fuchsia__

template <>
struct ::fidl::WireRequest<
    ::fidl_test_foreigntypeinresponseusedthroughcompose::Top::GetFoo>
    final {
  FIDL_ALIGNDECL
  fidl_message_header_t _hdr;
  explicit WireRequest(zx_txid_t _txid) { _InitHeader(_txid); }

  static constexpr const fidl_type_t* Type =
      &::fidl::_llcpp_coding_AnyZeroArgMessageTable;
  static constexpr uint32_t MaxNumHandles = 0;
  static constexpr uint32_t PrimarySize = 16;
  static constexpr uint32_t MaxOutOfLine = 0;
  static constexpr uint32_t AltPrimarySize = 16;
  static constexpr uint32_t AltMaxOutOfLine = 0;
  static constexpr bool HasFlexibleEnvelope = false;
  static constexpr bool HasPointer = false;
  static constexpr ::fidl::internal::TransactionalMessageKind MessageKind =
      ::fidl::internal::TransactionalMessageKind::kRequest;
  using ResponseType = ::fidl::WireResponse<
      ::fidl_test_foreigntypeinresponseusedthroughcompose::Top::GetFoo>;

  class UnownedEncodedMessage final {
   public:
    UnownedEncodedMessage(uint8_t* _backing_buffer,
                          uint32_t _backing_buffer_size, zx_txid_t _txid)
        : UnownedEncodedMessage(::fidl::internal::IovecBufferSize,
                                _backing_buffer, _backing_buffer_size, _txid) {}
    UnownedEncodedMessage(uint32_t _iovec_capacity, uint8_t* _backing_buffer,
                          uint32_t _backing_buffer_size, zx_txid_t _txid)
        : message_(::fidl::OutgoingMessage::ConstructorArgs{
              .iovecs = iovecs_,
              .iovec_capacity = _iovec_capacity,
              .backing_buffer = _backing_buffer,
              .backing_buffer_capacity = _backing_buffer_size,
          }) {
      ZX_ASSERT(_iovec_capacity <= std::size(iovecs_));
      FIDL_ALIGNDECL WireRequest _request(_txid);
      message_.Encode<WireRequest>(&_request);
    }
    UnownedEncodedMessage(uint8_t* _backing_buffer,
                          uint32_t _backing_buffer_size, WireRequest* request)
        : UnownedEncodedMessage(::fidl::internal::IovecBufferSize,
                                _backing_buffer, _backing_buffer_size,
                                request) {}
    UnownedEncodedMessage(uint32_t _iovec_capacity, uint8_t* _backing_buffer,
                          uint32_t _backing_buffer_size, WireRequest* request)
        : message_(::fidl::OutgoingMessage::ConstructorArgs{
              .iovecs = iovecs_,
              .iovec_capacity = _iovec_capacity,
              .backing_buffer = _backing_buffer,
              .backing_buffer_capacity = _backing_buffer_size,
          }) {
      ZX_ASSERT(_iovec_capacity <= std::size(iovecs_));
      message_.Encode<WireRequest>(request);
    }
    UnownedEncodedMessage(const UnownedEncodedMessage&) = delete;
    UnownedEncodedMessage(UnownedEncodedMessage&&) = delete;
    UnownedEncodedMessage* operator=(const UnownedEncodedMessage&) = delete;
    UnownedEncodedMessage* operator=(UnownedEncodedMessage&&) = delete;

    zx_status_t status() const { return message_.status(); }
#ifdef __Fuchsia__
    const char* status_string() const { return message_.status_string(); }
#endif  // __Fuchsia__
    bool ok() const { return message_.status() == ZX_OK; }
    std::string FormatDescription() const {
      return message_.FormatDescription();
    }
    const char* lossy_description() const {
      return message_.lossy_description();
    }
    const ::fidl::Result& error() const { return message_.error(); }

    ::fidl::OutgoingMessage& GetOutgoingMessage() { return message_; }
#ifdef __Fuchsia__
    template <typename ChannelLike>
    void Write(ChannelLike&& client) {
      message_.Write(std::forward<ChannelLike>(client));
    }
#endif  // __Fuchsia__
   private:
    ::fidl::internal::IovecBuffer iovecs_;
    ::fidl::OutgoingMessage message_;
  };

  class OwnedEncodedMessage final {
   public:
    explicit OwnedEncodedMessage(zx_txid_t _txid)
        : message_(1u, backing_buffer_.data(), backing_buffer_.size(), _txid) {}
    // Internal constructor.
    explicit OwnedEncodedMessage(
        ::fidl::internal::AllowUnownedInputRef allow_unowned, zx_txid_t _txid)
        : message_(::fidl::internal::IovecBufferSize, backing_buffer_.data(),
                   backing_buffer_.size(), _txid) {}
    explicit OwnedEncodedMessage(WireRequest* request)
        : message_(1u, backing_buffer_.data(), backing_buffer_.size(),
                   request) {}
    // Internal constructor.
    explicit OwnedEncodedMessage(
        ::fidl::internal::AllowUnownedInputRef allow_unowned,
        WireRequest* request)
        : message_(::fidl::internal::IovecBufferSize, backing_buffer_.data(),
                   backing_buffer_.size(), request) {}
    OwnedEncodedMessage(const OwnedEncodedMessage&) = delete;
    OwnedEncodedMessage(OwnedEncodedMessage&&) = delete;
    OwnedEncodedMessage* operator=(const OwnedEncodedMessage&) = delete;
    OwnedEncodedMessage* operator=(OwnedEncodedMessage&&) = delete;

    zx_status_t status() const { return message_.status(); }
#ifdef __Fuchsia__
    const char* status_string() const { return message_.status_string(); }
#endif  // __Fuchsia__
    bool ok() const { return message_.ok(); }
    std::string FormatDescription() const {
      return message_.FormatDescription();
    }
    const char* lossy_description() const {
      return message_.lossy_description();
    }
    const ::fidl::Result& error() const { return message_.error(); }

    ::fidl::OutgoingMessage& GetOutgoingMessage() {
      return message_.GetOutgoingMessage();
    }
#ifdef __Fuchsia__
    template <typename ChannelLike>
    void Write(ChannelLike&& client) {
      message_.Write(std::forward<ChannelLike>(client));
    }
#endif  // __Fuchsia__
   private:
    ::fidl::internal::InlineMessageBuffer<16> backing_buffer_;
    UnownedEncodedMessage message_;
  };

 public:
  class DecodedMessage final
      : public ::fidl::internal::DecodedMessageBase<::fidl::WireRequest<
            ::fidl_test_foreigntypeinresponseusedthroughcompose::Top::GetFoo>> {
   public:
    using DecodedMessageBase<::fidl::WireRequest<
        ::fidl_test_foreigntypeinresponseusedthroughcompose::Top::GetFoo>>::
        DecodedMessageBase;

    DecodedMessage(uint8_t* bytes, uint32_t byte_actual,
                   zx_handle_info_t* handles = nullptr,
                   uint32_t handle_actual = 0)
        : DecodedMessageBase(::fidl::IncomingMessage(bytes, byte_actual,
                                                     handles, handle_actual)) {}

    ::fidl::WireRequest<
        ::fidl_test_foreigntypeinresponseusedthroughcompose::Top::GetFoo>*
    PrimaryObject() {
      ZX_DEBUG_ASSERT(ok());
      return reinterpret_cast<::fidl::WireRequest<
          ::fidl_test_foreigntypeinresponseusedthroughcompose::Top::GetFoo>*>(
          bytes());
    }

    // Release the ownership of the decoded message. That means that the handles
    // won't be closed When the object is destroyed. After calling this method,
    // the |DecodedMessage| object should not be used anymore.
    void ReleasePrimaryObject() { ResetBytes(); }
  };

 private:
  void _InitHeader(zx_txid_t _txid);
};
template <>
struct ::fidl::WireResponse<
    ::fidl_test_foreigntypeinresponseusedthroughcompose::Top::GetFoo>
    final {
  FIDL_ALIGNDECL
  fidl_message_header_t _hdr;
  ::bottom::wire::Foo foo;
  explicit WireResponse(const ::bottom::wire::Foo& foo) : foo(foo) {
    _InitHeader();
  }
  WireResponse() { _InitHeader(); }

  static constexpr const fidl_type_t* Type =
      &::fidl_test_foreigntypeinresponseusedthroughcompose::
          fidl_test_foreigntypeinresponseusedthroughcompose_TopGetFooResponseTable;
  static constexpr uint32_t MaxNumHandles = 0;
  static constexpr uint32_t PrimarySize = 24;
  static constexpr uint32_t MaxOutOfLine = 0;
  static constexpr bool HasFlexibleEnvelope = false;
  static constexpr bool HasPointer = false;
  static constexpr ::fidl::internal::TransactionalMessageKind MessageKind =
      ::fidl::internal::TransactionalMessageKind::kResponse;

  class UnownedEncodedMessage final {
   public:
    UnownedEncodedMessage(uint8_t* _backing_buffer,
                          uint32_t _backing_buffer_size,
                          const ::bottom::wire::Foo& foo)
        : UnownedEncodedMessage(::fidl::internal::IovecBufferSize,
                                _backing_buffer, _backing_buffer_size, foo) {}
    UnownedEncodedMessage(uint32_t _iovec_capacity, uint8_t* _backing_buffer,
                          uint32_t _backing_buffer_size,
                          const ::bottom::wire::Foo& foo)
        : message_(::fidl::OutgoingMessage::ConstructorArgs{
              .iovecs = iovecs_,
              .iovec_capacity = _iovec_capacity,
              .backing_buffer = _backing_buffer,
              .backing_buffer_capacity = _backing_buffer_size,
          }) {
      ZX_ASSERT(_iovec_capacity <= std::size(iovecs_));
      FIDL_ALIGNDECL WireResponse _response{foo};
      message_.Encode<::fidl::WireResponse<
          ::fidl_test_foreigntypeinresponseusedthroughcompose::Top::GetFoo>>(
          &_response);
    }
    UnownedEncodedMessage(uint8_t* _backing_buffer,
                          uint32_t _backing_buffer_size, WireResponse* response)
        : UnownedEncodedMessage(::fidl::internal::IovecBufferSize,
                                _backing_buffer, _backing_buffer_size,
                                response) {}
    UnownedEncodedMessage(uint32_t _iovec_capacity, uint8_t* _backing_buffer,
                          uint32_t _backing_buffer_size, WireResponse* response)
        : message_(::fidl::OutgoingMessage::ConstructorArgs{
              .iovecs = iovecs_,
              .iovec_capacity = _iovec_capacity,
              .backing_buffer = _backing_buffer,
              .backing_buffer_capacity = _backing_buffer_size,
          }) {
      ZX_ASSERT(_iovec_capacity <= std::size(iovecs_));
      message_.Encode<::fidl::WireResponse<
          ::fidl_test_foreigntypeinresponseusedthroughcompose::Top::GetFoo>>(
          response);
    }
    UnownedEncodedMessage(const UnownedEncodedMessage&) = delete;
    UnownedEncodedMessage(UnownedEncodedMessage&&) = delete;
    UnownedEncodedMessage* operator=(const UnownedEncodedMessage&) = delete;
    UnownedEncodedMessage* operator=(UnownedEncodedMessage&&) = delete;

    zx_status_t status() const { return message_.status(); }
#ifdef __Fuchsia__
    const char* status_string() const { return message_.status_string(); }
#endif  // __Fuchsia__
    bool ok() const { return message_.status() == ZX_OK; }
    std::string FormatDescription() const {
      return message_.FormatDescription();
    }
    const char* lossy_description() const {
      return message_.lossy_description();
    }
    const ::fidl::Result& error() const { return message_.error(); }

    ::fidl::OutgoingMessage& GetOutgoingMessage() { return message_; }
#ifdef __Fuchsia__
    template <typename ChannelLike>
    void Write(ChannelLike&& client) {
      message_.Write(std::forward<ChannelLike>(client));
    }
#endif  // __Fuchsia__
   private:
    ::fidl::internal::IovecBuffer iovecs_;
    ::fidl::OutgoingMessage message_;
  };

  class OwnedEncodedMessage final {
   public:
    explicit OwnedEncodedMessage(const ::bottom::wire::Foo& foo)
        : message_(1u, backing_buffer_.data(), backing_buffer_.size(), foo) {}
    // Internal constructor.
    explicit OwnedEncodedMessage(
        ::fidl::internal::AllowUnownedInputRef allow_unowned,
        const ::bottom::wire::Foo& foo)
        : message_(::fidl::internal::IovecBufferSize, backing_buffer_.data(),
                   backing_buffer_.size(), foo) {}
    explicit OwnedEncodedMessage(
        ::fidl::WireResponse<
            ::fidl_test_foreigntypeinresponseusedthroughcompose::Top::GetFoo>*
            response)
        : message_(1u, backing_buffer_.data(), backing_buffer_.size(),
                   response) {}
    // Internal constructor.
    explicit OwnedEncodedMessage(
        ::fidl::internal::AllowUnownedInputRef allow_unowned,
        ::fidl::WireResponse<
            ::fidl_test_foreigntypeinresponseusedthroughcompose::Top::GetFoo>*
            response)
        : message_(::fidl::internal::IovecBufferSize, backing_buffer_.data(),
                   backing_buffer_.size(), response) {}
    OwnedEncodedMessage(const OwnedEncodedMessage&) = delete;
    OwnedEncodedMessage(OwnedEncodedMessage&&) = delete;
    OwnedEncodedMessage* operator=(const OwnedEncodedMessage&) = delete;
    OwnedEncodedMessage* operator=(OwnedEncodedMessage&&) = delete;

    zx_status_t status() const { return message_.status(); }
#ifdef __Fuchsia__
    const char* status_string() const { return message_.status_string(); }
#endif  // __Fuchsia__
    bool ok() const { return message_.ok(); }
    std::string FormatDescription() const {
      return message_.FormatDescription();
    }
    const char* lossy_description() const {
      return message_.lossy_description();
    }
    const ::fidl::Result& error() const { return message_.error(); }

    ::fidl::OutgoingMessage& GetOutgoingMessage() {
      return message_.GetOutgoingMessage();
    }
#ifdef __Fuchsia__
    template <typename ChannelLike>
    void Write(ChannelLike&& client) {
      message_.Write(std::forward<ChannelLike>(client));
    }
#endif  // __Fuchsia__
   private:
    ::fidl::internal::InlineMessageBuffer<24> backing_buffer_;
    UnownedEncodedMessage message_;
  };

 public:
  class DecodedMessage final
      : public ::fidl::internal::DecodedMessageBase<::fidl::WireResponse<
            ::fidl_test_foreigntypeinresponseusedthroughcompose::Top::GetFoo>> {
   public:
    using DecodedMessageBase<::fidl::WireResponse<
        ::fidl_test_foreigntypeinresponseusedthroughcompose::Top::GetFoo>>::
        DecodedMessageBase;

    DecodedMessage(uint8_t* bytes, uint32_t byte_actual,
                   zx_handle_info_t* handles = nullptr,
                   uint32_t handle_actual = 0)
        : DecodedMessageBase(::fidl::IncomingMessage(bytes, byte_actual,
                                                     handles, handle_actual)) {}

    ::fidl::WireResponse<
        ::fidl_test_foreigntypeinresponseusedthroughcompose::Top::GetFoo>*
    PrimaryObject() {
      ZX_DEBUG_ASSERT(ok());
      return reinterpret_cast<::fidl::WireResponse<
          ::fidl_test_foreigntypeinresponseusedthroughcompose::Top::GetFoo>*>(
          bytes());
    }

    // Release the ownership of the decoded message. That means that the handles
    // won't be closed When the object is destroyed. After calling this method,
    // the |DecodedMessage| object should not be used anymore.
    void ReleasePrimaryObject() { ResetBytes(); }
  };

 private:
  void _InitHeader();
};
#ifdef __Fuchsia__

template <>
class ::fidl::WireResult<
    ::fidl_test_foreigntypeinresponseusedthroughcompose::Top::GetFoo>
    final : public ::fidl::Result {
 public:
  explicit WireResult(::fidl::UnownedClientEnd<
                      ::fidl_test_foreigntypeinresponseusedthroughcompose::Top>
                          _client);
  WireResult(::fidl::UnownedClientEnd<
                 ::fidl_test_foreigntypeinresponseusedthroughcompose::Top>
                 _client,
             zx_time_t _deadline);
  explicit WireResult(const ::fidl::Result& result) : ::fidl::Result(result) {}
  WireResult(WireResult&&) = delete;
  WireResult(const WireResult&) = delete;
  WireResult* operator=(WireResult&&) = delete;
  WireResult* operator=(const WireResult&) = delete;
  ~WireResult() = default;

  ::fidl::WireResponse<
      ::fidl_test_foreigntypeinresponseusedthroughcompose::Top::GetFoo>*
  Unwrap() {
    ZX_DEBUG_ASSERT(ok());
    return reinterpret_cast<::fidl::WireResponse<
        ::fidl_test_foreigntypeinresponseusedthroughcompose::Top::GetFoo>*>(
        bytes_.data());
  }
  const ::fidl::WireResponse<
      ::fidl_test_foreigntypeinresponseusedthroughcompose::Top::GetFoo>*
  Unwrap() const {
    ZX_DEBUG_ASSERT(ok());
    return reinterpret_cast<const ::fidl::WireResponse<
        ::fidl_test_foreigntypeinresponseusedthroughcompose::Top::GetFoo>*>(
        bytes_.data());
  }

  ::fidl::WireResponse<
      ::fidl_test_foreigntypeinresponseusedthroughcompose::Top::GetFoo>&
  value() {
    return *Unwrap();
  }
  const ::fidl::WireResponse<
      ::fidl_test_foreigntypeinresponseusedthroughcompose::Top::GetFoo>&
  value() const {
    return *Unwrap();
  }

  ::fidl::WireResponse<
      ::fidl_test_foreigntypeinresponseusedthroughcompose::Top::GetFoo>*
  operator->() {
    return &value();
  }
  const ::fidl::WireResponse<
      ::fidl_test_foreigntypeinresponseusedthroughcompose::Top::GetFoo>*
  operator->() const {
    return &value();
  }

  ::fidl::WireResponse<
      ::fidl_test_foreigntypeinresponseusedthroughcompose::Top::GetFoo>&
  operator*() {
    return value();
  }
  const ::fidl::WireResponse<
      ::fidl_test_foreigntypeinresponseusedthroughcompose::Top::GetFoo>&
  operator*() const {
    return value();
  }

 private:
  ::fidl::internal::InlineMessageBuffer<24> bytes_;
};
template <>
class ::fidl::WireUnownedResult<
    ::fidl_test_foreigntypeinresponseusedthroughcompose::Top::GetFoo>
    final : public ::fidl::Result {
 public:
  explicit WireUnownedResult(
      ::fidl::UnownedClientEnd<
          ::fidl_test_foreigntypeinresponseusedthroughcompose::Top>
          _client,
      uint8_t* _response_bytes, uint32_t _response_byte_capacity);
  explicit WireUnownedResult(const ::fidl::Result& result)
      : ::fidl::Result(result) {}
  WireUnownedResult(WireUnownedResult&&) = delete;
  WireUnownedResult(const WireUnownedResult&) = delete;
  WireUnownedResult* operator=(WireUnownedResult&&) = delete;
  WireUnownedResult* operator=(const WireUnownedResult&) = delete;
  ~WireUnownedResult() = default;

  ::fidl::WireResponse<
      ::fidl_test_foreigntypeinresponseusedthroughcompose::Top::GetFoo>*
  Unwrap() {
    ZX_DEBUG_ASSERT(ok());
    return reinterpret_cast<::fidl::WireResponse<
        ::fidl_test_foreigntypeinresponseusedthroughcompose::Top::GetFoo>*>(
        bytes_);
  }
  const ::fidl::WireResponse<
      ::fidl_test_foreigntypeinresponseusedthroughcompose::Top::GetFoo>*
  Unwrap() const {
    ZX_DEBUG_ASSERT(ok());
    return reinterpret_cast<const ::fidl::WireResponse<
        ::fidl_test_foreigntypeinresponseusedthroughcompose::Top::GetFoo>*>(
        bytes_);
  }

  ::fidl::WireResponse<
      ::fidl_test_foreigntypeinresponseusedthroughcompose::Top::GetFoo>&
  value() {
    return *Unwrap();
  }
  const ::fidl::WireResponse<
      ::fidl_test_foreigntypeinresponseusedthroughcompose::Top::GetFoo>&
  value() const {
    return *Unwrap();
  }

  ::fidl::WireResponse<
      ::fidl_test_foreigntypeinresponseusedthroughcompose::Top::GetFoo>*
  operator->() {
    return &value();
  }
  const ::fidl::WireResponse<
      ::fidl_test_foreigntypeinresponseusedthroughcompose::Top::GetFoo>*
  operator->() const {
    return &value();
  }

  ::fidl::WireResponse<
      ::fidl_test_foreigntypeinresponseusedthroughcompose::Top::GetFoo>&
  operator*() {
    return value();
  }
  const ::fidl::WireResponse<
      ::fidl_test_foreigntypeinresponseusedthroughcompose::Top::GetFoo>&
  operator*() const {
    return value();
  }

 private:
  uint8_t* bytes_;
};

// Methods to make a sync FIDL call directly on an unowned channel or a
// const reference to a
// |fidl::ClientEnd<::fidl_test_foreigntypeinresponseusedthroughcompose::Top>|,
// avoiding setting up a client.
template <>
class ::fidl::internal::WireCaller<
    ::fidl_test_foreigntypeinresponseusedthroughcompose::Top>
    final {
 public:
  explicit WireCaller(::fidl::UnownedClientEnd<
                      ::fidl_test_foreigntypeinresponseusedthroughcompose::Top>
                          client_end)
      : client_end_(client_end) {}

  // Allocates 40 bytes of message buffer on the stack. No heap allocation
  // necessary.
  static ::fidl::WireResult<
      ::fidl_test_foreigntypeinresponseusedthroughcompose::Top::GetFoo>
  GetFoo(::fidl::UnownedClientEnd<
         ::fidl_test_foreigntypeinresponseusedthroughcompose::Top>
             _client_end) {
    return ::fidl::WireResult<
        ::fidl_test_foreigntypeinresponseusedthroughcompose::Top::GetFoo>(
        _client_end);
  }
  // Allocates 40 bytes of message buffer on the stack. No heap allocation
  // necessary.
  ::fidl::WireResult<
      ::fidl_test_foreigntypeinresponseusedthroughcompose::Top::GetFoo>
  GetFoo() && {
    return ::fidl::WireResult<
        ::fidl_test_foreigntypeinresponseusedthroughcompose::Top::GetFoo>(
        client_end_);
  }

  // Caller provides the backing storage for FIDL message via request and
  // response buffers.
  static ::fidl::WireUnownedResult<
      ::fidl_test_foreigntypeinresponseusedthroughcompose::Top::GetFoo>
  GetFoo(::fidl::UnownedClientEnd<
             ::fidl_test_foreigntypeinresponseusedthroughcompose::Top>
             _client_end,
         ::fidl::BufferSpan _response_buffer) {
    return ::fidl::WireUnownedResult<
        ::fidl_test_foreigntypeinresponseusedthroughcompose::Top::GetFoo>(
        _client_end, _response_buffer.data, _response_buffer.capacity);
  }
  // Caller provides the backing storage for FIDL message via request and
  // response buffers.
  ::fidl::WireUnownedResult<
      ::fidl_test_foreigntypeinresponseusedthroughcompose::Top::GetFoo>
  GetFoo(::fidl::BufferSpan _response_buffer) && {
    return ::fidl::WireUnownedResult<
        ::fidl_test_foreigntypeinresponseusedthroughcompose::Top::GetFoo>(
        client_end_, _response_buffer.data, _response_buffer.capacity);
  }

 private:
  ::fidl::UnownedClientEnd<
      ::fidl_test_foreigntypeinresponseusedthroughcompose::Top>
      client_end_;
};
template <>
class ::fidl::internal::WireEventHandlerInterface<
    ::fidl_test_foreigntypeinresponseusedthroughcompose::Top> {
 public:
  WireEventHandlerInterface() = default;
  virtual ~WireEventHandlerInterface() = default;
};

template <>
class ::fidl::WireAsyncEventHandler<
    ::fidl_test_foreigntypeinresponseusedthroughcompose::Top>
    : public ::fidl::internal::WireEventHandlerInterface<
          ::fidl_test_foreigntypeinresponseusedthroughcompose::Top> {
 public:
  WireAsyncEventHandler() = default;

  virtual void Unbound(::fidl::UnbindInfo info) {}
};

template <>
class ::fidl::WireSyncEventHandler<
    ::fidl_test_foreigntypeinresponseusedthroughcompose::Top>
    : public ::fidl::internal::WireEventHandlerInterface<
          ::fidl_test_foreigntypeinresponseusedthroughcompose::Top> {
 public:
  WireSyncEventHandler() = default;

  // Method called when an unknown event is found. This methods gives the status
  // which, in this case, is returned by HandleOneEvent.
  virtual zx_status_t Unknown() = 0;

  // Handle all possible events defined in this protocol.
  // Blocks to consume exactly one message from the channel, then call the
  // corresponding virtual method.
  ::fidl::Result HandleOneEvent(
      ::fidl::UnownedClientEnd<
          ::fidl_test_foreigntypeinresponseusedthroughcompose::Top>
          client_end);
};
template <>
class ::fidl::WireSyncClient<
    ::fidl_test_foreigntypeinresponseusedthroughcompose::Top>
    final {
 public:
  WireSyncClient() = default;

  explicit WireSyncClient(
      ::fidl::ClientEnd<
          ::fidl_test_foreigntypeinresponseusedthroughcompose::Top>
          client_end)
      : client_end_(std::move(client_end)) {}

  ~WireSyncClient() = default;
  WireSyncClient(WireSyncClient&&) = default;
  WireSyncClient& operator=(WireSyncClient&&) = default;

  const ::fidl::ClientEnd<
      ::fidl_test_foreigntypeinresponseusedthroughcompose::Top>&
  client_end() const {
    return client_end_;
  }
  ::fidl::ClientEnd<::fidl_test_foreigntypeinresponseusedthroughcompose::Top>&
  client_end() {
    return client_end_;
  }

  const ::zx::channel& channel() const { return client_end_.channel(); }
  ::zx::channel* mutable_channel() { return &client_end_.channel(); }

  // Allocates 40 bytes of message buffer on the stack. No heap allocation
  // necessary.
  ::fidl::WireResult<
      ::fidl_test_foreigntypeinresponseusedthroughcompose::Top::GetFoo>
  GetFoo() {
    return ::fidl::WireResult<
        ::fidl_test_foreigntypeinresponseusedthroughcompose::Top::GetFoo>(
        this->client_end());
  }

  // Caller provides the backing storage for FIDL message via request and
  // response buffers.
  ::fidl::WireUnownedResult<
      ::fidl_test_foreigntypeinresponseusedthroughcompose::Top::GetFoo>
  GetFoo(::fidl::BufferSpan _response_buffer) {
    return ::fidl::WireUnownedResult<
        ::fidl_test_foreigntypeinresponseusedthroughcompose::Top::GetFoo>(
        this->client_end(), _response_buffer.data, _response_buffer.capacity);
  }

 private:
  ::fidl::ClientEnd<::fidl_test_foreigntypeinresponseusedthroughcompose::Top>
      client_end_;
};

// Pure-virtual interface to be implemented by a server.
// This interface uses typed channels (i.e. |fidl::ClientEnd<SomeProtocol>|
// and |fidl::ServerEnd<SomeProtocol>|).
template <>
class ::fidl::WireServer<
    ::fidl_test_foreigntypeinresponseusedthroughcompose::Top>
    : public ::fidl::internal::IncomingMessageDispatcher {
 public:
  WireServer() = default;
  virtual ~WireServer() = default;

  // The FIDL protocol type that is implemented by this server.
  using _EnclosingProtocol =
      ::fidl_test_foreigntypeinresponseusedthroughcompose::Top;

  class GetFooCompleterBase : public ::fidl::CompleterBase {
   public:
    // In the following methods, the return value indicates internal errors
    // during the reply, such as encoding or writing to the transport. Note that
    // any error will automatically lead to the destruction of the binding,
    // after which the |on_unbound| callback will be triggered with a detailed
    // reason.
    //
    // See //zircon/system/ulib/fidl/include/lib/fidl/llcpp/server.h.
    //
    // Because the reply status is identical to the unbinding status, it can be
    // safely ignored.
    ::fidl::Result Reply(const ::bottom::wire::Foo& foo);
    ::fidl::Result Reply(::fidl::BufferSpan _buffer,
                         const ::bottom::wire::Foo& foo);

   protected:
    using ::fidl::CompleterBase::CompleterBase;
  };
  using GetFooCompleter = ::fidl::Completer<GetFooCompleterBase>;
  class GetFooRequestView {
   public:
    GetFooRequestView(
        ::fidl::WireRequest<
            ::fidl_test_foreigntypeinresponseusedthroughcompose::Top::GetFoo>*
            request)
        : request_(request) {}
    ::fidl::WireRequest<
        ::fidl_test_foreigntypeinresponseusedthroughcompose::Top::GetFoo>*
    operator->() const {
      return request_;
    }

   private:
    ::fidl::WireRequest<
        ::fidl_test_foreigntypeinresponseusedthroughcompose::Top::GetFoo>*
        request_;
  };

  virtual void GetFoo(GetFooRequestView request,
                      GetFooCompleter::Sync& _completer) = 0;

 private:
  ::fidl::DispatchResult dispatch_message(::fidl::IncomingMessage&& msg,
                                          ::fidl::Transaction* txn) final;
};
#endif  // __Fuchsia__

namespace fidl {

template <>
struct IsFidlType<::fidl::WireRequest<
    ::fidl_test_foreigntypeinresponseusedthroughcompose::Top::GetFoo>>
    : public std::true_type {};
template <>
struct IsFidlMessage<::fidl::WireRequest<
    ::fidl_test_foreigntypeinresponseusedthroughcompose::Top::GetFoo>>
    : public std::true_type {};
static_assert(
    sizeof(::fidl::WireRequest<
           ::fidl_test_foreigntypeinresponseusedthroughcompose::Top::GetFoo>) ==
    ::fidl::WireRequest<::fidl_test_foreigntypeinresponseusedthroughcompose::
                            Top::GetFoo>::PrimarySize);

template <>
struct IsFidlType<::fidl::WireResponse<
    ::fidl_test_foreigntypeinresponseusedthroughcompose::Top::GetFoo>>
    : public std::true_type {};
template <>
struct IsFidlMessage<::fidl::WireResponse<
    ::fidl_test_foreigntypeinresponseusedthroughcompose::Top::GetFoo>>
    : public std::true_type {};
static_assert(
    sizeof(::fidl::WireResponse<
           ::fidl_test_foreigntypeinresponseusedthroughcompose::Top::GetFoo>) ==
    ::fidl::WireResponse<::fidl_test_foreigntypeinresponseusedthroughcompose::
                             Top::GetFoo>::PrimarySize);
static_assert(
    offsetof(
        ::fidl::WireResponse<
            ::fidl_test_foreigntypeinresponseusedthroughcompose::Top::GetFoo>,
        foo) == 16);
}  // namespace fidl
#ifdef __Fuchsia__

template <>
class ::fidl::WireResponseContext<
    ::fidl_test_foreigntypeinresponseusedthroughcompose::Top::GetFoo>
    : public ::fidl::internal::ResponseContext {
 public:
  WireResponseContext();

  virtual void OnReply(
      ::fidl::WireResponse<
          ::fidl_test_foreigntypeinresponseusedthroughcompose::Top::GetFoo>*
          message) = 0;

 private:
  zx_status_t OnRawReply(::fidl::IncomingMessage&& msg) override;
};
#endif  // __Fuchsia__

#ifdef __Fuchsia__

template <>
class ::fidl::internal::WireClientImpl<
    ::fidl_test_foreigntypeinresponseusedthroughcompose::Top>
    final : private ::fidl::internal::ClientBase {
 public:
  // Asynchronous variant of |Top.GetFoo()|.
  // Allocates 16 bytes of request buffer on the stack. The callback is stored
  // on the heap.
  ::fidl::Result GetFoo(
      ::fit::callback<void(
          ::fidl::WireResponse<
              ::fidl_test_foreigntypeinresponseusedthroughcompose::Top::GetFoo>*
              response)>
          _cb);

  // Asynchronous variant of |Top.GetFoo()|.
  // Caller provides the backing storage for FIDL message via request buffer.
  // Ownership of |_context| is given unsafely to the binding until |OnError|
  // or |OnReply| are called on it.
  ::fidl::Result GetFoo(
      ::fidl::WireResponseContext<
          ::fidl_test_foreigntypeinresponseusedthroughcompose::Top::GetFoo>*
          _context);

  // Synchronous variant of |Top.GetFoo()|.
  // Allocates 40 bytes of message buffer on the stack. No heap allocation
  // necessary.
  ::fidl::WireResult<
      ::fidl_test_foreigntypeinresponseusedthroughcompose::Top::GetFoo>
  GetFoo_Sync();

  // Synchronous variant of |Top.GetFoo()|.
  // Caller provides the backing storage for FIDL message via request and
  // response buffers.
  ::fidl::WireUnownedResult<
      ::fidl_test_foreigntypeinresponseusedthroughcompose::Top::GetFoo>
  GetFoo_Sync(::fidl::BufferSpan _response_buffer);

  ::fidl::WireAsyncEventHandler<
      ::fidl_test_foreigntypeinresponseusedthroughcompose::Top>*
  event_handler() const {
    return event_handler_.get();
  }

 private:
  friend class ::fidl::Client<
      ::fidl_test_foreigntypeinresponseusedthroughcompose::Top>;
  friend class ::fidl::internal::ControlBlock<
      ::fidl_test_foreigntypeinresponseusedthroughcompose::Top>;

  explicit WireClientImpl(
      std::shared_ptr<::fidl::WireAsyncEventHandler<
          ::fidl_test_foreigntypeinresponseusedthroughcompose::Top>>
          event_handler)
      : event_handler_(std::move(event_handler)) {}

  std::optional<::fidl::UnbindInfo> DispatchEvent(
      fidl::IncomingMessage& msg) override;

  std::shared_ptr<::fidl::WireAsyncEventHandler<
      ::fidl_test_foreigntypeinresponseusedthroughcompose::Top>>
      event_handler_;
};
#endif  // __Fuchsia__

#ifdef __Fuchsia__
// |EventSender| owns a server endpoint of a channel speaking
// the Top protocol, and can send events in that protocol.
template <>
class ::fidl::WireEventSender<
    ::fidl_test_foreigntypeinresponseusedthroughcompose::Top> {
 public:
  // Constructs an event sender with an invalid channel.
  WireEventSender() = default;

  explicit WireEventSender(
      ::fidl::ServerEnd<
          ::fidl_test_foreigntypeinresponseusedthroughcompose::Top>
          server_end)
      : server_end_(std::move(server_end)) {}

  // The underlying server channel endpoint, which may be replaced at run-time.
  const ::fidl::ServerEnd<
      ::fidl_test_foreigntypeinresponseusedthroughcompose::Top>&
  server_end() const {
    return server_end_;
  }
  ::fidl::ServerEnd<::fidl_test_foreigntypeinresponseusedthroughcompose::Top>&
  server_end() {
    return server_end_;
  }

  const ::zx::channel& channel() const { return server_end_.channel(); }
  ::zx::channel& channel() { return server_end_.channel(); }

  // Whether the underlying channel is valid.
  bool is_valid() const { return server_end_.is_valid(); }

 private:
  ::fidl::ServerEnd<::fidl_test_foreigntypeinresponseusedthroughcompose::Top>
      server_end_;
};

template <>
class ::fidl::internal::WireWeakEventSender<
    ::fidl_test_foreigntypeinresponseusedthroughcompose::Top> {
 public:
 private:
  friend class ::fidl::ServerBindingRef<
      ::fidl_test_foreigntypeinresponseusedthroughcompose::Top>;

  explicit WireWeakEventSender(
      std::weak_ptr<::fidl::internal::AsyncServerBinding<
          ::fidl_test_foreigntypeinresponseusedthroughcompose::Top>>
          binding)
      : binding_(std::move(binding)) {}

  std::weak_ptr<::fidl::internal::AsyncServerBinding<
      ::fidl_test_foreigntypeinresponseusedthroughcompose::Top>>
      binding_;
};
#endif  // __Fuchsia__
