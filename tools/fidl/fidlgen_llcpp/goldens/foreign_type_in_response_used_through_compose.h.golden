// WARNING: This file is machine generated by fidlgen.

#pragma once

#include <lib/fidl/internal.h>
#include <lib/fidl/llcpp/array.h>
#include <lib/fidl/llcpp/coding.h>
#include <lib/fidl/llcpp/envelope.h>
#include <lib/fidl/llcpp/errors.h>
#include <lib/fidl/llcpp/memory.h>
#include <lib/fidl/llcpp/message.h>
#include <lib/fidl/llcpp/message_storage.h>
#include <lib/fidl/llcpp/object_view.h>
#include <lib/fidl/llcpp/string_view.h>
#include <lib/fidl/llcpp/tracking_ptr.h>
#include <lib/fidl/llcpp/traits.h>
#include <lib/fidl/llcpp/vector_view.h>
#include <lib/fit/function.h>
#include <lib/stdcompat/optional.h>

#include <algorithm>
#include <cstddef>
#include <variant>
#ifdef __Fuchsia__
#include <lib/fidl/llcpp/client.h>
#include <lib/fidl/llcpp/client_end.h>
#include <lib/fidl/llcpp/connect_service.h>
#include <lib/fidl/llcpp/result.h>
#include <lib/fidl/llcpp/server.h>
#include <lib/fidl/llcpp/server_end.h>
#include <lib/fidl/llcpp/service_handler_interface.h>
#include <lib/fidl/llcpp/sync_call.h>
#include <lib/fidl/llcpp/transaction.h>
#include <lib/fidl/txn_header.h>
#include <lib/zx/channel.h>

#endif  // __Fuchsia__
#include <bottom/llcpp/fidl.h>
#include <middle/llcpp/fidl.h>
#include <zircon/fidl.h>

namespace fidl_test_foreigntypeinresponseusedthroughcompose {
class Top;

extern "C" const fidl_type_t
    fidl_test_foreigntypeinresponseusedthroughcompose_TopGetFooRequestTable;

extern "C" const fidl_type_t
    fidl_test_foreigntypeinresponseusedthroughcompose_TopGetFooResponseTable;

class Top final {
  Top() = delete;

 public:
  struct GetFooResponse final {
    FIDL_ALIGNDECL
    fidl_message_header_t _hdr;
    ::bottom::wire::Foo foo;
    explicit GetFooResponse(::bottom::wire::Foo& foo) : foo(std::move(foo)) {
      _InitHeader();
    }
    GetFooResponse() { _InitHeader(); }

    static constexpr const fidl_type_t* Type =
        &::fidl_test_foreigntypeinresponseusedthroughcompose::
            fidl_test_foreigntypeinresponseusedthroughcompose_TopGetFooResponseTable;
    static constexpr uint32_t MaxNumHandles = 0;
    static constexpr uint32_t PrimarySize = 24;
    static constexpr uint32_t MaxOutOfLine = 0;
    static constexpr bool HasFlexibleEnvelope = false;
    static constexpr bool HasPointer = false;
    static constexpr ::fidl::internal::TransactionalMessageKind MessageKind =
        ::fidl::internal::TransactionalMessageKind::kResponse;

   private:
    class UnownedEncodedByteMessage final {
     public:
      UnownedEncodedByteMessage(uint8_t* _bytes, uint32_t _byte_size,
                                ::bottom::wire::Foo& foo)
          : message_(_bytes, _byte_size, sizeof(GetFooResponse), nullptr, 0,
                     0) {
        FIDL_ALIGNDECL GetFooResponse _response{foo};
        message_.Encode<GetFooResponse>(&_response);
      }
      UnownedEncodedByteMessage(uint8_t* bytes, uint32_t byte_size,
                                GetFooResponse* response)
          : message_(bytes, byte_size, sizeof(GetFooResponse), nullptr, 0, 0) {
        message_.Encode<GetFooResponse>(response);
      }
      UnownedEncodedByteMessage(const UnownedEncodedByteMessage&) = delete;
      UnownedEncodedByteMessage(UnownedEncodedByteMessage&&) = delete;
      UnownedEncodedByteMessage* operator=(const UnownedEncodedByteMessage&) =
          delete;
      UnownedEncodedByteMessage* operator=(UnownedEncodedByteMessage&&) =
          delete;

      zx_status_t status() const { return message_.status(); }
#ifdef __Fuchsia__
      const char* status_string() const { return message_.status_string(); }
#endif
      bool ok() const { return message_.status() == ZX_OK; }
      const char* error() const { return message_.error(); }

      ::fidl::OutgoingByteMessage& GetOutgoingMessage() { return message_; }

#ifdef __Fuchsia__
      template <typename ChannelLike>
      void Write(ChannelLike&& client) {
        message_.Write(std::forward<ChannelLike>(client));
      }
#endif

     private:
      ::fidl::OutgoingByteMessage message_;
    };

    class UnownedEncodedIovecMessage final {
     public:
      UnownedEncodedIovecMessage(zx_channel_iovec_t* iovecs,
                                 uint32_t iovec_size,
                                 fidl_iovec_substitution_t* substitutions,
                                 uint32_t substitutions_size,
                                 ::bottom::wire::Foo& foo)
          : message_(::fidl::OutgoingIovecMessage::constructor_args{
                .iovecs = iovecs,
                .iovecs_actual = 0,
                .iovecs_capacity = iovec_size,
                .substitutions = substitutions,
                .substitutions_actual = 0,
                .substitutions_capacity = substitutions_size,
                .handles = nullptr,
                .handle_actual = 0,
                .handle_capacity = 0,
            }) {
        FIDL_ALIGNDECL GetFooResponse _response{foo};
        message_.Encode<GetFooResponse>(&_response);
      }
      UnownedEncodedIovecMessage(zx_channel_iovec_t* iovecs,
                                 uint32_t iovec_size,
                                 fidl_iovec_substitution_t* substitutions,
                                 uint32_t substitutions_size,
                                 GetFooResponse* response)
          : message_(::fidl::OutgoingIovecMessage::constructor_args{
                .iovecs = iovecs,
                .iovecs_actual = 0,
                .iovecs_capacity = iovec_size,
                .substitutions = substitutions,
                .substitutions_actual = 0,
                .substitutions_capacity = substitutions_size,
                .handles = nullptr,
                .handle_actual = 0,
                .handle_capacity = 0,
            }) {
        message_.Encode<GetFooResponse>(response);
      }
      UnownedEncodedIovecMessage(const UnownedEncodedIovecMessage&) = delete;
      UnownedEncodedIovecMessage(UnownedEncodedIovecMessage&&) = delete;
      UnownedEncodedIovecMessage* operator=(const UnownedEncodedIovecMessage&) =
          delete;
      UnownedEncodedIovecMessage* operator=(UnownedEncodedIovecMessage&&) =
          delete;

      zx_status_t status() const { return message_.status(); }
#ifdef __Fuchsia__
      const char* status_string() const { return message_.status_string(); }
#endif
      bool ok() const { return message_.status() == ZX_OK; }
      const char* error() const { return message_.error(); }

      ::fidl::OutgoingIovecMessage& GetOutgoingMessage() { return message_; }

#ifdef __Fuchsia__
      template <typename ChannelLike>
      void Write(ChannelLike&& client) {
        message_.Write(std::forward<ChannelLike>(client));
      }
#endif

     private:
      ::fidl::OutgoingIovecMessage message_;
    };

    class OwnedEncodedByteMessage final {
     public:
      explicit OwnedEncodedByteMessage(::bottom::wire::Foo& foo)
          : message_(bytes_.data(), bytes_.size(), foo) {}
      explicit OwnedEncodedByteMessage(GetFooResponse* response)
          : message_(bytes_.data(), bytes_.size(), response) {}
      OwnedEncodedByteMessage(const OwnedEncodedByteMessage&) = delete;
      OwnedEncodedByteMessage(OwnedEncodedByteMessage&&) = delete;
      OwnedEncodedByteMessage* operator=(const OwnedEncodedByteMessage&) =
          delete;
      OwnedEncodedByteMessage* operator=(OwnedEncodedByteMessage&&) = delete;

      zx_status_t status() const { return message_.status(); }
#ifdef __Fuchsia__
      const char* status_string() const { return message_.status_string(); }
#endif
      bool ok() const { return message_.ok(); }
      const char* error() const { return message_.error(); }

      ::fidl::OutgoingByteMessage& GetOutgoingMessage() {
        return message_.GetOutgoingMessage();
      }

#ifdef __Fuchsia__
      template <typename ChannelLike>
      void Write(ChannelLike&& client) {
        message_.Write(std::forward<ChannelLike>(client));
      }
#endif

     private:
      ::fidl::internal::InlineMessageBuffer<24> bytes_;
      UnownedEncodedByteMessage message_;
    };

    class OwnedEncodedIovecMessage final {
     public:
      explicit OwnedEncodedIovecMessage(::bottom::wire::Foo& foo)
          : message_(iovecs_, ::fidl::internal::kIovecBufferSize,
                     substitutions_, ::fidl::internal::kIovecBufferSize, foo) {}
      explicit OwnedEncodedIovecMessage(GetFooResponse* response)
          : message_(iovecs_, ::fidl::internal::kIovecBufferSize,
                     substitutions_, ::fidl::internal::kIovecBufferSize,
                     response) {}
      OwnedEncodedIovecMessage(const OwnedEncodedIovecMessage&) = delete;
      OwnedEncodedIovecMessage(OwnedEncodedIovecMessage&&) = delete;
      OwnedEncodedIovecMessage* operator=(const OwnedEncodedIovecMessage&) =
          delete;
      OwnedEncodedIovecMessage* operator=(OwnedEncodedIovecMessage&&) = delete;

      zx_status_t status() const { return message_.status(); }
#ifdef __Fuchsia__
      const char* status_string() const { return message_.status_string(); }
#endif
      bool ok() const { return message_.ok(); }
      const char* error() const { return message_.error(); }

      ::fidl::OutgoingIovecMessage& GetOutgoingMessage() {
        return message_.GetOutgoingMessage();
      }

#ifdef __Fuchsia__
      template <typename ChannelLike>
      void Write(ChannelLike&& client) {
        message_.Write(std::forward<ChannelLike>(client));
      }
#endif

     private:
      zx_channel_iovec_t iovecs_[::fidl::internal::kIovecBufferSize];
      fidl_iovec_substitution_t
          substitutions_[::fidl::internal::kIovecBufferSize];
      UnownedEncodedIovecMessage message_;
    };

   public:
    friend ::fidl::internal::EncodedMessageTypes<GetFooResponse>;
    using OwnedEncodedMessage = OwnedEncodedByteMessage;
    using UnownedEncodedMessage = UnownedEncodedByteMessage;

    class DecodedMessage final : public ::fidl::internal::IncomingMessage {
     public:
      DecodedMessage(uint8_t* bytes, uint32_t byte_actual,
                     zx_handle_info_t* handles = nullptr,
                     uint32_t handle_actual = 0)
          : ::fidl::internal::IncomingMessage(bytes, byte_actual, handles,
                                              handle_actual) {
        Decode<GetFooResponse>();
      }
      DecodedMessage(fidl_incoming_msg_t* msg)
          : ::fidl::internal::IncomingMessage(msg) {
        Decode<GetFooResponse>();
      }
      DecodedMessage(const DecodedMessage&) = delete;
      DecodedMessage(DecodedMessage&&) = delete;
      DecodedMessage* operator=(const DecodedMessage&) = delete;
      DecodedMessage* operator=(DecodedMessage&&) = delete;

      GetFooResponse* PrimaryObject() {
        ZX_DEBUG_ASSERT(ok());
        return reinterpret_cast<GetFooResponse*>(bytes());
      }

      // Release the ownership of the decoded message. That means that the
      // handles won't be closed When the object is destroyed. After calling
      // this method, the DecodedMessage object should not be used anymore.
      void ReleasePrimaryObject() { ResetBytes(); }
    };

   private:
    void _InitHeader();
  };
  struct GetFooRequest final {
    FIDL_ALIGNDECL
    fidl_message_header_t _hdr;
    explicit GetFooRequest(zx_txid_t _txid) { _InitHeader(_txid); }

    static constexpr const fidl_type_t* Type =
        &::fidl::_llcpp_coding_AnyZeroArgMessageTable;
    static constexpr uint32_t MaxNumHandles = 0;
    static constexpr uint32_t PrimarySize = 16;
    static constexpr uint32_t MaxOutOfLine = 0;
    static constexpr uint32_t AltPrimarySize = 16;
    static constexpr uint32_t AltMaxOutOfLine = 0;
    static constexpr bool HasFlexibleEnvelope = false;
    static constexpr bool HasPointer = false;
    static constexpr ::fidl::internal::TransactionalMessageKind MessageKind =
        ::fidl::internal::TransactionalMessageKind::kRequest;
    using ResponseType = GetFooResponse;

   private:
    class UnownedEncodedByteMessage final {
     public:
      UnownedEncodedByteMessage(uint8_t* _bytes, uint32_t _byte_size,
                                zx_txid_t _txid)
          : message_(_bytes, _byte_size, sizeof(GetFooRequest), nullptr, 0, 0) {
        FIDL_ALIGNDECL GetFooRequest _request(_txid);
        message_.Encode<GetFooRequest>(&_request);
      }
      UnownedEncodedByteMessage(uint8_t* bytes, uint32_t byte_size,
                                GetFooRequest* request)
          : message_(bytes, byte_size, sizeof(GetFooRequest), nullptr, 0, 0) {
        message_.Encode<GetFooRequest>(request);
      }
      UnownedEncodedByteMessage(const UnownedEncodedByteMessage&) = delete;
      UnownedEncodedByteMessage(UnownedEncodedByteMessage&&) = delete;
      UnownedEncodedByteMessage* operator=(const UnownedEncodedByteMessage&) =
          delete;
      UnownedEncodedByteMessage* operator=(UnownedEncodedByteMessage&&) =
          delete;

      zx_status_t status() const { return message_.status(); }
#ifdef __Fuchsia__
      const char* status_string() const { return message_.status_string(); }
#endif
      bool ok() const { return message_.status() == ZX_OK; }
      const char* error() const { return message_.error(); }

      ::fidl::OutgoingByteMessage& GetOutgoingMessage() { return message_; }

#ifdef __Fuchsia__
      template <typename ChannelLike>
      void Write(ChannelLike&& client) {
        message_.Write(std::forward<ChannelLike>(client));
      }
#endif

     private:
      ::fidl::OutgoingByteMessage message_;
    };

    class UnownedEncodedIovecMessage final {
     public:
      UnownedEncodedIovecMessage(zx_channel_iovec_t* iovecs,
                                 uint32_t iovec_size,
                                 fidl_iovec_substitution_t* substitutions,
                                 uint32_t substitutions_size, zx_txid_t _txid)
          : message_(::fidl::OutgoingIovecMessage::constructor_args{
                .iovecs = iovecs,
                .iovecs_actual = 0,
                .iovecs_capacity = iovec_size,
                .substitutions = substitutions,
                .substitutions_actual = 0,
                .substitutions_capacity = substitutions_size,
                .handles = nullptr,
                .handle_actual = 0,
                .handle_capacity = 0,
            }) {
        FIDL_ALIGNDECL GetFooRequest _request(_txid);
        message_.Encode<GetFooRequest>(&_request);
      }
      UnownedEncodedIovecMessage(zx_channel_iovec_t* iovecs,
                                 uint32_t iovec_size,
                                 fidl_iovec_substitution_t* substitutions,
                                 uint32_t substitutions_size,
                                 GetFooRequest* request)
          : message_(::fidl::OutgoingIovecMessage::constructor_args{
                .iovecs = iovecs,
                .iovecs_actual = 0,
                .iovecs_capacity = iovec_size,
                .substitutions = substitutions,
                .substitutions_actual = 0,
                .substitutions_capacity = substitutions_size,
                .handles = nullptr,
                .handle_actual = 0,
                .handle_capacity = 0,
            }) {
        message_.Encode<GetFooRequest>(request);
      }
      UnownedEncodedIovecMessage(const UnownedEncodedIovecMessage&) = delete;
      UnownedEncodedIovecMessage(UnownedEncodedIovecMessage&&) = delete;
      UnownedEncodedIovecMessage* operator=(const UnownedEncodedIovecMessage&) =
          delete;
      UnownedEncodedIovecMessage* operator=(UnownedEncodedIovecMessage&&) =
          delete;

      zx_status_t status() const { return message_.status(); }
#ifdef __Fuchsia__
      const char* status_string() const { return message_.status_string(); }
#endif
      bool ok() const { return message_.status() == ZX_OK; }
      const char* error() const { return message_.error(); }

      ::fidl::OutgoingIovecMessage& GetOutgoingMessage() { return message_; }

#ifdef __Fuchsia__
      template <typename ChannelLike>
      void Write(ChannelLike&& client) {
        message_.Write(std::forward<ChannelLike>(client));
      }
#endif

     private:
      ::fidl::OutgoingIovecMessage message_;
    };

    class OwnedEncodedByteMessage final {
     public:
      explicit OwnedEncodedByteMessage(zx_txid_t _txid)
          : message_(bytes_.data(), bytes_.size(), _txid) {}
      explicit OwnedEncodedByteMessage(GetFooRequest* request)
          : message_(bytes_.data(), bytes_.size(), request) {}
      OwnedEncodedByteMessage(const OwnedEncodedByteMessage&) = delete;
      OwnedEncodedByteMessage(OwnedEncodedByteMessage&&) = delete;
      OwnedEncodedByteMessage* operator=(const OwnedEncodedByteMessage&) =
          delete;
      OwnedEncodedByteMessage* operator=(OwnedEncodedByteMessage&&) = delete;

      zx_status_t status() const { return message_.status(); }
#ifdef __Fuchsia__
      const char* status_string() const { return message_.status_string(); }
#endif
      bool ok() const { return message_.ok(); }
      const char* error() const { return message_.error(); }

      ::fidl::OutgoingByteMessage& GetOutgoingMessage() {
        return message_.GetOutgoingMessage();
      }

#ifdef __Fuchsia__
      template <typename ChannelLike>
      void Write(ChannelLike&& client) {
        message_.Write(std::forward<ChannelLike>(client));
      }
#endif

     private:
      ::fidl::internal::InlineMessageBuffer<16> bytes_;
      UnownedEncodedByteMessage message_;
    };

    class OwnedEncodedIovecMessage final {
     public:
      explicit OwnedEncodedIovecMessage(zx_txid_t _txid)
          : message_(iovecs_, ::fidl::internal::kIovecBufferSize,
                     substitutions_, ::fidl::internal::kIovecBufferSize,
                     _txid) {}
      explicit OwnedEncodedIovecMessage(GetFooRequest* request)
          : message_(iovecs_, ::fidl::internal::kIovecBufferSize,
                     substitutions_, ::fidl::internal::kIovecBufferSize,
                     request) {}
      OwnedEncodedIovecMessage(const OwnedEncodedIovecMessage&) = delete;
      OwnedEncodedIovecMessage(OwnedEncodedIovecMessage&&) = delete;
      OwnedEncodedIovecMessage* operator=(const OwnedEncodedIovecMessage&) =
          delete;
      OwnedEncodedIovecMessage* operator=(OwnedEncodedIovecMessage&&) = delete;

      zx_status_t status() const { return message_.status(); }
#ifdef __Fuchsia__
      const char* status_string() const { return message_.status_string(); }
#endif
      bool ok() const { return message_.ok(); }
      const char* error() const { return message_.error(); }

      ::fidl::OutgoingIovecMessage& GetOutgoingMessage() {
        return message_.GetOutgoingMessage();
      }

#ifdef __Fuchsia__
      template <typename ChannelLike>
      void Write(ChannelLike&& client) {
        message_.Write(std::forward<ChannelLike>(client));
      }
#endif

     private:
      zx_channel_iovec_t iovecs_[::fidl::internal::kIovecBufferSize];
      fidl_iovec_substitution_t
          substitutions_[::fidl::internal::kIovecBufferSize];
      UnownedEncodedIovecMessage message_;
    };

   public:
    friend ::fidl::internal::EncodedMessageTypes<GetFooRequest>;
    using OwnedEncodedMessage = OwnedEncodedByteMessage;
    using UnownedEncodedMessage = UnownedEncodedByteMessage;

    class DecodedMessage final : public ::fidl::internal::IncomingMessage {
     public:
      DecodedMessage(uint8_t* bytes, uint32_t byte_actual,
                     zx_handle_info_t* handles = nullptr,
                     uint32_t handle_actual = 0)
          : ::fidl::internal::IncomingMessage(bytes, byte_actual, handles,
                                              handle_actual) {
        Decode<GetFooRequest>();
      }
      DecodedMessage(fidl_incoming_msg_t* msg)
          : ::fidl::internal::IncomingMessage(msg) {
        Decode<GetFooRequest>();
      }
      DecodedMessage(const DecodedMessage&) = delete;
      DecodedMessage(DecodedMessage&&) = delete;
      DecodedMessage* operator=(const DecodedMessage&) = delete;
      DecodedMessage* operator=(DecodedMessage&&) = delete;

      GetFooRequest* PrimaryObject() {
        ZX_DEBUG_ASSERT(ok());
        return reinterpret_cast<GetFooRequest*>(bytes());
      }

      // Release the ownership of the decoded message. That means that the
      // handles won't be closed When the object is destroyed. After calling
      // this method, the DecodedMessage object should not be used anymore.
      void ReleasePrimaryObject() { ResetBytes(); }
    };

   private:
    void _InitHeader(zx_txid_t _txid);
  };

  class EventHandlerInterface {
   public:
    EventHandlerInterface() = default;
    virtual ~EventHandlerInterface() = default;
  };

#ifdef __Fuchsia__
  // Collection of return types of FIDL calls in this protocol.
  class ResultOf final {
    ResultOf() = delete;

   public:
    class GetFoo final : public ::fidl::Result {
     public:
      explicit GetFoo(::fidl::UnownedClientEnd<
                      ::fidl_test_foreigntypeinresponseusedthroughcompose::Top>
                          _client);
      GetFoo(::fidl::UnownedClientEnd<
                 ::fidl_test_foreigntypeinresponseusedthroughcompose::Top>
                 _client,
             zx_time_t _deadline);
      explicit GetFoo(const ::fidl::Result& result) : ::fidl::Result(result) {}
      GetFoo(GetFoo&&) = delete;
      GetFoo(const GetFoo&) = delete;
      GetFoo* operator=(GetFoo&&) = delete;
      GetFoo* operator=(const GetFoo&) = delete;
      ~GetFoo() = default;

      GetFooResponse* Unwrap() {
        ZX_DEBUG_ASSERT(ok());
        return reinterpret_cast<GetFooResponse*>(bytes_.data());
      }
      const GetFooResponse* Unwrap() const {
        ZX_DEBUG_ASSERT(ok());
        return reinterpret_cast<const GetFooResponse*>(bytes_.data());
      }

      GetFooResponse& value() { return *Unwrap(); }
      const GetFooResponse& value() const { return *Unwrap(); }

      GetFooResponse* operator->() { return &value(); }
      const GetFooResponse* operator->() const { return &value(); }

      GetFooResponse& operator*() { return value(); }
      const GetFooResponse& operator*() const { return value(); }

     private:
      ::fidl::internal::InlineMessageBuffer<24> bytes_;
    };
  };

  // Collection of return types of FIDL calls in this protocol,
  // when the caller-allocate flavor or in-place call is used.
  class UnownedResultOf final {
    UnownedResultOf() = delete;

   public:
    class GetFoo final : public ::fidl::Result {
     public:
      explicit GetFoo(
          ::fidl::UnownedClientEnd<
              ::fidl_test_foreigntypeinresponseusedthroughcompose::Top>
              _client,
          uint8_t* _response_bytes, uint32_t _response_byte_capacity);
      explicit GetFoo(const ::fidl::Result& result) : ::fidl::Result(result) {}
      GetFoo(GetFoo&&) = delete;
      GetFoo(const GetFoo&) = delete;
      GetFoo* operator=(GetFoo&&) = delete;
      GetFoo* operator=(const GetFoo&) = delete;
      ~GetFoo() = default;

      GetFooResponse* Unwrap() {
        ZX_DEBUG_ASSERT(ok());
        return reinterpret_cast<GetFooResponse*>(bytes_);
      }
      const GetFooResponse* Unwrap() const {
        ZX_DEBUG_ASSERT(ok());
        return reinterpret_cast<const GetFooResponse*>(bytes_);
      }

      GetFooResponse& value() { return *Unwrap(); }
      const GetFooResponse& value() const { return *Unwrap(); }

      GetFooResponse* operator->() { return &value(); }
      const GetFooResponse* operator->() const { return &value(); }

      GetFooResponse& operator*() { return value(); }
      const GetFooResponse& operator*() const { return value(); }

     private:
      uint8_t* bytes_;
    };
  };

  // Methods to make a sync FIDL call directly on an unowned channel or a
  // const reference to a
  // |fidl::ClientEnd<::fidl_test_foreigntypeinresponseusedthroughcompose::Top>|,
  // avoiding setting up a client.
  class Call final {
    Call() = delete;

   public:
    // Allocates 40 bytes of message buffer on the stack. No heap allocation
    // necessary.
    static ResultOf::GetFoo GetFoo(
        ::fidl::UnownedClientEnd<
            ::fidl_test_foreigntypeinresponseusedthroughcompose::Top>
            _client_end) {
      return ResultOf::GetFoo(_client_end);
    }

    // Caller provides the backing storage for FIDL message via request and
    // response buffers.
    static UnownedResultOf::GetFoo GetFoo(
        ::fidl::UnownedClientEnd<
            ::fidl_test_foreigntypeinresponseusedthroughcompose::Top>
            _client_end,
        ::fidl::BufferSpan _response_buffer) {
      return UnownedResultOf::GetFoo(_client_end, _response_buffer.data,
                                     _response_buffer.capacity);
    }
  };

  class SyncClient final {
   public:
    SyncClient() = default;

    explicit SyncClient(::fidl::ClientEnd<Top> client_end)
        : client_end_(std::move(client_end)) {}

    ~SyncClient() = default;
    SyncClient(SyncClient&&) = default;
    SyncClient& operator=(SyncClient&&) = default;

    const ::fidl::ClientEnd<Top>& client_end() const { return client_end_; }
    ::fidl::ClientEnd<Top>& client_end() { return client_end_; }

    const ::zx::channel& channel() const { return client_end_.channel(); }
    ::zx::channel* mutable_channel() { return &client_end_.channel(); }

    // Allocates 40 bytes of message buffer on the stack. No heap allocation
    // necessary.
    ResultOf::GetFoo GetFoo() { return ResultOf::GetFoo(this->client_end()); }

    // Caller provides the backing storage for FIDL message via request and
    // response buffers.
    UnownedResultOf::GetFoo GetFoo(::fidl::BufferSpan _response_buffer) {
      return UnownedResultOf::GetFoo(this->client_end(), _response_buffer.data,
                                     _response_buffer.capacity);
    }

   private:
    ::fidl::ClientEnd<Top> client_end_;
  };

#ifdef __Fuchsia__
  class AsyncEventHandler;
  class GetFooResponseContext;
  class ClientImpl;
#endif

  // Pure-virtual interface to be implemented by a server.
  // This interface uses typed channels (i.e. |fidl::ClientEnd<SomeProtocol>|
  // and |fidl::ServerEnd<SomeProtocol>|).
  class Interface : public ::fidl::internal::IncomingMessageDispatcher {
   public:
    Interface() = default;
    virtual ~Interface() = default;

    // The marker protocol type within which this |Interface| class is defined.
    using _EnclosingProtocol = Top;

    class GetFooCompleterBase : public ::fidl::CompleterBase {
     public:
      // In the following methods, the return value indicates internal errors
      // during the reply, such as encoding or writing to the transport. Note
      // that any error will automatically lead to the destruction of the
      // binding, after which the |on_unbound| callback will be triggered with a
      // detailed reason.
      //
      // See //zircon/system/ulib/fidl/include/lib/fidl/llcpp/server.h.
      //
      // Because the reply status is identical to the unbinding status, it can
      // be safely ignored.
      ::fidl::Result Reply(::bottom::wire::Foo foo);
      ::fidl::Result Reply(::fidl::BufferSpan _buffer, ::bottom::wire::Foo foo);

     protected:
      using ::fidl::CompleterBase::CompleterBase;
    };

    using GetFooCompleter = ::fidl::Completer<GetFooCompleterBase>;

    virtual void GetFoo(GetFooCompleter::Sync& _completer) = 0;

   private:
    ::fidl::DispatchResult dispatch_message(fidl_incoming_msg_t* msg,
                                            ::fidl::Transaction* txn) final;
  };

  // Attempts to dispatch the incoming message to a handler function in the
  // server implementation. If there is no matching handler, it returns false,
  // leaving the message and transaction intact. In all other cases, it consumes
  // the message and returns true. It is possible to chain multiple TryDispatch
  // functions in this manner.
  static ::fidl::DispatchResult TryDispatch(Interface* impl,
                                            fidl_incoming_msg_t* msg,
                                            ::fidl::Transaction* txn);

  // Dispatches the incoming message to one of the handlers functions in the
  // protocol. If there is no matching handler, it closes all the handles in
  // |msg| and closes the channel with a |ZX_ERR_NOT_SUPPORTED| epitaph, before
  // returning false. The message should then be discarded.
  static ::fidl::DispatchResult Dispatch(Interface* impl,
                                         fidl_incoming_msg_t* msg,
                                         ::fidl::Transaction* txn);

  // Same as |Dispatch|, but takes a |void*| instead of |Interface*|.
  // Only used with |fidl::BindServer| to reduce template expansion.
  // Do not call this method manually. Use |Dispatch| instead.
  static ::fidl::DispatchResult TypeErasedDispatch(void* impl,
                                                   fidl_incoming_msg_t* msg,
                                                   ::fidl::Transaction* txn) {
    return Dispatch(static_cast<Interface*>(impl), msg, txn);
  }

#endif

  class EventSender;
  class WeakEventSender;
};

}  // namespace fidl_test_foreigntypeinresponseusedthroughcompose
namespace fidl {

template <>
struct IsFidlType<
    ::fidl_test_foreigntypeinresponseusedthroughcompose::Top::GetFooRequest>
    : public std::true_type {};
template <>
struct IsFidlMessage<
    ::fidl_test_foreigntypeinresponseusedthroughcompose::Top::GetFooRequest>
    : public std::true_type {};
static_assert(sizeof(::fidl_test_foreigntypeinresponseusedthroughcompose::Top::
                         GetFooRequest) ==
              ::fidl_test_foreigntypeinresponseusedthroughcompose::Top::
                  GetFooRequest::PrimarySize);

template <>
struct IsFidlType<
    ::fidl_test_foreigntypeinresponseusedthroughcompose::Top::GetFooResponse>
    : public std::true_type {};
template <>
struct IsFidlMessage<
    ::fidl_test_foreigntypeinresponseusedthroughcompose::Top::GetFooResponse>
    : public std::true_type {};
static_assert(sizeof(::fidl_test_foreigntypeinresponseusedthroughcompose::Top::
                         GetFooResponse) ==
              ::fidl_test_foreigntypeinresponseusedthroughcompose::Top::
                  GetFooResponse::PrimarySize);
static_assert(offsetof(::fidl_test_foreigntypeinresponseusedthroughcompose::
                           Top::GetFooResponse,
                       foo) == 16);
}  // namespace fidl
namespace fidl_test_foreigntypeinresponseusedthroughcompose {

#ifdef __Fuchsia__
class Top::AsyncEventHandler : public Top::EventHandlerInterface {
 public:
  AsyncEventHandler() = default;

  virtual void Unbound(::fidl::UnbindInfo info) {}
};

class Top::GetFooResponseContext : public ::fidl::internal::ResponseContext {
 public:
  GetFooResponseContext();

  virtual void OnReply(Top::GetFooResponse* message) = 0;

 private:
  void OnReply(uint8_t* reply) override;
};

class Top::ClientImpl final : private ::fidl::internal::ClientBase {
 public:
  // Asynchronous variant of |Top.GetFoo()|.
  // Allocates 16 bytes of request buffer on the stack. The callback is stored
  // on the heap.
  ::fidl::Result GetFoo(::fit::callback<void(GetFooResponse* response)> _cb);

  // Asynchronous variant of |Top.GetFoo()|.
  // Caller provides the backing storage for FIDL message via request buffer.
  // Ownership of |_context| is given unsafely to the binding until |OnError|
  // or |OnReply| are called on it.
  ::fidl::Result GetFoo(GetFooResponseContext* _context);

  // Synchronous variant of |Top.GetFoo()|.
  // Allocates 40 bytes of message buffer on the stack. No heap allocation
  // necessary.
  ResultOf::GetFoo GetFoo_Sync();

  // Synchronous variant of |Top.GetFoo()|.
  // Caller provides the backing storage for FIDL message via request and
  // response buffers.
  UnownedResultOf::GetFoo GetFoo_Sync(::fidl::BufferSpan _response_buffer);

  AsyncEventHandler* event_handler() const { return event_handler_.get(); }

 private:
  friend class ::fidl::Client<Top>;
  friend class ::fidl::internal::ControlBlock<Top>;

  explicit ClientImpl(std::shared_ptr<AsyncEventHandler> event_handler)
      : event_handler_(std::move(event_handler)) {}

  std::optional<::fidl::UnbindInfo> DispatchEvent(
      fidl_incoming_msg_t* msg) override;

  std::shared_ptr<AsyncEventHandler> event_handler_;
};
#endif

#ifdef __Fuchsia__
// |EventSender| owns a server endpoint of a channel speaking
// the Top protocol, and can send events in that protocol.
class Top::EventSender {
 public:
  // Constructs an event sender with an invalid channel.
  EventSender() = default;

  explicit EventSender(::fidl::ServerEnd<
                       ::fidl_test_foreigntypeinresponseusedthroughcompose::Top>
                           server_end)
      : server_end_(std::move(server_end)) {}

  // The underlying server channel endpoint, which may be replaced at run-time.
  const ::fidl::ServerEnd<Top>& server_end() const { return server_end_; }
  ::fidl::ServerEnd<Top>& server_end() { return server_end_; }

  const ::zx::channel& channel() const { return server_end_.channel(); }
  ::zx::channel& channel() { return server_end_.channel(); }

  // Whether the underlying channel is valid.
  bool is_valid() const { return server_end_.is_valid(); }

 private:
  ::fidl::ServerEnd<Top> server_end_;
};

class Top::WeakEventSender {
 public:
 private:
  friend class ::fidl::ServerBindingRef<Top>;

  explicit WeakEventSender(
      std::weak_ptr<::fidl::internal::AsyncServerBinding<Top>> binding)
      : binding_(std::move(binding)) {}

  std::weak_ptr<::fidl::internal::AsyncServerBinding<Top>> binding_;
};
#endif

}  // namespace fidl_test_foreigntypeinresponseusedthroughcompose
