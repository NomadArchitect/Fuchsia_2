// WARNING: This file is machine generated by fidlgen.

#pragma once

#include <fidl/test.bindingsdenylist/cpp/wire.h>
namespace fidl {
namespace testing {

template <>
class WireTestBase<::test_bindingsdenylist::Allowed>
    : public ::fidl::WireServer<::test_bindingsdenylist::Allowed> {
 public:
  virtual ~WireTestBase<::test_bindingsdenylist::Allowed>() {}
  virtual void NotImplemented_(const std::string& name,
                               ::fidl::CompleterBase& completer) = 0;
};

}  // namespace testing
}  // namespace fidl
namespace test_bindingsdenylist {
namespace testing {
using Allowed_TestBase =
    ::fidl::testing::WireTestBase<::test_bindingsdenylist::Allowed>;

}  // namespace testing
}  // namespace test_bindingsdenylist
namespace fidl {
namespace testing {

template <>
class WireTestBase<::test_bindingsdenylist::OnlyLibfuzzerAndDeps>
    : public ::fidl::WireServer<::test_bindingsdenylist::OnlyLibfuzzerAndDeps> {
 public:
  virtual ~WireTestBase<::test_bindingsdenylist::OnlyLibfuzzerAndDeps>() {}
  virtual void NotImplemented_(const std::string& name,
                               ::fidl::CompleterBase& completer) = 0;
  virtual void LibfuzzerNeedsNonemptyProtocol(
      LibfuzzerNeedsNonemptyProtocolRequestView request,
      LibfuzzerNeedsNonemptyProtocolCompleter::Sync& _completer) override {
    NotImplemented_("LibfuzzerNeedsNonemptyProtocol", _completer);
  }
};

}  // namespace testing
}  // namespace fidl
namespace test_bindingsdenylist {
namespace testing {
using OnlyLibfuzzerAndDeps_TestBase = ::fidl::testing::WireTestBase<
    ::test_bindingsdenylist::OnlyLibfuzzerAndDeps>;

}  // namespace testing
}  // namespace test_bindingsdenylist
namespace fidl {
namespace testing {

template <>
class WireTestBase<::test_bindingsdenylist::OnlyCppAndDeps>
    : public ::fidl::WireServer<::test_bindingsdenylist::OnlyCppAndDeps> {
 public:
  virtual ~WireTestBase<::test_bindingsdenylist::OnlyCppAndDeps>() {}
  virtual void NotImplemented_(const std::string& name,
                               ::fidl::CompleterBase& completer) = 0;
};

}  // namespace testing
}  // namespace fidl
namespace test_bindingsdenylist {
namespace testing {
using OnlyCppAndDeps_TestBase =
    ::fidl::testing::WireTestBase<::test_bindingsdenylist::OnlyCppAndDeps>;

}  // namespace testing
}  // namespace test_bindingsdenylist
namespace fidl {
namespace testing {

template <>
class WireTestBase<::test_bindingsdenylist::ImportsSameNameContext>
    : public ::fidl::WireServer<
          ::test_bindingsdenylist::ImportsSameNameContext> {
 public:
  virtual ~WireTestBase<::test_bindingsdenylist::ImportsSameNameContext>() {}
  virtual void NotImplemented_(const std::string& name,
                               ::fidl::CompleterBase& completer) = 0;
  virtual void Unattributed(UnattributedRequestView request,
                            UnattributedCompleter::Sync& _completer) override {
    NotImplemented_("Unattributed", _completer);
  }
  virtual void AlwaysAppearsInImportingLibrary(
      AlwaysAppearsInImportingLibraryRequestView request,
      AlwaysAppearsInImportingLibraryCompleter::Sync& _completer) override {
    NotImplemented_("AlwaysAppearsInImportingLibrary", _completer);
  }
};

}  // namespace testing
}  // namespace fidl
namespace test_bindingsdenylist {
namespace testing {
using ImportsSameNameContext_TestBase = ::fidl::testing::WireTestBase<
    ::test_bindingsdenylist::ImportsSameNameContext>;

}  // namespace testing
}  // namespace test_bindingsdenylist
namespace fidl {
namespace testing {

template <>
class WireTestBase<::test_bindingsdenylist::DenyEachBinding>
    : public ::fidl::WireServer<::test_bindingsdenylist::DenyEachBinding> {
 public:
  virtual ~WireTestBase<::test_bindingsdenylist::DenyEachBinding>() {}
  virtual void NotImplemented_(const std::string& name,
                               ::fidl::CompleterBase& completer) = 0;
  virtual void OnlyDenyDart(OnlyDenyDartRequestView request,
                            OnlyDenyDartCompleter::Sync& _completer) override {
    NotImplemented_("OnlyDenyDart", _completer);
  }
  virtual void OnlyDenyGo(OnlyDenyGoRequestView request,
                          OnlyDenyGoCompleter::Sync& _completer) override {
    NotImplemented_("OnlyDenyGo", _completer);
  }
  virtual void OnlyDenyLibfuzzer(
      OnlyDenyLibfuzzerRequestView request,
      OnlyDenyLibfuzzerCompleter::Sync& _completer) override {
    NotImplemented_("OnlyDenyLibfuzzer", _completer);
  }
  virtual void OnlyDenyRust(OnlyDenyRustRequestView request,
                            OnlyDenyRustCompleter::Sync& _completer) override {
    NotImplemented_("OnlyDenyRust", _completer);
  }
  virtual void OnlyDenySyzkaller(
      OnlyDenySyzkallerRequestView request,
      OnlyDenySyzkallerCompleter::Sync& _completer) override {
    NotImplemented_("OnlyDenySyzkaller", _completer);
  }
};

}  // namespace testing
}  // namespace fidl
namespace test_bindingsdenylist {
namespace testing {
using DenyEachBinding_TestBase =
    ::fidl::testing::WireTestBase<::test_bindingsdenylist::DenyEachBinding>;
}  // namespace testing
}  // namespace test_bindingsdenylist
