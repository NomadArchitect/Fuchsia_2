// WARNING: This file is machine generated by fidlgen.

#include <fidl/test.handles/cpp/wire_messaging.h>

#include <memory>

#ifdef __Fuchsia__

#endif  // __Fuchsia__

#ifdef __Fuchsia__

::fidl::Status fidl::WireSyncEventHandler<::test_handles::SomeProtocol>::HandleOneEvent(
    ::fidl::UnownedClientEnd<::test_handles::SomeProtocol> client_end) {
  zx_status_t status = client_end.channel()->wait_one(ZX_CHANNEL_READABLE | ZX_CHANNEL_PEER_CLOSED,
                                                      ::zx::time::infinite(),
                                                      nullptr);
  if (status != ZX_OK) {
    return ::fidl::Status::TransportError(status, ::fidl::internal::kErrorWaitOneFailed);
  }
  ::fidl::internal::IncomingEventsStorage<::test_handles::SomeProtocol> event_storage;
  ::fidl::ChannelMessageStorageView storage_view = event_storage.view();
  ::fidl::IncomingMessage msg = ::fidl::MessageRead(
      zx::unowned_channel(client_end.handle()), storage_view, ReadOptions{.discardable = true});
  if (msg.status() == ZX_ERR_BUFFER_TOO_SMALL) {
    return ::fidl::Status::UnexpectedMessage(
        ZX_ERR_BUFFER_TOO_SMALL, ::fidl::internal::kErrorSyncEventBufferTooSmall);
  }
  if (!msg.ok()) {
    return msg;
  }
  got_transitional_ = false;
  fidl::internal::WireEventDispatcher<::test_handles::SomeProtocol> dispatcher{this};
  ::fidl::Status dispatch_status = dispatcher.DispatchEvent(msg, &storage_view);
  if (got_transitional_) {
    return ::fidl::Status::UnexpectedMessage(
        ZX_ERR_NOT_SUPPORTED, ::fidl::internal::kErrorSyncEventUnhandledTransitionalEvent);
  }
  return dispatch_status;
}
#endif  // __Fuchsia__

#ifdef __Fuchsia__

constexpr ::fidl::internal::MethodEntry fidl::internal::WireServerDispatcher<::test_handles::SomeProtocol>::entries_[] = {};

const ::fidl::internal::MethodEntry* fidl::internal::WireServerDispatcher<::test_handles::SomeProtocol>::entries_end_ =
    &entries_[0];

::fidl::DispatchResult fidl::internal::WireServerDispatcher<::test_handles::SomeProtocol>::TryDispatch(
    ::fidl::WireServer<::test_handles::SomeProtocol>* impl, ::fidl::IncomingMessage& msg,
    internal::MessageStorageViewBase* storage_view, ::fidl::Transaction* txn) {
  return ::fidl::internal::TryDispatch(
      impl, msg, storage_view, txn, entries_, entries_end_);
}

void fidl::internal::WireServerDispatcher<::test_handles::SomeProtocol>::Dispatch(::fidl::WireServer<::test_handles::SomeProtocol>* impl, ::fidl::IncomingMessage&& msg,
                                                                                  internal::MessageStorageViewBase* storage_view, ::fidl::Transaction* txn) {
  ::fidl::internal::Dispatch(impl, msg, storage_view, txn, entries_, entries_end_);
}
void fidl::WireServer<::test_handles::SomeProtocol>::dispatch_message(
    ::fidl::IncomingMessage&& msg, ::fidl::Transaction* txn,
    ::fidl::internal::MessageStorageViewBase* storage_view) {
  ::fidl::internal::WireServerDispatcher<::test_handles::SomeProtocol>::Dispatch(this, std::move(msg), storage_view, txn);
}
#endif  // __Fuchsia__

#ifdef __Fuchsia__

#endif  // __Fuchsia__
