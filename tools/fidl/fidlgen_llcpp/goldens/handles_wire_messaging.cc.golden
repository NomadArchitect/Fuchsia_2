// WARNING: This file is machine generated by fidlgen.

#include <fidl/test.handles/cpp/wire_messaging.h>

#include <memory>

#ifdef __Fuchsia__

#endif  // __Fuchsia__

#ifdef __Fuchsia__

::fidl::Result
fidl::WireSyncEventHandler<::test_handles::SomeProtocol>::HandleOneEvent(
    ::fidl::UnownedClientEnd<::test_handles::SomeProtocol> client_end) {
  zx_status_t status = client_end.channel()->wait_one(
      ZX_CHANNEL_READABLE | ZX_CHANNEL_PEER_CLOSED, ::zx::time::infinite(),
      nullptr);
  if (status != ZX_OK) {
    return ::fidl::Result::TransportError(
        status, ::fidl::internal::kErrorWaitOneFailed);
  }
  auto callback = [this](::fidl::IncomingMessage msg,
                         ::fidl::internal::IncomingTransportContext
                             incoming_transport_context) -> ::fidl::Result {
    if (msg.status() == ZX_ERR_BUFFER_TOO_SMALL) {
      // Message size is unexpectedly larger than calculated.
      // This can only be due to a newer version of the protocol defining a new
      // event, whose size exceeds the maximum of known events in the current
      // protocol.
      return ::fidl::Result::UnexpectedMessage(Unknown());
    }
    if (!msg.ok()) {
      return msg;
    }
    fidl_message_header_t* hdr = msg.header();
    switch (hdr->ordinal) {
      default: {
        return ::fidl::Result::UnexpectedMessage(Unknown());
      }
    }
  };
  return ::fidl::MessageRead(zx::unowned_channel(client_end.handle()),
                             callback);
}

std::optional<::fidl::UnbindInfo> fidl::internal::
    WireEventDispatcher<::test_handles::SomeProtocol>::DispatchEvent(
        ::fidl::IncomingMessage& msg,
        ::fidl::internal::IncomingTransportContext transport_context) {
  switch (msg.header()->ordinal) {
    default:
      break;
  }
  return ::fidl::UnbindInfo::UnknownOrdinal();
}
#endif  // __Fuchsia__

#ifdef __Fuchsia__

constexpr ::fidl::internal::MethodEntry fidl::internal::WireServerDispatcher<
    ::test_handles::SomeProtocol>::entries_[] = {};

const ::fidl::internal::MethodEntry* fidl::internal::WireServerDispatcher<
    ::test_handles::SomeProtocol>::entries_end_ = &entries_[0];

::fidl::DispatchResult
fidl::internal::WireServerDispatcher<::test_handles::SomeProtocol>::TryDispatch(
    ::fidl::WireServer<::test_handles::SomeProtocol>* impl,
    ::fidl::IncomingMessage& msg, ::fidl::Transaction* txn) {
  return ::fidl::internal::TryDispatch(impl, msg, txn, entries_, entries_end_);
}

void fidl::internal::WireServerDispatcher<::test_handles::SomeProtocol>::
    Dispatch(::fidl::WireServer<::test_handles::SomeProtocol>* impl,
             ::fidl::IncomingMessage&& msg, ::fidl::Transaction* txn) {
  ::fidl::internal::Dispatch(impl, msg, txn, entries_, entries_end_);
}
void fidl::WireServer<::test_handles::SomeProtocol>::dispatch_message(
    ::fidl::IncomingMessage&& msg, ::fidl::Transaction* txn,
    ::fidl::internal::IncomingTransportContext transport_context) {
  ::fidl::internal::WireServerDispatcher<
      ::test_handles::SomeProtocol>::Dispatch(this, std::move(msg), txn);
}
#endif  // __Fuchsia__

#ifdef __Fuchsia__

#endif  // __Fuchsia__
