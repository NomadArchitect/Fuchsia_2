// WARNING: This file is machine generated by fidlgen.

#pragma once

#include <fidl/fidl.test.drivertwoway/cpp/markers.h>
#include <fidl/fidl.test.drivertwoway/cpp/wire_types.h>
#include <lib/fidl_driver/cpp/wire_messaging.h>

#ifdef __Fuchsia__

#include <lib/fidl/llcpp/client.h>
#include <lib/fidl/llcpp/connect_service.h>
#include <lib/fidl/llcpp/server.h>
#include <lib/fidl/llcpp/service_handler_interface.h>
#include <lib/fidl/llcpp/sync_call.h>

#endif  // __Fuchsia__

namespace fidl_test_drivertwoway {
class TwoWay;

__LOCAL extern "C" const fidl_type_t
    fidl_test_drivertwoway_TwoWayAddRequestMessageTable;

__LOCAL extern "C" const fidl_type_t
    fidl_test_drivertwoway_TwoWayAddResponseMessageTable;
}  // namespace fidl_test_drivertwoway
template <>
struct ::fidl::internal::WireOrdinal<::fidl_test_drivertwoway::TwoWay::Add>
    final {
  static constexpr uint64_t value = 7312196191678030330lu;
};

namespace fidl_test_drivertwoway {}  // namespace fidl_test_drivertwoway
#ifdef __Fuchsia__

template <>
struct ::fidl::internal::ProtocolDetails<::fidl_test_drivertwoway::TwoWay> {};
#endif  // __Fuchsia__

#ifdef __Fuchsia__

template <>
struct ::fidl::internal::WireServerDispatcher<::fidl_test_drivertwoway::TwoWay>
    final {
  WireServerDispatcher() = delete;
  static ::fidl::DispatchResult TryDispatch(
      ::fidl::WireServer<::fidl_test_drivertwoway::TwoWay>* impl,
      ::fidl::IncomingMessage& msg, ::fidl::Transaction* txn);
  static void Dispatch(
      ::fidl::WireServer<::fidl_test_drivertwoway::TwoWay>* impl,
      ::fidl::IncomingMessage&& msg, ::fidl::Transaction* txn);

 private:
  static const ::fidl::internal::MethodEntry entries_[];
  static const ::fidl::internal::MethodEntry* entries_end_;
};
#endif  // __Fuchsia__

template <>
struct ::fidl::WireRequest<::fidl_test_drivertwoway::TwoWay::Add> final {
  FIDL_ALIGNDECL
  fidl_message_header_t _hdr;
  uint16_t addend1;
  uint16_t addend2;

  explicit WireRequest(uint16_t addend1, uint16_t addend2)
      : addend1(addend1), addend2(addend2) {
    _InitHeader();
  }
  WireRequest() { _InitHeader(); }

  static constexpr const fidl_type_t* Type =
      &::fidl_test_drivertwoway::
          fidl_test_drivertwoway_TwoWayAddRequestMessageTable;
  static constexpr uint32_t MaxNumHandles = 0;
  static constexpr uint32_t PrimarySize = 24;
  static constexpr uint32_t PrimarySizeV1 = 24;
  static constexpr uint32_t MaxOutOfLine = 0;
  static constexpr uint32_t MaxOutOfLineV1 = 0;
  static constexpr bool HasFlexibleEnvelope = false;
  static constexpr bool HasPointer = false;
  static constexpr ::fidl::internal::TransactionalMessageKind MessageKind =
      ::fidl::internal::TransactionalMessageKind::kRequest;
  using ResponseType =
      ::fidl::WireResponse<::fidl_test_drivertwoway::TwoWay::Add>;

  class UnownedEncodedMessage;
  class OwnedEncodedMessage;

 public:
  class DecodedMessage;

 private:
  void _InitHeader();
};
template <>
struct ::fidl::WireResponse<::fidl_test_drivertwoway::TwoWay::Add> final {
  FIDL_ALIGNDECL
  fidl_message_header_t _hdr;
  uint16_t sum;

  explicit WireResponse(uint16_t sum) : sum(sum) { _InitHeader(); }
  WireResponse() { _InitHeader(); }

  static constexpr const fidl_type_t* Type =
      &::fidl_test_drivertwoway::
          fidl_test_drivertwoway_TwoWayAddResponseMessageTable;
  static constexpr uint32_t MaxNumHandles = 0;
  static constexpr uint32_t PrimarySize = 24;
  static constexpr uint32_t PrimarySizeV1 = 24;
  static constexpr uint32_t MaxOutOfLine = 0;
  static constexpr uint32_t MaxOutOfLineV1 = 0;
  static constexpr bool HasFlexibleEnvelope = false;
  static constexpr bool HasPointer = false;
  static constexpr ::fidl::internal::TransactionalMessageKind MessageKind =
      ::fidl::internal::TransactionalMessageKind::kResponse;

  class UnownedEncodedMessage;
  class OwnedEncodedMessage;

 public:
  class DecodedMessage;

 private:
  void _InitHeader();
};
#ifdef __Fuchsia__

template <>
class ::fidl::WireUnownedResult<::fidl_test_drivertwoway::TwoWay::Add> final
    : public ::fidl::Result {
 public:
  explicit WireUnownedResult(
      ::fidl::WireResponse<::fidl_test_drivertwoway::TwoWay::Add>* response)
      : bytes_(reinterpret_cast<uint8_t*>(response)) {}
  explicit WireUnownedResult(const ::fidl::Result& result)
      : ::fidl::Result(result) {}
  explicit WireUnownedResult(
      ::fidl::DecodedMessage<
          ::fidl::WireResponse<::fidl_test_drivertwoway::TwoWay::Add>>&&
          decoded)
      : ::fidl::Result(decoded) {
    if (decoded.ok()) {
      bytes_ = reinterpret_cast<uint8_t*>(decoded.PrimaryObject());
    } else {
      bytes_ = nullptr;
    }
    decoded.ReleasePrimaryObject();
  }
  WireUnownedResult(WireUnownedResult&&) = delete;
  WireUnownedResult(const WireUnownedResult&) = delete;
  WireUnownedResult* operator=(WireUnownedResult&&) = delete;
  WireUnownedResult* operator=(const WireUnownedResult&) = delete;
  ~WireUnownedResult() = default;

  ::fidl::WireResponse<::fidl_test_drivertwoway::TwoWay::Add>* Unwrap() {
    ZX_DEBUG_ASSERT(ok());
    return reinterpret_cast<
        ::fidl::WireResponse<::fidl_test_drivertwoway::TwoWay::Add>*>(bytes_);
  }
  const ::fidl::WireResponse<::fidl_test_drivertwoway::TwoWay::Add>* Unwrap()
      const {
    ZX_DEBUG_ASSERT(ok());
    return reinterpret_cast<
        const ::fidl::WireResponse<::fidl_test_drivertwoway::TwoWay::Add>*>(
        bytes_);
  }

  ::fidl::WireResponse<::fidl_test_drivertwoway::TwoWay::Add>& value() {
    return *Unwrap();
  }
  const ::fidl::WireResponse<::fidl_test_drivertwoway::TwoWay::Add>& value()
      const {
    return *Unwrap();
  }

  ::fidl::WireResponse<::fidl_test_drivertwoway::TwoWay::Add>* operator->() {
    return &value();
  }
  const ::fidl::WireResponse<::fidl_test_drivertwoway::TwoWay::Add>*
  operator->() const {
    return &value();
  }

  ::fidl::WireResponse<::fidl_test_drivertwoway::TwoWay::Add>& operator*() {
    return value();
  }
  const ::fidl::WireResponse<::fidl_test_drivertwoway::TwoWay::Add>& operator*()
      const {
    return value();
  }

 private:
  uint8_t* bytes_;
};

template <>
class ::fidl::internal::WireCompleterBase<::fidl_test_drivertwoway::TwoWay::Add>
    : public ::fidl::CompleterBase {
 public:
  // In the following methods, the return value indicates internal errors during
  // the reply, such as encoding or writing to the transport.
  // Note that any error will automatically lead to the destruction of the
  // binding, after which the |on_unbound| callback will be triggered with a
  // detailed reason.
  //
  // See //zircon/system/ulib/fidl/include/lib/fidl/llcpp/server.h.
  //
  // Because the reply status is identical to the unbinding status, it can be
  // safely ignored.
  ::fidl::Result Reply(uint16_t sum);
  ::fidl::Result Reply(::fidl::BufferSpan _buffer, uint16_t sum);

 protected:
  using ::fidl::CompleterBase::CompleterBase;
};

template <>
struct ::fidl::internal::WireMethodTypes<
    ::fidl_test_drivertwoway::TwoWay::Add> {
  using Completer = fidl::Completer<::fidl::internal::WireCompleterBase<
      ::fidl_test_drivertwoway::TwoWay::Add>>;
};

// Pure-virtual interface to be implemented by a server.
// This interface uses typed channels (i.e. |fidl::ClientEnd<SomeProtocol>|
// and |fidl::ServerEnd<SomeProtocol>|).
template <>
class ::fidl::WireServer<::fidl_test_drivertwoway::TwoWay>
    : public ::fidl::internal::IncomingMessageDispatcher {
 public:
  WireServer() = default;
  virtual ~WireServer() = default;

  // The FIDL protocol type that is implemented by this server.
  using _EnclosingProtocol = ::fidl_test_drivertwoway::TwoWay;

  using AddCompleter =
      ::fidl::internal::WireCompleter<::fidl_test_drivertwoway::TwoWay::Add>;
  using AddRequestView =
      ::fidl::internal::WireRequestView<::fidl_test_drivertwoway::TwoWay::Add>;

  virtual void Add(AddRequestView request, AddCompleter::Sync& _completer) = 0;

 private:
  void dispatch_message(
      ::fidl::IncomingMessage&& msg, ::fidl::Transaction* txn,
      internal::IncomingTransportContext* transport_context) final;
};
#endif  // __Fuchsia__

namespace fidl {

template <>
struct IsFidlType<::fidl::WireRequest<::fidl_test_drivertwoway::TwoWay::Add>>
    : public std::true_type {};
template <>
struct IsFidlMessage<::fidl::WireRequest<::fidl_test_drivertwoway::TwoWay::Add>>
    : public std::true_type {};
static_assert(
    sizeof(::fidl::WireRequest<::fidl_test_drivertwoway::TwoWay::Add>) ==
    ::fidl::WireRequest<::fidl_test_drivertwoway::TwoWay::Add>::PrimarySize);
static_assert(
    offsetof(::fidl::WireRequest<::fidl_test_drivertwoway::TwoWay::Add>,
             addend1) == 16);
static_assert(
    offsetof(::fidl::WireRequest<::fidl_test_drivertwoway::TwoWay::Add>,
             addend2) == 18);

template <>
struct IsFidlType<::fidl::WireResponse<::fidl_test_drivertwoway::TwoWay::Add>>
    : public std::true_type {};
template <>
struct IsFidlMessage<
    ::fidl::WireResponse<::fidl_test_drivertwoway::TwoWay::Add>>
    : public std::true_type {};
static_assert(
    sizeof(::fidl::WireResponse<::fidl_test_drivertwoway::TwoWay::Add>) ==
    ::fidl::WireResponse<::fidl_test_drivertwoway::TwoWay::Add>::PrimarySize);
static_assert(
    offsetof(::fidl::WireResponse<::fidl_test_drivertwoway::TwoWay::Add>,
             sum) == 16);

#ifdef __Fuchsia__
}  // namespace fidl
template <>
class ::fidl::internal::WireClientImpl<::fidl_test_drivertwoway::TwoWay> final
    : public ::fidl::internal::ClientBase {
 public:
  // Asynchronous variant of |TwoWay.Add()|.
  // Allocates 24 bytes of request buffer on the stack. The callback is stored
  // on the heap.
  void Add(
      uint16_t addend1, uint16_t addend2,
      ::fidl::WireClientCallback<::fidl_test_drivertwoway::TwoWay::Add> _cb);

  void Add(
      uint16_t addend1, uint16_t addend2,
      ::fit::callback<void(::fidl::WireResponse<
                           ::fidl_test_drivertwoway::TwoWay::Add>* response)>
          _cb);

  // Asynchronous variant of |TwoWay.Add()|.
  // Caller provides the backing storage for FIDL message via request buffer.
  // Ownership of |_context| is given unsafely to the binding until |OnError|
  // or |OnReply| are called on it.
  void Add(::fidl::BufferSpan _request_buffer, uint16_t addend1,
           uint16_t addend2,
           ::fidl::WireResponseContext<::fidl_test_drivertwoway::TwoWay::Add>*
               _context);
  WireClientImpl() = default;
};
namespace fidl {
#endif  // __Fuchsia__

}  // namespace fidl
