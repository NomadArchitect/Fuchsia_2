// WARNING: This file is machine generated by fidlgen.

#pragma once

#include <fidl/test.drivertwoway/cpp/markers.h>
#include <fidl/test.drivertwoway/cpp/wire_types.h>
#include <lib/fidl_driver/cpp/wire_messaging.h>

#ifdef __Fuchsia__

#include <lib/fidl/llcpp/connect_service.h>
#include <lib/fidl/llcpp/server.h>
#include <lib/fidl/llcpp/service_handler_interface.h>
#include <lib/fidl/llcpp/sync_call.h>
#include <lib/fidl_driver/cpp/server.h>
#include <lib/fidl_driver/cpp/wire_client.h>

#endif  // __Fuchsia__

namespace test_drivertwoway {
class TwoWay;

__LOCAL extern "C" const fidl_type_t test_drivertwoway_TwoWayAddRequestTable;
__LOCAL extern "C" const fidl_type_t
    test_drivertwoway_TwoWayAddTopResponseTable;
}  // namespace test_drivertwoway
template <>
struct ::fidl::internal::WireOrdinal<::test_drivertwoway::TwoWay::Add> final {
  static constexpr uint64_t value = 989730524426044687lu;
};

namespace test_drivertwoway {}  // namespace test_drivertwoway
#ifdef __Fuchsia__

template <>
struct ::fidl::internal::ProtocolDetails<::test_drivertwoway::TwoWay> {};
#endif  // __Fuchsia__

#ifdef __Fuchsia__

template <>
struct ::fidl::internal::WireServerDispatcher<::test_drivertwoway::TwoWay>
    final {
  WireServerDispatcher() = delete;
  static ::fidl::DispatchResult TryDispatch(
      ::fdf::WireServer<::test_drivertwoway::TwoWay>* impl,
      ::fidl::IncomingMessage& msg,
      internal::IncomingTransportContext transport_context,
      ::fidl::Transaction* txn);
  static void Dispatch(::fdf::WireServer<::test_drivertwoway::TwoWay>* impl,
                       ::fidl::IncomingMessage&& msg,
                       internal::IncomingTransportContext transport_context,
                       ::fidl::Transaction* txn);

 private:
  static const ::fidl::internal::MethodEntry entries_[];
  static const ::fidl::internal::MethodEntry* entries_end_;
};
#endif  // __Fuchsia__

template <>
struct ::fidl::WireRequest<::test_drivertwoway::TwoWay::Add> final
    : public ::test_drivertwoway::wire::TwoWayAddRequest {
  explicit WireRequest(::test_drivertwoway::wire::TwoWayAddRequest base)
      : ::test_drivertwoway::wire::TwoWayAddRequest(std::move(base)) {}
  explicit WireRequest(uint16_t addend1, uint16_t addend2)
      : ::test_drivertwoway::wire::TwoWayAddRequest{
            .addend1 = std::move(addend1), .addend2 = std::move(addend2)} {}
  WireRequest() = default;
  using ResponseType = ::fidl::WireResponse<::test_drivertwoway::TwoWay::Add>;
};

template <>
struct ::fidl::internal::TransactionalRequest<::test_drivertwoway::TwoWay::Add>
    final {
  FIDL_ALIGNDECL
  fidl_message_header_t header;

  ::fidl::WireRequest<::test_drivertwoway::TwoWay::Add> body;
  explicit TransactionalRequest(uint16_t addend1, uint16_t addend2)
      : body(::fidl::WireRequest<::test_drivertwoway::TwoWay::Add>(addend1,
                                                                   addend2)) {
    _InitHeader();
  }
  TransactionalRequest() { _InitHeader(); }
  using ResponseType =
      ::fidl::internal::TransactionalResponse<::test_drivertwoway::TwoWay::Add>;

 private:
  void _InitHeader();
};

template <>
struct ::fidl::WireResponse<::test_drivertwoway::TwoWay::Add> final
    : public ::test_drivertwoway::wire::TwoWayAddTopResponse {
  explicit WireResponse(::test_drivertwoway::wire::TwoWayAddTopResponse base)
      : ::test_drivertwoway::wire::TwoWayAddTopResponse(std::move(base)) {}
  explicit WireResponse(uint16_t sum)
      : ::test_drivertwoway::wire::TwoWayAddTopResponse{.sum = std::move(sum)} {
  }
  WireResponse() = default;
};

template <>
struct ::fidl::internal::TransactionalResponse<::test_drivertwoway::TwoWay::Add>
    final {
  FIDL_ALIGNDECL
  fidl_message_header_t header;

  ::fidl::WireResponse<::test_drivertwoway::TwoWay::Add> body;
  explicit TransactionalResponse(uint16_t sum)
      : body(::fidl::WireResponse<::test_drivertwoway::TwoWay::Add>(sum)) {
    _InitHeader();
  }
  TransactionalResponse() { _InitHeader(); }

 private:
  void _InitHeader();
};

#ifdef __Fuchsia__

template <>
struct ::fidl::internal::WireMethodTypes<::test_drivertwoway::TwoWay::Add> {
  using Completer = fidl::Completer<
      ::fidl::internal::WireCompleterBase<::test_drivertwoway::TwoWay::Add>>;

  using Thenable = ::fidl::internal::WireThenableImpl<
      ::test_drivertwoway::TwoWay::Add,
      ::fidl::unstable::OwnedEncodedMessage<
          ::fidl::internal::TransactionalRequest<
              ::test_drivertwoway::TwoWay::Add>,
          ::fidl::internal::DriverTransport>>;

  using BufferThenable = ::fidl::internal::WireThenableImpl<
      ::test_drivertwoway::TwoWay::Add,
      ::fidl::unstable::UnownedEncodedMessage<
          ::fidl::internal::TransactionalRequest<
              ::test_drivertwoway::TwoWay::Add>,
          ::fidl::internal::DriverTransport>>;
};

#endif  // __Fuchsia__

namespace fidl {

template <>
struct IsFidlType<
    ::fidl::internal::TransactionalRequest<::test_drivertwoway::TwoWay::Add>>
    : public std::true_type {};
template <>
struct IsFidlType<::fidl::WireRequest<::test_drivertwoway::TwoWay::Add>>
    : public std::true_type {};
template <>
struct IsFidlTransactionalMessage<
    ::fidl::internal::TransactionalRequest<::test_drivertwoway::TwoWay::Add>>
    : public std::true_type {};
template <>
struct IsFidlTransactionalMessage<
    ::fidl::WireRequest<::test_drivertwoway::TwoWay::Add>>
    : public std::false_type {};

template <>
struct TypeTraits<
    ::fidl::internal::TransactionalRequest<::test_drivertwoway::TwoWay::Add>> {
  static constexpr const fidl_type_t* kType =
      &::test_drivertwoway::test_drivertwoway_TwoWayAddRequestTable;
  static constexpr uint32_t kMaxNumHandles = 0;
  static constexpr uint32_t kPrimarySize =
      FIDL_ALIGN(4 + sizeof(fidl_message_header_t));
  static constexpr uint32_t kPrimarySizeV1 =
      FIDL_ALIGN(4 + sizeof(fidl_message_header_t));
  static constexpr uint32_t kMaxOutOfLine = 0;
  static constexpr uint32_t kMaxOutOfLineV1 = 0;
  static constexpr bool kHasFlexibleEnvelope = false;
  static constexpr bool kHasPointer = false;
  static constexpr ::fidl::internal::TransactionalMessageKind kMessageKind =
      ::fidl::internal::TransactionalMessageKind::kRequest;
};

static_assert(sizeof(::fidl::internal::TransactionalRequest<
                     ::test_drivertwoway::TwoWay::Add>) ==
              TypeTraits<::fidl::internal::TransactionalRequest<
                  ::test_drivertwoway::TwoWay::Add>>::kPrimarySize);
static_assert(offsetof(::fidl::internal::TransactionalRequest<
                           ::test_drivertwoway::TwoWay::Add>,
                       header) == 0);
static_assert(offsetof(::fidl::internal::TransactionalRequest<
                           ::test_drivertwoway::TwoWay::Add>,
                       body) == sizeof(fidl_message_header_t));

template <>
struct TypeTraits<::fidl::WireRequest<::test_drivertwoway::TwoWay::Add>> {
  static constexpr const fidl_type_t* kType =
      &::test_drivertwoway::test_drivertwoway_TwoWayAddRequestTable;
  static constexpr uint32_t kMaxNumHandles = 0;
  static constexpr uint32_t kPrimarySize = 4;
  static constexpr uint32_t kPrimarySizeV1 = 4;
  static constexpr uint32_t kMaxOutOfLine = 0;
  static constexpr uint32_t kMaxOutOfLineV1 = 0;
  static constexpr bool kHasFlexibleEnvelope = false;
  static constexpr bool kHasPointer = false;
  static constexpr ::fidl::internal::TransactionalMessageKind kMessageKind =
      ::fidl::internal::TransactionalMessageKind::kRequest;
};
static_assert(
    sizeof(::fidl::WireRequest<::test_drivertwoway::TwoWay::Add>) ==
    TypeTraits<
        ::fidl::WireRequest<::test_drivertwoway::TwoWay::Add>>::kPrimarySize);
static_assert(offsetof(::fidl::WireRequest<::test_drivertwoway::TwoWay::Add>,
                       addend1) == 0);
static_assert(offsetof(::fidl::WireRequest<::test_drivertwoway::TwoWay::Add>,
                       addend2) == 2);

template <>
struct IsFidlType<
    ::fidl::internal::TransactionalResponse<::test_drivertwoway::TwoWay::Add>>
    : public std::true_type {};
template <>
struct IsFidlType<::fidl::WireResponse<::test_drivertwoway::TwoWay::Add>>
    : public std::true_type {};
template <>
struct IsFidlTransactionalMessage<
    ::fidl::internal::TransactionalResponse<::test_drivertwoway::TwoWay::Add>>
    : public std::true_type {};
template <>
struct IsFidlTransactionalMessage<
    ::fidl::WireResponse<::test_drivertwoway::TwoWay::Add>>
    : public std::false_type {};

template <>
struct TypeTraits<
    ::fidl::internal::TransactionalResponse<::test_drivertwoway::TwoWay::Add>> {
  static constexpr const fidl_type_t* kType =
      &::test_drivertwoway::test_drivertwoway_TwoWayAddTopResponseTable;
  static constexpr uint32_t kMaxNumHandles = 0;
  static constexpr uint32_t kPrimarySize =
      FIDL_ALIGN(2 + sizeof(fidl_message_header_t));
  static constexpr uint32_t kPrimarySizeV1 =
      FIDL_ALIGN(2 + sizeof(fidl_message_header_t));
  static constexpr uint32_t kMaxOutOfLine = 0;
  static constexpr uint32_t kMaxOutOfLineV1 = 0;
  static constexpr bool kHasFlexibleEnvelope = false;
  static constexpr bool kHasPointer = false;
  static constexpr ::fidl::internal::TransactionalMessageKind kMessageKind =
      ::fidl::internal::TransactionalMessageKind::kResponse;
};

static_assert(sizeof(::fidl::internal::TransactionalResponse<
                     ::test_drivertwoway::TwoWay::Add>) ==
              TypeTraits<::fidl::internal::TransactionalResponse<
                  ::test_drivertwoway::TwoWay::Add>>::kPrimarySize);
static_assert(offsetof(::fidl::internal::TransactionalResponse<
                           ::test_drivertwoway::TwoWay::Add>,
                       header) == 0);
static_assert(offsetof(::fidl::internal::TransactionalResponse<
                           ::test_drivertwoway::TwoWay::Add>,
                       body) == sizeof(fidl_message_header_t));

template <>
struct TypeTraits<::fidl::WireResponse<::test_drivertwoway::TwoWay::Add>> {
  static constexpr const fidl_type_t* kType =
      &::test_drivertwoway::test_drivertwoway_TwoWayAddTopResponseTable;
  static constexpr uint32_t kMaxNumHandles = 0;
  static constexpr uint32_t kPrimarySize = 2;
  static constexpr uint32_t kPrimarySizeV1 = 2;
  static constexpr uint32_t kMaxOutOfLine = 0;
  static constexpr uint32_t kMaxOutOfLineV1 = 0;
  static constexpr bool kHasFlexibleEnvelope = false;
  static constexpr bool kHasPointer = false;
  static constexpr ::fidl::internal::TransactionalMessageKind kMessageKind =
      ::fidl::internal::TransactionalMessageKind::kResponse;
};
static_assert(
    sizeof(::fidl::WireResponse<::test_drivertwoway::TwoWay::Add>) ==
    TypeTraits<
        ::fidl::WireResponse<::test_drivertwoway::TwoWay::Add>>::kPrimarySize);
static_assert(offsetof(::fidl::WireResponse<::test_drivertwoway::TwoWay::Add>,
                       sum) == 0);

}  // namespace fidl
namespace test_drivertwoway {
#ifdef __Fuchsia__
}  // namespace test_drivertwoway
template <>
class [[nodiscard]] ::fdf::WireUnownedResult<::test_drivertwoway::TwoWay::Add>
    final : public ::fidl::Status {
 public:
  explicit WireUnownedResult(
      ::fdf::UnownedClientEnd<::test_drivertwoway::TwoWay> client_end,
      const ::fdf::Arena& arena,
      ::fidl::internal::TransactionalRequest<::test_drivertwoway::TwoWay::Add>*
          request);
  explicit WireUnownedResult(
      ::fidl::internal::TransactionalResponse<::test_drivertwoway::TwoWay::Add>*
          response)
      : bytes_(reinterpret_cast<uint8_t*>(response)) {}
  explicit WireUnownedResult(const ::fidl::Status& result)
      : ::fidl::Status(result) {}
  explicit WireUnownedResult(
      ::fidl::unstable::DecodedMessage<::fidl::internal::TransactionalResponse<
          ::test_drivertwoway::TwoWay::Add>>&& decoded,
      ::fidl::internal::IncomingTransportContext context)
      : ::fidl::Status(decoded),
        arena_(context.release<::fidl::internal::DriverTransport>()) {
    if (decoded.ok()) {
      bytes_ = reinterpret_cast<uint8_t*>(decoded.PrimaryObject());
    } else {
      bytes_ = nullptr;
    }
    decoded.ReleasePrimaryObject();
  }
  WireUnownedResult(WireUnownedResult&&) = delete;
  WireUnownedResult(const WireUnownedResult&) = delete;
  WireUnownedResult* operator=(WireUnownedResult&&) = delete;
  WireUnownedResult* operator=(const WireUnownedResult&) = delete;
  ~WireUnownedResult() = default;
  ::fidl::WireResponse<::test_drivertwoway::TwoWay::Add>* Unwrap() {
    ZX_DEBUG_ASSERT(ok());
    return &(reinterpret_cast<::fidl::internal::TransactionalResponse<
                 ::test_drivertwoway::TwoWay::Add>*>(bytes_)
                 ->body);
  }
  const ::fidl::WireResponse<::test_drivertwoway::TwoWay::Add>* Unwrap() const {
    ZX_DEBUG_ASSERT(ok());
    return &(reinterpret_cast<const ::fidl::internal::TransactionalResponse<
                 ::test_drivertwoway::TwoWay::Add>*>(bytes_)
                 ->body);
  }

  ::fidl::WireResponse<::test_drivertwoway::TwoWay::Add>* Unwrap_NEW() {
    ZX_DEBUG_ASSERT(ok());
    return &(reinterpret_cast<::fidl::internal::TransactionalResponse<
                 ::test_drivertwoway::TwoWay::Add>*>(bytes_)
                 ->body);
  }
  const ::fidl::WireResponse<::test_drivertwoway::TwoWay::Add>* Unwrap_NEW()
      const {
    ZX_DEBUG_ASSERT(ok());
    return &(reinterpret_cast<const ::fidl::internal::TransactionalResponse<
                 ::test_drivertwoway::TwoWay::Add>*>(bytes_)
                 ->body);
  }

  ::fidl::WireResponse<::test_drivertwoway::TwoWay::Add>& value() {
    return *Unwrap();
  }
  const ::fidl::WireResponse<::test_drivertwoway::TwoWay::Add>& value() const {
    return *Unwrap();
  }

  ::fidl::WireResponse<::test_drivertwoway::TwoWay::Add>& value_NEW() {
    return *Unwrap_NEW();
  }
  const ::fidl::WireResponse<::test_drivertwoway::TwoWay::Add>& value_NEW()
      const {
    return *Unwrap_NEW();
  }

  ::fidl::WireResponse<::test_drivertwoway::TwoWay::Add>* operator->() {
    return &value();
  }
  const ::fidl::WireResponse<::test_drivertwoway::TwoWay::Add>* operator->()
      const {
    return &value();
  }

  ::fidl::WireResponse<::test_drivertwoway::TwoWay::Add>& operator*() {
    return value();
  }
  const ::fidl::WireResponse<::test_drivertwoway::TwoWay::Add>& operator*()
      const {
    return value();
  }

  fdf::Arena& arena() {
    ZX_DEBUG_ASSERT(ok());
    return arena_;
  }

 private:
  uint8_t* bytes_;
  fdf::Arena arena_;
};
template <>
class ::fidl::internal::WireEventHandlerInterface<::test_drivertwoway::TwoWay> {
 public:
  WireEventHandlerInterface() = default;
  virtual ~WireEventHandlerInterface() = default;
};

template <>
class ::fdf::WireAsyncEventHandler<::test_drivertwoway::TwoWay>
    : public ::fidl::internal::WireEventHandlerInterface<
          ::test_drivertwoway::TwoWay>,
      public ::fidl::internal::AsyncEventHandler {
 public:
  WireAsyncEventHandler() = default;
};

template <>
class ::fidl::WireSyncEventHandler<::test_drivertwoway::TwoWay>
    : public ::fidl::internal::WireEventHandlerInterface<
          ::test_drivertwoway::TwoWay> {
 public:
  WireSyncEventHandler() = default;

  // Handle all possible events defined in this protocol.
  // Blocks to consume exactly one message from the channel, then call the
  // corresponding virtual method.
  ::fidl::Status HandleOneEvent(
      ::fdf::UnownedClientEnd<::test_drivertwoway::TwoWay> client_end);

 private:
  [[maybe_unused]] bool got_transitional_ = false;
};

template <>
class ::fidl::internal::WireEventDispatcher<::test_drivertwoway::TwoWay> final
    : public ::fidl::internal::IncomingEventDispatcher<
          ::fdf::WireAsyncEventHandler<::test_drivertwoway::TwoWay>> {
 public:
  explicit WireEventDispatcher(
      ::fdf::WireAsyncEventHandler<::test_drivertwoway::TwoWay>* event_handler)
      : IncomingEventDispatcher(event_handler) {}

 private:
  std::optional<::fidl::UnbindInfo> DispatchEvent(
      ::fidl::IncomingMessage& msg,
      ::fidl::internal::IncomingTransportContext transport_context) override;
};

template <>
class ::fidl::internal::WireSyncBufferClientImpl<::test_drivertwoway::TwoWay>
    final : public ::fdf::internal::SyncEndpointBufferVeneer<
                ::fidl::internal::WireSyncBufferClientImpl<
                    ::test_drivertwoway::TwoWay>> {
 public:
  // Caller provides the backing storage for FIDL message via an argument to
  // `.buffer()`.
  ::fdf::WireUnownedResult<::test_drivertwoway::TwoWay::Add> Add(
      uint16_t addend1, uint16_t addend2) {
    ::fidl::internal::TransactionalRequest<::test_drivertwoway::TwoWay::Add>
        _request{addend1, addend2};
    return ::fdf::WireUnownedResult<::test_drivertwoway::TwoWay::Add>(
        _client_end(), _arena(), &_request);
  }

 private:
  ::fdf::UnownedClientEnd<::test_drivertwoway::TwoWay> _client_end() const {
    return ::fdf::UnownedClientEnd<::test_drivertwoway::TwoWay>(
        _transport().get<::fidl::internal::DriverTransport>());
  }
};

template <>
class ::fidl::internal::WireCompleterImpl<::test_drivertwoway::TwoWay::Add>
    : public ::fdf::internal::CompleterImplBase<
          ::test_drivertwoway::TwoWay::Add> {
 public:
  using CompleterImplBase::CompleterImplBase;
};

template <>
class ::fidl::internal::WireBufferCompleterImpl<
    ::test_drivertwoway::TwoWay::Add>
    : public ::fdf::internal::BufferCompleterImplBase {
 public:
  using BufferCompleterImplBase::BufferCompleterImplBase;

  void Reply(uint16_t sum);
};

template <>
class ::fidl::internal::WireCompleterBase<::test_drivertwoway::TwoWay::Add>
    : public ::fidl::CompleterBase,
      public ::fidl::internal::WireCompleterImpl<
          ::test_drivertwoway::TwoWay::Add> {
 public:
  WireCompleterBase(::fidl::Transaction* transaction, bool owned,
                    bool expects_reply)
      : CompleterBase(transaction, owned, expects_reply),
        WireCompleterImpl(this) {}
  WireCompleterBase(WireCompleterBase&& other) noexcept
      : CompleterBase(std::move(other)), WireCompleterImpl(this) {}
  WireCompleterBase& operator=(WireCompleterBase&& other) noexcept {
    CompleterBase::operator=(std::move(other));
    WireCompleterImpl::_set_core(this);
    return *this;
  }
};

// Pure-virtual interface to be implemented by a server.
// This interface uses typed channels (i.e. |fdf::ClientEnd<SomeProtocol>|
// and |fdf::ServerEnd<SomeProtocol>|).
template <>
class ::fdf::WireServer<::test_drivertwoway::TwoWay>
    : public ::fidl::internal::IncomingMessageDispatcher {
 public:
  WireServer() = default;
  virtual ~WireServer() = default;

  // The FIDL protocol type that is implemented by this server.
  using _EnclosingProtocol = ::test_drivertwoway::TwoWay;

  using AddCompleter =
      ::fidl::internal::WireCompleter<::test_drivertwoway::TwoWay::Add>;
  using AddRequestView =
      ::fidl::internal::WireRequestView<::test_drivertwoway::TwoWay::Add>;

  virtual void Add(AddRequestView request, fdf::Arena& arena,
                   AddCompleter::Sync& completer) = 0;

 private:
  void dispatch_message(
      ::fidl::IncomingMessage&& msg, ::fidl::Transaction* txn,
      ::fidl::internal::IncomingTransportContext transport_context) final;
};
namespace test_drivertwoway {
#endif  // __Fuchsia__

}  // namespace test_drivertwoway
namespace fidl {

#ifdef __Fuchsia__
}  // namespace fidl

template <>
class ::fidl::internal::WireWeakOnewayBufferClientImpl<
    ::test_drivertwoway::TwoWay>
    : public ::fdf::internal::BufferClientImplBase {
 public:
  using BufferClientImplBase::BufferClientImplBase;
};

template <>
class ::fidl::internal::WireWeakAsyncBufferClientImpl<
    ::test_drivertwoway::TwoWay>
    final : public ::fidl::internal::WireWeakOnewayBufferClientImpl<
                ::test_drivertwoway::TwoWay> {
 public:
  using WireWeakOnewayBufferClientImpl::WireWeakOnewayBufferClientImpl;

  // Caller provides the backing storage for FIDL message.
  ::fidl::internal::WireBufferThenable<::test_drivertwoway::TwoWay::Add> Add(
      uint16_t addend1, uint16_t addend2);
};

template <>
class ::fidl::internal::WireWeakOnewayClientImpl<::test_drivertwoway::TwoWay>
    : public ::fidl::internal::ClientImplBase {
 public:
  WireWeakOnewayClientImpl(fidl::internal::ClientBase* client_base,
                           const fdf::Arena& arena)
      : ClientImplBase(client_base), arena_(arena) {}

 protected:
  const ::fdf::Arena& arena_;
};

template <>
class ::fidl::internal::WireWeakSyncClientImpl<::test_drivertwoway::TwoWay>
    final : public ::fidl::internal::WireWeakOnewayClientImpl<
                ::test_drivertwoway::TwoWay> {
 public:
  using WireWeakOnewayClientImpl::WireWeakOnewayClientImpl;

  // Allocates 48 bytes of message buffer on the stack. No heap allocation
  // necessary.
  ::fdf::WireUnownedResult<::test_drivertwoway::TwoWay::Add> Add(
      uint16_t addend1, uint16_t addend2);
};
namespace fidl {
#endif  // __Fuchsia__

}  // namespace fidl
