// WARNING: This file is machine generated by fidlgen.

#pragma once

#include <fidl/test.table/cpp/markers.h>
#include <fidl/test.table/cpp/natural_types.h>
#include <fidl/test.table/cpp/wire_types.h>
#ifdef __Fuchsia__
#include <fidl/test.table/cpp/natural_messaging.h>
#include <fidl/test.table/cpp/wire_messaging.h>
#endif  // __Fuchsia__
#include <lib/fidl/cpp/wire_natural_conversions.h>

namespace fidl {
namespace internal {

template <>
struct WireNaturalConversionTraits<::test_table::wire::TableWithAttributes,
                                   ::test_table::TableWithAttributes> {
  static ::test_table::TableWithAttributes ToNatural(
      ::test_table::wire::TableWithAttributes src);
};

template <>
struct NaturalTypeForWireType<::test_table::wire::TableWithAttributes> {
  using type = ::test_table::TableWithAttributes;
};

template <>
struct WireNaturalConversionTraits<::test_table::wire::SimpleTable,
                                   ::test_table::SimpleTable> {
  static ::test_table::SimpleTable ToNatural(
      ::test_table::wire::SimpleTable src);
};

template <>
struct NaturalTypeForWireType<::test_table::wire::SimpleTable> {
  using type = ::test_table::SimpleTable;
};

template <>
struct WireNaturalConversionTraits<::test_table::wire::ReverseOrdinalTable,
                                   ::test_table::ReverseOrdinalTable> {
  static ::test_table::ReverseOrdinalTable ToNatural(
      ::test_table::wire::ReverseOrdinalTable src);
};

template <>
struct NaturalTypeForWireType<::test_table::wire::ReverseOrdinalTable> {
  using type = ::test_table::ReverseOrdinalTable;
};

template <>
struct WireNaturalConversionTraits<::test_table::wire::OlderSimpleTable,
                                   ::test_table::OlderSimpleTable> {
  static ::test_table::OlderSimpleTable ToNatural(
      ::test_table::wire::OlderSimpleTable src);
};

template <>
struct NaturalTypeForWireType<::test_table::wire::OlderSimpleTable> {
  using type = ::test_table::OlderSimpleTable;
};

template <>
struct WireNaturalConversionTraits<::test_table::wire::NewerSimpleTable,
                                   ::test_table::NewerSimpleTable> {
  static ::test_table::NewerSimpleTable ToNatural(
      ::test_table::wire::NewerSimpleTable src);
};

template <>
struct NaturalTypeForWireType<::test_table::wire::NewerSimpleTable> {
  using type = ::test_table::NewerSimpleTable;
};

template <>
struct WireNaturalConversionTraits<::test_table::wire::ExtensionTable,
                                   ::test_table::ExtensionTable> {
  static ::test_table::ExtensionTable ToNatural(
      ::test_table::wire::ExtensionTable src);
};

template <>
struct NaturalTypeForWireType<::test_table::wire::ExtensionTable> {
  using type = ::test_table::ExtensionTable;
};

template <>
struct WireNaturalConversionTraits<::test_table::wire::SixtyFourOrdinalTable,
                                   ::test_table::SixtyFourOrdinalTable> {
  static ::test_table::SixtyFourOrdinalTable ToNatural(
      ::test_table::wire::SixtyFourOrdinalTable src);
};

template <>
struct NaturalTypeForWireType<::test_table::wire::SixtyFourOrdinalTable> {
  using type = ::test_table::SixtyFourOrdinalTable;
};

template <>
struct WireNaturalConversionTraits<::test_table::wire::EmptyTable,
                                   ::test_table::EmptyTable> {
  static ::test_table::EmptyTable ToNatural(::test_table::wire::EmptyTable src);
};

template <>
struct NaturalTypeForWireType<::test_table::wire::EmptyTable> {
  using type = ::test_table::EmptyTable;
};

#ifdef __Fuchsia__

#endif  // __Fuchsia__
}  // namespace internal
}  // namespace fidl
