#include <fidl/test.driveroneway/cpp/driver/natural_messaging.h>
namespace test_driveroneway {
[[maybe_unused]] constexpr inline uint64_t kOneWay_Send_Ordinal =
    7942965975761529343lu;
#ifdef __Fuchsia__
}  // namespace test_driveroneway
::fitx::result<::fidl::Error>
fidl::internal::NaturalClientImpl<::test_driveroneway::OneWay>::Send(
    ::fidl::Request<::test_driveroneway::OneWay::Send> request) const {
  ::fidl::internal::NaturalMessageEncoder<::fidl::internal::DriverTransport>
      _encoder{::test_driveroneway::kOneWay_Send_Ordinal};

  auto _arena = fdf::Arena::Create(0, "");
  if (!_arena.is_ok()) {
    return ::fidl::internal::ToFitxResult(::fidl::Status::TransportError(
        _arena.status_value(), ::fdf::internal::kFailedToCreateDriverArena));
  }

  ::fidl::WriteOptions _options = {
      .outgoing_transport_context =
          ::fidl::internal::OutgoingTransportContext::Create<
              ::fidl::internal::DriverTransport>(_arena->get()),
  };
  ::fidl::OutgoingMessage _msg = ::fidl::internal::EncodeTransactionalMessage(
      _encoder, ::fidl::internal::NaturalMessageConverter<
                    ::fidl::Request<::test_driveroneway::OneWay::Send>>::
                    IntoDomainObject(std::move(request)));
  ::fidl::Status status = messenger().OneWay(
      ::fdf::internal::MoveToArena(_msg, *_arena), std::move(_options));
  return ::fidl::internal::ToFitxResult(status);
}
namespace test_driveroneway {
#endif  // __Fuchsia__
}  // namespace test_driveroneway
#ifdef __Fuchsia__

std::optional<::fidl::UnbindInfo> fidl::internal::
    NaturalEventDispatcher<::test_driveroneway::OneWay>::DispatchEvent(
        ::fidl::IncomingMessage& msg,
        ::fidl::internal::IncomingTransportContext transport_context) {
  return ::fidl::UnbindInfo::UnknownOrdinal();
}
#endif  // __Fuchsia__
