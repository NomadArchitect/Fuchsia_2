// WARNING: This file is machine generated by fidlgen.

#pragma once

#include <lib/fidl/llcpp/array.h>
#include <lib/fidl/llcpp/coding.h>
#include <lib/fidl/llcpp/envelope.h>
#include <lib/fidl/llcpp/message.h>
#include <lib/fidl/llcpp/message_storage.h>
#include <lib/fidl/llcpp/object_view.h>
#include <lib/fidl/llcpp/string_view.h>
#include <lib/fidl/llcpp/traits.h>
#include <lib/fidl/llcpp/wire_types.h>
#include <lib/stdcompat/optional.h>

#include <cinttypes>
#ifdef __Fuchsia__
#include <lib/zx/channel.h>

#endif  // __Fuchsia__

#include <fidl/test.versions/cpp/markers.h>

namespace test_versions {
namespace wire {
// |Bits| is flexible, hence may contain unknown members not
// defined in the FIDL schema.
class Bits final {
 public:
  constexpr Bits() = default;

  // Constructs an instance of |Bits| from an underlying primitive value,
  // preserving any bit member not defined in the FIDL schema.
  explicit constexpr Bits(uint32_t value) : value_(value) {}
  const static Bits kA;
  const static Bits kMask;

  explicit constexpr inline operator uint32_t() const { return value_; }
  explicit constexpr inline operator bool() const {
    return static_cast<bool>(value_);
  }
  constexpr inline bool operator==(const Bits& other) const {
    return value_ == other.value_;
  }
  constexpr inline bool operator!=(const Bits& other) const {
    return value_ != other.value_;
  }
  constexpr inline Bits operator~() const;
  constexpr inline Bits operator|(const Bits& other) const;
  constexpr inline Bits operator&(const Bits& other) const;
  constexpr inline Bits operator^(const Bits& other) const;
  constexpr inline void operator|=(const Bits& other);
  constexpr inline void operator&=(const Bits& other);
  constexpr inline void operator^=(const Bits& other);

  // Constructs an instance of |Bits| from an underlying primitive value
  // if the primitive does not contain any unknown members not defined in the
  // FIDL schema. Otherwise, returns |cpp17::nullopt|.
  constexpr inline static cpp17::optional<Bits> TryFrom(uint32_t value) {
    if (value & ~kMask.value_) {
      return cpp17::nullopt;
    }
    return Bits(value & Bits::kMask.value_);
  }

  // Constructs an instance of |Bits| from an underlying primitive value,
  // clearing any bit member not defined in the FIDL schema.
  constexpr inline static Bits TruncatingUnknown(uint32_t value) {
    return Bits(value & Bits::kMask.value_);
  }
  constexpr inline Bits unknown_bits() const {
    return *this & Bits(~kMask.value_);
  }
  constexpr inline bool has_unknown_bits() const {
    return static_cast<bool>(unknown_bits());
  }

 private:
  uint32_t value_ = 0;
};
constexpr const ::test_versions::wire::Bits Bits::kA =
    ::test_versions::wire::Bits(1u);
constexpr const ::test_versions::wire::Bits Bits::kMask =
    ::test_versions::wire::Bits(1u);

constexpr inline ::test_versions::wire::Bits Bits::operator~() const {
  return ::test_versions::wire::Bits(
      static_cast<uint32_t>(~this->value_ & kMask.value_));
}

constexpr inline ::test_versions::wire::Bits Bits::operator|(
    const ::test_versions::wire::Bits& other) const {
  return ::test_versions::wire::Bits(
      static_cast<uint32_t>(this->value_ | other.value_));
}

constexpr inline ::test_versions::wire::Bits Bits::operator&(
    const ::test_versions::wire::Bits& other) const {
  return ::test_versions::wire::Bits(
      static_cast<uint32_t>(this->value_ & other.value_));
}

constexpr inline ::test_versions::wire::Bits Bits::operator^(
    const ::test_versions::wire::Bits& other) const {
  return ::test_versions::wire::Bits(
      static_cast<uint32_t>(this->value_ ^ other.value_));
}

constexpr inline void Bits::operator|=(
    const ::test_versions::wire::Bits& other) {
  this->value_ |= other.value_;
}

constexpr inline void Bits::operator&=(
    const ::test_versions::wire::Bits& other) {
  this->value_ &= other.value_;
}

constexpr inline void Bits::operator^=(
    const ::test_versions::wire::Bits& other) {
  this->value_ ^= other.value_;
}

class Enum final {
 public:
  constexpr Enum() : value_(0) {}
  constexpr explicit Enum(uint32_t value) : value_(value) {}
  constexpr operator uint32_t() const { return value_; }

  constexpr bool IsUnknown() const {
    switch (value_) {
      case 1u:

        return false;
    }
    return true;
  }

  constexpr static Enum Unknown() { return Enum(0xffffffff); }

  static const Enum kA;

 private:
  uint32_t value_;
};
constexpr const ::test_versions::wire::Enum Enum::kA =
    ::test_versions::wire::Enum(1u);

struct Struct;

class Table;

class Union;

extern "C" const fidl_type_t test_versions_StructTable;

struct Struct {
  static constexpr const fidl_type_t* Type = &test_versions_StructTable;
  static constexpr uint32_t MaxNumHandles = 0;
  static constexpr uint32_t PrimarySize = 4;
  static constexpr uint32_t PrimarySizeV1 = 4;
  [[maybe_unused]] static constexpr uint32_t MaxOutOfLine = 0;
  static constexpr uint32_t MaxOutOfLineV1 = 0;
  static constexpr bool HasPointer = false;

  uint32_t x = {};

  class UnownedEncodedMessage;
  class OwnedEncodedMessage;
  class DecodedMessage;
};

}  // namespace wire
}  // namespace test_versions
template <>
struct ::fidl::WireTableFrame<::test_versions::wire::Table> final {
 public:
  WireTableFrame() = default;
  // In its intended usage, WireTableFrame will be referenced by an ObjectView.
  // If the ObjectView is assigned before a move or copy, then it will reference
  // the old invalid object. Because this is unsafe, copies are disallowed and
  // moves are only allowed by friend classes that operate safely.
  WireTableFrame(const WireTableFrame&) = delete;
  WireTableFrame& operator=(const WireTableFrame&) = delete;

 private:
  WireTableFrame(WireTableFrame&&) noexcept = default;
  WireTableFrame& operator=(WireTableFrame&&) noexcept = default;
  ::fidl::Envelope<uint32_t> x_;

  friend class ::test_versions::wire::Table;
};

namespace test_versions {
namespace wire {
extern "C" const fidl_type_t test_versions_TableTable;

class Table final {
 public:
  // Returns whether no field is set.
  bool IsEmpty() const { return max_ordinal_ == 0; }

  const uint32_t& x() const {
    ZX_ASSERT(has_x());
    return frame_ptr_->x_.get_data();
  }
  uint32_t& x() {
    ZX_ASSERT(has_x());
    return frame_ptr_->x_.get_data();
  }
  bool has_x() const { return max_ordinal_ >= 1 && frame_ptr_->x_.has_data(); }
  Table& set_x(uint32_t elem) {
    ZX_DEBUG_ASSERT(frame_ptr_ != nullptr);
    frame_ptr_->x_.set_data(std::move(elem));
    max_ordinal_ = std::max(max_ordinal_, static_cast<uint64_t>(1));
    return *this;
  }

  Table& clear_x() {
    ZX_DEBUG_ASSERT(frame_ptr_ != nullptr);
    frame_ptr_->x_.clear_data();
    return *this;
  }

  Table() = default;
  explicit Table(::fidl::AnyArena& allocator)
      : frame_ptr_(::fidl::ObjectView<
                   ::fidl::WireTableFrame<::test_versions::wire::Table>>(
            allocator)) {}
  // This constructor allows a user controlled allocation (not using a Arena).
  // It should only be used when performance is key.
  // As soon as the frame is given to the table, it must not be used directly or
  // for another table.
  explicit Table(
      ::fidl::ObjectView<::fidl::WireTableFrame<::test_versions::wire::Table>>&&
          frame)
      : frame_ptr_(std::move(frame)) {}
  ~Table() = default;
  Table(const Table& other) noexcept = default;
  Table& operator=(const Table& other) noexcept = default;
  Table(Table&& other) noexcept = default;
  Table& operator=(Table&& other) noexcept = default;

  static constexpr const fidl_type_t* Type = &test_versions_TableTable;
  static constexpr uint32_t MaxNumHandles = 0;
  static constexpr uint32_t PrimarySize = 16;
  static constexpr uint32_t PrimarySizeV1 = 16;
  [[maybe_unused]] static constexpr uint32_t MaxOutOfLine = 8;
  static constexpr uint32_t MaxOutOfLineV1 = 24;
  static constexpr bool HasPointer = true;

  void Allocate(::fidl::AnyArena& allocator) {
    max_ordinal_ = 0;
    frame_ptr_ = ::fidl::ObjectView<
        ::fidl::WireTableFrame<::test_versions::wire::Table>>(allocator);
  }
  void Init(
      ::fidl::ObjectView<::fidl::WireTableFrame<::test_versions::wire::Table>>&&
          frame_ptr) {
    max_ordinal_ = 0;
    frame_ptr_ = std::move(frame_ptr);
  }

  class UnownedEncodedMessage;
  class OwnedEncodedMessage;
  class DecodedMessage;

 private:
  uint64_t max_ordinal_ = 0;
  ::fidl::ObjectView<::fidl::WireTableFrame<::test_versions::wire::Table>>
      frame_ptr_;
};

extern "C" const fidl_type_t test_versions_UnionTable;

class Union {
 public:
  Union()
      : ordinal_(::test_versions::wire::Union::Ordinal::Invalid), envelope_ {}
  {}

  Union(const Union&) = default;
  Union& operator=(const Union&) = default;
  Union(Union&&) = default;
  Union& operator=(Union&&) = default;

  enum class Tag : fidl_xunion_tag_t {
    kX = 1,  // 0x1
    kUnknown = ::std::numeric_limits<::fidl_union_tag_t>::max(),
  };

  bool has_invalid_tag() const {
    return ordinal_ == ::test_versions::wire::Union::Ordinal::Invalid;
  }

  bool is_x() const {
    return ordinal_ == ::test_versions::wire::Union::Ordinal::kX;
  }
  static Union WithX(uint32_t val) {
    Union result;
    result.set_x(std::move(val));
    return result;
  }

  void set_x(uint32_t elem) {
    ordinal_ = ::test_versions::wire::Union::Ordinal::kX;
    envelope_.As<uint32_t>().set_data(std::move(elem));
  }

  uint32_t& mutable_x() {
    ZX_ASSERT(ordinal_ == ::test_versions::wire::Union::Ordinal::kX);
    return envelope_.As<uint32_t>().get_data();
  }
  const uint32_t& x() const {
    ZX_ASSERT(ordinal_ == ::test_versions::wire::Union::Ordinal::kX);
    return envelope_.As<uint32_t>().get_data();
  }
  ::test_versions::wire::Union::Tag which() const;

  static constexpr const fidl_type_t* Type = &test_versions_UnionTable;
  static constexpr uint32_t MaxNumHandles = 0;
  static constexpr uint32_t PrimarySize = 16;
  static constexpr uint32_t PrimarySizeV1 = 24;
  [[maybe_unused]] static constexpr uint32_t MaxOutOfLine = 0;
  static constexpr uint32_t MaxOutOfLineV1 = 8;
  static constexpr bool HasPointer = true;

  class UnownedEncodedMessage;
  class OwnedEncodedMessage;
  class DecodedMessage;

 private:
  enum class Ordinal : fidl_xunion_tag_t {
    Invalid = 0,
    kX = 1,  // 0x1
  };

  static void SizeAndOffsetAssertionHelper();
  ::test_versions::wire::Union::Ordinal ordinal_;
  FIDL_ALIGNDECL
  ::fidl::UntypedEnvelope envelope_;
};

constexpr uint32_t kConst = 0u;

}  // namespace wire
}  // namespace test_versions
namespace fidl {

template <>
struct IsFidlType<::test_versions::wire::Bits> : public std::true_type {};
template <>
struct ContainsHandle<::test_versions::wire::Bits> : public std::false_type {};
static_assert(std::is_standard_layout_v<::test_versions::wire::Bits>);
static_assert(sizeof(::test_versions::wire::Bits) == sizeof(uint32_t));

template <>
struct IsFidlType<::test_versions::wire::Struct> : public std::true_type {};
template <>
struct IsStruct<::test_versions::wire::Struct> : public std::true_type {};
static_assert(std::is_standard_layout_v<::test_versions::wire::Struct>);
static_assert(offsetof(::test_versions::wire::Struct, x) == 0);
static_assert(sizeof(::test_versions::wire::Struct) ==
              ::test_versions::wire::Struct::PrimarySize);

template <>
struct IsFidlType<::test_versions::wire::Table> : public std::true_type {};
template <>
struct IsTable<::test_versions::wire::Table> : public std::true_type {};
static_assert(std::is_standard_layout_v<::test_versions::wire::Table>);

template <>
struct IsFidlType<::test_versions::wire::Union> : public std::true_type {};
template <>
struct IsUnion<::test_versions::wire::Union> : public std::true_type {};
static_assert(std::is_standard_layout_v<::test_versions::wire::Union>);

template <>
struct IsFidlType<::test_versions::wire::Enum> : public std::true_type {};
template <>
struct ContainsHandle<::test_versions::wire::Enum> : public std::false_type {};

}  // namespace fidl
