// WARNING: This file is machine generated by fidlgen.

#pragma once

#include <fidl/test.arrays/cpp/common_types.h>
#include <fidl/test.arrays/cpp/markers.h>
#include <lib/fidl/cpp/coding_traits.h>
#include <lib/fidl/cpp/internal/codable_base.h>
#include <lib/fidl/cpp/unified_messaging.h>

#include <cinttypes>
#include <string>

#ifdef __Fuchsia__

#endif  // __Fuchsia__

namespace test_arrays {
class StructSmallArray;

class StructLargeArray;

class TableSmallArray;

class TableLargeArray;

class UnionSmallArray;

class UnionLargeArray;

extern "C" const fidl_type_t test_arrays_UnionSmallArrayTable;

class UnionSmallArray final {
 public:
  // TODO: share union tag types between wire & natural.
  enum class Tag : fidl_union_tag_t {
    kA = 1,  // 0x1
  };

 private:
  using Storage = cpp17::variant<cpp17::monostate, ::std::array<uint32_t, 2>>;
  std::shared_ptr<Storage> storage_;
  std::shared_ptr<Storage> CloneStorage() const;
  friend struct ::fidl::internal::NaturalUnionCodingTraits<
      ::test_arrays::UnionSmallArray>;
  static constexpr std::array<std::optional<::fidl::HandleInformation>, 2>
      Members = {std::nullopt, std::nullopt};

  explicit UnionSmallArray(std::shared_ptr<Storage> storage)
      : storage_(std::move(storage)) {}

  static constexpr size_t TagToIndex(::test_arrays::UnionSmallArray::Tag tag) {
    switch (tag) {
      case ::test_arrays::UnionSmallArray::Tag::kA:
        return 1;
    }
  }

  static constexpr ::test_arrays::UnionSmallArray::Tag IndexToTag(
      size_t index) {
    switch (index) {
      case 1:
        return ::test_arrays::UnionSmallArray::Tag::kA;
      // TODO: what's the right thing to do here?
      default:
        return ::test_arrays::UnionSmallArray::Tag::kA;
    }
  }

 public:
  // Create an unknown value of this union.
  UnionSmallArray() : storage_(std::make_shared<Storage>()) {}

  UnionSmallArray(UnionSmallArray&&) noexcept = default;
  UnionSmallArray& operator=(UnionSmallArray&&) noexcept = default;
  UnionSmallArray(const UnionSmallArray& other) noexcept
      : UnionSmallArray(other.CloneStorage()) {}
  UnionSmallArray& operator=(const UnionSmallArray& other) noexcept {
    storage_ = other.CloneStorage();
    return *this;
  }

  constexpr ::test_arrays::UnionSmallArray::Tag Which() const {
    return UnionSmallArray::IndexToTag(storage_->index());
  }
  static UnionSmallArray WithA(::std::array<uint32_t, 2> val) {
    return UnionSmallArray(std::make_shared<Storage>(
        std::in_place_index_t<TagToIndex(
            ::test_arrays::UnionSmallArray::Tag::kA)>{},
        std::move(val)));
  }

  const ::fidl::internal::UnionMemberView<1, Storage> a() const {
    return ::fidl::internal::UnionMemberView<1, Storage>(storage_);
  }
  ::fidl::internal::UnionMemberView<1, Storage> a() {
    return ::fidl::internal::UnionMemberView<1, Storage>(storage_);
  }
};

extern "C" const fidl_type_t test_arrays_UnionLargeArrayTable;

class UnionLargeArray final {
 public:
  // TODO: share union tag types between wire & natural.
  enum class Tag : fidl_union_tag_t {
    kA = 1,  // 0x1
  };

 private:
  using Storage = cpp17::variant<cpp17::monostate, ::std::array<uint32_t, 100>>;
  std::shared_ptr<Storage> storage_;
  std::shared_ptr<Storage> CloneStorage() const;
  friend struct ::fidl::internal::NaturalUnionCodingTraits<
      ::test_arrays::UnionLargeArray>;
  static constexpr std::array<std::optional<::fidl::HandleInformation>, 2>
      Members = {std::nullopt, std::nullopt};

  explicit UnionLargeArray(std::shared_ptr<Storage> storage)
      : storage_(std::move(storage)) {}

  static constexpr size_t TagToIndex(::test_arrays::UnionLargeArray::Tag tag) {
    switch (tag) {
      case ::test_arrays::UnionLargeArray::Tag::kA:
        return 1;
    }
  }

  static constexpr ::test_arrays::UnionLargeArray::Tag IndexToTag(
      size_t index) {
    switch (index) {
      case 1:
        return ::test_arrays::UnionLargeArray::Tag::kA;
      // TODO: what's the right thing to do here?
      default:
        return ::test_arrays::UnionLargeArray::Tag::kA;
    }
  }

 public:
  // Create an unknown value of this union.
  UnionLargeArray() : storage_(std::make_shared<Storage>()) {}

  UnionLargeArray(UnionLargeArray&&) noexcept = default;
  UnionLargeArray& operator=(UnionLargeArray&&) noexcept = default;
  UnionLargeArray(const UnionLargeArray& other) noexcept
      : UnionLargeArray(other.CloneStorage()) {}
  UnionLargeArray& operator=(const UnionLargeArray& other) noexcept {
    storage_ = other.CloneStorage();
    return *this;
  }

  constexpr ::test_arrays::UnionLargeArray::Tag Which() const {
    return UnionLargeArray::IndexToTag(storage_->index());
  }
  static UnionLargeArray WithA(::std::array<uint32_t, 100> val) {
    return UnionLargeArray(std::make_shared<Storage>(
        std::in_place_index_t<TagToIndex(
            ::test_arrays::UnionLargeArray::Tag::kA)>{},
        std::move(val)));
  }

  const ::fidl::internal::UnionMemberView<1, Storage> a() const {
    return ::fidl::internal::UnionMemberView<1, Storage>(storage_);
  }
  ::fidl::internal::UnionMemberView<1, Storage> a() {
    return ::fidl::internal::UnionMemberView<1, Storage>(storage_);
  }
};

extern "C" const fidl_type_t test_arrays_TableSmallArrayTable;

class TableSmallArray final {
 public:
  struct Storage final {
    ::cpp17::optional<::std::array<uint32_t, 2>> a{};
  };

  TableSmallArray(Storage storage) noexcept : storage_(std::move(storage)) {}
  TableSmallArray() noexcept = default;
  TableSmallArray(TableSmallArray&&) noexcept = default;
  TableSmallArray& operator=(TableSmallArray&&) noexcept = default;
  TableSmallArray(const TableSmallArray& other) noexcept
      : TableSmallArray(other.CloneStorage()) {}
  TableSmallArray& operator=(const TableSmallArray& other) noexcept {
    storage_ = other.CloneStorage();
    return *this;
  }

  bool IsEmpty() const { return !(storage_.a.has_value()); }

  size_t MaxOrdinal() const;

  const cpp17::optional<::std::array<uint32_t, 2>>& a() const {
    return storage_.a;
  }
  ::cpp17::optional<::std::array<uint32_t, 2>>& a() { return storage_.a; }

 private:
  // TODO(https://fxbug.dev/91252): Box the storage.
  Storage storage_;
  Storage CloneStorage() const;
  friend struct ::fidl::internal::NaturalTableCodingTraits<
      ::test_arrays::TableSmallArray>;
  static constexpr auto Members =
      std::make_tuple(std::make_tuple(1, &Storage::a, std::nullopt));
};

extern "C" const fidl_type_t test_arrays_TableLargeArrayTable;

class TableLargeArray final {
 public:
  struct Storage final {
    ::cpp17::optional<::std::array<uint32_t, 100>> a{};
  };

  TableLargeArray(Storage storage) noexcept : storage_(std::move(storage)) {}
  TableLargeArray() noexcept = default;
  TableLargeArray(TableLargeArray&&) noexcept = default;
  TableLargeArray& operator=(TableLargeArray&&) noexcept = default;
  TableLargeArray(const TableLargeArray& other) noexcept
      : TableLargeArray(other.CloneStorage()) {}
  TableLargeArray& operator=(const TableLargeArray& other) noexcept {
    storage_ = other.CloneStorage();
    return *this;
  }

  bool IsEmpty() const { return !(storage_.a.has_value()); }

  size_t MaxOrdinal() const;

  const cpp17::optional<::std::array<uint32_t, 100>>& a() const {
    return storage_.a;
  }
  ::cpp17::optional<::std::array<uint32_t, 100>>& a() { return storage_.a; }

 private:
  // TODO(https://fxbug.dev/91252): Box the storage.
  Storage storage_;
  Storage CloneStorage() const;
  friend struct ::fidl::internal::NaturalTableCodingTraits<
      ::test_arrays::TableLargeArray>;
  static constexpr auto Members =
      std::make_tuple(std::make_tuple(1, &Storage::a, std::nullopt));
};

extern "C" const fidl_type_t test_arrays_StructSmallArrayTable;

class StructSmallArray final
    : public ::fidl::internal::CodableBase<StructSmallArray> {
 private:
  friend ::fidl::internal::CodableBase<StructSmallArray>;
  friend ::fidl::CodingTraits<StructSmallArray>;
  StructSmallArray(::fidl::Decoder& decoder);
  template <typename Payload>
  friend auto ::fidl::internal::EncodeTransactionalMessageWithoutValidating(
      ::fidl::Encoder& encoder, Payload&& payload)
      -> ::fidl::HLCPPOutgoingMessage;
  void EncodeWithoutValidating(::fidl::Encoder& encoder, size_t offset);

 public:
  struct Storage final {
    ::std::array<uint32_t, 2> a{};
  };

  StructSmallArray(Storage storage) noexcept : storage_(std::move(storage)) {}
  StructSmallArray(::std::array<uint32_t, 2> a) noexcept
      : storage_({.a = std::move(a)}) {}
  StructSmallArray() : StructSmallArray(Storage{}) {}

  StructSmallArray(StructSmallArray&&) noexcept = default;
  StructSmallArray& operator=(StructSmallArray&&) noexcept = default;
  StructSmallArray(const StructSmallArray& other) noexcept
      : StructSmallArray(other.CloneStorage()) {}
  StructSmallArray& operator=(const StructSmallArray& other) noexcept {
    storage_ = other.CloneStorage();
    return *this;
  }

  const ::std::array<uint32_t, 2>& a() const { return storage_.a; }

  ::std::array<uint32_t, 2>& a() { return storage_.a; }

 private:
  Storage storage_;
  Storage CloneStorage() const;
};

extern "C" const fidl_type_t test_arrays_StructLargeArrayTable;

class StructLargeArray final
    : public ::fidl::internal::CodableBase<StructLargeArray> {
 private:
  friend ::fidl::internal::CodableBase<StructLargeArray>;
  friend ::fidl::CodingTraits<StructLargeArray>;
  StructLargeArray(::fidl::Decoder& decoder);
  template <typename Payload>
  friend auto ::fidl::internal::EncodeTransactionalMessageWithoutValidating(
      ::fidl::Encoder& encoder, Payload&& payload)
      -> ::fidl::HLCPPOutgoingMessage;
  void EncodeWithoutValidating(::fidl::Encoder& encoder, size_t offset);

 public:
  struct Storage final {
    ::std::array<uint32_t, 100> a{};
  };

  StructLargeArray(Storage storage) noexcept : storage_(std::move(storage)) {}
  StructLargeArray(::std::array<uint32_t, 100> a) noexcept
      : storage_({.a = std::move(a)}) {}
  StructLargeArray() : StructLargeArray(Storage{}) {}

  StructLargeArray(StructLargeArray&&) noexcept = default;
  StructLargeArray& operator=(StructLargeArray&&) noexcept = default;
  StructLargeArray(const StructLargeArray& other) noexcept
      : StructLargeArray(other.CloneStorage()) {}
  StructLargeArray& operator=(const StructLargeArray& other) noexcept {
    storage_ = other.CloneStorage();
    return *this;
  }

  const ::std::array<uint32_t, 100>& a() const { return storage_.a; }

  ::std::array<uint32_t, 100>& a() { return storage_.a; }

 private:
  Storage storage_;
  Storage CloneStorage() const;
};

}  // namespace test_arrays
namespace fidl {

#ifdef __Fuchsia__
extern "C" const fidl_type_t test_arrays_StructSmallArrayTable;

template <>
struct IsFidlType<::test_arrays::StructSmallArray> : public std::true_type {};

template <>
struct ::fidl::internal::TypeTraits<::test_arrays::StructSmallArray> final {
 public:
  static constexpr const fidl_type_t* kCodingTable =
      &test_arrays_StructSmallArrayTable;
};

template <>
struct CodingTraits<::test_arrays::StructSmallArray> {
  static constexpr size_t inline_size_v1_no_ee = 8;
  static constexpr size_t inline_size_v2 = 8;

  template <class EncoderImpl>
  static void Encode(
      EncoderImpl* encoder, ::test_arrays::StructSmallArray* value,
      size_t offset,
      cpp17::optional<HandleInformation> maybe_handle_info = cpp17::nullopt) {
    [[maybe_unused]] uint32_t field_offset;
    field_offset =
        encoder->wire_format() == ::fidl::internal::WireFormatVersion::kV1 ? 0
                                                                           : 0;
    ::fidl::Encode(encoder, &value->storage_.a, offset + field_offset);
  }

  template <typename DecoderImpl>
  static void Decode(DecoderImpl* decoder,
                     ::test_arrays::StructSmallArray* value, size_t offset) {
    ::fidl::Decode(decoder, &value->storage_.a, offset + 0);
  }
};
#endif  // __Fuchsia__

#ifdef __Fuchsia__
extern "C" const fidl_type_t test_arrays_StructLargeArrayTable;

template <>
struct IsFidlType<::test_arrays::StructLargeArray> : public std::true_type {};

template <>
struct ::fidl::internal::TypeTraits<::test_arrays::StructLargeArray> final {
 public:
  static constexpr const fidl_type_t* kCodingTable =
      &test_arrays_StructLargeArrayTable;
};

template <>
struct CodingTraits<::test_arrays::StructLargeArray> {
  static constexpr size_t inline_size_v1_no_ee = 400;
  static constexpr size_t inline_size_v2 = 400;

  template <class EncoderImpl>
  static void Encode(
      EncoderImpl* encoder, ::test_arrays::StructLargeArray* value,
      size_t offset,
      cpp17::optional<HandleInformation> maybe_handle_info = cpp17::nullopt) {
    [[maybe_unused]] uint32_t field_offset;
    field_offset =
        encoder->wire_format() == ::fidl::internal::WireFormatVersion::kV1 ? 0
                                                                           : 0;
    ::fidl::Encode(encoder, &value->storage_.a, offset + field_offset);
  }

  template <typename DecoderImpl>
  static void Decode(DecoderImpl* decoder,
                     ::test_arrays::StructLargeArray* value, size_t offset) {
    ::fidl::Decode(decoder, &value->storage_.a, offset + 0);
  }
};
#endif  // __Fuchsia__

template <>
struct IsFidlType<::test_arrays::TableSmallArray> : public std::true_type {};

template <>
struct CodingTraits<::test_arrays::TableSmallArray>
    : public ::fidl::internal::NaturalTableCodingTraits<
          ::test_arrays::TableSmallArray> {};

template <>
struct IsFidlType<::test_arrays::TableLargeArray> : public std::true_type {};

template <>
struct CodingTraits<::test_arrays::TableLargeArray>
    : public ::fidl::internal::NaturalTableCodingTraits<
          ::test_arrays::TableLargeArray> {};

template <>
struct IsFidlType<::test_arrays::UnionSmallArray> : public std::true_type {};

template <>
struct CodingTraits<::test_arrays::UnionSmallArray> final
    : public ::fidl::internal::NaturalUnionCodingTraits<
          ::test_arrays::UnionSmallArray> {};

template <>
struct IsFidlType<::test_arrays::UnionLargeArray> : public std::true_type {};

template <>
struct CodingTraits<::test_arrays::UnionLargeArray> final
    : public ::fidl::internal::NaturalUnionCodingTraits<
          ::test_arrays::UnionLargeArray> {};

}  // namespace fidl
