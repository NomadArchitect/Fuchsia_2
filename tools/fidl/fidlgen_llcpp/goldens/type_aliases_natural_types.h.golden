// WARNING: This file is machine generated by fidlgen.

#pragma once

#include <fidl/test.typealiases/cpp/common_types.h>
#include <fidl/test.typealiases/cpp/markers.h>
#include <lib/fidl/cpp/coding_traits.h>
#include <lib/fidl/cpp/internal/codable_base.h>
#include <lib/fidl/cpp/unified_messaging.h>

#include <cinttypes>
#include <string>

#ifdef __Fuchsia__

#include <lib/zx/channel.h>

#endif  // __Fuchsia__

#include <fidl/test.someotherlibrary/cpp/natural_types.h>

namespace test_typealiases {
class ExampleOfUseOfAliases;

#ifdef __Fuchsia__

extern "C" const fidl_type_t test_typealiases_ExampleOfUseOfAliasesTable;

class ExampleOfUseOfAliases final
    : public ::fidl::internal::CodableBase<ExampleOfUseOfAliases> {
 private:
  friend ::fidl::internal::CodableBase<ExampleOfUseOfAliases>;
  friend ::fidl::CodingTraits<ExampleOfUseOfAliases>;
  ExampleOfUseOfAliases(::fidl::Decoder& decoder);
  template <typename Payload>
  friend auto ::fidl::internal::EncodeTransactionalMessageWithoutValidating(
      ::fidl::Encoder& encoder, Payload&& payload)
      -> ::fidl::HLCPPOutgoingMessage;
  void EncodeWithoutValidating(::fidl::Encoder& encoder, size_t offset);

 public:
  struct Storage final {
    uint32_t field_of_u32{};
    ::std::vector<::std::string> field_of_vec_of_strings{};
    ::std::vector<::std::string> field_of_vec_of_strings_at_most_nine{};
    ::std::vector<::std::string> field_of_vec_of_strings_at_most_5{};
    ::std::vector<::test_someotherlibrary::ReferenceMe>
        field_of_vec_of_ref_me_at_most_5{};
    ::zx::channel field_of_channel{};
    ::zx::channel field_of_client_end{};
    ::zx::channel field_of_nullable_client_end{};
  };

  ExampleOfUseOfAliases(Storage storage) noexcept
      : storage_(std::move(storage)) {}
  ExampleOfUseOfAliases(
      uint32_t field_of_u32,
      ::std::vector<::std::string> field_of_vec_of_strings,
      ::std::vector<::std::string> field_of_vec_of_strings_at_most_nine,
      ::std::vector<::std::string> field_of_vec_of_strings_at_most_5,
      ::std::vector<::test_someotherlibrary::ReferenceMe>
          field_of_vec_of_ref_me_at_most_5,
      ::zx::channel field_of_channel, ::zx::channel field_of_client_end,
      ::zx::channel field_of_nullable_client_end) noexcept
      : storage_({.field_of_u32 = std::move(field_of_u32),
                  .field_of_vec_of_strings = std::move(field_of_vec_of_strings),
                  .field_of_vec_of_strings_at_most_nine =
                      std::move(field_of_vec_of_strings_at_most_nine),
                  .field_of_vec_of_strings_at_most_5 =
                      std::move(field_of_vec_of_strings_at_most_5),
                  .field_of_vec_of_ref_me_at_most_5 =
                      std::move(field_of_vec_of_ref_me_at_most_5),
                  .field_of_channel = std::move(field_of_channel),
                  .field_of_client_end = std::move(field_of_client_end),
                  .field_of_nullable_client_end =
                      std::move(field_of_nullable_client_end)}) {}
  ExampleOfUseOfAliases() : ExampleOfUseOfAliases(Storage{}) {}

  ExampleOfUseOfAliases(ExampleOfUseOfAliases&&) noexcept = default;
  ExampleOfUseOfAliases& operator=(ExampleOfUseOfAliases&&) noexcept = default;

  uint32_t field_of_u32() const { return storage_.field_of_u32; }

  uint32_t& field_of_u32() { return storage_.field_of_u32; }

  const ::std::vector<::std::string>& field_of_vec_of_strings() const {
    return storage_.field_of_vec_of_strings;
  }

  ::std::vector<::std::string>& field_of_vec_of_strings() {
    return storage_.field_of_vec_of_strings;
  }

  const ::std::vector<::std::string>& field_of_vec_of_strings_at_most_nine()
      const {
    return storage_.field_of_vec_of_strings_at_most_nine;
  }

  ::std::vector<::std::string>& field_of_vec_of_strings_at_most_nine() {
    return storage_.field_of_vec_of_strings_at_most_nine;
  }

  const ::std::vector<::std::string>& field_of_vec_of_strings_at_most_5()
      const {
    return storage_.field_of_vec_of_strings_at_most_5;
  }

  ::std::vector<::std::string>& field_of_vec_of_strings_at_most_5() {
    return storage_.field_of_vec_of_strings_at_most_5;
  }

  const ::std::vector<::test_someotherlibrary::ReferenceMe>&
  field_of_vec_of_ref_me_at_most_5() const {
    return storage_.field_of_vec_of_ref_me_at_most_5;
  }

  ::std::vector<::test_someotherlibrary::ReferenceMe>&
  field_of_vec_of_ref_me_at_most_5() {
    return storage_.field_of_vec_of_ref_me_at_most_5;
  }

  const ::zx::channel& field_of_channel() const {
    return storage_.field_of_channel;
  }

  ::zx::channel& field_of_channel() { return storage_.field_of_channel; }

  const ::zx::channel& field_of_client_end() const {
    return storage_.field_of_client_end;
  }

  ::zx::channel& field_of_client_end() { return storage_.field_of_client_end; }

  const ::zx::channel& field_of_nullable_client_end() const {
    return storage_.field_of_nullable_client_end;
  }

  ::zx::channel& field_of_nullable_client_end() {
    return storage_.field_of_nullable_client_end;
  }

 private:
  Storage storage_;
};

#endif  // __Fuchsia__

}  // namespace test_typealiases
namespace fidl {

#ifdef __Fuchsia__
extern "C" const fidl_type_t test_typealiases_ExampleOfUseOfAliasesTable;

template <>
struct IsResource<::test_typealiases::ExampleOfUseOfAliases>
    : public std::true_type {};
template <>
struct IsFidlType<::test_typealiases::ExampleOfUseOfAliases>
    : public std::true_type {};

template <>
struct ::fidl::internal::TypeTraits<::test_typealiases::ExampleOfUseOfAliases>
    final {
 public:
  static constexpr const fidl_type_t* kCodingTable =
      &test_typealiases_ExampleOfUseOfAliasesTable;
};

template <>
struct CodingTraits<::test_typealiases::ExampleOfUseOfAliases> {
  static constexpr size_t inline_size_v1_no_ee = 88;
  static constexpr size_t inline_size_v2 = 88;

  template <class EncoderImpl>
  static void Encode(
      EncoderImpl* encoder, ::test_typealiases::ExampleOfUseOfAliases* value,
      size_t offset,
      cpp17::optional<HandleInformation> maybe_handle_info = cpp17::nullopt) {
    [[maybe_unused]] uint32_t field_offset;
    field_offset =
        encoder->wire_format() == ::fidl::internal::WireFormatVersion::kV1 ? 0
                                                                           : 0;
    ::fidl::Encode(encoder, &value->storage_.field_of_u32,
                   offset + field_offset);
    field_offset =
        encoder->wire_format() == ::fidl::internal::WireFormatVersion::kV1 ? 8
                                                                           : 8;
    ::fidl::Encode(encoder, &value->storage_.field_of_vec_of_strings,
                   offset + field_offset);
    field_offset =
        encoder->wire_format() == ::fidl::internal::WireFormatVersion::kV1 ? 24
                                                                           : 24;
    ::fidl::Encode(encoder,
                   &value->storage_.field_of_vec_of_strings_at_most_nine,
                   offset + field_offset);
    field_offset =
        encoder->wire_format() == ::fidl::internal::WireFormatVersion::kV1 ? 40
                                                                           : 40;
    ::fidl::Encode(encoder, &value->storage_.field_of_vec_of_strings_at_most_5,
                   offset + field_offset);
    field_offset =
        encoder->wire_format() == ::fidl::internal::WireFormatVersion::kV1 ? 56
                                                                           : 56;
    ::fidl::Encode(encoder, &value->storage_.field_of_vec_of_ref_me_at_most_5,
                   offset + field_offset);
    field_offset =
        encoder->wire_format() == ::fidl::internal::WireFormatVersion::kV1 ? 72
                                                                           : 72;
    ::fidl::Encode(encoder, &value->storage_.field_of_channel,
                   offset + field_offset,
                   ::fidl::HandleInformation{
                       .object_type = ZX_OBJ_TYPE_CHANNEL,
                       .rights = 0x80000000,
                   });
    field_offset =
        encoder->wire_format() == ::fidl::internal::WireFormatVersion::kV1 ? 76
                                                                           : 76;
    ::fidl::Encode(encoder, &value->storage_.field_of_client_end,
                   offset + field_offset,
                   ::fidl::HandleInformation{
                       .object_type = ZX_OBJ_TYPE_CHANNEL,
                       .rights = 0x80000000,
                   });
    field_offset =
        encoder->wire_format() == ::fidl::internal::WireFormatVersion::kV1 ? 80
                                                                           : 80;
    ::fidl::Encode(encoder, &value->storage_.field_of_nullable_client_end,
                   offset + field_offset,
                   ::fidl::HandleInformation{
                       .object_type = ZX_OBJ_TYPE_CHANNEL,
                       .rights = 0x80000000,
                   });
  }

  template <typename DecoderImpl>
  static void Decode(DecoderImpl* decoder,
                     ::test_typealiases::ExampleOfUseOfAliases* value,
                     size_t offset) {
    ::fidl::Decode(decoder, &value->storage_.field_of_u32, offset + 0);
    ::fidl::Decode(decoder, &value->storage_.field_of_vec_of_strings,
                   offset + 8);
    ::fidl::Decode(decoder,
                   &value->storage_.field_of_vec_of_strings_at_most_nine,
                   offset + 24);
    ::fidl::Decode(decoder, &value->storage_.field_of_vec_of_strings_at_most_5,
                   offset + 40);
    ::fidl::Decode(decoder, &value->storage_.field_of_vec_of_ref_me_at_most_5,
                   offset + 56);
    ::fidl::Decode(decoder, &value->storage_.field_of_channel, offset + 72);
    ::fidl::Decode(decoder, &value->storage_.field_of_client_end, offset + 76);
    ::fidl::Decode(decoder, &value->storage_.field_of_nullable_client_end,
                   offset + 80);
  }
};
#endif  // __Fuchsia__

template <>
struct CodingTraits<::test_typealiases::obj_type> {
  static constexpr size_t inline_size_v1_no_ee = sizeof(uint32_t);
  static constexpr size_t inline_size_v2 = sizeof(uint32_t);

  template <class EncoderImpl>
  static void Encode(
      EncoderImpl* encoder, ::test_typealiases::obj_type* value, size_t offset,
      cpp17::optional<HandleInformation> maybe_handle_info = cpp17::nullopt) {
    // TODO: encode
  }
  template <typename DecoderImpl>
  static void Decode(DecoderImpl* decoder, ::test_typealiases::obj_type* value,
                     size_t offset) {
    // TODO: decode
  }
};

}  // namespace fidl
