// WARNING: This file is machine generated by fidlgen_llcpp.

#pragma once

#include <fidl/test.inheritancewithrecursivedecl/cpp/markers.h>
#include <fidl/test.inheritancewithrecursivedecl/cpp/natural_types.h>
#include <fidl/test.inheritancewithrecursivedecl/cpp/wire_messaging.h>
#include <lib/fidl/cpp/channel.h>
#include <lib/fidl/cpp/client.h>
#include <lib/fidl/cpp/internal/thenable.h>
#include <lib/fidl/cpp/natural_types.h>
#include <lib/fidl/cpp/unified_messaging.h>

namespace fidl {

}  // namespace fidl
namespace test_inheritancewithrecursivedecl {
__LOCAL extern "C" const fidl_type_t test_inheritancewithrecursivedecl_ParentFirstRequestTable;

#ifdef __Fuchsia__
}  // namespace test_inheritancewithrecursivedecl
template <>
class ::fidl::internal::NaturalClientImpl<::test_inheritancewithrecursivedecl::Parent> final : public ::fidl::internal::NaturalClientBase {
 public:
  using NaturalClientBase::NaturalClientBase;
  ::fitx::result<::fidl::Error> First(::fidl::Request<::test_inheritancewithrecursivedecl::Parent::First> request) const;
};
namespace test_inheritancewithrecursivedecl {
#endif  // __Fuchsia__

}  // namespace test_inheritancewithrecursivedecl
#ifdef __Fuchsia__

template <>
class ::fidl::internal::NaturalSyncClientImpl<::test_inheritancewithrecursivedecl::Parent> final
    : public ::fidl::internal::SyncEndpointManagedVeneer<::fidl::internal::NaturalSyncClientImpl<::test_inheritancewithrecursivedecl::Parent>> {
 public:
  ::fitx::result<::fidl::Error> First(::fidl::Request<::test_inheritancewithrecursivedecl::Parent::First> request);

 private:
  ::fidl::UnownedClientEnd<::test_inheritancewithrecursivedecl::Parent> _client_end() const {
    return ::fidl::UnownedClientEnd<::test_inheritancewithrecursivedecl::Parent>(
        _transport().get<::fidl::internal::ChannelTransport>());
  }
};
#endif  // __Fuchsia__

#ifdef __Fuchsia__

template <>
class ::fidl::internal::NaturalEventHandlerInterface<::test_inheritancewithrecursivedecl::Parent> : public ::fidl::internal::BaseEventHandlerInterface {
 public:
  NaturalEventHandlerInterface() = default;
  virtual ~NaturalEventHandlerInterface() = default;
};

template <>
class ::fidl::AsyncEventHandler<::test_inheritancewithrecursivedecl::Parent>
    : public ::fidl::internal::NaturalEventHandlerInterface<::test_inheritancewithrecursivedecl::Parent>, public ::fidl::internal::AsyncEventHandler {
 public:
  AsyncEventHandler() = default;
};

template <>
class ::fidl::SyncEventHandler<::test_inheritancewithrecursivedecl::Parent>
    : public ::fidl::internal::NaturalEventHandlerInterface<::test_inheritancewithrecursivedecl::Parent>, public ::fidl::internal::SyncEventHandler {
 public:
  SyncEventHandler() = default;

  // Handle all possible events defined in this protocol.
  // Blocks to consume exactly one message from the channel, then call the corresponding virtual
  // method.
  ::fidl::Status HandleOneEvent(
      ::fidl::UnownedClientEnd<::test_inheritancewithrecursivedecl::Parent> client_end);
};

template <>
class ::fidl::internal::NaturalEventDispatcher<::test_inheritancewithrecursivedecl::Parent> final : public ::fidl::internal::IncomingEventDispatcher<::fidl::internal::NaturalEventHandlerInterface<::test_inheritancewithrecursivedecl::Parent>> {
 public:
  explicit NaturalEventDispatcher(::fidl::internal::NaturalEventHandlerInterface<::test_inheritancewithrecursivedecl::Parent>* event_handler)
      : IncomingEventDispatcher(event_handler) {}
};
#endif  // __Fuchsia__

#ifdef __Fuchsia__
template <>
class ::fidl::internal::NaturalWeakEventSender<::test_inheritancewithrecursivedecl::Parent> : public ::fidl::internal::WeakEventSenderBase {
 public:
  using WeakEventSenderBase::WeakEventSenderBase;
};

template <>
class ::fidl::internal::NaturalEventSender<::test_inheritancewithrecursivedecl::Parent>
    : public ::fidl::internal::SyncEndpointManagedVeneer<::fidl::internal::NaturalEventSender<::test_inheritancewithrecursivedecl::Parent>> {
 public:
  using SyncEndpointManagedVeneer::SyncEndpointManagedVeneer;
};
#endif  // __Fuchsia__

#ifdef __Fuchsia__

template <>
class ::fidl::Request<::test_inheritancewithrecursivedecl::Parent::First> final : public ::test_inheritancewithrecursivedecl::ParentFirstRequest {
 public:
  using ::test_inheritancewithrecursivedecl::ParentFirstRequest::ParentFirstRequest;
  Request(::test_inheritancewithrecursivedecl::ParentFirstRequest v) : ::test_inheritancewithrecursivedecl::ParentFirstRequest(std::move(v)) {}
};

template <>
struct ::fidl::internal::MessageTraits<::fidl::Request<::test_inheritancewithrecursivedecl::Parent::First>> final {
 public:
  static constexpr bool kHasPayload = true;
  using Payload = ::test_inheritancewithrecursivedecl::ParentFirstRequest;
};
#endif  // __Fuchsia__

template <>
class ::fidl::Server<::test_inheritancewithrecursivedecl::Parent> : public ::fidl::internal::IncomingMessageDispatcher {
 public:
  Server() = default;
  virtual ~Server() = default;

  // The FIDL protocol type that is implemented by this server.
  using _EnclosingProtocol = ::test_inheritancewithrecursivedecl::Parent;

  using FirstRequest = ::fidl::Request<::test_inheritancewithrecursivedecl::Parent::First>;
  using FirstCompleter = ::fidl::internal::NaturalCompleter<::test_inheritancewithrecursivedecl::Parent::First>;

  virtual void First(FirstRequest& request, FirstCompleter::Sync& completer) = 0;

 private:
  void dispatch_message(
      ::fidl::IncomingMessage&& msg, ::fidl::Transaction* txn,
      ::fidl::internal::MessageStorageViewBase* storage_view) final;
};

#ifdef __Fuchsia__

template <>
struct ::fidl::internal::NaturalServerDispatcher<::test_inheritancewithrecursivedecl::Parent> final {
  NaturalServerDispatcher() = delete;
  static void Dispatch(::fidl::Server<::test_inheritancewithrecursivedecl::Parent>* impl, ::fidl::IncomingMessage&& msg,
                       internal::MessageStorageViewBase* storage_view,
                       ::fidl::Transaction* txn);

 private:
  static const ::fidl::internal::MethodEntry entries_[];
  static const ::fidl::internal::MethodEntry* entries_end_;
};
#endif  // __Fuchsia__

namespace test_inheritancewithrecursivedecl {
__LOCAL extern "C" const fidl_type_t test_inheritancewithrecursivedecl_ChildSecondRequestTable;

#ifdef __Fuchsia__
}  // namespace test_inheritancewithrecursivedecl
template <>
class ::fidl::internal::NaturalClientImpl<::test_inheritancewithrecursivedecl::Child> final : public ::fidl::internal::NaturalClientBase {
 public:
  using NaturalClientBase::NaturalClientBase;
  ::fitx::result<::fidl::Error> First(::fidl::Request<::test_inheritancewithrecursivedecl::Child::First> request) const;

  ::fitx::result<::fidl::Error> Second(::fidl::Request<::test_inheritancewithrecursivedecl::Child::Second> request) const;
};
namespace test_inheritancewithrecursivedecl {
#endif  // __Fuchsia__

}  // namespace test_inheritancewithrecursivedecl
#ifdef __Fuchsia__

template <>
class ::fidl::internal::NaturalSyncClientImpl<::test_inheritancewithrecursivedecl::Child> final
    : public ::fidl::internal::SyncEndpointManagedVeneer<::fidl::internal::NaturalSyncClientImpl<::test_inheritancewithrecursivedecl::Child>> {
 public:
  ::fitx::result<::fidl::Error> First(::fidl::Request<::test_inheritancewithrecursivedecl::Child::First> request);

  ::fitx::result<::fidl::Error> Second(::fidl::Request<::test_inheritancewithrecursivedecl::Child::Second> request);

 private:
  ::fidl::UnownedClientEnd<::test_inheritancewithrecursivedecl::Child> _client_end() const {
    return ::fidl::UnownedClientEnd<::test_inheritancewithrecursivedecl::Child>(
        _transport().get<::fidl::internal::ChannelTransport>());
  }
};
#endif  // __Fuchsia__

#ifdef __Fuchsia__

template <>
class ::fidl::internal::NaturalEventHandlerInterface<::test_inheritancewithrecursivedecl::Child> : public ::fidl::internal::BaseEventHandlerInterface {
 public:
  NaturalEventHandlerInterface() = default;
  virtual ~NaturalEventHandlerInterface() = default;
};

template <>
class ::fidl::AsyncEventHandler<::test_inheritancewithrecursivedecl::Child>
    : public ::fidl::internal::NaturalEventHandlerInterface<::test_inheritancewithrecursivedecl::Child>, public ::fidl::internal::AsyncEventHandler {
 public:
  AsyncEventHandler() = default;
};

template <>
class ::fidl::SyncEventHandler<::test_inheritancewithrecursivedecl::Child>
    : public ::fidl::internal::NaturalEventHandlerInterface<::test_inheritancewithrecursivedecl::Child>, public ::fidl::internal::SyncEventHandler {
 public:
  SyncEventHandler() = default;

  // Handle all possible events defined in this protocol.
  // Blocks to consume exactly one message from the channel, then call the corresponding virtual
  // method.
  ::fidl::Status HandleOneEvent(
      ::fidl::UnownedClientEnd<::test_inheritancewithrecursivedecl::Child> client_end);
};

template <>
class ::fidl::internal::NaturalEventDispatcher<::test_inheritancewithrecursivedecl::Child> final : public ::fidl::internal::IncomingEventDispatcher<::fidl::internal::NaturalEventHandlerInterface<::test_inheritancewithrecursivedecl::Child>> {
 public:
  explicit NaturalEventDispatcher(::fidl::internal::NaturalEventHandlerInterface<::test_inheritancewithrecursivedecl::Child>* event_handler)
      : IncomingEventDispatcher(event_handler) {}
};
#endif  // __Fuchsia__

#ifdef __Fuchsia__
template <>
class ::fidl::internal::NaturalWeakEventSender<::test_inheritancewithrecursivedecl::Child> : public ::fidl::internal::WeakEventSenderBase {
 public:
  using WeakEventSenderBase::WeakEventSenderBase;
};

template <>
class ::fidl::internal::NaturalEventSender<::test_inheritancewithrecursivedecl::Child>
    : public ::fidl::internal::SyncEndpointManagedVeneer<::fidl::internal::NaturalEventSender<::test_inheritancewithrecursivedecl::Child>> {
 public:
  using SyncEndpointManagedVeneer::SyncEndpointManagedVeneer;
};
#endif  // __Fuchsia__

#ifdef __Fuchsia__

template <>
class ::fidl::Request<::test_inheritancewithrecursivedecl::Child::First> final : public ::test_inheritancewithrecursivedecl::ParentFirstRequest {
 public:
  using ::test_inheritancewithrecursivedecl::ParentFirstRequest::ParentFirstRequest;
  Request(::test_inheritancewithrecursivedecl::ParentFirstRequest v) : ::test_inheritancewithrecursivedecl::ParentFirstRequest(std::move(v)) {}
};

template <>
struct ::fidl::internal::MessageTraits<::fidl::Request<::test_inheritancewithrecursivedecl::Child::First>> final {
 public:
  static constexpr bool kHasPayload = true;
  using Payload = ::test_inheritancewithrecursivedecl::ParentFirstRequest;
};
#endif  // __Fuchsia__

#ifdef __Fuchsia__

template <>
class ::fidl::Request<::test_inheritancewithrecursivedecl::Child::Second> final : public ::test_inheritancewithrecursivedecl::ChildSecondRequest {
 public:
  using ::test_inheritancewithrecursivedecl::ChildSecondRequest::ChildSecondRequest;
  Request(::test_inheritancewithrecursivedecl::ChildSecondRequest v) : ::test_inheritancewithrecursivedecl::ChildSecondRequest(std::move(v)) {}
};

template <>
struct ::fidl::internal::MessageTraits<::fidl::Request<::test_inheritancewithrecursivedecl::Child::Second>> final {
 public:
  static constexpr bool kHasPayload = true;
  using Payload = ::test_inheritancewithrecursivedecl::ChildSecondRequest;
};
#endif  // __Fuchsia__

template <>
class ::fidl::Server<::test_inheritancewithrecursivedecl::Child> : public ::fidl::internal::IncomingMessageDispatcher {
 public:
  Server() = default;
  virtual ~Server() = default;

  // The FIDL protocol type that is implemented by this server.
  using _EnclosingProtocol = ::test_inheritancewithrecursivedecl::Child;

  using FirstRequest = ::fidl::Request<::test_inheritancewithrecursivedecl::Child::First>;
  using FirstCompleter = ::fidl::internal::NaturalCompleter<::test_inheritancewithrecursivedecl::Child::First>;

  virtual void First(FirstRequest& request, FirstCompleter::Sync& completer) = 0;

  using SecondRequest = ::fidl::Request<::test_inheritancewithrecursivedecl::Child::Second>;
  using SecondCompleter = ::fidl::internal::NaturalCompleter<::test_inheritancewithrecursivedecl::Child::Second>;

  virtual void Second(SecondRequest& request, SecondCompleter::Sync& completer) = 0;

 private:
  void dispatch_message(
      ::fidl::IncomingMessage&& msg, ::fidl::Transaction* txn,
      ::fidl::internal::MessageStorageViewBase* storage_view) final;
};

#ifdef __Fuchsia__

template <>
struct ::fidl::internal::NaturalServerDispatcher<::test_inheritancewithrecursivedecl::Child> final {
  NaturalServerDispatcher() = delete;
  static void Dispatch(::fidl::Server<::test_inheritancewithrecursivedecl::Child>* impl, ::fidl::IncomingMessage&& msg,
                       internal::MessageStorageViewBase* storage_view,
                       ::fidl::Transaction* txn);

 private:
  static const ::fidl::internal::MethodEntry entries_[];
  static const ::fidl::internal::MethodEntry* entries_end_;
};
#endif  // __Fuchsia__
