// WARNING: This file is machine generated by fidlgen.

#pragma once

#include <fidl/test.encapsulatedstructs/cpp/common_types.h>
#include <fidl/test.encapsulatedstructs/cpp/markers.h>
#include <lib/fidl/cpp/coding_traits.h>
#include <lib/fidl/cpp/internal/codable_base.h>
#include <lib/fidl/cpp/unified_messaging.h>

#include <cinttypes>
#include <string>

#ifdef __Fuchsia__

#include <lib/zx/handle.h>

#endif  // __Fuchsia__

namespace test_encapsulatedstructs {
class NonInlineStructTestStruct;

class Int8Int32;

class Int16Int8;

class ArrayInt16Int8;

class StructPaddingTestStruct;

class TopLevelStruct;

#ifdef __Fuchsia__

extern "C" const fidl_type_t
    test_encapsulatedstructs_NonInlineStructTestStructTable;

class NonInlineStructTestStruct final
    : public ::fidl::internal::CodableBase<NonInlineStructTestStruct> {
 private:
  struct Storage_;

 public:
  NonInlineStructTestStruct(Storage_ storage) noexcept
      : storage_(std::move(storage)) {}
  NonInlineStructTestStruct(
      ::std::unique_ptr<::test_encapsulatedstructs::Int16Int8> element,
      ::zx::handle h) noexcept
      : storage_({.element = std::move(element), .h = std::move(h)}) {}
  NonInlineStructTestStruct() : NonInlineStructTestStruct(Storage_{}) {}

  NonInlineStructTestStruct(NonInlineStructTestStruct&&) noexcept = default;
  NonInlineStructTestStruct& operator=(NonInlineStructTestStruct&&) noexcept =
      default;

  const ::std::unique_ptr<::test_encapsulatedstructs::Int16Int8>& element()
      const {
    return storage_.element;
  }

  ::std::unique_ptr<::test_encapsulatedstructs::Int16Int8>& element() {
    return storage_.element;
  }

  const ::zx::handle& h() const { return storage_.h; }

  ::zx::handle& h() { return storage_.h; }

 private:
  friend ::fidl::internal::CodableBase<NonInlineStructTestStruct>;
  friend ::fidl::CodingTraits<NonInlineStructTestStruct>;
  NonInlineStructTestStruct(::fidl::Decoder& decoder);
  template <typename Payload>
  friend auto ::fidl::internal::EncodeTransactionalMessageWithoutValidating(
      ::fidl::Encoder& encoder, Payload&& payload)
      -> ::fidl::HLCPPOutgoingMessage;
  void EncodeWithoutValidating(::fidl::Encoder& encoder, size_t offset);

  struct Storage_ final {
    ::std::unique_ptr<::test_encapsulatedstructs::Int16Int8> element{};
    ::zx::handle h{};
  };

  Storage_ storage_;
};

#endif  // __Fuchsia__

extern "C" const fidl_type_t test_encapsulatedstructs_Int8Int32Table;

class Int8Int32 final : public ::fidl::internal::CodableBase<Int8Int32> {
 private:
  struct Storage_;

 public:
  Int8Int32(Storage_ storage) noexcept : storage_(std::move(storage)) {}
  Int8Int32(int8_t a, int32_t b) noexcept
      : storage_({.a = std::move(a), .b = std::move(b)}) {}
  Int8Int32() : Int8Int32(Storage_{}) {}

  Int8Int32(Int8Int32&&) noexcept = default;
  Int8Int32& operator=(Int8Int32&&) noexcept = default;
  Int8Int32(const Int8Int32& other) noexcept
      : Int8Int32(other.CloneStorage_()) {}
  Int8Int32& operator=(const Int8Int32& other) noexcept {
    storage_ = other.CloneStorage_();
    return *this;
  }

  int8_t a() const { return storage_.a; }

  int8_t& a() { return storage_.a; }

  int32_t b() const { return storage_.b; }

  int32_t& b() { return storage_.b; }

 private:
  friend ::fidl::internal::CodableBase<Int8Int32>;
  friend ::fidl::CodingTraits<Int8Int32>;
  Int8Int32(::fidl::Decoder& decoder);
  template <typename Payload>
  friend auto ::fidl::internal::EncodeTransactionalMessageWithoutValidating(
      ::fidl::Encoder& encoder, Payload&& payload)
      -> ::fidl::HLCPPOutgoingMessage;
  void EncodeWithoutValidating(::fidl::Encoder& encoder, size_t offset);

  struct Storage_ final {
    int8_t a{};
    int32_t b{};
  };

  Storage_ storage_;
  Storage_ CloneStorage_() const;
};

extern "C" const fidl_type_t test_encapsulatedstructs_Int16Int8Table;

class Int16Int8 final : public ::fidl::internal::CodableBase<Int16Int8> {
 private:
  struct Storage_;

 public:
  Int16Int8(Storage_ storage) noexcept : storage_(std::move(storage)) {}
  Int16Int8(int16_t a, int8_t b) noexcept
      : storage_({.a = std::move(a), .b = std::move(b)}) {}
  Int16Int8() : Int16Int8(Storage_{}) {}

  Int16Int8(Int16Int8&&) noexcept = default;
  Int16Int8& operator=(Int16Int8&&) noexcept = default;
  Int16Int8(const Int16Int8& other) noexcept
      : Int16Int8(other.CloneStorage_()) {}
  Int16Int8& operator=(const Int16Int8& other) noexcept {
    storage_ = other.CloneStorage_();
    return *this;
  }

  int16_t a() const { return storage_.a; }

  int16_t& a() { return storage_.a; }

  int8_t b() const { return storage_.b; }

  int8_t& b() { return storage_.b; }

 private:
  friend ::fidl::internal::CodableBase<Int16Int8>;
  friend ::fidl::CodingTraits<Int16Int8>;
  Int16Int8(::fidl::Decoder& decoder);
  template <typename Payload>
  friend auto ::fidl::internal::EncodeTransactionalMessageWithoutValidating(
      ::fidl::Encoder& encoder, Payload&& payload)
      -> ::fidl::HLCPPOutgoingMessage;
  void EncodeWithoutValidating(::fidl::Encoder& encoder, size_t offset);

  struct Storage_ final {
    int16_t a{};
    int8_t b{};
  };

  Storage_ storage_;
  Storage_ CloneStorage_() const;
};

extern "C" const fidl_type_t test_encapsulatedstructs_ArrayInt16Int8Table;

class ArrayInt16Int8 final
    : public ::fidl::internal::CodableBase<ArrayInt16Int8> {
 private:
  struct Storage_;

 public:
  ArrayInt16Int8(Storage_ storage) noexcept : storage_(std::move(storage)) {}
  ArrayInt16Int8(
      ::std::array<::test_encapsulatedstructs::Int16Int8, 3> arr) noexcept
      : storage_({.arr = std::move(arr)}) {}
  ArrayInt16Int8() : ArrayInt16Int8(Storage_{}) {}

  ArrayInt16Int8(ArrayInt16Int8&&) noexcept = default;
  ArrayInt16Int8& operator=(ArrayInt16Int8&&) noexcept = default;
  ArrayInt16Int8(const ArrayInt16Int8& other) noexcept
      : ArrayInt16Int8(other.CloneStorage_()) {}
  ArrayInt16Int8& operator=(const ArrayInt16Int8& other) noexcept {
    storage_ = other.CloneStorage_();
    return *this;
  }

  const ::std::array<::test_encapsulatedstructs::Int16Int8, 3>& arr() const {
    return storage_.arr;
  }

  ::std::array<::test_encapsulatedstructs::Int16Int8, 3>& arr() {
    return storage_.arr;
  }

 private:
  friend ::fidl::internal::CodableBase<ArrayInt16Int8>;
  friend ::fidl::CodingTraits<ArrayInt16Int8>;
  ArrayInt16Int8(::fidl::Decoder& decoder);
  template <typename Payload>
  friend auto ::fidl::internal::EncodeTransactionalMessageWithoutValidating(
      ::fidl::Encoder& encoder, Payload&& payload)
      -> ::fidl::HLCPPOutgoingMessage;
  void EncodeWithoutValidating(::fidl::Encoder& encoder, size_t offset);

  struct Storage_ final {
    ::std::array<::test_encapsulatedstructs::Int16Int8, 3> arr{};
  };

  Storage_ storage_;
  Storage_ CloneStorage_() const;
};

extern "C" const fidl_type_t
    test_encapsulatedstructs_StructPaddingTestStructTable;

class StructPaddingTestStruct final
    : public ::fidl::internal::CodableBase<StructPaddingTestStruct> {
 private:
  struct Storage_;

 public:
  StructPaddingTestStruct(Storage_ storage) noexcept
      : storage_(std::move(storage)) {}
  StructPaddingTestStruct(
      ::test_encapsulatedstructs::Int16Int8 trailing,
      ::test_encapsulatedstructs::Int8Int32 inner,
      ::test_encapsulatedstructs::ArrayInt16Int8 array) noexcept
      : storage_({.trailing = std::move(trailing),
                  .inner = std::move(inner),
                  .array = std::move(array)}) {}
  StructPaddingTestStruct() : StructPaddingTestStruct(Storage_{}) {}

  StructPaddingTestStruct(StructPaddingTestStruct&&) noexcept = default;
  StructPaddingTestStruct& operator=(StructPaddingTestStruct&&) noexcept =
      default;
  StructPaddingTestStruct(const StructPaddingTestStruct& other) noexcept
      : StructPaddingTestStruct(other.CloneStorage_()) {}
  StructPaddingTestStruct& operator=(
      const StructPaddingTestStruct& other) noexcept {
    storage_ = other.CloneStorage_();
    return *this;
  }

  const ::test_encapsulatedstructs::Int16Int8& trailing() const {
    return storage_.trailing;
  }

  ::test_encapsulatedstructs::Int16Int8& trailing() {
    return storage_.trailing;
  }

  const ::test_encapsulatedstructs::Int8Int32& inner() const {
    return storage_.inner;
  }

  ::test_encapsulatedstructs::Int8Int32& inner() { return storage_.inner; }

  const ::test_encapsulatedstructs::ArrayInt16Int8& array() const {
    return storage_.array;
  }

  ::test_encapsulatedstructs::ArrayInt16Int8& array() { return storage_.array; }

 private:
  friend ::fidl::internal::CodableBase<StructPaddingTestStruct>;
  friend ::fidl::CodingTraits<StructPaddingTestStruct>;
  StructPaddingTestStruct(::fidl::Decoder& decoder);
  template <typename Payload>
  friend auto ::fidl::internal::EncodeTransactionalMessageWithoutValidating(
      ::fidl::Encoder& encoder, Payload&& payload)
      -> ::fidl::HLCPPOutgoingMessage;
  void EncodeWithoutValidating(::fidl::Encoder& encoder, size_t offset);

  struct Storage_ final {
    ::test_encapsulatedstructs::Int16Int8 trailing{};
    ::test_encapsulatedstructs::Int8Int32 inner{};
    ::test_encapsulatedstructs::ArrayInt16Int8 array{};
  };

  Storage_ storage_;
  Storage_ CloneStorage_() const;
};

#ifdef __Fuchsia__

extern "C" const fidl_type_t test_encapsulatedstructs_TopLevelStructTable;

class TopLevelStruct final
    : public ::fidl::internal::CodableBase<TopLevelStruct> {
 private:
  struct Storage_;

 public:
  TopLevelStruct(Storage_ storage) noexcept : storage_(std::move(storage)) {}
  TopLevelStruct(
      ::test_encapsulatedstructs::StructPaddingTestStruct a,
      ::test_encapsulatedstructs::NonInlineStructTestStruct b) noexcept
      : storage_({.a = std::move(a), .b = std::move(b)}) {}
  TopLevelStruct() : TopLevelStruct(Storage_{}) {}

  TopLevelStruct(TopLevelStruct&&) noexcept = default;
  TopLevelStruct& operator=(TopLevelStruct&&) noexcept = default;

  const ::test_encapsulatedstructs::StructPaddingTestStruct& a() const {
    return storage_.a;
  }

  ::test_encapsulatedstructs::StructPaddingTestStruct& a() {
    return storage_.a;
  }

  const ::test_encapsulatedstructs::NonInlineStructTestStruct& b() const {
    return storage_.b;
  }

  ::test_encapsulatedstructs::NonInlineStructTestStruct& b() {
    return storage_.b;
  }

 private:
  friend ::fidl::internal::CodableBase<TopLevelStruct>;
  friend ::fidl::CodingTraits<TopLevelStruct>;
  TopLevelStruct(::fidl::Decoder& decoder);
  template <typename Payload>
  friend auto ::fidl::internal::EncodeTransactionalMessageWithoutValidating(
      ::fidl::Encoder& encoder, Payload&& payload)
      -> ::fidl::HLCPPOutgoingMessage;
  void EncodeWithoutValidating(::fidl::Encoder& encoder, size_t offset);

  struct Storage_ final {
    ::test_encapsulatedstructs::StructPaddingTestStruct a{};
    ::test_encapsulatedstructs::NonInlineStructTestStruct b{};
  };

  Storage_ storage_;
};

#endif  // __Fuchsia__

}  // namespace test_encapsulatedstructs
namespace fidl {

#ifdef __Fuchsia__
extern "C" const fidl_type_t
    test_encapsulatedstructs_NonInlineStructTestStructTable;

template <>
struct IsResource<::test_encapsulatedstructs::NonInlineStructTestStruct>
    : public std::true_type {};
template <>
struct IsFidlType<::test_encapsulatedstructs::NonInlineStructTestStruct>
    : public std::true_type {};

template <>
struct ::fidl::internal::TypeTraits<
    ::test_encapsulatedstructs::NonInlineStructTestStruct>
    final {
 public:
  static constexpr const fidl_type_t* kCodingTable =
      &test_encapsulatedstructs_NonInlineStructTestStructTable;
};

template <>
struct CodingTraits<::test_encapsulatedstructs::NonInlineStructTestStruct> {
  static constexpr size_t inline_size_v1_no_ee = 16;
  static constexpr size_t inline_size_v2 = 16;

  template <class EncoderImpl>
  static void Encode(
      EncoderImpl* encoder,
      ::test_encapsulatedstructs::NonInlineStructTestStruct* value,
      size_t offset,
      cpp17::optional<HandleInformation> maybe_handle_info = cpp17::nullopt) {
    [[maybe_unused]] uint32_t field_offset;
    field_offset =
        encoder->wire_format() == ::fidl::internal::WireFormatVersion::kV1 ? 0
                                                                           : 0;
    ::fidl::Encode(encoder, &value->storage_.element, offset + field_offset);
    field_offset =
        encoder->wire_format() == ::fidl::internal::WireFormatVersion::kV1 ? 8
                                                                           : 8;
    ::fidl::Encode(encoder, &value->storage_.h, offset + field_offset,
                   ::fidl::HandleInformation{
                       .object_type = ZX_OBJ_TYPE_NONE,
                       .rights = 0x80000000,
                   });
  }

  template <typename DecoderImpl>
  static void Decode(
      DecoderImpl* decoder,
      ::test_encapsulatedstructs::NonInlineStructTestStruct* value,
      size_t offset) {
    ::fidl::Decode(decoder, &value->storage_.element, offset + 0);
    ::fidl::Decode(decoder, &value->storage_.h, offset + 8);
  }
};
#endif  // __Fuchsia__

#ifdef __Fuchsia__
extern "C" const fidl_type_t test_encapsulatedstructs_Int8Int32Table;

template <>
struct IsFidlType<::test_encapsulatedstructs::Int8Int32>
    : public std::true_type {};

template <>
struct ::fidl::internal::TypeTraits<::test_encapsulatedstructs::Int8Int32>
    final {
 public:
  static constexpr const fidl_type_t* kCodingTable =
      &test_encapsulatedstructs_Int8Int32Table;
};

template <>
struct CodingTraits<::test_encapsulatedstructs::Int8Int32> {
  static constexpr size_t inline_size_v1_no_ee = 8;
  static constexpr size_t inline_size_v2 = 8;

  template <class EncoderImpl>
  static void Encode(
      EncoderImpl* encoder, ::test_encapsulatedstructs::Int8Int32* value,
      size_t offset,
      cpp17::optional<HandleInformation> maybe_handle_info = cpp17::nullopt) {
    [[maybe_unused]] uint32_t field_offset;
    field_offset =
        encoder->wire_format() == ::fidl::internal::WireFormatVersion::kV1 ? 0
                                                                           : 0;
    ::fidl::Encode(encoder, &value->storage_.a, offset + field_offset);
    field_offset =
        encoder->wire_format() == ::fidl::internal::WireFormatVersion::kV1 ? 4
                                                                           : 4;
    ::fidl::Encode(encoder, &value->storage_.b, offset + field_offset);
  }

  template <typename DecoderImpl>
  static void Decode(DecoderImpl* decoder,
                     ::test_encapsulatedstructs::Int8Int32* value,
                     size_t offset) {
    ::fidl::Decode(decoder, &value->storage_.a, offset + 0);
    ::fidl::Decode(decoder, &value->storage_.b, offset + 4);
  }
};
#endif  // __Fuchsia__

#ifdef __Fuchsia__
extern "C" const fidl_type_t test_encapsulatedstructs_Int16Int8Table;

template <>
struct IsFidlType<::test_encapsulatedstructs::Int16Int8>
    : public std::true_type {};

template <>
struct ::fidl::internal::TypeTraits<::test_encapsulatedstructs::Int16Int8>
    final {
 public:
  static constexpr const fidl_type_t* kCodingTable =
      &test_encapsulatedstructs_Int16Int8Table;
};

template <>
struct CodingTraits<::test_encapsulatedstructs::Int16Int8> {
  static constexpr size_t inline_size_v1_no_ee = 4;
  static constexpr size_t inline_size_v2 = 4;

  template <class EncoderImpl>
  static void Encode(
      EncoderImpl* encoder, ::test_encapsulatedstructs::Int16Int8* value,
      size_t offset,
      cpp17::optional<HandleInformation> maybe_handle_info = cpp17::nullopt) {
    [[maybe_unused]] uint32_t field_offset;
    field_offset =
        encoder->wire_format() == ::fidl::internal::WireFormatVersion::kV1 ? 0
                                                                           : 0;
    ::fidl::Encode(encoder, &value->storage_.a, offset + field_offset);
    field_offset =
        encoder->wire_format() == ::fidl::internal::WireFormatVersion::kV1 ? 2
                                                                           : 2;
    ::fidl::Encode(encoder, &value->storage_.b, offset + field_offset);
  }

  template <typename DecoderImpl>
  static void Decode(DecoderImpl* decoder,
                     ::test_encapsulatedstructs::Int16Int8* value,
                     size_t offset) {
    ::fidl::Decode(decoder, &value->storage_.a, offset + 0);
    ::fidl::Decode(decoder, &value->storage_.b, offset + 2);
  }
};
#endif  // __Fuchsia__

#ifdef __Fuchsia__
extern "C" const fidl_type_t test_encapsulatedstructs_ArrayInt16Int8Table;

template <>
struct IsFidlType<::test_encapsulatedstructs::ArrayInt16Int8>
    : public std::true_type {};

template <>
struct ::fidl::internal::TypeTraits<::test_encapsulatedstructs::ArrayInt16Int8>
    final {
 public:
  static constexpr const fidl_type_t* kCodingTable =
      &test_encapsulatedstructs_ArrayInt16Int8Table;
};

template <>
struct CodingTraits<::test_encapsulatedstructs::ArrayInt16Int8> {
  static constexpr size_t inline_size_v1_no_ee = 12;
  static constexpr size_t inline_size_v2 = 12;

  template <class EncoderImpl>
  static void Encode(
      EncoderImpl* encoder, ::test_encapsulatedstructs::ArrayInt16Int8* value,
      size_t offset,
      cpp17::optional<HandleInformation> maybe_handle_info = cpp17::nullopt) {
    [[maybe_unused]] uint32_t field_offset;
    field_offset =
        encoder->wire_format() == ::fidl::internal::WireFormatVersion::kV1 ? 0
                                                                           : 0;
    ::fidl::Encode(encoder, &value->storage_.arr, offset + field_offset);
  }

  template <typename DecoderImpl>
  static void Decode(DecoderImpl* decoder,
                     ::test_encapsulatedstructs::ArrayInt16Int8* value,
                     size_t offset) {
    ::fidl::Decode(decoder, &value->storage_.arr, offset + 0);
  }
};
#endif  // __Fuchsia__

#ifdef __Fuchsia__
extern "C" const fidl_type_t
    test_encapsulatedstructs_StructPaddingTestStructTable;

template <>
struct IsFidlType<::test_encapsulatedstructs::StructPaddingTestStruct>
    : public std::true_type {};

template <>
struct ::fidl::internal::TypeTraits<
    ::test_encapsulatedstructs::StructPaddingTestStruct>
    final {
 public:
  static constexpr const fidl_type_t* kCodingTable =
      &test_encapsulatedstructs_StructPaddingTestStructTable;
};

template <>
struct CodingTraits<::test_encapsulatedstructs::StructPaddingTestStruct> {
  static constexpr size_t inline_size_v1_no_ee = 24;
  static constexpr size_t inline_size_v2 = 24;

  template <class EncoderImpl>
  static void Encode(
      EncoderImpl* encoder,
      ::test_encapsulatedstructs::StructPaddingTestStruct* value, size_t offset,
      cpp17::optional<HandleInformation> maybe_handle_info = cpp17::nullopt) {
    [[maybe_unused]] uint32_t field_offset;
    field_offset =
        encoder->wire_format() == ::fidl::internal::WireFormatVersion::kV1 ? 0
                                                                           : 0;
    ::fidl::Encode(encoder, &value->storage_.trailing, offset + field_offset);
    field_offset =
        encoder->wire_format() == ::fidl::internal::WireFormatVersion::kV1 ? 4
                                                                           : 4;
    ::fidl::Encode(encoder, &value->storage_.inner, offset + field_offset);
    field_offset =
        encoder->wire_format() == ::fidl::internal::WireFormatVersion::kV1 ? 12
                                                                           : 12;
    ::fidl::Encode(encoder, &value->storage_.array, offset + field_offset);
  }

  template <typename DecoderImpl>
  static void Decode(DecoderImpl* decoder,
                     ::test_encapsulatedstructs::StructPaddingTestStruct* value,
                     size_t offset) {
    ::fidl::Decode(decoder, &value->storage_.trailing, offset + 0);
    ::fidl::Decode(decoder, &value->storage_.inner, offset + 4);
    ::fidl::Decode(decoder, &value->storage_.array, offset + 12);
  }
};
#endif  // __Fuchsia__

#ifdef __Fuchsia__
extern "C" const fidl_type_t test_encapsulatedstructs_TopLevelStructTable;

template <>
struct IsResource<::test_encapsulatedstructs::TopLevelStruct>
    : public std::true_type {};
template <>
struct IsFidlType<::test_encapsulatedstructs::TopLevelStruct>
    : public std::true_type {};

template <>
struct ::fidl::internal::TypeTraits<::test_encapsulatedstructs::TopLevelStruct>
    final {
 public:
  static constexpr const fidl_type_t* kCodingTable =
      &test_encapsulatedstructs_TopLevelStructTable;
};

template <>
struct CodingTraits<::test_encapsulatedstructs::TopLevelStruct> {
  static constexpr size_t inline_size_v1_no_ee = 40;
  static constexpr size_t inline_size_v2 = 40;

  template <class EncoderImpl>
  static void Encode(
      EncoderImpl* encoder, ::test_encapsulatedstructs::TopLevelStruct* value,
      size_t offset,
      cpp17::optional<HandleInformation> maybe_handle_info = cpp17::nullopt) {
    [[maybe_unused]] uint32_t field_offset;
    field_offset =
        encoder->wire_format() == ::fidl::internal::WireFormatVersion::kV1 ? 0
                                                                           : 0;
    ::fidl::Encode(encoder, &value->storage_.a, offset + field_offset);
    field_offset =
        encoder->wire_format() == ::fidl::internal::WireFormatVersion::kV1 ? 24
                                                                           : 24;
    ::fidl::Encode(encoder, &value->storage_.b, offset + field_offset);
  }

  template <typename DecoderImpl>
  static void Decode(DecoderImpl* decoder,
                     ::test_encapsulatedstructs::TopLevelStruct* value,
                     size_t offset) {
    ::fidl::Decode(decoder, &value->storage_.a, offset + 0);
    ::fidl::Decode(decoder, &value->storage_.b, offset + 24);
  }
};
#endif  // __Fuchsia__

}  // namespace fidl
