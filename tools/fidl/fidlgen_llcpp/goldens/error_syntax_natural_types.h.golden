// WARNING: This file is machine generated by fidlgen.

#pragma once

#include <fidl/test.errorsyntax/cpp/common_types.h>
#include <fidl/test.errorsyntax/cpp/markers.h>
#include <lib/fidl/cpp/coding_traits.h>
#include <lib/fidl/cpp/internal/codable_base.h>
#include <lib/fidl/cpp/unified_messaging.h>

#include <cinttypes>
#include <string>

#ifdef __Fuchsia__

#include <lib/zx/channel.h>

#endif  // __Fuchsia__

#include <fidl/test.errorsyntax.parent/cpp/natural_types.h>

namespace test_errorsyntax {
class ExampleUseOfErrorSyntax_CallWhichMayFail_Response;

class ExampleUseOfErrorSyntaxCallWhichMayFailTopResponse;

class ExampleUseOfErrorSyntaxCallWhichMayFailRequest;

class ExampleUseOfErrorSyntax_CallWhichMayFail_Result;

extern "C" const fidl_type_t
    test_errorsyntax_ExampleUseOfErrorSyntax_CallWhichMayFail_ResponseTable;

class ExampleUseOfErrorSyntax_CallWhichMayFail_Response final
    : public ::fidl::internal::CodableBase<
          ExampleUseOfErrorSyntax_CallWhichMayFail_Response> {
 private:
  struct Storage_;

 public:
  ExampleUseOfErrorSyntax_CallWhichMayFail_Response(Storage_ storage) noexcept
      : storage_(std::move(storage)) {}
  ExampleUseOfErrorSyntax_CallWhichMayFail_Response(int64_t value) noexcept
      : storage_({.value = std::move(value)}) {}
  ExampleUseOfErrorSyntax_CallWhichMayFail_Response()
      : ExampleUseOfErrorSyntax_CallWhichMayFail_Response(Storage_{}) {}

  ExampleUseOfErrorSyntax_CallWhichMayFail_Response(
      ExampleUseOfErrorSyntax_CallWhichMayFail_Response&&) noexcept = default;
  ExampleUseOfErrorSyntax_CallWhichMayFail_Response& operator=(
      ExampleUseOfErrorSyntax_CallWhichMayFail_Response&&) noexcept = default;
  ExampleUseOfErrorSyntax_CallWhichMayFail_Response(
      const ExampleUseOfErrorSyntax_CallWhichMayFail_Response& other) noexcept
      : ExampleUseOfErrorSyntax_CallWhichMayFail_Response(
            other.CloneStorage_()) {}
  ExampleUseOfErrorSyntax_CallWhichMayFail_Response& operator=(
      const ExampleUseOfErrorSyntax_CallWhichMayFail_Response& other) noexcept {
    storage_ = other.CloneStorage_();
    return *this;
  }

  int64_t value() const { return storage_.value; }

  int64_t& value() { return storage_.value; }

 private:
  friend ::fidl::internal::CodableBase<
      ExampleUseOfErrorSyntax_CallWhichMayFail_Response>;
  friend ::fidl::CodingTraits<
      ExampleUseOfErrorSyntax_CallWhichMayFail_Response>;
  ExampleUseOfErrorSyntax_CallWhichMayFail_Response(::fidl::Decoder& decoder);
  template <typename Payload>
  friend auto ::fidl::internal::EncodeTransactionalMessageWithoutValidating(
      ::fidl::Encoder& encoder, Payload&& payload)
      -> ::fidl::HLCPPOutgoingMessage;
  void EncodeWithoutValidating(::fidl::Encoder& encoder, size_t offset);

  struct Storage_ final {
    int64_t value{};
  };

  Storage_ storage_;
  Storage_ CloneStorage_() const;
};

extern "C" const fidl_type_t
    test_errorsyntax_ExampleUseOfErrorSyntax_CallWhichMayFail_ResultTable;

class ExampleUseOfErrorSyntax_CallWhichMayFail_Result final {
 public:
  // TODO: share union tag types between wire & natural.
  enum class Tag : fidl_union_tag_t {
    kResponse = 1,  // 0x1
    kErr = 2,       // 0x2
  };

 private:
  using Storage = cpp17::variant<
      cpp17::monostate,
      ::test_errorsyntax::ExampleUseOfErrorSyntax_CallWhichMayFail_Response,
      uint32_t>;
  std::shared_ptr<Storage> storage_;
  std::shared_ptr<Storage> CloneStorage() const;
  friend struct ::fidl::internal::NaturalUnionCodingTraits<
      ::test_errorsyntax::ExampleUseOfErrorSyntax_CallWhichMayFail_Result>;
  static constexpr std::array<std::optional<::fidl::HandleInformation>, 3>
      Members = {std::nullopt, std::nullopt, std::nullopt};

  explicit ExampleUseOfErrorSyntax_CallWhichMayFail_Result(
      std::shared_ptr<Storage> storage)
      : storage_(std::move(storage)) {}

  static constexpr size_t TagToIndex(
      ::test_errorsyntax::ExampleUseOfErrorSyntax_CallWhichMayFail_Result::Tag
          tag) {
    switch (tag) {
      case ::test_errorsyntax::ExampleUseOfErrorSyntax_CallWhichMayFail_Result::
          Tag::kResponse:
        return 1;
      case ::test_errorsyntax::ExampleUseOfErrorSyntax_CallWhichMayFail_Result::
          Tag::kErr:
        return 2;
    }
  }

  static constexpr ::test_errorsyntax::
      ExampleUseOfErrorSyntax_CallWhichMayFail_Result::Tag
      IndexToTag(size_t index) {
    switch (index) {
      case 1:
        return ::test_errorsyntax::
            ExampleUseOfErrorSyntax_CallWhichMayFail_Result::Tag::kResponse;
      case 2:
        return ::test_errorsyntax::
            ExampleUseOfErrorSyntax_CallWhichMayFail_Result::Tag::kErr;
      // TODO: what's the right thing to do here?
      default:
        return ::test_errorsyntax::
            ExampleUseOfErrorSyntax_CallWhichMayFail_Result::Tag::kResponse;
    }
  }

 public:
  // Create an unknown value of this union.
  ExampleUseOfErrorSyntax_CallWhichMayFail_Result()
      : storage_(std::make_shared<Storage>()) {}

  ExampleUseOfErrorSyntax_CallWhichMayFail_Result(
      ExampleUseOfErrorSyntax_CallWhichMayFail_Result&&) noexcept = default;
  ExampleUseOfErrorSyntax_CallWhichMayFail_Result& operator=(
      ExampleUseOfErrorSyntax_CallWhichMayFail_Result&&) noexcept = default;
  ExampleUseOfErrorSyntax_CallWhichMayFail_Result(
      const ExampleUseOfErrorSyntax_CallWhichMayFail_Result& other) noexcept
      : ExampleUseOfErrorSyntax_CallWhichMayFail_Result(other.CloneStorage()) {}
  ExampleUseOfErrorSyntax_CallWhichMayFail_Result& operator=(
      const ExampleUseOfErrorSyntax_CallWhichMayFail_Result& other) noexcept {
    storage_ = other.CloneStorage();
    return *this;
  }

  constexpr ::test_errorsyntax::
      ExampleUseOfErrorSyntax_CallWhichMayFail_Result::Tag
      Which() const {
    return ExampleUseOfErrorSyntax_CallWhichMayFail_Result::IndexToTag(
        storage_->index());
  }
  static ExampleUseOfErrorSyntax_CallWhichMayFail_Result WithResponse(
      ::test_errorsyntax::ExampleUseOfErrorSyntax_CallWhichMayFail_Response
          val) {
    return ExampleUseOfErrorSyntax_CallWhichMayFail_Result(
        std::make_shared<Storage>(
            std::in_place_index_t<TagToIndex(
                ::test_errorsyntax::
                    ExampleUseOfErrorSyntax_CallWhichMayFail_Result::Tag::
                        kResponse)>{},
            std::move(val)));
  }

  const ::fidl::internal::UnionMemberView<1, Storage> response() const {
    return ::fidl::internal::UnionMemberView<1, Storage>(storage_);
  }
  ::fidl::internal::UnionMemberView<1, Storage> response() {
    return ::fidl::internal::UnionMemberView<1, Storage>(storage_);
  }
  static ExampleUseOfErrorSyntax_CallWhichMayFail_Result WithErr(uint32_t val) {
    return ExampleUseOfErrorSyntax_CallWhichMayFail_Result(std::make_shared<
                                                           Storage>(
        std::in_place_index_t<TagToIndex(
            ::test_errorsyntax::
                ExampleUseOfErrorSyntax_CallWhichMayFail_Result::Tag::kErr)>{},
        std::move(val)));
  }

  const ::fidl::internal::UnionMemberView<2, Storage> err() const {
    return ::fidl::internal::UnionMemberView<2, Storage>(storage_);
  }
  ::fidl::internal::UnionMemberView<2, Storage> err() {
    return ::fidl::internal::UnionMemberView<2, Storage>(storage_);
  }
};

extern "C" const fidl_type_t
    test_errorsyntax_ExampleUseOfErrorSyntaxCallWhichMayFailTopResponseTable;

class ExampleUseOfErrorSyntaxCallWhichMayFailTopResponse final
    : public ::fidl::internal::CodableBase<
          ExampleUseOfErrorSyntaxCallWhichMayFailTopResponse> {
 private:
  struct Storage_;

 public:
  ExampleUseOfErrorSyntaxCallWhichMayFailTopResponse(Storage_ storage) noexcept
      : storage_(std::move(storage)) {}
  ExampleUseOfErrorSyntaxCallWhichMayFailTopResponse(
      ::test_errorsyntax::ExampleUseOfErrorSyntax_CallWhichMayFail_Result
          result) noexcept
      : storage_({.result = std::move(result)}) {}
  ExampleUseOfErrorSyntaxCallWhichMayFailTopResponse()
      : ExampleUseOfErrorSyntaxCallWhichMayFailTopResponse(Storage_{}) {}

  ExampleUseOfErrorSyntaxCallWhichMayFailTopResponse(
      ExampleUseOfErrorSyntaxCallWhichMayFailTopResponse&&) noexcept = default;
  ExampleUseOfErrorSyntaxCallWhichMayFailTopResponse& operator=(
      ExampleUseOfErrorSyntaxCallWhichMayFailTopResponse&&) noexcept = default;
  ExampleUseOfErrorSyntaxCallWhichMayFailTopResponse(
      const ExampleUseOfErrorSyntaxCallWhichMayFailTopResponse& other) noexcept
      : ExampleUseOfErrorSyntaxCallWhichMayFailTopResponse(
            other.CloneStorage_()) {}
  ExampleUseOfErrorSyntaxCallWhichMayFailTopResponse& operator=(
      const ExampleUseOfErrorSyntaxCallWhichMayFailTopResponse&
          other) noexcept {
    storage_ = other.CloneStorage_();
    return *this;
  }

  const ::test_errorsyntax::ExampleUseOfErrorSyntax_CallWhichMayFail_Result&
  result() const {
    return storage_.result;
  }

  ::test_errorsyntax::ExampleUseOfErrorSyntax_CallWhichMayFail_Result&
  result() {
    return storage_.result;
  }

 private:
  friend ::fidl::internal::CodableBase<
      ExampleUseOfErrorSyntaxCallWhichMayFailTopResponse>;
  friend ::fidl::CodingTraits<
      ExampleUseOfErrorSyntaxCallWhichMayFailTopResponse>;
  ExampleUseOfErrorSyntaxCallWhichMayFailTopResponse(::fidl::Decoder& decoder);
  template <typename Payload>
  friend auto ::fidl::internal::EncodeTransactionalMessageWithoutValidating(
      ::fidl::Encoder& encoder, Payload&& payload)
      -> ::fidl::HLCPPOutgoingMessage;
  void EncodeWithoutValidating(::fidl::Encoder& encoder, size_t offset);

  struct Storage_ final {
    ::test_errorsyntax::ExampleUseOfErrorSyntax_CallWhichMayFail_Result
        result{};
  };

  Storage_ storage_;
  Storage_ CloneStorage_() const;
};

extern "C" const fidl_type_t
    test_errorsyntax_ExampleUseOfErrorSyntaxCallWhichMayFailRequestTable;

class ExampleUseOfErrorSyntaxCallWhichMayFailRequest final
    : public ::fidl::internal::CodableBase<
          ExampleUseOfErrorSyntaxCallWhichMayFailRequest> {
 private:
  struct Storage_;

 public:
  ExampleUseOfErrorSyntaxCallWhichMayFailRequest(Storage_ storage) noexcept
      : storage_(std::move(storage)) {}
  ExampleUseOfErrorSyntaxCallWhichMayFailRequest(::std::string s) noexcept
      : storage_({.s = std::move(s)}) {}
  ExampleUseOfErrorSyntaxCallWhichMayFailRequest()
      : ExampleUseOfErrorSyntaxCallWhichMayFailRequest(Storage_{}) {}

  ExampleUseOfErrorSyntaxCallWhichMayFailRequest(
      ExampleUseOfErrorSyntaxCallWhichMayFailRequest&&) noexcept = default;
  ExampleUseOfErrorSyntaxCallWhichMayFailRequest& operator=(
      ExampleUseOfErrorSyntaxCallWhichMayFailRequest&&) noexcept = default;
  ExampleUseOfErrorSyntaxCallWhichMayFailRequest(
      const ExampleUseOfErrorSyntaxCallWhichMayFailRequest& other) noexcept
      : ExampleUseOfErrorSyntaxCallWhichMayFailRequest(other.CloneStorage_()) {}
  ExampleUseOfErrorSyntaxCallWhichMayFailRequest& operator=(
      const ExampleUseOfErrorSyntaxCallWhichMayFailRequest& other) noexcept {
    storage_ = other.CloneStorage_();
    return *this;
  }

  const ::std::string& s() const { return storage_.s; }

  ::std::string& s() { return storage_.s; }

 private:
  friend ::fidl::internal::CodableBase<
      ExampleUseOfErrorSyntaxCallWhichMayFailRequest>;
  friend ::fidl::CodingTraits<ExampleUseOfErrorSyntaxCallWhichMayFailRequest>;
  ExampleUseOfErrorSyntaxCallWhichMayFailRequest(::fidl::Decoder& decoder);
  template <typename Payload>
  friend auto ::fidl::internal::EncodeTransactionalMessageWithoutValidating(
      ::fidl::Encoder& encoder, Payload&& payload)
      -> ::fidl::HLCPPOutgoingMessage;
  void EncodeWithoutValidating(::fidl::Encoder& encoder, size_t offset);

  struct Storage_ final {
    ::std::string s{};
  };

  Storage_ storage_;
  Storage_ CloneStorage_() const;
};

}  // namespace test_errorsyntax
namespace fidl {

#ifdef __Fuchsia__
extern "C" const fidl_type_t
    test_errorsyntax_ExampleUseOfErrorSyntax_CallWhichMayFail_ResponseTable;

template <>
struct IsFidlType<
    ::test_errorsyntax::ExampleUseOfErrorSyntax_CallWhichMayFail_Response>
    : public std::true_type {};

template <>
struct ::fidl::internal::TypeTraits<
    ::test_errorsyntax::ExampleUseOfErrorSyntax_CallWhichMayFail_Response>
    final {
 public:
  static constexpr const fidl_type_t* kCodingTable =
      &test_errorsyntax_ExampleUseOfErrorSyntax_CallWhichMayFail_ResponseTable;
};

template <>
struct CodingTraits<
    ::test_errorsyntax::ExampleUseOfErrorSyntax_CallWhichMayFail_Response> {
  static constexpr size_t inline_size_v1_no_ee = 8;
  static constexpr size_t inline_size_v2 = 8;

  template <class EncoderImpl>
  static void Encode(
      EncoderImpl* encoder,
      ::test_errorsyntax::ExampleUseOfErrorSyntax_CallWhichMayFail_Response*
          value,
      size_t offset,
      cpp17::optional<HandleInformation> maybe_handle_info = cpp17::nullopt) {
    [[maybe_unused]] uint32_t field_offset;
    field_offset =
        encoder->wire_format() == ::fidl::internal::WireFormatVersion::kV1 ? 0
                                                                           : 0;
    ::fidl::Encode(encoder, &value->storage_.value, offset + field_offset);
  }

  template <typename DecoderImpl>
  static void Decode(
      DecoderImpl* decoder,
      ::test_errorsyntax::ExampleUseOfErrorSyntax_CallWhichMayFail_Response*
          value,
      size_t offset) {
    ::fidl::Decode(decoder, &value->storage_.value, offset + 0);
  }
};
#endif  // __Fuchsia__

#ifdef __Fuchsia__
extern "C" const fidl_type_t
    test_errorsyntax_ExampleUseOfErrorSyntaxCallWhichMayFailTopResponseTable;

template <>
struct IsFidlType<
    ::test_errorsyntax::ExampleUseOfErrorSyntaxCallWhichMayFailTopResponse>
    : public std::true_type {};

template <>
struct ::fidl::internal::TypeTraits<
    ::test_errorsyntax::ExampleUseOfErrorSyntaxCallWhichMayFailTopResponse>
    final {
 public:
  static constexpr const fidl_type_t* kCodingTable =
      &test_errorsyntax_ExampleUseOfErrorSyntaxCallWhichMayFailTopResponseTable;
};

template <>
struct CodingTraits<
    ::test_errorsyntax::ExampleUseOfErrorSyntaxCallWhichMayFailTopResponse> {
  static constexpr size_t inline_size_v1_no_ee = 24;
  static constexpr size_t inline_size_v2 = 16;

  template <class EncoderImpl>
  static void Encode(
      EncoderImpl* encoder,
      ::test_errorsyntax::ExampleUseOfErrorSyntaxCallWhichMayFailTopResponse*
          value,
      size_t offset,
      cpp17::optional<HandleInformation> maybe_handle_info = cpp17::nullopt) {
    [[maybe_unused]] uint32_t field_offset;
    field_offset =
        encoder->wire_format() == ::fidl::internal::WireFormatVersion::kV1 ? 0
                                                                           : 0;
    ::fidl::Encode(encoder, &value->storage_.result, offset + field_offset);
  }

  template <typename DecoderImpl>
  static void Decode(
      DecoderImpl* decoder,
      ::test_errorsyntax::ExampleUseOfErrorSyntaxCallWhichMayFailTopResponse*
          value,
      size_t offset) {
    ::fidl::Decode(decoder, &value->storage_.result, offset + 0);
  }
};
#endif  // __Fuchsia__

#ifdef __Fuchsia__
extern "C" const fidl_type_t
    test_errorsyntax_ExampleUseOfErrorSyntaxCallWhichMayFailRequestTable;

template <>
struct IsFidlType<
    ::test_errorsyntax::ExampleUseOfErrorSyntaxCallWhichMayFailRequest>
    : public std::true_type {};

template <>
struct ::fidl::internal::TypeTraits<
    ::test_errorsyntax::ExampleUseOfErrorSyntaxCallWhichMayFailRequest>
    final {
 public:
  static constexpr const fidl_type_t* kCodingTable =
      &test_errorsyntax_ExampleUseOfErrorSyntaxCallWhichMayFailRequestTable;
};

template <>
struct CodingTraits<
    ::test_errorsyntax::ExampleUseOfErrorSyntaxCallWhichMayFailRequest> {
  static constexpr size_t inline_size_v1_no_ee = 16;
  static constexpr size_t inline_size_v2 = 16;

  template <class EncoderImpl>
  static void Encode(
      EncoderImpl* encoder,
      ::test_errorsyntax::ExampleUseOfErrorSyntaxCallWhichMayFailRequest* value,
      size_t offset,
      cpp17::optional<HandleInformation> maybe_handle_info = cpp17::nullopt) {
    [[maybe_unused]] uint32_t field_offset;
    field_offset =
        encoder->wire_format() == ::fidl::internal::WireFormatVersion::kV1 ? 0
                                                                           : 0;
    ::fidl::Encode(encoder, &value->storage_.s, offset + field_offset);
  }

  template <typename DecoderImpl>
  static void Decode(
      DecoderImpl* decoder,
      ::test_errorsyntax::ExampleUseOfErrorSyntaxCallWhichMayFailRequest* value,
      size_t offset) {
    ::fidl::Decode(decoder, &value->storage_.s, offset + 0);
  }
};
#endif  // __Fuchsia__

template <>
struct IsFidlType<
    ::test_errorsyntax::ExampleUseOfErrorSyntax_CallWhichMayFail_Result>
    : public std::true_type {};

template <>
struct CodingTraits<
    ::test_errorsyntax::ExampleUseOfErrorSyntax_CallWhichMayFail_Result>
    final
    : public ::fidl::internal::NaturalUnionCodingTraits<
          ::test_errorsyntax::ExampleUseOfErrorSyntax_CallWhichMayFail_Result> {
};

}  // namespace fidl
