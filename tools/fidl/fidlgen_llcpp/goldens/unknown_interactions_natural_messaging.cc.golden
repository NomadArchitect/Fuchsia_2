// WARNING: This file is machine generated by fidlgen_llcpp.

#include <fidl/test.unknowninteractions/cpp/natural_messaging.h>

namespace test_unknowninteractions {
[[maybe_unused]] constexpr inline uint64_t kExample_StrictOneWay_Ordinal =
    2276912608357927194lu;

[[maybe_unused]] constexpr inline uint64_t kExample_FlexibleOneWay_Ordinal =
    2309537410782500280lu;

[[maybe_unused]] constexpr inline uint64_t kExample_StrictTwoWay_Ordinal =
    4530909159434307973lu;

[[maybe_unused]] constexpr inline uint64_t kExample_FlexibleTwoWay_Ordinal =
    9070032238358100524lu;

[[maybe_unused]] constexpr inline uint64_t kExample_StrictEvent_Ordinal =
    2942732192976592869lu;

[[maybe_unused]] constexpr inline uint64_t kExample_FlexibleEvent_Ordinal =
    2065245206460174394lu;

#ifdef __Fuchsia__
}  // namespace test_unknowninteractions
void fidl::internal::NaturalClientImpl<::test_unknowninteractions::Example>::
    StrictTwoWay(::fidl::ClientCallback<
                 ::test_unknowninteractions::Example::StrictTwoWay>&& _callback)
        const {
  ::fidl::internal::NaturalMessageEncoder<::fidl::internal::ChannelTransport>
      _encoder{::test_unknowninteractions::kExample_StrictTwoWay_Ordinal};
  return messenger().TwoWay(
      ::fidl::internal::EncodeTransactionalMessage(_encoder),
      ::fidl::internal::MakeResponseContext<
          ::test_unknowninteractions::Example::StrictTwoWay>(
          ::test_unknowninteractions::kExample_StrictTwoWay_Ordinal,
          std::move(_callback)));
}

void fidl::internal::NaturalClientImpl<::test_unknowninteractions::Example>::
    FlexibleTwoWay(::fidl::ClientCallback<
                   ::test_unknowninteractions::Example::FlexibleTwoWay>&&
                       _callback) const {
  ::fidl::internal::NaturalMessageEncoder<::fidl::internal::ChannelTransport>
      _encoder{::test_unknowninteractions::kExample_FlexibleTwoWay_Ordinal};
  return messenger().TwoWay(
      ::fidl::internal::EncodeTransactionalMessage(_encoder),
      ::fidl::internal::MakeResponseContext<
          ::test_unknowninteractions::Example::FlexibleTwoWay>(
          ::test_unknowninteractions::kExample_FlexibleTwoWay_Ordinal,
          std::move(_callback)));
}

::fitx::result<::fidl::Error> fidl::internal::NaturalClientImpl<
    ::test_unknowninteractions::Example>::StrictOneWay() const {
  ::fidl::internal::NaturalMessageEncoder<::fidl::internal::ChannelTransport>
      _encoder{::test_unknowninteractions::kExample_StrictOneWay_Ordinal};
  ::fidl::Status status = messenger().OneWay(
      ::fidl::internal::EncodeTransactionalMessage(_encoder));
  return ::fidl::internal::ToFitxResult(status);
}

::fitx::result<::fidl::Error> fidl::internal::NaturalClientImpl<
    ::test_unknowninteractions::Example>::FlexibleOneWay() const {
  ::fidl::internal::NaturalMessageEncoder<::fidl::internal::ChannelTransport>
      _encoder{::test_unknowninteractions::kExample_FlexibleOneWay_Ordinal};
  ::fidl::Status status = messenger().OneWay(
      ::fidl::internal::EncodeTransactionalMessage(_encoder));
  return ::fidl::internal::ToFitxResult(status);
}
namespace test_unknowninteractions {
#endif  // __Fuchsia__

}  // namespace test_unknowninteractions
#ifdef __Fuchsia__

std::optional<::fidl::UnbindInfo> fidl::internal::
    NaturalEventDispatcher<::test_unknowninteractions::Example>::DispatchEvent(
        ::fidl::IncomingMessage& msg,
        ::fidl::internal::IncomingTransportContext transport_context) {
  switch (msg.header()->ordinal) {
    case ::test_unknowninteractions::kExample_StrictEvent_Ordinal: {
      ::fitx::result decoded =
          ::fidl::internal::DecodeTransactionalMessage(std::move(msg));
      if (decoded.is_error()) {
        return ::fidl::UnbindInfo(decoded.error_value());
      }
      if (event_handler()) {
        ::fidl::Event<::test_unknowninteractions::Example::StrictEvent> event;
        event_handler()->StrictEvent(event);
      }
      return std::nullopt;
    }
    case ::test_unknowninteractions::kExample_FlexibleEvent_Ordinal: {
      ::fitx::result decoded =
          ::fidl::internal::DecodeTransactionalMessage(std::move(msg));
      if (decoded.is_error()) {
        return ::fidl::UnbindInfo(decoded.error_value());
      }
      if (event_handler()) {
        ::fidl::Event<::test_unknowninteractions::Example::FlexibleEvent> event;
        event_handler()->FlexibleEvent(event);
      }
      return std::nullopt;
    }
    default:
      break;
  }
  return ::fidl::UnbindInfo::UnknownOrdinal();
}
#endif  // __Fuchsia__

#ifdef __Fuchsia__

::fitx::result<::fidl::Error> fidl::internal::NaturalWeakEventSender<
    ::test_unknowninteractions::Example>::StrictEvent() {
  ::fidl::internal::NaturalMessageEncoder<::fidl::internal::ChannelTransport>
      _encoder{::test_unknowninteractions::kExample_StrictEvent_Ordinal};
  auto encoded_message = ::fidl::internal::EncodeTransactionalMessage(_encoder);
  ::fidl::Status result = _inner().SendEvent(encoded_message);
  return ::fidl::internal::ToFitxResult(result);
}

::fitx::result<::fidl::Error> fidl::internal::NaturalEventSender<
    ::test_unknowninteractions::Example>::StrictEvent() {
  ::fidl::internal::NaturalMessageEncoder<::fidl::internal::ChannelTransport>
      _encoder{::test_unknowninteractions::kExample_StrictEvent_Ordinal};
  auto encoded_message = ::fidl::internal::EncodeTransactionalMessage(_encoder);
  encoded_message.Write(_transport());
  return ::fidl::internal::ToFitxResult(::fidl::Status{encoded_message});
}

::fitx::result<::fidl::Error> fidl::internal::NaturalWeakEventSender<
    ::test_unknowninteractions::Example>::FlexibleEvent() {
  ::fidl::internal::NaturalMessageEncoder<::fidl::internal::ChannelTransport>
      _encoder{::test_unknowninteractions::kExample_FlexibleEvent_Ordinal};
  auto encoded_message = ::fidl::internal::EncodeTransactionalMessage(_encoder);
  ::fidl::Status result = _inner().SendEvent(encoded_message);
  return ::fidl::internal::ToFitxResult(result);
}

::fitx::result<::fidl::Error> fidl::internal::NaturalEventSender<
    ::test_unknowninteractions::Example>::FlexibleEvent() {
  ::fidl::internal::NaturalMessageEncoder<::fidl::internal::ChannelTransport>
      _encoder{::test_unknowninteractions::kExample_FlexibleEvent_Ordinal};
  auto encoded_message = ::fidl::internal::EncodeTransactionalMessage(_encoder);
  encoded_message.Write(_transport());
  return ::fidl::internal::ToFitxResult(::fidl::Status{encoded_message});
}

#endif  // __Fuchsia__

void fidl::internal::NaturalCompleterBase<
    ::test_unknowninteractions::Example::StrictTwoWay>::Reply() {
  ::fidl::internal::NaturalServerMessenger _messenger{this};
  ::fidl::internal::NaturalMessageEncoder<::fidl::internal::ChannelTransport>
      _encoder{::test_unknowninteractions::kExample_StrictTwoWay_Ordinal};
  _messenger.SendReply(::fidl::internal::EncodeTransactionalMessage(_encoder),
                       ::fidl::internal::OutgoingTransportContext{});
}

void fidl::internal::NaturalCompleterBase<
    ::test_unknowninteractions::Example::FlexibleTwoWay>::
    Reply(
        ::fidl::Response<::test_unknowninteractions::Example::FlexibleTwoWay>&&
            response) {
  ::fidl::internal::NaturalServerMessenger _messenger{this};
  ::fidl::internal::NaturalMessageEncoder<::fidl::internal::ChannelTransport>
      _encoder{::test_unknowninteractions::kExample_FlexibleTwoWay_Ordinal};
  _messenger.SendReply(
      ::fidl::internal::EncodeTransactionalMessage(
          _encoder, ::fidl::internal::NaturalMessageConverter<::fidl::Response<
                        ::test_unknowninteractions::Example::FlexibleTwoWay>>::
                        IntoDomainObject(std::move(response))),
      ::fidl::internal::OutgoingTransportContext{});
}

#ifdef __Fuchsia__

constexpr ::fidl::internal::MethodEntry fidl::internal::NaturalServerDispatcher<
    ::test_unknowninteractions::Example>::entries_[] = {
    {
        ::test_unknowninteractions::kExample_StrictOneWay_Ordinal,
        [](void* interface, ::fidl::IncomingMessage&& msg,
           internal::IncomingTransportContext transport_context,
           ::fidl::Transaction* txn) {
          ::fitx::result decoded =
              ::fidl::internal::DecodeTransactionalMessage(std::move(msg));
          if (decoded.is_error()) {
            return decoded.error_value().status();
          }
          ::fidl::Request<::test_unknowninteractions::Example::StrictOneWay>
              request;
          ::fidl::internal::NaturalCompleter<
              ::test_unknowninteractions::Example::StrictOneWay>::Sync
              completer(txn);
          static_cast<::fidl::Server<::test_unknowninteractions::Example>*>(
              interface)
              ->StrictOneWay(request, completer);
          return ZX_OK;
        },
    },
    {
        ::test_unknowninteractions::kExample_FlexibleOneWay_Ordinal,
        [](void* interface, ::fidl::IncomingMessage&& msg,
           internal::IncomingTransportContext transport_context,
           ::fidl::Transaction* txn) {
          ::fitx::result decoded =
              ::fidl::internal::DecodeTransactionalMessage(std::move(msg));
          if (decoded.is_error()) {
            return decoded.error_value().status();
          }
          ::fidl::Request<::test_unknowninteractions::Example::FlexibleOneWay>
              request;
          ::fidl::internal::NaturalCompleter<
              ::test_unknowninteractions::Example::FlexibleOneWay>::Sync
              completer(txn);
          static_cast<::fidl::Server<::test_unknowninteractions::Example>*>(
              interface)
              ->FlexibleOneWay(request, completer);
          return ZX_OK;
        },
    },
    {
        ::test_unknowninteractions::kExample_StrictTwoWay_Ordinal,
        [](void* interface, ::fidl::IncomingMessage&& msg,
           internal::IncomingTransportContext transport_context,
           ::fidl::Transaction* txn) {
          ::fitx::result decoded =
              ::fidl::internal::DecodeTransactionalMessage(std::move(msg));
          if (decoded.is_error()) {
            return decoded.error_value().status();
          }
          ::fidl::Request<::test_unknowninteractions::Example::StrictTwoWay>
              request;
          ::fidl::internal::NaturalCompleter<
              ::test_unknowninteractions::Example::StrictTwoWay>::Sync
              completer(txn);
          static_cast<::fidl::Server<::test_unknowninteractions::Example>*>(
              interface)
              ->StrictTwoWay(request, completer);
          return ZX_OK;
        },
    },
    {
        ::test_unknowninteractions::kExample_FlexibleTwoWay_Ordinal,
        [](void* interface, ::fidl::IncomingMessage&& msg,
           internal::IncomingTransportContext transport_context,
           ::fidl::Transaction* txn) {
          ::fitx::result decoded =
              ::fidl::internal::DecodeTransactionalMessage(std::move(msg));
          if (decoded.is_error()) {
            return decoded.error_value().status();
          }
          ::fidl::Request<::test_unknowninteractions::Example::FlexibleTwoWay>
              request;
          ::fidl::internal::NaturalCompleter<
              ::test_unknowninteractions::Example::FlexibleTwoWay>::Sync
              completer(txn);
          static_cast<::fidl::Server<::test_unknowninteractions::Example>*>(
              interface)
              ->FlexibleTwoWay(request, completer);
          return ZX_OK;
        },
    },
};

const ::fidl::internal::MethodEntry* fidl::internal::NaturalServerDispatcher<
    ::test_unknowninteractions::Example>::entries_end_ = &entries_[4];

void fidl::internal::
    NaturalServerDispatcher<::test_unknowninteractions::Example>::Dispatch(
        ::fidl::Server<::test_unknowninteractions::Example>* impl,
        ::fidl::IncomingMessage&& msg,
        internal::IncomingTransportContext transport_context,
        ::fidl::Transaction* txn) {
  ::fidl::internal::Dispatch(impl, msg, std::move(transport_context), txn,
                             entries_, entries_end_);
}
void fidl::Server<::test_unknowninteractions::Example>::dispatch_message(
    ::fidl::IncomingMessage&& msg, ::fidl::Transaction* txn,
    ::fidl::internal::IncomingTransportContext transport_context) {
  ::fidl::internal::NaturalServerDispatcher<
      ::test_unknowninteractions::Example>::Dispatch(this, std::move(msg),
                                                     std::move(
                                                         transport_context),
                                                     txn);
}
#endif  // __Fuchsia__
