// WARNING: This file is machine generated by fidlgen.

#pragma once

#include <fidl/test.vectors/cpp/common_types.h>
#include <fidl/test.vectors/cpp/markers.h>
#include <lib/fidl/cpp/coding_traits.h>
#include <lib/fidl/cpp/internal/codable_base.h>
#include <lib/fidl/cpp/unified_messaging.h>

#include <cinttypes>
#include <string>

#ifdef __Fuchsia__

#endif  // __Fuchsia__

namespace test_vectors {
class ExampleUseOfVectors;

extern "C" const fidl_type_t test_vectors_ExampleUseOfVectorsTable;

class ExampleUseOfVectors final
    : public ::fidl::internal::CodableBase<ExampleUseOfVectors> {
 private:
  struct Storage_;

 public:
  ExampleUseOfVectors(Storage_ storage) noexcept
      : storage_(std::move(storage)) {}
  ExampleUseOfVectors(
      ::std::vector<uint8_t> vector_of_uint8,
      ::std::vector<::std::vector<bool>> vector_of_vector_of_bool) noexcept
      : storage_({.vector_of_uint8 = std::move(vector_of_uint8),
                  .vector_of_vector_of_bool =
                      std::move(vector_of_vector_of_bool)}) {}
  ExampleUseOfVectors() : ExampleUseOfVectors(Storage_{}) {}

  ExampleUseOfVectors(ExampleUseOfVectors&&) noexcept = default;
  ExampleUseOfVectors& operator=(ExampleUseOfVectors&&) noexcept = default;
  ExampleUseOfVectors(const ExampleUseOfVectors& other) noexcept
      : ExampleUseOfVectors(other.CloneStorage_()) {}
  ExampleUseOfVectors& operator=(const ExampleUseOfVectors& other) noexcept {
    storage_ = other.CloneStorage_();
    return *this;
  }

  const ::std::vector<uint8_t>& vector_of_uint8() const {
    return storage_.vector_of_uint8;
  }

  ::std::vector<uint8_t>& vector_of_uint8() { return storage_.vector_of_uint8; }

  const ::std::vector<::std::vector<bool>>& vector_of_vector_of_bool() const {
    return storage_.vector_of_vector_of_bool;
  }

  ::std::vector<::std::vector<bool>>& vector_of_vector_of_bool() {
    return storage_.vector_of_vector_of_bool;
  }

 private:
  friend ::fidl::internal::CodableBase<ExampleUseOfVectors>;
  friend ::fidl::CodingTraits<ExampleUseOfVectors>;
  ExampleUseOfVectors(::fidl::Decoder& decoder);
  template <typename Payload>
  friend auto ::fidl::internal::EncodeTransactionalMessageWithoutValidating(
      ::fidl::Encoder& encoder, Payload&& payload)
      -> ::fidl::HLCPPOutgoingMessage;
  void EncodeWithoutValidating(::fidl::Encoder& encoder, size_t offset);

  struct Storage_ final {
    ::std::vector<uint8_t> vector_of_uint8{};
    ::std::vector<::std::vector<bool>> vector_of_vector_of_bool{};
  };

  Storage_ storage_;
  Storage_ CloneStorage_() const;
};

}  // namespace test_vectors
namespace fidl {

#ifdef __Fuchsia__
extern "C" const fidl_type_t test_vectors_ExampleUseOfVectorsTable;

template <>
struct IsFidlType<::test_vectors::ExampleUseOfVectors> : public std::true_type {
};

template <>
struct ::fidl::internal::TypeTraits<::test_vectors::ExampleUseOfVectors> final {
 public:
  static constexpr const fidl_type_t* kCodingTable =
      &test_vectors_ExampleUseOfVectorsTable;
};

template <>
struct CodingTraits<::test_vectors::ExampleUseOfVectors> {
  static constexpr size_t inline_size_v1_no_ee = 32;
  static constexpr size_t inline_size_v2 = 32;

  template <class EncoderImpl>
  static void Encode(
      EncoderImpl* encoder, ::test_vectors::ExampleUseOfVectors* value,
      size_t offset,
      cpp17::optional<HandleInformation> maybe_handle_info = cpp17::nullopt) {
    [[maybe_unused]] uint32_t field_offset;
    field_offset =
        encoder->wire_format() == ::fidl::internal::WireFormatVersion::kV1 ? 0
                                                                           : 0;
    ::fidl::Encode(encoder, &value->storage_.vector_of_uint8,
                   offset + field_offset);
    field_offset =
        encoder->wire_format() == ::fidl::internal::WireFormatVersion::kV1 ? 16
                                                                           : 16;
    ::fidl::Encode(encoder, &value->storage_.vector_of_vector_of_bool,
                   offset + field_offset);
  }

  template <typename DecoderImpl>
  static void Decode(DecoderImpl* decoder,
                     ::test_vectors::ExampleUseOfVectors* value,
                     size_t offset) {
    ::fidl::Decode(decoder, &value->storage_.vector_of_uint8, offset + 0);
    ::fidl::Decode(decoder, &value->storage_.vector_of_vector_of_bool,
                   offset + 16);
  }
};
#endif  // __Fuchsia__

}  // namespace fidl
