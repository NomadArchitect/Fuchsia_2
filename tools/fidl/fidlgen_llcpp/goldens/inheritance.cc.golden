// WARNING: This file is machine generated by fidlgen.

#include <fidl/test/inheritance/llcpp/fidl.h>

#include <memory>

namespace fidl_test_inheritance {
namespace {

[[maybe_unused]] constexpr uint64_t ksuper_foo_Ordinal = 4999045011615110827lu;

extern "C" const fidl_type_t fidl_test_inheritance_superfooRequestTable;

extern "C" const fidl_type_t fidl_test_inheritance_superfooResponseTable;

}  // namespace
#ifdef __Fuchsia__
::fidl_test_inheritance::super::ResultOf::foo::foo(
    ::fidl::UnownedClientEnd<::fidl_test_inheritance::super> _client,
    const ::fidl::StringView& s) {
  ::fidl::OwnedEncodedMessage<fooRequest> _request(zx_txid_t(0), s);
  _request.GetOutgoingMessage().Call<fooResponse>(_client, bytes_.data(),
                                                  bytes_.size());
  status_ = _request.status();
  error_ = _request.error();
}

::fidl_test_inheritance::super::ResultOf::foo::foo(
    ::fidl::UnownedClientEnd<::fidl_test_inheritance::super> _client,
    const ::fidl::StringView& s, zx_time_t _deadline) {
  ::fidl::OwnedEncodedMessage<fooRequest> _request(zx_txid_t(0), s);
  _request.GetOutgoingMessage().Call<fooResponse>(_client, bytes_.data(),
                                                  bytes_.size(), _deadline);
  status_ = _request.status();
  error_ = _request.error();
}
#endif

#ifdef __Fuchsia__
::fidl_test_inheritance::super::UnownedResultOf::foo::foo(
    ::fidl::UnownedClientEnd<::fidl_test_inheritance::super> _client,
    uint8_t* _request_bytes, uint32_t _request_byte_capacity,
    const ::fidl::StringView& s, uint8_t* _response_bytes,
    uint32_t _response_byte_capacity)
    : bytes_(_response_bytes) {
  ::fidl::UnownedEncodedMessage<fooRequest> _request(
      _request_bytes, _request_byte_capacity, 0, s);
  _request.GetOutgoingMessage().Call<fooResponse>(_client, _response_bytes,
                                                  _response_byte_capacity);
  status_ = _request.status();
  error_ = _request.error();
}
#endif

#ifdef __Fuchsia__
::fidl_test_inheritance::super::ResultOf::foo super::ClientImpl::foo_Sync(
    ::fidl::StringView s) {
  if (auto _channel = ::fidl::internal::ClientBase::GetChannel()) {
    return ResultOf::foo(
        ::fidl::UnownedClientEnd<::fidl_test_inheritance::super>(
            _channel->handle()),
        s);
  }
  return ::fidl_test_inheritance::super::ResultOf::foo(
      ::fidl::Result(ZX_ERR_CANCELED, ::fidl::kErrorChannelUnbound));
}
#endif

#ifdef __Fuchsia__
::fidl_test_inheritance::super::UnownedResultOf::foo
super::ClientImpl::foo_Sync(::fidl::BufferSpan _request_buffer,
                            ::fidl::StringView s,
                            ::fidl::BufferSpan _response_buffer) {
  if (auto _channel = ::fidl::internal::ClientBase::GetChannel()) {
    return UnownedResultOf::foo(
        ::fidl::UnownedClientEnd<::fidl_test_inheritance::super>(
            _channel->handle()),
        _request_buffer.data, _request_buffer.capacity, s,
        _response_buffer.data, _response_buffer.capacity);
  }
  return ::fidl_test_inheritance::super::UnownedResultOf::foo(
      ::fidl::Result(ZX_ERR_CANCELED, ::fidl::kErrorChannelUnbound));
}
#endif

#ifdef __Fuchsia__
::fidl_test_inheritance::super::fooResponseContext::fooResponseContext()
    : ::fidl::internal::ResponseContext(fooResponse::Type, ksuper_foo_Ordinal) {
}

void ::fidl_test_inheritance::super::fooResponseContext::OnReply(
    uint8_t* reply) {
  OnReply(reinterpret_cast<fooResponse*>(reply));
}

::fidl::Result super::ClientImpl::foo(
    ::fidl::StringView s, ::fit::callback<void(fooResponse* response)> _cb) {
  class ResponseContext final : public fooResponseContext {
   public:
    ResponseContext(::fit::callback<void(fooResponse* response)> cb)
        : cb_(std::move(cb)) {}

    void OnReply(fooResponse* response) override {
      cb_(response);

      delete this;
    }

    void OnError() override { delete this; }

   private:
    ::fit::callback<void(fooResponse* response)> cb_;
  };

  auto* _context = new ResponseContext(std::move(_cb));
  ::fidl::internal::ClientBase::PrepareAsyncTxn(_context);
  fooRequest::OwnedEncodedMessage _request(_context->Txid(), s);
  return _request.GetOutgoingMessage().Write(this, _context);
}

::fidl::Result super::ClientImpl::foo(::fidl::BufferSpan _request_buffer,
                                      ::fidl::StringView s,
                                      fooResponseContext* _context) {
  ::fidl::internal::ClientBase::PrepareAsyncTxn(_context);

  fooRequest::UnownedEncodedMessage _request(
      _request_buffer.data, _request_buffer.capacity, _context->Txid(), s);
  return _request.GetOutgoingMessage().Write(this, _context);
}
#endif

#ifdef __Fuchsia__
std::optional<::fidl::UnbindInfo> super::ClientImpl::DispatchEvent(
    fidl_incoming_msg_t* msg) {
  FidlHandleInfoCloseMany(msg->handles, msg->num_handles);
  return ::fidl::UnbindInfo{::fidl::UnbindInfo::kUnexpectedMessage,
                            ZX_ERR_NOT_SUPPORTED};
}
#endif

#ifdef __Fuchsia__
namespace methods {

void superDispatchfoo(void* interface, void* bytes, ::fidl::Transaction* txn) {
  auto message =
      reinterpret_cast<::fidl_test_inheritance::super::fooRequest*>(bytes);
  ::fidl_test_inheritance::super::Interface::fooCompleter::Sync completer(txn);
  reinterpret_cast<::fidl_test_inheritance::super::Interface*>(interface)->foo(
      std::move(message->s), completer);
}

}  // namespace methods

namespace entries {

::fidl::internal::MethodEntry super[] = {
    {ksuper_foo_Ordinal, ::fidl_test_inheritance::super::fooRequest::Type,
     methods::superDispatchfoo},
};

}  // namespace entries

::fidl::DispatchResult super::TryDispatch(Interface* impl,
                                          fidl_incoming_msg_t* msg,
                                          ::fidl::Transaction* txn) {
  return ::fidl::internal::TryDispatch(
      impl, msg, txn, entries::super,
      entries::super +
          sizeof(entries::super) / sizeof(::fidl::internal::MethodEntry));
}
#endif

#ifdef __Fuchsia__
::fidl::DispatchResult super::Dispatch(Interface* impl,
                                       fidl_incoming_msg_t* msg,
                                       ::fidl::Transaction* txn) {
  ::fidl::DispatchResult dispatch_result = TryDispatch(impl, msg, txn);
  if (dispatch_result == ::fidl::DispatchResult::kNotFound) {
    FidlHandleInfoCloseMany(msg->handles, msg->num_handles);
    txn->InternalError(
        {::fidl::UnbindInfo::kUnexpectedMessage, ZX_ERR_NOT_SUPPORTED});
  }
  return dispatch_result;
}

::fidl::DispatchResult super::Interface::dispatch_message(
    fidl_incoming_msg_t* msg, ::fidl::Transaction* txn) {
  return super::Dispatch(this, msg, txn);
}
#endif

#ifdef __Fuchsia__
::fidl::Result super::Interface::fooCompleterBase::Reply(int64_t y) {
  ::fidl::OwnedEncodedMessage<fooResponse> _response{y};
  return CompleterBase::SendReply(&_response.GetOutgoingMessage());
}
#endif

#ifdef __Fuchsia__
::fidl::Result super::Interface::fooCompleterBase::Reply(
    ::fidl::BufferSpan _buffer, int64_t y) {
  fooResponse::UnownedEncodedMessage _response(_buffer.data, _buffer.capacity,
                                               y);
  return CompleterBase::SendReply(&_response.GetOutgoingMessage());
}
#endif

void ::fidl_test_inheritance::super::fooRequest::_InitHeader(zx_txid_t _txid) {
  fidl_init_txn_header(&_hdr, _txid, ksuper_foo_Ordinal);
}

void ::fidl_test_inheritance::super::fooResponse::_InitHeader() {
  fidl_init_txn_header(&_hdr, 0, ksuper_foo_Ordinal);
}

#ifdef __Fuchsia__
#endif

namespace {

[[maybe_unused]] constexpr uint64_t ksub_foo_Ordinal = 4999045011615110827lu;

extern "C" const fidl_type_t fidl_test_inheritance_subfooRequestTable;

extern "C" const fidl_type_t fidl_test_inheritance_subfooResponseTable;

}  // namespace
#ifdef __Fuchsia__
::fidl_test_inheritance::sub::ResultOf::foo::foo(
    ::fidl::UnownedClientEnd<::fidl_test_inheritance::sub> _client,
    const ::fidl::StringView& s) {
  ::fidl::OwnedEncodedMessage<fooRequest> _request(zx_txid_t(0), s);
  _request.GetOutgoingMessage().Call<fooResponse>(_client, bytes_.data(),
                                                  bytes_.size());
  status_ = _request.status();
  error_ = _request.error();
}

::fidl_test_inheritance::sub::ResultOf::foo::foo(
    ::fidl::UnownedClientEnd<::fidl_test_inheritance::sub> _client,
    const ::fidl::StringView& s, zx_time_t _deadline) {
  ::fidl::OwnedEncodedMessage<fooRequest> _request(zx_txid_t(0), s);
  _request.GetOutgoingMessage().Call<fooResponse>(_client, bytes_.data(),
                                                  bytes_.size(), _deadline);
  status_ = _request.status();
  error_ = _request.error();
}
#endif

#ifdef __Fuchsia__
::fidl_test_inheritance::sub::UnownedResultOf::foo::foo(
    ::fidl::UnownedClientEnd<::fidl_test_inheritance::sub> _client,
    uint8_t* _request_bytes, uint32_t _request_byte_capacity,
    const ::fidl::StringView& s, uint8_t* _response_bytes,
    uint32_t _response_byte_capacity)
    : bytes_(_response_bytes) {
  ::fidl::UnownedEncodedMessage<fooRequest> _request(
      _request_bytes, _request_byte_capacity, 0, s);
  _request.GetOutgoingMessage().Call<fooResponse>(_client, _response_bytes,
                                                  _response_byte_capacity);
  status_ = _request.status();
  error_ = _request.error();
}
#endif

#ifdef __Fuchsia__
::fidl_test_inheritance::sub::ResultOf::foo sub::ClientImpl::foo_Sync(
    ::fidl::StringView s) {
  if (auto _channel = ::fidl::internal::ClientBase::GetChannel()) {
    return ResultOf::foo(::fidl::UnownedClientEnd<::fidl_test_inheritance::sub>(
                             _channel->handle()),
                         s);
  }
  return ::fidl_test_inheritance::sub::ResultOf::foo(
      ::fidl::Result(ZX_ERR_CANCELED, ::fidl::kErrorChannelUnbound));
}
#endif

#ifdef __Fuchsia__
::fidl_test_inheritance::sub::UnownedResultOf::foo sub::ClientImpl::foo_Sync(
    ::fidl::BufferSpan _request_buffer, ::fidl::StringView s,
    ::fidl::BufferSpan _response_buffer) {
  if (auto _channel = ::fidl::internal::ClientBase::GetChannel()) {
    return UnownedResultOf::foo(
        ::fidl::UnownedClientEnd<::fidl_test_inheritance::sub>(
            _channel->handle()),
        _request_buffer.data, _request_buffer.capacity, s,
        _response_buffer.data, _response_buffer.capacity);
  }
  return ::fidl_test_inheritance::sub::UnownedResultOf::foo(
      ::fidl::Result(ZX_ERR_CANCELED, ::fidl::kErrorChannelUnbound));
}
#endif

#ifdef __Fuchsia__
::fidl_test_inheritance::sub::fooResponseContext::fooResponseContext()
    : ::fidl::internal::ResponseContext(fooResponse::Type, ksub_foo_Ordinal) {}

void ::fidl_test_inheritance::sub::fooResponseContext::OnReply(uint8_t* reply) {
  OnReply(reinterpret_cast<fooResponse*>(reply));
}

::fidl::Result sub::ClientImpl::foo(
    ::fidl::StringView s, ::fit::callback<void(fooResponse* response)> _cb) {
  class ResponseContext final : public fooResponseContext {
   public:
    ResponseContext(::fit::callback<void(fooResponse* response)> cb)
        : cb_(std::move(cb)) {}

    void OnReply(fooResponse* response) override {
      cb_(response);

      delete this;
    }

    void OnError() override { delete this; }

   private:
    ::fit::callback<void(fooResponse* response)> cb_;
  };

  auto* _context = new ResponseContext(std::move(_cb));
  ::fidl::internal::ClientBase::PrepareAsyncTxn(_context);
  fooRequest::OwnedEncodedMessage _request(_context->Txid(), s);
  return _request.GetOutgoingMessage().Write(this, _context);
}

::fidl::Result sub::ClientImpl::foo(::fidl::BufferSpan _request_buffer,
                                    ::fidl::StringView s,
                                    fooResponseContext* _context) {
  ::fidl::internal::ClientBase::PrepareAsyncTxn(_context);

  fooRequest::UnownedEncodedMessage _request(
      _request_buffer.data, _request_buffer.capacity, _context->Txid(), s);
  return _request.GetOutgoingMessage().Write(this, _context);
}
#endif

#ifdef __Fuchsia__
std::optional<::fidl::UnbindInfo> sub::ClientImpl::DispatchEvent(
    fidl_incoming_msg_t* msg) {
  FidlHandleInfoCloseMany(msg->handles, msg->num_handles);
  return ::fidl::UnbindInfo{::fidl::UnbindInfo::kUnexpectedMessage,
                            ZX_ERR_NOT_SUPPORTED};
}
#endif

#ifdef __Fuchsia__
namespace methods {

void subDispatchfoo(void* interface, void* bytes, ::fidl::Transaction* txn) {
  auto message =
      reinterpret_cast<::fidl_test_inheritance::sub::fooRequest*>(bytes);
  ::fidl_test_inheritance::sub::Interface::fooCompleter::Sync completer(txn);
  reinterpret_cast<::fidl_test_inheritance::sub::Interface*>(interface)->foo(
      std::move(message->s), completer);
}

}  // namespace methods

namespace entries {

::fidl::internal::MethodEntry sub[] = {
    {ksub_foo_Ordinal, ::fidl_test_inheritance::sub::fooRequest::Type,
     methods::subDispatchfoo},
};

}  // namespace entries

::fidl::DispatchResult sub::TryDispatch(Interface* impl,
                                        fidl_incoming_msg_t* msg,
                                        ::fidl::Transaction* txn) {
  return ::fidl::internal::TryDispatch(
      impl, msg, txn, entries::sub,
      entries::sub +
          sizeof(entries::sub) / sizeof(::fidl::internal::MethodEntry));
}
#endif

#ifdef __Fuchsia__
::fidl::DispatchResult sub::Dispatch(Interface* impl, fidl_incoming_msg_t* msg,
                                     ::fidl::Transaction* txn) {
  ::fidl::DispatchResult dispatch_result = TryDispatch(impl, msg, txn);
  if (dispatch_result == ::fidl::DispatchResult::kNotFound) {
    FidlHandleInfoCloseMany(msg->handles, msg->num_handles);
    txn->InternalError(
        {::fidl::UnbindInfo::kUnexpectedMessage, ZX_ERR_NOT_SUPPORTED});
  }
  return dispatch_result;
}

::fidl::DispatchResult sub::Interface::dispatch_message(
    fidl_incoming_msg_t* msg, ::fidl::Transaction* txn) {
  return sub::Dispatch(this, msg, txn);
}
#endif

#ifdef __Fuchsia__
::fidl::Result sub::Interface::fooCompleterBase::Reply(int64_t y) {
  ::fidl::OwnedEncodedMessage<fooResponse> _response{y};
  return CompleterBase::SendReply(&_response.GetOutgoingMessage());
}
#endif

#ifdef __Fuchsia__
::fidl::Result sub::Interface::fooCompleterBase::Reply(
    ::fidl::BufferSpan _buffer, int64_t y) {
  fooResponse::UnownedEncodedMessage _response(_buffer.data, _buffer.capacity,
                                               y);
  return CompleterBase::SendReply(&_response.GetOutgoingMessage());
}
#endif

void ::fidl_test_inheritance::sub::fooRequest::_InitHeader(zx_txid_t _txid) {
  fidl_init_txn_header(&_hdr, _txid, ksub_foo_Ordinal);
}

void ::fidl_test_inheritance::sub::fooResponse::_InitHeader() {
  fidl_init_txn_header(&_hdr, 0, ksub_foo_Ordinal);
}

#ifdef __Fuchsia__
#endif

}  // namespace fidl_test_inheritance
