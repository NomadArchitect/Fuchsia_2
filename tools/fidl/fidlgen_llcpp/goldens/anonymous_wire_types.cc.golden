// WARNING: This file is machine generated by fidlgen.

#include <fidl/fidl.test.anonymous/cpp/wire_types.h>
auto ::fidl_test_anonymous::wire::UnionMember::which() const
    -> ::fidl_test_anonymous::wire::UnionMember::Tag {
  ZX_ASSERT(!has_invalid_tag());
  switch (ordinal_) {
    case ::fidl_test_anonymous::wire::UnionMember::Ordinal::kUnionData:
      return static_cast<::fidl_test_anonymous::wire::UnionMember::Tag>(
          ordinal_);
    default:
      return ::fidl_test_anonymous::wire::UnionMember::Tag::kUnknown;
  }
}

void ::fidl_test_anonymous::wire::UnionMember::SizeAndOffsetAssertionHelper() {
  static_assert(sizeof(UnionMember) == sizeof(fidl_xunion_v2_t));
  static_assert(offsetof(UnionMember, ordinal_) ==
                offsetof(fidl_xunion_v2_t, tag));
  static_assert(offsetof(UnionMember, envelope_) ==
                offsetof(fidl_xunion_v2_t, envelope));
}

auto ::fidl_test_anonymous::wire::Expression::which() const
    -> ::fidl_test_anonymous::wire::Expression::Tag {
  ZX_ASSERT(!has_invalid_tag());
  switch (ordinal_) {
    case ::fidl_test_anonymous::wire::Expression::Ordinal::kValue:
    case ::fidl_test_anonymous::wire::Expression::Ordinal::kBinOp:
    case ::fidl_test_anonymous::wire::Expression::Ordinal::kFunctionApplication:
      return static_cast<::fidl_test_anonymous::wire::Expression::Tag>(
          ordinal_);
    default:
      return ::fidl_test_anonymous::wire::Expression::Tag::kUnknown;
  }
}

void ::fidl_test_anonymous::wire::Expression::SizeAndOffsetAssertionHelper() {
  static_assert(sizeof(Expression) == sizeof(fidl_xunion_v2_t));
  static_assert(offsetof(Expression, ordinal_) ==
                offsetof(fidl_xunion_v2_t, tag));
  static_assert(offsetof(Expression, envelope_) ==
                offsetof(fidl_xunion_v2_t, envelope));
}

void ::fidl_test_anonymous::wire::SomeProtocolSomeMethodResult::
    SizeAndOffsetAssertionHelper() {
  static_assert(sizeof(SomeProtocolSomeMethodResult) ==
                sizeof(fidl_xunion_v2_t));
  static_assert(offsetof(SomeProtocolSomeMethodResult, ordinal_) ==
                offsetof(fidl_xunion_v2_t, tag));
  static_assert(offsetof(SomeProtocolSomeMethodResult, envelope_) ==
                offsetof(fidl_xunion_v2_t, envelope));
}
