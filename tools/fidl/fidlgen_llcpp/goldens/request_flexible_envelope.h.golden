// WARNING: This file is machine generated by fidlgen.

#pragma once

#include <lib/fidl/internal.h>
#include <lib/fidl/llcpp/array.h>
#include <lib/fidl/llcpp/coding.h>
#include <lib/fidl/llcpp/envelope.h>
#include <lib/fidl/llcpp/errors.h>
#include <lib/fidl/llcpp/memory.h>
#include <lib/fidl/llcpp/message.h>
#include <lib/fidl/llcpp/message_storage.h>
#include <lib/fidl/llcpp/object_view.h>
#include <lib/fidl/llcpp/string_view.h>
#include <lib/fidl/llcpp/traits.h>
#include <lib/fidl/llcpp/vector_view.h>
#include <lib/fit/function.h>
#include <lib/stdcompat/optional.h>

#include <algorithm>
#include <cstddef>
#include <variant>
#ifdef __Fuchsia__
#include <lib/fidl/llcpp/client.h>
#include <lib/fidl/llcpp/client_end.h>
#include <lib/fidl/llcpp/connect_service.h>
#include <lib/fidl/llcpp/result.h>
#include <lib/fidl/llcpp/server.h>
#include <lib/fidl/llcpp/server_end.h>
#include <lib/fidl/llcpp/service_handler_interface.h>
#include <lib/fidl/llcpp/sync_call.h>
#include <lib/fidl/llcpp/transaction.h>
#include <lib/fidl/llcpp/wire_messaging.h>
#include <lib/fidl/txn_header.h>
#include <lib/zx/channel.h>

#endif  // __Fuchsia__
#include <zircon/fidl.h>

namespace fidl_test_requestflexibleenvelope {
namespace wire {
class StrictFoo;

class FlexibleFoo;
}  // namespace wire
class Protocol;
namespace wire {

extern "C" const fidl_type_t fidl_test_requestflexibleenvelope_StrictFooTable;

class StrictFoo {
 public:
  StrictFoo()
      : ordinal_(::fidl_test_requestflexibleenvelope::wire::StrictFoo::Ordinal::
                     Invalid),
        envelope_{} {}

  StrictFoo(StrictFoo&&) = default;
  StrictFoo& operator=(StrictFoo&&) = default;

  enum class Tag : fidl_xunion_tag_t {
    kS = 1,  // 0x1
    kI = 2,  // 0x2
  };

  bool has_invalid_tag() const {
    return ordinal_ == ::fidl_test_requestflexibleenvelope::wire::StrictFoo::
                           Ordinal::Invalid;
  }

  bool is_s() const {
    return ordinal_ ==
           ::fidl_test_requestflexibleenvelope::wire::StrictFoo::Ordinal::kS;
  }

  static StrictFoo WithS(::fidl::ObjectView<::fidl::StringView> val) {
    StrictFoo result;
    result.set_s(val);
    return result;
  }

  template <typename... Args>
  static StrictFoo WithS(::fidl::AnyAllocator& allocator, Args&&... args) {
    StrictFoo result;
    result.set_s(::fidl::ObjectView<::fidl::StringView>(
        allocator, std::forward<Args>(args)...));
    return result;
  }

  void set_s(::fidl::ObjectView<::fidl::StringView> elem) {
    ordinal_ =
        ::fidl_test_requestflexibleenvelope::wire::StrictFoo::Ordinal::kS;
    envelope_.data =
        ::fidl::ObjectView<void>::FromExternal(static_cast<void*>(elem.get()));
  }

  template <typename... Args>
  void set_s(::fidl::AnyAllocator& allocator, Args&&... args) {
    ordinal_ =
        ::fidl_test_requestflexibleenvelope::wire::StrictFoo::Ordinal::kS;
    set_s(::fidl::ObjectView<::fidl::StringView>(allocator,
                                                 std::forward<Args>(args)...));
  }

  ::fidl::StringView& mutable_s() {
    ZX_ASSERT(
        ordinal_ ==
        ::fidl_test_requestflexibleenvelope::wire::StrictFoo::Ordinal::kS);
    return *static_cast<::fidl::StringView*>(envelope_.data.get());
  }
  const ::fidl::StringView& s() const {
    ZX_ASSERT(
        ordinal_ ==
        ::fidl_test_requestflexibleenvelope::wire::StrictFoo::Ordinal::kS);
    return *static_cast<::fidl::StringView*>(envelope_.data.get());
  }

  bool is_i() const {
    return ordinal_ ==
           ::fidl_test_requestflexibleenvelope::wire::StrictFoo::Ordinal::kI;
  }

  static StrictFoo WithI(::fidl::ObjectView<int32_t> val) {
    StrictFoo result;
    result.set_i(val);
    return result;
  }

  template <typename... Args>
  static StrictFoo WithI(::fidl::AnyAllocator& allocator, Args&&... args) {
    StrictFoo result;
    result.set_i(
        ::fidl::ObjectView<int32_t>(allocator, std::forward<Args>(args)...));
    return result;
  }

  void set_i(::fidl::ObjectView<int32_t> elem) {
    ordinal_ =
        ::fidl_test_requestflexibleenvelope::wire::StrictFoo::Ordinal::kI;
    envelope_.data =
        ::fidl::ObjectView<void>::FromExternal(static_cast<void*>(elem.get()));
  }

  template <typename... Args>
  void set_i(::fidl::AnyAllocator& allocator, Args&&... args) {
    ordinal_ =
        ::fidl_test_requestflexibleenvelope::wire::StrictFoo::Ordinal::kI;
    set_i(::fidl::ObjectView<int32_t>(allocator, std::forward<Args>(args)...));
  }

  int32_t& mutable_i() {
    ZX_ASSERT(
        ordinal_ ==
        ::fidl_test_requestflexibleenvelope::wire::StrictFoo::Ordinal::kI);
    return *static_cast<int32_t*>(envelope_.data.get());
  }
  const int32_t& i() const {
    ZX_ASSERT(
        ordinal_ ==
        ::fidl_test_requestflexibleenvelope::wire::StrictFoo::Ordinal::kI);
    return *static_cast<int32_t*>(envelope_.data.get());
  }
  ::fidl_test_requestflexibleenvelope::wire::StrictFoo::Tag which() const {
    ZX_ASSERT(!has_invalid_tag());
    return static_cast<
        ::fidl_test_requestflexibleenvelope::wire::StrictFoo::Tag>(ordinal_);
  }

  static constexpr const fidl_type_t* Type =
      &fidl_test_requestflexibleenvelope_StrictFooTable;
  static constexpr uint32_t MaxNumHandles = 0;
  static constexpr uint32_t PrimarySize = 24;
  [[maybe_unused]] static constexpr uint32_t MaxOutOfLine = 4294967295;
  static constexpr bool HasPointer = true;

 private:
  enum class Ordinal : fidl_xunion_tag_t {
    Invalid = 0,
    kS = 1,  // 0x1
    kI = 2,  // 0x2
  };

  static void SizeAndOffsetAssertionHelper();
  ::fidl_test_requestflexibleenvelope::wire::StrictFoo::Ordinal ordinal_;
  FIDL_ALIGNDECL
  ::fidl::Envelope<void> envelope_;
};

extern "C" const fidl_type_t fidl_test_requestflexibleenvelope_FlexibleFooTable;

class FlexibleFoo {
 public:
  FlexibleFoo()
      : ordinal_(::fidl_test_requestflexibleenvelope::wire::FlexibleFoo::
                     Ordinal::Invalid),
        envelope_{} {}

  FlexibleFoo(FlexibleFoo&&) = default;
  FlexibleFoo& operator=(FlexibleFoo&&) = default;

  enum class Tag : fidl_xunion_tag_t {
    kS = 1,  // 0x1
    kI = 2,  // 0x2
    kUnknown = ::std::numeric_limits<::fidl_union_tag_t>::max(),
  };

  bool has_invalid_tag() const {
    return ordinal_ == ::fidl_test_requestflexibleenvelope::wire::FlexibleFoo::
                           Ordinal::Invalid;
  }

  bool is_s() const {
    return ordinal_ ==
           ::fidl_test_requestflexibleenvelope::wire::FlexibleFoo::Ordinal::kS;
  }

  static FlexibleFoo WithS(::fidl::ObjectView<::fidl::StringView> val) {
    FlexibleFoo result;
    result.set_s(val);
    return result;
  }

  template <typename... Args>
  static FlexibleFoo WithS(::fidl::AnyAllocator& allocator, Args&&... args) {
    FlexibleFoo result;
    result.set_s(::fidl::ObjectView<::fidl::StringView>(
        allocator, std::forward<Args>(args)...));
    return result;
  }

  void set_s(::fidl::ObjectView<::fidl::StringView> elem) {
    ordinal_ =
        ::fidl_test_requestflexibleenvelope::wire::FlexibleFoo::Ordinal::kS;
    envelope_.data =
        ::fidl::ObjectView<void>::FromExternal(static_cast<void*>(elem.get()));
  }

  template <typename... Args>
  void set_s(::fidl::AnyAllocator& allocator, Args&&... args) {
    ordinal_ =
        ::fidl_test_requestflexibleenvelope::wire::FlexibleFoo::Ordinal::kS;
    set_s(::fidl::ObjectView<::fidl::StringView>(allocator,
                                                 std::forward<Args>(args)...));
  }

  ::fidl::StringView& mutable_s() {
    ZX_ASSERT(
        ordinal_ ==
        ::fidl_test_requestflexibleenvelope::wire::FlexibleFoo::Ordinal::kS);
    return *static_cast<::fidl::StringView*>(envelope_.data.get());
  }
  const ::fidl::StringView& s() const {
    ZX_ASSERT(
        ordinal_ ==
        ::fidl_test_requestflexibleenvelope::wire::FlexibleFoo::Ordinal::kS);
    return *static_cast<::fidl::StringView*>(envelope_.data.get());
  }

  bool is_i() const {
    return ordinal_ ==
           ::fidl_test_requestflexibleenvelope::wire::FlexibleFoo::Ordinal::kI;
  }

  static FlexibleFoo WithI(::fidl::ObjectView<int32_t> val) {
    FlexibleFoo result;
    result.set_i(val);
    return result;
  }

  template <typename... Args>
  static FlexibleFoo WithI(::fidl::AnyAllocator& allocator, Args&&... args) {
    FlexibleFoo result;
    result.set_i(
        ::fidl::ObjectView<int32_t>(allocator, std::forward<Args>(args)...));
    return result;
  }

  void set_i(::fidl::ObjectView<int32_t> elem) {
    ordinal_ =
        ::fidl_test_requestflexibleenvelope::wire::FlexibleFoo::Ordinal::kI;
    envelope_.data =
        ::fidl::ObjectView<void>::FromExternal(static_cast<void*>(elem.get()));
  }

  template <typename... Args>
  void set_i(::fidl::AnyAllocator& allocator, Args&&... args) {
    ordinal_ =
        ::fidl_test_requestflexibleenvelope::wire::FlexibleFoo::Ordinal::kI;
    set_i(::fidl::ObjectView<int32_t>(allocator, std::forward<Args>(args)...));
  }

  int32_t& mutable_i() {
    ZX_ASSERT(
        ordinal_ ==
        ::fidl_test_requestflexibleenvelope::wire::FlexibleFoo::Ordinal::kI);
    return *static_cast<int32_t*>(envelope_.data.get());
  }
  const int32_t& i() const {
    ZX_ASSERT(
        ordinal_ ==
        ::fidl_test_requestflexibleenvelope::wire::FlexibleFoo::Ordinal::kI);
    return *static_cast<int32_t*>(envelope_.data.get());
  }
  ::fidl_test_requestflexibleenvelope::wire::FlexibleFoo::Tag which() const;

  static constexpr const fidl_type_t* Type =
      &fidl_test_requestflexibleenvelope_FlexibleFooTable;
  static constexpr uint32_t MaxNumHandles = 0;
  static constexpr uint32_t PrimarySize = 24;
  [[maybe_unused]] static constexpr uint32_t MaxOutOfLine = 4294967295;
  static constexpr bool HasPointer = true;

 private:
  enum class Ordinal : fidl_xunion_tag_t {
    Invalid = 0,
    kS = 1,  // 0x1
    kI = 2,  // 0x2
  };

  static void SizeAndOffsetAssertionHelper();
  ::fidl_test_requestflexibleenvelope::wire::FlexibleFoo::Ordinal ordinal_;
  FIDL_ALIGNDECL
  ::fidl::Envelope<void> envelope_;
};

}  // namespace wire
extern "C" const fidl_type_t
    fidl_test_requestflexibleenvelope_ProtocolRequestStrictResponseFlexibleRequestTable;

extern "C" const fidl_type_t
    fidl_test_requestflexibleenvelope_ProtocolRequestStrictResponseFlexibleResponseTable;

extern "C" const fidl_type_t
    fidl_test_requestflexibleenvelope_ProtocolRequestFlexibleResponseStrictRequestTable;

extern "C" const fidl_type_t
    fidl_test_requestflexibleenvelope_ProtocolRequestFlexibleResponseStrictResponseTable;

class Protocol final {
  Protocol() = delete;

 public:
  struct RequestStrictResponseFlexibleResponse final {
    FIDL_ALIGNDECL
    fidl_message_header_t _hdr;
    ::fidl_test_requestflexibleenvelope::wire::FlexibleFoo f;
    explicit RequestStrictResponseFlexibleResponse(
        ::fidl_test_requestflexibleenvelope::wire::FlexibleFoo& f)
        : f(std::move(f)) {
      _InitHeader();
    }
    RequestStrictResponseFlexibleResponse() { _InitHeader(); }

    static constexpr const fidl_type_t* Type =
        &::fidl_test_requestflexibleenvelope::
            fidl_test_requestflexibleenvelope_ProtocolRequestStrictResponseFlexibleResponseTable;
    static constexpr uint32_t MaxNumHandles = 0;
    static constexpr uint32_t PrimarySize = 40;
    static constexpr uint32_t MaxOutOfLine = 4294967295;
    static constexpr bool HasFlexibleEnvelope = true;
    static constexpr bool HasPointer = true;
    static constexpr ::fidl::internal::TransactionalMessageKind MessageKind =
        ::fidl::internal::TransactionalMessageKind::kResponse;

    class UnownedEncodedMessage final {
     public:
      UnownedEncodedMessage(
          uint8_t* _bytes, uint32_t _byte_size,
          ::fidl_test_requestflexibleenvelope::wire::FlexibleFoo& f)
          : message_(_bytes, _byte_size,
                     sizeof(RequestStrictResponseFlexibleResponse), nullptr, 0,
                     0) {
        FIDL_ALIGNDECL RequestStrictResponseFlexibleResponse _response{f};
        message_.Encode<::fidl_test_requestflexibleenvelope::Protocol::
                            RequestStrictResponseFlexibleResponse>(&_response);
      }
      UnownedEncodedMessage(uint8_t* bytes, uint32_t byte_size,
                            RequestStrictResponseFlexibleResponse* response)
          : message_(bytes, byte_size,
                     sizeof(RequestStrictResponseFlexibleResponse), nullptr, 0,
                     0) {
        message_.Encode<::fidl_test_requestflexibleenvelope::Protocol::
                            RequestStrictResponseFlexibleResponse>(response);
      }
      UnownedEncodedMessage(const UnownedEncodedMessage&) = delete;
      UnownedEncodedMessage(UnownedEncodedMessage&&) = delete;
      UnownedEncodedMessage* operator=(const UnownedEncodedMessage&) = delete;
      UnownedEncodedMessage* operator=(UnownedEncodedMessage&&) = delete;

      zx_status_t status() const { return message_.status(); }
#ifdef __Fuchsia__
      const char* status_string() const { return message_.status_string(); }
#endif
      bool ok() const { return message_.status() == ZX_OK; }
      const char* error() const { return message_.error(); }

      ::fidl::OutgoingMessage& GetOutgoingMessage() { return message_; }

#ifdef __Fuchsia__
      template <typename ChannelLike>
      void Write(ChannelLike&& client) {
        message_.Write(std::forward<ChannelLike>(client));
      }
#endif

     private:
      ::fidl::OutgoingMessage message_;
    };

    class OwnedEncodedMessage final {
     public:
      explicit OwnedEncodedMessage(
          ::fidl_test_requestflexibleenvelope::wire::FlexibleFoo& f)
          : message_(bytes_.data(), bytes_.size(), f) {}
      explicit OwnedEncodedMessage(
          ::fidl_test_requestflexibleenvelope::Protocol::
              RequestStrictResponseFlexibleResponse* response)
          : message_(bytes_.data(), bytes_.size(), response) {}
      OwnedEncodedMessage(const OwnedEncodedMessage&) = delete;
      OwnedEncodedMessage(OwnedEncodedMessage&&) = delete;
      OwnedEncodedMessage* operator=(const OwnedEncodedMessage&) = delete;
      OwnedEncodedMessage* operator=(OwnedEncodedMessage&&) = delete;

      zx_status_t status() const { return message_.status(); }
#ifdef __Fuchsia__
      const char* status_string() const { return message_.status_string(); }
#endif
      bool ok() const { return message_.ok(); }
      const char* error() const { return message_.error(); }

      ::fidl::OutgoingMessage& GetOutgoingMessage() {
        return message_.GetOutgoingMessage();
      }

#ifdef __Fuchsia__
      template <typename ChannelLike>
      void Write(ChannelLike&& client) {
        message_.Write(std::forward<ChannelLike>(client));
      }
#endif

     private:
      ::fidl::internal::BoxedMessageBuffer<ZX_CHANNEL_MAX_MSG_BYTES> bytes_;
      UnownedEncodedMessage message_;
    };

   public:
    class DecodedMessage final : public ::fidl::internal::IncomingMessage {
     public:
      DecodedMessage(uint8_t* bytes, uint32_t byte_actual,
                     zx_handle_info_t* handles = nullptr,
                     uint32_t handle_actual = 0)
          : ::fidl::internal::IncomingMessage(bytes, byte_actual, handles,
                                              handle_actual) {
        Decode<::fidl_test_requestflexibleenvelope::Protocol::
                   RequestStrictResponseFlexibleResponse>();
      }
      DecodedMessage(fidl_incoming_msg_t* msg)
          : ::fidl::internal::IncomingMessage(msg) {
        Decode<::fidl_test_requestflexibleenvelope::Protocol::
                   RequestStrictResponseFlexibleResponse>();
      }
      DecodedMessage(const DecodedMessage&) = delete;
      DecodedMessage(DecodedMessage&&) = delete;
      DecodedMessage* operator=(const DecodedMessage&) = delete;
      DecodedMessage* operator=(DecodedMessage&&) = delete;

      RequestStrictResponseFlexibleResponse* PrimaryObject() {
        ZX_DEBUG_ASSERT(ok());
        return reinterpret_cast<::fidl_test_requestflexibleenvelope::Protocol::
                                    RequestStrictResponseFlexibleResponse*>(
            bytes());
      }

      // Release the ownership of the decoded message. That means that the
      // handles won't be closed When the object is destroyed. After calling
      // this method, the DecodedMessage object should not be used anymore.
      void ReleasePrimaryObject() { ResetBytes(); }
    };

   private:
    void _InitHeader();
  };
  struct RequestStrictResponseFlexibleRequest final {
    FIDL_ALIGNDECL
    fidl_message_header_t _hdr;
    ::fidl_test_requestflexibleenvelope::wire::StrictFoo s;
    explicit RequestStrictResponseFlexibleRequest(
        zx_txid_t _txid,
        ::fidl_test_requestflexibleenvelope::wire::StrictFoo& s)
        : s(std::move(s)) {
      _InitHeader(_txid);
    }
    explicit RequestStrictResponseFlexibleRequest(zx_txid_t _txid) {
      _InitHeader(_txid);
    }

    static constexpr const fidl_type_t* Type =
        &::fidl_test_requestflexibleenvelope::
            fidl_test_requestflexibleenvelope_ProtocolRequestStrictResponseFlexibleRequestTable;
    static constexpr uint32_t MaxNumHandles = 0;
    static constexpr uint32_t PrimarySize = 40;
    static constexpr uint32_t MaxOutOfLine = 4294967295;
    static constexpr uint32_t AltPrimarySize = 40;
    static constexpr uint32_t AltMaxOutOfLine = 4294967295;
    static constexpr bool HasFlexibleEnvelope = false;
    static constexpr bool HasPointer = true;
    static constexpr ::fidl::internal::TransactionalMessageKind MessageKind =
        ::fidl::internal::TransactionalMessageKind::kRequest;
    using ResponseType = ::fidl_test_requestflexibleenvelope::Protocol::
        RequestStrictResponseFlexibleResponse;

    class UnownedEncodedMessage final {
     public:
      UnownedEncodedMessage(
          uint8_t* _bytes, uint32_t _byte_size, zx_txid_t _txid,
          ::fidl_test_requestflexibleenvelope::wire::StrictFoo& s)
          : message_(_bytes, _byte_size,
                     sizeof(RequestStrictResponseFlexibleRequest), nullptr, 0,
                     0) {
        FIDL_ALIGNDECL RequestStrictResponseFlexibleRequest _request(_txid, s);
        message_.Encode<RequestStrictResponseFlexibleRequest>(&_request);
      }
      UnownedEncodedMessage(uint8_t* bytes, uint32_t byte_size,
                            RequestStrictResponseFlexibleRequest* request)
          : message_(bytes, byte_size,
                     sizeof(RequestStrictResponseFlexibleRequest), nullptr, 0,
                     0) {
        message_.Encode<RequestStrictResponseFlexibleRequest>(request);
      }
      UnownedEncodedMessage(const UnownedEncodedMessage&) = delete;
      UnownedEncodedMessage(UnownedEncodedMessage&&) = delete;
      UnownedEncodedMessage* operator=(const UnownedEncodedMessage&) = delete;
      UnownedEncodedMessage* operator=(UnownedEncodedMessage&&) = delete;

      zx_status_t status() const { return message_.status(); }
#ifdef __Fuchsia__
      const char* status_string() const { return message_.status_string(); }
#endif
      bool ok() const { return message_.status() == ZX_OK; }
      const char* error() const { return message_.error(); }

      ::fidl::OutgoingMessage& GetOutgoingMessage() { return message_; }

#ifdef __Fuchsia__
      template <typename ChannelLike>
      void Write(ChannelLike&& client) {
        message_.Write(std::forward<ChannelLike>(client));
      }
#endif

     private:
      ::fidl::OutgoingMessage message_;
    };

    class OwnedEncodedMessage final {
     public:
      explicit OwnedEncodedMessage(
          zx_txid_t _txid,
          ::fidl_test_requestflexibleenvelope::wire::StrictFoo& s)
          : message_(bytes_.data(), bytes_.size(), _txid, s) {}
      explicit OwnedEncodedMessage(
          RequestStrictResponseFlexibleRequest* request)
          : message_(bytes_.data(), bytes_.size(), request) {}
      OwnedEncodedMessage(const OwnedEncodedMessage&) = delete;
      OwnedEncodedMessage(OwnedEncodedMessage&&) = delete;
      OwnedEncodedMessage* operator=(const OwnedEncodedMessage&) = delete;
      OwnedEncodedMessage* operator=(OwnedEncodedMessage&&) = delete;

      zx_status_t status() const { return message_.status(); }
#ifdef __Fuchsia__
      const char* status_string() const { return message_.status_string(); }
#endif
      bool ok() const { return message_.ok(); }
      const char* error() const { return message_.error(); }

      ::fidl::OutgoingMessage& GetOutgoingMessage() {
        return message_.GetOutgoingMessage();
      }

#ifdef __Fuchsia__
      template <typename ChannelLike>
      void Write(ChannelLike&& client) {
        message_.Write(std::forward<ChannelLike>(client));
      }
#endif

     private:
      ::fidl::internal::BoxedMessageBuffer<ZX_CHANNEL_MAX_MSG_BYTES> bytes_;
      UnownedEncodedMessage message_;
    };

   public:
    class DecodedMessage final : public ::fidl::internal::IncomingMessage {
     public:
      DecodedMessage(uint8_t* bytes, uint32_t byte_actual,
                     zx_handle_info_t* handles = nullptr,
                     uint32_t handle_actual = 0)
          : ::fidl::internal::IncomingMessage(bytes, byte_actual, handles,
                                              handle_actual) {
        Decode<RequestStrictResponseFlexibleRequest>();
      }
      DecodedMessage(fidl_incoming_msg_t* msg)
          : ::fidl::internal::IncomingMessage(msg) {
        Decode<RequestStrictResponseFlexibleRequest>();
      }
      DecodedMessage(const DecodedMessage&) = delete;
      DecodedMessage(DecodedMessage&&) = delete;
      DecodedMessage* operator=(const DecodedMessage&) = delete;
      DecodedMessage* operator=(DecodedMessage&&) = delete;

      RequestStrictResponseFlexibleRequest* PrimaryObject() {
        ZX_DEBUG_ASSERT(ok());
        return reinterpret_cast<RequestStrictResponseFlexibleRequest*>(bytes());
      }

      // Release the ownership of the decoded message. That means that the
      // handles won't be closed When the object is destroyed. After calling
      // this method, the DecodedMessage object should not be used anymore.
      void ReleasePrimaryObject() { ResetBytes(); }
    };

   private:
    void _InitHeader(zx_txid_t _txid);
  };

  struct RequestFlexibleResponseStrictResponse final {
    FIDL_ALIGNDECL
    fidl_message_header_t _hdr;
    ::fidl_test_requestflexibleenvelope::wire::StrictFoo f;
    explicit RequestFlexibleResponseStrictResponse(
        ::fidl_test_requestflexibleenvelope::wire::StrictFoo& f)
        : f(std::move(f)) {
      _InitHeader();
    }
    RequestFlexibleResponseStrictResponse() { _InitHeader(); }

    static constexpr const fidl_type_t* Type =
        &::fidl_test_requestflexibleenvelope::
            fidl_test_requestflexibleenvelope_ProtocolRequestFlexibleResponseStrictResponseTable;
    static constexpr uint32_t MaxNumHandles = 0;
    static constexpr uint32_t PrimarySize = 40;
    static constexpr uint32_t MaxOutOfLine = 4294967295;
    static constexpr bool HasFlexibleEnvelope = false;
    static constexpr bool HasPointer = true;
    static constexpr ::fidl::internal::TransactionalMessageKind MessageKind =
        ::fidl::internal::TransactionalMessageKind::kResponse;

    class UnownedEncodedMessage final {
     public:
      UnownedEncodedMessage(
          uint8_t* _bytes, uint32_t _byte_size,
          ::fidl_test_requestflexibleenvelope::wire::StrictFoo& f)
          : message_(_bytes, _byte_size,
                     sizeof(RequestFlexibleResponseStrictResponse), nullptr, 0,
                     0) {
        FIDL_ALIGNDECL RequestFlexibleResponseStrictResponse _response{f};
        message_.Encode<::fidl_test_requestflexibleenvelope::Protocol::
                            RequestFlexibleResponseStrictResponse>(&_response);
      }
      UnownedEncodedMessage(uint8_t* bytes, uint32_t byte_size,
                            RequestFlexibleResponseStrictResponse* response)
          : message_(bytes, byte_size,
                     sizeof(RequestFlexibleResponseStrictResponse), nullptr, 0,
                     0) {
        message_.Encode<::fidl_test_requestflexibleenvelope::Protocol::
                            RequestFlexibleResponseStrictResponse>(response);
      }
      UnownedEncodedMessage(const UnownedEncodedMessage&) = delete;
      UnownedEncodedMessage(UnownedEncodedMessage&&) = delete;
      UnownedEncodedMessage* operator=(const UnownedEncodedMessage&) = delete;
      UnownedEncodedMessage* operator=(UnownedEncodedMessage&&) = delete;

      zx_status_t status() const { return message_.status(); }
#ifdef __Fuchsia__
      const char* status_string() const { return message_.status_string(); }
#endif
      bool ok() const { return message_.status() == ZX_OK; }
      const char* error() const { return message_.error(); }

      ::fidl::OutgoingMessage& GetOutgoingMessage() { return message_; }

#ifdef __Fuchsia__
      template <typename ChannelLike>
      void Write(ChannelLike&& client) {
        message_.Write(std::forward<ChannelLike>(client));
      }
#endif

     private:
      ::fidl::OutgoingMessage message_;
    };

    class OwnedEncodedMessage final {
     public:
      explicit OwnedEncodedMessage(
          ::fidl_test_requestflexibleenvelope::wire::StrictFoo& f)
          : message_(bytes_.data(), bytes_.size(), f) {}
      explicit OwnedEncodedMessage(
          ::fidl_test_requestflexibleenvelope::Protocol::
              RequestFlexibleResponseStrictResponse* response)
          : message_(bytes_.data(), bytes_.size(), response) {}
      OwnedEncodedMessage(const OwnedEncodedMessage&) = delete;
      OwnedEncodedMessage(OwnedEncodedMessage&&) = delete;
      OwnedEncodedMessage* operator=(const OwnedEncodedMessage&) = delete;
      OwnedEncodedMessage* operator=(OwnedEncodedMessage&&) = delete;

      zx_status_t status() const { return message_.status(); }
#ifdef __Fuchsia__
      const char* status_string() const { return message_.status_string(); }
#endif
      bool ok() const { return message_.ok(); }
      const char* error() const { return message_.error(); }

      ::fidl::OutgoingMessage& GetOutgoingMessage() {
        return message_.GetOutgoingMessage();
      }

#ifdef __Fuchsia__
      template <typename ChannelLike>
      void Write(ChannelLike&& client) {
        message_.Write(std::forward<ChannelLike>(client));
      }
#endif

     private:
      ::fidl::internal::BoxedMessageBuffer<ZX_CHANNEL_MAX_MSG_BYTES> bytes_;
      UnownedEncodedMessage message_;
    };

   public:
    class DecodedMessage final : public ::fidl::internal::IncomingMessage {
     public:
      DecodedMessage(uint8_t* bytes, uint32_t byte_actual,
                     zx_handle_info_t* handles = nullptr,
                     uint32_t handle_actual = 0)
          : ::fidl::internal::IncomingMessage(bytes, byte_actual, handles,
                                              handle_actual) {
        Decode<::fidl_test_requestflexibleenvelope::Protocol::
                   RequestFlexibleResponseStrictResponse>();
      }
      DecodedMessage(fidl_incoming_msg_t* msg)
          : ::fidl::internal::IncomingMessage(msg) {
        Decode<::fidl_test_requestflexibleenvelope::Protocol::
                   RequestFlexibleResponseStrictResponse>();
      }
      DecodedMessage(const DecodedMessage&) = delete;
      DecodedMessage(DecodedMessage&&) = delete;
      DecodedMessage* operator=(const DecodedMessage&) = delete;
      DecodedMessage* operator=(DecodedMessage&&) = delete;

      RequestFlexibleResponseStrictResponse* PrimaryObject() {
        ZX_DEBUG_ASSERT(ok());
        return reinterpret_cast<::fidl_test_requestflexibleenvelope::Protocol::
                                    RequestFlexibleResponseStrictResponse*>(
            bytes());
      }

      // Release the ownership of the decoded message. That means that the
      // handles won't be closed When the object is destroyed. After calling
      // this method, the DecodedMessage object should not be used anymore.
      void ReleasePrimaryObject() { ResetBytes(); }
    };

   private:
    void _InitHeader();
  };
  struct RequestFlexibleResponseStrictRequest final {
    FIDL_ALIGNDECL
    fidl_message_header_t _hdr;
    ::fidl_test_requestflexibleenvelope::wire::FlexibleFoo s;
    explicit RequestFlexibleResponseStrictRequest(
        zx_txid_t _txid,
        ::fidl_test_requestflexibleenvelope::wire::FlexibleFoo& s)
        : s(std::move(s)) {
      _InitHeader(_txid);
    }
    explicit RequestFlexibleResponseStrictRequest(zx_txid_t _txid) {
      _InitHeader(_txid);
    }

    static constexpr const fidl_type_t* Type =
        &::fidl_test_requestflexibleenvelope::
            fidl_test_requestflexibleenvelope_ProtocolRequestFlexibleResponseStrictRequestTable;
    static constexpr uint32_t MaxNumHandles = 0;
    static constexpr uint32_t PrimarySize = 40;
    static constexpr uint32_t MaxOutOfLine = 4294967295;
    static constexpr uint32_t AltPrimarySize = 40;
    static constexpr uint32_t AltMaxOutOfLine = 4294967295;
    static constexpr bool HasFlexibleEnvelope = true;
    static constexpr bool HasPointer = true;
    static constexpr ::fidl::internal::TransactionalMessageKind MessageKind =
        ::fidl::internal::TransactionalMessageKind::kRequest;
    using ResponseType = ::fidl_test_requestflexibleenvelope::Protocol::
        RequestFlexibleResponseStrictResponse;

    class UnownedEncodedMessage final {
     public:
      UnownedEncodedMessage(
          uint8_t* _bytes, uint32_t _byte_size, zx_txid_t _txid,
          ::fidl_test_requestflexibleenvelope::wire::FlexibleFoo& s)
          : message_(_bytes, _byte_size,
                     sizeof(RequestFlexibleResponseStrictRequest), nullptr, 0,
                     0) {
        FIDL_ALIGNDECL RequestFlexibleResponseStrictRequest _request(_txid, s);
        message_.Encode<RequestFlexibleResponseStrictRequest>(&_request);
      }
      UnownedEncodedMessage(uint8_t* bytes, uint32_t byte_size,
                            RequestFlexibleResponseStrictRequest* request)
          : message_(bytes, byte_size,
                     sizeof(RequestFlexibleResponseStrictRequest), nullptr, 0,
                     0) {
        message_.Encode<RequestFlexibleResponseStrictRequest>(request);
      }
      UnownedEncodedMessage(const UnownedEncodedMessage&) = delete;
      UnownedEncodedMessage(UnownedEncodedMessage&&) = delete;
      UnownedEncodedMessage* operator=(const UnownedEncodedMessage&) = delete;
      UnownedEncodedMessage* operator=(UnownedEncodedMessage&&) = delete;

      zx_status_t status() const { return message_.status(); }
#ifdef __Fuchsia__
      const char* status_string() const { return message_.status_string(); }
#endif
      bool ok() const { return message_.status() == ZX_OK; }
      const char* error() const { return message_.error(); }

      ::fidl::OutgoingMessage& GetOutgoingMessage() { return message_; }

#ifdef __Fuchsia__
      template <typename ChannelLike>
      void Write(ChannelLike&& client) {
        message_.Write(std::forward<ChannelLike>(client));
      }
#endif

     private:
      ::fidl::OutgoingMessage message_;
    };

    class OwnedEncodedMessage final {
     public:
      explicit OwnedEncodedMessage(
          zx_txid_t _txid,
          ::fidl_test_requestflexibleenvelope::wire::FlexibleFoo& s)
          : message_(bytes_.data(), bytes_.size(), _txid, s) {}
      explicit OwnedEncodedMessage(
          RequestFlexibleResponseStrictRequest* request)
          : message_(bytes_.data(), bytes_.size(), request) {}
      OwnedEncodedMessage(const OwnedEncodedMessage&) = delete;
      OwnedEncodedMessage(OwnedEncodedMessage&&) = delete;
      OwnedEncodedMessage* operator=(const OwnedEncodedMessage&) = delete;
      OwnedEncodedMessage* operator=(OwnedEncodedMessage&&) = delete;

      zx_status_t status() const { return message_.status(); }
#ifdef __Fuchsia__
      const char* status_string() const { return message_.status_string(); }
#endif
      bool ok() const { return message_.ok(); }
      const char* error() const { return message_.error(); }

      ::fidl::OutgoingMessage& GetOutgoingMessage() {
        return message_.GetOutgoingMessage();
      }

#ifdef __Fuchsia__
      template <typename ChannelLike>
      void Write(ChannelLike&& client) {
        message_.Write(std::forward<ChannelLike>(client));
      }
#endif

     private:
      ::fidl::internal::BoxedMessageBuffer<ZX_CHANNEL_MAX_MSG_BYTES> bytes_;
      UnownedEncodedMessage message_;
    };

   public:
    class DecodedMessage final : public ::fidl::internal::IncomingMessage {
     public:
      DecodedMessage(uint8_t* bytes, uint32_t byte_actual,
                     zx_handle_info_t* handles = nullptr,
                     uint32_t handle_actual = 0)
          : ::fidl::internal::IncomingMessage(bytes, byte_actual, handles,
                                              handle_actual) {
        Decode<RequestFlexibleResponseStrictRequest>();
      }
      DecodedMessage(fidl_incoming_msg_t* msg)
          : ::fidl::internal::IncomingMessage(msg) {
        Decode<RequestFlexibleResponseStrictRequest>();
      }
      DecodedMessage(const DecodedMessage&) = delete;
      DecodedMessage(DecodedMessage&&) = delete;
      DecodedMessage* operator=(const DecodedMessage&) = delete;
      DecodedMessage* operator=(DecodedMessage&&) = delete;

      RequestFlexibleResponseStrictRequest* PrimaryObject() {
        ZX_DEBUG_ASSERT(ok());
        return reinterpret_cast<RequestFlexibleResponseStrictRequest*>(bytes());
      }

      // Release the ownership of the decoded message. That means that the
      // handles won't be closed When the object is destroyed. After calling
      // this method, the DecodedMessage object should not be used anymore.
      void ReleasePrimaryObject() { ResetBytes(); }
    };

   private:
    void _InitHeader(zx_txid_t _txid);
  };

#ifdef __Fuchsia__
  // Collection of return types of FIDL calls in this protocol.
  class ResultOf final {
    ResultOf() = delete;

   public:
    class RequestStrictResponseFlexible final : public ::fidl::Result {
     public:
      explicit RequestStrictResponseFlexible(
          ::fidl::UnownedClientEnd<
              ::fidl_test_requestflexibleenvelope::Protocol>
              _client,
          ::fidl_test_requestflexibleenvelope::wire::StrictFoo& s);
      RequestStrictResponseFlexible(
          ::fidl::UnownedClientEnd<
              ::fidl_test_requestflexibleenvelope::Protocol>
              _client,
          ::fidl_test_requestflexibleenvelope::wire::StrictFoo& s,
          zx_time_t _deadline);
      explicit RequestStrictResponseFlexible(const ::fidl::Result& result)
          : ::fidl::Result(result) {}
      RequestStrictResponseFlexible(RequestStrictResponseFlexible&&) = delete;
      RequestStrictResponseFlexible(const RequestStrictResponseFlexible&) =
          delete;
      RequestStrictResponseFlexible* operator=(
          RequestStrictResponseFlexible&&) = delete;
      RequestStrictResponseFlexible* operator=(
          const RequestStrictResponseFlexible&) = delete;
      ~RequestStrictResponseFlexible() = default;

      ::fidl_test_requestflexibleenvelope::Protocol::
          RequestStrictResponseFlexibleResponse*
          Unwrap() {
        ZX_DEBUG_ASSERT(ok());
        return reinterpret_cast<::fidl_test_requestflexibleenvelope::Protocol::
                                    RequestStrictResponseFlexibleResponse*>(
            bytes_.data());
      }
      const ::fidl_test_requestflexibleenvelope::Protocol::
          RequestStrictResponseFlexibleResponse*
          Unwrap() const {
        ZX_DEBUG_ASSERT(ok());
        return reinterpret_cast<
            const ::fidl_test_requestflexibleenvelope::Protocol::
                RequestStrictResponseFlexibleResponse*>(bytes_.data());
      }

      ::fidl_test_requestflexibleenvelope::Protocol::
          RequestStrictResponseFlexibleResponse&
          value() {
        return *Unwrap();
      }
      const ::fidl_test_requestflexibleenvelope::Protocol::
          RequestStrictResponseFlexibleResponse&
          value() const {
        return *Unwrap();
      }

      ::fidl_test_requestflexibleenvelope::Protocol::
          RequestStrictResponseFlexibleResponse*
          operator->() {
        return &value();
      }
      const RequestStrictResponseFlexibleResponse* operator->() const {
        return &value();
      }

      RequestStrictResponseFlexibleResponse& operator*() { return value(); }
      const RequestStrictResponseFlexibleResponse& operator*() const {
        return value();
      }

     private:
      ::fidl::internal::BoxedMessageBuffer<ZX_CHANNEL_MAX_MSG_BYTES> bytes_;
    };
    class RequestFlexibleResponseStrict final : public ::fidl::Result {
     public:
      explicit RequestFlexibleResponseStrict(
          ::fidl::UnownedClientEnd<
              ::fidl_test_requestflexibleenvelope::Protocol>
              _client,
          ::fidl_test_requestflexibleenvelope::wire::FlexibleFoo& s);
      RequestFlexibleResponseStrict(
          ::fidl::UnownedClientEnd<
              ::fidl_test_requestflexibleenvelope::Protocol>
              _client,
          ::fidl_test_requestflexibleenvelope::wire::FlexibleFoo& s,
          zx_time_t _deadline);
      explicit RequestFlexibleResponseStrict(const ::fidl::Result& result)
          : ::fidl::Result(result) {}
      RequestFlexibleResponseStrict(RequestFlexibleResponseStrict&&) = delete;
      RequestFlexibleResponseStrict(const RequestFlexibleResponseStrict&) =
          delete;
      RequestFlexibleResponseStrict* operator=(
          RequestFlexibleResponseStrict&&) = delete;
      RequestFlexibleResponseStrict* operator=(
          const RequestFlexibleResponseStrict&) = delete;
      ~RequestFlexibleResponseStrict() = default;

      ::fidl_test_requestflexibleenvelope::Protocol::
          RequestFlexibleResponseStrictResponse*
          Unwrap() {
        ZX_DEBUG_ASSERT(ok());
        return reinterpret_cast<::fidl_test_requestflexibleenvelope::Protocol::
                                    RequestFlexibleResponseStrictResponse*>(
            bytes_.data());
      }
      const ::fidl_test_requestflexibleenvelope::Protocol::
          RequestFlexibleResponseStrictResponse*
          Unwrap() const {
        ZX_DEBUG_ASSERT(ok());
        return reinterpret_cast<
            const ::fidl_test_requestflexibleenvelope::Protocol::
                RequestFlexibleResponseStrictResponse*>(bytes_.data());
      }

      ::fidl_test_requestflexibleenvelope::Protocol::
          RequestFlexibleResponseStrictResponse&
          value() {
        return *Unwrap();
      }
      const ::fidl_test_requestflexibleenvelope::Protocol::
          RequestFlexibleResponseStrictResponse&
          value() const {
        return *Unwrap();
      }

      ::fidl_test_requestflexibleenvelope::Protocol::
          RequestFlexibleResponseStrictResponse*
          operator->() {
        return &value();
      }
      const RequestFlexibleResponseStrictResponse* operator->() const {
        return &value();
      }

      RequestFlexibleResponseStrictResponse& operator*() { return value(); }
      const RequestFlexibleResponseStrictResponse& operator*() const {
        return value();
      }

     private:
      ::fidl::internal::BoxedMessageBuffer<ZX_CHANNEL_MAX_MSG_BYTES> bytes_;
    };
  };

  // Collection of return types of FIDL calls in this protocol,
  // when the caller-allocate flavor or in-place call is used.
  class UnownedResultOf final {
    UnownedResultOf() = delete;

   public:
    class RequestStrictResponseFlexible final : public ::fidl::Result {
     public:
      explicit RequestStrictResponseFlexible(
          ::fidl::UnownedClientEnd<
              ::fidl_test_requestflexibleenvelope::Protocol>
              _client,
          uint8_t* _request_bytes, uint32_t _request_byte_capacity,
          ::fidl_test_requestflexibleenvelope::wire::StrictFoo& s,
          uint8_t* _response_bytes, uint32_t _response_byte_capacity);
      explicit RequestStrictResponseFlexible(const ::fidl::Result& result)
          : ::fidl::Result(result) {}
      RequestStrictResponseFlexible(RequestStrictResponseFlexible&&) = delete;
      RequestStrictResponseFlexible(const RequestStrictResponseFlexible&) =
          delete;
      RequestStrictResponseFlexible* operator=(
          RequestStrictResponseFlexible&&) = delete;
      RequestStrictResponseFlexible* operator=(
          const RequestStrictResponseFlexible&) = delete;
      ~RequestStrictResponseFlexible() = default;

      RequestStrictResponseFlexibleResponse* Unwrap() {
        ZX_DEBUG_ASSERT(ok());
        return reinterpret_cast<::fidl_test_requestflexibleenvelope::Protocol::
                                    RequestStrictResponseFlexibleResponse*>(
            bytes_);
      }
      const RequestStrictResponseFlexibleResponse* Unwrap() const {
        ZX_DEBUG_ASSERT(ok());
        return reinterpret_cast<
            const ::fidl_test_requestflexibleenvelope::Protocol::
                RequestStrictResponseFlexibleResponse*>(bytes_);
      }

      RequestStrictResponseFlexibleResponse& value() { return *Unwrap(); }
      const RequestStrictResponseFlexibleResponse& value() const {
        return *Unwrap();
      }

      RequestStrictResponseFlexibleResponse* operator->() { return &value(); }
      const RequestStrictResponseFlexibleResponse* operator->() const {
        return &value();
      }

      RequestStrictResponseFlexibleResponse& operator*() { return value(); }
      const RequestStrictResponseFlexibleResponse& operator*() const {
        return value();
      }

     private:
      uint8_t* bytes_;
    };
    class RequestFlexibleResponseStrict final : public ::fidl::Result {
     public:
      explicit RequestFlexibleResponseStrict(
          ::fidl::UnownedClientEnd<
              ::fidl_test_requestflexibleenvelope::Protocol>
              _client,
          uint8_t* _request_bytes, uint32_t _request_byte_capacity,
          ::fidl_test_requestflexibleenvelope::wire::FlexibleFoo& s,
          uint8_t* _response_bytes, uint32_t _response_byte_capacity);
      explicit RequestFlexibleResponseStrict(const ::fidl::Result& result)
          : ::fidl::Result(result) {}
      RequestFlexibleResponseStrict(RequestFlexibleResponseStrict&&) = delete;
      RequestFlexibleResponseStrict(const RequestFlexibleResponseStrict&) =
          delete;
      RequestFlexibleResponseStrict* operator=(
          RequestFlexibleResponseStrict&&) = delete;
      RequestFlexibleResponseStrict* operator=(
          const RequestFlexibleResponseStrict&) = delete;
      ~RequestFlexibleResponseStrict() = default;

      RequestFlexibleResponseStrictResponse* Unwrap() {
        ZX_DEBUG_ASSERT(ok());
        return reinterpret_cast<::fidl_test_requestflexibleenvelope::Protocol::
                                    RequestFlexibleResponseStrictResponse*>(
            bytes_);
      }
      const RequestFlexibleResponseStrictResponse* Unwrap() const {
        ZX_DEBUG_ASSERT(ok());
        return reinterpret_cast<
            const ::fidl_test_requestflexibleenvelope::Protocol::
                RequestFlexibleResponseStrictResponse*>(bytes_);
      }

      RequestFlexibleResponseStrictResponse& value() { return *Unwrap(); }
      const RequestFlexibleResponseStrictResponse& value() const {
        return *Unwrap();
      }

      RequestFlexibleResponseStrictResponse* operator->() { return &value(); }
      const RequestFlexibleResponseStrictResponse* operator->() const {
        return &value();
      }

      RequestFlexibleResponseStrictResponse& operator*() { return value(); }
      const RequestFlexibleResponseStrictResponse& operator*() const {
        return value();
      }

     private:
      uint8_t* bytes_;
    };
  };

  // Methods to make a sync FIDL call directly on an unowned channel or a
  // const reference to a
  // |fidl::ClientEnd<::fidl_test_requestflexibleenvelope::Protocol>|, avoiding
  // setting up a client.
  class Call final {
    Call() = delete;

   public:
    // Request is heap-allocated. Response is heap-allocated.
    static ResultOf::RequestStrictResponseFlexible
    RequestStrictResponseFlexible(
        ::fidl::UnownedClientEnd<::fidl_test_requestflexibleenvelope::Protocol>
            _client_end,
        ::fidl_test_requestflexibleenvelope::wire::StrictFoo s) {
      return ResultOf::RequestStrictResponseFlexible(_client_end, s);
    }

    // Caller provides the backing storage for FIDL message via request and
    // response buffers.
    static UnownedResultOf::RequestStrictResponseFlexible
    RequestStrictResponseFlexible(
        ::fidl::UnownedClientEnd<::fidl_test_requestflexibleenvelope::Protocol>
            _client_end,
        ::fidl::BufferSpan _request_buffer,
        ::fidl_test_requestflexibleenvelope::wire::StrictFoo s,
        ::fidl::BufferSpan _response_buffer) {
      return UnownedResultOf::RequestStrictResponseFlexible(
          _client_end, _request_buffer.data, _request_buffer.capacity, s,
          _response_buffer.data, _response_buffer.capacity);
    }

    // Request is heap-allocated. Response is heap-allocated.
    static ResultOf::RequestFlexibleResponseStrict
    RequestFlexibleResponseStrict(
        ::fidl::UnownedClientEnd<::fidl_test_requestflexibleenvelope::Protocol>
            _client_end,
        ::fidl_test_requestflexibleenvelope::wire::FlexibleFoo s) {
      return ResultOf::RequestFlexibleResponseStrict(_client_end, s);
    }

    // Caller provides the backing storage for FIDL message via request and
    // response buffers.
    static UnownedResultOf::RequestFlexibleResponseStrict
    RequestFlexibleResponseStrict(
        ::fidl::UnownedClientEnd<::fidl_test_requestflexibleenvelope::Protocol>
            _client_end,
        ::fidl::BufferSpan _request_buffer,
        ::fidl_test_requestflexibleenvelope::wire::FlexibleFoo s,
        ::fidl::BufferSpan _response_buffer) {
      return UnownedResultOf::RequestFlexibleResponseStrict(
          _client_end, _request_buffer.data, _request_buffer.capacity, s,
          _response_buffer.data, _response_buffer.capacity);
    }
  };

  using SyncClient =
      fidl::WireSyncClient<::fidl_test_requestflexibleenvelope::Protocol>;

#ifdef __Fuchsia__
  using AsyncEventHandler = ::fidl::WireAsyncEventHandler<
      ::fidl_test_requestflexibleenvelope::Protocol>;
  class RequestStrictResponseFlexibleResponseContext;
  class RequestFlexibleResponseStrictResponseContext;
  using ClientImpl = ::fidl::internal::WireClientImpl<
      ::fidl_test_requestflexibleenvelope::Protocol>;
#endif

  using Interface =
      ::fidl::WireInterface<::fidl_test_requestflexibleenvelope::Protocol>;

  // Attempts to dispatch the incoming message to a handler function in the
  // server implementation. If there is no matching handler, it returns false,
  // leaving the message and transaction intact. In all other cases, it consumes
  // the message and returns true. It is possible to chain multiple TryDispatch
  // functions in this manner.
  static ::fidl::DispatchResult TryDispatch(Interface* impl,
                                            fidl_incoming_msg_t* msg,
                                            ::fidl::Transaction* txn);

  // Dispatches the incoming message to one of the handlers functions in the
  // protocol. If there is no matching handler, it closes all the handles in
  // |msg| and closes the channel with a |ZX_ERR_NOT_SUPPORTED| epitaph, before
  // returning false. The message should then be discarded.
  static ::fidl::DispatchResult Dispatch(Interface* impl,
                                         fidl_incoming_msg_t* msg,
                                         ::fidl::Transaction* txn);

  // Same as |Dispatch|, but takes a |void*| instead of |Interface*|.
  // Only used with |fidl::BindServer| to reduce template expansion.
  // Do not call this method manually. Use |Dispatch| instead.
  static ::fidl::DispatchResult TypeErasedDispatch(void* impl,
                                                   fidl_incoming_msg_t* msg,
                                                   ::fidl::Transaction* txn) {
    return Dispatch(static_cast<Interface*>(impl), msg, txn);
  }

#endif

  using EventSender =
      ::fidl::WireEventSender<::fidl_test_requestflexibleenvelope::Protocol>;
  using WeakEventSender = ::fidl::internal::WireWeakEventSender<
      ::fidl_test_requestflexibleenvelope::Protocol>;
};
}  // namespace fidl_test_requestflexibleenvelope

template <>
class ::fidl::internal::WireEventHandlerInterface<
    ::fidl_test_requestflexibleenvelope::Protocol> {
 public:
  WireEventHandlerInterface() = default;
  virtual ~WireEventHandlerInterface() = default;
};

template <>
class ::fidl::WireSyncEventHandler<
    ::fidl_test_requestflexibleenvelope::Protocol>
    : public ::fidl::internal::WireEventHandlerInterface<
          ::fidl_test_requestflexibleenvelope::Protocol> {
 public:
  WireSyncEventHandler() = default;

  // Method called when an unknown event is found. This methods gives the status
  // which, in this case, is returned by HandleOneEvent.
  virtual zx_status_t Unknown() = 0;

  // Handle all possible events defined in this protocol.
  // Blocks to consume exactly one message from the channel, then call the
  // corresponding virtual method.
  ::fidl::Result HandleOneEvent(
      ::fidl::UnownedClientEnd<::fidl_test_requestflexibleenvelope::Protocol>
          client_end);
};

template <>
class ::fidl::WireSyncClient<::fidl_test_requestflexibleenvelope::Protocol>
    final {
 public:
  WireSyncClient() = default;

  explicit WireSyncClient(
      ::fidl::ClientEnd<::fidl_test_requestflexibleenvelope::Protocol>
          client_end)
      : client_end_(std::move(client_end)) {}

  ~WireSyncClient() = default;
  WireSyncClient(WireSyncClient&&) = default;
  WireSyncClient& operator=(WireSyncClient&&) = default;

  const ::fidl::ClientEnd<::fidl_test_requestflexibleenvelope::Protocol>&
  client_end() const {
    return client_end_;
  }
  ::fidl::ClientEnd<::fidl_test_requestflexibleenvelope::Protocol>&
  client_end() {
    return client_end_;
  }

  const ::zx::channel& channel() const { return client_end_.channel(); }
  ::zx::channel* mutable_channel() { return &client_end_.channel(); }

  // Request is heap-allocated. Response is heap-allocated.
  ::fidl_test_requestflexibleenvelope::Protocol::ResultOf::
      RequestStrictResponseFlexible
      RequestStrictResponseFlexible(
          ::fidl_test_requestflexibleenvelope::wire::StrictFoo s) {
    return ::fidl_test_requestflexibleenvelope::Protocol::ResultOf::
        RequestStrictResponseFlexible(this->client_end(), s);
  }

  // Caller provides the backing storage for FIDL message via request and
  // response buffers.
  ::fidl_test_requestflexibleenvelope::Protocol::UnownedResultOf::
      RequestStrictResponseFlexible
      RequestStrictResponseFlexible(
          ::fidl::BufferSpan _request_buffer,
          ::fidl_test_requestflexibleenvelope::wire::StrictFoo s,
          ::fidl::BufferSpan _response_buffer) {
    return ::fidl_test_requestflexibleenvelope::Protocol::UnownedResultOf::
        RequestStrictResponseFlexible(
            this->client_end(), _request_buffer.data, _request_buffer.capacity,
            s, _response_buffer.data, _response_buffer.capacity);
  }

  // Request is heap-allocated. Response is heap-allocated.
  ::fidl_test_requestflexibleenvelope::Protocol::ResultOf::
      RequestFlexibleResponseStrict
      RequestFlexibleResponseStrict(
          ::fidl_test_requestflexibleenvelope::wire::FlexibleFoo s) {
    return ::fidl_test_requestflexibleenvelope::Protocol::ResultOf::
        RequestFlexibleResponseStrict(this->client_end(), s);
  }

  // Caller provides the backing storage for FIDL message via request and
  // response buffers.
  ::fidl_test_requestflexibleenvelope::Protocol::UnownedResultOf::
      RequestFlexibleResponseStrict
      RequestFlexibleResponseStrict(
          ::fidl::BufferSpan _request_buffer,
          ::fidl_test_requestflexibleenvelope::wire::FlexibleFoo s,
          ::fidl::BufferSpan _response_buffer) {
    return ::fidl_test_requestflexibleenvelope::Protocol::UnownedResultOf::
        RequestFlexibleResponseStrict(
            this->client_end(), _request_buffer.data, _request_buffer.capacity,
            s, _response_buffer.data, _response_buffer.capacity);
  }

 private:
  ::fidl::ClientEnd<::fidl_test_requestflexibleenvelope::Protocol> client_end_;
};

// Pure-virtual interface to be implemented by a server.
// This interface uses typed channels (i.e. |fidl::ClientEnd<SomeProtocol>|
// and |fidl::ServerEnd<SomeProtocol>|).
template <>
class ::fidl::WireInterface<::fidl_test_requestflexibleenvelope::Protocol>
    : public ::fidl::internal::IncomingMessageDispatcher {
 public:
  WireInterface() = default;
  virtual ~WireInterface() = default;

  // The marker protocol type within which this |WireInterface| class is
  // defined.
  using _EnclosingProtocol = ::fidl_test_requestflexibleenvelope::Protocol;

  class RequestStrictResponseFlexibleCompleterBase
      : public ::fidl::CompleterBase {
   public:
    // In the following methods, the return value indicates internal errors
    // during the reply, such as encoding or writing to the transport. Note that
    // any error will automatically lead to the destruction of the binding,
    // after which the |on_unbound| callback will be triggered with a detailed
    // reason.
    //
    // See //zircon/system/ulib/fidl/include/lib/fidl/llcpp/server.h.
    //
    // Because the reply status is identical to the unbinding status, it can be
    // safely ignored.
    ::fidl::Result Reply(
        ::fidl_test_requestflexibleenvelope::wire::FlexibleFoo f);
    ::fidl::Result Reply(
        ::fidl::BufferSpan _buffer,
        ::fidl_test_requestflexibleenvelope::wire::FlexibleFoo f);

   protected:
    using ::fidl::CompleterBase::CompleterBase;
  };

  using RequestStrictResponseFlexibleCompleter =
      ::fidl::Completer<RequestStrictResponseFlexibleCompleterBase>;

  virtual void RequestStrictResponseFlexible(
      ::fidl_test_requestflexibleenvelope::wire::StrictFoo s,
      RequestStrictResponseFlexibleCompleter::Sync& _completer) = 0;

  class RequestFlexibleResponseStrictCompleterBase
      : public ::fidl::CompleterBase {
   public:
    // In the following methods, the return value indicates internal errors
    // during the reply, such as encoding or writing to the transport. Note that
    // any error will automatically lead to the destruction of the binding,
    // after which the |on_unbound| callback will be triggered with a detailed
    // reason.
    //
    // See //zircon/system/ulib/fidl/include/lib/fidl/llcpp/server.h.
    //
    // Because the reply status is identical to the unbinding status, it can be
    // safely ignored.
    ::fidl::Result Reply(
        ::fidl_test_requestflexibleenvelope::wire::StrictFoo f);
    ::fidl::Result Reply(
        ::fidl::BufferSpan _buffer,
        ::fidl_test_requestflexibleenvelope::wire::StrictFoo f);

   protected:
    using ::fidl::CompleterBase::CompleterBase;
  };

  using RequestFlexibleResponseStrictCompleter =
      ::fidl::Completer<RequestFlexibleResponseStrictCompleterBase>;

  virtual void RequestFlexibleResponseStrict(
      ::fidl_test_requestflexibleenvelope::wire::FlexibleFoo s,
      RequestFlexibleResponseStrictCompleter::Sync& _completer) = 0;

 private:
  ::fidl::DispatchResult dispatch_message(fidl_incoming_msg_t* msg,
                                          ::fidl::Transaction* txn) final;
};

namespace fidl {

template <>
struct IsFidlType<::fidl_test_requestflexibleenvelope::wire::StrictFoo>
    : public std::true_type {};
template <>
struct IsUnion<::fidl_test_requestflexibleenvelope::wire::StrictFoo>
    : public std::true_type {};
static_assert(std::is_standard_layout_v<
              ::fidl_test_requestflexibleenvelope::wire::StrictFoo>);

template <>
struct IsFidlType<::fidl_test_requestflexibleenvelope::wire::FlexibleFoo>
    : public std::true_type {};
template <>
struct IsUnion<::fidl_test_requestflexibleenvelope::wire::FlexibleFoo>
    : public std::true_type {};
static_assert(std::is_standard_layout_v<
              ::fidl_test_requestflexibleenvelope::wire::FlexibleFoo>);

template <>
struct IsFidlType<::fidl_test_requestflexibleenvelope::Protocol::
                      RequestStrictResponseFlexibleRequest>
    : public std::true_type {};
template <>
struct IsFidlMessage<::fidl_test_requestflexibleenvelope::Protocol::
                         RequestStrictResponseFlexibleRequest>
    : public std::true_type {};
static_assert(sizeof(::fidl_test_requestflexibleenvelope::Protocol::
                         RequestStrictResponseFlexibleRequest) ==
              ::fidl_test_requestflexibleenvelope::Protocol::
                  RequestStrictResponseFlexibleRequest::PrimarySize);
static_assert(offsetof(::fidl_test_requestflexibleenvelope::Protocol::
                           RequestStrictResponseFlexibleRequest,
                       s) == 16);

template <>
struct IsFidlType<::fidl_test_requestflexibleenvelope::Protocol::
                      RequestStrictResponseFlexibleResponse>
    : public std::true_type {};
template <>
struct IsFidlMessage<::fidl_test_requestflexibleenvelope::Protocol::
                         RequestStrictResponseFlexibleResponse>
    : public std::true_type {};
static_assert(sizeof(::fidl_test_requestflexibleenvelope::Protocol::
                         RequestStrictResponseFlexibleResponse) ==
              ::fidl_test_requestflexibleenvelope::Protocol::
                  RequestStrictResponseFlexibleResponse::PrimarySize);
static_assert(offsetof(::fidl_test_requestflexibleenvelope::Protocol::
                           RequestStrictResponseFlexibleResponse,
                       f) == 16);

template <>
struct IsFidlType<::fidl_test_requestflexibleenvelope::Protocol::
                      RequestFlexibleResponseStrictRequest>
    : public std::true_type {};
template <>
struct IsFidlMessage<::fidl_test_requestflexibleenvelope::Protocol::
                         RequestFlexibleResponseStrictRequest>
    : public std::true_type {};
static_assert(sizeof(::fidl_test_requestflexibleenvelope::Protocol::
                         RequestFlexibleResponseStrictRequest) ==
              ::fidl_test_requestflexibleenvelope::Protocol::
                  RequestFlexibleResponseStrictRequest::PrimarySize);
static_assert(offsetof(::fidl_test_requestflexibleenvelope::Protocol::
                           RequestFlexibleResponseStrictRequest,
                       s) == 16);

template <>
struct IsFidlType<::fidl_test_requestflexibleenvelope::Protocol::
                      RequestFlexibleResponseStrictResponse>
    : public std::true_type {};
template <>
struct IsFidlMessage<::fidl_test_requestflexibleenvelope::Protocol::
                         RequestFlexibleResponseStrictResponse>
    : public std::true_type {};
static_assert(sizeof(::fidl_test_requestflexibleenvelope::Protocol::
                         RequestFlexibleResponseStrictResponse) ==
              ::fidl_test_requestflexibleenvelope::Protocol::
                  RequestFlexibleResponseStrictResponse::PrimarySize);
static_assert(offsetof(::fidl_test_requestflexibleenvelope::Protocol::
                           RequestFlexibleResponseStrictResponse,
                       f) == 16);
}  // namespace fidl
namespace fidl_test_requestflexibleenvelope {

#ifdef __Fuchsia__
}  // namespace fidl_test_requestflexibleenvelope
template <>
class ::fidl::WireAsyncEventHandler<
    ::fidl_test_requestflexibleenvelope::Protocol>
    : public ::fidl::internal::WireEventHandlerInterface<
          ::fidl_test_requestflexibleenvelope::Protocol> {
 public:
  WireAsyncEventHandler() = default;

  virtual void Unbound(::fidl::UnbindInfo info) {}
};

namespace fidl_test_requestflexibleenvelope {

class ::fidl_test_requestflexibleenvelope::Protocol::
    RequestStrictResponseFlexibleResponseContext
    : public ::fidl::internal::ResponseContext {
 public:
  RequestStrictResponseFlexibleResponseContext();

  virtual void OnReply(::fidl_test_requestflexibleenvelope::Protocol::
                           RequestStrictResponseFlexibleResponse* message) = 0;

 private:
  void OnReply(uint8_t* reply) override;
};

class ::fidl_test_requestflexibleenvelope::Protocol::
    RequestFlexibleResponseStrictResponseContext
    : public ::fidl::internal::ResponseContext {
 public:
  RequestFlexibleResponseStrictResponseContext();

  virtual void OnReply(::fidl_test_requestflexibleenvelope::Protocol::
                           RequestFlexibleResponseStrictResponse* message) = 0;

 private:
  void OnReply(uint8_t* reply) override;
};
}  // namespace fidl_test_requestflexibleenvelope
template <>
class ::fidl::internal::WireClientImpl<
    ::fidl_test_requestflexibleenvelope::Protocol>
    final : private ::fidl::internal::ClientBase {
 public:
  // Asynchronous variant of |Protocol.RequestStrictResponseFlexible()|.
  // The request and callback are allocated on the heap.
  ::fidl::Result RequestStrictResponseFlexible(
      ::fidl_test_requestflexibleenvelope::wire::StrictFoo s,
      ::fit::callback<void(::fidl_test_requestflexibleenvelope::Protocol::
                               RequestStrictResponseFlexibleResponse* response)>
          _cb);

  // Asynchronous variant of |Protocol.RequestStrictResponseFlexible()|.
  // Caller provides the backing storage for FIDL message via request buffer.
  // Ownership of |_context| is given unsafely to the binding until |OnError|
  // or |OnReply| are called on it.
  ::fidl::Result RequestStrictResponseFlexible(
      ::fidl::BufferSpan _request_buffer,
      ::fidl_test_requestflexibleenvelope::wire::StrictFoo s,
      ::fidl_test_requestflexibleenvelope::Protocol::
          RequestStrictResponseFlexibleResponseContext* _context);

  // Synchronous variant of |Protocol.RequestStrictResponseFlexible()|.
  // Request is heap-allocated. Response is heap-allocated.
  ::fidl_test_requestflexibleenvelope::Protocol::ResultOf::
      RequestStrictResponseFlexible
      RequestStrictResponseFlexible_Sync(
          ::fidl_test_requestflexibleenvelope::wire::StrictFoo s);

  // Synchronous variant of |Protocol.RequestStrictResponseFlexible()|.
  // Caller provides the backing storage for FIDL message via request and
  // response buffers.
  ::fidl_test_requestflexibleenvelope::Protocol::UnownedResultOf::
      RequestStrictResponseFlexible
      RequestStrictResponseFlexible_Sync(
          ::fidl::BufferSpan _request_buffer,
          ::fidl_test_requestflexibleenvelope::wire::StrictFoo s,
          ::fidl::BufferSpan _response_buffer);

  // Asynchronous variant of |Protocol.RequestFlexibleResponseStrict()|.
  // The request and callback are allocated on the heap.
  ::fidl::Result RequestFlexibleResponseStrict(
      ::fidl_test_requestflexibleenvelope::wire::FlexibleFoo s,
      ::fit::callback<void(::fidl_test_requestflexibleenvelope::Protocol::
                               RequestFlexibleResponseStrictResponse* response)>
          _cb);

  // Asynchronous variant of |Protocol.RequestFlexibleResponseStrict()|.
  // Caller provides the backing storage for FIDL message via request buffer.
  // Ownership of |_context| is given unsafely to the binding until |OnError|
  // or |OnReply| are called on it.
  ::fidl::Result RequestFlexibleResponseStrict(
      ::fidl::BufferSpan _request_buffer,
      ::fidl_test_requestflexibleenvelope::wire::FlexibleFoo s,
      ::fidl_test_requestflexibleenvelope::Protocol::
          RequestFlexibleResponseStrictResponseContext* _context);

  // Synchronous variant of |Protocol.RequestFlexibleResponseStrict()|.
  // Request is heap-allocated. Response is heap-allocated.
  ::fidl_test_requestflexibleenvelope::Protocol::ResultOf::
      RequestFlexibleResponseStrict
      RequestFlexibleResponseStrict_Sync(
          ::fidl_test_requestflexibleenvelope::wire::FlexibleFoo s);

  // Synchronous variant of |Protocol.RequestFlexibleResponseStrict()|.
  // Caller provides the backing storage for FIDL message via request and
  // response buffers.
  ::fidl_test_requestflexibleenvelope::Protocol::UnownedResultOf::
      RequestFlexibleResponseStrict
      RequestFlexibleResponseStrict_Sync(
          ::fidl::BufferSpan _request_buffer,
          ::fidl_test_requestflexibleenvelope::wire::FlexibleFoo s,
          ::fidl::BufferSpan _response_buffer);

  ::fidl::WireAsyncEventHandler<::fidl_test_requestflexibleenvelope::Protocol>*
  event_handler() const {
    return event_handler_.get();
  }

 private:
  friend class ::fidl::Client<::fidl_test_requestflexibleenvelope::Protocol>;
  friend class ::fidl::internal::ControlBlock<
      ::fidl_test_requestflexibleenvelope::Protocol>;

  explicit WireClientImpl(std::shared_ptr<::fidl::WireAsyncEventHandler<
                              ::fidl_test_requestflexibleenvelope::Protocol>>
                              event_handler)
      : event_handler_(std::move(event_handler)) {}

  std::optional<::fidl::UnbindInfo> DispatchEvent(
      fidl_incoming_msg_t* msg) override;

  std::shared_ptr<::fidl::WireAsyncEventHandler<
      ::fidl_test_requestflexibleenvelope::Protocol>>
      event_handler_;
};
namespace fidl_test_requestflexibleenvelope {
#endif

}  // namespace fidl_test_requestflexibleenvelope
#ifdef __Fuchsia__
// |EventSender| owns a server endpoint of a channel speaking
// the Protocol protocol, and can send events in that protocol.
template <>
class ::fidl::WireEventSender<::fidl_test_requestflexibleenvelope::Protocol> {
 public:
  // Constructs an event sender with an invalid channel.
  WireEventSender() = default;

  explicit WireEventSender(
      ::fidl::ServerEnd<::fidl_test_requestflexibleenvelope::Protocol>
          server_end)
      : server_end_(std::move(server_end)) {}

  // The underlying server channel endpoint, which may be replaced at run-time.
  const ::fidl::ServerEnd<::fidl_test_requestflexibleenvelope::Protocol>&
  server_end() const {
    return server_end_;
  }
  ::fidl::ServerEnd<::fidl_test_requestflexibleenvelope::Protocol>&
  server_end() {
    return server_end_;
  }

  const ::zx::channel& channel() const { return server_end_.channel(); }
  ::zx::channel& channel() { return server_end_.channel(); }

  // Whether the underlying channel is valid.
  bool is_valid() const { return server_end_.is_valid(); }

 private:
  ::fidl::ServerEnd<::fidl_test_requestflexibleenvelope::Protocol> server_end_;
};

template <>
class ::fidl::internal::WireWeakEventSender<
    ::fidl_test_requestflexibleenvelope::Protocol> {
 public:
 private:
  friend class ::fidl::ServerBindingRef<
      ::fidl_test_requestflexibleenvelope::Protocol>;

  explicit WireWeakEventSender(
      std::weak_ptr<::fidl::internal::AsyncServerBinding<
          ::fidl_test_requestflexibleenvelope::Protocol>>
          binding)
      : binding_(std::move(binding)) {}

  std::weak_ptr<::fidl::internal::AsyncServerBinding<
      ::fidl_test_requestflexibleenvelope::Protocol>>
      binding_;
};
#endif
