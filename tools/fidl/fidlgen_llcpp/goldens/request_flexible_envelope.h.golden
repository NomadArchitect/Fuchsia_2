// WARNING: This file is machine generated by fidlgen.

#pragma once

#include <lib/fidl/internal.h>
#include <lib/fidl/llcpp/array.h>
#include <lib/fidl/llcpp/coding.h>
#include <lib/fidl/llcpp/envelope.h>
#include <lib/fidl/llcpp/message.h>
#include <lib/fidl/llcpp/message_storage.h>
#include <lib/fidl/llcpp/object_view.h>
#include <lib/fidl/llcpp/result.h>
#include <lib/fidl/llcpp/string_view.h>
#include <lib/fidl/llcpp/traits.h>
#include <lib/fidl/llcpp/vector_view.h>
#include <lib/fidl/llcpp/wire_messaging.h>
#include <lib/fit/function.h>
#include <lib/stdcompat/optional.h>

#include <algorithm>
#include <cstddef>
#include <variant>
#ifdef __Fuchsia__
#include <lib/fidl/llcpp/client.h>
#include <lib/fidl/llcpp/client_end.h>
#include <lib/fidl/llcpp/connect_service.h>
#include <lib/fidl/llcpp/server.h>
#include <lib/fidl/llcpp/server_end.h>
#include <lib/fidl/llcpp/service_handler_interface.h>
#include <lib/fidl/llcpp/sync_call.h>
#include <lib/fidl/llcpp/transaction.h>
#include <lib/fidl/txn_header.h>
#include <lib/zx/channel.h>

#endif  // __Fuchsia__
#include <zircon/fidl.h>

namespace fidl_test_requestflexibleenvelope {
namespace wire {
class StrictFoo;

class FlexibleFoo;
}  // namespace wire
class Protocol;
namespace wire {

extern "C" const fidl_type_t fidl_test_requestflexibleenvelope_StrictFooTable;

class StrictFoo {
 public:
  StrictFoo()
      : ordinal_(::fidl_test_requestflexibleenvelope::wire::StrictFoo::Ordinal::
                     Invalid),
        envelope_{} {}

  StrictFoo(const StrictFoo&) = default;
  StrictFoo& operator=(const StrictFoo&) = default;
  StrictFoo(StrictFoo&&) = default;
  StrictFoo& operator=(StrictFoo&&) = default;

  enum class Tag : fidl_xunion_tag_t {
    kS = 1,  // 0x1
    kI = 2,  // 0x2
  };

  bool has_invalid_tag() const {
    return ordinal_ == ::fidl_test_requestflexibleenvelope::wire::StrictFoo::
                           Ordinal::Invalid;
  }

  bool is_s() const {
    return ordinal_ ==
           ::fidl_test_requestflexibleenvelope::wire::StrictFoo::Ordinal::kS;
  }

  static StrictFoo WithS(::fidl::ObjectView<::fidl::StringView> val) {
    StrictFoo result;
    result.set_s(val);
    return result;
  }

  template <typename... Args>
  static StrictFoo WithS(::fidl::AnyArena& allocator, Args&&... args) {
    StrictFoo result;
    result.set_s(::fidl::ObjectView<::fidl::StringView>(
        allocator, std::forward<Args>(args)...));
    return result;
  }

  void set_s(::fidl::ObjectView<::fidl::StringView> elem) {
    ordinal_ =
        ::fidl_test_requestflexibleenvelope::wire::StrictFoo::Ordinal::kS;
    envelope_.data =
        ::fidl::ObjectView<void>::FromExternal(static_cast<void*>(elem.get()));
  }

  template <typename... Args>
  void set_s(::fidl::AnyArena& allocator, Args&&... args) {
    ordinal_ =
        ::fidl_test_requestflexibleenvelope::wire::StrictFoo::Ordinal::kS;
    set_s(::fidl::ObjectView<::fidl::StringView>(allocator,
                                                 std::forward<Args>(args)...));
  }

  ::fidl::StringView& mutable_s() {
    ZX_ASSERT(
        ordinal_ ==
        ::fidl_test_requestflexibleenvelope::wire::StrictFoo::Ordinal::kS);
    return *static_cast<::fidl::StringView*>(envelope_.data.get());
  }
  const ::fidl::StringView& s() const {
    ZX_ASSERT(
        ordinal_ ==
        ::fidl_test_requestflexibleenvelope::wire::StrictFoo::Ordinal::kS);
    return *static_cast<::fidl::StringView*>(envelope_.data.get());
  }

  bool is_i() const {
    return ordinal_ ==
           ::fidl_test_requestflexibleenvelope::wire::StrictFoo::Ordinal::kI;
  }

  static StrictFoo WithI(::fidl::ObjectView<int32_t> val) {
    StrictFoo result;
    result.set_i(val);
    return result;
  }

  template <typename... Args>
  static StrictFoo WithI(::fidl::AnyArena& allocator, Args&&... args) {
    StrictFoo result;
    result.set_i(
        ::fidl::ObjectView<int32_t>(allocator, std::forward<Args>(args)...));
    return result;
  }

  void set_i(::fidl::ObjectView<int32_t> elem) {
    ordinal_ =
        ::fidl_test_requestflexibleenvelope::wire::StrictFoo::Ordinal::kI;
    envelope_.data =
        ::fidl::ObjectView<void>::FromExternal(static_cast<void*>(elem.get()));
  }

  template <typename... Args>
  void set_i(::fidl::AnyArena& allocator, Args&&... args) {
    ordinal_ =
        ::fidl_test_requestflexibleenvelope::wire::StrictFoo::Ordinal::kI;
    set_i(::fidl::ObjectView<int32_t>(allocator, std::forward<Args>(args)...));
  }

  int32_t& mutable_i() {
    ZX_ASSERT(
        ordinal_ ==
        ::fidl_test_requestflexibleenvelope::wire::StrictFoo::Ordinal::kI);
    return *static_cast<int32_t*>(envelope_.data.get());
  }
  const int32_t& i() const {
    ZX_ASSERT(
        ordinal_ ==
        ::fidl_test_requestflexibleenvelope::wire::StrictFoo::Ordinal::kI);
    return *static_cast<int32_t*>(envelope_.data.get());
  }
  ::fidl_test_requestflexibleenvelope::wire::StrictFoo::Tag which() const {
    ZX_ASSERT(!has_invalid_tag());
    return static_cast<
        ::fidl_test_requestflexibleenvelope::wire::StrictFoo::Tag>(ordinal_);
  }

  static constexpr const fidl_type_t* Type =
      &fidl_test_requestflexibleenvelope_StrictFooTable;
  static constexpr uint32_t MaxNumHandles = 0;
  static constexpr uint32_t PrimarySize = 24;
  [[maybe_unused]] static constexpr uint32_t MaxOutOfLine = 4294967295;
  static constexpr bool HasPointer = true;

 private:
  enum class Ordinal : fidl_xunion_tag_t {
    Invalid = 0,
    kS = 1,  // 0x1
    kI = 2,  // 0x2
  };

  static void SizeAndOffsetAssertionHelper();
  ::fidl_test_requestflexibleenvelope::wire::StrictFoo::Ordinal ordinal_;
  FIDL_ALIGNDECL
  ::fidl::Envelope<void> envelope_;
};

extern "C" const fidl_type_t fidl_test_requestflexibleenvelope_FlexibleFooTable;

class FlexibleFoo {
 public:
  FlexibleFoo()
      : ordinal_(::fidl_test_requestflexibleenvelope::wire::FlexibleFoo::
                     Ordinal::Invalid),
        envelope_{} {}

  FlexibleFoo(const FlexibleFoo&) = default;
  FlexibleFoo& operator=(const FlexibleFoo&) = default;
  FlexibleFoo(FlexibleFoo&&) = default;
  FlexibleFoo& operator=(FlexibleFoo&&) = default;

  enum class Tag : fidl_xunion_tag_t {
    kS = 1,  // 0x1
    kI = 2,  // 0x2
    kUnknown = ::std::numeric_limits<::fidl_union_tag_t>::max(),
  };

  bool has_invalid_tag() const {
    return ordinal_ == ::fidl_test_requestflexibleenvelope::wire::FlexibleFoo::
                           Ordinal::Invalid;
  }

  bool is_s() const {
    return ordinal_ ==
           ::fidl_test_requestflexibleenvelope::wire::FlexibleFoo::Ordinal::kS;
  }

  static FlexibleFoo WithS(::fidl::ObjectView<::fidl::StringView> val) {
    FlexibleFoo result;
    result.set_s(val);
    return result;
  }

  template <typename... Args>
  static FlexibleFoo WithS(::fidl::AnyArena& allocator, Args&&... args) {
    FlexibleFoo result;
    result.set_s(::fidl::ObjectView<::fidl::StringView>(
        allocator, std::forward<Args>(args)...));
    return result;
  }

  void set_s(::fidl::ObjectView<::fidl::StringView> elem) {
    ordinal_ =
        ::fidl_test_requestflexibleenvelope::wire::FlexibleFoo::Ordinal::kS;
    envelope_.data =
        ::fidl::ObjectView<void>::FromExternal(static_cast<void*>(elem.get()));
  }

  template <typename... Args>
  void set_s(::fidl::AnyArena& allocator, Args&&... args) {
    ordinal_ =
        ::fidl_test_requestflexibleenvelope::wire::FlexibleFoo::Ordinal::kS;
    set_s(::fidl::ObjectView<::fidl::StringView>(allocator,
                                                 std::forward<Args>(args)...));
  }

  ::fidl::StringView& mutable_s() {
    ZX_ASSERT(
        ordinal_ ==
        ::fidl_test_requestflexibleenvelope::wire::FlexibleFoo::Ordinal::kS);
    return *static_cast<::fidl::StringView*>(envelope_.data.get());
  }
  const ::fidl::StringView& s() const {
    ZX_ASSERT(
        ordinal_ ==
        ::fidl_test_requestflexibleenvelope::wire::FlexibleFoo::Ordinal::kS);
    return *static_cast<::fidl::StringView*>(envelope_.data.get());
  }

  bool is_i() const {
    return ordinal_ ==
           ::fidl_test_requestflexibleenvelope::wire::FlexibleFoo::Ordinal::kI;
  }

  static FlexibleFoo WithI(::fidl::ObjectView<int32_t> val) {
    FlexibleFoo result;
    result.set_i(val);
    return result;
  }

  template <typename... Args>
  static FlexibleFoo WithI(::fidl::AnyArena& allocator, Args&&... args) {
    FlexibleFoo result;
    result.set_i(
        ::fidl::ObjectView<int32_t>(allocator, std::forward<Args>(args)...));
    return result;
  }

  void set_i(::fidl::ObjectView<int32_t> elem) {
    ordinal_ =
        ::fidl_test_requestflexibleenvelope::wire::FlexibleFoo::Ordinal::kI;
    envelope_.data =
        ::fidl::ObjectView<void>::FromExternal(static_cast<void*>(elem.get()));
  }

  template <typename... Args>
  void set_i(::fidl::AnyArena& allocator, Args&&... args) {
    ordinal_ =
        ::fidl_test_requestflexibleenvelope::wire::FlexibleFoo::Ordinal::kI;
    set_i(::fidl::ObjectView<int32_t>(allocator, std::forward<Args>(args)...));
  }

  int32_t& mutable_i() {
    ZX_ASSERT(
        ordinal_ ==
        ::fidl_test_requestflexibleenvelope::wire::FlexibleFoo::Ordinal::kI);
    return *static_cast<int32_t*>(envelope_.data.get());
  }
  const int32_t& i() const {
    ZX_ASSERT(
        ordinal_ ==
        ::fidl_test_requestflexibleenvelope::wire::FlexibleFoo::Ordinal::kI);
    return *static_cast<int32_t*>(envelope_.data.get());
  }
  ::fidl_test_requestflexibleenvelope::wire::FlexibleFoo::Tag which() const;

  static constexpr const fidl_type_t* Type =
      &fidl_test_requestflexibleenvelope_FlexibleFooTable;
  static constexpr uint32_t MaxNumHandles = 0;
  static constexpr uint32_t PrimarySize = 24;
  [[maybe_unused]] static constexpr uint32_t MaxOutOfLine = 4294967295;
  static constexpr bool HasPointer = true;

 private:
  enum class Ordinal : fidl_xunion_tag_t {
    Invalid = 0,
    kS = 1,  // 0x1
    kI = 2,  // 0x2
  };

  static void SizeAndOffsetAssertionHelper();
  ::fidl_test_requestflexibleenvelope::wire::FlexibleFoo::Ordinal ordinal_;
  FIDL_ALIGNDECL
  ::fidl::Envelope<void> envelope_;
};

}  // namespace wire
__LOCAL extern "C" const fidl_type_t
    fidl_test_requestflexibleenvelope_ProtocolRequestStrictResponseFlexibleRequestTable;

__LOCAL extern "C" const fidl_type_t
    fidl_test_requestflexibleenvelope_ProtocolRequestStrictResponseFlexibleResponseTable;

__LOCAL extern "C" const fidl_type_t
    fidl_test_requestflexibleenvelope_ProtocolRequestFlexibleResponseStrictRequestTable;

__LOCAL extern "C" const fidl_type_t
    fidl_test_requestflexibleenvelope_ProtocolRequestFlexibleResponseStrictResponseTable;

class Protocol final {
  Protocol() = delete;

 public:
  class RequestStrictResponseFlexible final {
    RequestStrictResponseFlexible() = delete;
  };
  class RequestFlexibleResponseStrict final {
    RequestFlexibleResponseStrict() = delete;
  };
};
}  // namespace fidl_test_requestflexibleenvelope
#ifdef __Fuchsia__

template <>
struct ::fidl::internal::ProtocolDetails<
    ::fidl_test_requestflexibleenvelope::Protocol> {};
#endif  // __Fuchsia__

#ifdef __Fuchsia__

template <>
struct ::fidl::internal::WireServerDispatcher<
    ::fidl_test_requestflexibleenvelope::Protocol>
    final {
  WireServerDispatcher() = delete;
  static ::fidl::DispatchResult TryDispatch(
      ::fidl::WireServer<::fidl_test_requestflexibleenvelope::Protocol>* impl,
      ::fidl::IncomingMessage& msg, ::fidl::Transaction* txn);
  static ::fidl::DispatchResult Dispatch(
      ::fidl::WireServer<::fidl_test_requestflexibleenvelope::Protocol>* impl,
      ::fidl::IncomingMessage&& msg, ::fidl::Transaction* txn);
};
#endif  // __Fuchsia__

template <>
struct ::fidl::WireRequest<::fidl_test_requestflexibleenvelope::Protocol::
                               RequestStrictResponseFlexible>
    final {
  FIDL_ALIGNDECL
  fidl_message_header_t _hdr;
  ::fidl_test_requestflexibleenvelope::wire::StrictFoo s;
  explicit WireRequest(::fidl_test_requestflexibleenvelope::wire::StrictFoo s)
      : s(s) {
    _InitHeader();
  }
  WireRequest() { _InitHeader(); }

  static constexpr const fidl_type_t* Type =
      &::fidl_test_requestflexibleenvelope::
          fidl_test_requestflexibleenvelope_ProtocolRequestStrictResponseFlexibleRequestTable;
  static constexpr uint32_t MaxNumHandles = 0;
  static constexpr uint32_t PrimarySize = 40;
  static constexpr uint32_t MaxOutOfLine = 4294967295;
  static constexpr uint32_t AltPrimarySize = 40;
  static constexpr uint32_t AltMaxOutOfLine = 4294967295;
  static constexpr bool HasFlexibleEnvelope = false;
  static constexpr bool HasPointer = true;
  static constexpr ::fidl::internal::TransactionalMessageKind MessageKind =
      ::fidl::internal::TransactionalMessageKind::kRequest;
  using ResponseType =
      ::fidl::WireResponse<::fidl_test_requestflexibleenvelope::Protocol::
                               RequestStrictResponseFlexible>;

  class UnownedEncodedMessage final {
   public:
    UnownedEncodedMessage(
        uint8_t* _backing_buffer, uint32_t _backing_buffer_size,
        ::fidl_test_requestflexibleenvelope::wire::StrictFoo s)
        : UnownedEncodedMessage(::fidl::internal::IovecBufferSize,
                                _backing_buffer, _backing_buffer_size, s) {}
    UnownedEncodedMessage(
        uint32_t _iovec_capacity, uint8_t* _backing_buffer,
        uint32_t _backing_buffer_size,
        ::fidl_test_requestflexibleenvelope::wire::StrictFoo s)
        : message_(::fidl::OutgoingMessage::ConstructorArgs{
              .iovecs = iovecs_,
              .iovec_capacity = _iovec_capacity,
              .backing_buffer = _backing_buffer,
              .backing_buffer_capacity = _backing_buffer_size,
          }) {
      ZX_ASSERT(_iovec_capacity <= std::size(iovecs_));
      FIDL_ALIGNDECL WireRequest _request{s};
      message_.Encode<WireRequest>(&_request);
    }
    UnownedEncodedMessage(uint8_t* _backing_buffer,
                          uint32_t _backing_buffer_size, WireRequest* request)
        : UnownedEncodedMessage(::fidl::internal::IovecBufferSize,
                                _backing_buffer, _backing_buffer_size,
                                request) {}
    UnownedEncodedMessage(uint32_t _iovec_capacity, uint8_t* _backing_buffer,
                          uint32_t _backing_buffer_size, WireRequest* request)
        : message_(::fidl::OutgoingMessage::ConstructorArgs{
              .iovecs = iovecs_,
              .iovec_capacity = _iovec_capacity,
              .backing_buffer = _backing_buffer,
              .backing_buffer_capacity = _backing_buffer_size,
          }) {
      ZX_ASSERT(_iovec_capacity <= std::size(iovecs_));
      message_.Encode<WireRequest>(request);
    }
    UnownedEncodedMessage(const UnownedEncodedMessage&) = delete;
    UnownedEncodedMessage(UnownedEncodedMessage&&) = delete;
    UnownedEncodedMessage* operator=(const UnownedEncodedMessage&) = delete;
    UnownedEncodedMessage* operator=(UnownedEncodedMessage&&) = delete;

    zx_status_t status() const { return message_.status(); }
#ifdef __Fuchsia__
    const char* status_string() const { return message_.status_string(); }
#endif  // __Fuchsia__
    bool ok() const { return message_.status() == ZX_OK; }
    std::string FormatDescription() const {
      return message_.FormatDescription();
    }
    const char* lossy_description() const {
      return message_.lossy_description();
    }
    const ::fidl::Result& error() const { return message_.error(); }

    ::fidl::OutgoingMessage& GetOutgoingMessage() { return message_; }
#ifdef __Fuchsia__
    template <typename ChannelLike>
    void Write(ChannelLike&& client) {
      message_.Write(std::forward<ChannelLike>(client));
    }
#endif  // __Fuchsia__
   private:
    ::fidl::internal::IovecBuffer iovecs_;
    ::fidl::OutgoingMessage message_;
  };

  class OwnedEncodedMessage final {
   public:
    explicit OwnedEncodedMessage(
        ::fidl_test_requestflexibleenvelope::wire::StrictFoo s)
        : message_(1u, backing_buffer_.data(),
                   static_cast<uint32_t>(backing_buffer_.size()), s) {}
    // Internal constructor.
    explicit OwnedEncodedMessage(
        ::fidl::internal::AllowUnownedInputRef allow_unowned,
        ::fidl_test_requestflexibleenvelope::wire::StrictFoo s)
        : message_(::fidl::internal::IovecBufferSize, backing_buffer_.data(),
                   static_cast<uint32_t>(backing_buffer_.size()), s) {}
    explicit OwnedEncodedMessage(WireRequest* request)
        : message_(1u, backing_buffer_.data(),
                   static_cast<uint32_t>(backing_buffer_.size()), request) {}
    // Internal constructor.
    explicit OwnedEncodedMessage(
        ::fidl::internal::AllowUnownedInputRef allow_unowned,
        WireRequest* request)
        : message_(::fidl::internal::IovecBufferSize, backing_buffer_.data(),
                   static_cast<uint32_t>(backing_buffer_.size()), request) {}
    OwnedEncodedMessage(const OwnedEncodedMessage&) = delete;
    OwnedEncodedMessage(OwnedEncodedMessage&&) = delete;
    OwnedEncodedMessage* operator=(const OwnedEncodedMessage&) = delete;
    OwnedEncodedMessage* operator=(OwnedEncodedMessage&&) = delete;

    zx_status_t status() const { return message_.status(); }
#ifdef __Fuchsia__
    const char* status_string() const { return message_.status_string(); }
#endif  // __Fuchsia__
    bool ok() const { return message_.ok(); }
    std::string FormatDescription() const {
      return message_.FormatDescription();
    }
    const char* lossy_description() const {
      return message_.lossy_description();
    }
    const ::fidl::Result& error() const { return message_.error(); }

    ::fidl::OutgoingMessage& GetOutgoingMessage() {
      return message_.GetOutgoingMessage();
    }
#ifdef __Fuchsia__
    template <typename ChannelLike>
    void Write(ChannelLike&& client) {
      message_.Write(std::forward<ChannelLike>(client));
    }
#endif  // __Fuchsia__
   private:
    ::fidl::internal::BoxedMessageBuffer<ZX_CHANNEL_MAX_MSG_BYTES>
        backing_buffer_;
    UnownedEncodedMessage message_;
  };

 public:
  class DecodedMessage final
      : public ::fidl::internal::DecodedMessageBase<
            ::fidl::WireRequest<::fidl_test_requestflexibleenvelope::Protocol::
                                    RequestStrictResponseFlexible>> {
   public:
    using DecodedMessageBase<::fidl::WireRequest<
        ::fidl_test_requestflexibleenvelope::Protocol::
            RequestStrictResponseFlexible>>::DecodedMessageBase;

    DecodedMessage(uint8_t* bytes, uint32_t byte_actual,
                   zx_handle_info_t* handles = nullptr,
                   uint32_t handle_actual = 0)
        : DecodedMessageBase(::fidl::IncomingMessage(bytes, byte_actual,
                                                     handles, handle_actual)) {}

    ::fidl::WireRequest<::fidl_test_requestflexibleenvelope::Protocol::
                            RequestStrictResponseFlexible>*
    PrimaryObject() {
      ZX_DEBUG_ASSERT(ok());
      return reinterpret_cast<
          ::fidl::WireRequest<::fidl_test_requestflexibleenvelope::Protocol::
                                  RequestStrictResponseFlexible>*>(bytes());
    }

    // Release the ownership of the decoded message. That means that the handles
    // won't be closed When the object is destroyed. After calling this method,
    // the |DecodedMessage| object should not be used anymore.
    void ReleasePrimaryObject() { ResetBytes(); }
  };

 private:
  void _InitHeader();
};
template <>
struct ::fidl::WireResponse<::fidl_test_requestflexibleenvelope::Protocol::
                                RequestStrictResponseFlexible>
    final {
  FIDL_ALIGNDECL
  fidl_message_header_t _hdr;
  ::fidl_test_requestflexibleenvelope::wire::FlexibleFoo f;
  explicit WireResponse(
      ::fidl_test_requestflexibleenvelope::wire::FlexibleFoo f)
      : f(f) {
    _InitHeader();
  }
  WireResponse() { _InitHeader(); }

  static constexpr const fidl_type_t* Type =
      &::fidl_test_requestflexibleenvelope::
          fidl_test_requestflexibleenvelope_ProtocolRequestStrictResponseFlexibleResponseTable;
  static constexpr uint32_t MaxNumHandles = 0;
  static constexpr uint32_t PrimarySize = 40;
  static constexpr uint32_t MaxOutOfLine = 4294967295;
  static constexpr bool HasFlexibleEnvelope = true;
  static constexpr bool HasPointer = true;
  static constexpr ::fidl::internal::TransactionalMessageKind MessageKind =
      ::fidl::internal::TransactionalMessageKind::kResponse;

  class UnownedEncodedMessage final {
   public:
    UnownedEncodedMessage(
        uint8_t* _backing_buffer, uint32_t _backing_buffer_size,
        ::fidl_test_requestflexibleenvelope::wire::FlexibleFoo f)
        : UnownedEncodedMessage(::fidl::internal::IovecBufferSize,
                                _backing_buffer, _backing_buffer_size, f) {}
    UnownedEncodedMessage(
        uint32_t _iovec_capacity, uint8_t* _backing_buffer,
        uint32_t _backing_buffer_size,
        ::fidl_test_requestflexibleenvelope::wire::FlexibleFoo f)
        : message_(::fidl::OutgoingMessage::ConstructorArgs{
              .iovecs = iovecs_,
              .iovec_capacity = _iovec_capacity,
              .backing_buffer = _backing_buffer,
              .backing_buffer_capacity = _backing_buffer_size,
          }) {
      ZX_ASSERT(_iovec_capacity <= std::size(iovecs_));
      FIDL_ALIGNDECL WireResponse _response{f};
      message_.Encode<
          ::fidl::WireResponse<::fidl_test_requestflexibleenvelope::Protocol::
                                   RequestStrictResponseFlexible>>(&_response);
    }
    UnownedEncodedMessage(uint8_t* _backing_buffer,
                          uint32_t _backing_buffer_size, WireResponse* response)
        : UnownedEncodedMessage(::fidl::internal::IovecBufferSize,
                                _backing_buffer, _backing_buffer_size,
                                response) {}
    UnownedEncodedMessage(uint32_t _iovec_capacity, uint8_t* _backing_buffer,
                          uint32_t _backing_buffer_size, WireResponse* response)
        : message_(::fidl::OutgoingMessage::ConstructorArgs{
              .iovecs = iovecs_,
              .iovec_capacity = _iovec_capacity,
              .backing_buffer = _backing_buffer,
              .backing_buffer_capacity = _backing_buffer_size,
          }) {
      ZX_ASSERT(_iovec_capacity <= std::size(iovecs_));
      message_.Encode<
          ::fidl::WireResponse<::fidl_test_requestflexibleenvelope::Protocol::
                                   RequestStrictResponseFlexible>>(response);
    }
    UnownedEncodedMessage(const UnownedEncodedMessage&) = delete;
    UnownedEncodedMessage(UnownedEncodedMessage&&) = delete;
    UnownedEncodedMessage* operator=(const UnownedEncodedMessage&) = delete;
    UnownedEncodedMessage* operator=(UnownedEncodedMessage&&) = delete;

    zx_status_t status() const { return message_.status(); }
#ifdef __Fuchsia__
    const char* status_string() const { return message_.status_string(); }
#endif  // __Fuchsia__
    bool ok() const { return message_.status() == ZX_OK; }
    std::string FormatDescription() const {
      return message_.FormatDescription();
    }
    const char* lossy_description() const {
      return message_.lossy_description();
    }
    const ::fidl::Result& error() const { return message_.error(); }

    ::fidl::OutgoingMessage& GetOutgoingMessage() { return message_; }
#ifdef __Fuchsia__
    template <typename ChannelLike>
    void Write(ChannelLike&& client) {
      message_.Write(std::forward<ChannelLike>(client));
    }
#endif  // __Fuchsia__
   private:
    ::fidl::internal::IovecBuffer iovecs_;
    ::fidl::OutgoingMessage message_;
  };

  class OwnedEncodedMessage final {
   public:
    explicit OwnedEncodedMessage(
        ::fidl_test_requestflexibleenvelope::wire::FlexibleFoo f)
        : message_(1u, backing_buffer_.data(),
                   static_cast<uint32_t>(backing_buffer_.size()), f) {}
    // Internal constructor.
    explicit OwnedEncodedMessage(
        ::fidl::internal::AllowUnownedInputRef allow_unowned,
        ::fidl_test_requestflexibleenvelope::wire::FlexibleFoo f)
        : message_(::fidl::internal::IovecBufferSize, backing_buffer_.data(),
                   static_cast<uint32_t>(backing_buffer_.size()), f) {}
    explicit OwnedEncodedMessage(
        ::fidl::WireResponse<::fidl_test_requestflexibleenvelope::Protocol::
                                 RequestStrictResponseFlexible>* response)
        : message_(1u, backing_buffer_.data(),
                   static_cast<uint32_t>(backing_buffer_.size()), response) {}
    // Internal constructor.
    explicit OwnedEncodedMessage(
        ::fidl::internal::AllowUnownedInputRef allow_unowned,
        ::fidl::WireResponse<::fidl_test_requestflexibleenvelope::Protocol::
                                 RequestStrictResponseFlexible>* response)
        : message_(::fidl::internal::IovecBufferSize, backing_buffer_.data(),
                   static_cast<uint32_t>(backing_buffer_.size()), response) {}
    OwnedEncodedMessage(const OwnedEncodedMessage&) = delete;
    OwnedEncodedMessage(OwnedEncodedMessage&&) = delete;
    OwnedEncodedMessage* operator=(const OwnedEncodedMessage&) = delete;
    OwnedEncodedMessage* operator=(OwnedEncodedMessage&&) = delete;

    zx_status_t status() const { return message_.status(); }
#ifdef __Fuchsia__
    const char* status_string() const { return message_.status_string(); }
#endif  // __Fuchsia__
    bool ok() const { return message_.ok(); }
    std::string FormatDescription() const {
      return message_.FormatDescription();
    }
    const char* lossy_description() const {
      return message_.lossy_description();
    }
    const ::fidl::Result& error() const { return message_.error(); }

    ::fidl::OutgoingMessage& GetOutgoingMessage() {
      return message_.GetOutgoingMessage();
    }
#ifdef __Fuchsia__
    template <typename ChannelLike>
    void Write(ChannelLike&& client) {
      message_.Write(std::forward<ChannelLike>(client));
    }
#endif  // __Fuchsia__
   private:
    ::fidl::internal::BoxedMessageBuffer<ZX_CHANNEL_MAX_MSG_BYTES>
        backing_buffer_;
    UnownedEncodedMessage message_;
  };

 public:
  class DecodedMessage final
      : public ::fidl::internal::DecodedMessageBase<
            ::fidl::WireResponse<::fidl_test_requestflexibleenvelope::Protocol::
                                     RequestStrictResponseFlexible>> {
   public:
    using DecodedMessageBase<::fidl::WireResponse<
        ::fidl_test_requestflexibleenvelope::Protocol::
            RequestStrictResponseFlexible>>::DecodedMessageBase;

    DecodedMessage(uint8_t* bytes, uint32_t byte_actual,
                   zx_handle_info_t* handles = nullptr,
                   uint32_t handle_actual = 0)
        : DecodedMessageBase(::fidl::IncomingMessage(bytes, byte_actual,
                                                     handles, handle_actual)) {}

    ::fidl::WireResponse<::fidl_test_requestflexibleenvelope::Protocol::
                             RequestStrictResponseFlexible>*
    PrimaryObject() {
      ZX_DEBUG_ASSERT(ok());
      return reinterpret_cast<
          ::fidl::WireResponse<::fidl_test_requestflexibleenvelope::Protocol::
                                   RequestStrictResponseFlexible>*>(bytes());
    }

    // Release the ownership of the decoded message. That means that the handles
    // won't be closed When the object is destroyed. After calling this method,
    // the |DecodedMessage| object should not be used anymore.
    void ReleasePrimaryObject() { ResetBytes(); }
  };

 private:
  void _InitHeader();
};
template <>
struct ::fidl::WireRequest<::fidl_test_requestflexibleenvelope::Protocol::
                               RequestFlexibleResponseStrict>
    final {
  FIDL_ALIGNDECL
  fidl_message_header_t _hdr;
  ::fidl_test_requestflexibleenvelope::wire::FlexibleFoo s;
  explicit WireRequest(::fidl_test_requestflexibleenvelope::wire::FlexibleFoo s)
      : s(s) {
    _InitHeader();
  }
  WireRequest() { _InitHeader(); }

  static constexpr const fidl_type_t* Type =
      &::fidl_test_requestflexibleenvelope::
          fidl_test_requestflexibleenvelope_ProtocolRequestFlexibleResponseStrictRequestTable;
  static constexpr uint32_t MaxNumHandles = 0;
  static constexpr uint32_t PrimarySize = 40;
  static constexpr uint32_t MaxOutOfLine = 4294967295;
  static constexpr uint32_t AltPrimarySize = 40;
  static constexpr uint32_t AltMaxOutOfLine = 4294967295;
  static constexpr bool HasFlexibleEnvelope = true;
  static constexpr bool HasPointer = true;
  static constexpr ::fidl::internal::TransactionalMessageKind MessageKind =
      ::fidl::internal::TransactionalMessageKind::kRequest;
  using ResponseType =
      ::fidl::WireResponse<::fidl_test_requestflexibleenvelope::Protocol::
                               RequestFlexibleResponseStrict>;

  class UnownedEncodedMessage final {
   public:
    UnownedEncodedMessage(
        uint8_t* _backing_buffer, uint32_t _backing_buffer_size,
        ::fidl_test_requestflexibleenvelope::wire::FlexibleFoo s)
        : UnownedEncodedMessage(::fidl::internal::IovecBufferSize,
                                _backing_buffer, _backing_buffer_size, s) {}
    UnownedEncodedMessage(
        uint32_t _iovec_capacity, uint8_t* _backing_buffer,
        uint32_t _backing_buffer_size,
        ::fidl_test_requestflexibleenvelope::wire::FlexibleFoo s)
        : message_(::fidl::OutgoingMessage::ConstructorArgs{
              .iovecs = iovecs_,
              .iovec_capacity = _iovec_capacity,
              .backing_buffer = _backing_buffer,
              .backing_buffer_capacity = _backing_buffer_size,
          }) {
      ZX_ASSERT(_iovec_capacity <= std::size(iovecs_));
      FIDL_ALIGNDECL WireRequest _request{s};
      message_.Encode<WireRequest>(&_request);
    }
    UnownedEncodedMessage(uint8_t* _backing_buffer,
                          uint32_t _backing_buffer_size, WireRequest* request)
        : UnownedEncodedMessage(::fidl::internal::IovecBufferSize,
                                _backing_buffer, _backing_buffer_size,
                                request) {}
    UnownedEncodedMessage(uint32_t _iovec_capacity, uint8_t* _backing_buffer,
                          uint32_t _backing_buffer_size, WireRequest* request)
        : message_(::fidl::OutgoingMessage::ConstructorArgs{
              .iovecs = iovecs_,
              .iovec_capacity = _iovec_capacity,
              .backing_buffer = _backing_buffer,
              .backing_buffer_capacity = _backing_buffer_size,
          }) {
      ZX_ASSERT(_iovec_capacity <= std::size(iovecs_));
      message_.Encode<WireRequest>(request);
    }
    UnownedEncodedMessage(const UnownedEncodedMessage&) = delete;
    UnownedEncodedMessage(UnownedEncodedMessage&&) = delete;
    UnownedEncodedMessage* operator=(const UnownedEncodedMessage&) = delete;
    UnownedEncodedMessage* operator=(UnownedEncodedMessage&&) = delete;

    zx_status_t status() const { return message_.status(); }
#ifdef __Fuchsia__
    const char* status_string() const { return message_.status_string(); }
#endif  // __Fuchsia__
    bool ok() const { return message_.status() == ZX_OK; }
    std::string FormatDescription() const {
      return message_.FormatDescription();
    }
    const char* lossy_description() const {
      return message_.lossy_description();
    }
    const ::fidl::Result& error() const { return message_.error(); }

    ::fidl::OutgoingMessage& GetOutgoingMessage() { return message_; }
#ifdef __Fuchsia__
    template <typename ChannelLike>
    void Write(ChannelLike&& client) {
      message_.Write(std::forward<ChannelLike>(client));
    }
#endif  // __Fuchsia__
   private:
    ::fidl::internal::IovecBuffer iovecs_;
    ::fidl::OutgoingMessage message_;
  };

  class OwnedEncodedMessage final {
   public:
    explicit OwnedEncodedMessage(
        ::fidl_test_requestflexibleenvelope::wire::FlexibleFoo s)
        : message_(1u, backing_buffer_.data(),
                   static_cast<uint32_t>(backing_buffer_.size()), s) {}
    // Internal constructor.
    explicit OwnedEncodedMessage(
        ::fidl::internal::AllowUnownedInputRef allow_unowned,
        ::fidl_test_requestflexibleenvelope::wire::FlexibleFoo s)
        : message_(::fidl::internal::IovecBufferSize, backing_buffer_.data(),
                   static_cast<uint32_t>(backing_buffer_.size()), s) {}
    explicit OwnedEncodedMessage(WireRequest* request)
        : message_(1u, backing_buffer_.data(),
                   static_cast<uint32_t>(backing_buffer_.size()), request) {}
    // Internal constructor.
    explicit OwnedEncodedMessage(
        ::fidl::internal::AllowUnownedInputRef allow_unowned,
        WireRequest* request)
        : message_(::fidl::internal::IovecBufferSize, backing_buffer_.data(),
                   static_cast<uint32_t>(backing_buffer_.size()), request) {}
    OwnedEncodedMessage(const OwnedEncodedMessage&) = delete;
    OwnedEncodedMessage(OwnedEncodedMessage&&) = delete;
    OwnedEncodedMessage* operator=(const OwnedEncodedMessage&) = delete;
    OwnedEncodedMessage* operator=(OwnedEncodedMessage&&) = delete;

    zx_status_t status() const { return message_.status(); }
#ifdef __Fuchsia__
    const char* status_string() const { return message_.status_string(); }
#endif  // __Fuchsia__
    bool ok() const { return message_.ok(); }
    std::string FormatDescription() const {
      return message_.FormatDescription();
    }
    const char* lossy_description() const {
      return message_.lossy_description();
    }
    const ::fidl::Result& error() const { return message_.error(); }

    ::fidl::OutgoingMessage& GetOutgoingMessage() {
      return message_.GetOutgoingMessage();
    }
#ifdef __Fuchsia__
    template <typename ChannelLike>
    void Write(ChannelLike&& client) {
      message_.Write(std::forward<ChannelLike>(client));
    }
#endif  // __Fuchsia__
   private:
    ::fidl::internal::BoxedMessageBuffer<ZX_CHANNEL_MAX_MSG_BYTES>
        backing_buffer_;
    UnownedEncodedMessage message_;
  };

 public:
  class DecodedMessage final
      : public ::fidl::internal::DecodedMessageBase<
            ::fidl::WireRequest<::fidl_test_requestflexibleenvelope::Protocol::
                                    RequestFlexibleResponseStrict>> {
   public:
    using DecodedMessageBase<::fidl::WireRequest<
        ::fidl_test_requestflexibleenvelope::Protocol::
            RequestFlexibleResponseStrict>>::DecodedMessageBase;

    DecodedMessage(uint8_t* bytes, uint32_t byte_actual,
                   zx_handle_info_t* handles = nullptr,
                   uint32_t handle_actual = 0)
        : DecodedMessageBase(::fidl::IncomingMessage(bytes, byte_actual,
                                                     handles, handle_actual)) {}

    ::fidl::WireRequest<::fidl_test_requestflexibleenvelope::Protocol::
                            RequestFlexibleResponseStrict>*
    PrimaryObject() {
      ZX_DEBUG_ASSERT(ok());
      return reinterpret_cast<
          ::fidl::WireRequest<::fidl_test_requestflexibleenvelope::Protocol::
                                  RequestFlexibleResponseStrict>*>(bytes());
    }

    // Release the ownership of the decoded message. That means that the handles
    // won't be closed When the object is destroyed. After calling this method,
    // the |DecodedMessage| object should not be used anymore.
    void ReleasePrimaryObject() { ResetBytes(); }
  };

 private:
  void _InitHeader();
};
template <>
struct ::fidl::WireResponse<::fidl_test_requestflexibleenvelope::Protocol::
                                RequestFlexibleResponseStrict>
    final {
  FIDL_ALIGNDECL
  fidl_message_header_t _hdr;
  ::fidl_test_requestflexibleenvelope::wire::StrictFoo f;
  explicit WireResponse(::fidl_test_requestflexibleenvelope::wire::StrictFoo f)
      : f(f) {
    _InitHeader();
  }
  WireResponse() { _InitHeader(); }

  static constexpr const fidl_type_t* Type =
      &::fidl_test_requestflexibleenvelope::
          fidl_test_requestflexibleenvelope_ProtocolRequestFlexibleResponseStrictResponseTable;
  static constexpr uint32_t MaxNumHandles = 0;
  static constexpr uint32_t PrimarySize = 40;
  static constexpr uint32_t MaxOutOfLine = 4294967295;
  static constexpr bool HasFlexibleEnvelope = false;
  static constexpr bool HasPointer = true;
  static constexpr ::fidl::internal::TransactionalMessageKind MessageKind =
      ::fidl::internal::TransactionalMessageKind::kResponse;

  class UnownedEncodedMessage final {
   public:
    UnownedEncodedMessage(
        uint8_t* _backing_buffer, uint32_t _backing_buffer_size,
        ::fidl_test_requestflexibleenvelope::wire::StrictFoo f)
        : UnownedEncodedMessage(::fidl::internal::IovecBufferSize,
                                _backing_buffer, _backing_buffer_size, f) {}
    UnownedEncodedMessage(
        uint32_t _iovec_capacity, uint8_t* _backing_buffer,
        uint32_t _backing_buffer_size,
        ::fidl_test_requestflexibleenvelope::wire::StrictFoo f)
        : message_(::fidl::OutgoingMessage::ConstructorArgs{
              .iovecs = iovecs_,
              .iovec_capacity = _iovec_capacity,
              .backing_buffer = _backing_buffer,
              .backing_buffer_capacity = _backing_buffer_size,
          }) {
      ZX_ASSERT(_iovec_capacity <= std::size(iovecs_));
      FIDL_ALIGNDECL WireResponse _response{f};
      message_.Encode<
          ::fidl::WireResponse<::fidl_test_requestflexibleenvelope::Protocol::
                                   RequestFlexibleResponseStrict>>(&_response);
    }
    UnownedEncodedMessage(uint8_t* _backing_buffer,
                          uint32_t _backing_buffer_size, WireResponse* response)
        : UnownedEncodedMessage(::fidl::internal::IovecBufferSize,
                                _backing_buffer, _backing_buffer_size,
                                response) {}
    UnownedEncodedMessage(uint32_t _iovec_capacity, uint8_t* _backing_buffer,
                          uint32_t _backing_buffer_size, WireResponse* response)
        : message_(::fidl::OutgoingMessage::ConstructorArgs{
              .iovecs = iovecs_,
              .iovec_capacity = _iovec_capacity,
              .backing_buffer = _backing_buffer,
              .backing_buffer_capacity = _backing_buffer_size,
          }) {
      ZX_ASSERT(_iovec_capacity <= std::size(iovecs_));
      message_.Encode<
          ::fidl::WireResponse<::fidl_test_requestflexibleenvelope::Protocol::
                                   RequestFlexibleResponseStrict>>(response);
    }
    UnownedEncodedMessage(const UnownedEncodedMessage&) = delete;
    UnownedEncodedMessage(UnownedEncodedMessage&&) = delete;
    UnownedEncodedMessage* operator=(const UnownedEncodedMessage&) = delete;
    UnownedEncodedMessage* operator=(UnownedEncodedMessage&&) = delete;

    zx_status_t status() const { return message_.status(); }
#ifdef __Fuchsia__
    const char* status_string() const { return message_.status_string(); }
#endif  // __Fuchsia__
    bool ok() const { return message_.status() == ZX_OK; }
    std::string FormatDescription() const {
      return message_.FormatDescription();
    }
    const char* lossy_description() const {
      return message_.lossy_description();
    }
    const ::fidl::Result& error() const { return message_.error(); }

    ::fidl::OutgoingMessage& GetOutgoingMessage() { return message_; }
#ifdef __Fuchsia__
    template <typename ChannelLike>
    void Write(ChannelLike&& client) {
      message_.Write(std::forward<ChannelLike>(client));
    }
#endif  // __Fuchsia__
   private:
    ::fidl::internal::IovecBuffer iovecs_;
    ::fidl::OutgoingMessage message_;
  };

  class OwnedEncodedMessage final {
   public:
    explicit OwnedEncodedMessage(
        ::fidl_test_requestflexibleenvelope::wire::StrictFoo f)
        : message_(1u, backing_buffer_.data(),
                   static_cast<uint32_t>(backing_buffer_.size()), f) {}
    // Internal constructor.
    explicit OwnedEncodedMessage(
        ::fidl::internal::AllowUnownedInputRef allow_unowned,
        ::fidl_test_requestflexibleenvelope::wire::StrictFoo f)
        : message_(::fidl::internal::IovecBufferSize, backing_buffer_.data(),
                   static_cast<uint32_t>(backing_buffer_.size()), f) {}
    explicit OwnedEncodedMessage(
        ::fidl::WireResponse<::fidl_test_requestflexibleenvelope::Protocol::
                                 RequestFlexibleResponseStrict>* response)
        : message_(1u, backing_buffer_.data(),
                   static_cast<uint32_t>(backing_buffer_.size()), response) {}
    // Internal constructor.
    explicit OwnedEncodedMessage(
        ::fidl::internal::AllowUnownedInputRef allow_unowned,
        ::fidl::WireResponse<::fidl_test_requestflexibleenvelope::Protocol::
                                 RequestFlexibleResponseStrict>* response)
        : message_(::fidl::internal::IovecBufferSize, backing_buffer_.data(),
                   static_cast<uint32_t>(backing_buffer_.size()), response) {}
    OwnedEncodedMessage(const OwnedEncodedMessage&) = delete;
    OwnedEncodedMessage(OwnedEncodedMessage&&) = delete;
    OwnedEncodedMessage* operator=(const OwnedEncodedMessage&) = delete;
    OwnedEncodedMessage* operator=(OwnedEncodedMessage&&) = delete;

    zx_status_t status() const { return message_.status(); }
#ifdef __Fuchsia__
    const char* status_string() const { return message_.status_string(); }
#endif  // __Fuchsia__
    bool ok() const { return message_.ok(); }
    std::string FormatDescription() const {
      return message_.FormatDescription();
    }
    const char* lossy_description() const {
      return message_.lossy_description();
    }
    const ::fidl::Result& error() const { return message_.error(); }

    ::fidl::OutgoingMessage& GetOutgoingMessage() {
      return message_.GetOutgoingMessage();
    }
#ifdef __Fuchsia__
    template <typename ChannelLike>
    void Write(ChannelLike&& client) {
      message_.Write(std::forward<ChannelLike>(client));
    }
#endif  // __Fuchsia__
   private:
    ::fidl::internal::BoxedMessageBuffer<ZX_CHANNEL_MAX_MSG_BYTES>
        backing_buffer_;
    UnownedEncodedMessage message_;
  };

 public:
  class DecodedMessage final
      : public ::fidl::internal::DecodedMessageBase<
            ::fidl::WireResponse<::fidl_test_requestflexibleenvelope::Protocol::
                                     RequestFlexibleResponseStrict>> {
   public:
    using DecodedMessageBase<::fidl::WireResponse<
        ::fidl_test_requestflexibleenvelope::Protocol::
            RequestFlexibleResponseStrict>>::DecodedMessageBase;

    DecodedMessage(uint8_t* bytes, uint32_t byte_actual,
                   zx_handle_info_t* handles = nullptr,
                   uint32_t handle_actual = 0)
        : DecodedMessageBase(::fidl::IncomingMessage(bytes, byte_actual,
                                                     handles, handle_actual)) {}

    ::fidl::WireResponse<::fidl_test_requestflexibleenvelope::Protocol::
                             RequestFlexibleResponseStrict>*
    PrimaryObject() {
      ZX_DEBUG_ASSERT(ok());
      return reinterpret_cast<
          ::fidl::WireResponse<::fidl_test_requestflexibleenvelope::Protocol::
                                   RequestFlexibleResponseStrict>*>(bytes());
    }

    // Release the ownership of the decoded message. That means that the handles
    // won't be closed When the object is destroyed. After calling this method,
    // the |DecodedMessage| object should not be used anymore.
    void ReleasePrimaryObject() { ResetBytes(); }
  };

 private:
  void _InitHeader();
};
#ifdef __Fuchsia__

template <>
class ::fidl::WireResult<::fidl_test_requestflexibleenvelope::Protocol::
                             RequestStrictResponseFlexible>
    final : public ::fidl::Result {
 public:
  explicit WireResult(
      ::fidl::UnownedClientEnd<::fidl_test_requestflexibleenvelope::Protocol>
          _client,
      ::fidl_test_requestflexibleenvelope::wire::StrictFoo s);
  WireResult(
      ::fidl::UnownedClientEnd<::fidl_test_requestflexibleenvelope::Protocol>
          _client,
      ::fidl_test_requestflexibleenvelope::wire::StrictFoo s,
      zx_time_t _deadline);
  explicit WireResult(const ::fidl::Result& result) : ::fidl::Result(result) {}
  WireResult(WireResult&&) = delete;
  WireResult(const WireResult&) = delete;
  WireResult* operator=(WireResult&&) = delete;
  WireResult* operator=(const WireResult&) = delete;
  ~WireResult() = default;

  ::fidl::WireResponse<::fidl_test_requestflexibleenvelope::Protocol::
                           RequestStrictResponseFlexible>*
  Unwrap() {
    ZX_DEBUG_ASSERT(ok());
    return reinterpret_cast<
        ::fidl::WireResponse<::fidl_test_requestflexibleenvelope::Protocol::
                                 RequestStrictResponseFlexible>*>(
        bytes_.data());
  }
  const ::fidl::WireResponse<::fidl_test_requestflexibleenvelope::Protocol::
                                 RequestStrictResponseFlexible>*
  Unwrap() const {
    ZX_DEBUG_ASSERT(ok());
    return reinterpret_cast<const ::fidl::WireResponse<
        ::fidl_test_requestflexibleenvelope::Protocol::
            RequestStrictResponseFlexible>*>(bytes_.data());
  }

  ::fidl::WireResponse<::fidl_test_requestflexibleenvelope::Protocol::
                           RequestStrictResponseFlexible>&
  value() {
    return *Unwrap();
  }
  const ::fidl::WireResponse<::fidl_test_requestflexibleenvelope::Protocol::
                                 RequestStrictResponseFlexible>&
  value() const {
    return *Unwrap();
  }

  ::fidl::WireResponse<::fidl_test_requestflexibleenvelope::Protocol::
                           RequestStrictResponseFlexible>*
  operator->() {
    return &value();
  }
  const ::fidl::WireResponse<::fidl_test_requestflexibleenvelope::Protocol::
                                 RequestStrictResponseFlexible>*
  operator->() const {
    return &value();
  }

  ::fidl::WireResponse<::fidl_test_requestflexibleenvelope::Protocol::
                           RequestStrictResponseFlexible>&
  operator*() {
    return value();
  }
  const ::fidl::WireResponse<::fidl_test_requestflexibleenvelope::Protocol::
                                 RequestStrictResponseFlexible>&
  operator*() const {
    return value();
  }

 private:
  ::fidl::internal::BoxedMessageBuffer<ZX_CHANNEL_MAX_MSG_BYTES> bytes_;
};
template <>
class ::fidl::WireUnownedResult<::fidl_test_requestflexibleenvelope::Protocol::
                                    RequestStrictResponseFlexible>
    final : public ::fidl::Result {
 public:
  explicit WireUnownedResult(
      ::fidl::UnownedClientEnd<::fidl_test_requestflexibleenvelope::Protocol>
          _client,
      uint8_t* _request_bytes, uint32_t _request_byte_capacity,
      ::fidl_test_requestflexibleenvelope::wire::StrictFoo s,
      uint8_t* _response_bytes, uint32_t _response_byte_capacity);
  explicit WireUnownedResult(
      ::fidl::WireResponse<::fidl_test_requestflexibleenvelope::Protocol::
                               RequestStrictResponseFlexible>* response)
      : bytes_(reinterpret_cast<uint8_t*>(response)) {}
  explicit WireUnownedResult(const ::fidl::Result& result)
      : ::fidl::Result(result) {}
  explicit WireUnownedResult(
      ::fidl::DecodedMessage<
          ::fidl::WireResponse<::fidl_test_requestflexibleenvelope::Protocol::
                                   RequestStrictResponseFlexible>>&& decoded)
      : ::fidl::Result(decoded) {
    if (decoded.ok()) {
      bytes_ = reinterpret_cast<uint8_t*>(decoded.PrimaryObject());
    } else {
      bytes_ = nullptr;
    }
    decoded.ReleasePrimaryObject();
  }
  WireUnownedResult(WireUnownedResult&&) = delete;
  WireUnownedResult(const WireUnownedResult&) = delete;
  WireUnownedResult* operator=(WireUnownedResult&&) = delete;
  WireUnownedResult* operator=(const WireUnownedResult&) = delete;
  ~WireUnownedResult() = default;

  ::fidl::WireResponse<::fidl_test_requestflexibleenvelope::Protocol::
                           RequestStrictResponseFlexible>*
  Unwrap() {
    ZX_DEBUG_ASSERT(ok());
    return reinterpret_cast<
        ::fidl::WireResponse<::fidl_test_requestflexibleenvelope::Protocol::
                                 RequestStrictResponseFlexible>*>(bytes_);
  }
  const ::fidl::WireResponse<::fidl_test_requestflexibleenvelope::Protocol::
                                 RequestStrictResponseFlexible>*
  Unwrap() const {
    ZX_DEBUG_ASSERT(ok());
    return reinterpret_cast<const ::fidl::WireResponse<
        ::fidl_test_requestflexibleenvelope::Protocol::
            RequestStrictResponseFlexible>*>(bytes_);
  }

  ::fidl::WireResponse<::fidl_test_requestflexibleenvelope::Protocol::
                           RequestStrictResponseFlexible>&
  value() {
    return *Unwrap();
  }
  const ::fidl::WireResponse<::fidl_test_requestflexibleenvelope::Protocol::
                                 RequestStrictResponseFlexible>&
  value() const {
    return *Unwrap();
  }

  ::fidl::WireResponse<::fidl_test_requestflexibleenvelope::Protocol::
                           RequestStrictResponseFlexible>*
  operator->() {
    return &value();
  }
  const ::fidl::WireResponse<::fidl_test_requestflexibleenvelope::Protocol::
                                 RequestStrictResponseFlexible>*
  operator->() const {
    return &value();
  }

  ::fidl::WireResponse<::fidl_test_requestflexibleenvelope::Protocol::
                           RequestStrictResponseFlexible>&
  operator*() {
    return value();
  }
  const ::fidl::WireResponse<::fidl_test_requestflexibleenvelope::Protocol::
                                 RequestStrictResponseFlexible>&
  operator*() const {
    return value();
  }

 private:
  uint8_t* bytes_;
};
template <>
class ::fidl::WireResult<::fidl_test_requestflexibleenvelope::Protocol::
                             RequestFlexibleResponseStrict>
    final : public ::fidl::Result {
 public:
  explicit WireResult(
      ::fidl::UnownedClientEnd<::fidl_test_requestflexibleenvelope::Protocol>
          _client,
      ::fidl_test_requestflexibleenvelope::wire::FlexibleFoo s);
  WireResult(
      ::fidl::UnownedClientEnd<::fidl_test_requestflexibleenvelope::Protocol>
          _client,
      ::fidl_test_requestflexibleenvelope::wire::FlexibleFoo s,
      zx_time_t _deadline);
  explicit WireResult(const ::fidl::Result& result) : ::fidl::Result(result) {}
  WireResult(WireResult&&) = delete;
  WireResult(const WireResult&) = delete;
  WireResult* operator=(WireResult&&) = delete;
  WireResult* operator=(const WireResult&) = delete;
  ~WireResult() = default;

  ::fidl::WireResponse<::fidl_test_requestflexibleenvelope::Protocol::
                           RequestFlexibleResponseStrict>*
  Unwrap() {
    ZX_DEBUG_ASSERT(ok());
    return reinterpret_cast<
        ::fidl::WireResponse<::fidl_test_requestflexibleenvelope::Protocol::
                                 RequestFlexibleResponseStrict>*>(
        bytes_.data());
  }
  const ::fidl::WireResponse<::fidl_test_requestflexibleenvelope::Protocol::
                                 RequestFlexibleResponseStrict>*
  Unwrap() const {
    ZX_DEBUG_ASSERT(ok());
    return reinterpret_cast<const ::fidl::WireResponse<
        ::fidl_test_requestflexibleenvelope::Protocol::
            RequestFlexibleResponseStrict>*>(bytes_.data());
  }

  ::fidl::WireResponse<::fidl_test_requestflexibleenvelope::Protocol::
                           RequestFlexibleResponseStrict>&
  value() {
    return *Unwrap();
  }
  const ::fidl::WireResponse<::fidl_test_requestflexibleenvelope::Protocol::
                                 RequestFlexibleResponseStrict>&
  value() const {
    return *Unwrap();
  }

  ::fidl::WireResponse<::fidl_test_requestflexibleenvelope::Protocol::
                           RequestFlexibleResponseStrict>*
  operator->() {
    return &value();
  }
  const ::fidl::WireResponse<::fidl_test_requestflexibleenvelope::Protocol::
                                 RequestFlexibleResponseStrict>*
  operator->() const {
    return &value();
  }

  ::fidl::WireResponse<::fidl_test_requestflexibleenvelope::Protocol::
                           RequestFlexibleResponseStrict>&
  operator*() {
    return value();
  }
  const ::fidl::WireResponse<::fidl_test_requestflexibleenvelope::Protocol::
                                 RequestFlexibleResponseStrict>&
  operator*() const {
    return value();
  }

 private:
  ::fidl::internal::BoxedMessageBuffer<ZX_CHANNEL_MAX_MSG_BYTES> bytes_;
};
template <>
class ::fidl::WireUnownedResult<::fidl_test_requestflexibleenvelope::Protocol::
                                    RequestFlexibleResponseStrict>
    final : public ::fidl::Result {
 public:
  explicit WireUnownedResult(
      ::fidl::UnownedClientEnd<::fidl_test_requestflexibleenvelope::Protocol>
          _client,
      uint8_t* _request_bytes, uint32_t _request_byte_capacity,
      ::fidl_test_requestflexibleenvelope::wire::FlexibleFoo s,
      uint8_t* _response_bytes, uint32_t _response_byte_capacity);
  explicit WireUnownedResult(
      ::fidl::WireResponse<::fidl_test_requestflexibleenvelope::Protocol::
                               RequestFlexibleResponseStrict>* response)
      : bytes_(reinterpret_cast<uint8_t*>(response)) {}
  explicit WireUnownedResult(const ::fidl::Result& result)
      : ::fidl::Result(result) {}
  explicit WireUnownedResult(
      ::fidl::DecodedMessage<
          ::fidl::WireResponse<::fidl_test_requestflexibleenvelope::Protocol::
                                   RequestFlexibleResponseStrict>>&& decoded)
      : ::fidl::Result(decoded) {
    if (decoded.ok()) {
      bytes_ = reinterpret_cast<uint8_t*>(decoded.PrimaryObject());
    } else {
      bytes_ = nullptr;
    }
    decoded.ReleasePrimaryObject();
  }
  WireUnownedResult(WireUnownedResult&&) = delete;
  WireUnownedResult(const WireUnownedResult&) = delete;
  WireUnownedResult* operator=(WireUnownedResult&&) = delete;
  WireUnownedResult* operator=(const WireUnownedResult&) = delete;
  ~WireUnownedResult() = default;

  ::fidl::WireResponse<::fidl_test_requestflexibleenvelope::Protocol::
                           RequestFlexibleResponseStrict>*
  Unwrap() {
    ZX_DEBUG_ASSERT(ok());
    return reinterpret_cast<
        ::fidl::WireResponse<::fidl_test_requestflexibleenvelope::Protocol::
                                 RequestFlexibleResponseStrict>*>(bytes_);
  }
  const ::fidl::WireResponse<::fidl_test_requestflexibleenvelope::Protocol::
                                 RequestFlexibleResponseStrict>*
  Unwrap() const {
    ZX_DEBUG_ASSERT(ok());
    return reinterpret_cast<const ::fidl::WireResponse<
        ::fidl_test_requestflexibleenvelope::Protocol::
            RequestFlexibleResponseStrict>*>(bytes_);
  }

  ::fidl::WireResponse<::fidl_test_requestflexibleenvelope::Protocol::
                           RequestFlexibleResponseStrict>&
  value() {
    return *Unwrap();
  }
  const ::fidl::WireResponse<::fidl_test_requestflexibleenvelope::Protocol::
                                 RequestFlexibleResponseStrict>&
  value() const {
    return *Unwrap();
  }

  ::fidl::WireResponse<::fidl_test_requestflexibleenvelope::Protocol::
                           RequestFlexibleResponseStrict>*
  operator->() {
    return &value();
  }
  const ::fidl::WireResponse<::fidl_test_requestflexibleenvelope::Protocol::
                                 RequestFlexibleResponseStrict>*
  operator->() const {
    return &value();
  }

  ::fidl::WireResponse<::fidl_test_requestflexibleenvelope::Protocol::
                           RequestFlexibleResponseStrict>&
  operator*() {
    return value();
  }
  const ::fidl::WireResponse<::fidl_test_requestflexibleenvelope::Protocol::
                                 RequestFlexibleResponseStrict>&
  operator*() const {
    return value();
  }

 private:
  uint8_t* bytes_;
};

// Methods to make a sync FIDL call directly on an unowned channel or a
// const reference to a
// |fidl::ClientEnd<::fidl_test_requestflexibleenvelope::Protocol>|, avoiding
// setting up a client.
template <>
class ::fidl::internal::WireCaller<
    ::fidl_test_requestflexibleenvelope::Protocol>
    final {
 public:
  explicit WireCaller(
      ::fidl::UnownedClientEnd<::fidl_test_requestflexibleenvelope::Protocol>
          client_end)
      : client_end_(client_end) {}

  // Request is heap-allocated. Response is heap-allocated.
  static ::fidl::WireResult<::fidl_test_requestflexibleenvelope::Protocol::
                                RequestStrictResponseFlexible>
  RequestStrictResponseFlexible(
      ::fidl::UnownedClientEnd<::fidl_test_requestflexibleenvelope::Protocol>
          _client_end,
      ::fidl_test_requestflexibleenvelope::wire::StrictFoo s) {
    return ::fidl::WireResult<::fidl_test_requestflexibleenvelope::Protocol::
                                  RequestStrictResponseFlexible>(_client_end,
                                                                 s);
  }
  // Request is heap-allocated. Response is heap-allocated.
  ::fidl::WireResult<::fidl_test_requestflexibleenvelope::Protocol::
                         RequestStrictResponseFlexible>
  RequestStrictResponseFlexible(
      ::fidl_test_requestflexibleenvelope::wire::StrictFoo s) && {
    return ::fidl::WireResult<::fidl_test_requestflexibleenvelope::Protocol::
                                  RequestStrictResponseFlexible>(client_end_,
                                                                 s);
  }

  // Caller provides the backing storage for FIDL message via request and
  // response buffers.
  static ::fidl::WireUnownedResult<::fidl_test_requestflexibleenvelope::
                                       Protocol::RequestStrictResponseFlexible>
  RequestStrictResponseFlexible(
      ::fidl::UnownedClientEnd<::fidl_test_requestflexibleenvelope::Protocol>
          _client_end,
      ::fidl::BufferSpan _request_buffer,
      ::fidl_test_requestflexibleenvelope::wire::StrictFoo s,
      ::fidl::BufferSpan _response_buffer) {
    return ::fidl::WireUnownedResult<
        ::fidl_test_requestflexibleenvelope::Protocol::
            RequestStrictResponseFlexible>(
        _client_end, _request_buffer.data, _request_buffer.capacity, s,
        _response_buffer.data, _response_buffer.capacity);
  }
  // Caller provides the backing storage for FIDL message via request and
  // response buffers.
  ::fidl::WireUnownedResult<::fidl_test_requestflexibleenvelope::Protocol::
                                RequestStrictResponseFlexible>
  RequestStrictResponseFlexible(
      ::fidl::BufferSpan _request_buffer,
      ::fidl_test_requestflexibleenvelope::wire::StrictFoo s,
      ::fidl::BufferSpan _response_buffer) && {
    return ::fidl::WireUnownedResult<
        ::fidl_test_requestflexibleenvelope::Protocol::
            RequestStrictResponseFlexible>(
        client_end_, _request_buffer.data, _request_buffer.capacity, s,
        _response_buffer.data, _response_buffer.capacity);
  }

  // Request is heap-allocated. Response is heap-allocated.
  static ::fidl::WireResult<::fidl_test_requestflexibleenvelope::Protocol::
                                RequestFlexibleResponseStrict>
  RequestFlexibleResponseStrict(
      ::fidl::UnownedClientEnd<::fidl_test_requestflexibleenvelope::Protocol>
          _client_end,
      ::fidl_test_requestflexibleenvelope::wire::FlexibleFoo s) {
    return ::fidl::WireResult<::fidl_test_requestflexibleenvelope::Protocol::
                                  RequestFlexibleResponseStrict>(_client_end,
                                                                 s);
  }
  // Request is heap-allocated. Response is heap-allocated.
  ::fidl::WireResult<::fidl_test_requestflexibleenvelope::Protocol::
                         RequestFlexibleResponseStrict>
  RequestFlexibleResponseStrict(
      ::fidl_test_requestflexibleenvelope::wire::FlexibleFoo s) && {
    return ::fidl::WireResult<::fidl_test_requestflexibleenvelope::Protocol::
                                  RequestFlexibleResponseStrict>(client_end_,
                                                                 s);
  }

  // Caller provides the backing storage for FIDL message via request and
  // response buffers.
  static ::fidl::WireUnownedResult<::fidl_test_requestflexibleenvelope::
                                       Protocol::RequestFlexibleResponseStrict>
  RequestFlexibleResponseStrict(
      ::fidl::UnownedClientEnd<::fidl_test_requestflexibleenvelope::Protocol>
          _client_end,
      ::fidl::BufferSpan _request_buffer,
      ::fidl_test_requestflexibleenvelope::wire::FlexibleFoo s,
      ::fidl::BufferSpan _response_buffer) {
    return ::fidl::WireUnownedResult<
        ::fidl_test_requestflexibleenvelope::Protocol::
            RequestFlexibleResponseStrict>(
        _client_end, _request_buffer.data, _request_buffer.capacity, s,
        _response_buffer.data, _response_buffer.capacity);
  }
  // Caller provides the backing storage for FIDL message via request and
  // response buffers.
  ::fidl::WireUnownedResult<::fidl_test_requestflexibleenvelope::Protocol::
                                RequestFlexibleResponseStrict>
  RequestFlexibleResponseStrict(
      ::fidl::BufferSpan _request_buffer,
      ::fidl_test_requestflexibleenvelope::wire::FlexibleFoo s,
      ::fidl::BufferSpan _response_buffer) && {
    return ::fidl::WireUnownedResult<
        ::fidl_test_requestflexibleenvelope::Protocol::
            RequestFlexibleResponseStrict>(
        client_end_, _request_buffer.data, _request_buffer.capacity, s,
        _response_buffer.data, _response_buffer.capacity);
  }

 private:
  ::fidl::UnownedClientEnd<::fidl_test_requestflexibleenvelope::Protocol>
      client_end_;
};
template <>
class ::fidl::internal::WireEventHandlerInterface<
    ::fidl_test_requestflexibleenvelope::Protocol> {
 public:
  WireEventHandlerInterface() = default;
  virtual ~WireEventHandlerInterface() = default;
};

template <>
class ::fidl::WireAsyncEventHandler<
    ::fidl_test_requestflexibleenvelope::Protocol>
    : public ::fidl::internal::WireEventHandlerInterface<
          ::fidl_test_requestflexibleenvelope::Protocol>,
      public ::fidl::internal::AsyncEventHandler {
 public:
  WireAsyncEventHandler() = default;
};

template <>
class ::fidl::WireSyncEventHandler<
    ::fidl_test_requestflexibleenvelope::Protocol>
    : public ::fidl::internal::WireEventHandlerInterface<
          ::fidl_test_requestflexibleenvelope::Protocol> {
 public:
  WireSyncEventHandler() = default;

  // Method called when an unknown event is found. This methods gives the status
  // which, in this case, is returned by HandleOneEvent.
  virtual zx_status_t Unknown() = 0;

  // Handle all possible events defined in this protocol.
  // Blocks to consume exactly one message from the channel, then call the
  // corresponding virtual method.
  ::fidl::Result HandleOneEvent(
      ::fidl::UnownedClientEnd<::fidl_test_requestflexibleenvelope::Protocol>
          client_end);
};
template <>
class ::fidl::WireSyncClient<::fidl_test_requestflexibleenvelope::Protocol>
    final {
 public:
  WireSyncClient() = default;

  explicit WireSyncClient(
      ::fidl::ClientEnd<::fidl_test_requestflexibleenvelope::Protocol>
          client_end)
      : client_end_(std::move(client_end)) {}

  ~WireSyncClient() = default;
  WireSyncClient(WireSyncClient&&) = default;
  WireSyncClient& operator=(WireSyncClient&&) = default;

  const ::fidl::ClientEnd<::fidl_test_requestflexibleenvelope::Protocol>&
  client_end() const {
    return client_end_;
  }
  ::fidl::ClientEnd<::fidl_test_requestflexibleenvelope::Protocol>&
  client_end() {
    return client_end_;
  }

  const ::zx::channel& channel() const { return client_end_.channel(); }
  ::zx::channel* mutable_channel() { return &client_end_.channel(); }

  // Request is heap-allocated. Response is heap-allocated.
  ::fidl::WireResult<::fidl_test_requestflexibleenvelope::Protocol::
                         RequestStrictResponseFlexible>
  RequestStrictResponseFlexible(
      ::fidl_test_requestflexibleenvelope::wire::StrictFoo s) {
    return ::fidl::WireResult<::fidl_test_requestflexibleenvelope::Protocol::
                                  RequestStrictResponseFlexible>(
        this->client_end(), s);
  }

  // Caller provides the backing storage for FIDL message via request and
  // response buffers.
  ::fidl::WireUnownedResult<::fidl_test_requestflexibleenvelope::Protocol::
                                RequestStrictResponseFlexible>
  RequestStrictResponseFlexible(
      ::fidl::BufferSpan _request_buffer,
      ::fidl_test_requestflexibleenvelope::wire::StrictFoo s,
      ::fidl::BufferSpan _response_buffer) {
    return ::fidl::WireUnownedResult<
        ::fidl_test_requestflexibleenvelope::Protocol::
            RequestStrictResponseFlexible>(
        this->client_end(), _request_buffer.data, _request_buffer.capacity, s,
        _response_buffer.data, _response_buffer.capacity);
  }

  // Request is heap-allocated. Response is heap-allocated.
  ::fidl::WireResult<::fidl_test_requestflexibleenvelope::Protocol::
                         RequestFlexibleResponseStrict>
  RequestFlexibleResponseStrict(
      ::fidl_test_requestflexibleenvelope::wire::FlexibleFoo s) {
    return ::fidl::WireResult<::fidl_test_requestflexibleenvelope::Protocol::
                                  RequestFlexibleResponseStrict>(
        this->client_end(), s);
  }

  // Caller provides the backing storage for FIDL message via request and
  // response buffers.
  ::fidl::WireUnownedResult<::fidl_test_requestflexibleenvelope::Protocol::
                                RequestFlexibleResponseStrict>
  RequestFlexibleResponseStrict(
      ::fidl::BufferSpan _request_buffer,
      ::fidl_test_requestflexibleenvelope::wire::FlexibleFoo s,
      ::fidl::BufferSpan _response_buffer) {
    return ::fidl::WireUnownedResult<
        ::fidl_test_requestflexibleenvelope::Protocol::
            RequestFlexibleResponseStrict>(
        this->client_end(), _request_buffer.data, _request_buffer.capacity, s,
        _response_buffer.data, _response_buffer.capacity);
  }

 private:
  ::fidl::ClientEnd<::fidl_test_requestflexibleenvelope::Protocol> client_end_;
};

template <>
class ::fidl::internal::WireCompleterBase<
    ::fidl_test_requestflexibleenvelope::Protocol::
        RequestStrictResponseFlexible> : public ::fidl::CompleterBase {
 public:
  // In the following methods, the return value indicates internal errors during
  // the reply, such as encoding or writing to the transport.
  // Note that any error will automatically lead to the destruction of the
  // binding, after which the |on_unbound| callback will be triggered with a
  // detailed reason.
  //
  // See //zircon/system/ulib/fidl/include/lib/fidl/llcpp/server.h.
  //
  // Because the reply status is identical to the unbinding status, it can be
  // safely ignored.
  ::fidl::Result Reply(
      ::fidl_test_requestflexibleenvelope::wire::FlexibleFoo f);
  ::fidl::Result Reply(
      ::fidl::BufferSpan _buffer,
      ::fidl_test_requestflexibleenvelope::wire::FlexibleFoo f);

 protected:
  using ::fidl::CompleterBase::CompleterBase;
};

template <>
struct ::fidl::internal::WireMethodTypes<
    ::fidl_test_requestflexibleenvelope::Protocol::
        RequestStrictResponseFlexible> {
  using Completer = fidl::Completer<::fidl::internal::WireCompleterBase<
      ::fidl_test_requestflexibleenvelope::Protocol::
          RequestStrictResponseFlexible>>;
};

template <>
class ::fidl::internal::WireCompleterBase<
    ::fidl_test_requestflexibleenvelope::Protocol::
        RequestFlexibleResponseStrict> : public ::fidl::CompleterBase {
 public:
  // In the following methods, the return value indicates internal errors during
  // the reply, such as encoding or writing to the transport.
  // Note that any error will automatically lead to the destruction of the
  // binding, after which the |on_unbound| callback will be triggered with a
  // detailed reason.
  //
  // See //zircon/system/ulib/fidl/include/lib/fidl/llcpp/server.h.
  //
  // Because the reply status is identical to the unbinding status, it can be
  // safely ignored.
  ::fidl::Result Reply(::fidl_test_requestflexibleenvelope::wire::StrictFoo f);
  ::fidl::Result Reply(::fidl::BufferSpan _buffer,
                       ::fidl_test_requestflexibleenvelope::wire::StrictFoo f);

 protected:
  using ::fidl::CompleterBase::CompleterBase;
};

template <>
struct ::fidl::internal::WireMethodTypes<
    ::fidl_test_requestflexibleenvelope::Protocol::
        RequestFlexibleResponseStrict> {
  using Completer = fidl::Completer<::fidl::internal::WireCompleterBase<
      ::fidl_test_requestflexibleenvelope::Protocol::
          RequestFlexibleResponseStrict>>;
};

// Pure-virtual interface to be implemented by a server.
// This interface uses typed channels (i.e. |fidl::ClientEnd<SomeProtocol>|
// and |fidl::ServerEnd<SomeProtocol>|).
template <>
class ::fidl::WireServer<::fidl_test_requestflexibleenvelope::Protocol>
    : public ::fidl::internal::IncomingMessageDispatcher {
 public:
  WireServer() = default;
  virtual ~WireServer() = default;

  // The FIDL protocol type that is implemented by this server.
  using _EnclosingProtocol = ::fidl_test_requestflexibleenvelope::Protocol;

  using RequestStrictResponseFlexibleCompleter =
      ::fidl::internal::WireCompleter<
          ::fidl_test_requestflexibleenvelope::Protocol::
              RequestStrictResponseFlexible>;
  using RequestStrictResponseFlexibleRequestView =
      ::fidl::internal::WireRequestView<
          ::fidl_test_requestflexibleenvelope::Protocol::
              RequestStrictResponseFlexible>;

  virtual void RequestStrictResponseFlexible(
      RequestStrictResponseFlexibleRequestView request,
      RequestStrictResponseFlexibleCompleter::Sync& _completer) = 0;

  using RequestFlexibleResponseStrictCompleter =
      ::fidl::internal::WireCompleter<
          ::fidl_test_requestflexibleenvelope::Protocol::
              RequestFlexibleResponseStrict>;
  using RequestFlexibleResponseStrictRequestView =
      ::fidl::internal::WireRequestView<
          ::fidl_test_requestflexibleenvelope::Protocol::
              RequestFlexibleResponseStrict>;

  virtual void RequestFlexibleResponseStrict(
      RequestFlexibleResponseStrictRequestView request,
      RequestFlexibleResponseStrictCompleter::Sync& _completer) = 0;

 private:
  ::fidl::DispatchResult dispatch_message(::fidl::IncomingMessage&& msg,
                                          ::fidl::Transaction* txn) final;
};
#endif  // __Fuchsia__

namespace fidl {

template <>
struct IsFidlType<::fidl_test_requestflexibleenvelope::wire::StrictFoo>
    : public std::true_type {};
template <>
struct IsUnion<::fidl_test_requestflexibleenvelope::wire::StrictFoo>
    : public std::true_type {};
static_assert(std::is_standard_layout_v<
              ::fidl_test_requestflexibleenvelope::wire::StrictFoo>);

template <>
struct IsFidlType<::fidl_test_requestflexibleenvelope::wire::FlexibleFoo>
    : public std::true_type {};
template <>
struct IsUnion<::fidl_test_requestflexibleenvelope::wire::FlexibleFoo>
    : public std::true_type {};
static_assert(std::is_standard_layout_v<
              ::fidl_test_requestflexibleenvelope::wire::FlexibleFoo>);

template <>
struct IsFidlType<
    ::fidl::WireRequest<::fidl_test_requestflexibleenvelope::Protocol::
                            RequestStrictResponseFlexible>>
    : public std::true_type {};
template <>
struct IsFidlMessage<
    ::fidl::WireRequest<::fidl_test_requestflexibleenvelope::Protocol::
                            RequestStrictResponseFlexible>>
    : public std::true_type {};
static_assert(
    sizeof(::fidl::WireRequest<::fidl_test_requestflexibleenvelope::Protocol::
                                   RequestStrictResponseFlexible>) ==
    ::fidl::WireRequest<::fidl_test_requestflexibleenvelope::Protocol::
                            RequestStrictResponseFlexible>::PrimarySize);
static_assert(
    offsetof(::fidl::WireRequest<::fidl_test_requestflexibleenvelope::Protocol::
                                     RequestStrictResponseFlexible>,
             s) == 16);

template <>
struct IsFidlType<
    ::fidl::WireResponse<::fidl_test_requestflexibleenvelope::Protocol::
                             RequestStrictResponseFlexible>>
    : public std::true_type {};
template <>
struct IsFidlMessage<
    ::fidl::WireResponse<::fidl_test_requestflexibleenvelope::Protocol::
                             RequestStrictResponseFlexible>>
    : public std::true_type {};
static_assert(
    sizeof(::fidl::WireResponse<::fidl_test_requestflexibleenvelope::Protocol::
                                    RequestStrictResponseFlexible>) ==
    ::fidl::WireResponse<::fidl_test_requestflexibleenvelope::Protocol::
                             RequestStrictResponseFlexible>::PrimarySize);
static_assert(
    offsetof(::fidl::WireResponse<::fidl_test_requestflexibleenvelope::
                                      Protocol::RequestStrictResponseFlexible>,
             f) == 16);

template <>
struct IsFidlType<
    ::fidl::WireRequest<::fidl_test_requestflexibleenvelope::Protocol::
                            RequestFlexibleResponseStrict>>
    : public std::true_type {};
template <>
struct IsFidlMessage<
    ::fidl::WireRequest<::fidl_test_requestflexibleenvelope::Protocol::
                            RequestFlexibleResponseStrict>>
    : public std::true_type {};
static_assert(
    sizeof(::fidl::WireRequest<::fidl_test_requestflexibleenvelope::Protocol::
                                   RequestFlexibleResponseStrict>) ==
    ::fidl::WireRequest<::fidl_test_requestflexibleenvelope::Protocol::
                            RequestFlexibleResponseStrict>::PrimarySize);
static_assert(
    offsetof(::fidl::WireRequest<::fidl_test_requestflexibleenvelope::Protocol::
                                     RequestFlexibleResponseStrict>,
             s) == 16);

template <>
struct IsFidlType<
    ::fidl::WireResponse<::fidl_test_requestflexibleenvelope::Protocol::
                             RequestFlexibleResponseStrict>>
    : public std::true_type {};
template <>
struct IsFidlMessage<
    ::fidl::WireResponse<::fidl_test_requestflexibleenvelope::Protocol::
                             RequestFlexibleResponseStrict>>
    : public std::true_type {};
static_assert(
    sizeof(::fidl::WireResponse<::fidl_test_requestflexibleenvelope::Protocol::
                                    RequestFlexibleResponseStrict>) ==
    ::fidl::WireResponse<::fidl_test_requestflexibleenvelope::Protocol::
                             RequestFlexibleResponseStrict>::PrimarySize);
static_assert(
    offsetof(::fidl::WireResponse<::fidl_test_requestflexibleenvelope::
                                      Protocol::RequestFlexibleResponseStrict>,
             f) == 16);
}  // namespace fidl
#ifdef __Fuchsia__

template <>
class ::fidl::WireResponseContext<::fidl_test_requestflexibleenvelope::
                                      Protocol::RequestStrictResponseFlexible>
    : public ::fidl::internal::ResponseContext {
 public:
  WireResponseContext();

  virtual void OnResult(::fidl::WireUnownedResult<
                        ::fidl_test_requestflexibleenvelope::Protocol::
                            RequestStrictResponseFlexible>&& result) = 0;

 private:
  ::cpp17::optional<::fidl::UnbindInfo> OnRawResult(
      ::fidl::IncomingMessage&& msg) override;
};
#endif  // __Fuchsia__

#ifdef __Fuchsia__

template <>
class ::fidl::WireResponseContext<::fidl_test_requestflexibleenvelope::
                                      Protocol::RequestFlexibleResponseStrict>
    : public ::fidl::internal::ResponseContext {
 public:
  WireResponseContext();

  virtual void OnResult(::fidl::WireUnownedResult<
                        ::fidl_test_requestflexibleenvelope::Protocol::
                            RequestFlexibleResponseStrict>&& result) = 0;

 private:
  ::cpp17::optional<::fidl::UnbindInfo> OnRawResult(
      ::fidl::IncomingMessage&& msg) override;
};
#endif  // __Fuchsia__

#ifdef __Fuchsia__

template <>
class ::fidl::internal::WireClientImpl<
    ::fidl_test_requestflexibleenvelope::Protocol>
    final : public ::fidl::internal::ClientBase {
 public:
  // Asynchronous variant of |Protocol.RequestStrictResponseFlexible()|.
  // The request and callback are allocated on the heap.
  void RequestStrictResponseFlexible(
      ::fidl_test_requestflexibleenvelope::wire::StrictFoo s,
      ::fidl::WireClientCallback<::fidl_test_requestflexibleenvelope::Protocol::
                                     RequestStrictResponseFlexible>
          _cb);

  void RequestStrictResponseFlexible(
      ::fidl_test_requestflexibleenvelope::wire::StrictFoo s,
      ::fit::callback<void(
          ::fidl::WireResponse<::fidl_test_requestflexibleenvelope::Protocol::
                                   RequestStrictResponseFlexible>* response)>
          _cb);

  // Asynchronous variant of |Protocol.RequestStrictResponseFlexible()|.
  // Caller provides the backing storage for FIDL message via request buffer.
  // Ownership of |_context| is given unsafely to the binding until |OnError|
  // or |OnReply| are called on it.
  void RequestStrictResponseFlexible(
      ::fidl::BufferSpan _request_buffer,
      ::fidl_test_requestflexibleenvelope::wire::StrictFoo s,
      ::fidl::WireResponseContext<::fidl_test_requestflexibleenvelope::
                                      Protocol::RequestStrictResponseFlexible>*
          _context);

  // Synchronous variant of |Protocol.RequestStrictResponseFlexible()|.
  // Request is heap-allocated. Response is heap-allocated.
  ::fidl::WireResult<::fidl_test_requestflexibleenvelope::Protocol::
                         RequestStrictResponseFlexible>
  RequestStrictResponseFlexible_Sync(
      ::fidl_test_requestflexibleenvelope::wire::StrictFoo s);

  // Synchronous variant of |Protocol.RequestStrictResponseFlexible()|.
  // Caller provides the backing storage for FIDL message via request and
  // response buffers.
  ::fidl::WireUnownedResult<::fidl_test_requestflexibleenvelope::Protocol::
                                RequestStrictResponseFlexible>
  RequestStrictResponseFlexible_Sync(
      ::fidl::BufferSpan _request_buffer,
      ::fidl_test_requestflexibleenvelope::wire::StrictFoo s,
      ::fidl::BufferSpan _response_buffer);

  // Asynchronous variant of |Protocol.RequestFlexibleResponseStrict()|.
  // The request and callback are allocated on the heap.
  void RequestFlexibleResponseStrict(
      ::fidl_test_requestflexibleenvelope::wire::FlexibleFoo s,
      ::fidl::WireClientCallback<::fidl_test_requestflexibleenvelope::Protocol::
                                     RequestFlexibleResponseStrict>
          _cb);

  void RequestFlexibleResponseStrict(
      ::fidl_test_requestflexibleenvelope::wire::FlexibleFoo s,
      ::fit::callback<void(
          ::fidl::WireResponse<::fidl_test_requestflexibleenvelope::Protocol::
                                   RequestFlexibleResponseStrict>* response)>
          _cb);

  // Asynchronous variant of |Protocol.RequestFlexibleResponseStrict()|.
  // Caller provides the backing storage for FIDL message via request buffer.
  // Ownership of |_context| is given unsafely to the binding until |OnError|
  // or |OnReply| are called on it.
  void RequestFlexibleResponseStrict(
      ::fidl::BufferSpan _request_buffer,
      ::fidl_test_requestflexibleenvelope::wire::FlexibleFoo s,
      ::fidl::WireResponseContext<::fidl_test_requestflexibleenvelope::
                                      Protocol::RequestFlexibleResponseStrict>*
          _context);

  // Synchronous variant of |Protocol.RequestFlexibleResponseStrict()|.
  // Request is heap-allocated. Response is heap-allocated.
  ::fidl::WireResult<::fidl_test_requestflexibleenvelope::Protocol::
                         RequestFlexibleResponseStrict>
  RequestFlexibleResponseStrict_Sync(
      ::fidl_test_requestflexibleenvelope::wire::FlexibleFoo s);

  // Synchronous variant of |Protocol.RequestFlexibleResponseStrict()|.
  // Caller provides the backing storage for FIDL message via request and
  // response buffers.
  ::fidl::WireUnownedResult<::fidl_test_requestflexibleenvelope::Protocol::
                                RequestFlexibleResponseStrict>
  RequestFlexibleResponseStrict_Sync(
      ::fidl::BufferSpan _request_buffer,
      ::fidl_test_requestflexibleenvelope::wire::FlexibleFoo s,
      ::fidl::BufferSpan _response_buffer);

  WireClientImpl() = default;

 private:
  std::optional<::fidl::UnbindInfo> DispatchEvent(
      ::fidl::IncomingMessage& msg,
      ::fidl::internal::AsyncEventHandler* maybe_event_handler) override;
};
#endif  // __Fuchsia__

#ifdef __Fuchsia__
// |EventSender| owns a server endpoint of a channel speaking
// the Protocol protocol, and can send events in that protocol.
template <>
class ::fidl::WireEventSender<::fidl_test_requestflexibleenvelope::Protocol> {
 public:
  // Constructs an event sender with an invalid channel.
  WireEventSender() = default;

  explicit WireEventSender(
      ::fidl::ServerEnd<::fidl_test_requestflexibleenvelope::Protocol>
          server_end)
      : server_end_(std::move(server_end)) {}

  // The underlying server channel endpoint, which may be replaced at run-time.
  const ::fidl::ServerEnd<::fidl_test_requestflexibleenvelope::Protocol>&
  server_end() const {
    return server_end_;
  }
  ::fidl::ServerEnd<::fidl_test_requestflexibleenvelope::Protocol>&
  server_end() {
    return server_end_;
  }

  const ::zx::channel& channel() const { return server_end_.channel(); }
  ::zx::channel& channel() { return server_end_.channel(); }

  // Whether the underlying channel is valid.
  bool is_valid() const { return server_end_.is_valid(); }

 private:
  ::fidl::ServerEnd<::fidl_test_requestflexibleenvelope::Protocol> server_end_;
};

template <>
class ::fidl::internal::WireWeakEventSender<
    ::fidl_test_requestflexibleenvelope::Protocol> {
 public:
 private:
  friend class ::fidl::ServerBindingRef<
      ::fidl_test_requestflexibleenvelope::Protocol>;

  explicit WireWeakEventSender(
      std::weak_ptr<::fidl::internal::AsyncServerBinding<
          ::fidl_test_requestflexibleenvelope::Protocol>>
          binding)
      : binding_(std::move(binding)) {}

  std::weak_ptr<::fidl::internal::AsyncServerBinding<
      ::fidl_test_requestflexibleenvelope::Protocol>>
      binding_;
};
#endif  // __Fuchsia__
