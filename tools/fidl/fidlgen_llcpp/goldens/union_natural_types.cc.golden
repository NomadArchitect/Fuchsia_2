// WARNING: This file is machine generated by fidlgen.

#include <fidl/test.union/cpp/natural_types.h>

#ifdef __Fuchsia__

void ::test_union::StructWithNullableXUnion::EncodeWithoutValidating(
    ::fidl::Encoder& encoder, size_t offset) {
  encoder.Alloc(
      ::fidl::EncodingInlineSize<::test_union::StructWithNullableXUnion,
                                 ::fidl::Encoder>(&encoder));
  ::fidl::CodingTraits<::test_union::StructWithNullableXUnion>::Encode(
      &encoder, this, offset);
}

::test_union::StructWithNullableXUnion::StructWithNullableXUnion(
    ::fidl::Decoder& decoder)
    : storage_(
          {::fidl::DecodeAs<::std::unique_ptr<::test_union::OlderSimpleUnion>>(
              &decoder, 0)}) {}
#endif  // __Fuchsia__

::test_union::StructWithNullableXUnion::Storage
test_union::StructWithNullableXUnion::CloneStorage() const {
  return Storage{::fidl::internal::NaturalClone(storage_.x1)};
}
#ifdef __Fuchsia__

void ::test_union::
    TestProtocolStrictXUnionHenceResponseMayBeStackAllocatedTopResponse::
        EncodeWithoutValidating(::fidl::Encoder& encoder, size_t offset) {
  encoder.Alloc(
      ::fidl::EncodingInlineSize<
          ::test_union::
              TestProtocolStrictXUnionHenceResponseMayBeStackAllocatedTopResponse,
          ::fidl::Encoder>(&encoder));
  ::fidl::CodingTraits<
      ::test_union::
          TestProtocolStrictXUnionHenceResponseMayBeStackAllocatedTopResponse>::
      Encode(&encoder, this, offset);
}

::test_union::
    TestProtocolStrictXUnionHenceResponseMayBeStackAllocatedTopResponse::
        TestProtocolStrictXUnionHenceResponseMayBeStackAllocatedTopResponse(
            ::fidl::Decoder& decoder)
    : storage_(
          {::fidl::DecodeAs<::test_union::StrictBoundedXUnion>(&decoder, 0)}) {}
#endif  // __Fuchsia__

::test_union::
    TestProtocolStrictXUnionHenceResponseMayBeStackAllocatedTopResponse::Storage
    test_union::
        TestProtocolStrictXUnionHenceResponseMayBeStackAllocatedTopResponse::
            CloneStorage() const {
  return Storage{::fidl::internal::NaturalClone(storage_.xu)};
}
#ifdef __Fuchsia__

void ::test_union::Pizza::EncodeWithoutValidating(::fidl::Encoder& encoder,
                                                  size_t offset) {
  encoder.Alloc(
      ::fidl::EncodingInlineSize<::test_union::Pizza, ::fidl::Encoder>(
          &encoder));
  ::fidl::CodingTraits<::test_union::Pizza>::Encode(&encoder, this, offset);
}

::test_union::Pizza::Pizza(::fidl::Decoder& decoder)
    : storage_({::fidl::DecodeAs<::std::vector<::std::string>>(&decoder, 0)}) {}
#endif  // __Fuchsia__

::test_union::Pizza::Storage test_union::Pizza::CloneStorage() const {
  return Storage{::fidl::internal::NaturalClone(storage_.toppings)};
}
#ifdef __Fuchsia__

void ::test_union::Pasta::EncodeWithoutValidating(::fidl::Encoder& encoder,
                                                  size_t offset) {
  encoder.Alloc(
      ::fidl::EncodingInlineSize<::test_union::Pasta, ::fidl::Encoder>(
          &encoder));
  ::fidl::CodingTraits<::test_union::Pasta>::Encode(&encoder, this, offset);
}

::test_union::Pasta::Pasta(::fidl::Decoder& decoder)
    : storage_({::fidl::DecodeAs<::std::string>(&decoder, 0)}) {}
#endif  // __Fuchsia__

::test_union::Pasta::Storage test_union::Pasta::CloneStorage() const {
  return Storage{::fidl::internal::NaturalClone(storage_.sauce)};
}
#ifdef __Fuchsia__

void ::test_union::
    TestProtocolFlexibleXUnionHenceResponseMustBeHeapAllocatedTopResponse::
        EncodeWithoutValidating(::fidl::Encoder& encoder, size_t offset) {
  encoder.Alloc(
      ::fidl::EncodingInlineSize<
          ::test_union::
              TestProtocolFlexibleXUnionHenceResponseMustBeHeapAllocatedTopResponse,
          ::fidl::Encoder>(&encoder));
  ::fidl::CodingTraits<
      ::test_union::
          TestProtocolFlexibleXUnionHenceResponseMustBeHeapAllocatedTopResponse>::
      Encode(&encoder, this, offset);
}

::test_union::
    TestProtocolFlexibleXUnionHenceResponseMustBeHeapAllocatedTopResponse::
        TestProtocolFlexibleXUnionHenceResponseMustBeHeapAllocatedTopResponse(
            ::fidl::Decoder& decoder)
    : storage_(
          {::fidl::DecodeAs<::test_union::OlderSimpleUnion>(&decoder, 0)}) {}
#endif  // __Fuchsia__

::test_union::
    TestProtocolFlexibleXUnionHenceResponseMustBeHeapAllocatedTopResponse::Storage
    test_union::
        TestProtocolFlexibleXUnionHenceResponseMustBeHeapAllocatedTopResponse::
            CloneStorage() const {
  return Storage{::fidl::internal::NaturalClone(storage_.xu)};
}
#ifdef __Fuchsia__

void ::test_union::NullableUnionStruct::EncodeWithoutValidating(
    ::fidl::Encoder& encoder, size_t offset) {
  encoder.Alloc(::fidl::EncodingInlineSize<::test_union::NullableUnionStruct,
                                           ::fidl::Encoder>(&encoder));
  ::fidl::CodingTraits<::test_union::NullableUnionStruct>::Encode(&encoder,
                                                                  this, offset);
}

::test_union::NullableUnionStruct::NullableUnionStruct(::fidl::Decoder& decoder)
    : storage_({::fidl::DecodeAs<::std::unique_ptr<::test_union::Union>>(
          &decoder, 0)}) {}
#endif  // __Fuchsia__

::test_union::NullableUnionStruct::Storage
test_union::NullableUnionStruct::CloneStorage() const {
  return Storage{::fidl::internal::NaturalClone(storage_.the_union)};
}
#ifdef __Fuchsia__

void ::test_union::UnionSandwich::EncodeWithoutValidating(
    ::fidl::Encoder& encoder, size_t offset) {
  encoder.Alloc(
      ::fidl::EncodingInlineSize<::test_union::UnionSandwich, ::fidl::Encoder>(
          &encoder));
  ::fidl::CodingTraits<::test_union::UnionSandwich>::Encode(&encoder, this,
                                                            offset);
}

::test_union::UnionSandwich::UnionSandwich(::fidl::Decoder& decoder)
    : storage_({::fidl::DecodeAs<uint32_t>(&decoder, 0),
                ::fidl::DecodeAs<::test_union::ExplicitXUnion>(&decoder, 8),
                ::fidl::DecodeAs<uint32_t>(&decoder, 24)}) {}
#endif  // __Fuchsia__

::test_union::UnionSandwich::Storage test_union::UnionSandwich::CloneStorage()
    const {
  return Storage{::fidl::internal::NaturalClone(storage_.a),
                 ::fidl::internal::NaturalClone(storage_.u),
                 ::fidl::internal::NaturalClone(storage_.b)};
}
#ifdef __Fuchsia__

void ::test_union::Empty::EncodeWithoutValidating(::fidl::Encoder& encoder,
                                                  size_t offset) {
  encoder.Alloc(
      ::fidl::EncodingInlineSize<::test_union::Empty, ::fidl::Encoder>(
          &encoder));
  ::fidl::CodingTraits<::test_union::Empty>::Encode(&encoder, this, offset);
}

::test_union::Empty::Empty(::fidl::Decoder& decoder)
    : storage_({::fidl::DecodeAs<uint8_t>(&decoder, 0)}) {}
#endif  // __Fuchsia__

::test_union::Empty::Storage test_union::Empty::CloneStorage() const {
  return Storage{::fidl::internal::NaturalClone(storage_.__reserved)};
}

std::shared_ptr<::test_union::UnionWithAttributes::Storage>
test_union::UnionWithAttributes::CloneStorage() const {
  const Storage& storage = *storage_;
  switch (storage_->index()) {
    case 1:
      return std::make_shared<Storage>(
          std::in_place_index<1>,
          ::fidl::internal::NaturalClone(std::get<1>(storage)));
    default:
      return std::make_shared<Storage>();
  }
}

std::shared_ptr<::test_union::Union::Storage> test_union::Union::CloneStorage()
    const {
  const Storage& storage = *storage_;
  switch (storage_->index()) {
    case 1:
      return std::make_shared<Storage>(
          std::in_place_index<1>,
          ::fidl::internal::NaturalClone(std::get<1>(storage)));
    case 2:
      return std::make_shared<Storage>(
          std::in_place_index<2>,
          ::fidl::internal::NaturalClone(std::get<2>(storage)));
    case 3:
      return std::make_shared<Storage>(
          std::in_place_index<3>,
          ::fidl::internal::NaturalClone(std::get<3>(storage)));
    default:
      return std::make_shared<Storage>();
  }
}

std::shared_ptr<::test_union::StrictUnion::Storage>
test_union::StrictUnion::CloneStorage() const {
  const Storage& storage = *storage_;
  switch (storage_->index()) {
    case 1:
      return std::make_shared<Storage>(
          std::in_place_index<1>,
          ::fidl::internal::NaturalClone(std::get<1>(storage)));
    case 2:
      return std::make_shared<Storage>(
          std::in_place_index<2>,
          ::fidl::internal::NaturalClone(std::get<2>(storage)));
    case 3:
      return std::make_shared<Storage>(
          std::in_place_index<3>,
          ::fidl::internal::NaturalClone(std::get<3>(storage)));
    default:
      return std::make_shared<Storage>();
  }
}

std::shared_ptr<::test_union::StrictSimpleXUnion::Storage>
test_union::StrictSimpleXUnion::CloneStorage() const {
  const Storage& storage = *storage_;
  switch (storage_->index()) {
    case 1:
      return std::make_shared<Storage>(
          std::in_place_index<1>,
          ::fidl::internal::NaturalClone(std::get<1>(storage)));
    case 2:
      return std::make_shared<Storage>(
          std::in_place_index<2>,
          ::fidl::internal::NaturalClone(std::get<2>(storage)));
    case 3:
      return std::make_shared<Storage>(
          std::in_place_index<3>,
          ::fidl::internal::NaturalClone(std::get<3>(storage)));
    default:
      return std::make_shared<Storage>();
  }
}

std::shared_ptr<::test_union::StrictFoo::Storage>
test_union::StrictFoo::CloneStorage() const {
  const Storage& storage = *storage_;
  switch (storage_->index()) {
    case 1:
      return std::make_shared<Storage>(
          std::in_place_index<1>,
          ::fidl::internal::NaturalClone(std::get<1>(storage)));
    case 2:
      return std::make_shared<Storage>(
          std::in_place_index<2>,
          ::fidl::internal::NaturalClone(std::get<2>(storage)));
    default:
      return std::make_shared<Storage>();
  }
}

std::shared_ptr<::test_union::StrictBoundedXUnion::Storage>
test_union::StrictBoundedXUnion::CloneStorage() const {
  const Storage& storage = *storage_;
  switch (storage_->index()) {
    case 1:
      return std::make_shared<Storage>(
          std::in_place_index<1>,
          ::fidl::internal::NaturalClone(std::get<1>(storage)));
    default:
      return std::make_shared<Storage>();
  }
}

std::shared_ptr<::test_union::ReverseOrdinalUnion::Storage>
test_union::ReverseOrdinalUnion::CloneStorage() const {
  const Storage& storage = *storage_;
  switch (storage_->index()) {
    case 1:
      return std::make_shared<Storage>(
          std::in_place_index<1>,
          ::fidl::internal::NaturalClone(std::get<1>(storage)));
    case 2:
      return std::make_shared<Storage>(
          std::in_place_index<2>,
          ::fidl::internal::NaturalClone(std::get<2>(storage)));
    default:
      return std::make_shared<Storage>();
  }
}

std::shared_ptr<::test_union::StrictPizzaOrPasta::Storage>
test_union::StrictPizzaOrPasta::CloneStorage() const {
  const Storage& storage = *storage_;
  switch (storage_->index()) {
    case 1:
      return std::make_shared<Storage>(
          std::in_place_index<1>,
          ::fidl::internal::NaturalClone(std::get<1>(storage)));
    case 2:
      return std::make_shared<Storage>(
          std::in_place_index<2>,
          ::fidl::internal::NaturalClone(std::get<2>(storage)));
    default:
      return std::make_shared<Storage>();
  }
}

std::shared_ptr<::test_union::PizzaOrPasta::Storage>
test_union::PizzaOrPasta::CloneStorage() const {
  const Storage& storage = *storage_;
  switch (storage_->index()) {
    case 1:
      return std::make_shared<Storage>(
          std::in_place_index<1>,
          ::fidl::internal::NaturalClone(std::get<1>(storage)));
    case 2:
      return std::make_shared<Storage>(
          std::in_place_index<2>,
          ::fidl::internal::NaturalClone(std::get<2>(storage)));
    default:
      return std::make_shared<Storage>();
  }
}

std::shared_ptr<::test_union::FlexiblePizzaOrPasta::Storage>
test_union::FlexiblePizzaOrPasta::CloneStorage() const {
  const Storage& storage = *storage_;
  switch (storage_->index()) {
    case 1:
      return std::make_shared<Storage>(
          std::in_place_index<1>,
          ::fidl::internal::NaturalClone(std::get<1>(storage)));
    case 2:
      return std::make_shared<Storage>(
          std::in_place_index<2>,
          ::fidl::internal::NaturalClone(std::get<2>(storage)));
    default:
      return std::make_shared<Storage>();
  }
}

std::shared_ptr<::test_union::ExplicitPizzaOrPasta::Storage>
test_union::ExplicitPizzaOrPasta::CloneStorage() const {
  const Storage& storage = *storage_;
  switch (storage_->index()) {
    case 1:
      return std::make_shared<Storage>(
          std::in_place_index<1>,
          ::fidl::internal::NaturalClone(std::get<1>(storage)));
    case 2:
      return std::make_shared<Storage>(
          std::in_place_index<2>,
          ::fidl::internal::NaturalClone(std::get<2>(storage)));
    default:
      return std::make_shared<Storage>();
  }
}

std::shared_ptr<::test_union::OlderSimpleUnion::Storage>
test_union::OlderSimpleUnion::CloneStorage() const {
  const Storage& storage = *storage_;
  switch (storage_->index()) {
    case 1:
      return std::make_shared<Storage>(
          std::in_place_index<1>,
          ::fidl::internal::NaturalClone(std::get<1>(storage)));
    case 2:
      return std::make_shared<Storage>(
          std::in_place_index<2>,
          ::fidl::internal::NaturalClone(std::get<2>(storage)));
    default:
      return std::make_shared<Storage>();
  }
}

std::shared_ptr<::test_union::NewerSimpleUnion::Storage>
test_union::NewerSimpleUnion::CloneStorage() const {
  const Storage& storage = *storage_;
  switch (storage_->index()) {
    case 1:
      return std::make_shared<Storage>(
          std::in_place_index<1>,
          ::fidl::internal::NaturalClone(std::get<1>(storage)));
    case 2:
      return std::make_shared<Storage>(
          std::in_place_index<2>,
          ::fidl::internal::NaturalClone(std::get<2>(storage)));
    case 3:
      return std::make_shared<Storage>(
          std::in_place_index<3>,
          ::fidl::internal::NaturalClone(std::get<3>(storage)));
    default:
      return std::make_shared<Storage>();
  }
}

std::shared_ptr<::test_union::FlexibleUnion::Storage>
test_union::FlexibleUnion::CloneStorage() const {
  const Storage& storage = *storage_;
  switch (storage_->index()) {
    case 1:
      return std::make_shared<Storage>(
          std::in_place_index<1>,
          ::fidl::internal::NaturalClone(std::get<1>(storage)));
    case 2:
      return std::make_shared<Storage>(
          std::in_place_index<2>,
          ::fidl::internal::NaturalClone(std::get<2>(storage)));
    case 3:
      return std::make_shared<Storage>(
          std::in_place_index<3>,
          ::fidl::internal::NaturalClone(std::get<3>(storage)));
    default:
      return std::make_shared<Storage>();
  }
}

std::shared_ptr<::test_union::FlexibleFoo::Storage>
test_union::FlexibleFoo::CloneStorage() const {
  const Storage& storage = *storage_;
  switch (storage_->index()) {
    case 1:
      return std::make_shared<Storage>(
          std::in_place_index<1>,
          ::fidl::internal::NaturalClone(std::get<1>(storage)));
    case 2:
      return std::make_shared<Storage>(
          std::in_place_index<2>,
          ::fidl::internal::NaturalClone(std::get<2>(storage)));
    default:
      return std::make_shared<Storage>();
  }
}

std::shared_ptr<::test_union::FieldCollision::Storage>
test_union::FieldCollision::CloneStorage() const {
  const Storage& storage = *storage_;
  switch (storage_->index()) {
    case 1:
      return std::make_shared<Storage>(
          std::in_place_index<1>,
          ::fidl::internal::NaturalClone(std::get<1>(storage)));
    default:
      return std::make_shared<Storage>();
  }
}

std::shared_ptr<::test_union::ExplicitXUnion::Storage>
test_union::ExplicitXUnion::CloneStorage() const {
  const Storage& storage = *storage_;
  switch (storage_->index()) {
    case 1:
      return std::make_shared<Storage>(
          std::in_place_index<1>,
          ::fidl::internal::NaturalClone(std::get<1>(storage)));
    case 2:
      return std::make_shared<Storage>(
          std::in_place_index<2>,
          ::fidl::internal::NaturalClone(std::get<2>(storage)));
    default:
      return std::make_shared<Storage>();
  }
}

std::shared_ptr<::test_union::ExplicitUnion::Storage>
test_union::ExplicitUnion::CloneStorage() const {
  const Storage& storage = *storage_;
  switch (storage_->index()) {
    case 1:
      return std::make_shared<Storage>(
          std::in_place_index<1>,
          ::fidl::internal::NaturalClone(std::get<1>(storage)));
    case 2:
      return std::make_shared<Storage>(
          std::in_place_index<2>,
          ::fidl::internal::NaturalClone(std::get<2>(storage)));
    default:
      return std::make_shared<Storage>();
  }
}

std::shared_ptr<::test_union::ExplicitStrictFoo::Storage>
test_union::ExplicitStrictFoo::CloneStorage() const {
  const Storage& storage = *storage_;
  switch (storage_->index()) {
    case 1:
      return std::make_shared<Storage>(
          std::in_place_index<1>,
          ::fidl::internal::NaturalClone(std::get<1>(storage)));
    case 2:
      return std::make_shared<Storage>(
          std::in_place_index<2>,
          ::fidl::internal::NaturalClone(std::get<2>(storage)));
    default:
      return std::make_shared<Storage>();
  }
}

std::shared_ptr<::test_union::ExplicitFoo::Storage>
test_union::ExplicitFoo::CloneStorage() const {
  const Storage& storage = *storage_;
  switch (storage_->index()) {
    case 1:
      return std::make_shared<Storage>(
          std::in_place_index<1>,
          ::fidl::internal::NaturalClone(std::get<1>(storage)));
    case 2:
      return std::make_shared<Storage>(
          std::in_place_index<2>,
          ::fidl::internal::NaturalClone(std::get<2>(storage)));
    default:
      return std::make_shared<Storage>();
  }
}

std::shared_ptr<::test_union::XUnionContainingEmptyStruct::Storage>
test_union::XUnionContainingEmptyStruct::CloneStorage() const {
  const Storage& storage = *storage_;
  switch (storage_->index()) {
    case 1:
      return std::make_shared<Storage>(
          std::in_place_index<1>,
          ::fidl::internal::NaturalClone(std::get<1>(storage)));
    default:
      return std::make_shared<Storage>();
  }
}
