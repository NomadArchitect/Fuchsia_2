// WARNING: This file is machine generated by fidlgen.

#pragma once

#include <lib/fidl/internal.h>
#include <lib/fidl/llcpp/array.h>
#include <lib/fidl/llcpp/coding.h>
#include <lib/fidl/llcpp/envelope.h>
#include <lib/fidl/llcpp/errors.h>
#include <lib/fidl/llcpp/memory.h>
#include <lib/fidl/llcpp/message.h>
#include <lib/fidl/llcpp/message_storage.h>
#include <lib/fidl/llcpp/object_view.h>
#include <lib/fidl/llcpp/string_view.h>
#include <lib/fidl/llcpp/traits.h>
#include <lib/fidl/llcpp/vector_view.h>
#include <lib/fit/function.h>
#include <lib/stdcompat/optional.h>

#include <algorithm>
#include <cstddef>
#include <variant>
#ifdef __Fuchsia__
#include <lib/fidl/llcpp/client.h>
#include <lib/fidl/llcpp/client_end.h>
#include <lib/fidl/llcpp/connect_service.h>
#include <lib/fidl/llcpp/result.h>
#include <lib/fidl/llcpp/server.h>
#include <lib/fidl/llcpp/server_end.h>
#include <lib/fidl/llcpp/service_handler_interface.h>
#include <lib/fidl/llcpp/sync_call.h>
#include <lib/fidl/llcpp/transaction.h>
#include <lib/fidl/txn_header.h>
#include <lib/zx/channel.h>
#include <lib/zx/vmo.h>

#endif  // __Fuchsia__
#include <zircon/fidl.h>
#include <zx/llcpp/fidl.h>

namespace fidl_test_nullable {
namespace wire {
struct StructWithNullableVector;

struct StructWithNullableUnion;

struct StructWithNullableStruct;

struct StructWithNullableString;

struct StructWithNullableRequest;

struct StructWithNullableProtocol;

struct StructWithNullableHandle;
}  // namespace wire
class SimpleProtocol;
namespace wire {
class SimpleUnion;

struct Int32Wrapper;

extern "C" const fidl_type_t fidl_test_nullable_SimpleUnionTable;

class SimpleUnion {
 public:
  SimpleUnion() : ordinal_(Ordinal::Invalid), envelope_{} {}

  SimpleUnion(SimpleUnion&&) = default;
  SimpleUnion& operator=(SimpleUnion&&) = default;

  enum class Tag : fidl_xunion_tag_t {
    kA = 1,  // 0x1
    kB = 2,  // 0x2
  };

  bool has_invalid_tag() const { return ordinal_ == Ordinal::Invalid; }

  bool is_a() const { return ordinal_ == Ordinal::kA; }

  static SimpleUnion WithA(::fidl::ObjectView<int32_t> val) {
    SimpleUnion result;
    result.set_a(val);
    return result;
  }

  template <typename... Args>
  static SimpleUnion WithA(::fidl::AnyAllocator& allocator, Args&&... args) {
    SimpleUnion result;
    result.set_a(
        ::fidl::ObjectView<int32_t>(allocator, std::forward<Args>(args)...));
    return result;
  }

  void set_a(::fidl::ObjectView<int32_t> elem) {
    ordinal_ = Ordinal::kA;
    envelope_.data = ::fidl::ObjectView<void>(
        ::fidl::unowned_ptr_t<void>(static_cast<void*>(elem.get())));
  }

  template <typename... Args>
  void set_a(::fidl::AnyAllocator& allocator, Args&&... args) {
    ordinal_ = Ordinal::kA;
    set_a(::fidl::ObjectView<int32_t>(allocator, std::forward<Args>(args)...));
  }

  int32_t& mutable_a() {
    ZX_ASSERT(ordinal_ == Ordinal::kA);
    return *static_cast<int32_t*>(envelope_.data.get());
  }
  const int32_t& a() const {
    ZX_ASSERT(ordinal_ == Ordinal::kA);
    return *static_cast<int32_t*>(envelope_.data.get());
  }

  bool is_b() const { return ordinal_ == Ordinal::kB; }

  static SimpleUnion WithB(::fidl::ObjectView<float> val) {
    SimpleUnion result;
    result.set_b(val);
    return result;
  }

  template <typename... Args>
  static SimpleUnion WithB(::fidl::AnyAllocator& allocator, Args&&... args) {
    SimpleUnion result;
    result.set_b(
        ::fidl::ObjectView<float>(allocator, std::forward<Args>(args)...));
    return result;
  }

  void set_b(::fidl::ObjectView<float> elem) {
    ordinal_ = Ordinal::kB;
    envelope_.data = ::fidl::ObjectView<void>(
        ::fidl::unowned_ptr_t<void>(static_cast<void*>(elem.get())));
  }

  template <typename... Args>
  void set_b(::fidl::AnyAllocator& allocator, Args&&... args) {
    ordinal_ = Ordinal::kB;
    set_b(::fidl::ObjectView<float>(allocator, std::forward<Args>(args)...));
  }

  float& mutable_b() {
    ZX_ASSERT(ordinal_ == Ordinal::kB);
    return *static_cast<float*>(envelope_.data.get());
  }
  const float& b() const {
    ZX_ASSERT(ordinal_ == Ordinal::kB);
    return *static_cast<float*>(envelope_.data.get());
  }
  Tag which() const {
    ZX_ASSERT(!has_invalid_tag());
    return static_cast<Tag>(ordinal_);
  }

  static constexpr const fidl_type_t* Type =
      &fidl_test_nullable_SimpleUnionTable;
  static constexpr uint32_t MaxNumHandles = 0;
  static constexpr uint32_t PrimarySize = 24;
  [[maybe_unused]] static constexpr uint32_t MaxOutOfLine = 8;
  static constexpr bool HasPointer = true;

 private:
  enum class Ordinal : fidl_xunion_tag_t {
    Invalid = 0,
    kA = 1,  // 0x1
    kB = 2,  // 0x2
  };

  static void SizeAndOffsetAssertionHelper();
  Ordinal ordinal_;
  FIDL_ALIGNDECL
  ::fidl::Envelope<void> envelope_;
};

extern "C" const fidl_type_t fidl_test_nullable_StructWithNullableVectorTable;

struct StructWithNullableVector {
  static constexpr const fidl_type_t* Type =
      &fidl_test_nullable_StructWithNullableVectorTable;
  static constexpr uint32_t MaxNumHandles = 0;
  static constexpr uint32_t PrimarySize = 16;
  [[maybe_unused]] static constexpr uint32_t MaxOutOfLine = 4294967295;
  static constexpr bool HasPointer = true;

  ::fidl::VectorView<int32_t> val = {};

  class UnownedEncodedMessage final {
   public:
    UnownedEncodedMessage(uint8_t* bytes, uint32_t byte_size,
                          StructWithNullableVector* value)
        : message_(bytes, byte_size, sizeof(StructWithNullableVector), nullptr,
                   0, 0) {
      message_.Encode<StructWithNullableVector>(value);
    }
    UnownedEncodedMessage(const UnownedEncodedMessage&) = delete;
    UnownedEncodedMessage(UnownedEncodedMessage&&) = delete;
    UnownedEncodedMessage* operator=(const UnownedEncodedMessage&) = delete;
    UnownedEncodedMessage* operator=(UnownedEncodedMessage&&) = delete;

    zx_status_t status() const { return message_.status(); }
#ifdef __Fuchsia__
    const char* status_string() const { return message_.status_string(); }
#endif
    bool ok() const { return message_.status() == ZX_OK; }
    const char* error() const { return message_.error(); }

    ::fidl::OutgoingMessage& GetOutgoingMessage() { return message_; }

   private:
    ::fidl::OutgoingMessage message_;
  };

  class OwnedEncodedMessage final {
   public:
    explicit OwnedEncodedMessage(StructWithNullableVector* value)
        : message_(bytes_.data(), bytes_.size(), value) {}
    OwnedEncodedMessage(const OwnedEncodedMessage&) = delete;
    OwnedEncodedMessage(OwnedEncodedMessage&&) = delete;
    OwnedEncodedMessage* operator=(const OwnedEncodedMessage&) = delete;
    OwnedEncodedMessage* operator=(OwnedEncodedMessage&&) = delete;

    zx_status_t status() const { return message_.status(); }
#ifdef __Fuchsia__
    const char* status_string() const { return message_.status_string(); }
#endif
    bool ok() const { return message_.ok(); }
    const char* error() const { return message_.error(); }

    ::fidl::OutgoingMessage& GetOutgoingMessage() {
      return message_.GetOutgoingMessage();
    }

   private:
    ::fidl::internal::BoxedMessageBuffer<ZX_CHANNEL_MAX_MSG_BYTES> bytes_;
    UnownedEncodedMessage message_;
  };

  class DecodedMessage final : public ::fidl::internal::IncomingMessage {
   public:
    DecodedMessage(uint8_t* bytes, uint32_t byte_actual,
                   zx_handle_info_t* handles = nullptr,
                   uint32_t handle_actual = 0)
        : ::fidl::internal::IncomingMessage(bytes, byte_actual, handles,
                                            handle_actual) {
      Decode<struct StructWithNullableVector>();
    }
    DecodedMessage(fidl_incoming_msg_t* msg)
        : ::fidl::internal::IncomingMessage(msg) {
      Decode<struct StructWithNullableVector>();
    }
    DecodedMessage(const DecodedMessage&) = delete;
    DecodedMessage(DecodedMessage&&) = delete;
    DecodedMessage* operator=(const DecodedMessage&) = delete;
    DecodedMessage* operator=(DecodedMessage&&) = delete;

    struct StructWithNullableVector* PrimaryObject() {
      ZX_DEBUG_ASSERT(ok());
      return reinterpret_cast<struct StructWithNullableVector*>(bytes());
    }

    // Release the ownership of the decoded message. That means that the handles
    // won't be closed When the object is destroyed. After calling this method,
    // the DecodedMessage object should not be used anymore.
    void ReleasePrimaryObject() { ResetBytes(); }
  };
};

extern "C" const fidl_type_t fidl_test_nullable_StructWithNullableUnionTable;

struct StructWithNullableUnion {
  static constexpr const fidl_type_t* Type =
      &fidl_test_nullable_StructWithNullableUnionTable;
  static constexpr uint32_t MaxNumHandles = 0;
  static constexpr uint32_t PrimarySize = 24;
  [[maybe_unused]] static constexpr uint32_t MaxOutOfLine = 8;
  static constexpr bool HasPointer = true;

  ::fidl_test_nullable::wire::SimpleUnion val = {};

  class UnownedEncodedMessage final {
   public:
    UnownedEncodedMessage(uint8_t* bytes, uint32_t byte_size,
                          StructWithNullableUnion* value)
        : message_(bytes, byte_size, sizeof(StructWithNullableUnion), nullptr,
                   0, 0) {
      message_.Encode<StructWithNullableUnion>(value);
    }
    UnownedEncodedMessage(const UnownedEncodedMessage&) = delete;
    UnownedEncodedMessage(UnownedEncodedMessage&&) = delete;
    UnownedEncodedMessage* operator=(const UnownedEncodedMessage&) = delete;
    UnownedEncodedMessage* operator=(UnownedEncodedMessage&&) = delete;

    zx_status_t status() const { return message_.status(); }
#ifdef __Fuchsia__
    const char* status_string() const { return message_.status_string(); }
#endif
    bool ok() const { return message_.status() == ZX_OK; }
    const char* error() const { return message_.error(); }

    ::fidl::OutgoingMessage& GetOutgoingMessage() { return message_; }

   private:
    ::fidl::OutgoingMessage message_;
  };

  class OwnedEncodedMessage final {
   public:
    explicit OwnedEncodedMessage(StructWithNullableUnion* value)
        : message_(bytes_.data(), bytes_.size(), value) {}
    OwnedEncodedMessage(const OwnedEncodedMessage&) = delete;
    OwnedEncodedMessage(OwnedEncodedMessage&&) = delete;
    OwnedEncodedMessage* operator=(const OwnedEncodedMessage&) = delete;
    OwnedEncodedMessage* operator=(OwnedEncodedMessage&&) = delete;

    zx_status_t status() const { return message_.status(); }
#ifdef __Fuchsia__
    const char* status_string() const { return message_.status_string(); }
#endif
    bool ok() const { return message_.ok(); }
    const char* error() const { return message_.error(); }

    ::fidl::OutgoingMessage& GetOutgoingMessage() {
      return message_.GetOutgoingMessage();
    }

   private:
    ::fidl::internal::InlineMessageBuffer<32> bytes_;
    UnownedEncodedMessage message_;
  };

  class DecodedMessage final : public ::fidl::internal::IncomingMessage {
   public:
    DecodedMessage(uint8_t* bytes, uint32_t byte_actual,
                   zx_handle_info_t* handles = nullptr,
                   uint32_t handle_actual = 0)
        : ::fidl::internal::IncomingMessage(bytes, byte_actual, handles,
                                            handle_actual) {
      Decode<struct StructWithNullableUnion>();
    }
    DecodedMessage(fidl_incoming_msg_t* msg)
        : ::fidl::internal::IncomingMessage(msg) {
      Decode<struct StructWithNullableUnion>();
    }
    DecodedMessage(const DecodedMessage&) = delete;
    DecodedMessage(DecodedMessage&&) = delete;
    DecodedMessage* operator=(const DecodedMessage&) = delete;
    DecodedMessage* operator=(DecodedMessage&&) = delete;

    struct StructWithNullableUnion* PrimaryObject() {
      ZX_DEBUG_ASSERT(ok());
      return reinterpret_cast<struct StructWithNullableUnion*>(bytes());
    }

    // Release the ownership of the decoded message. That means that the handles
    // won't be closed When the object is destroyed. After calling this method,
    // the DecodedMessage object should not be used anymore.
    void ReleasePrimaryObject() { ResetBytes(); }
  };
};

extern "C" const fidl_type_t fidl_test_nullable_StructWithNullableStructTable;

struct StructWithNullableStruct {
  static constexpr const fidl_type_t* Type =
      &fidl_test_nullable_StructWithNullableStructTable;
  static constexpr uint32_t MaxNumHandles = 0;
  static constexpr uint32_t PrimarySize = 8;
  [[maybe_unused]] static constexpr uint32_t MaxOutOfLine = 8;
  static constexpr bool HasPointer = true;

  ::fidl::ObjectView<::fidl_test_nullable::wire::Int32Wrapper> val = {};

  class UnownedEncodedMessage final {
   public:
    UnownedEncodedMessage(uint8_t* bytes, uint32_t byte_size,
                          StructWithNullableStruct* value)
        : message_(bytes, byte_size, sizeof(StructWithNullableStruct), nullptr,
                   0, 0) {
      message_.Encode<StructWithNullableStruct>(value);
    }
    UnownedEncodedMessage(const UnownedEncodedMessage&) = delete;
    UnownedEncodedMessage(UnownedEncodedMessage&&) = delete;
    UnownedEncodedMessage* operator=(const UnownedEncodedMessage&) = delete;
    UnownedEncodedMessage* operator=(UnownedEncodedMessage&&) = delete;

    zx_status_t status() const { return message_.status(); }
#ifdef __Fuchsia__
    const char* status_string() const { return message_.status_string(); }
#endif
    bool ok() const { return message_.status() == ZX_OK; }
    const char* error() const { return message_.error(); }

    ::fidl::OutgoingMessage& GetOutgoingMessage() { return message_; }

   private:
    ::fidl::OutgoingMessage message_;
  };

  class OwnedEncodedMessage final {
   public:
    explicit OwnedEncodedMessage(StructWithNullableStruct* value)
        : message_(bytes_.data(), bytes_.size(), value) {}
    OwnedEncodedMessage(const OwnedEncodedMessage&) = delete;
    OwnedEncodedMessage(OwnedEncodedMessage&&) = delete;
    OwnedEncodedMessage* operator=(const OwnedEncodedMessage&) = delete;
    OwnedEncodedMessage* operator=(OwnedEncodedMessage&&) = delete;

    zx_status_t status() const { return message_.status(); }
#ifdef __Fuchsia__
    const char* status_string() const { return message_.status_string(); }
#endif
    bool ok() const { return message_.ok(); }
    const char* error() const { return message_.error(); }

    ::fidl::OutgoingMessage& GetOutgoingMessage() {
      return message_.GetOutgoingMessage();
    }

   private:
    ::fidl::internal::InlineMessageBuffer<16> bytes_;
    UnownedEncodedMessage message_;
  };

  class DecodedMessage final : public ::fidl::internal::IncomingMessage {
   public:
    DecodedMessage(uint8_t* bytes, uint32_t byte_actual,
                   zx_handle_info_t* handles = nullptr,
                   uint32_t handle_actual = 0)
        : ::fidl::internal::IncomingMessage(bytes, byte_actual, handles,
                                            handle_actual) {
      Decode<struct StructWithNullableStruct>();
    }
    DecodedMessage(fidl_incoming_msg_t* msg)
        : ::fidl::internal::IncomingMessage(msg) {
      Decode<struct StructWithNullableStruct>();
    }
    DecodedMessage(const DecodedMessage&) = delete;
    DecodedMessage(DecodedMessage&&) = delete;
    DecodedMessage* operator=(const DecodedMessage&) = delete;
    DecodedMessage* operator=(DecodedMessage&&) = delete;

    struct StructWithNullableStruct* PrimaryObject() {
      ZX_DEBUG_ASSERT(ok());
      return reinterpret_cast<struct StructWithNullableStruct*>(bytes());
    }

    // Release the ownership of the decoded message. That means that the handles
    // won't be closed When the object is destroyed. After calling this method,
    // the DecodedMessage object should not be used anymore.
    void ReleasePrimaryObject() { ResetBytes(); }
  };
};

extern "C" const fidl_type_t fidl_test_nullable_StructWithNullableStringTable;

struct StructWithNullableString {
  static constexpr const fidl_type_t* Type =
      &fidl_test_nullable_StructWithNullableStringTable;
  static constexpr uint32_t MaxNumHandles = 0;
  static constexpr uint32_t PrimarySize = 16;
  [[maybe_unused]] static constexpr uint32_t MaxOutOfLine = 4294967295;
  static constexpr bool HasPointer = true;

  ::fidl::StringView val = {};

  class UnownedEncodedMessage final {
   public:
    UnownedEncodedMessage(uint8_t* bytes, uint32_t byte_size,
                          StructWithNullableString* value)
        : message_(bytes, byte_size, sizeof(StructWithNullableString), nullptr,
                   0, 0) {
      message_.Encode<StructWithNullableString>(value);
    }
    UnownedEncodedMessage(const UnownedEncodedMessage&) = delete;
    UnownedEncodedMessage(UnownedEncodedMessage&&) = delete;
    UnownedEncodedMessage* operator=(const UnownedEncodedMessage&) = delete;
    UnownedEncodedMessage* operator=(UnownedEncodedMessage&&) = delete;

    zx_status_t status() const { return message_.status(); }
#ifdef __Fuchsia__
    const char* status_string() const { return message_.status_string(); }
#endif
    bool ok() const { return message_.status() == ZX_OK; }
    const char* error() const { return message_.error(); }

    ::fidl::OutgoingMessage& GetOutgoingMessage() { return message_; }

   private:
    ::fidl::OutgoingMessage message_;
  };

  class OwnedEncodedMessage final {
   public:
    explicit OwnedEncodedMessage(StructWithNullableString* value)
        : message_(bytes_.data(), bytes_.size(), value) {}
    OwnedEncodedMessage(const OwnedEncodedMessage&) = delete;
    OwnedEncodedMessage(OwnedEncodedMessage&&) = delete;
    OwnedEncodedMessage* operator=(const OwnedEncodedMessage&) = delete;
    OwnedEncodedMessage* operator=(OwnedEncodedMessage&&) = delete;

    zx_status_t status() const { return message_.status(); }
#ifdef __Fuchsia__
    const char* status_string() const { return message_.status_string(); }
#endif
    bool ok() const { return message_.ok(); }
    const char* error() const { return message_.error(); }

    ::fidl::OutgoingMessage& GetOutgoingMessage() {
      return message_.GetOutgoingMessage();
    }

   private:
    ::fidl::internal::BoxedMessageBuffer<ZX_CHANNEL_MAX_MSG_BYTES> bytes_;
    UnownedEncodedMessage message_;
  };

  class DecodedMessage final : public ::fidl::internal::IncomingMessage {
   public:
    DecodedMessage(uint8_t* bytes, uint32_t byte_actual,
                   zx_handle_info_t* handles = nullptr,
                   uint32_t handle_actual = 0)
        : ::fidl::internal::IncomingMessage(bytes, byte_actual, handles,
                                            handle_actual) {
      Decode<struct StructWithNullableString>();
    }
    DecodedMessage(fidl_incoming_msg_t* msg)
        : ::fidl::internal::IncomingMessage(msg) {
      Decode<struct StructWithNullableString>();
    }
    DecodedMessage(const DecodedMessage&) = delete;
    DecodedMessage(DecodedMessage&&) = delete;
    DecodedMessage* operator=(const DecodedMessage&) = delete;
    DecodedMessage* operator=(DecodedMessage&&) = delete;

    struct StructWithNullableString* PrimaryObject() {
      ZX_DEBUG_ASSERT(ok());
      return reinterpret_cast<struct StructWithNullableString*>(bytes());
    }

    // Release the ownership of the decoded message. That means that the handles
    // won't be closed When the object is destroyed. After calling this method,
    // the DecodedMessage object should not be used anymore.
    void ReleasePrimaryObject() { ResetBytes(); }
  };
};

#ifdef __Fuchsia__
extern "C" const fidl_type_t fidl_test_nullable_StructWithNullableRequestTable;

struct StructWithNullableRequest {
  static constexpr const fidl_type_t* Type =
      &fidl_test_nullable_StructWithNullableRequestTable;
  static constexpr uint32_t MaxNumHandles = 1;
  static constexpr uint32_t PrimarySize = 4;
  [[maybe_unused]] static constexpr uint32_t MaxOutOfLine = 0;
  static constexpr bool HasPointer = false;

  ::fidl::ServerEnd<::fidl_test_nullable::SimpleProtocol> val = {};

  void _CloseHandles();

  class UnownedEncodedMessage final {
   public:
    UnownedEncodedMessage(uint8_t* bytes, uint32_t byte_size,
                          StructWithNullableRequest* value)
        : message_(bytes, byte_size, sizeof(StructWithNullableRequest),
                   handles_,
                   std::min(ZX_CHANNEL_MAX_MSG_HANDLES, MaxNumHandles), 0) {
      message_.Encode<StructWithNullableRequest>(value);
    }
    UnownedEncodedMessage(const UnownedEncodedMessage&) = delete;
    UnownedEncodedMessage(UnownedEncodedMessage&&) = delete;
    UnownedEncodedMessage* operator=(const UnownedEncodedMessage&) = delete;
    UnownedEncodedMessage* operator=(UnownedEncodedMessage&&) = delete;

    zx_status_t status() const { return message_.status(); }
#ifdef __Fuchsia__
    const char* status_string() const { return message_.status_string(); }
#endif
    bool ok() const { return message_.status() == ZX_OK; }
    const char* error() const { return message_.error(); }

    ::fidl::OutgoingMessage& GetOutgoingMessage() { return message_; }

   private:
    zx_handle_disposition_t
        handles_[std::min(ZX_CHANNEL_MAX_MSG_HANDLES, MaxNumHandles)];
    ::fidl::OutgoingMessage message_;
  };

  class OwnedEncodedMessage final {
   public:
    explicit OwnedEncodedMessage(StructWithNullableRequest* value)
        : message_(bytes_.data(), bytes_.size(), value) {}
    OwnedEncodedMessage(const OwnedEncodedMessage&) = delete;
    OwnedEncodedMessage(OwnedEncodedMessage&&) = delete;
    OwnedEncodedMessage* operator=(const OwnedEncodedMessage&) = delete;
    OwnedEncodedMessage* operator=(OwnedEncodedMessage&&) = delete;

    zx_status_t status() const { return message_.status(); }
#ifdef __Fuchsia__
    const char* status_string() const { return message_.status_string(); }
#endif
    bool ok() const { return message_.ok(); }
    const char* error() const { return message_.error(); }

    ::fidl::OutgoingMessage& GetOutgoingMessage() {
      return message_.GetOutgoingMessage();
    }

   private:
    ::fidl::internal::InlineMessageBuffer<8> bytes_;
    UnownedEncodedMessage message_;
  };

  class DecodedMessage final : public ::fidl::internal::IncomingMessage {
   public:
    DecodedMessage(uint8_t* bytes, uint32_t byte_actual,
                   zx_handle_info_t* handles = nullptr,
                   uint32_t handle_actual = 0)
        : ::fidl::internal::IncomingMessage(bytes, byte_actual, handles,
                                            handle_actual) {
      Decode<struct StructWithNullableRequest>();
    }
    DecodedMessage(fidl_incoming_msg_t* msg)
        : ::fidl::internal::IncomingMessage(msg) {
      Decode<struct StructWithNullableRequest>();
    }
    DecodedMessage(const DecodedMessage&) = delete;
    DecodedMessage(DecodedMessage&&) = delete;
    DecodedMessage* operator=(const DecodedMessage&) = delete;
    DecodedMessage* operator=(DecodedMessage&&) = delete;
    ~DecodedMessage() {
      if (ok() && (PrimaryObject() != nullptr)) {
        PrimaryObject()->_CloseHandles();
      }
    }

    struct StructWithNullableRequest* PrimaryObject() {
      ZX_DEBUG_ASSERT(ok());
      return reinterpret_cast<struct StructWithNullableRequest*>(bytes());
    }

    // Release the ownership of the decoded message. That means that the handles
    // won't be closed When the object is destroyed. After calling this method,
    // the DecodedMessage object should not be used anymore.
    void ReleasePrimaryObject() { ResetBytes(); }
  };
};
#endif  // __Fuchsia__

#ifdef __Fuchsia__
extern "C" const fidl_type_t fidl_test_nullable_StructWithNullableProtocolTable;

struct StructWithNullableProtocol {
  static constexpr const fidl_type_t* Type =
      &fidl_test_nullable_StructWithNullableProtocolTable;
  static constexpr uint32_t MaxNumHandles = 1;
  static constexpr uint32_t PrimarySize = 4;
  [[maybe_unused]] static constexpr uint32_t MaxOutOfLine = 0;
  static constexpr bool HasPointer = false;

  ::fidl::ClientEnd<::fidl_test_nullable::SimpleProtocol> val = {};

  void _CloseHandles();

  class UnownedEncodedMessage final {
   public:
    UnownedEncodedMessage(uint8_t* bytes, uint32_t byte_size,
                          StructWithNullableProtocol* value)
        : message_(bytes, byte_size, sizeof(StructWithNullableProtocol),
                   handles_,
                   std::min(ZX_CHANNEL_MAX_MSG_HANDLES, MaxNumHandles), 0) {
      message_.Encode<StructWithNullableProtocol>(value);
    }
    UnownedEncodedMessage(const UnownedEncodedMessage&) = delete;
    UnownedEncodedMessage(UnownedEncodedMessage&&) = delete;
    UnownedEncodedMessage* operator=(const UnownedEncodedMessage&) = delete;
    UnownedEncodedMessage* operator=(UnownedEncodedMessage&&) = delete;

    zx_status_t status() const { return message_.status(); }
#ifdef __Fuchsia__
    const char* status_string() const { return message_.status_string(); }
#endif
    bool ok() const { return message_.status() == ZX_OK; }
    const char* error() const { return message_.error(); }

    ::fidl::OutgoingMessage& GetOutgoingMessage() { return message_; }

   private:
    zx_handle_disposition_t
        handles_[std::min(ZX_CHANNEL_MAX_MSG_HANDLES, MaxNumHandles)];
    ::fidl::OutgoingMessage message_;
  };

  class OwnedEncodedMessage final {
   public:
    explicit OwnedEncodedMessage(StructWithNullableProtocol* value)
        : message_(bytes_.data(), bytes_.size(), value) {}
    OwnedEncodedMessage(const OwnedEncodedMessage&) = delete;
    OwnedEncodedMessage(OwnedEncodedMessage&&) = delete;
    OwnedEncodedMessage* operator=(const OwnedEncodedMessage&) = delete;
    OwnedEncodedMessage* operator=(OwnedEncodedMessage&&) = delete;

    zx_status_t status() const { return message_.status(); }
#ifdef __Fuchsia__
    const char* status_string() const { return message_.status_string(); }
#endif
    bool ok() const { return message_.ok(); }
    const char* error() const { return message_.error(); }

    ::fidl::OutgoingMessage& GetOutgoingMessage() {
      return message_.GetOutgoingMessage();
    }

   private:
    ::fidl::internal::InlineMessageBuffer<8> bytes_;
    UnownedEncodedMessage message_;
  };

  class DecodedMessage final : public ::fidl::internal::IncomingMessage {
   public:
    DecodedMessage(uint8_t* bytes, uint32_t byte_actual,
                   zx_handle_info_t* handles = nullptr,
                   uint32_t handle_actual = 0)
        : ::fidl::internal::IncomingMessage(bytes, byte_actual, handles,
                                            handle_actual) {
      Decode<struct StructWithNullableProtocol>();
    }
    DecodedMessage(fidl_incoming_msg_t* msg)
        : ::fidl::internal::IncomingMessage(msg) {
      Decode<struct StructWithNullableProtocol>();
    }
    DecodedMessage(const DecodedMessage&) = delete;
    DecodedMessage(DecodedMessage&&) = delete;
    DecodedMessage* operator=(const DecodedMessage&) = delete;
    DecodedMessage* operator=(DecodedMessage&&) = delete;
    ~DecodedMessage() {
      if (ok() && (PrimaryObject() != nullptr)) {
        PrimaryObject()->_CloseHandles();
      }
    }

    struct StructWithNullableProtocol* PrimaryObject() {
      ZX_DEBUG_ASSERT(ok());
      return reinterpret_cast<struct StructWithNullableProtocol*>(bytes());
    }

    // Release the ownership of the decoded message. That means that the handles
    // won't be closed When the object is destroyed. After calling this method,
    // the DecodedMessage object should not be used anymore.
    void ReleasePrimaryObject() { ResetBytes(); }
  };
};
#endif  // __Fuchsia__

#ifdef __Fuchsia__
extern "C" const fidl_type_t fidl_test_nullable_StructWithNullableHandleTable;

struct StructWithNullableHandle {
  static constexpr const fidl_type_t* Type =
      &fidl_test_nullable_StructWithNullableHandleTable;
  static constexpr uint32_t MaxNumHandles = 1;
  static constexpr uint32_t PrimarySize = 4;
  [[maybe_unused]] static constexpr uint32_t MaxOutOfLine = 0;
  static constexpr bool HasPointer = false;

  ::zx::vmo val = {};

  void _CloseHandles();

  class UnownedEncodedMessage final {
   public:
    UnownedEncodedMessage(uint8_t* bytes, uint32_t byte_size,
                          StructWithNullableHandle* value)
        : message_(bytes, byte_size, sizeof(StructWithNullableHandle), handles_,
                   std::min(ZX_CHANNEL_MAX_MSG_HANDLES, MaxNumHandles), 0) {
      message_.Encode<StructWithNullableHandle>(value);
    }
    UnownedEncodedMessage(const UnownedEncodedMessage&) = delete;
    UnownedEncodedMessage(UnownedEncodedMessage&&) = delete;
    UnownedEncodedMessage* operator=(const UnownedEncodedMessage&) = delete;
    UnownedEncodedMessage* operator=(UnownedEncodedMessage&&) = delete;

    zx_status_t status() const { return message_.status(); }
#ifdef __Fuchsia__
    const char* status_string() const { return message_.status_string(); }
#endif
    bool ok() const { return message_.status() == ZX_OK; }
    const char* error() const { return message_.error(); }

    ::fidl::OutgoingMessage& GetOutgoingMessage() { return message_; }

   private:
    zx_handle_disposition_t
        handles_[std::min(ZX_CHANNEL_MAX_MSG_HANDLES, MaxNumHandles)];
    ::fidl::OutgoingMessage message_;
  };

  class OwnedEncodedMessage final {
   public:
    explicit OwnedEncodedMessage(StructWithNullableHandle* value)
        : message_(bytes_.data(), bytes_.size(), value) {}
    OwnedEncodedMessage(const OwnedEncodedMessage&) = delete;
    OwnedEncodedMessage(OwnedEncodedMessage&&) = delete;
    OwnedEncodedMessage* operator=(const OwnedEncodedMessage&) = delete;
    OwnedEncodedMessage* operator=(OwnedEncodedMessage&&) = delete;

    zx_status_t status() const { return message_.status(); }
#ifdef __Fuchsia__
    const char* status_string() const { return message_.status_string(); }
#endif
    bool ok() const { return message_.ok(); }
    const char* error() const { return message_.error(); }

    ::fidl::OutgoingMessage& GetOutgoingMessage() {
      return message_.GetOutgoingMessage();
    }

   private:
    ::fidl::internal::InlineMessageBuffer<8> bytes_;
    UnownedEncodedMessage message_;
  };

  class DecodedMessage final : public ::fidl::internal::IncomingMessage {
   public:
    DecodedMessage(uint8_t* bytes, uint32_t byte_actual,
                   zx_handle_info_t* handles = nullptr,
                   uint32_t handle_actual = 0)
        : ::fidl::internal::IncomingMessage(bytes, byte_actual, handles,
                                            handle_actual) {
      Decode<struct StructWithNullableHandle>();
    }
    DecodedMessage(fidl_incoming_msg_t* msg)
        : ::fidl::internal::IncomingMessage(msg) {
      Decode<struct StructWithNullableHandle>();
    }
    DecodedMessage(const DecodedMessage&) = delete;
    DecodedMessage(DecodedMessage&&) = delete;
    DecodedMessage* operator=(const DecodedMessage&) = delete;
    DecodedMessage* operator=(DecodedMessage&&) = delete;
    ~DecodedMessage() {
      if (ok() && (PrimaryObject() != nullptr)) {
        PrimaryObject()->_CloseHandles();
      }
    }

    struct StructWithNullableHandle* PrimaryObject() {
      ZX_DEBUG_ASSERT(ok());
      return reinterpret_cast<struct StructWithNullableHandle*>(bytes());
    }

    // Release the ownership of the decoded message. That means that the handles
    // won't be closed When the object is destroyed. After calling this method,
    // the DecodedMessage object should not be used anymore.
    void ReleasePrimaryObject() { ResetBytes(); }
  };
};
#endif  // __Fuchsia__

}  // namespace wire
extern "C" const fidl_type_t fidl_test_nullable_SimpleProtocolAddRequestTable;

extern "C" const fidl_type_t fidl_test_nullable_SimpleProtocolAddResponseTable;

class SimpleProtocol final {
  SimpleProtocol() = delete;

 public:
  struct AddResponse final {
    FIDL_ALIGNDECL
    fidl_message_header_t _hdr;
    int32_t sum;
    explicit AddResponse(int32_t sum) : sum(sum) { _InitHeader(); }
    AddResponse() { _InitHeader(); }

    static constexpr const fidl_type_t* Type =
        &::fidl_test_nullable::
            fidl_test_nullable_SimpleProtocolAddResponseTable;
    static constexpr uint32_t MaxNumHandles = 0;
    static constexpr uint32_t PrimarySize = 24;
    static constexpr uint32_t MaxOutOfLine = 0;
    static constexpr bool HasFlexibleEnvelope = false;
    static constexpr bool HasPointer = false;
    static constexpr ::fidl::internal::TransactionalMessageKind MessageKind =
        ::fidl::internal::TransactionalMessageKind::kResponse;

    class UnownedEncodedMessage final {
     public:
      UnownedEncodedMessage(uint8_t* _bytes, uint32_t _byte_size, int32_t sum)
          : message_(_bytes, _byte_size, sizeof(AddResponse), nullptr, 0, 0) {
        FIDL_ALIGNDECL AddResponse _response{sum};
        message_.Encode<AddResponse>(&_response);
      }
      UnownedEncodedMessage(uint8_t* bytes, uint32_t byte_size,
                            AddResponse* response)
          : message_(bytes, byte_size, sizeof(AddResponse), nullptr, 0, 0) {
        message_.Encode<AddResponse>(response);
      }
      UnownedEncodedMessage(const UnownedEncodedMessage&) = delete;
      UnownedEncodedMessage(UnownedEncodedMessage&&) = delete;
      UnownedEncodedMessage* operator=(const UnownedEncodedMessage&) = delete;
      UnownedEncodedMessage* operator=(UnownedEncodedMessage&&) = delete;

      zx_status_t status() const { return message_.status(); }
#ifdef __Fuchsia__
      const char* status_string() const { return message_.status_string(); }
#endif
      bool ok() const { return message_.status() == ZX_OK; }
      const char* error() const { return message_.error(); }

      ::fidl::OutgoingMessage& GetOutgoingMessage() { return message_; }

#ifdef __Fuchsia__
      template <typename ChannelLike>
      void Write(ChannelLike&& client) {
        message_.Write(std::forward<ChannelLike>(client));
      }
#endif

     private:
      ::fidl::OutgoingMessage message_;
    };

    class OwnedEncodedMessage final {
     public:
      explicit OwnedEncodedMessage(int32_t sum)
          : message_(bytes_.data(), bytes_.size(), sum) {}
      explicit OwnedEncodedMessage(AddResponse* response)
          : message_(bytes_.data(), bytes_.size(), response) {}
      OwnedEncodedMessage(const OwnedEncodedMessage&) = delete;
      OwnedEncodedMessage(OwnedEncodedMessage&&) = delete;
      OwnedEncodedMessage* operator=(const OwnedEncodedMessage&) = delete;
      OwnedEncodedMessage* operator=(OwnedEncodedMessage&&) = delete;

      zx_status_t status() const { return message_.status(); }
#ifdef __Fuchsia__
      const char* status_string() const { return message_.status_string(); }
#endif
      bool ok() const { return message_.ok(); }
      const char* error() const { return message_.error(); }

      ::fidl::OutgoingMessage& GetOutgoingMessage() {
        return message_.GetOutgoingMessage();
      }

#ifdef __Fuchsia__
      template <typename ChannelLike>
      void Write(ChannelLike&& client) {
        message_.Write(std::forward<ChannelLike>(client));
      }
#endif

     private:
      ::fidl::internal::InlineMessageBuffer<24> bytes_;
      UnownedEncodedMessage message_;
    };

   public:
    class DecodedMessage final : public ::fidl::internal::IncomingMessage {
     public:
      DecodedMessage(uint8_t* bytes, uint32_t byte_actual,
                     zx_handle_info_t* handles = nullptr,
                     uint32_t handle_actual = 0)
          : ::fidl::internal::IncomingMessage(bytes, byte_actual, handles,
                                              handle_actual) {
        Decode<AddResponse>();
      }
      DecodedMessage(fidl_incoming_msg_t* msg)
          : ::fidl::internal::IncomingMessage(msg) {
        Decode<AddResponse>();
      }
      DecodedMessage(const DecodedMessage&) = delete;
      DecodedMessage(DecodedMessage&&) = delete;
      DecodedMessage* operator=(const DecodedMessage&) = delete;
      DecodedMessage* operator=(DecodedMessage&&) = delete;

      AddResponse* PrimaryObject() {
        ZX_DEBUG_ASSERT(ok());
        return reinterpret_cast<AddResponse*>(bytes());
      }

      // Release the ownership of the decoded message. That means that the
      // handles won't be closed When the object is destroyed. After calling
      // this method, the DecodedMessage object should not be used anymore.
      void ReleasePrimaryObject() { ResetBytes(); }
    };

   private:
    void _InitHeader();
  };
  struct AddRequest final {
    FIDL_ALIGNDECL
    fidl_message_header_t _hdr;
    int32_t a;
    int32_t b;
    explicit AddRequest(zx_txid_t _txid, int32_t a, int32_t b) : a(a), b(b) {
      _InitHeader(_txid);
    }
    explicit AddRequest(zx_txid_t _txid) { _InitHeader(_txid); }

    static constexpr const fidl_type_t* Type =
        &::fidl_test_nullable::fidl_test_nullable_SimpleProtocolAddRequestTable;
    static constexpr uint32_t MaxNumHandles = 0;
    static constexpr uint32_t PrimarySize = 24;
    static constexpr uint32_t MaxOutOfLine = 0;
    static constexpr uint32_t AltPrimarySize = 24;
    static constexpr uint32_t AltMaxOutOfLine = 0;
    static constexpr bool HasFlexibleEnvelope = false;
    static constexpr bool HasPointer = false;
    static constexpr ::fidl::internal::TransactionalMessageKind MessageKind =
        ::fidl::internal::TransactionalMessageKind::kRequest;
    using ResponseType = AddResponse;

    class UnownedEncodedMessage final {
     public:
      UnownedEncodedMessage(uint8_t* _bytes, uint32_t _byte_size,
                            zx_txid_t _txid, int32_t a, int32_t b)
          : message_(_bytes, _byte_size, sizeof(AddRequest), nullptr, 0, 0) {
        FIDL_ALIGNDECL AddRequest _request(_txid, a, b);
        message_.Encode<AddRequest>(&_request);
      }
      UnownedEncodedMessage(uint8_t* bytes, uint32_t byte_size,
                            AddRequest* request)
          : message_(bytes, byte_size, sizeof(AddRequest), nullptr, 0, 0) {
        message_.Encode<AddRequest>(request);
      }
      UnownedEncodedMessage(const UnownedEncodedMessage&) = delete;
      UnownedEncodedMessage(UnownedEncodedMessage&&) = delete;
      UnownedEncodedMessage* operator=(const UnownedEncodedMessage&) = delete;
      UnownedEncodedMessage* operator=(UnownedEncodedMessage&&) = delete;

      zx_status_t status() const { return message_.status(); }
#ifdef __Fuchsia__
      const char* status_string() const { return message_.status_string(); }
#endif
      bool ok() const { return message_.status() == ZX_OK; }
      const char* error() const { return message_.error(); }

      ::fidl::OutgoingMessage& GetOutgoingMessage() { return message_; }

#ifdef __Fuchsia__
      template <typename ChannelLike>
      void Write(ChannelLike&& client) {
        message_.Write(std::forward<ChannelLike>(client));
      }
#endif

     private:
      ::fidl::OutgoingMessage message_;
    };

    class OwnedEncodedMessage final {
     public:
      explicit OwnedEncodedMessage(zx_txid_t _txid, int32_t a, int32_t b)
          : message_(bytes_.data(), bytes_.size(), _txid, a, b) {}
      explicit OwnedEncodedMessage(AddRequest* request)
          : message_(bytes_.data(), bytes_.size(), request) {}
      OwnedEncodedMessage(const OwnedEncodedMessage&) = delete;
      OwnedEncodedMessage(OwnedEncodedMessage&&) = delete;
      OwnedEncodedMessage* operator=(const OwnedEncodedMessage&) = delete;
      OwnedEncodedMessage* operator=(OwnedEncodedMessage&&) = delete;

      zx_status_t status() const { return message_.status(); }
#ifdef __Fuchsia__
      const char* status_string() const { return message_.status_string(); }
#endif
      bool ok() const { return message_.ok(); }
      const char* error() const { return message_.error(); }

      ::fidl::OutgoingMessage& GetOutgoingMessage() {
        return message_.GetOutgoingMessage();
      }

#ifdef __Fuchsia__
      template <typename ChannelLike>
      void Write(ChannelLike&& client) {
        message_.Write(std::forward<ChannelLike>(client));
      }
#endif

     private:
      ::fidl::internal::InlineMessageBuffer<24> bytes_;
      UnownedEncodedMessage message_;
    };

   public:
    class DecodedMessage final : public ::fidl::internal::IncomingMessage {
     public:
      DecodedMessage(uint8_t* bytes, uint32_t byte_actual,
                     zx_handle_info_t* handles = nullptr,
                     uint32_t handle_actual = 0)
          : ::fidl::internal::IncomingMessage(bytes, byte_actual, handles,
                                              handle_actual) {
        Decode<AddRequest>();
      }
      DecodedMessage(fidl_incoming_msg_t* msg)
          : ::fidl::internal::IncomingMessage(msg) {
        Decode<AddRequest>();
      }
      DecodedMessage(const DecodedMessage&) = delete;
      DecodedMessage(DecodedMessage&&) = delete;
      DecodedMessage* operator=(const DecodedMessage&) = delete;
      DecodedMessage* operator=(DecodedMessage&&) = delete;

      AddRequest* PrimaryObject() {
        ZX_DEBUG_ASSERT(ok());
        return reinterpret_cast<AddRequest*>(bytes());
      }

      // Release the ownership of the decoded message. That means that the
      // handles won't be closed When the object is destroyed. After calling
      // this method, the DecodedMessage object should not be used anymore.
      void ReleasePrimaryObject() { ResetBytes(); }
    };

   private:
    void _InitHeader(zx_txid_t _txid);
  };

  class EventHandlerInterface {
   public:
    EventHandlerInterface() = default;
    virtual ~EventHandlerInterface() = default;
  };

#ifdef __Fuchsia__
  // Collection of return types of FIDL calls in this protocol.
  class ResultOf final {
    ResultOf() = delete;

   public:
    class Add final : public ::fidl::Result {
     public:
      explicit Add(
          ::fidl::UnownedClientEnd<::fidl_test_nullable::SimpleProtocol>
              _client,
          int32_t a, int32_t b);
      Add(::fidl::UnownedClientEnd<::fidl_test_nullable::SimpleProtocol>
              _client,
          int32_t a, int32_t b, zx_time_t _deadline);
      explicit Add(const ::fidl::Result& result) : ::fidl::Result(result) {}
      Add(Add&&) = delete;
      Add(const Add&) = delete;
      Add* operator=(Add&&) = delete;
      Add* operator=(const Add&) = delete;
      ~Add() = default;

      AddResponse* Unwrap() {
        ZX_DEBUG_ASSERT(ok());
        return reinterpret_cast<AddResponse*>(bytes_.data());
      }
      const AddResponse* Unwrap() const {
        ZX_DEBUG_ASSERT(ok());
        return reinterpret_cast<const AddResponse*>(bytes_.data());
      }

      AddResponse& value() { return *Unwrap(); }
      const AddResponse& value() const { return *Unwrap(); }

      AddResponse* operator->() { return &value(); }
      const AddResponse* operator->() const { return &value(); }

      AddResponse& operator*() { return value(); }
      const AddResponse& operator*() const { return value(); }

     private:
      ::fidl::internal::InlineMessageBuffer<24> bytes_;
    };
  };

  // Collection of return types of FIDL calls in this protocol,
  // when the caller-allocate flavor or in-place call is used.
  class UnownedResultOf final {
    UnownedResultOf() = delete;

   public:
    class Add final : public ::fidl::Result {
     public:
      explicit Add(
          ::fidl::UnownedClientEnd<::fidl_test_nullable::SimpleProtocol>
              _client,
          uint8_t* _request_bytes, uint32_t _request_byte_capacity, int32_t a,
          int32_t b, uint8_t* _response_bytes,
          uint32_t _response_byte_capacity);
      explicit Add(const ::fidl::Result& result) : ::fidl::Result(result) {}
      Add(Add&&) = delete;
      Add(const Add&) = delete;
      Add* operator=(Add&&) = delete;
      Add* operator=(const Add&) = delete;
      ~Add() = default;

      AddResponse* Unwrap() {
        ZX_DEBUG_ASSERT(ok());
        return reinterpret_cast<AddResponse*>(bytes_);
      }
      const AddResponse* Unwrap() const {
        ZX_DEBUG_ASSERT(ok());
        return reinterpret_cast<const AddResponse*>(bytes_);
      }

      AddResponse& value() { return *Unwrap(); }
      const AddResponse& value() const { return *Unwrap(); }

      AddResponse* operator->() { return &value(); }
      const AddResponse* operator->() const { return &value(); }

      AddResponse& operator*() { return value(); }
      const AddResponse& operator*() const { return value(); }

     private:
      uint8_t* bytes_;
    };
  };

  // Methods to make a sync FIDL call directly on an unowned channel or a
  // const reference to a
  // |fidl::ClientEnd<::fidl_test_nullable::SimpleProtocol>|, avoiding setting
  // up a client.
  class Call final {
    Call() = delete;

   public:
    // Allocates 48 bytes of message buffer on the stack. No heap allocation
    // necessary.
    static ResultOf::Add Add(
        ::fidl::UnownedClientEnd<::fidl_test_nullable::SimpleProtocol>
            _client_end,
        int32_t a, int32_t b) {
      return ResultOf::Add(_client_end, a, b);
    }

    // Caller provides the backing storage for FIDL message via request and
    // response buffers.
    static UnownedResultOf::Add Add(
        ::fidl::UnownedClientEnd<::fidl_test_nullable::SimpleProtocol>
            _client_end,
        ::fidl::BufferSpan _request_buffer, int32_t a, int32_t b,
        ::fidl::BufferSpan _response_buffer) {
      return UnownedResultOf::Add(
          _client_end, _request_buffer.data, _request_buffer.capacity, a, b,
          _response_buffer.data, _response_buffer.capacity);
    }
  };

  class SyncClient final {
   public:
    SyncClient() = default;

    explicit SyncClient(::fidl::ClientEnd<SimpleProtocol> client_end)
        : client_end_(std::move(client_end)) {}

    ~SyncClient() = default;
    SyncClient(SyncClient&&) = default;
    SyncClient& operator=(SyncClient&&) = default;

    const ::fidl::ClientEnd<SimpleProtocol>& client_end() const {
      return client_end_;
    }
    ::fidl::ClientEnd<SimpleProtocol>& client_end() { return client_end_; }

    const ::zx::channel& channel() const { return client_end_.channel(); }
    ::zx::channel* mutable_channel() { return &client_end_.channel(); }

    // Allocates 48 bytes of message buffer on the stack. No heap allocation
    // necessary.
    ResultOf::Add Add(int32_t a, int32_t b) {
      return ResultOf::Add(this->client_end(), a, b);
    }

    // Caller provides the backing storage for FIDL message via request and
    // response buffers.
    UnownedResultOf::Add Add(::fidl::BufferSpan _request_buffer, int32_t a,
                             int32_t b, ::fidl::BufferSpan _response_buffer) {
      return UnownedResultOf::Add(
          this->client_end(), _request_buffer.data, _request_buffer.capacity, a,
          b, _response_buffer.data, _response_buffer.capacity);
    }

   private:
    ::fidl::ClientEnd<SimpleProtocol> client_end_;
  };

#ifdef __Fuchsia__
  class AsyncEventHandler;
  class AddResponseContext;
  class ClientImpl;
#endif

  // Pure-virtual interface to be implemented by a server.
  // This interface uses typed channels (i.e. |fidl::ClientEnd<SomeProtocol>|
  // and |fidl::ServerEnd<SomeProtocol>|).
  class Interface : public ::fidl::internal::IncomingMessageDispatcher {
   public:
    Interface() = default;
    virtual ~Interface() = default;

    // The marker protocol type within which this |Interface| class is defined.
    using _EnclosingProtocol = SimpleProtocol;

    class AddCompleterBase : public ::fidl::CompleterBase {
     public:
      // In the following methods, the return value indicates internal errors
      // during the reply, such as encoding or writing to the transport. Note
      // that any error will automatically lead to the destruction of the
      // binding, after which the |on_unbound| callback will be triggered with a
      // detailed reason.
      //
      // See //zircon/system/ulib/fidl/include/lib/fidl/llcpp/server.h.
      //
      // Because the reply status is identical to the unbinding status, it can
      // be safely ignored.
      ::fidl::Result Reply(int32_t sum);
      ::fidl::Result Reply(::fidl::BufferSpan _buffer, int32_t sum);

     protected:
      using ::fidl::CompleterBase::CompleterBase;
    };

    using AddCompleter = ::fidl::Completer<AddCompleterBase>;

    virtual void Add(int32_t a, int32_t b, AddCompleter::Sync& _completer) = 0;

   private:
    ::fidl::DispatchResult dispatch_message(fidl_incoming_msg_t* msg,
                                            ::fidl::Transaction* txn) final;
  };

  // Attempts to dispatch the incoming message to a handler function in the
  // server implementation. If there is no matching handler, it returns false,
  // leaving the message and transaction intact. In all other cases, it consumes
  // the message and returns true. It is possible to chain multiple TryDispatch
  // functions in this manner.
  static ::fidl::DispatchResult TryDispatch(Interface* impl,
                                            fidl_incoming_msg_t* msg,
                                            ::fidl::Transaction* txn);

  // Dispatches the incoming message to one of the handlers functions in the
  // protocol. If there is no matching handler, it closes all the handles in
  // |msg| and closes the channel with a |ZX_ERR_NOT_SUPPORTED| epitaph, before
  // returning false. The message should then be discarded.
  static ::fidl::DispatchResult Dispatch(Interface* impl,
                                         fidl_incoming_msg_t* msg,
                                         ::fidl::Transaction* txn);

  // Same as |Dispatch|, but takes a |void*| instead of |Interface*|.
  // Only used with |fidl::BindServer| to reduce template expansion.
  // Do not call this method manually. Use |Dispatch| instead.
  static ::fidl::DispatchResult TypeErasedDispatch(void* impl,
                                                   fidl_incoming_msg_t* msg,
                                                   ::fidl::Transaction* txn) {
    return Dispatch(static_cast<Interface*>(impl), msg, txn);
  }

#endif

  class EventSender;
  class WeakEventSender;
};
namespace wire {

extern "C" const fidl_type_t fidl_test_nullable_Int32WrapperTable;

struct Int32Wrapper {
  static constexpr const fidl_type_t* Type =
      &fidl_test_nullable_Int32WrapperTable;
  static constexpr uint32_t MaxNumHandles = 0;
  static constexpr uint32_t PrimarySize = 4;
  [[maybe_unused]] static constexpr uint32_t MaxOutOfLine = 0;
  static constexpr bool HasPointer = false;

  int32_t val = {};

  class UnownedEncodedMessage final {
   public:
    UnownedEncodedMessage(uint8_t* bytes, uint32_t byte_size,
                          Int32Wrapper* value)
        : message_(bytes, byte_size, sizeof(Int32Wrapper), nullptr, 0, 0) {
      message_.Encode<Int32Wrapper>(value);
    }
    UnownedEncodedMessage(const UnownedEncodedMessage&) = delete;
    UnownedEncodedMessage(UnownedEncodedMessage&&) = delete;
    UnownedEncodedMessage* operator=(const UnownedEncodedMessage&) = delete;
    UnownedEncodedMessage* operator=(UnownedEncodedMessage&&) = delete;

    zx_status_t status() const { return message_.status(); }
#ifdef __Fuchsia__
    const char* status_string() const { return message_.status_string(); }
#endif
    bool ok() const { return message_.status() == ZX_OK; }
    const char* error() const { return message_.error(); }

    ::fidl::OutgoingMessage& GetOutgoingMessage() { return message_; }

   private:
    ::fidl::OutgoingMessage message_;
  };

  class OwnedEncodedMessage final {
   public:
    explicit OwnedEncodedMessage(Int32Wrapper* value)
        : message_(bytes_.data(), bytes_.size(), value) {}
    OwnedEncodedMessage(const OwnedEncodedMessage&) = delete;
    OwnedEncodedMessage(OwnedEncodedMessage&&) = delete;
    OwnedEncodedMessage* operator=(const OwnedEncodedMessage&) = delete;
    OwnedEncodedMessage* operator=(OwnedEncodedMessage&&) = delete;

    zx_status_t status() const { return message_.status(); }
#ifdef __Fuchsia__
    const char* status_string() const { return message_.status_string(); }
#endif
    bool ok() const { return message_.ok(); }
    const char* error() const { return message_.error(); }

    ::fidl::OutgoingMessage& GetOutgoingMessage() {
      return message_.GetOutgoingMessage();
    }

   private:
    ::fidl::internal::InlineMessageBuffer<8> bytes_;
    UnownedEncodedMessage message_;
  };

  class DecodedMessage final : public ::fidl::internal::IncomingMessage {
   public:
    DecodedMessage(uint8_t* bytes, uint32_t byte_actual,
                   zx_handle_info_t* handles = nullptr,
                   uint32_t handle_actual = 0)
        : ::fidl::internal::IncomingMessage(bytes, byte_actual, handles,
                                            handle_actual) {
      Decode<struct Int32Wrapper>();
    }
    DecodedMessage(fidl_incoming_msg_t* msg)
        : ::fidl::internal::IncomingMessage(msg) {
      Decode<struct Int32Wrapper>();
    }
    DecodedMessage(const DecodedMessage&) = delete;
    DecodedMessage(DecodedMessage&&) = delete;
    DecodedMessage* operator=(const DecodedMessage&) = delete;
    DecodedMessage* operator=(DecodedMessage&&) = delete;

    struct Int32Wrapper* PrimaryObject() {
      ZX_DEBUG_ASSERT(ok());
      return reinterpret_cast<struct Int32Wrapper*>(bytes());
    }

    // Release the ownership of the decoded message. That means that the handles
    // won't be closed When the object is destroyed. After calling this method,
    // the DecodedMessage object should not be used anymore.
    void ReleasePrimaryObject() { ResetBytes(); }
  };
};

}  // namespace wire
}  // namespace fidl_test_nullable
namespace fidl {

template <>
struct IsFidlType<::fidl_test_nullable::wire::StructWithNullableVector>
    : public std::true_type {};
template <>
struct IsStruct<::fidl_test_nullable::wire::StructWithNullableVector>
    : public std::true_type {};
static_assert(std::is_standard_layout_v<
              ::fidl_test_nullable::wire::StructWithNullableVector>);
static_assert(offsetof(::fidl_test_nullable::wire::StructWithNullableVector,
                       val) == 0);
static_assert(
    sizeof(::fidl_test_nullable::wire::StructWithNullableVector) ==
    ::fidl_test_nullable::wire::StructWithNullableVector::PrimarySize);

template <>
struct IsFidlType<::fidl_test_nullable::wire::StructWithNullableUnion>
    : public std::true_type {};
template <>
struct IsStruct<::fidl_test_nullable::wire::StructWithNullableUnion>
    : public std::true_type {};
static_assert(std::is_standard_layout_v<
              ::fidl_test_nullable::wire::StructWithNullableUnion>);
static_assert(offsetof(::fidl_test_nullable::wire::StructWithNullableUnion,
                       val) == 0);
static_assert(sizeof(::fidl_test_nullable::wire::StructWithNullableUnion) ==
              ::fidl_test_nullable::wire::StructWithNullableUnion::PrimarySize);

template <>
struct IsFidlType<::fidl_test_nullable::wire::StructWithNullableStruct>
    : public std::true_type {};
template <>
struct IsStruct<::fidl_test_nullable::wire::StructWithNullableStruct>
    : public std::true_type {};
static_assert(std::is_standard_layout_v<
              ::fidl_test_nullable::wire::StructWithNullableStruct>);
static_assert(offsetof(::fidl_test_nullable::wire::StructWithNullableStruct,
                       val) == 0);
static_assert(
    sizeof(::fidl_test_nullable::wire::StructWithNullableStruct) ==
    ::fidl_test_nullable::wire::StructWithNullableStruct::PrimarySize);

template <>
struct IsFidlType<::fidl_test_nullable::wire::StructWithNullableString>
    : public std::true_type {};
template <>
struct IsStruct<::fidl_test_nullable::wire::StructWithNullableString>
    : public std::true_type {};
static_assert(std::is_standard_layout_v<
              ::fidl_test_nullable::wire::StructWithNullableString>);
static_assert(offsetof(::fidl_test_nullable::wire::StructWithNullableString,
                       val) == 0);
static_assert(
    sizeof(::fidl_test_nullable::wire::StructWithNullableString) ==
    ::fidl_test_nullable::wire::StructWithNullableString::PrimarySize);

#ifdef __Fuchsia__
template <>
struct IsFidlType<::fidl_test_nullable::wire::StructWithNullableRequest>
    : public std::true_type {};
template <>
struct IsStruct<::fidl_test_nullable::wire::StructWithNullableRequest>
    : public std::true_type {};
static_assert(std::is_standard_layout_v<
              ::fidl_test_nullable::wire::StructWithNullableRequest>);
static_assert(offsetof(::fidl_test_nullable::wire::StructWithNullableRequest,
                       val) == 0);
static_assert(
    sizeof(::fidl_test_nullable::wire::StructWithNullableRequest) ==
    ::fidl_test_nullable::wire::StructWithNullableRequest::PrimarySize);
#endif  // __Fuchsia__

#ifdef __Fuchsia__
template <>
struct IsFidlType<::fidl_test_nullable::wire::StructWithNullableProtocol>
    : public std::true_type {};
template <>
struct IsStruct<::fidl_test_nullable::wire::StructWithNullableProtocol>
    : public std::true_type {};
static_assert(std::is_standard_layout_v<
              ::fidl_test_nullable::wire::StructWithNullableProtocol>);
static_assert(offsetof(::fidl_test_nullable::wire::StructWithNullableProtocol,
                       val) == 0);
static_assert(
    sizeof(::fidl_test_nullable::wire::StructWithNullableProtocol) ==
    ::fidl_test_nullable::wire::StructWithNullableProtocol::PrimarySize);
#endif  // __Fuchsia__

#ifdef __Fuchsia__
template <>
struct IsFidlType<::fidl_test_nullable::wire::StructWithNullableHandle>
    : public std::true_type {};
template <>
struct IsStruct<::fidl_test_nullable::wire::StructWithNullableHandle>
    : public std::true_type {};
static_assert(std::is_standard_layout_v<
              ::fidl_test_nullable::wire::StructWithNullableHandle>);
static_assert(offsetof(::fidl_test_nullable::wire::StructWithNullableHandle,
                       val) == 0);
static_assert(
    sizeof(::fidl_test_nullable::wire::StructWithNullableHandle) ==
    ::fidl_test_nullable::wire::StructWithNullableHandle::PrimarySize);
#endif  // __Fuchsia__

template <>
struct IsFidlType<::fidl_test_nullable::SimpleProtocol::AddRequest>
    : public std::true_type {};
template <>
struct IsFidlMessage<::fidl_test_nullable::SimpleProtocol::AddRequest>
    : public std::true_type {};
static_assert(sizeof(::fidl_test_nullable::SimpleProtocol::AddRequest) ==
              ::fidl_test_nullable::SimpleProtocol::AddRequest::PrimarySize);
static_assert(offsetof(::fidl_test_nullable::SimpleProtocol::AddRequest, a) ==
              16);
static_assert(offsetof(::fidl_test_nullable::SimpleProtocol::AddRequest, b) ==
              20);

template <>
struct IsFidlType<::fidl_test_nullable::SimpleProtocol::AddResponse>
    : public std::true_type {};
template <>
struct IsFidlMessage<::fidl_test_nullable::SimpleProtocol::AddResponse>
    : public std::true_type {};
static_assert(sizeof(::fidl_test_nullable::SimpleProtocol::AddResponse) ==
              ::fidl_test_nullable::SimpleProtocol::AddResponse::PrimarySize);
static_assert(offsetof(::fidl_test_nullable::SimpleProtocol::AddResponse,
                       sum) == 16);

template <>
struct IsFidlType<::fidl_test_nullable::wire::SimpleUnion>
    : public std::true_type {};
template <>
struct IsUnion<::fidl_test_nullable::wire::SimpleUnion>
    : public std::true_type {};
static_assert(
    std::is_standard_layout_v<::fidl_test_nullable::wire::SimpleUnion>);

template <>
struct IsFidlType<::fidl_test_nullable::wire::Int32Wrapper>
    : public std::true_type {};
template <>
struct IsStruct<::fidl_test_nullable::wire::Int32Wrapper>
    : public std::true_type {};
static_assert(
    std::is_standard_layout_v<::fidl_test_nullable::wire::Int32Wrapper>);
static_assert(offsetof(::fidl_test_nullable::wire::Int32Wrapper, val) == 0);
static_assert(sizeof(::fidl_test_nullable::wire::Int32Wrapper) ==
              ::fidl_test_nullable::wire::Int32Wrapper::PrimarySize);
}  // namespace fidl
namespace fidl_test_nullable {

#ifdef __Fuchsia__
class SimpleProtocol::AsyncEventHandler
    : public SimpleProtocol::EventHandlerInterface {
 public:
  AsyncEventHandler() = default;

  virtual void Unbound(::fidl::UnbindInfo info) {}
};

class SimpleProtocol::AddResponseContext
    : public ::fidl::internal::ResponseContext {
 public:
  AddResponseContext();

  virtual void OnReply(SimpleProtocol::AddResponse* message) = 0;

 private:
  void OnReply(uint8_t* reply) override;
};

class SimpleProtocol::ClientImpl final : private ::fidl::internal::ClientBase {
 public:
  // Asynchronous variant of |SimpleProtocol.Add()|.
  // Allocates 24 bytes of request buffer on the stack. The callback is stored
  // on the heap.
  ::fidl::Result Add(int32_t a, int32_t b,
                     ::fit::callback<void(AddResponse* response)> _cb);

  // Asynchronous variant of |SimpleProtocol.Add()|.
  // Caller provides the backing storage for FIDL message via request buffer.
  // Ownership of |_context| is given unsafely to the binding until |OnError|
  // or |OnReply| are called on it.
  ::fidl::Result Add(::fidl::BufferSpan _request_buffer, int32_t a, int32_t b,
                     AddResponseContext* _context);

  // Synchronous variant of |SimpleProtocol.Add()|.
  // Allocates 48 bytes of message buffer on the stack. No heap allocation
  // necessary.
  ResultOf::Add Add_Sync(int32_t a, int32_t b);

  // Synchronous variant of |SimpleProtocol.Add()|.
  // Caller provides the backing storage for FIDL message via request and
  // response buffers.
  UnownedResultOf::Add Add_Sync(::fidl::BufferSpan _request_buffer, int32_t a,
                                int32_t b, ::fidl::BufferSpan _response_buffer);

  AsyncEventHandler* event_handler() const { return event_handler_.get(); }

 private:
  friend class ::fidl::Client<SimpleProtocol>;
  friend class ::fidl::internal::ControlBlock<SimpleProtocol>;

  explicit ClientImpl(std::shared_ptr<AsyncEventHandler> event_handler)
      : event_handler_(std::move(event_handler)) {}

  std::optional<::fidl::UnbindInfo> DispatchEvent(
      fidl_incoming_msg_t* msg) override;

  std::shared_ptr<AsyncEventHandler> event_handler_;
};
#endif

#ifdef __Fuchsia__
// |EventSender| owns a server endpoint of a channel speaking
// the SimpleProtocol protocol, and can send events in that protocol.
class SimpleProtocol::EventSender {
 public:
  // Constructs an event sender with an invalid channel.
  EventSender() = default;

  explicit EventSender(
      ::fidl::ServerEnd<::fidl_test_nullable::SimpleProtocol> server_end)
      : server_end_(std::move(server_end)) {}

  // The underlying server channel endpoint, which may be replaced at run-time.
  const ::fidl::ServerEnd<SimpleProtocol>& server_end() const {
    return server_end_;
  }
  ::fidl::ServerEnd<SimpleProtocol>& server_end() { return server_end_; }

  const ::zx::channel& channel() const { return server_end_.channel(); }
  ::zx::channel& channel() { return server_end_.channel(); }

  // Whether the underlying channel is valid.
  bool is_valid() const { return server_end_.is_valid(); }

 private:
  ::fidl::ServerEnd<SimpleProtocol> server_end_;
};

class SimpleProtocol::WeakEventSender {
 public:
 private:
  friend class ::fidl::ServerBindingRef<SimpleProtocol>;

  explicit WeakEventSender(
      std::weak_ptr<::fidl::internal::AsyncServerBinding<SimpleProtocol>>
          binding)
      : binding_(std::move(binding)) {}

  std::weak_ptr<::fidl::internal::AsyncServerBinding<SimpleProtocol>> binding_;
};
#endif

}  // namespace fidl_test_nullable
