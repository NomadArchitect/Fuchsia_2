// WARNING: This file is machine generated by fidlgen.

#pragma once

#include <lib/fidl/internal.h>
#include <lib/fidl/llcpp/array.h>
#include <lib/fidl/llcpp/coding.h>
#include <lib/fidl/llcpp/envelope.h>
#include <lib/fidl/llcpp/message.h>
#include <lib/fidl/llcpp/message_storage.h>
#include <lib/fidl/llcpp/object_view.h>
#include <lib/fidl/llcpp/result.h>
#include <lib/fidl/llcpp/string_view.h>
#include <lib/fidl/llcpp/traits.h>
#include <lib/fidl/llcpp/vector_view.h>
#include <lib/fidl/llcpp/wire_messaging.h>
#include <lib/fit/function.h>
#include <lib/stdcompat/optional.h>

#include <algorithm>
#include <cstddef>
#include <variant>
#ifdef __Fuchsia__
#include <lib/fidl/llcpp/client.h>
#include <lib/fidl/llcpp/client_end.h>
#include <lib/fidl/llcpp/connect_service.h>
#include <lib/fidl/llcpp/server.h>
#include <lib/fidl/llcpp/server_end.h>
#include <lib/fidl/llcpp/service_handler_interface.h>
#include <lib/fidl/llcpp/sync_call.h>
#include <lib/fidl/llcpp/transaction.h>
#include <lib/fidl/txn_header.h>
#include <lib/zx/channel.h>
#include <lib/zx/vmo.h>

#endif  // __Fuchsia__
#include <zircon/fidl.h>
#include <zx/llcpp/fidl.h>

namespace fidl_test_nullable {
namespace wire {
struct StructWithNullableVector;

struct StructWithNullableUnion;

struct StructWithNullableStruct;

struct StructWithNullableString;

struct StructWithNullableRequest;

struct StructWithNullableProtocol;

struct StructWithNullableHandle;

class SimpleUnion;
}  // namespace wire
class SimpleProtocol;
namespace wire {
struct Int32Wrapper;

extern "C" const fidl_type_t fidl_test_nullable_SimpleUnionTable;

class SimpleUnion {
 public:
  SimpleUnion()
      : ordinal_(::fidl_test_nullable::wire::SimpleUnion::Ordinal::Invalid),
        envelope_{} {}

  SimpleUnion(const SimpleUnion&) = default;
  SimpleUnion& operator=(const SimpleUnion&) = default;
  SimpleUnion(SimpleUnion&&) = default;
  SimpleUnion& operator=(SimpleUnion&&) = default;

  enum class Tag : fidl_xunion_tag_t {
    kA = 1,  // 0x1
    kB = 2,  // 0x2
  };

  bool has_invalid_tag() const {
    return ordinal_ ==
           ::fidl_test_nullable::wire::SimpleUnion::Ordinal::Invalid;
  }

  bool is_a() const {
    return ordinal_ == ::fidl_test_nullable::wire::SimpleUnion::Ordinal::kA;
  }

  static SimpleUnion WithA(::fidl::ObjectView<int32_t> val) {
    SimpleUnion result;
    result.set_a(val);
    return result;
  }

  template <typename... Args>
  static SimpleUnion WithA(::fidl::AnyArena& allocator, Args&&... args) {
    SimpleUnion result;
    result.set_a(
        ::fidl::ObjectView<int32_t>(allocator, std::forward<Args>(args)...));
    return result;
  }

  void set_a(::fidl::ObjectView<int32_t> elem) {
    ordinal_ = ::fidl_test_nullable::wire::SimpleUnion::Ordinal::kA;
    envelope_.data =
        ::fidl::ObjectView<void>::FromExternal(static_cast<void*>(elem.get()));
  }

  template <typename... Args>
  void set_a(::fidl::AnyArena& allocator, Args&&... args) {
    ordinal_ = ::fidl_test_nullable::wire::SimpleUnion::Ordinal::kA;
    set_a(::fidl::ObjectView<int32_t>(allocator, std::forward<Args>(args)...));
  }

  int32_t& mutable_a() {
    ZX_ASSERT(ordinal_ == ::fidl_test_nullable::wire::SimpleUnion::Ordinal::kA);
    return *static_cast<int32_t*>(envelope_.data.get());
  }
  const int32_t& a() const {
    ZX_ASSERT(ordinal_ == ::fidl_test_nullable::wire::SimpleUnion::Ordinal::kA);
    return *static_cast<int32_t*>(envelope_.data.get());
  }

  bool is_b() const {
    return ordinal_ == ::fidl_test_nullable::wire::SimpleUnion::Ordinal::kB;
  }

  static SimpleUnion WithB(::fidl::ObjectView<float> val) {
    SimpleUnion result;
    result.set_b(val);
    return result;
  }

  template <typename... Args>
  static SimpleUnion WithB(::fidl::AnyArena& allocator, Args&&... args) {
    SimpleUnion result;
    result.set_b(
        ::fidl::ObjectView<float>(allocator, std::forward<Args>(args)...));
    return result;
  }

  void set_b(::fidl::ObjectView<float> elem) {
    ordinal_ = ::fidl_test_nullable::wire::SimpleUnion::Ordinal::kB;
    envelope_.data =
        ::fidl::ObjectView<void>::FromExternal(static_cast<void*>(elem.get()));
  }

  template <typename... Args>
  void set_b(::fidl::AnyArena& allocator, Args&&... args) {
    ordinal_ = ::fidl_test_nullable::wire::SimpleUnion::Ordinal::kB;
    set_b(::fidl::ObjectView<float>(allocator, std::forward<Args>(args)...));
  }

  float& mutable_b() {
    ZX_ASSERT(ordinal_ == ::fidl_test_nullable::wire::SimpleUnion::Ordinal::kB);
    return *static_cast<float*>(envelope_.data.get());
  }
  const float& b() const {
    ZX_ASSERT(ordinal_ == ::fidl_test_nullable::wire::SimpleUnion::Ordinal::kB);
    return *static_cast<float*>(envelope_.data.get());
  }
  ::fidl_test_nullable::wire::SimpleUnion::Tag which() const {
    ZX_ASSERT(!has_invalid_tag());
    return static_cast<::fidl_test_nullable::wire::SimpleUnion::Tag>(ordinal_);
  }

  static constexpr const fidl_type_t* Type =
      &fidl_test_nullable_SimpleUnionTable;
  static constexpr uint32_t MaxNumHandles = 0;
  static constexpr uint32_t PrimarySize = 24;
  [[maybe_unused]] static constexpr uint32_t MaxOutOfLine = 8;
  static constexpr bool HasPointer = true;

 private:
  enum class Ordinal : fidl_xunion_tag_t {
    Invalid = 0,
    kA = 1,  // 0x1
    kB = 2,  // 0x2
  };

  static void SizeAndOffsetAssertionHelper();
  ::fidl_test_nullable::wire::SimpleUnion::Ordinal ordinal_;
  FIDL_ALIGNDECL
  ::fidl::Envelope<void> envelope_;
};

extern "C" const fidl_type_t fidl_test_nullable_StructWithNullableVectorTable;

struct StructWithNullableVector {
  static constexpr const fidl_type_t* Type =
      &fidl_test_nullable_StructWithNullableVectorTable;
  static constexpr uint32_t MaxNumHandles = 0;
  static constexpr uint32_t PrimarySize = 16;
  [[maybe_unused]] static constexpr uint32_t MaxOutOfLine = 4294967295;
  static constexpr bool HasPointer = true;

  ::fidl::VectorView<int32_t> val = {};

  class UnownedEncodedMessage final {
   public:
    UnownedEncodedMessage(uint8_t* backing_buffer, uint32_t backing_buffer_size,
                          StructWithNullableVector* value)
        : UnownedEncodedMessage(::fidl::internal::IovecBufferSize,
                                backing_buffer, backing_buffer_size, value) {}
    UnownedEncodedMessage(uint32_t iovec_capacity, uint8_t* backing_buffer,
                          uint32_t backing_buffer_size,
                          StructWithNullableVector* value)
        : message_(::fidl::OutgoingMessage::ConstructorArgs{
              .iovecs = iovecs_,
              .iovec_capacity = iovec_capacity,
              .backing_buffer = backing_buffer,
              .backing_buffer_capacity = backing_buffer_size,
          }) {
      ZX_ASSERT(iovec_capacity <= std::size(iovecs_));
      message_.Encode<StructWithNullableVector>(value);
    }
    UnownedEncodedMessage(const UnownedEncodedMessage&) = delete;
    UnownedEncodedMessage(UnownedEncodedMessage&&) = delete;
    UnownedEncodedMessage* operator=(const UnownedEncodedMessage&) = delete;
    UnownedEncodedMessage* operator=(UnownedEncodedMessage&&) = delete;

    zx_status_t status() const { return message_.status(); }
#ifdef __Fuchsia__
    const char* status_string() const { return message_.status_string(); }
#endif  // __Fuchsia__
    bool ok() const { return message_.status() == ZX_OK; }
    std::string FormatDescription() const {
      return message_.FormatDescription();
    }
    const char* lossy_description() const {
      return message_.lossy_description();
    }
    const ::fidl::Result& error() const { return message_.error(); }

    ::fidl::OutgoingMessage& GetOutgoingMessage() { return message_; }

   private:
    ::fidl::internal::IovecBuffer iovecs_;
    ::fidl::OutgoingMessage message_;
  };

  class OwnedEncodedMessage final {
   public:
    explicit OwnedEncodedMessage(StructWithNullableVector* value)
        : message_(1u, backing_buffer_.data(), static_cast<uint32_t>(backing_buffer_.size()), value) {}
    // Internal constructor.
    explicit OwnedEncodedMessage(
        ::fidl::internal::AllowUnownedInputRef allow_unowned,
        StructWithNullableVector* value)
        : message_(::fidl::internal::IovecBufferSize, backing_buffer_.data(),
                   static_cast<uint32_t>(backing_buffer_.size()), value) {}
    OwnedEncodedMessage(const OwnedEncodedMessage&) = delete;
    OwnedEncodedMessage(OwnedEncodedMessage&&) = delete;
    OwnedEncodedMessage* operator=(const OwnedEncodedMessage&) = delete;
    OwnedEncodedMessage* operator=(OwnedEncodedMessage&&) = delete;

    zx_status_t status() const { return message_.status(); }
#ifdef __Fuchsia__
    const char* status_string() const { return message_.status_string(); }
#endif  // __Fuchsia__
    bool ok() const { return message_.ok(); }
    std::string FormatDescription() const {
      return message_.FormatDescription();
    }
    const char* lossy_description() const {
      return message_.lossy_description();
    }
    const ::fidl::Result& error() const { return message_.error(); }

    ::fidl::OutgoingMessage& GetOutgoingMessage() {
      return message_.GetOutgoingMessage();
    }

   private:
    ::fidl::internal::BoxedMessageBuffer<ZX_CHANNEL_MAX_MSG_BYTES>
        backing_buffer_;
    UnownedEncodedMessage message_;
  };

  class DecodedMessage final
      : public ::fidl::internal::DecodedMessageBase<StructWithNullableVector> {
   public:
    using DecodedMessageBase<StructWithNullableVector>::DecodedMessageBase;

    DecodedMessage(uint8_t* bytes, uint32_t byte_actual,
                   zx_handle_info_t* handles = nullptr,
                   uint32_t handle_actual = 0)
        : DecodedMessageBase(
              ::fidl::internal::kLLCPPInMemoryWireFormatVersion,
              ::fidl::IncomingMessage(
                  bytes, byte_actual, handles, handle_actual,
                  ::fidl::IncomingMessage::kSkipMessageHeaderValidation)) {}

    // Internal constructor for specifying a specific wire format version.
    DecodedMessage(::fidl::internal::WireFormatVersion wire_format_version,
                   uint8_t* bytes, uint32_t byte_actual,
                   zx_handle_info_t* handles = nullptr,
                   uint32_t handle_actual = 0)
        : DecodedMessageBase(
              wire_format_version,
              ::fidl::IncomingMessage(
                  bytes, byte_actual, handles, handle_actual,
                  ::fidl::IncomingMessage::kSkipMessageHeaderValidation)) {}

    DecodedMessage(const fidl_incoming_msg_t* c_msg)
        : DecodedMessage(reinterpret_cast<uint8_t*>(c_msg->bytes),
                         c_msg->num_bytes, c_msg->handles, c_msg->num_handles) {
    }

    // Internal constructor for specifying a specific wire format version.
    DecodedMessage(::fidl::internal::WireFormatVersion wire_format_version,
                   const fidl_incoming_msg_t* c_msg)
        : DecodedMessage(wire_format_version,
                         reinterpret_cast<uint8_t*>(c_msg->bytes),
                         c_msg->num_bytes, c_msg->handles, c_msg->num_handles) {
    }

    StructWithNullableVector* PrimaryObject() {
      ZX_DEBUG_ASSERT(ok());
      return reinterpret_cast<StructWithNullableVector*>(bytes());
    }

    // Release the ownership of the decoded message. That means that the handles
    // won't be closed When the object is destroyed. After calling this method,
    // the |DecodedMessage| object should not be used anymore.
    void ReleasePrimaryObject() { ResetBytes(); }
  };
};

extern "C" const fidl_type_t fidl_test_nullable_StructWithNullableUnionTable;

struct StructWithNullableUnion {
  static constexpr const fidl_type_t* Type =
      &fidl_test_nullable_StructWithNullableUnionTable;
  static constexpr uint32_t MaxNumHandles = 0;
  static constexpr uint32_t PrimarySize = 24;
  [[maybe_unused]] static constexpr uint32_t MaxOutOfLine = 8;
  static constexpr bool HasPointer = true;

  ::fidl_test_nullable::wire::SimpleUnion val = {};

  class UnownedEncodedMessage final {
   public:
    UnownedEncodedMessage(uint8_t* backing_buffer, uint32_t backing_buffer_size,
                          StructWithNullableUnion* value)
        : UnownedEncodedMessage(::fidl::internal::IovecBufferSize,
                                backing_buffer, backing_buffer_size, value) {}
    UnownedEncodedMessage(uint32_t iovec_capacity, uint8_t* backing_buffer,
                          uint32_t backing_buffer_size,
                          StructWithNullableUnion* value)
        : message_(::fidl::OutgoingMessage::ConstructorArgs{
              .iovecs = iovecs_,
              .iovec_capacity = iovec_capacity,
              .backing_buffer = backing_buffer,
              .backing_buffer_capacity = backing_buffer_size,
          }) {
      ZX_ASSERT(iovec_capacity <= std::size(iovecs_));
      message_.Encode<StructWithNullableUnion>(value);
    }
    UnownedEncodedMessage(const UnownedEncodedMessage&) = delete;
    UnownedEncodedMessage(UnownedEncodedMessage&&) = delete;
    UnownedEncodedMessage* operator=(const UnownedEncodedMessage&) = delete;
    UnownedEncodedMessage* operator=(UnownedEncodedMessage&&) = delete;

    zx_status_t status() const { return message_.status(); }
#ifdef __Fuchsia__
    const char* status_string() const { return message_.status_string(); }
#endif  // __Fuchsia__
    bool ok() const { return message_.status() == ZX_OK; }
    std::string FormatDescription() const {
      return message_.FormatDescription();
    }
    const char* lossy_description() const {
      return message_.lossy_description();
    }
    const ::fidl::Result& error() const { return message_.error(); }

    ::fidl::OutgoingMessage& GetOutgoingMessage() { return message_; }

   private:
    ::fidl::internal::IovecBuffer iovecs_;
    ::fidl::OutgoingMessage message_;
  };

  class OwnedEncodedMessage final {
   public:
    explicit OwnedEncodedMessage(StructWithNullableUnion* value)
        : message_(1u, backing_buffer_.data(), static_cast<uint32_t>(backing_buffer_.size()), value) {}
    // Internal constructor.
    explicit OwnedEncodedMessage(
        ::fidl::internal::AllowUnownedInputRef allow_unowned,
        StructWithNullableUnion* value)
        : message_(::fidl::internal::IovecBufferSize, backing_buffer_.data(),
                   static_cast<uint32_t>(backing_buffer_.size()), value) {}
    OwnedEncodedMessage(const OwnedEncodedMessage&) = delete;
    OwnedEncodedMessage(OwnedEncodedMessage&&) = delete;
    OwnedEncodedMessage* operator=(const OwnedEncodedMessage&) = delete;
    OwnedEncodedMessage* operator=(OwnedEncodedMessage&&) = delete;

    zx_status_t status() const { return message_.status(); }
#ifdef __Fuchsia__
    const char* status_string() const { return message_.status_string(); }
#endif  // __Fuchsia__
    bool ok() const { return message_.ok(); }
    std::string FormatDescription() const {
      return message_.FormatDescription();
    }
    const char* lossy_description() const {
      return message_.lossy_description();
    }
    const ::fidl::Result& error() const { return message_.error(); }

    ::fidl::OutgoingMessage& GetOutgoingMessage() {
      return message_.GetOutgoingMessage();
    }

   private:
    ::fidl::internal::InlineMessageBuffer<32> backing_buffer_;
    UnownedEncodedMessage message_;
  };

  class DecodedMessage final
      : public ::fidl::internal::DecodedMessageBase<StructWithNullableUnion> {
   public:
    using DecodedMessageBase<StructWithNullableUnion>::DecodedMessageBase;

    DecodedMessage(uint8_t* bytes, uint32_t byte_actual,
                   zx_handle_info_t* handles = nullptr,
                   uint32_t handle_actual = 0)
        : DecodedMessageBase(
              ::fidl::internal::kLLCPPInMemoryWireFormatVersion,
              ::fidl::IncomingMessage(
                  bytes, byte_actual, handles, handle_actual,
                  ::fidl::IncomingMessage::kSkipMessageHeaderValidation)) {}

    // Internal constructor for specifying a specific wire format version.
    DecodedMessage(::fidl::internal::WireFormatVersion wire_format_version,
                   uint8_t* bytes, uint32_t byte_actual,
                   zx_handle_info_t* handles = nullptr,
                   uint32_t handle_actual = 0)
        : DecodedMessageBase(
              wire_format_version,
              ::fidl::IncomingMessage(
                  bytes, byte_actual, handles, handle_actual,
                  ::fidl::IncomingMessage::kSkipMessageHeaderValidation)) {}

    DecodedMessage(const fidl_incoming_msg_t* c_msg)
        : DecodedMessage(reinterpret_cast<uint8_t*>(c_msg->bytes),
                         c_msg->num_bytes, c_msg->handles, c_msg->num_handles) {
    }

    // Internal constructor for specifying a specific wire format version.
    DecodedMessage(::fidl::internal::WireFormatVersion wire_format_version,
                   const fidl_incoming_msg_t* c_msg)
        : DecodedMessage(wire_format_version,
                         reinterpret_cast<uint8_t*>(c_msg->bytes),
                         c_msg->num_bytes, c_msg->handles, c_msg->num_handles) {
    }

    StructWithNullableUnion* PrimaryObject() {
      ZX_DEBUG_ASSERT(ok());
      return reinterpret_cast<StructWithNullableUnion*>(bytes());
    }

    // Release the ownership of the decoded message. That means that the handles
    // won't be closed When the object is destroyed. After calling this method,
    // the |DecodedMessage| object should not be used anymore.
    void ReleasePrimaryObject() { ResetBytes(); }
  };
};

extern "C" const fidl_type_t fidl_test_nullable_StructWithNullableStructTable;

struct StructWithNullableStruct {
  static constexpr const fidl_type_t* Type =
      &fidl_test_nullable_StructWithNullableStructTable;
  static constexpr uint32_t MaxNumHandles = 0;
  static constexpr uint32_t PrimarySize = 8;
  [[maybe_unused]] static constexpr uint32_t MaxOutOfLine = 8;
  static constexpr bool HasPointer = true;

  ::fidl::ObjectView<::fidl_test_nullable::wire::Int32Wrapper> val = {};

  class UnownedEncodedMessage final {
   public:
    UnownedEncodedMessage(uint8_t* backing_buffer, uint32_t backing_buffer_size,
                          StructWithNullableStruct* value)
        : UnownedEncodedMessage(::fidl::internal::IovecBufferSize,
                                backing_buffer, backing_buffer_size, value) {}
    UnownedEncodedMessage(uint32_t iovec_capacity, uint8_t* backing_buffer,
                          uint32_t backing_buffer_size,
                          StructWithNullableStruct* value)
        : message_(::fidl::OutgoingMessage::ConstructorArgs{
              .iovecs = iovecs_,
              .iovec_capacity = iovec_capacity,
              .backing_buffer = backing_buffer,
              .backing_buffer_capacity = backing_buffer_size,
          }) {
      ZX_ASSERT(iovec_capacity <= std::size(iovecs_));
      message_.Encode<StructWithNullableStruct>(value);
    }
    UnownedEncodedMessage(const UnownedEncodedMessage&) = delete;
    UnownedEncodedMessage(UnownedEncodedMessage&&) = delete;
    UnownedEncodedMessage* operator=(const UnownedEncodedMessage&) = delete;
    UnownedEncodedMessage* operator=(UnownedEncodedMessage&&) = delete;

    zx_status_t status() const { return message_.status(); }
#ifdef __Fuchsia__
    const char* status_string() const { return message_.status_string(); }
#endif  // __Fuchsia__
    bool ok() const { return message_.status() == ZX_OK; }
    std::string FormatDescription() const {
      return message_.FormatDescription();
    }
    const char* lossy_description() const {
      return message_.lossy_description();
    }
    const ::fidl::Result& error() const { return message_.error(); }

    ::fidl::OutgoingMessage& GetOutgoingMessage() { return message_; }

   private:
    ::fidl::internal::IovecBuffer iovecs_;
    ::fidl::OutgoingMessage message_;
  };

  class OwnedEncodedMessage final {
   public:
    explicit OwnedEncodedMessage(StructWithNullableStruct* value)
        : message_(1u, backing_buffer_.data(), static_cast<uint32_t>(backing_buffer_.size()), value) {}
    // Internal constructor.
    explicit OwnedEncodedMessage(
        ::fidl::internal::AllowUnownedInputRef allow_unowned,
        StructWithNullableStruct* value)
        : message_(::fidl::internal::IovecBufferSize, backing_buffer_.data(),
                   static_cast<uint32_t>(backing_buffer_.size()), value) {}
    OwnedEncodedMessage(const OwnedEncodedMessage&) = delete;
    OwnedEncodedMessage(OwnedEncodedMessage&&) = delete;
    OwnedEncodedMessage* operator=(const OwnedEncodedMessage&) = delete;
    OwnedEncodedMessage* operator=(OwnedEncodedMessage&&) = delete;

    zx_status_t status() const { return message_.status(); }
#ifdef __Fuchsia__
    const char* status_string() const { return message_.status_string(); }
#endif  // __Fuchsia__
    bool ok() const { return message_.ok(); }
    std::string FormatDescription() const {
      return message_.FormatDescription();
    }
    const char* lossy_description() const {
      return message_.lossy_description();
    }
    const ::fidl::Result& error() const { return message_.error(); }

    ::fidl::OutgoingMessage& GetOutgoingMessage() {
      return message_.GetOutgoingMessage();
    }

   private:
    ::fidl::internal::InlineMessageBuffer<16> backing_buffer_;
    UnownedEncodedMessage message_;
  };

  class DecodedMessage final
      : public ::fidl::internal::DecodedMessageBase<StructWithNullableStruct> {
   public:
    using DecodedMessageBase<StructWithNullableStruct>::DecodedMessageBase;

    DecodedMessage(uint8_t* bytes, uint32_t byte_actual,
                   zx_handle_info_t* handles = nullptr,
                   uint32_t handle_actual = 0)
        : DecodedMessageBase(
              ::fidl::internal::kLLCPPInMemoryWireFormatVersion,
              ::fidl::IncomingMessage(
                  bytes, byte_actual, handles, handle_actual,
                  ::fidl::IncomingMessage::kSkipMessageHeaderValidation)) {}

    // Internal constructor for specifying a specific wire format version.
    DecodedMessage(::fidl::internal::WireFormatVersion wire_format_version,
                   uint8_t* bytes, uint32_t byte_actual,
                   zx_handle_info_t* handles = nullptr,
                   uint32_t handle_actual = 0)
        : DecodedMessageBase(
              wire_format_version,
              ::fidl::IncomingMessage(
                  bytes, byte_actual, handles, handle_actual,
                  ::fidl::IncomingMessage::kSkipMessageHeaderValidation)) {}

    DecodedMessage(const fidl_incoming_msg_t* c_msg)
        : DecodedMessage(reinterpret_cast<uint8_t*>(c_msg->bytes),
                         c_msg->num_bytes, c_msg->handles, c_msg->num_handles) {
    }

    // Internal constructor for specifying a specific wire format version.
    DecodedMessage(::fidl::internal::WireFormatVersion wire_format_version,
                   const fidl_incoming_msg_t* c_msg)
        : DecodedMessage(wire_format_version,
                         reinterpret_cast<uint8_t*>(c_msg->bytes),
                         c_msg->num_bytes, c_msg->handles, c_msg->num_handles) {
    }

    StructWithNullableStruct* PrimaryObject() {
      ZX_DEBUG_ASSERT(ok());
      return reinterpret_cast<StructWithNullableStruct*>(bytes());
    }

    // Release the ownership of the decoded message. That means that the handles
    // won't be closed When the object is destroyed. After calling this method,
    // the |DecodedMessage| object should not be used anymore.
    void ReleasePrimaryObject() { ResetBytes(); }
  };
};

extern "C" const fidl_type_t fidl_test_nullable_StructWithNullableStringTable;

struct StructWithNullableString {
  static constexpr const fidl_type_t* Type =
      &fidl_test_nullable_StructWithNullableStringTable;
  static constexpr uint32_t MaxNumHandles = 0;
  static constexpr uint32_t PrimarySize = 16;
  [[maybe_unused]] static constexpr uint32_t MaxOutOfLine = 4294967295;
  static constexpr bool HasPointer = true;

  ::fidl::StringView val = {};

  class UnownedEncodedMessage final {
   public:
    UnownedEncodedMessage(uint8_t* backing_buffer, uint32_t backing_buffer_size,
                          StructWithNullableString* value)
        : UnownedEncodedMessage(::fidl::internal::IovecBufferSize,
                                backing_buffer, backing_buffer_size, value) {}
    UnownedEncodedMessage(uint32_t iovec_capacity, uint8_t* backing_buffer,
                          uint32_t backing_buffer_size,
                          StructWithNullableString* value)
        : message_(::fidl::OutgoingMessage::ConstructorArgs{
              .iovecs = iovecs_,
              .iovec_capacity = iovec_capacity,
              .backing_buffer = backing_buffer,
              .backing_buffer_capacity = backing_buffer_size,
          }) {
      ZX_ASSERT(iovec_capacity <= std::size(iovecs_));
      message_.Encode<StructWithNullableString>(value);
    }
    UnownedEncodedMessage(const UnownedEncodedMessage&) = delete;
    UnownedEncodedMessage(UnownedEncodedMessage&&) = delete;
    UnownedEncodedMessage* operator=(const UnownedEncodedMessage&) = delete;
    UnownedEncodedMessage* operator=(UnownedEncodedMessage&&) = delete;

    zx_status_t status() const { return message_.status(); }
#ifdef __Fuchsia__
    const char* status_string() const { return message_.status_string(); }
#endif  // __Fuchsia__
    bool ok() const { return message_.status() == ZX_OK; }
    std::string FormatDescription() const {
      return message_.FormatDescription();
    }
    const char* lossy_description() const {
      return message_.lossy_description();
    }
    const ::fidl::Result& error() const { return message_.error(); }

    ::fidl::OutgoingMessage& GetOutgoingMessage() { return message_; }

   private:
    ::fidl::internal::IovecBuffer iovecs_;
    ::fidl::OutgoingMessage message_;
  };

  class OwnedEncodedMessage final {
   public:
    explicit OwnedEncodedMessage(StructWithNullableString* value)
        : message_(1u, backing_buffer_.data(), static_cast<uint32_t>(backing_buffer_.size()), value) {}
    // Internal constructor.
    explicit OwnedEncodedMessage(
        ::fidl::internal::AllowUnownedInputRef allow_unowned,
        StructWithNullableString* value)
        : message_(::fidl::internal::IovecBufferSize, backing_buffer_.data(),
                   static_cast<uint32_t>(backing_buffer_.size()), value) {}
    OwnedEncodedMessage(const OwnedEncodedMessage&) = delete;
    OwnedEncodedMessage(OwnedEncodedMessage&&) = delete;
    OwnedEncodedMessage* operator=(const OwnedEncodedMessage&) = delete;
    OwnedEncodedMessage* operator=(OwnedEncodedMessage&&) = delete;

    zx_status_t status() const { return message_.status(); }
#ifdef __Fuchsia__
    const char* status_string() const { return message_.status_string(); }
#endif  // __Fuchsia__
    bool ok() const { return message_.ok(); }
    std::string FormatDescription() const {
      return message_.FormatDescription();
    }
    const char* lossy_description() const {
      return message_.lossy_description();
    }
    const ::fidl::Result& error() const { return message_.error(); }

    ::fidl::OutgoingMessage& GetOutgoingMessage() {
      return message_.GetOutgoingMessage();
    }

   private:
    ::fidl::internal::BoxedMessageBuffer<ZX_CHANNEL_MAX_MSG_BYTES>
        backing_buffer_;
    UnownedEncodedMessage message_;
  };

  class DecodedMessage final
      : public ::fidl::internal::DecodedMessageBase<StructWithNullableString> {
   public:
    using DecodedMessageBase<StructWithNullableString>::DecodedMessageBase;

    DecodedMessage(uint8_t* bytes, uint32_t byte_actual,
                   zx_handle_info_t* handles = nullptr,
                   uint32_t handle_actual = 0)
        : DecodedMessageBase(
              ::fidl::internal::kLLCPPInMemoryWireFormatVersion,
              ::fidl::IncomingMessage(
                  bytes, byte_actual, handles, handle_actual,
                  ::fidl::IncomingMessage::kSkipMessageHeaderValidation)) {}

    // Internal constructor for specifying a specific wire format version.
    DecodedMessage(::fidl::internal::WireFormatVersion wire_format_version,
                   uint8_t* bytes, uint32_t byte_actual,
                   zx_handle_info_t* handles = nullptr,
                   uint32_t handle_actual = 0)
        : DecodedMessageBase(
              wire_format_version,
              ::fidl::IncomingMessage(
                  bytes, byte_actual, handles, handle_actual,
                  ::fidl::IncomingMessage::kSkipMessageHeaderValidation)) {}

    DecodedMessage(const fidl_incoming_msg_t* c_msg)
        : DecodedMessage(reinterpret_cast<uint8_t*>(c_msg->bytes),
                         c_msg->num_bytes, c_msg->handles, c_msg->num_handles) {
    }

    // Internal constructor for specifying a specific wire format version.
    DecodedMessage(::fidl::internal::WireFormatVersion wire_format_version,
                   const fidl_incoming_msg_t* c_msg)
        : DecodedMessage(wire_format_version,
                         reinterpret_cast<uint8_t*>(c_msg->bytes),
                         c_msg->num_bytes, c_msg->handles, c_msg->num_handles) {
    }

    StructWithNullableString* PrimaryObject() {
      ZX_DEBUG_ASSERT(ok());
      return reinterpret_cast<StructWithNullableString*>(bytes());
    }

    // Release the ownership of the decoded message. That means that the handles
    // won't be closed When the object is destroyed. After calling this method,
    // the |DecodedMessage| object should not be used anymore.
    void ReleasePrimaryObject() { ResetBytes(); }
  };
};

#ifdef __Fuchsia__

extern "C" const fidl_type_t fidl_test_nullable_StructWithNullableRequestTable;

struct StructWithNullableRequest {
  static constexpr const fidl_type_t* Type =
      &fidl_test_nullable_StructWithNullableRequestTable;
  static constexpr uint32_t MaxNumHandles = 1;
  static constexpr uint32_t PrimarySize = 4;
  [[maybe_unused]] static constexpr uint32_t MaxOutOfLine = 0;
  static constexpr bool HasPointer = false;

  ::fidl::ServerEnd<::fidl_test_nullable::SimpleProtocol> val = {};

  void _CloseHandles();

  class UnownedEncodedMessage final {
   public:
    UnownedEncodedMessage(uint8_t* backing_buffer, uint32_t backing_buffer_size,
                          StructWithNullableRequest* value)
        : UnownedEncodedMessage(::fidl::internal::IovecBufferSize,
                                backing_buffer, backing_buffer_size, value) {}
    UnownedEncodedMessage(uint32_t iovec_capacity, uint8_t* backing_buffer,
                          uint32_t backing_buffer_size,
                          StructWithNullableRequest* value)
        : message_(::fidl::OutgoingMessage::ConstructorArgs{
              .iovecs = iovecs_,
              .iovec_capacity = iovec_capacity,
              .handles = handles_,
              .handle_capacity =
                  std::min(ZX_CHANNEL_MAX_MSG_HANDLES, MaxNumHandles),
              .backing_buffer = backing_buffer,
              .backing_buffer_capacity = backing_buffer_size,
          }) {
      ZX_ASSERT(iovec_capacity <= std::size(iovecs_));
      message_.Encode<StructWithNullableRequest>(value);
    }
    UnownedEncodedMessage(const UnownedEncodedMessage&) = delete;
    UnownedEncodedMessage(UnownedEncodedMessage&&) = delete;
    UnownedEncodedMessage* operator=(const UnownedEncodedMessage&) = delete;
    UnownedEncodedMessage* operator=(UnownedEncodedMessage&&) = delete;

    zx_status_t status() const { return message_.status(); }
    const char* status_string() const { return message_.status_string(); }
    bool ok() const { return message_.status() == ZX_OK; }
    std::string FormatDescription() const {
      return message_.FormatDescription();
    }
    const char* lossy_description() const {
      return message_.lossy_description();
    }
    const ::fidl::Result& error() const { return message_.error(); }

    ::fidl::OutgoingMessage& GetOutgoingMessage() { return message_; }

   private:
    ::fidl::internal::IovecBuffer iovecs_;
    zx_handle_disposition_t
        handles_[std::min(ZX_CHANNEL_MAX_MSG_HANDLES, MaxNumHandles)];
    ::fidl::OutgoingMessage message_;
  };

  class OwnedEncodedMessage final {
   public:
    explicit OwnedEncodedMessage(StructWithNullableRequest* value)
        : message_(1u, backing_buffer_.data(), static_cast<uint32_t>(backing_buffer_.size()), value) {}
    // Internal constructor.
    explicit OwnedEncodedMessage(
        ::fidl::internal::AllowUnownedInputRef allow_unowned,
        StructWithNullableRequest* value)
        : message_(::fidl::internal::IovecBufferSize, backing_buffer_.data(),
                   static_cast<uint32_t>(backing_buffer_.size()), value) {}
    OwnedEncodedMessage(const OwnedEncodedMessage&) = delete;
    OwnedEncodedMessage(OwnedEncodedMessage&&) = delete;
    OwnedEncodedMessage* operator=(const OwnedEncodedMessage&) = delete;
    OwnedEncodedMessage* operator=(OwnedEncodedMessage&&) = delete;

    zx_status_t status() const { return message_.status(); }
    const char* status_string() const { return message_.status_string(); }
    bool ok() const { return message_.ok(); }
    std::string FormatDescription() const {
      return message_.FormatDescription();
    }
    const char* lossy_description() const {
      return message_.lossy_description();
    }
    const ::fidl::Result& error() const { return message_.error(); }

    ::fidl::OutgoingMessage& GetOutgoingMessage() {
      return message_.GetOutgoingMessage();
    }

   private:
    ::fidl::internal::InlineMessageBuffer<8> backing_buffer_;
    UnownedEncodedMessage message_;
  };

  class DecodedMessage final
      : public ::fidl::internal::DecodedMessageBase<StructWithNullableRequest> {
   public:
    using DecodedMessageBase<StructWithNullableRequest>::DecodedMessageBase;

    DecodedMessage(uint8_t* bytes, uint32_t byte_actual,
                   zx_handle_info_t* handles = nullptr,
                   uint32_t handle_actual = 0)
        : DecodedMessageBase(
              ::fidl::internal::kLLCPPInMemoryWireFormatVersion,
              ::fidl::IncomingMessage(
                  bytes, byte_actual, handles, handle_actual,
                  ::fidl::IncomingMessage::kSkipMessageHeaderValidation)) {}

    // Internal constructor for specifying a specific wire format version.
    DecodedMessage(::fidl::internal::WireFormatVersion wire_format_version,
                   uint8_t* bytes, uint32_t byte_actual,
                   zx_handle_info_t* handles = nullptr,
                   uint32_t handle_actual = 0)
        : DecodedMessageBase(
              wire_format_version,
              ::fidl::IncomingMessage(
                  bytes, byte_actual, handles, handle_actual,
                  ::fidl::IncomingMessage::kSkipMessageHeaderValidation)) {}

    DecodedMessage(const fidl_incoming_msg_t* c_msg)
        : DecodedMessage(reinterpret_cast<uint8_t*>(c_msg->bytes),
                         c_msg->num_bytes, c_msg->handles, c_msg->num_handles) {
    }

    // Internal constructor for specifying a specific wire format version.
    DecodedMessage(::fidl::internal::WireFormatVersion wire_format_version,
                   const fidl_incoming_msg_t* c_msg)
        : DecodedMessage(wire_format_version,
                         reinterpret_cast<uint8_t*>(c_msg->bytes),
                         c_msg->num_bytes, c_msg->handles, c_msg->num_handles) {
    }
    ~DecodedMessage() {
      if (ok() && (PrimaryObject() != nullptr)) {
        PrimaryObject()->_CloseHandles();
      }
    }

    StructWithNullableRequest* PrimaryObject() {
      ZX_DEBUG_ASSERT(ok());
      return reinterpret_cast<StructWithNullableRequest*>(bytes());
    }

    // Release the ownership of the decoded message. That means that the handles
    // won't be closed When the object is destroyed. After calling this method,
    // the |DecodedMessage| object should not be used anymore.
    void ReleasePrimaryObject() { ResetBytes(); }
  };
};
#endif  // __Fuchsia__

#ifdef __Fuchsia__

extern "C" const fidl_type_t fidl_test_nullable_StructWithNullableProtocolTable;

struct StructWithNullableProtocol {
  static constexpr const fidl_type_t* Type =
      &fidl_test_nullable_StructWithNullableProtocolTable;
  static constexpr uint32_t MaxNumHandles = 1;
  static constexpr uint32_t PrimarySize = 4;
  [[maybe_unused]] static constexpr uint32_t MaxOutOfLine = 0;
  static constexpr bool HasPointer = false;

  ::fidl::ClientEnd<::fidl_test_nullable::SimpleProtocol> val = {};

  void _CloseHandles();

  class UnownedEncodedMessage final {
   public:
    UnownedEncodedMessage(uint8_t* backing_buffer, uint32_t backing_buffer_size,
                          StructWithNullableProtocol* value)
        : UnownedEncodedMessage(::fidl::internal::IovecBufferSize,
                                backing_buffer, backing_buffer_size, value) {}
    UnownedEncodedMessage(uint32_t iovec_capacity, uint8_t* backing_buffer,
                          uint32_t backing_buffer_size,
                          StructWithNullableProtocol* value)
        : message_(::fidl::OutgoingMessage::ConstructorArgs{
              .iovecs = iovecs_,
              .iovec_capacity = iovec_capacity,
              .handles = handles_,
              .handle_capacity =
                  std::min(ZX_CHANNEL_MAX_MSG_HANDLES, MaxNumHandles),
              .backing_buffer = backing_buffer,
              .backing_buffer_capacity = backing_buffer_size,
          }) {
      ZX_ASSERT(iovec_capacity <= std::size(iovecs_));
      message_.Encode<StructWithNullableProtocol>(value);
    }
    UnownedEncodedMessage(const UnownedEncodedMessage&) = delete;
    UnownedEncodedMessage(UnownedEncodedMessage&&) = delete;
    UnownedEncodedMessage* operator=(const UnownedEncodedMessage&) = delete;
    UnownedEncodedMessage* operator=(UnownedEncodedMessage&&) = delete;

    zx_status_t status() const { return message_.status(); }
    const char* status_string() const { return message_.status_string(); }
    bool ok() const { return message_.status() == ZX_OK; }
    std::string FormatDescription() const {
      return message_.FormatDescription();
    }
    const char* lossy_description() const {
      return message_.lossy_description();
    }
    const ::fidl::Result& error() const { return message_.error(); }

    ::fidl::OutgoingMessage& GetOutgoingMessage() { return message_; }

   private:
    ::fidl::internal::IovecBuffer iovecs_;
    zx_handle_disposition_t
        handles_[std::min(ZX_CHANNEL_MAX_MSG_HANDLES, MaxNumHandles)];
    ::fidl::OutgoingMessage message_;
  };

  class OwnedEncodedMessage final {
   public:
    explicit OwnedEncodedMessage(StructWithNullableProtocol* value)
        : message_(1u, backing_buffer_.data(), static_cast<uint32_t>(backing_buffer_.size()), value) {}
    // Internal constructor.
    explicit OwnedEncodedMessage(
        ::fidl::internal::AllowUnownedInputRef allow_unowned,
        StructWithNullableProtocol* value)
        : message_(::fidl::internal::IovecBufferSize, backing_buffer_.data(),
                   static_cast<uint32_t>(backing_buffer_.size()), value) {}
    OwnedEncodedMessage(const OwnedEncodedMessage&) = delete;
    OwnedEncodedMessage(OwnedEncodedMessage&&) = delete;
    OwnedEncodedMessage* operator=(const OwnedEncodedMessage&) = delete;
    OwnedEncodedMessage* operator=(OwnedEncodedMessage&&) = delete;

    zx_status_t status() const { return message_.status(); }
    const char* status_string() const { return message_.status_string(); }
    bool ok() const { return message_.ok(); }
    std::string FormatDescription() const {
      return message_.FormatDescription();
    }
    const char* lossy_description() const {
      return message_.lossy_description();
    }
    const ::fidl::Result& error() const { return message_.error(); }

    ::fidl::OutgoingMessage& GetOutgoingMessage() {
      return message_.GetOutgoingMessage();
    }

   private:
    ::fidl::internal::InlineMessageBuffer<8> backing_buffer_;
    UnownedEncodedMessage message_;
  };

  class DecodedMessage final : public ::fidl::internal::DecodedMessageBase<
                                   StructWithNullableProtocol> {
   public:
    using DecodedMessageBase<StructWithNullableProtocol>::DecodedMessageBase;

    DecodedMessage(uint8_t* bytes, uint32_t byte_actual,
                   zx_handle_info_t* handles = nullptr,
                   uint32_t handle_actual = 0)
        : DecodedMessageBase(
              ::fidl::internal::kLLCPPInMemoryWireFormatVersion,
              ::fidl::IncomingMessage(
                  bytes, byte_actual, handles, handle_actual,
                  ::fidl::IncomingMessage::kSkipMessageHeaderValidation)) {}

    // Internal constructor for specifying a specific wire format version.
    DecodedMessage(::fidl::internal::WireFormatVersion wire_format_version,
                   uint8_t* bytes, uint32_t byte_actual,
                   zx_handle_info_t* handles = nullptr,
                   uint32_t handle_actual = 0)
        : DecodedMessageBase(
              wire_format_version,
              ::fidl::IncomingMessage(
                  bytes, byte_actual, handles, handle_actual,
                  ::fidl::IncomingMessage::kSkipMessageHeaderValidation)) {}

    DecodedMessage(const fidl_incoming_msg_t* c_msg)
        : DecodedMessage(reinterpret_cast<uint8_t*>(c_msg->bytes),
                         c_msg->num_bytes, c_msg->handles, c_msg->num_handles) {
    }

    // Internal constructor for specifying a specific wire format version.
    DecodedMessage(::fidl::internal::WireFormatVersion wire_format_version,
                   const fidl_incoming_msg_t* c_msg)
        : DecodedMessage(wire_format_version,
                         reinterpret_cast<uint8_t*>(c_msg->bytes),
                         c_msg->num_bytes, c_msg->handles, c_msg->num_handles) {
    }
    ~DecodedMessage() {
      if (ok() && (PrimaryObject() != nullptr)) {
        PrimaryObject()->_CloseHandles();
      }
    }

    StructWithNullableProtocol* PrimaryObject() {
      ZX_DEBUG_ASSERT(ok());
      return reinterpret_cast<StructWithNullableProtocol*>(bytes());
    }

    // Release the ownership of the decoded message. That means that the handles
    // won't be closed When the object is destroyed. After calling this method,
    // the |DecodedMessage| object should not be used anymore.
    void ReleasePrimaryObject() { ResetBytes(); }
  };
};
#endif  // __Fuchsia__

#ifdef __Fuchsia__

extern "C" const fidl_type_t fidl_test_nullable_StructWithNullableHandleTable;

struct StructWithNullableHandle {
  static constexpr const fidl_type_t* Type =
      &fidl_test_nullable_StructWithNullableHandleTable;
  static constexpr uint32_t MaxNumHandles = 1;
  static constexpr uint32_t PrimarySize = 4;
  [[maybe_unused]] static constexpr uint32_t MaxOutOfLine = 0;
  static constexpr bool HasPointer = false;

  ::zx::vmo val = {};

  void _CloseHandles();

  class UnownedEncodedMessage final {
   public:
    UnownedEncodedMessage(uint8_t* backing_buffer, uint32_t backing_buffer_size,
                          StructWithNullableHandle* value)
        : UnownedEncodedMessage(::fidl::internal::IovecBufferSize,
                                backing_buffer, backing_buffer_size, value) {}
    UnownedEncodedMessage(uint32_t iovec_capacity, uint8_t* backing_buffer,
                          uint32_t backing_buffer_size,
                          StructWithNullableHandle* value)
        : message_(::fidl::OutgoingMessage::ConstructorArgs{
              .iovecs = iovecs_,
              .iovec_capacity = iovec_capacity,
              .handles = handles_,
              .handle_capacity =
                  std::min(ZX_CHANNEL_MAX_MSG_HANDLES, MaxNumHandles),
              .backing_buffer = backing_buffer,
              .backing_buffer_capacity = backing_buffer_size,
          }) {
      ZX_ASSERT(iovec_capacity <= std::size(iovecs_));
      message_.Encode<StructWithNullableHandle>(value);
    }
    UnownedEncodedMessage(const UnownedEncodedMessage&) = delete;
    UnownedEncodedMessage(UnownedEncodedMessage&&) = delete;
    UnownedEncodedMessage* operator=(const UnownedEncodedMessage&) = delete;
    UnownedEncodedMessage* operator=(UnownedEncodedMessage&&) = delete;

    zx_status_t status() const { return message_.status(); }
    const char* status_string() const { return message_.status_string(); }
    bool ok() const { return message_.status() == ZX_OK; }
    std::string FormatDescription() const {
      return message_.FormatDescription();
    }
    const char* lossy_description() const {
      return message_.lossy_description();
    }
    const ::fidl::Result& error() const { return message_.error(); }

    ::fidl::OutgoingMessage& GetOutgoingMessage() { return message_; }

   private:
    ::fidl::internal::IovecBuffer iovecs_;
    zx_handle_disposition_t
        handles_[std::min(ZX_CHANNEL_MAX_MSG_HANDLES, MaxNumHandles)];
    ::fidl::OutgoingMessage message_;
  };

  class OwnedEncodedMessage final {
   public:
    explicit OwnedEncodedMessage(StructWithNullableHandle* value)
        : message_(1u, backing_buffer_.data(), static_cast<uint32_t>(backing_buffer_.size()), value) {}
    // Internal constructor.
    explicit OwnedEncodedMessage(
        ::fidl::internal::AllowUnownedInputRef allow_unowned,
        StructWithNullableHandle* value)
        : message_(::fidl::internal::IovecBufferSize, backing_buffer_.data(),
                   static_cast<uint32_t>(backing_buffer_.size()), value) {}
    OwnedEncodedMessage(const OwnedEncodedMessage&) = delete;
    OwnedEncodedMessage(OwnedEncodedMessage&&) = delete;
    OwnedEncodedMessage* operator=(const OwnedEncodedMessage&) = delete;
    OwnedEncodedMessage* operator=(OwnedEncodedMessage&&) = delete;

    zx_status_t status() const { return message_.status(); }
    const char* status_string() const { return message_.status_string(); }
    bool ok() const { return message_.ok(); }
    std::string FormatDescription() const {
      return message_.FormatDescription();
    }
    const char* lossy_description() const {
      return message_.lossy_description();
    }
    const ::fidl::Result& error() const { return message_.error(); }

    ::fidl::OutgoingMessage& GetOutgoingMessage() {
      return message_.GetOutgoingMessage();
    }

   private:
    ::fidl::internal::InlineMessageBuffer<8> backing_buffer_;
    UnownedEncodedMessage message_;
  };

  class DecodedMessage final
      : public ::fidl::internal::DecodedMessageBase<StructWithNullableHandle> {
   public:
    using DecodedMessageBase<StructWithNullableHandle>::DecodedMessageBase;

    DecodedMessage(uint8_t* bytes, uint32_t byte_actual,
                   zx_handle_info_t* handles = nullptr,
                   uint32_t handle_actual = 0)
        : DecodedMessageBase(
              ::fidl::internal::kLLCPPInMemoryWireFormatVersion,
              ::fidl::IncomingMessage(
                  bytes, byte_actual, handles, handle_actual,
                  ::fidl::IncomingMessage::kSkipMessageHeaderValidation)) {}

    // Internal constructor for specifying a specific wire format version.
    DecodedMessage(::fidl::internal::WireFormatVersion wire_format_version,
                   uint8_t* bytes, uint32_t byte_actual,
                   zx_handle_info_t* handles = nullptr,
                   uint32_t handle_actual = 0)
        : DecodedMessageBase(
              wire_format_version,
              ::fidl::IncomingMessage(
                  bytes, byte_actual, handles, handle_actual,
                  ::fidl::IncomingMessage::kSkipMessageHeaderValidation)) {}

    DecodedMessage(const fidl_incoming_msg_t* c_msg)
        : DecodedMessage(reinterpret_cast<uint8_t*>(c_msg->bytes),
                         c_msg->num_bytes, c_msg->handles, c_msg->num_handles) {
    }

    // Internal constructor for specifying a specific wire format version.
    DecodedMessage(::fidl::internal::WireFormatVersion wire_format_version,
                   const fidl_incoming_msg_t* c_msg)
        : DecodedMessage(wire_format_version,
                         reinterpret_cast<uint8_t*>(c_msg->bytes),
                         c_msg->num_bytes, c_msg->handles, c_msg->num_handles) {
    }
    ~DecodedMessage() {
      if (ok() && (PrimaryObject() != nullptr)) {
        PrimaryObject()->_CloseHandles();
      }
    }

    StructWithNullableHandle* PrimaryObject() {
      ZX_DEBUG_ASSERT(ok());
      return reinterpret_cast<StructWithNullableHandle*>(bytes());
    }

    // Release the ownership of the decoded message. That means that the handles
    // won't be closed When the object is destroyed. After calling this method,
    // the |DecodedMessage| object should not be used anymore.
    void ReleasePrimaryObject() { ResetBytes(); }
  };
};
#endif  // __Fuchsia__

}  // namespace wire
__LOCAL extern "C" const fidl_type_t
    fidl_test_nullable_SimpleProtocolAddRequestTable;

__LOCAL extern "C" const fidl_type_t
    fidl_test_nullable_SimpleProtocolAddResponseTable;

class SimpleProtocol final {
  SimpleProtocol() = delete;

 public:
  class Add final {
    Add() = delete;
  };
};
}  // namespace fidl_test_nullable
#ifdef __Fuchsia__

template <>
struct ::fidl::internal::ProtocolDetails<::fidl_test_nullable::SimpleProtocol> {
};
#endif  // __Fuchsia__

#ifdef __Fuchsia__

template <>
struct ::fidl::internal::WireServerDispatcher<
    ::fidl_test_nullable::SimpleProtocol>
    final {
  WireServerDispatcher() = delete;
  static ::fidl::DispatchResult TryDispatch(
      ::fidl::WireServer<::fidl_test_nullable::SimpleProtocol>* impl,
      ::fidl::IncomingMessage& msg, ::fidl::Transaction* txn);
  static ::fidl::DispatchResult Dispatch(
      ::fidl::WireServer<::fidl_test_nullable::SimpleProtocol>* impl,
      ::fidl::IncomingMessage&& msg, ::fidl::Transaction* txn);
};
#endif  // __Fuchsia__

template <>
struct ::fidl::WireRequest<::fidl_test_nullable::SimpleProtocol::Add> final {
  FIDL_ALIGNDECL
  fidl_message_header_t _hdr;
  int32_t a;
  int32_t b;
  explicit WireRequest(int32_t a, int32_t b) : a(a), b(b) { _InitHeader(); }
  WireRequest() { _InitHeader(); }

  static constexpr const fidl_type_t* Type =
      &::fidl_test_nullable::fidl_test_nullable_SimpleProtocolAddRequestTable;
  static constexpr uint32_t MaxNumHandles = 0;
  static constexpr uint32_t PrimarySize = 24;
  static constexpr uint32_t MaxOutOfLine = 0;
  static constexpr uint32_t AltPrimarySize = 24;
  static constexpr uint32_t AltMaxOutOfLine = 0;
  static constexpr bool HasFlexibleEnvelope = false;
  static constexpr bool HasPointer = false;
  static constexpr ::fidl::internal::TransactionalMessageKind MessageKind =
      ::fidl::internal::TransactionalMessageKind::kRequest;
  using ResponseType =
      ::fidl::WireResponse<::fidl_test_nullable::SimpleProtocol::Add>;

  class UnownedEncodedMessage final {
   public:
    UnownedEncodedMessage(uint8_t* _backing_buffer,
                          uint32_t _backing_buffer_size, int32_t a, int32_t b)
        : UnownedEncodedMessage(::fidl::internal::IovecBufferSize,
                                _backing_buffer, _backing_buffer_size, a, b) {}
    UnownedEncodedMessage(uint32_t _iovec_capacity, uint8_t* _backing_buffer,
                          uint32_t _backing_buffer_size, int32_t a, int32_t b)
        : message_(::fidl::OutgoingMessage::ConstructorArgs{
              .iovecs = iovecs_,
              .iovec_capacity = _iovec_capacity,
              .backing_buffer = _backing_buffer,
              .backing_buffer_capacity = _backing_buffer_size,
          }) {
      ZX_ASSERT(_iovec_capacity <= std::size(iovecs_));
      FIDL_ALIGNDECL WireRequest _request{a, b};
      message_.Encode<WireRequest>(&_request);
    }
    UnownedEncodedMessage(uint8_t* _backing_buffer,
                          uint32_t _backing_buffer_size, WireRequest* request)
        : UnownedEncodedMessage(::fidl::internal::IovecBufferSize,
                                _backing_buffer, _backing_buffer_size,
                                request) {}
    UnownedEncodedMessage(uint32_t _iovec_capacity, uint8_t* _backing_buffer,
                          uint32_t _backing_buffer_size, WireRequest* request)
        : message_(::fidl::OutgoingMessage::ConstructorArgs{
              .iovecs = iovecs_,
              .iovec_capacity = _iovec_capacity,
              .backing_buffer = _backing_buffer,
              .backing_buffer_capacity = _backing_buffer_size,
          }) {
      ZX_ASSERT(_iovec_capacity <= std::size(iovecs_));
      message_.Encode<WireRequest>(request);
    }
    UnownedEncodedMessage(const UnownedEncodedMessage&) = delete;
    UnownedEncodedMessage(UnownedEncodedMessage&&) = delete;
    UnownedEncodedMessage* operator=(const UnownedEncodedMessage&) = delete;
    UnownedEncodedMessage* operator=(UnownedEncodedMessage&&) = delete;

    zx_status_t status() const { return message_.status(); }
#ifdef __Fuchsia__
    const char* status_string() const { return message_.status_string(); }
#endif  // __Fuchsia__
    bool ok() const { return message_.status() == ZX_OK; }
    std::string FormatDescription() const {
      return message_.FormatDescription();
    }
    const char* lossy_description() const {
      return message_.lossy_description();
    }
    const ::fidl::Result& error() const { return message_.error(); }

    ::fidl::OutgoingMessage& GetOutgoingMessage() { return message_; }
#ifdef __Fuchsia__
    template <typename ChannelLike>
    void Write(ChannelLike&& client) {
      message_.Write(std::forward<ChannelLike>(client));
    }
#endif  // __Fuchsia__
   private:
    ::fidl::internal::IovecBuffer iovecs_;
    ::fidl::OutgoingMessage message_;
  };

  class OwnedEncodedMessage final {
   public:
    explicit OwnedEncodedMessage(int32_t a, int32_t b)
        : message_(1u, backing_buffer_.data(), static_cast<uint32_t>(backing_buffer_.size()), a, b) {}
    // Internal constructor.
    explicit OwnedEncodedMessage(
        ::fidl::internal::AllowUnownedInputRef allow_unowned, int32_t a,
        int32_t b)
        : message_(::fidl::internal::IovecBufferSize, backing_buffer_.data(),
                   static_cast<uint32_t>(backing_buffer_.size()), a, b) {}
    explicit OwnedEncodedMessage(WireRequest* request)
        : message_(1u, backing_buffer_.data(), static_cast<uint32_t>(backing_buffer_.size()),
                   request) {}
    // Internal constructor.
    explicit OwnedEncodedMessage(
        ::fidl::internal::AllowUnownedInputRef allow_unowned,
        WireRequest* request)
        : message_(::fidl::internal::IovecBufferSize, backing_buffer_.data(),
                   static_cast<uint32_t>(backing_buffer_.size()), request) {}
    OwnedEncodedMessage(const OwnedEncodedMessage&) = delete;
    OwnedEncodedMessage(OwnedEncodedMessage&&) = delete;
    OwnedEncodedMessage* operator=(const OwnedEncodedMessage&) = delete;
    OwnedEncodedMessage* operator=(OwnedEncodedMessage&&) = delete;

    zx_status_t status() const { return message_.status(); }
#ifdef __Fuchsia__
    const char* status_string() const { return message_.status_string(); }
#endif  // __Fuchsia__
    bool ok() const { return message_.ok(); }
    std::string FormatDescription() const {
      return message_.FormatDescription();
    }
    const char* lossy_description() const {
      return message_.lossy_description();
    }
    const ::fidl::Result& error() const { return message_.error(); }

    ::fidl::OutgoingMessage& GetOutgoingMessage() {
      return message_.GetOutgoingMessage();
    }
#ifdef __Fuchsia__
    template <typename ChannelLike>
    void Write(ChannelLike&& client) {
      message_.Write(std::forward<ChannelLike>(client));
    }
#endif  // __Fuchsia__
   private:
    ::fidl::internal::InlineMessageBuffer<24> backing_buffer_;
    UnownedEncodedMessage message_;
  };

 public:
  class DecodedMessage final
      : public ::fidl::internal::DecodedMessageBase<
            ::fidl::WireRequest<::fidl_test_nullable::SimpleProtocol::Add>> {
   public:
    using DecodedMessageBase<::fidl::WireRequest<
        ::fidl_test_nullable::SimpleProtocol::Add>>::DecodedMessageBase;

    DecodedMessage(uint8_t* bytes, uint32_t byte_actual,
                   zx_handle_info_t* handles = nullptr,
                   uint32_t handle_actual = 0)
        : DecodedMessageBase(::fidl::IncomingMessage(bytes, byte_actual,
                                                     handles, handle_actual)) {}

    ::fidl::WireRequest<::fidl_test_nullable::SimpleProtocol::Add>*
    PrimaryObject() {
      ZX_DEBUG_ASSERT(ok());
      return reinterpret_cast<
          ::fidl::WireRequest<::fidl_test_nullable::SimpleProtocol::Add>*>(
          bytes());
    }

    // Release the ownership of the decoded message. That means that the handles
    // won't be closed When the object is destroyed. After calling this method,
    // the |DecodedMessage| object should not be used anymore.
    void ReleasePrimaryObject() { ResetBytes(); }
  };

 private:
  void _InitHeader();
};
template <>
struct ::fidl::WireResponse<::fidl_test_nullable::SimpleProtocol::Add> final {
  FIDL_ALIGNDECL
  fidl_message_header_t _hdr;
  int32_t sum;
  explicit WireResponse(int32_t sum) : sum(sum) { _InitHeader(); }
  WireResponse() { _InitHeader(); }

  static constexpr const fidl_type_t* Type =
      &::fidl_test_nullable::fidl_test_nullable_SimpleProtocolAddResponseTable;
  static constexpr uint32_t MaxNumHandles = 0;
  static constexpr uint32_t PrimarySize = 24;
  static constexpr uint32_t MaxOutOfLine = 0;
  static constexpr bool HasFlexibleEnvelope = false;
  static constexpr bool HasPointer = false;
  static constexpr ::fidl::internal::TransactionalMessageKind MessageKind =
      ::fidl::internal::TransactionalMessageKind::kResponse;

  class UnownedEncodedMessage final {
   public:
    UnownedEncodedMessage(uint8_t* _backing_buffer,
                          uint32_t _backing_buffer_size, int32_t sum)
        : UnownedEncodedMessage(::fidl::internal::IovecBufferSize,
                                _backing_buffer, _backing_buffer_size, sum) {}
    UnownedEncodedMessage(uint32_t _iovec_capacity, uint8_t* _backing_buffer,
                          uint32_t _backing_buffer_size, int32_t sum)
        : message_(::fidl::OutgoingMessage::ConstructorArgs{
              .iovecs = iovecs_,
              .iovec_capacity = _iovec_capacity,
              .backing_buffer = _backing_buffer,
              .backing_buffer_capacity = _backing_buffer_size,
          }) {
      ZX_ASSERT(_iovec_capacity <= std::size(iovecs_));
      FIDL_ALIGNDECL WireResponse _response{sum};
      message_.Encode<
          ::fidl::WireResponse<::fidl_test_nullable::SimpleProtocol::Add>>(
          &_response);
    }
    UnownedEncodedMessage(uint8_t* _backing_buffer,
                          uint32_t _backing_buffer_size, WireResponse* response)
        : UnownedEncodedMessage(::fidl::internal::IovecBufferSize,
                                _backing_buffer, _backing_buffer_size,
                                response) {}
    UnownedEncodedMessage(uint32_t _iovec_capacity, uint8_t* _backing_buffer,
                          uint32_t _backing_buffer_size, WireResponse* response)
        : message_(::fidl::OutgoingMessage::ConstructorArgs{
              .iovecs = iovecs_,
              .iovec_capacity = _iovec_capacity,
              .backing_buffer = _backing_buffer,
              .backing_buffer_capacity = _backing_buffer_size,
          }) {
      ZX_ASSERT(_iovec_capacity <= std::size(iovecs_));
      message_.Encode<
          ::fidl::WireResponse<::fidl_test_nullable::SimpleProtocol::Add>>(
          response);
    }
    UnownedEncodedMessage(const UnownedEncodedMessage&) = delete;
    UnownedEncodedMessage(UnownedEncodedMessage&&) = delete;
    UnownedEncodedMessage* operator=(const UnownedEncodedMessage&) = delete;
    UnownedEncodedMessage* operator=(UnownedEncodedMessage&&) = delete;

    zx_status_t status() const { return message_.status(); }
#ifdef __Fuchsia__
    const char* status_string() const { return message_.status_string(); }
#endif  // __Fuchsia__
    bool ok() const { return message_.status() == ZX_OK; }
    std::string FormatDescription() const {
      return message_.FormatDescription();
    }
    const char* lossy_description() const {
      return message_.lossy_description();
    }
    const ::fidl::Result& error() const { return message_.error(); }

    ::fidl::OutgoingMessage& GetOutgoingMessage() { return message_; }
#ifdef __Fuchsia__
    template <typename ChannelLike>
    void Write(ChannelLike&& client) {
      message_.Write(std::forward<ChannelLike>(client));
    }
#endif  // __Fuchsia__
   private:
    ::fidl::internal::IovecBuffer iovecs_;
    ::fidl::OutgoingMessage message_;
  };

  class OwnedEncodedMessage final {
   public:
    explicit OwnedEncodedMessage(int32_t sum)
        : message_(1u, backing_buffer_.data(), static_cast<uint32_t>(backing_buffer_.size()), sum) {}
    // Internal constructor.
    explicit OwnedEncodedMessage(
        ::fidl::internal::AllowUnownedInputRef allow_unowned, int32_t sum)
        : message_(::fidl::internal::IovecBufferSize, backing_buffer_.data(),
                   static_cast<uint32_t>(backing_buffer_.size()), sum) {}
    explicit OwnedEncodedMessage(
        ::fidl::WireResponse<::fidl_test_nullable::SimpleProtocol::Add>*
            response)
        : message_(1u, backing_buffer_.data(), static_cast<uint32_t>(backing_buffer_.size()),
                   response) {}
    // Internal constructor.
    explicit OwnedEncodedMessage(
        ::fidl::internal::AllowUnownedInputRef allow_unowned,
        ::fidl::WireResponse<::fidl_test_nullable::SimpleProtocol::Add>*
            response)
        : message_(::fidl::internal::IovecBufferSize, backing_buffer_.data(),
                   static_cast<uint32_t>(backing_buffer_.size()), response) {}
    OwnedEncodedMessage(const OwnedEncodedMessage&) = delete;
    OwnedEncodedMessage(OwnedEncodedMessage&&) = delete;
    OwnedEncodedMessage* operator=(const OwnedEncodedMessage&) = delete;
    OwnedEncodedMessage* operator=(OwnedEncodedMessage&&) = delete;

    zx_status_t status() const { return message_.status(); }
#ifdef __Fuchsia__
    const char* status_string() const { return message_.status_string(); }
#endif  // __Fuchsia__
    bool ok() const { return message_.ok(); }
    std::string FormatDescription() const {
      return message_.FormatDescription();
    }
    const char* lossy_description() const {
      return message_.lossy_description();
    }
    const ::fidl::Result& error() const { return message_.error(); }

    ::fidl::OutgoingMessage& GetOutgoingMessage() {
      return message_.GetOutgoingMessage();
    }
#ifdef __Fuchsia__
    template <typename ChannelLike>
    void Write(ChannelLike&& client) {
      message_.Write(std::forward<ChannelLike>(client));
    }
#endif  // __Fuchsia__
   private:
    ::fidl::internal::InlineMessageBuffer<24> backing_buffer_;
    UnownedEncodedMessage message_;
  };

 public:
  class DecodedMessage final
      : public ::fidl::internal::DecodedMessageBase<
            ::fidl::WireResponse<::fidl_test_nullable::SimpleProtocol::Add>> {
   public:
    using DecodedMessageBase<::fidl::WireResponse<
        ::fidl_test_nullable::SimpleProtocol::Add>>::DecodedMessageBase;

    DecodedMessage(uint8_t* bytes, uint32_t byte_actual,
                   zx_handle_info_t* handles = nullptr,
                   uint32_t handle_actual = 0)
        : DecodedMessageBase(::fidl::IncomingMessage(bytes, byte_actual,
                                                     handles, handle_actual)) {}

    ::fidl::WireResponse<::fidl_test_nullable::SimpleProtocol::Add>*
    PrimaryObject() {
      ZX_DEBUG_ASSERT(ok());
      return reinterpret_cast<
          ::fidl::WireResponse<::fidl_test_nullable::SimpleProtocol::Add>*>(
          bytes());
    }

    // Release the ownership of the decoded message. That means that the handles
    // won't be closed When the object is destroyed. After calling this method,
    // the |DecodedMessage| object should not be used anymore.
    void ReleasePrimaryObject() { ResetBytes(); }
  };

 private:
  void _InitHeader();
};
#ifdef __Fuchsia__

template <>
class ::fidl::WireResult<::fidl_test_nullable::SimpleProtocol::Add> final
    : public ::fidl::Result {
 public:
  explicit WireResult(
      ::fidl::UnownedClientEnd<::fidl_test_nullable::SimpleProtocol> _client,
      int32_t a, int32_t b);
  WireResult(
      ::fidl::UnownedClientEnd<::fidl_test_nullable::SimpleProtocol> _client,
      int32_t a, int32_t b, zx_time_t _deadline);
  explicit WireResult(const ::fidl::Result& result) : ::fidl::Result(result) {}
  WireResult(WireResult&&) = delete;
  WireResult(const WireResult&) = delete;
  WireResult* operator=(WireResult&&) = delete;
  WireResult* operator=(const WireResult&) = delete;
  ~WireResult() = default;

  ::fidl::WireResponse<::fidl_test_nullable::SimpleProtocol::Add>* Unwrap() {
    ZX_DEBUG_ASSERT(ok());
    return reinterpret_cast<
        ::fidl::WireResponse<::fidl_test_nullable::SimpleProtocol::Add>*>(
        bytes_.data());
  }
  const ::fidl::WireResponse<::fidl_test_nullable::SimpleProtocol::Add>*
  Unwrap() const {
    ZX_DEBUG_ASSERT(ok());
    return reinterpret_cast<
        const ::fidl::WireResponse<::fidl_test_nullable::SimpleProtocol::Add>*>(
        bytes_.data());
  }

  ::fidl::WireResponse<::fidl_test_nullable::SimpleProtocol::Add>& value() {
    return *Unwrap();
  }
  const ::fidl::WireResponse<::fidl_test_nullable::SimpleProtocol::Add>& value()
      const {
    return *Unwrap();
  }

  ::fidl::WireResponse<::fidl_test_nullable::SimpleProtocol::Add>*
  operator->() {
    return &value();
  }
  const ::fidl::WireResponse<::fidl_test_nullable::SimpleProtocol::Add>*
  operator->() const {
    return &value();
  }

  ::fidl::WireResponse<::fidl_test_nullable::SimpleProtocol::Add>& operator*() {
    return value();
  }
  const ::fidl::WireResponse<::fidl_test_nullable::SimpleProtocol::Add>&
  operator*() const {
    return value();
  }

 private:
  ::fidl::internal::InlineMessageBuffer<24> bytes_;
};
template <>
class ::fidl::WireUnownedResult<::fidl_test_nullable::SimpleProtocol::Add> final
    : public ::fidl::Result {
 public:
  explicit WireUnownedResult(
      ::fidl::UnownedClientEnd<::fidl_test_nullable::SimpleProtocol> _client,
      uint8_t* _request_bytes, uint32_t _request_byte_capacity, int32_t a,
      int32_t b, uint8_t* _response_bytes, uint32_t _response_byte_capacity);
  explicit WireUnownedResult(
      ::fidl::WireResponse<::fidl_test_nullable::SimpleProtocol::Add>* response)
      : bytes_(reinterpret_cast<uint8_t*>(response)) {}
  explicit WireUnownedResult(const ::fidl::Result& result)
      : ::fidl::Result(result) {}
  explicit WireUnownedResult(
      ::fidl::DecodedMessage<
          ::fidl::WireResponse<::fidl_test_nullable::SimpleProtocol::Add>>&&
          decoded)
      : ::fidl::Result(decoded) {
    if (decoded.ok()) {
      bytes_ = reinterpret_cast<uint8_t*>(decoded.PrimaryObject());
    } else {
      bytes_ = nullptr;
    }
    decoded.ReleasePrimaryObject();
  }
  WireUnownedResult(WireUnownedResult&&) = delete;
  WireUnownedResult(const WireUnownedResult&) = delete;
  WireUnownedResult* operator=(WireUnownedResult&&) = delete;
  WireUnownedResult* operator=(const WireUnownedResult&) = delete;
  ~WireUnownedResult() = default;

  ::fidl::WireResponse<::fidl_test_nullable::SimpleProtocol::Add>* Unwrap() {
    ZX_DEBUG_ASSERT(ok());
    return reinterpret_cast<
        ::fidl::WireResponse<::fidl_test_nullable::SimpleProtocol::Add>*>(
        bytes_);
  }
  const ::fidl::WireResponse<::fidl_test_nullable::SimpleProtocol::Add>*
  Unwrap() const {
    ZX_DEBUG_ASSERT(ok());
    return reinterpret_cast<
        const ::fidl::WireResponse<::fidl_test_nullable::SimpleProtocol::Add>*>(
        bytes_);
  }

  ::fidl::WireResponse<::fidl_test_nullable::SimpleProtocol::Add>& value() {
    return *Unwrap();
  }
  const ::fidl::WireResponse<::fidl_test_nullable::SimpleProtocol::Add>& value()
      const {
    return *Unwrap();
  }

  ::fidl::WireResponse<::fidl_test_nullable::SimpleProtocol::Add>*
  operator->() {
    return &value();
  }
  const ::fidl::WireResponse<::fidl_test_nullable::SimpleProtocol::Add>*
  operator->() const {
    return &value();
  }

  ::fidl::WireResponse<::fidl_test_nullable::SimpleProtocol::Add>& operator*() {
    return value();
  }
  const ::fidl::WireResponse<::fidl_test_nullable::SimpleProtocol::Add>&
  operator*() const {
    return value();
  }

 private:
  uint8_t* bytes_;
};

// Methods to make a sync FIDL call directly on an unowned channel or a
// const reference to a |fidl::ClientEnd<::fidl_test_nullable::SimpleProtocol>|,
// avoiding setting up a client.
template <>
class ::fidl::internal::WireCaller<::fidl_test_nullable::SimpleProtocol> final {
 public:
  explicit WireCaller(
      ::fidl::UnownedClientEnd<::fidl_test_nullable::SimpleProtocol> client_end)
      : client_end_(client_end) {}

  // Allocates 48 bytes of message buffer on the stack. No heap allocation
  // necessary.
  static ::fidl::WireResult<::fidl_test_nullable::SimpleProtocol::Add> Add(
      ::fidl::UnownedClientEnd<::fidl_test_nullable::SimpleProtocol>
          _client_end,
      int32_t a, int32_t b) {
    return ::fidl::WireResult<::fidl_test_nullable::SimpleProtocol::Add>(
        _client_end, a, b);
  }
  // Allocates 48 bytes of message buffer on the stack. No heap allocation
  // necessary.
  ::fidl::WireResult<::fidl_test_nullable::SimpleProtocol::Add> Add(
      int32_t a, int32_t b) && {
    return ::fidl::WireResult<::fidl_test_nullable::SimpleProtocol::Add>(
        client_end_, a, b);
  }

  // Caller provides the backing storage for FIDL message via request and
  // response buffers.
  static ::fidl::WireUnownedResult<::fidl_test_nullable::SimpleProtocol::Add>
  Add(::fidl::UnownedClientEnd<::fidl_test_nullable::SimpleProtocol>
          _client_end,
      ::fidl::BufferSpan _request_buffer, int32_t a, int32_t b,
      ::fidl::BufferSpan _response_buffer) {
    return ::fidl::WireUnownedResult<::fidl_test_nullable::SimpleProtocol::Add>(
        _client_end, _request_buffer.data, _request_buffer.capacity, a, b,
        _response_buffer.data, _response_buffer.capacity);
  }
  // Caller provides the backing storage for FIDL message via request and
  // response buffers.
  ::fidl::WireUnownedResult<::fidl_test_nullable::SimpleProtocol::Add> Add(
      ::fidl::BufferSpan _request_buffer, int32_t a, int32_t b,
      ::fidl::BufferSpan _response_buffer) && {
    return ::fidl::WireUnownedResult<::fidl_test_nullable::SimpleProtocol::Add>(
        client_end_, _request_buffer.data, _request_buffer.capacity, a, b,
        _response_buffer.data, _response_buffer.capacity);
  }

 private:
  ::fidl::UnownedClientEnd<::fidl_test_nullable::SimpleProtocol> client_end_;
};
template <>
class ::fidl::internal::WireEventHandlerInterface<
    ::fidl_test_nullable::SimpleProtocol> {
 public:
  WireEventHandlerInterface() = default;
  virtual ~WireEventHandlerInterface() = default;
};

template <>
class ::fidl::WireAsyncEventHandler<::fidl_test_nullable::SimpleProtocol>
    : public ::fidl::internal::WireEventHandlerInterface<
          ::fidl_test_nullable::SimpleProtocol>,
      public ::fidl::internal::AsyncEventHandler {
 public:
  WireAsyncEventHandler() = default;
};

template <>
class ::fidl::WireSyncEventHandler<::fidl_test_nullable::SimpleProtocol>
    : public ::fidl::internal::WireEventHandlerInterface<
          ::fidl_test_nullable::SimpleProtocol> {
 public:
  WireSyncEventHandler() = default;

  // Method called when an unknown event is found. This methods gives the status
  // which, in this case, is returned by HandleOneEvent.
  virtual zx_status_t Unknown() = 0;

  // Handle all possible events defined in this protocol.
  // Blocks to consume exactly one message from the channel, then call the
  // corresponding virtual method.
  ::fidl::Result HandleOneEvent(
      ::fidl::UnownedClientEnd<::fidl_test_nullable::SimpleProtocol>
          client_end);
};
template <>
class ::fidl::WireSyncClient<::fidl_test_nullable::SimpleProtocol> final {
 public:
  WireSyncClient() = default;

  explicit WireSyncClient(
      ::fidl::ClientEnd<::fidl_test_nullable::SimpleProtocol> client_end)
      : client_end_(std::move(client_end)) {}

  ~WireSyncClient() = default;
  WireSyncClient(WireSyncClient&&) = default;
  WireSyncClient& operator=(WireSyncClient&&) = default;

  const ::fidl::ClientEnd<::fidl_test_nullable::SimpleProtocol>& client_end()
      const {
    return client_end_;
  }
  ::fidl::ClientEnd<::fidl_test_nullable::SimpleProtocol>& client_end() {
    return client_end_;
  }

  const ::zx::channel& channel() const { return client_end_.channel(); }
  ::zx::channel* mutable_channel() { return &client_end_.channel(); }

  // Allocates 48 bytes of message buffer on the stack. No heap allocation
  // necessary.
  ::fidl::WireResult<::fidl_test_nullable::SimpleProtocol::Add> Add(int32_t a,
                                                                    int32_t b) {
    return ::fidl::WireResult<::fidl_test_nullable::SimpleProtocol::Add>(
        this->client_end(), a, b);
  }

  // Caller provides the backing storage for FIDL message via request and
  // response buffers.
  ::fidl::WireUnownedResult<::fidl_test_nullable::SimpleProtocol::Add> Add(
      ::fidl::BufferSpan _request_buffer, int32_t a, int32_t b,
      ::fidl::BufferSpan _response_buffer) {
    return ::fidl::WireUnownedResult<::fidl_test_nullable::SimpleProtocol::Add>(
        this->client_end(), _request_buffer.data, _request_buffer.capacity, a,
        b, _response_buffer.data, _response_buffer.capacity);
  }

 private:
  ::fidl::ClientEnd<::fidl_test_nullable::SimpleProtocol> client_end_;
};

template <>
class ::fidl::internal::WireCompleterBase<
    ::fidl_test_nullable::SimpleProtocol::Add> : public ::fidl::CompleterBase {
 public:
  // In the following methods, the return value indicates internal errors during
  // the reply, such as encoding or writing to the transport.
  // Note that any error will automatically lead to the destruction of the
  // binding, after which the |on_unbound| callback will be triggered with a
  // detailed reason.
  //
  // See //zircon/system/ulib/fidl/include/lib/fidl/llcpp/server.h.
  //
  // Because the reply status is identical to the unbinding status, it can be
  // safely ignored.
  ::fidl::Result Reply(int32_t sum);
  ::fidl::Result Reply(::fidl::BufferSpan _buffer, int32_t sum);

 protected:
  using ::fidl::CompleterBase::CompleterBase;
};

template <>
struct ::fidl::internal::WireMethodTypes<
    ::fidl_test_nullable::SimpleProtocol::Add> {
  using Completer = fidl::Completer<::fidl::internal::WireCompleterBase<
      ::fidl_test_nullable::SimpleProtocol::Add>>;
};

// Pure-virtual interface to be implemented by a server.
// This interface uses typed channels (i.e. |fidl::ClientEnd<SomeProtocol>|
// and |fidl::ServerEnd<SomeProtocol>|).
template <>
class ::fidl::WireServer<::fidl_test_nullable::SimpleProtocol>
    : public ::fidl::internal::IncomingMessageDispatcher {
 public:
  WireServer() = default;
  virtual ~WireServer() = default;

  // The FIDL protocol type that is implemented by this server.
  using _EnclosingProtocol = ::fidl_test_nullable::SimpleProtocol;

  using AddCompleter = ::fidl::internal::WireCompleter<
      ::fidl_test_nullable::SimpleProtocol::Add>;
  using AddRequestView = ::fidl::internal::WireRequestView<
      ::fidl_test_nullable::SimpleProtocol::Add>;

  virtual void Add(AddRequestView request, AddCompleter::Sync& _completer) = 0;

 private:
  ::fidl::DispatchResult dispatch_message(::fidl::IncomingMessage&& msg,
                                          ::fidl::Transaction* txn) final;
};
#endif  // __Fuchsia__

namespace fidl_test_nullable {
namespace wire {

extern "C" const fidl_type_t fidl_test_nullable_Int32WrapperTable;

struct Int32Wrapper {
  static constexpr const fidl_type_t* Type =
      &fidl_test_nullable_Int32WrapperTable;
  static constexpr uint32_t MaxNumHandles = 0;
  static constexpr uint32_t PrimarySize = 4;
  [[maybe_unused]] static constexpr uint32_t MaxOutOfLine = 0;
  static constexpr bool HasPointer = false;

  int32_t val = {};

  class UnownedEncodedMessage final {
   public:
    UnownedEncodedMessage(uint8_t* backing_buffer, uint32_t backing_buffer_size,
                          Int32Wrapper* value)
        : UnownedEncodedMessage(::fidl::internal::IovecBufferSize,
                                backing_buffer, backing_buffer_size, value) {}
    UnownedEncodedMessage(uint32_t iovec_capacity, uint8_t* backing_buffer,
                          uint32_t backing_buffer_size, Int32Wrapper* value)
        : message_(::fidl::OutgoingMessage::ConstructorArgs{
              .iovecs = iovecs_,
              .iovec_capacity = iovec_capacity,
              .backing_buffer = backing_buffer,
              .backing_buffer_capacity = backing_buffer_size,
          }) {
      ZX_ASSERT(iovec_capacity <= std::size(iovecs_));
      message_.Encode<Int32Wrapper>(value);
    }
    UnownedEncodedMessage(const UnownedEncodedMessage&) = delete;
    UnownedEncodedMessage(UnownedEncodedMessage&&) = delete;
    UnownedEncodedMessage* operator=(const UnownedEncodedMessage&) = delete;
    UnownedEncodedMessage* operator=(UnownedEncodedMessage&&) = delete;

    zx_status_t status() const { return message_.status(); }
#ifdef __Fuchsia__
    const char* status_string() const { return message_.status_string(); }
#endif  // __Fuchsia__
    bool ok() const { return message_.status() == ZX_OK; }
    std::string FormatDescription() const {
      return message_.FormatDescription();
    }
    const char* lossy_description() const {
      return message_.lossy_description();
    }
    const ::fidl::Result& error() const { return message_.error(); }

    ::fidl::OutgoingMessage& GetOutgoingMessage() { return message_; }

   private:
    ::fidl::internal::IovecBuffer iovecs_;
    ::fidl::OutgoingMessage message_;
  };

  class OwnedEncodedMessage final {
   public:
    explicit OwnedEncodedMessage(Int32Wrapper* value)
        : message_(1u, backing_buffer_.data(), static_cast<uint32_t>(backing_buffer_.size()), value) {}
    // Internal constructor.
    explicit OwnedEncodedMessage(
        ::fidl::internal::AllowUnownedInputRef allow_unowned,
        Int32Wrapper* value)
        : message_(::fidl::internal::IovecBufferSize, backing_buffer_.data(),
                   static_cast<uint32_t>(backing_buffer_.size()), value) {}
    OwnedEncodedMessage(const OwnedEncodedMessage&) = delete;
    OwnedEncodedMessage(OwnedEncodedMessage&&) = delete;
    OwnedEncodedMessage* operator=(const OwnedEncodedMessage&) = delete;
    OwnedEncodedMessage* operator=(OwnedEncodedMessage&&) = delete;

    zx_status_t status() const { return message_.status(); }
#ifdef __Fuchsia__
    const char* status_string() const { return message_.status_string(); }
#endif  // __Fuchsia__
    bool ok() const { return message_.ok(); }
    std::string FormatDescription() const {
      return message_.FormatDescription();
    }
    const char* lossy_description() const {
      return message_.lossy_description();
    }
    const ::fidl::Result& error() const { return message_.error(); }

    ::fidl::OutgoingMessage& GetOutgoingMessage() {
      return message_.GetOutgoingMessage();
    }

   private:
    ::fidl::internal::InlineMessageBuffer<8> backing_buffer_;
    UnownedEncodedMessage message_;
  };

  class DecodedMessage final
      : public ::fidl::internal::DecodedMessageBase<Int32Wrapper> {
   public:
    using DecodedMessageBase<Int32Wrapper>::DecodedMessageBase;

    DecodedMessage(uint8_t* bytes, uint32_t byte_actual,
                   zx_handle_info_t* handles = nullptr,
                   uint32_t handle_actual = 0)
        : DecodedMessageBase(
              ::fidl::internal::kLLCPPInMemoryWireFormatVersion,
              ::fidl::IncomingMessage(
                  bytes, byte_actual, handles, handle_actual,
                  ::fidl::IncomingMessage::kSkipMessageHeaderValidation)) {}

    // Internal constructor for specifying a specific wire format version.
    DecodedMessage(::fidl::internal::WireFormatVersion wire_format_version,
                   uint8_t* bytes, uint32_t byte_actual,
                   zx_handle_info_t* handles = nullptr,
                   uint32_t handle_actual = 0)
        : DecodedMessageBase(
              wire_format_version,
              ::fidl::IncomingMessage(
                  bytes, byte_actual, handles, handle_actual,
                  ::fidl::IncomingMessage::kSkipMessageHeaderValidation)) {}

    DecodedMessage(const fidl_incoming_msg_t* c_msg)
        : DecodedMessage(reinterpret_cast<uint8_t*>(c_msg->bytes),
                         c_msg->num_bytes, c_msg->handles, c_msg->num_handles) {
    }

    // Internal constructor for specifying a specific wire format version.
    DecodedMessage(::fidl::internal::WireFormatVersion wire_format_version,
                   const fidl_incoming_msg_t* c_msg)
        : DecodedMessage(wire_format_version,
                         reinterpret_cast<uint8_t*>(c_msg->bytes),
                         c_msg->num_bytes, c_msg->handles, c_msg->num_handles) {
    }

    Int32Wrapper* PrimaryObject() {
      ZX_DEBUG_ASSERT(ok());
      return reinterpret_cast<Int32Wrapper*>(bytes());
    }

    // Release the ownership of the decoded message. That means that the handles
    // won't be closed When the object is destroyed. After calling this method,
    // the |DecodedMessage| object should not be used anymore.
    void ReleasePrimaryObject() { ResetBytes(); }
  };
};

}  // namespace wire
}  // namespace fidl_test_nullable
namespace fidl {

template <>
struct IsFidlType<::fidl_test_nullable::wire::StructWithNullableVector>
    : public std::true_type {};
template <>
struct IsStruct<::fidl_test_nullable::wire::StructWithNullableVector>
    : public std::true_type {};
static_assert(std::is_standard_layout_v<
              ::fidl_test_nullable::wire::StructWithNullableVector>);
static_assert(offsetof(::fidl_test_nullable::wire::StructWithNullableVector,
                       val) == 0);
static_assert(
    sizeof(::fidl_test_nullable::wire::StructWithNullableVector) ==
    ::fidl_test_nullable::wire::StructWithNullableVector::PrimarySize);

template <>
struct IsFidlType<::fidl_test_nullable::wire::StructWithNullableUnion>
    : public std::true_type {};
template <>
struct IsStruct<::fidl_test_nullable::wire::StructWithNullableUnion>
    : public std::true_type {};
static_assert(std::is_standard_layout_v<
              ::fidl_test_nullable::wire::StructWithNullableUnion>);
static_assert(offsetof(::fidl_test_nullable::wire::StructWithNullableUnion,
                       val) == 0);
static_assert(sizeof(::fidl_test_nullable::wire::StructWithNullableUnion) ==
              ::fidl_test_nullable::wire::StructWithNullableUnion::PrimarySize);

template <>
struct IsFidlType<::fidl_test_nullable::wire::StructWithNullableStruct>
    : public std::true_type {};
template <>
struct IsStruct<::fidl_test_nullable::wire::StructWithNullableStruct>
    : public std::true_type {};
static_assert(std::is_standard_layout_v<
              ::fidl_test_nullable::wire::StructWithNullableStruct>);
static_assert(offsetof(::fidl_test_nullable::wire::StructWithNullableStruct,
                       val) == 0);
static_assert(
    sizeof(::fidl_test_nullable::wire::StructWithNullableStruct) ==
    ::fidl_test_nullable::wire::StructWithNullableStruct::PrimarySize);

template <>
struct IsFidlType<::fidl_test_nullable::wire::StructWithNullableString>
    : public std::true_type {};
template <>
struct IsStruct<::fidl_test_nullable::wire::StructWithNullableString>
    : public std::true_type {};
static_assert(std::is_standard_layout_v<
              ::fidl_test_nullable::wire::StructWithNullableString>);
static_assert(offsetof(::fidl_test_nullable::wire::StructWithNullableString,
                       val) == 0);
static_assert(
    sizeof(::fidl_test_nullable::wire::StructWithNullableString) ==
    ::fidl_test_nullable::wire::StructWithNullableString::PrimarySize);

#ifdef __Fuchsia__

template <>
struct IsFidlType<::fidl_test_nullable::wire::StructWithNullableRequest>
    : public std::true_type {};
template <>
struct IsStruct<::fidl_test_nullable::wire::StructWithNullableRequest>
    : public std::true_type {};
static_assert(std::is_standard_layout_v<
              ::fidl_test_nullable::wire::StructWithNullableRequest>);
static_assert(offsetof(::fidl_test_nullable::wire::StructWithNullableRequest,
                       val) == 0);
static_assert(
    sizeof(::fidl_test_nullable::wire::StructWithNullableRequest) ==
    ::fidl_test_nullable::wire::StructWithNullableRequest::PrimarySize);
#endif  // __Fuchsia__

#ifdef __Fuchsia__

template <>
struct IsFidlType<::fidl_test_nullable::wire::StructWithNullableProtocol>
    : public std::true_type {};
template <>
struct IsStruct<::fidl_test_nullable::wire::StructWithNullableProtocol>
    : public std::true_type {};
static_assert(std::is_standard_layout_v<
              ::fidl_test_nullable::wire::StructWithNullableProtocol>);
static_assert(offsetof(::fidl_test_nullable::wire::StructWithNullableProtocol,
                       val) == 0);
static_assert(
    sizeof(::fidl_test_nullable::wire::StructWithNullableProtocol) ==
    ::fidl_test_nullable::wire::StructWithNullableProtocol::PrimarySize);
#endif  // __Fuchsia__

#ifdef __Fuchsia__

template <>
struct IsFidlType<::fidl_test_nullable::wire::StructWithNullableHandle>
    : public std::true_type {};
template <>
struct IsStruct<::fidl_test_nullable::wire::StructWithNullableHandle>
    : public std::true_type {};
static_assert(std::is_standard_layout_v<
              ::fidl_test_nullable::wire::StructWithNullableHandle>);
static_assert(offsetof(::fidl_test_nullable::wire::StructWithNullableHandle,
                       val) == 0);
static_assert(
    sizeof(::fidl_test_nullable::wire::StructWithNullableHandle) ==
    ::fidl_test_nullable::wire::StructWithNullableHandle::PrimarySize);
#endif  // __Fuchsia__

template <>
struct IsFidlType<::fidl_test_nullable::wire::SimpleUnion>
    : public std::true_type {};
template <>
struct IsUnion<::fidl_test_nullable::wire::SimpleUnion>
    : public std::true_type {};
static_assert(
    std::is_standard_layout_v<::fidl_test_nullable::wire::SimpleUnion>);

template <>
struct IsFidlType<
    ::fidl::WireRequest<::fidl_test_nullable::SimpleProtocol::Add>>
    : public std::true_type {};
template <>
struct IsFidlMessage<
    ::fidl::WireRequest<::fidl_test_nullable::SimpleProtocol::Add>>
    : public std::true_type {};
static_assert(
    sizeof(::fidl::WireRequest<::fidl_test_nullable::SimpleProtocol::Add>) ==
    ::fidl::WireRequest<
        ::fidl_test_nullable::SimpleProtocol::Add>::PrimarySize);
static_assert(
    offsetof(::fidl::WireRequest<::fidl_test_nullable::SimpleProtocol::Add>,
             a) == 16);
static_assert(
    offsetof(::fidl::WireRequest<::fidl_test_nullable::SimpleProtocol::Add>,
             b) == 20);

template <>
struct IsFidlType<
    ::fidl::WireResponse<::fidl_test_nullable::SimpleProtocol::Add>>
    : public std::true_type {};
template <>
struct IsFidlMessage<
    ::fidl::WireResponse<::fidl_test_nullable::SimpleProtocol::Add>>
    : public std::true_type {};
static_assert(
    sizeof(::fidl::WireResponse<::fidl_test_nullable::SimpleProtocol::Add>) ==
    ::fidl::WireResponse<
        ::fidl_test_nullable::SimpleProtocol::Add>::PrimarySize);
static_assert(
    offsetof(::fidl::WireResponse<::fidl_test_nullable::SimpleProtocol::Add>,
             sum) == 16);

template <>
struct IsFidlType<::fidl_test_nullable::wire::Int32Wrapper>
    : public std::true_type {};
template <>
struct IsStruct<::fidl_test_nullable::wire::Int32Wrapper>
    : public std::true_type {};
static_assert(
    std::is_standard_layout_v<::fidl_test_nullable::wire::Int32Wrapper>);
static_assert(offsetof(::fidl_test_nullable::wire::Int32Wrapper, val) == 0);
static_assert(sizeof(::fidl_test_nullable::wire::Int32Wrapper) ==
              ::fidl_test_nullable::wire::Int32Wrapper::PrimarySize);
}  // namespace fidl
#ifdef __Fuchsia__

template <>
class ::fidl::WireResponseContext<::fidl_test_nullable::SimpleProtocol::Add>
    : public ::fidl::internal::ResponseContext {
 public:
  WireResponseContext();

  virtual void OnResult(
      ::fidl::WireUnownedResult<::fidl_test_nullable::SimpleProtocol::Add>&&
          result) = 0;

 private:
  ::cpp17::optional<::fidl::UnbindInfo> OnRawResult(
      ::fidl::IncomingMessage&& msg) override;
};
#endif  // __Fuchsia__

#ifdef __Fuchsia__

template <>
class ::fidl::internal::WireClientImpl<::fidl_test_nullable::SimpleProtocol>
    final : public ::fidl::internal::ClientBase {
 public:
  // Asynchronous variant of |SimpleProtocol.Add()|.
  // Allocates 24 bytes of request buffer on the stack. The callback is stored
  // on the heap.
  ::fidl::Result Add(
      int32_t a, int32_t b,
      ::fidl::WireClientCallback<::fidl_test_nullable::SimpleProtocol::Add>
          _cb);

  ::fidl::Result Add(
      int32_t a, int32_t b,
      ::fit::callback<
          void(::fidl::WireResponse<::fidl_test_nullable::SimpleProtocol::Add>*
                   response)>
          _cb);

  // Asynchronous variant of |SimpleProtocol.Add()|.
  // Caller provides the backing storage for FIDL message via request buffer.
  // Ownership of |_context| is given unsafely to the binding until |OnError|
  // or |OnReply| are called on it.
  ::fidl::Result Add(
      ::fidl::BufferSpan _request_buffer, int32_t a, int32_t b,
      ::fidl::WireResponseContext<::fidl_test_nullable::SimpleProtocol::Add>*
          _context);

  // Synchronous variant of |SimpleProtocol.Add()|.
  // Allocates 48 bytes of message buffer on the stack. No heap allocation
  // necessary.
  ::fidl::WireResult<::fidl_test_nullable::SimpleProtocol::Add> Add_Sync(
      int32_t a, int32_t b);

  // Synchronous variant of |SimpleProtocol.Add()|.
  // Caller provides the backing storage for FIDL message via request and
  // response buffers.
  ::fidl::WireUnownedResult<::fidl_test_nullable::SimpleProtocol::Add> Add_Sync(
      ::fidl::BufferSpan _request_buffer, int32_t a, int32_t b,
      ::fidl::BufferSpan _response_buffer);

  WireClientImpl() = default;

 private:
  std::optional<::fidl::UnbindInfo> DispatchEvent(
      ::fidl::IncomingMessage& msg,
      ::fidl::internal::AsyncEventHandler* maybe_event_handler) override;
};
#endif  // __Fuchsia__

#ifdef __Fuchsia__
// |EventSender| owns a server endpoint of a channel speaking
// the SimpleProtocol protocol, and can send events in that protocol.
template <>
class ::fidl::WireEventSender<::fidl_test_nullable::SimpleProtocol> {
 public:
  // Constructs an event sender with an invalid channel.
  WireEventSender() = default;

  explicit WireEventSender(
      ::fidl::ServerEnd<::fidl_test_nullable::SimpleProtocol> server_end)
      : server_end_(std::move(server_end)) {}

  // The underlying server channel endpoint, which may be replaced at run-time.
  const ::fidl::ServerEnd<::fidl_test_nullable::SimpleProtocol>& server_end()
      const {
    return server_end_;
  }
  ::fidl::ServerEnd<::fidl_test_nullable::SimpleProtocol>& server_end() {
    return server_end_;
  }

  const ::zx::channel& channel() const { return server_end_.channel(); }
  ::zx::channel& channel() { return server_end_.channel(); }

  // Whether the underlying channel is valid.
  bool is_valid() const { return server_end_.is_valid(); }

 private:
  ::fidl::ServerEnd<::fidl_test_nullable::SimpleProtocol> server_end_;
};

template <>
class ::fidl::internal::WireWeakEventSender<
    ::fidl_test_nullable::SimpleProtocol> {
 public:
 private:
  friend class ::fidl::ServerBindingRef<::fidl_test_nullable::SimpleProtocol>;

  explicit WireWeakEventSender(
      std::weak_ptr<::fidl::internal::AsyncServerBinding<
          ::fidl_test_nullable::SimpleProtocol>>
          binding)
      : binding_(std::move(binding)) {}

  std::weak_ptr<::fidl::internal::AsyncServerBinding<
      ::fidl_test_nullable::SimpleProtocol>>
      binding_;
};
#endif  // __Fuchsia__
