// WARNING: This file is machine generated by fidlgen.

#include <fidl/test.requestflexibleenvelope/cpp/natural_types.h>

#ifdef __Fuchsia__

void ::test_requestflexibleenvelope::
    ProtocolRequestStrictResponseFlexibleRequest::EncodeWithoutValidating(
        ::fidl::Encoder& encoder, size_t offset) {
  encoder.Alloc(::fidl::EncodingInlineSize<
                ::test_requestflexibleenvelope::
                    ProtocolRequestStrictResponseFlexibleRequest,
                ::fidl::Encoder>(&encoder));
  ::fidl::CodingTraits<
      ::test_requestflexibleenvelope::
          ProtocolRequestStrictResponseFlexibleRequest>::Encode(&encoder, this,
                                                                offset);
}

::test_requestflexibleenvelope::ProtocolRequestStrictResponseFlexibleRequest::
    ProtocolRequestStrictResponseFlexibleRequest(::fidl::Decoder& decoder)
    : storage_({::fidl::DecodeAs<::test_requestflexibleenvelope::StrictFoo>(
          &decoder, 0)}) {}
#endif  // __Fuchsia__

::test_requestflexibleenvelope::ProtocolRequestStrictResponseFlexibleRequest::
    Storage_
    test_requestflexibleenvelope::ProtocolRequestStrictResponseFlexibleRequest::
        CloneStorage_() const {
  return Storage_{::fidl::internal::NaturalClone(storage_.s)};
}
#ifdef __Fuchsia__

void ::test_requestflexibleenvelope::
    ProtocolRequestFlexibleResponseStrictTopResponse::EncodeWithoutValidating(
        ::fidl::Encoder& encoder, size_t offset) {
  encoder.Alloc(::fidl::EncodingInlineSize<
                ::test_requestflexibleenvelope::
                    ProtocolRequestFlexibleResponseStrictTopResponse,
                ::fidl::Encoder>(&encoder));
  ::fidl::CodingTraits<
      ::test_requestflexibleenvelope::
          ProtocolRequestFlexibleResponseStrictTopResponse>::Encode(&encoder,
                                                                    this,
                                                                    offset);
}

::test_requestflexibleenvelope::
    ProtocolRequestFlexibleResponseStrictTopResponse::
        ProtocolRequestFlexibleResponseStrictTopResponse(
            ::fidl::Decoder& decoder)
    : storage_({::fidl::DecodeAs<::test_requestflexibleenvelope::StrictFoo>(
          &decoder, 0)}) {}
#endif  // __Fuchsia__

::test_requestflexibleenvelope::
    ProtocolRequestFlexibleResponseStrictTopResponse::Storage_
    test_requestflexibleenvelope::
        ProtocolRequestFlexibleResponseStrictTopResponse::CloneStorage_()
            const {
  return Storage_{::fidl::internal::NaturalClone(storage_.f)};
}
#ifdef __Fuchsia__

void ::test_requestflexibleenvelope::
    ProtocolRequestStrictResponseFlexibleTopResponse::EncodeWithoutValidating(
        ::fidl::Encoder& encoder, size_t offset) {
  encoder.Alloc(::fidl::EncodingInlineSize<
                ::test_requestflexibleenvelope::
                    ProtocolRequestStrictResponseFlexibleTopResponse,
                ::fidl::Encoder>(&encoder));
  ::fidl::CodingTraits<
      ::test_requestflexibleenvelope::
          ProtocolRequestStrictResponseFlexibleTopResponse>::Encode(&encoder,
                                                                    this,
                                                                    offset);
}

::test_requestflexibleenvelope::
    ProtocolRequestStrictResponseFlexibleTopResponse::
        ProtocolRequestStrictResponseFlexibleTopResponse(
            ::fidl::Decoder& decoder)
    : storage_({::fidl::DecodeAs<::test_requestflexibleenvelope::FlexibleFoo>(
          &decoder, 0)}) {}
#endif  // __Fuchsia__

::test_requestflexibleenvelope::
    ProtocolRequestStrictResponseFlexibleTopResponse::Storage_
    test_requestflexibleenvelope::
        ProtocolRequestStrictResponseFlexibleTopResponse::CloneStorage_()
            const {
  return Storage_{::fidl::internal::NaturalClone(storage_.f)};
}
#ifdef __Fuchsia__

void ::test_requestflexibleenvelope::
    ProtocolRequestFlexibleResponseStrictRequest::EncodeWithoutValidating(
        ::fidl::Encoder& encoder, size_t offset) {
  encoder.Alloc(::fidl::EncodingInlineSize<
                ::test_requestflexibleenvelope::
                    ProtocolRequestFlexibleResponseStrictRequest,
                ::fidl::Encoder>(&encoder));
  ::fidl::CodingTraits<
      ::test_requestflexibleenvelope::
          ProtocolRequestFlexibleResponseStrictRequest>::Encode(&encoder, this,
                                                                offset);
}

::test_requestflexibleenvelope::ProtocolRequestFlexibleResponseStrictRequest::
    ProtocolRequestFlexibleResponseStrictRequest(::fidl::Decoder& decoder)
    : storage_({::fidl::DecodeAs<::test_requestflexibleenvelope::FlexibleFoo>(
          &decoder, 0)}) {}
#endif  // __Fuchsia__

::test_requestflexibleenvelope::ProtocolRequestFlexibleResponseStrictRequest::
    Storage_
    test_requestflexibleenvelope::ProtocolRequestFlexibleResponseStrictRequest::
        CloneStorage_() const {
  return Storage_{::fidl::internal::NaturalClone(storage_.s)};
}

std::shared_ptr<::test_requestflexibleenvelope::StrictFoo::Storage>
test_requestflexibleenvelope::StrictFoo::CloneStorage() const {
  const Storage& storage = *storage_;
  switch (storage_->index()) {
    case 1:
      return std::make_shared<Storage>(
          std::in_place_index<1>,
          ::fidl::internal::NaturalClone(std::get<1>(storage)));
    case 2:
      return std::make_shared<Storage>(
          std::in_place_index<2>,
          ::fidl::internal::NaturalClone(std::get<2>(storage)));
    default:
      return std::make_shared<Storage>();
  }
}

std::shared_ptr<::test_requestflexibleenvelope::FlexibleFoo::Storage>
test_requestflexibleenvelope::FlexibleFoo::CloneStorage() const {
  const Storage& storage = *storage_;
  switch (storage_->index()) {
    case 1:
      return std::make_shared<Storage>(
          std::in_place_index<1>,
          ::fidl::internal::NaturalClone(std::get<1>(storage)));
    case 2:
      return std::make_shared<Storage>(
          std::in_place_index<2>,
          ::fidl::internal::NaturalClone(std::get<2>(storage)));
    default:
      return std::make_shared<Storage>();
  }
}
