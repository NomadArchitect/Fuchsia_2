// WARNING: This file is machine generated by fidlgen.

#pragma once

#include <fidl/test.anonymous/cpp/markers.h>
#include <fidl/test.anonymous/cpp/natural_types.h>
#include <fidl/test.anonymous/cpp/wire_types.h>
#ifdef __Fuchsia__
#include <fidl/test.anonymous/cpp/natural_messaging.h>
#include <fidl/test.anonymous/cpp/wire_messaging.h>
#endif  // __Fuchsia__
#include <lib/fidl/cpp/wire_natural_conversions.h>

namespace fidl {
namespace internal {

template <>
struct WireNaturalConversionTraits<::test_anonymous::wire::TableData,
                                   ::test_anonymous::TableData> {
  static ::test_anonymous::TableData ToNatural(
      ::test_anonymous::wire::TableData src);
};

template <>
struct NaturalTypeForWireType<::test_anonymous::wire::TableData> {
  using type = ::test_anonymous::TableData;
};

template <>
struct WireNaturalConversionTraits<
    ::test_anonymous::wire::SomeProtocolSomeMethodRequest,
    ::test_anonymous::SomeProtocolSomeMethodRequest> {
  static ::test_anonymous::SomeProtocolSomeMethodRequest ToNatural(
      ::test_anonymous::wire::SomeProtocolSomeMethodRequest src);
};

template <>
struct NaturalTypeForWireType<
    ::test_anonymous::wire::SomeProtocolSomeMethodRequest> {
  using type = ::test_anonymous::SomeProtocolSomeMethodRequest;
};

template <>
struct WireNaturalConversionTraits<::test_anonymous::wire::OverrideTest,
                                   ::test_anonymous::OverrideTest> {
  static ::test_anonymous::OverrideTest ToNatural(
      ::test_anonymous::wire::OverrideTest src);
};

template <>
struct NaturalTypeForWireType<::test_anonymous::wire::OverrideTest> {
  using type = ::test_anonymous::OverrideTest;
};

template <>
struct WireNaturalConversionTraits<
    ::test_anonymous::wire::SomeProtocolSomeMethodResponse,
    ::test_anonymous::SomeProtocolSomeMethodResponse> {
  static ::test_anonymous::SomeProtocolSomeMethodResponse ToNatural(
      ::test_anonymous::wire::SomeProtocolSomeMethodResponse src);
};

template <>
struct NaturalTypeForWireType<
    ::test_anonymous::wire::SomeProtocolSomeMethodResponse> {
  using type = ::test_anonymous::SomeProtocolSomeMethodResponse;
};

template <>
struct WireNaturalConversionTraits<
    ::test_anonymous::wire::SomeProtocolSomeMethodTopResponse,
    ::test_anonymous::SomeProtocolSomeMethodTopResponse> {
  static ::test_anonymous::SomeProtocolSomeMethodTopResponse ToNatural(
      ::test_anonymous::wire::SomeProtocolSomeMethodTopResponse src);
};

template <>
struct NaturalTypeForWireType<
    ::test_anonymous::wire::SomeProtocolSomeMethodTopResponse> {
  using type = ::test_anonymous::SomeProtocolSomeMethodTopResponse;
};

template <>
struct WireNaturalConversionTraits<::test_anonymous::wire::TableMember,
                                   ::test_anonymous::TableMember> {
  static ::test_anonymous::TableMember ToNatural(
      ::test_anonymous::wire::TableMember src);
};

template <>
struct NaturalTypeForWireType<::test_anonymous::wire::TableMember> {
  using type = ::test_anonymous::TableMember;
};

template <>
struct WireNaturalConversionTraits<::test_anonymous::wire::FunctionApplication,
                                   ::test_anonymous::FunctionApplication> {
  static ::test_anonymous::FunctionApplication ToNatural(
      ::test_anonymous::wire::FunctionApplication src);
};

template <>
struct NaturalTypeForWireType<::test_anonymous::wire::FunctionApplication> {
  using type = ::test_anonymous::FunctionApplication;
};

template <>
struct WireNaturalConversionTraits<::test_anonymous::wire::UnionMember,
                                   ::test_anonymous::UnionMember> {
  static ::test_anonymous::UnionMember ToNatural(
      ::test_anonymous::wire::UnionMember src);
};

template <>
struct WireNaturalConversionTraits<
    ::test_anonymous::wire::UnionMember,
    std::unique_ptr<::test_anonymous::UnionMember>> {
  static std::unique_ptr<::test_anonymous::UnionMember> ToNatural(
      ::test_anonymous::wire::UnionMember src);
};

template <>
struct NaturalTypeForWireType<::test_anonymous::wire::UnionMember> {
  using type = std::unique_ptr<::test_anonymous::UnionMember>;
};

template <>
struct WireNaturalConversionTraits<::test_anonymous::wire::Expression,
                                   ::test_anonymous::Expression> {
  static ::test_anonymous::Expression ToNatural(
      ::test_anonymous::wire::Expression src);
};

template <>
struct WireNaturalConversionTraits<
    ::test_anonymous::wire::Expression,
    std::unique_ptr<::test_anonymous::Expression>> {
  static std::unique_ptr<::test_anonymous::Expression> ToNatural(
      ::test_anonymous::wire::Expression src);
};

template <>
struct NaturalTypeForWireType<::test_anonymous::wire::Expression> {
  using type = std::unique_ptr<::test_anonymous::Expression>;
};

template <>
struct WireNaturalConversionTraits<
    ::test_anonymous::wire::SomeProtocolSomeMethodResult,
    ::test_anonymous::SomeProtocolSomeMethodResult> {
  static ::test_anonymous::SomeProtocolSomeMethodResult ToNatural(
      ::test_anonymous::wire::SomeProtocolSomeMethodResult src);
};

template <>
struct WireNaturalConversionTraits<
    ::test_anonymous::wire::SomeProtocolSomeMethodResult,
    std::unique_ptr<::test_anonymous::SomeProtocolSomeMethodResult>> {
  static std::unique_ptr<::test_anonymous::SomeProtocolSomeMethodResult>
  ToNatural(::test_anonymous::wire::SomeProtocolSomeMethodResult src);
};

template <>
struct NaturalTypeForWireType<
    ::test_anonymous::wire::SomeProtocolSomeMethodResult> {
  using type = std::unique_ptr<::test_anonymous::SomeProtocolSomeMethodResult>;
};

#ifdef __Fuchsia__

template <>
struct WireNaturalConversionTraits<
    ::fidl::WireRequest<::test_anonymous::SomeProtocol::SomeMethod>,
    ::fidl::Request<::test_anonymous::SomeProtocol::SomeMethod>> {
  static ::fidl::Request<::test_anonymous::SomeProtocol::SomeMethod> ToNatural(
      ::fidl::WireRequest<::test_anonymous::SomeProtocol::SomeMethod> src);
};

template <>
struct NaturalTypeForWireType<
    ::fidl::WireRequest<::test_anonymous::SomeProtocol::SomeMethod>> {
  using type = ::fidl::Request<::test_anonymous::SomeProtocol::SomeMethod>;
};

template <>
struct WireNaturalConversionTraits<
    ::fidl::WireResponse<::test_anonymous::SomeProtocol::SomeMethod>,
    ::fidl::Response<::test_anonymous::SomeProtocol::SomeMethod>> {
  static ::fidl::Response<::test_anonymous::SomeProtocol::SomeMethod> ToNatural(
      ::fidl::WireResponse<::test_anonymous::SomeProtocol::SomeMethod> src);
};

template <>
struct NaturalTypeForWireType<
    ::fidl::WireResponse<::test_anonymous::SomeProtocol::SomeMethod>> {
  using type = ::fidl::Response<::test_anonymous::SomeProtocol::SomeMethod>;
};
#endif  // __Fuchsia__
}  // namespace internal
}  // namespace fidl
