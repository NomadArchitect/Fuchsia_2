// WARNING: This file is machine generated by fidlgen.

#pragma once

#include <fidl/test.protocollayouts/cpp/common_types.h>
#include <fidl/test.protocollayouts/cpp/markers.h>
#include <lib/fidl/cpp/natural_coding_traits.h>
#include <lib/fidl/cpp/natural_types.h>

#include <cinttypes>
#include <string>

#ifdef __Fuchsia__

#include <lib/zx/channel.h>

#endif  // __Fuchsia__

#include <fidl/test.protocollayouts.imported/cpp/natural_types.h>

namespace test_protocollayouts {
class MainProtocolTwoWayImportWithErrorTopResponse;

class MainProtocolTwoWayAnonWithErrorTopResponse;

class MainProtocolOnImportWithErrorRequest;

class MainProtocolOnAnonWithErrorRequest;

class MainProtocolTwoWayLocalWithErrorTopResponse;

class MainProtocolOnLocalWithErrorRequest;

class MainProtocol_OnAnonWithError_Response;

class MainProtocolTwoWayAnonWithErrorRequest;

class MainProtocolTwoWayAnonTopResponse;

class MainProtocolOneWayAnonRequest;

class LocalTablePayload;

class MainProtocol_TwoWayImportWithError_Result;

class MainProtocol_TwoWayAnonWithError_Response;

class MainProtocol_TwoWayAnonWithError_Result;

class MainProtocol_OnImportWithError_Result;

class MainProtocol_OnAnonWithError_Result;

class MainProtocolTwoWayAnonRequest;

class MainProtocolOnAnonRequest;

class LocalUnionPayload;

class MainProtocol_TwoWayLocalWithError_Result;

class MainProtocol_OnLocalWithError_Result;

extern "C" const fidl_type_t
    test_protocollayouts_MainProtocol_TwoWayImportWithError_ResultTable;

class MainProtocol_TwoWayImportWithError_Result final {
 private:
  using Storage_ =
      cpp17::variant<cpp17::monostate,
                     ::test_protocollayouts_imported::ImportUnionPayload,
                     uint32_t>;

 public:
  // TODO: share union tag types between wire & natural.
  enum class Tag : fidl_union_tag_t {
    kResponse = 1,  // 0x1
    kErr = 2,       // 0x2
  };

  // Create an unknown value of this union.
  MainProtocol_TwoWayImportWithError_Result()
      : storage_(std::make_shared<Storage_>()) {}

  MainProtocol_TwoWayImportWithError_Result(
      MainProtocol_TwoWayImportWithError_Result&&) noexcept = default;
  MainProtocol_TwoWayImportWithError_Result& operator=(
      MainProtocol_TwoWayImportWithError_Result&&) noexcept = default;
  MainProtocol_TwoWayImportWithError_Result(
      const MainProtocol_TwoWayImportWithError_Result& other) noexcept
      : MainProtocol_TwoWayImportWithError_Result(other.CloneStorage_()) {}
  MainProtocol_TwoWayImportWithError_Result& operator=(
      const MainProtocol_TwoWayImportWithError_Result& other) noexcept {
    storage_ = other.CloneStorage_();
    return *this;
  }

  bool operator==(
      const MainProtocol_TwoWayImportWithError_Result& other) const noexcept {
    return *storage_ == *other.storage_;
  }
  bool operator!=(
      const MainProtocol_TwoWayImportWithError_Result& other) const noexcept {
    return *storage_ != *other.storage_;
  }

  constexpr ::test_protocollayouts::MainProtocol_TwoWayImportWithError_Result::
      Tag
      Which() const {
    return MainProtocol_TwoWayImportWithError_Result::IndexToTag(
        storage_->index());
  }
  static MainProtocol_TwoWayImportWithError_Result WithResponse(
      ::test_protocollayouts_imported::ImportUnionPayload val) {
    return MainProtocol_TwoWayImportWithError_Result(
        std::make_shared<Storage_>(std::in_place_index_t<1>{}, std::move(val)));
  }

  const ::fidl::internal::UnionMemberView<1, Storage_> response() const {
    return ::fidl::internal::UnionMemberView<1, Storage_>(storage_);
  }
  ::fidl::internal::UnionMemberView<1, Storage_> response() {
    return ::fidl::internal::UnionMemberView<1, Storage_>(storage_);
  }
  static MainProtocol_TwoWayImportWithError_Result WithErr(uint32_t val) {
    return MainProtocol_TwoWayImportWithError_Result(
        std::make_shared<Storage_>(std::in_place_index_t<2>{}, std::move(val)));
  }

  const ::fidl::internal::UnionMemberView<2, Storage_> err() const {
    return ::fidl::internal::UnionMemberView<2, Storage_>(storage_);
  }
  ::fidl::internal::UnionMemberView<2, Storage_> err() {
    return ::fidl::internal::UnionMemberView<2, Storage_>(storage_);
  }

 private:
  std::shared_ptr<Storage_> storage_;
  std::shared_ptr<Storage_> CloneStorage_() const;
  friend struct ::fidl::internal::NaturalUnionCodingTraits<
      ::test_protocollayouts::MainProtocol_TwoWayImportWithError_Result>;
  static constexpr auto kMembers =
      std::make_tuple(::fidl::internal::NaturalUnionMember<
                          ::fidl::internal::NaturalCodingConstraintEmpty>(),
                      ::fidl::internal::NaturalUnionMember<
                          fidl::internal::NaturalCodingConstraintEmpty>(),
                      ::fidl::internal::NaturalUnionMember<
                          fidl::internal::NaturalCodingConstraintEmpty>());

  explicit MainProtocol_TwoWayImportWithError_Result(
      std::shared_ptr<Storage_> storage)
      : storage_(std::move(storage)) {}

  static constexpr size_t TagToIndex(
      ::test_protocollayouts::MainProtocol_TwoWayImportWithError_Result::Tag
          tag) {
    switch (tag) {
      case ::test_protocollayouts::MainProtocol_TwoWayImportWithError_Result::
          Tag::kResponse:
        return 1;
      case ::test_protocollayouts::MainProtocol_TwoWayImportWithError_Result::
          Tag::kErr:
        return 2;
    }
  }

  static constexpr ::test_protocollayouts::
      MainProtocol_TwoWayImportWithError_Result::Tag
      IndexToTag(size_t index) {
    switch (index) {
      case 1:
        return ::test_protocollayouts::
            MainProtocol_TwoWayImportWithError_Result::Tag::kResponse;
      case 2:
        return ::test_protocollayouts::
            MainProtocol_TwoWayImportWithError_Result::Tag::kErr;
      // TODO: what's the right thing to do here?
      default:
        return ::test_protocollayouts::
            MainProtocol_TwoWayImportWithError_Result::Tag::kResponse;
    }
  }
};

extern "C" const fidl_type_t
    test_protocollayouts_MainProtocolTwoWayImportWithErrorTopResponseTable;

class MainProtocolTwoWayImportWithErrorTopResponse final {
 private:
  struct Storage_;

 public:
  MainProtocolTwoWayImportWithErrorTopResponse(Storage_ storage) noexcept
      : storage_(std::move(storage)) {}
  MainProtocolTwoWayImportWithErrorTopResponse(
      ::test_protocollayouts::MainProtocol_TwoWayImportWithError_Result
          result) noexcept
      : storage_({.result = std::move(result)}) {}
  MainProtocolTwoWayImportWithErrorTopResponse()
      : MainProtocolTwoWayImportWithErrorTopResponse(Storage_{}) {}

  MainProtocolTwoWayImportWithErrorTopResponse(
      MainProtocolTwoWayImportWithErrorTopResponse&&) noexcept = default;
  MainProtocolTwoWayImportWithErrorTopResponse& operator=(
      MainProtocolTwoWayImportWithErrorTopResponse&&) noexcept = default;
  MainProtocolTwoWayImportWithErrorTopResponse(
      const MainProtocolTwoWayImportWithErrorTopResponse& other) noexcept
      : MainProtocolTwoWayImportWithErrorTopResponse(other.CloneStorage_()) {}
  MainProtocolTwoWayImportWithErrorTopResponse& operator=(
      const MainProtocolTwoWayImportWithErrorTopResponse& other) noexcept {
    storage_ = other.CloneStorage_();
    return *this;
  }

  bool operator==(const MainProtocolTwoWayImportWithErrorTopResponse& other)
      const noexcept {
    return ::fidl::internal::NaturalStructCodingTraits<
        ::test_protocollayouts::MainProtocolTwoWayImportWithErrorTopResponse,
        24, 16>::Equal(this, &other);
  }
  bool operator!=(const MainProtocolTwoWayImportWithErrorTopResponse& other)
      const noexcept {
    return !::fidl::internal::NaturalStructCodingTraits<
        ::test_protocollayouts::MainProtocolTwoWayImportWithErrorTopResponse,
        24, 16>::Equal(this, &other);
  }

  const ::test_protocollayouts::MainProtocol_TwoWayImportWithError_Result&
  result() const {
    return storage_.result;
  }

  ::test_protocollayouts::MainProtocol_TwoWayImportWithError_Result& result() {
    return storage_.result;
  }

 private:
  struct Storage_ final {
    ::test_protocollayouts::MainProtocol_TwoWayImportWithError_Result result{};
  };

  Storage_ storage_;
  Storage_ CloneStorage_() const;

  friend struct ::fidl::internal::NaturalStructCodingTraits<
      ::test_protocollayouts::MainProtocolTwoWayImportWithErrorTopResponse, 24,
      16>;
  friend struct ::fidl::internal::MemberVisitor<
      ::test_protocollayouts::MainProtocolTwoWayImportWithErrorTopResponse>;
  static constexpr auto kMembers = std::make_tuple(
      ::fidl::internal::NaturalStructMember<
          Storage_,
          ::test_protocollayouts::MainProtocol_TwoWayImportWithError_Result,
          fidl::internal::NaturalCodingConstraintEmpty>{&Storage_::result, 0,
                                                        0});
};

extern "C" const fidl_type_t
    test_protocollayouts_MainProtocol_TwoWayAnonWithError_ResponseTable;

class MainProtocol_TwoWayAnonWithError_Response final {
 private:
  using Storage_ = cpp17::variant<cpp17::monostate, bool>;

 public:
  // TODO: share union tag types between wire & natural.
  enum class Tag : fidl_union_tag_t {
    kB = 1,  // 0x1
    kUnknown = ::std::numeric_limits<::fidl_union_tag_t>::max(),
  };

  // Create an unknown value of this union.
  MainProtocol_TwoWayAnonWithError_Response()
      : storage_(std::make_shared<Storage_>()) {}

  MainProtocol_TwoWayAnonWithError_Response(
      MainProtocol_TwoWayAnonWithError_Response&&) noexcept = default;
  MainProtocol_TwoWayAnonWithError_Response& operator=(
      MainProtocol_TwoWayAnonWithError_Response&&) noexcept = default;
  MainProtocol_TwoWayAnonWithError_Response(
      const MainProtocol_TwoWayAnonWithError_Response& other) noexcept
      : MainProtocol_TwoWayAnonWithError_Response(other.CloneStorage_()) {}
  MainProtocol_TwoWayAnonWithError_Response& operator=(
      const MainProtocol_TwoWayAnonWithError_Response& other) noexcept {
    storage_ = other.CloneStorage_();
    return *this;
  }

  bool operator==(
      const MainProtocol_TwoWayAnonWithError_Response& other) const noexcept {
    return *storage_ == *other.storage_;
  }
  bool operator!=(
      const MainProtocol_TwoWayAnonWithError_Response& other) const noexcept {
    return *storage_ != *other.storage_;
  }

  constexpr ::test_protocollayouts::MainProtocol_TwoWayAnonWithError_Response::
      Tag
      Which() const {
    return MainProtocol_TwoWayAnonWithError_Response::IndexToTag(
        storage_->index());
  }
  static MainProtocol_TwoWayAnonWithError_Response WithB(bool val) {
    return MainProtocol_TwoWayAnonWithError_Response(
        std::make_shared<Storage_>(std::in_place_index_t<1>{}, std::move(val)));
  }

  const ::fidl::internal::UnionMemberView<1, Storage_> b() const {
    return ::fidl::internal::UnionMemberView<1, Storage_>(storage_);
  }
  ::fidl::internal::UnionMemberView<1, Storage_> b() {
    return ::fidl::internal::UnionMemberView<1, Storage_>(storage_);
  }

 private:
  std::shared_ptr<Storage_> storage_;
  std::shared_ptr<Storage_> CloneStorage_() const;
  friend struct ::fidl::internal::NaturalUnionCodingTraits<
      ::test_protocollayouts::MainProtocol_TwoWayAnonWithError_Response>;
  static constexpr auto kMembers =
      std::make_tuple(::fidl::internal::NaturalUnionMember<
                          ::fidl::internal::NaturalCodingConstraintEmpty>(),
                      ::fidl::internal::NaturalUnionMember<
                          fidl::internal::NaturalCodingConstraintEmpty>());

  explicit MainProtocol_TwoWayAnonWithError_Response(
      std::shared_ptr<Storage_> storage)
      : storage_(std::move(storage)) {}

  static constexpr size_t TagToIndex(
      ::test_protocollayouts::MainProtocol_TwoWayAnonWithError_Response::Tag
          tag) {
    switch (tag) {
      case ::test_protocollayouts::MainProtocol_TwoWayAnonWithError_Response::
          Tag::kB:
        return 1;
      case ::test_protocollayouts::MainProtocol_TwoWayAnonWithError_Response::
          Tag::kUnknown:
        return 0;
    }
  }

  static constexpr ::test_protocollayouts::
      MainProtocol_TwoWayAnonWithError_Response::Tag
      IndexToTag(size_t index) {
    switch (index) {
      case 1:
        return ::test_protocollayouts::
            MainProtocol_TwoWayAnonWithError_Response::Tag::kB;
      default:
        return ::test_protocollayouts::
            MainProtocol_TwoWayAnonWithError_Response::Tag::kUnknown;
    }
  }
};

extern "C" const fidl_type_t
    test_protocollayouts_MainProtocol_TwoWayAnonWithError_ResultTable;

class MainProtocol_TwoWayAnonWithError_Result final {
 private:
  using Storage_ = cpp17::variant<
      cpp17::monostate,
      ::test_protocollayouts::MainProtocol_TwoWayAnonWithError_Response,
      uint32_t>;

 public:
  // TODO: share union tag types between wire & natural.
  enum class Tag : fidl_union_tag_t {
    kResponse = 1,  // 0x1
    kErr = 2,       // 0x2
  };

  // Create an unknown value of this union.
  MainProtocol_TwoWayAnonWithError_Result()
      : storage_(std::make_shared<Storage_>()) {}

  MainProtocol_TwoWayAnonWithError_Result(
      MainProtocol_TwoWayAnonWithError_Result&&) noexcept = default;
  MainProtocol_TwoWayAnonWithError_Result& operator=(
      MainProtocol_TwoWayAnonWithError_Result&&) noexcept = default;
  MainProtocol_TwoWayAnonWithError_Result(
      const MainProtocol_TwoWayAnonWithError_Result& other) noexcept
      : MainProtocol_TwoWayAnonWithError_Result(other.CloneStorage_()) {}
  MainProtocol_TwoWayAnonWithError_Result& operator=(
      const MainProtocol_TwoWayAnonWithError_Result& other) noexcept {
    storage_ = other.CloneStorage_();
    return *this;
  }

  bool operator==(
      const MainProtocol_TwoWayAnonWithError_Result& other) const noexcept {
    return *storage_ == *other.storage_;
  }
  bool operator!=(
      const MainProtocol_TwoWayAnonWithError_Result& other) const noexcept {
    return *storage_ != *other.storage_;
  }

  constexpr ::test_protocollayouts::MainProtocol_TwoWayAnonWithError_Result::Tag
  Which() const {
    return MainProtocol_TwoWayAnonWithError_Result::IndexToTag(
        storage_->index());
  }
  static MainProtocol_TwoWayAnonWithError_Result WithResponse(
      ::test_protocollayouts::MainProtocol_TwoWayAnonWithError_Response val) {
    return MainProtocol_TwoWayAnonWithError_Result(
        std::make_shared<Storage_>(std::in_place_index_t<1>{}, std::move(val)));
  }

  const ::fidl::internal::UnionMemberView<1, Storage_> response() const {
    return ::fidl::internal::UnionMemberView<1, Storage_>(storage_);
  }
  ::fidl::internal::UnionMemberView<1, Storage_> response() {
    return ::fidl::internal::UnionMemberView<1, Storage_>(storage_);
  }
  static MainProtocol_TwoWayAnonWithError_Result WithErr(uint32_t val) {
    return MainProtocol_TwoWayAnonWithError_Result(
        std::make_shared<Storage_>(std::in_place_index_t<2>{}, std::move(val)));
  }

  const ::fidl::internal::UnionMemberView<2, Storage_> err() const {
    return ::fidl::internal::UnionMemberView<2, Storage_>(storage_);
  }
  ::fidl::internal::UnionMemberView<2, Storage_> err() {
    return ::fidl::internal::UnionMemberView<2, Storage_>(storage_);
  }

 private:
  std::shared_ptr<Storage_> storage_;
  std::shared_ptr<Storage_> CloneStorage_() const;
  friend struct ::fidl::internal::NaturalUnionCodingTraits<
      ::test_protocollayouts::MainProtocol_TwoWayAnonWithError_Result>;
  static constexpr auto kMembers =
      std::make_tuple(::fidl::internal::NaturalUnionMember<
                          ::fidl::internal::NaturalCodingConstraintEmpty>(),
                      ::fidl::internal::NaturalUnionMember<
                          fidl::internal::NaturalCodingConstraintEmpty>(),
                      ::fidl::internal::NaturalUnionMember<
                          fidl::internal::NaturalCodingConstraintEmpty>());

  explicit MainProtocol_TwoWayAnonWithError_Result(
      std::shared_ptr<Storage_> storage)
      : storage_(std::move(storage)) {}

  static constexpr size_t TagToIndex(
      ::test_protocollayouts::MainProtocol_TwoWayAnonWithError_Result::Tag
          tag) {
    switch (tag) {
      case ::test_protocollayouts::MainProtocol_TwoWayAnonWithError_Result::
          Tag::kResponse:
        return 1;
      case ::test_protocollayouts::MainProtocol_TwoWayAnonWithError_Result::
          Tag::kErr:
        return 2;
    }
  }

  static constexpr ::test_protocollayouts::
      MainProtocol_TwoWayAnonWithError_Result::Tag
      IndexToTag(size_t index) {
    switch (index) {
      case 1:
        return ::test_protocollayouts::MainProtocol_TwoWayAnonWithError_Result::
            Tag::kResponse;
      case 2:
        return ::test_protocollayouts::MainProtocol_TwoWayAnonWithError_Result::
            Tag::kErr;
      // TODO: what's the right thing to do here?
      default:
        return ::test_protocollayouts::MainProtocol_TwoWayAnonWithError_Result::
            Tag::kResponse;
    }
  }
};

extern "C" const fidl_type_t
    test_protocollayouts_MainProtocolTwoWayAnonWithErrorTopResponseTable;

class MainProtocolTwoWayAnonWithErrorTopResponse final {
 private:
  struct Storage_;

 public:
  MainProtocolTwoWayAnonWithErrorTopResponse(Storage_ storage) noexcept
      : storage_(std::move(storage)) {}
  MainProtocolTwoWayAnonWithErrorTopResponse(
      ::test_protocollayouts::MainProtocol_TwoWayAnonWithError_Result
          result) noexcept
      : storage_({.result = std::move(result)}) {}
  MainProtocolTwoWayAnonWithErrorTopResponse()
      : MainProtocolTwoWayAnonWithErrorTopResponse(Storage_{}) {}

  MainProtocolTwoWayAnonWithErrorTopResponse(
      MainProtocolTwoWayAnonWithErrorTopResponse&&) noexcept = default;
  MainProtocolTwoWayAnonWithErrorTopResponse& operator=(
      MainProtocolTwoWayAnonWithErrorTopResponse&&) noexcept = default;
  MainProtocolTwoWayAnonWithErrorTopResponse(
      const MainProtocolTwoWayAnonWithErrorTopResponse& other) noexcept
      : MainProtocolTwoWayAnonWithErrorTopResponse(other.CloneStorage_()) {}
  MainProtocolTwoWayAnonWithErrorTopResponse& operator=(
      const MainProtocolTwoWayAnonWithErrorTopResponse& other) noexcept {
    storage_ = other.CloneStorage_();
    return *this;
  }

  bool operator==(
      const MainProtocolTwoWayAnonWithErrorTopResponse& other) const noexcept {
    return ::fidl::internal::NaturalStructCodingTraits<
        ::test_protocollayouts::MainProtocolTwoWayAnonWithErrorTopResponse, 24,
        16>::Equal(this, &other);
  }
  bool operator!=(
      const MainProtocolTwoWayAnonWithErrorTopResponse& other) const noexcept {
    return !::fidl::internal::NaturalStructCodingTraits<
        ::test_protocollayouts::MainProtocolTwoWayAnonWithErrorTopResponse, 24,
        16>::Equal(this, &other);
  }

  const ::test_protocollayouts::MainProtocol_TwoWayAnonWithError_Result&
  result() const {
    return storage_.result;
  }

  ::test_protocollayouts::MainProtocol_TwoWayAnonWithError_Result& result() {
    return storage_.result;
  }

 private:
  struct Storage_ final {
    ::test_protocollayouts::MainProtocol_TwoWayAnonWithError_Result result{};
  };

  Storage_ storage_;
  Storage_ CloneStorage_() const;

  friend struct ::fidl::internal::NaturalStructCodingTraits<
      ::test_protocollayouts::MainProtocolTwoWayAnonWithErrorTopResponse, 24,
      16>;
  friend struct ::fidl::internal::MemberVisitor<
      ::test_protocollayouts::MainProtocolTwoWayAnonWithErrorTopResponse>;
  static constexpr auto kMembers = std::make_tuple(
      ::fidl::internal::NaturalStructMember<
          Storage_,
          ::test_protocollayouts::MainProtocol_TwoWayAnonWithError_Result,
          fidl::internal::NaturalCodingConstraintEmpty>{&Storage_::result, 0,
                                                        0});
};

extern "C" const fidl_type_t
    test_protocollayouts_MainProtocol_OnImportWithError_ResultTable;

class MainProtocol_OnImportWithError_Result final {
 private:
  using Storage_ =
      cpp17::variant<cpp17::monostate,
                     ::test_protocollayouts_imported::ImportTablePayload,
                     uint32_t>;

 public:
  // TODO: share union tag types between wire & natural.
  enum class Tag : fidl_union_tag_t {
    kResponse = 1,  // 0x1
    kErr = 2,       // 0x2
  };

  // Create an unknown value of this union.
  MainProtocol_OnImportWithError_Result()
      : storage_(std::make_shared<Storage_>()) {}

  MainProtocol_OnImportWithError_Result(
      MainProtocol_OnImportWithError_Result&&) noexcept = default;
  MainProtocol_OnImportWithError_Result& operator=(
      MainProtocol_OnImportWithError_Result&&) noexcept = default;
  MainProtocol_OnImportWithError_Result(
      const MainProtocol_OnImportWithError_Result& other) noexcept
      : MainProtocol_OnImportWithError_Result(other.CloneStorage_()) {}
  MainProtocol_OnImportWithError_Result& operator=(
      const MainProtocol_OnImportWithError_Result& other) noexcept {
    storage_ = other.CloneStorage_();
    return *this;
  }

  bool operator==(
      const MainProtocol_OnImportWithError_Result& other) const noexcept {
    return *storage_ == *other.storage_;
  }
  bool operator!=(
      const MainProtocol_OnImportWithError_Result& other) const noexcept {
    return *storage_ != *other.storage_;
  }

  constexpr ::test_protocollayouts::MainProtocol_OnImportWithError_Result::Tag
  Which() const {
    return MainProtocol_OnImportWithError_Result::IndexToTag(storage_->index());
  }
  static MainProtocol_OnImportWithError_Result WithResponse(
      ::test_protocollayouts_imported::ImportTablePayload val) {
    return MainProtocol_OnImportWithError_Result(
        std::make_shared<Storage_>(std::in_place_index_t<1>{}, std::move(val)));
  }

  const ::fidl::internal::UnionMemberView<1, Storage_> response() const {
    return ::fidl::internal::UnionMemberView<1, Storage_>(storage_);
  }
  ::fidl::internal::UnionMemberView<1, Storage_> response() {
    return ::fidl::internal::UnionMemberView<1, Storage_>(storage_);
  }
  static MainProtocol_OnImportWithError_Result WithErr(uint32_t val) {
    return MainProtocol_OnImportWithError_Result(
        std::make_shared<Storage_>(std::in_place_index_t<2>{}, std::move(val)));
  }

  const ::fidl::internal::UnionMemberView<2, Storage_> err() const {
    return ::fidl::internal::UnionMemberView<2, Storage_>(storage_);
  }
  ::fidl::internal::UnionMemberView<2, Storage_> err() {
    return ::fidl::internal::UnionMemberView<2, Storage_>(storage_);
  }

 private:
  std::shared_ptr<Storage_> storage_;
  std::shared_ptr<Storage_> CloneStorage_() const;
  friend struct ::fidl::internal::NaturalUnionCodingTraits<
      ::test_protocollayouts::MainProtocol_OnImportWithError_Result>;
  static constexpr auto kMembers =
      std::make_tuple(::fidl::internal::NaturalUnionMember<
                          ::fidl::internal::NaturalCodingConstraintEmpty>(),
                      ::fidl::internal::NaturalUnionMember<
                          fidl::internal::NaturalCodingConstraintEmpty>(),
                      ::fidl::internal::NaturalUnionMember<
                          fidl::internal::NaturalCodingConstraintEmpty>());

  explicit MainProtocol_OnImportWithError_Result(
      std::shared_ptr<Storage_> storage)
      : storage_(std::move(storage)) {}

  static constexpr size_t TagToIndex(
      ::test_protocollayouts::MainProtocol_OnImportWithError_Result::Tag tag) {
    switch (tag) {
      case ::test_protocollayouts::MainProtocol_OnImportWithError_Result::Tag::
          kResponse:
        return 1;
      case ::test_protocollayouts::MainProtocol_OnImportWithError_Result::Tag::
          kErr:
        return 2;
    }
  }

  static constexpr ::test_protocollayouts::
      MainProtocol_OnImportWithError_Result::Tag
      IndexToTag(size_t index) {
    switch (index) {
      case 1:
        return ::test_protocollayouts::MainProtocol_OnImportWithError_Result::
            Tag::kResponse;
      case 2:
        return ::test_protocollayouts::MainProtocol_OnImportWithError_Result::
            Tag::kErr;
      // TODO: what's the right thing to do here?
      default:
        return ::test_protocollayouts::MainProtocol_OnImportWithError_Result::
            Tag::kResponse;
    }
  }
};

extern "C" const fidl_type_t
    test_protocollayouts_MainProtocolOnImportWithErrorRequestTable;

class MainProtocolOnImportWithErrorRequest final {
 private:
  struct Storage_;

 public:
  MainProtocolOnImportWithErrorRequest(Storage_ storage) noexcept
      : storage_(std::move(storage)) {}
  MainProtocolOnImportWithErrorRequest(
      ::test_protocollayouts::MainProtocol_OnImportWithError_Result
          result) noexcept
      : storage_({.result = std::move(result)}) {}
  MainProtocolOnImportWithErrorRequest()
      : MainProtocolOnImportWithErrorRequest(Storage_{}) {}

  MainProtocolOnImportWithErrorRequest(
      MainProtocolOnImportWithErrorRequest&&) noexcept = default;
  MainProtocolOnImportWithErrorRequest& operator=(
      MainProtocolOnImportWithErrorRequest&&) noexcept = default;
  MainProtocolOnImportWithErrorRequest(
      const MainProtocolOnImportWithErrorRequest& other) noexcept
      : MainProtocolOnImportWithErrorRequest(other.CloneStorage_()) {}
  MainProtocolOnImportWithErrorRequest& operator=(
      const MainProtocolOnImportWithErrorRequest& other) noexcept {
    storage_ = other.CloneStorage_();
    return *this;
  }

  bool operator==(
      const MainProtocolOnImportWithErrorRequest& other) const noexcept {
    return ::fidl::internal::NaturalStructCodingTraits<
        ::test_protocollayouts::MainProtocolOnImportWithErrorRequest, 24,
        16>::Equal(this, &other);
  }
  bool operator!=(
      const MainProtocolOnImportWithErrorRequest& other) const noexcept {
    return !::fidl::internal::NaturalStructCodingTraits<
        ::test_protocollayouts::MainProtocolOnImportWithErrorRequest, 24,
        16>::Equal(this, &other);
  }

  const ::test_protocollayouts::MainProtocol_OnImportWithError_Result& result()
      const {
    return storage_.result;
  }

  ::test_protocollayouts::MainProtocol_OnImportWithError_Result& result() {
    return storage_.result;
  }

 private:
  struct Storage_ final {
    ::test_protocollayouts::MainProtocol_OnImportWithError_Result result{};
  };

  Storage_ storage_;
  Storage_ CloneStorage_() const;

  friend struct ::fidl::internal::NaturalStructCodingTraits<
      ::test_protocollayouts::MainProtocolOnImportWithErrorRequest, 24, 16>;
  friend struct ::fidl::internal::MemberVisitor<
      ::test_protocollayouts::MainProtocolOnImportWithErrorRequest>;
  static constexpr auto kMembers = std::make_tuple(
      ::fidl::internal::NaturalStructMember<
          Storage_,
          ::test_protocollayouts::MainProtocol_OnImportWithError_Result,
          fidl::internal::NaturalCodingConstraintEmpty>{&Storage_::result, 0,
                                                        0});
};

extern "C" const fidl_type_t
    test_protocollayouts_MainProtocol_OnAnonWithError_ResponseTable;

class MainProtocol_OnAnonWithError_Response final {
 private:
  struct Storage_;

 public:
  MainProtocol_OnAnonWithError_Response(Storage_ storage) noexcept
      : storage_(std::move(storage)) {}
  MainProtocol_OnAnonWithError_Response() noexcept = default;
  MainProtocol_OnAnonWithError_Response(
      MainProtocol_OnAnonWithError_Response&&) noexcept = default;
  MainProtocol_OnAnonWithError_Response& operator=(
      MainProtocol_OnAnonWithError_Response&&) noexcept = default;
  MainProtocol_OnAnonWithError_Response(
      const MainProtocol_OnAnonWithError_Response& other) noexcept
      : MainProtocol_OnAnonWithError_Response(other.CloneStorage_()) {}
  MainProtocol_OnAnonWithError_Response& operator=(
      const MainProtocol_OnAnonWithError_Response& other) noexcept {
    storage_ = other.CloneStorage_();
    return *this;
  }
  bool operator==(
      const MainProtocol_OnAnonWithError_Response& other) const noexcept {
    return ::fidl::internal::NaturalTableCodingTraits<
        ::test_protocollayouts::MainProtocol_OnAnonWithError_Response>::
        Equal(this, &other);
  }
  bool operator!=(
      const MainProtocol_OnAnonWithError_Response& other) const noexcept {
    return !::fidl::internal::NaturalTableCodingTraits<
        ::test_protocollayouts::MainProtocol_OnAnonWithError_Response>::
        Equal(this, &other);
  }

  bool IsEmpty() const { return !(storage_.a.has_value()); }

  const cpp17::optional<uint16_t>& a() const { return storage_.a; }
  ::cpp17::optional<uint16_t>& a() { return storage_.a; }

 private:
  struct Storage_ final {
    ::cpp17::optional<uint16_t> a{};
  };

  // TODO(https://fxbug.dev/91252): Box the storage.
  Storage_ storage_;
  Storage_ CloneStorage_() const;
  friend struct ::fidl::internal::NaturalTableCodingTraits<
      ::test_protocollayouts::MainProtocol_OnAnonWithError_Response>;
  friend struct ::fidl::internal::MemberVisitor<
      ::test_protocollayouts::MainProtocol_OnAnonWithError_Response>;
  static constexpr auto kMembers = std::make_tuple(
      ::fidl::internal::NaturalTableMember<
          Storage_, uint16_t, fidl::internal::NaturalCodingConstraintEmpty>{
          1, &Storage_::a});
};

extern "C" const fidl_type_t
    test_protocollayouts_MainProtocol_OnAnonWithError_ResultTable;

class MainProtocol_OnAnonWithError_Result final {
 private:
  using Storage_ = cpp17::variant<
      cpp17::monostate,
      ::test_protocollayouts::MainProtocol_OnAnonWithError_Response, uint32_t>;

 public:
  // TODO: share union tag types between wire & natural.
  enum class Tag : fidl_union_tag_t {
    kResponse = 1,  // 0x1
    kErr = 2,       // 0x2
  };

  // Create an unknown value of this union.
  MainProtocol_OnAnonWithError_Result()
      : storage_(std::make_shared<Storage_>()) {}

  MainProtocol_OnAnonWithError_Result(
      MainProtocol_OnAnonWithError_Result&&) noexcept = default;
  MainProtocol_OnAnonWithError_Result& operator=(
      MainProtocol_OnAnonWithError_Result&&) noexcept = default;
  MainProtocol_OnAnonWithError_Result(
      const MainProtocol_OnAnonWithError_Result& other) noexcept
      : MainProtocol_OnAnonWithError_Result(other.CloneStorage_()) {}
  MainProtocol_OnAnonWithError_Result& operator=(
      const MainProtocol_OnAnonWithError_Result& other) noexcept {
    storage_ = other.CloneStorage_();
    return *this;
  }

  bool operator==(
      const MainProtocol_OnAnonWithError_Result& other) const noexcept {
    return *storage_ == *other.storage_;
  }
  bool operator!=(
      const MainProtocol_OnAnonWithError_Result& other) const noexcept {
    return *storage_ != *other.storage_;
  }

  constexpr ::test_protocollayouts::MainProtocol_OnAnonWithError_Result::Tag
  Which() const {
    return MainProtocol_OnAnonWithError_Result::IndexToTag(storage_->index());
  }
  static MainProtocol_OnAnonWithError_Result WithResponse(
      ::test_protocollayouts::MainProtocol_OnAnonWithError_Response val) {
    return MainProtocol_OnAnonWithError_Result(
        std::make_shared<Storage_>(std::in_place_index_t<1>{}, std::move(val)));
  }

  const ::fidl::internal::UnionMemberView<1, Storage_> response() const {
    return ::fidl::internal::UnionMemberView<1, Storage_>(storage_);
  }
  ::fidl::internal::UnionMemberView<1, Storage_> response() {
    return ::fidl::internal::UnionMemberView<1, Storage_>(storage_);
  }
  static MainProtocol_OnAnonWithError_Result WithErr(uint32_t val) {
    return MainProtocol_OnAnonWithError_Result(
        std::make_shared<Storage_>(std::in_place_index_t<2>{}, std::move(val)));
  }

  const ::fidl::internal::UnionMemberView<2, Storage_> err() const {
    return ::fidl::internal::UnionMemberView<2, Storage_>(storage_);
  }
  ::fidl::internal::UnionMemberView<2, Storage_> err() {
    return ::fidl::internal::UnionMemberView<2, Storage_>(storage_);
  }

 private:
  std::shared_ptr<Storage_> storage_;
  std::shared_ptr<Storage_> CloneStorage_() const;
  friend struct ::fidl::internal::NaturalUnionCodingTraits<
      ::test_protocollayouts::MainProtocol_OnAnonWithError_Result>;
  static constexpr auto kMembers =
      std::make_tuple(::fidl::internal::NaturalUnionMember<
                          ::fidl::internal::NaturalCodingConstraintEmpty>(),
                      ::fidl::internal::NaturalUnionMember<
                          fidl::internal::NaturalCodingConstraintEmpty>(),
                      ::fidl::internal::NaturalUnionMember<
                          fidl::internal::NaturalCodingConstraintEmpty>());

  explicit MainProtocol_OnAnonWithError_Result(
      std::shared_ptr<Storage_> storage)
      : storage_(std::move(storage)) {}

  static constexpr size_t TagToIndex(
      ::test_protocollayouts::MainProtocol_OnAnonWithError_Result::Tag tag) {
    switch (tag) {
      case ::test_protocollayouts::MainProtocol_OnAnonWithError_Result::Tag::
          kResponse:
        return 1;
      case ::test_protocollayouts::MainProtocol_OnAnonWithError_Result::Tag::
          kErr:
        return 2;
    }
  }

  static constexpr ::test_protocollayouts::MainProtocol_OnAnonWithError_Result::
      Tag
      IndexToTag(size_t index) {
    switch (index) {
      case 1:
        return ::test_protocollayouts::MainProtocol_OnAnonWithError_Result::
            Tag::kResponse;
      case 2:
        return ::test_protocollayouts::MainProtocol_OnAnonWithError_Result::
            Tag::kErr;
      // TODO: what's the right thing to do here?
      default:
        return ::test_protocollayouts::MainProtocol_OnAnonWithError_Result::
            Tag::kResponse;
    }
  }
};

extern "C" const fidl_type_t
    test_protocollayouts_MainProtocolOnAnonWithErrorRequestTable;

class MainProtocolOnAnonWithErrorRequest final {
 private:
  struct Storage_;

 public:
  MainProtocolOnAnonWithErrorRequest(Storage_ storage) noexcept
      : storage_(std::move(storage)) {}
  MainProtocolOnAnonWithErrorRequest(
      ::test_protocollayouts::MainProtocol_OnAnonWithError_Result
          result) noexcept
      : storage_({.result = std::move(result)}) {}
  MainProtocolOnAnonWithErrorRequest()
      : MainProtocolOnAnonWithErrorRequest(Storage_{}) {}

  MainProtocolOnAnonWithErrorRequest(
      MainProtocolOnAnonWithErrorRequest&&) noexcept = default;
  MainProtocolOnAnonWithErrorRequest& operator=(
      MainProtocolOnAnonWithErrorRequest&&) noexcept = default;
  MainProtocolOnAnonWithErrorRequest(
      const MainProtocolOnAnonWithErrorRequest& other) noexcept
      : MainProtocolOnAnonWithErrorRequest(other.CloneStorage_()) {}
  MainProtocolOnAnonWithErrorRequest& operator=(
      const MainProtocolOnAnonWithErrorRequest& other) noexcept {
    storage_ = other.CloneStorage_();
    return *this;
  }

  bool operator==(
      const MainProtocolOnAnonWithErrorRequest& other) const noexcept {
    return ::fidl::internal::NaturalStructCodingTraits<
        ::test_protocollayouts::MainProtocolOnAnonWithErrorRequest, 24,
        16>::Equal(this, &other);
  }
  bool operator!=(
      const MainProtocolOnAnonWithErrorRequest& other) const noexcept {
    return !::fidl::internal::NaturalStructCodingTraits<
        ::test_protocollayouts::MainProtocolOnAnonWithErrorRequest, 24,
        16>::Equal(this, &other);
  }

  const ::test_protocollayouts::MainProtocol_OnAnonWithError_Result& result()
      const {
    return storage_.result;
  }

  ::test_protocollayouts::MainProtocol_OnAnonWithError_Result& result() {
    return storage_.result;
  }

 private:
  struct Storage_ final {
    ::test_protocollayouts::MainProtocol_OnAnonWithError_Result result{};
  };

  Storage_ storage_;
  Storage_ CloneStorage_() const;

  friend struct ::fidl::internal::NaturalStructCodingTraits<
      ::test_protocollayouts::MainProtocolOnAnonWithErrorRequest, 24, 16>;
  friend struct ::fidl::internal::MemberVisitor<
      ::test_protocollayouts::MainProtocolOnAnonWithErrorRequest>;
  static constexpr auto kMembers = std::make_tuple(
      ::fidl::internal::NaturalStructMember<
          Storage_, ::test_protocollayouts::MainProtocol_OnAnonWithError_Result,
          fidl::internal::NaturalCodingConstraintEmpty>{&Storage_::result, 0,
                                                        0});
};

extern "C" const fidl_type_t
    test_protocollayouts_MainProtocolTwoWayAnonWithErrorRequestTable;

class MainProtocolTwoWayAnonWithErrorRequest final {
 private:
  struct Storage_;

 public:
  MainProtocolTwoWayAnonWithErrorRequest(Storage_ storage) noexcept
      : storage_(std::move(storage)) {}
  MainProtocolTwoWayAnonWithErrorRequest() noexcept = default;
  MainProtocolTwoWayAnonWithErrorRequest(
      MainProtocolTwoWayAnonWithErrorRequest&&) noexcept = default;
  MainProtocolTwoWayAnonWithErrorRequest& operator=(
      MainProtocolTwoWayAnonWithErrorRequest&&) noexcept = default;
  MainProtocolTwoWayAnonWithErrorRequest(
      const MainProtocolTwoWayAnonWithErrorRequest& other) noexcept
      : MainProtocolTwoWayAnonWithErrorRequest(other.CloneStorage_()) {}
  MainProtocolTwoWayAnonWithErrorRequest& operator=(
      const MainProtocolTwoWayAnonWithErrorRequest& other) noexcept {
    storage_ = other.CloneStorage_();
    return *this;
  }
  bool operator==(
      const MainProtocolTwoWayAnonWithErrorRequest& other) const noexcept {
    return ::fidl::internal::NaturalTableCodingTraits<
        ::test_protocollayouts::MainProtocolTwoWayAnonWithErrorRequest>::
        Equal(this, &other);
  }
  bool operator!=(
      const MainProtocolTwoWayAnonWithErrorRequest& other) const noexcept {
    return !::fidl::internal::NaturalTableCodingTraits<
        ::test_protocollayouts::MainProtocolTwoWayAnonWithErrorRequest>::
        Equal(this, &other);
  }

  bool IsEmpty() const { return !(storage_.a.has_value()); }

  const cpp17::optional<uint16_t>& a() const { return storage_.a; }
  ::cpp17::optional<uint16_t>& a() { return storage_.a; }

 private:
  struct Storage_ final {
    ::cpp17::optional<uint16_t> a{};
  };

  // TODO(https://fxbug.dev/91252): Box the storage.
  Storage_ storage_;
  Storage_ CloneStorage_() const;
  friend struct ::fidl::internal::NaturalTableCodingTraits<
      ::test_protocollayouts::MainProtocolTwoWayAnonWithErrorRequest>;
  friend struct ::fidl::internal::MemberVisitor<
      ::test_protocollayouts::MainProtocolTwoWayAnonWithErrorRequest>;
  static constexpr auto kMembers = std::make_tuple(
      ::fidl::internal::NaturalTableMember<
          Storage_, uint16_t, fidl::internal::NaturalCodingConstraintEmpty>{
          1, &Storage_::a});
};

extern "C" const fidl_type_t
    test_protocollayouts_MainProtocolTwoWayAnonTopResponseTable;

class MainProtocolTwoWayAnonTopResponse final {
 private:
  struct Storage_;

 public:
  MainProtocolTwoWayAnonTopResponse(Storage_ storage) noexcept
      : storage_(std::move(storage)) {}
  MainProtocolTwoWayAnonTopResponse() noexcept = default;
  MainProtocolTwoWayAnonTopResponse(
      MainProtocolTwoWayAnonTopResponse&&) noexcept = default;
  MainProtocolTwoWayAnonTopResponse& operator=(
      MainProtocolTwoWayAnonTopResponse&&) noexcept = default;
  MainProtocolTwoWayAnonTopResponse(
      const MainProtocolTwoWayAnonTopResponse& other) noexcept
      : MainProtocolTwoWayAnonTopResponse(other.CloneStorage_()) {}
  MainProtocolTwoWayAnonTopResponse& operator=(
      const MainProtocolTwoWayAnonTopResponse& other) noexcept {
    storage_ = other.CloneStorage_();
    return *this;
  }
  bool operator==(
      const MainProtocolTwoWayAnonTopResponse& other) const noexcept {
    return ::fidl::internal::NaturalTableCodingTraits<
        ::test_protocollayouts::MainProtocolTwoWayAnonTopResponse>::
        Equal(this, &other);
  }
  bool operator!=(
      const MainProtocolTwoWayAnonTopResponse& other) const noexcept {
    return !::fidl::internal::NaturalTableCodingTraits<
        ::test_protocollayouts::MainProtocolTwoWayAnonTopResponse>::
        Equal(this, &other);
  }

  bool IsEmpty() const { return !(storage_.a.has_value()); }

  const cpp17::optional<uint16_t>& a() const { return storage_.a; }
  ::cpp17::optional<uint16_t>& a() { return storage_.a; }

 private:
  struct Storage_ final {
    ::cpp17::optional<uint16_t> a{};
  };

  // TODO(https://fxbug.dev/91252): Box the storage.
  Storage_ storage_;
  Storage_ CloneStorage_() const;
  friend struct ::fidl::internal::NaturalTableCodingTraits<
      ::test_protocollayouts::MainProtocolTwoWayAnonTopResponse>;
  friend struct ::fidl::internal::MemberVisitor<
      ::test_protocollayouts::MainProtocolTwoWayAnonTopResponse>;
  static constexpr auto kMembers = std::make_tuple(
      ::fidl::internal::NaturalTableMember<
          Storage_, uint16_t, fidl::internal::NaturalCodingConstraintEmpty>{
          1, &Storage_::a});
};

extern "C" const fidl_type_t
    test_protocollayouts_MainProtocolTwoWayAnonRequestTable;

class MainProtocolTwoWayAnonRequest final {
 private:
  using Storage_ = cpp17::variant<cpp17::monostate, bool>;

 public:
  // TODO: share union tag types between wire & natural.
  enum class Tag : fidl_union_tag_t {
    kB = 1,  // 0x1
    kUnknown = ::std::numeric_limits<::fidl_union_tag_t>::max(),
  };

  // Create an unknown value of this union.
  MainProtocolTwoWayAnonRequest() : storage_(std::make_shared<Storage_>()) {}

  MainProtocolTwoWayAnonRequest(MainProtocolTwoWayAnonRequest&&) noexcept =
      default;
  MainProtocolTwoWayAnonRequest& operator=(
      MainProtocolTwoWayAnonRequest&&) noexcept = default;
  MainProtocolTwoWayAnonRequest(
      const MainProtocolTwoWayAnonRequest& other) noexcept
      : MainProtocolTwoWayAnonRequest(other.CloneStorage_()) {}
  MainProtocolTwoWayAnonRequest& operator=(
      const MainProtocolTwoWayAnonRequest& other) noexcept {
    storage_ = other.CloneStorage_();
    return *this;
  }

  bool operator==(const MainProtocolTwoWayAnonRequest& other) const noexcept {
    return *storage_ == *other.storage_;
  }
  bool operator!=(const MainProtocolTwoWayAnonRequest& other) const noexcept {
    return *storage_ != *other.storage_;
  }

  constexpr ::test_protocollayouts::MainProtocolTwoWayAnonRequest::Tag Which()
      const {
    return MainProtocolTwoWayAnonRequest::IndexToTag(storage_->index());
  }
  static MainProtocolTwoWayAnonRequest WithB(bool val) {
    return MainProtocolTwoWayAnonRequest(
        std::make_shared<Storage_>(std::in_place_index_t<1>{}, std::move(val)));
  }

  const ::fidl::internal::UnionMemberView<1, Storage_> b() const {
    return ::fidl::internal::UnionMemberView<1, Storage_>(storage_);
  }
  ::fidl::internal::UnionMemberView<1, Storage_> b() {
    return ::fidl::internal::UnionMemberView<1, Storage_>(storage_);
  }

 private:
  std::shared_ptr<Storage_> storage_;
  std::shared_ptr<Storage_> CloneStorage_() const;
  friend struct ::fidl::internal::NaturalUnionCodingTraits<
      ::test_protocollayouts::MainProtocolTwoWayAnonRequest>;
  static constexpr auto kMembers =
      std::make_tuple(::fidl::internal::NaturalUnionMember<
                          ::fidl::internal::NaturalCodingConstraintEmpty>(),
                      ::fidl::internal::NaturalUnionMember<
                          fidl::internal::NaturalCodingConstraintEmpty>());

  explicit MainProtocolTwoWayAnonRequest(std::shared_ptr<Storage_> storage)
      : storage_(std::move(storage)) {}

  static constexpr size_t TagToIndex(
      ::test_protocollayouts::MainProtocolTwoWayAnonRequest::Tag tag) {
    switch (tag) {
      case ::test_protocollayouts::MainProtocolTwoWayAnonRequest::Tag::kB:
        return 1;
      case ::test_protocollayouts::MainProtocolTwoWayAnonRequest::Tag::kUnknown:
        return 0;
    }
  }

  static constexpr ::test_protocollayouts::MainProtocolTwoWayAnonRequest::Tag
  IndexToTag(size_t index) {
    switch (index) {
      case 1:
        return ::test_protocollayouts::MainProtocolTwoWayAnonRequest::Tag::kB;
      default:
        return ::test_protocollayouts::MainProtocolTwoWayAnonRequest::Tag::
            kUnknown;
    }
  }
};

extern "C" const fidl_type_t
    test_protocollayouts_MainProtocolOneWayAnonRequestTable;

class MainProtocolOneWayAnonRequest final {
 private:
  struct Storage_;

 public:
  MainProtocolOneWayAnonRequest(Storage_ storage) noexcept
      : storage_(std::move(storage)) {}
  MainProtocolOneWayAnonRequest() noexcept = default;
  MainProtocolOneWayAnonRequest(MainProtocolOneWayAnonRequest&&) noexcept =
      default;
  MainProtocolOneWayAnonRequest& operator=(
      MainProtocolOneWayAnonRequest&&) noexcept = default;
  MainProtocolOneWayAnonRequest(
      const MainProtocolOneWayAnonRequest& other) noexcept
      : MainProtocolOneWayAnonRequest(other.CloneStorage_()) {}
  MainProtocolOneWayAnonRequest& operator=(
      const MainProtocolOneWayAnonRequest& other) noexcept {
    storage_ = other.CloneStorage_();
    return *this;
  }
  bool operator==(const MainProtocolOneWayAnonRequest& other) const noexcept {
    return ::fidl::internal::NaturalTableCodingTraits<
        ::test_protocollayouts::MainProtocolOneWayAnonRequest>::Equal(this,
                                                                      &other);
  }
  bool operator!=(const MainProtocolOneWayAnonRequest& other) const noexcept {
    return !::fidl::internal::NaturalTableCodingTraits<
        ::test_protocollayouts::MainProtocolOneWayAnonRequest>::Equal(this,
                                                                      &other);
  }

  bool IsEmpty() const { return !(storage_.a.has_value()); }

  const cpp17::optional<uint16_t>& a() const { return storage_.a; }
  ::cpp17::optional<uint16_t>& a() { return storage_.a; }

 private:
  struct Storage_ final {
    ::cpp17::optional<uint16_t> a{};
  };

  // TODO(https://fxbug.dev/91252): Box the storage.
  Storage_ storage_;
  Storage_ CloneStorage_() const;
  friend struct ::fidl::internal::NaturalTableCodingTraits<
      ::test_protocollayouts::MainProtocolOneWayAnonRequest>;
  friend struct ::fidl::internal::MemberVisitor<
      ::test_protocollayouts::MainProtocolOneWayAnonRequest>;
  static constexpr auto kMembers = std::make_tuple(
      ::fidl::internal::NaturalTableMember<
          Storage_, uint16_t, fidl::internal::NaturalCodingConstraintEmpty>{
          1, &Storage_::a});
};

extern "C" const fidl_type_t
    test_protocollayouts_MainProtocolOnAnonRequestTable;

class MainProtocolOnAnonRequest final {
 private:
  using Storage_ = cpp17::variant<cpp17::monostate, bool>;

 public:
  // TODO: share union tag types between wire & natural.
  enum class Tag : fidl_union_tag_t {
    kB = 1,  // 0x1
    kUnknown = ::std::numeric_limits<::fidl_union_tag_t>::max(),
  };

  // Create an unknown value of this union.
  MainProtocolOnAnonRequest() : storage_(std::make_shared<Storage_>()) {}

  MainProtocolOnAnonRequest(MainProtocolOnAnonRequest&&) noexcept = default;
  MainProtocolOnAnonRequest& operator=(MainProtocolOnAnonRequest&&) noexcept =
      default;
  MainProtocolOnAnonRequest(const MainProtocolOnAnonRequest& other) noexcept
      : MainProtocolOnAnonRequest(other.CloneStorage_()) {}
  MainProtocolOnAnonRequest& operator=(
      const MainProtocolOnAnonRequest& other) noexcept {
    storage_ = other.CloneStorage_();
    return *this;
  }

  bool operator==(const MainProtocolOnAnonRequest& other) const noexcept {
    return *storage_ == *other.storage_;
  }
  bool operator!=(const MainProtocolOnAnonRequest& other) const noexcept {
    return *storage_ != *other.storage_;
  }

  constexpr ::test_protocollayouts::MainProtocolOnAnonRequest::Tag Which()
      const {
    return MainProtocolOnAnonRequest::IndexToTag(storage_->index());
  }
  static MainProtocolOnAnonRequest WithB(bool val) {
    return MainProtocolOnAnonRequest(
        std::make_shared<Storage_>(std::in_place_index_t<1>{}, std::move(val)));
  }

  const ::fidl::internal::UnionMemberView<1, Storage_> b() const {
    return ::fidl::internal::UnionMemberView<1, Storage_>(storage_);
  }
  ::fidl::internal::UnionMemberView<1, Storage_> b() {
    return ::fidl::internal::UnionMemberView<1, Storage_>(storage_);
  }

 private:
  std::shared_ptr<Storage_> storage_;
  std::shared_ptr<Storage_> CloneStorage_() const;
  friend struct ::fidl::internal::NaturalUnionCodingTraits<
      ::test_protocollayouts::MainProtocolOnAnonRequest>;
  static constexpr auto kMembers =
      std::make_tuple(::fidl::internal::NaturalUnionMember<
                          ::fidl::internal::NaturalCodingConstraintEmpty>(),
                      ::fidl::internal::NaturalUnionMember<
                          fidl::internal::NaturalCodingConstraintEmpty>());

  explicit MainProtocolOnAnonRequest(std::shared_ptr<Storage_> storage)
      : storage_(std::move(storage)) {}

  static constexpr size_t TagToIndex(
      ::test_protocollayouts::MainProtocolOnAnonRequest::Tag tag) {
    switch (tag) {
      case ::test_protocollayouts::MainProtocolOnAnonRequest::Tag::kB:
        return 1;
      case ::test_protocollayouts::MainProtocolOnAnonRequest::Tag::kUnknown:
        return 0;
    }
  }

  static constexpr ::test_protocollayouts::MainProtocolOnAnonRequest::Tag
  IndexToTag(size_t index) {
    switch (index) {
      case 1:
        return ::test_protocollayouts::MainProtocolOnAnonRequest::Tag::kB;
      default:
        return ::test_protocollayouts::MainProtocolOnAnonRequest::Tag::kUnknown;
    }
  }
};

extern "C" const fidl_type_t test_protocollayouts_LocalUnionPayloadTable;

class LocalUnionPayload final {
 private:
  using Storage_ = cpp17::variant<cpp17::monostate, bool>;

 public:
  // TODO: share union tag types between wire & natural.
  enum class Tag : fidl_union_tag_t {
    kB = 1,  // 0x1
    kUnknown = ::std::numeric_limits<::fidl_union_tag_t>::max(),
  };

  // Create an unknown value of this union.
  LocalUnionPayload() : storage_(std::make_shared<Storage_>()) {}

  LocalUnionPayload(LocalUnionPayload&&) noexcept = default;
  LocalUnionPayload& operator=(LocalUnionPayload&&) noexcept = default;
  LocalUnionPayload(const LocalUnionPayload& other) noexcept
      : LocalUnionPayload(other.CloneStorage_()) {}
  LocalUnionPayload& operator=(const LocalUnionPayload& other) noexcept {
    storage_ = other.CloneStorage_();
    return *this;
  }

  bool operator==(const LocalUnionPayload& other) const noexcept {
    return *storage_ == *other.storage_;
  }
  bool operator!=(const LocalUnionPayload& other) const noexcept {
    return *storage_ != *other.storage_;
  }

  constexpr ::test_protocollayouts::LocalUnionPayload::Tag Which() const {
    return LocalUnionPayload::IndexToTag(storage_->index());
  }
  static LocalUnionPayload WithB(bool val) {
    return LocalUnionPayload(
        std::make_shared<Storage_>(std::in_place_index_t<1>{}, std::move(val)));
  }

  const ::fidl::internal::UnionMemberView<1, Storage_> b() const {
    return ::fidl::internal::UnionMemberView<1, Storage_>(storage_);
  }
  ::fidl::internal::UnionMemberView<1, Storage_> b() {
    return ::fidl::internal::UnionMemberView<1, Storage_>(storage_);
  }

 private:
  std::shared_ptr<Storage_> storage_;
  std::shared_ptr<Storage_> CloneStorage_() const;
  friend struct ::fidl::internal::NaturalUnionCodingTraits<
      ::test_protocollayouts::LocalUnionPayload>;
  static constexpr auto kMembers =
      std::make_tuple(::fidl::internal::NaturalUnionMember<
                          ::fidl::internal::NaturalCodingConstraintEmpty>(),
                      ::fidl::internal::NaturalUnionMember<
                          fidl::internal::NaturalCodingConstraintEmpty>());

  explicit LocalUnionPayload(std::shared_ptr<Storage_> storage)
      : storage_(std::move(storage)) {}

  static constexpr size_t TagToIndex(
      ::test_protocollayouts::LocalUnionPayload::Tag tag) {
    switch (tag) {
      case ::test_protocollayouts::LocalUnionPayload::Tag::kB:
        return 1;
      case ::test_protocollayouts::LocalUnionPayload::Tag::kUnknown:
        return 0;
    }
  }

  static constexpr ::test_protocollayouts::LocalUnionPayload::Tag IndexToTag(
      size_t index) {
    switch (index) {
      case 1:
        return ::test_protocollayouts::LocalUnionPayload::Tag::kB;
      default:
        return ::test_protocollayouts::LocalUnionPayload::Tag::kUnknown;
    }
  }
};

extern "C" const fidl_type_t
    test_protocollayouts_MainProtocol_TwoWayLocalWithError_ResultTable;

class MainProtocol_TwoWayLocalWithError_Result final {
 private:
  using Storage_ =
      cpp17::variant<cpp17::monostate,
                     ::test_protocollayouts::LocalUnionPayload, uint32_t>;

 public:
  // TODO: share union tag types between wire & natural.
  enum class Tag : fidl_union_tag_t {
    kResponse = 1,  // 0x1
    kErr = 2,       // 0x2
  };

  // Create an unknown value of this union.
  MainProtocol_TwoWayLocalWithError_Result()
      : storage_(std::make_shared<Storage_>()) {}

  MainProtocol_TwoWayLocalWithError_Result(
      MainProtocol_TwoWayLocalWithError_Result&&) noexcept = default;
  MainProtocol_TwoWayLocalWithError_Result& operator=(
      MainProtocol_TwoWayLocalWithError_Result&&) noexcept = default;
  MainProtocol_TwoWayLocalWithError_Result(
      const MainProtocol_TwoWayLocalWithError_Result& other) noexcept
      : MainProtocol_TwoWayLocalWithError_Result(other.CloneStorage_()) {}
  MainProtocol_TwoWayLocalWithError_Result& operator=(
      const MainProtocol_TwoWayLocalWithError_Result& other) noexcept {
    storage_ = other.CloneStorage_();
    return *this;
  }

  bool operator==(
      const MainProtocol_TwoWayLocalWithError_Result& other) const noexcept {
    return *storage_ == *other.storage_;
  }
  bool operator!=(
      const MainProtocol_TwoWayLocalWithError_Result& other) const noexcept {
    return *storage_ != *other.storage_;
  }

  constexpr ::test_protocollayouts::MainProtocol_TwoWayLocalWithError_Result::
      Tag
      Which() const {
    return MainProtocol_TwoWayLocalWithError_Result::IndexToTag(
        storage_->index());
  }
  static MainProtocol_TwoWayLocalWithError_Result WithResponse(
      ::test_protocollayouts::LocalUnionPayload val) {
    return MainProtocol_TwoWayLocalWithError_Result(
        std::make_shared<Storage_>(std::in_place_index_t<1>{}, std::move(val)));
  }

  const ::fidl::internal::UnionMemberView<1, Storage_> response() const {
    return ::fidl::internal::UnionMemberView<1, Storage_>(storage_);
  }
  ::fidl::internal::UnionMemberView<1, Storage_> response() {
    return ::fidl::internal::UnionMemberView<1, Storage_>(storage_);
  }
  static MainProtocol_TwoWayLocalWithError_Result WithErr(uint32_t val) {
    return MainProtocol_TwoWayLocalWithError_Result(
        std::make_shared<Storage_>(std::in_place_index_t<2>{}, std::move(val)));
  }

  const ::fidl::internal::UnionMemberView<2, Storage_> err() const {
    return ::fidl::internal::UnionMemberView<2, Storage_>(storage_);
  }
  ::fidl::internal::UnionMemberView<2, Storage_> err() {
    return ::fidl::internal::UnionMemberView<2, Storage_>(storage_);
  }

 private:
  std::shared_ptr<Storage_> storage_;
  std::shared_ptr<Storage_> CloneStorage_() const;
  friend struct ::fidl::internal::NaturalUnionCodingTraits<
      ::test_protocollayouts::MainProtocol_TwoWayLocalWithError_Result>;
  static constexpr auto kMembers =
      std::make_tuple(::fidl::internal::NaturalUnionMember<
                          ::fidl::internal::NaturalCodingConstraintEmpty>(),
                      ::fidl::internal::NaturalUnionMember<
                          fidl::internal::NaturalCodingConstraintEmpty>(),
                      ::fidl::internal::NaturalUnionMember<
                          fidl::internal::NaturalCodingConstraintEmpty>());

  explicit MainProtocol_TwoWayLocalWithError_Result(
      std::shared_ptr<Storage_> storage)
      : storage_(std::move(storage)) {}

  static constexpr size_t TagToIndex(
      ::test_protocollayouts::MainProtocol_TwoWayLocalWithError_Result::Tag
          tag) {
    switch (tag) {
      case ::test_protocollayouts::MainProtocol_TwoWayLocalWithError_Result::
          Tag::kResponse:
        return 1;
      case ::test_protocollayouts::MainProtocol_TwoWayLocalWithError_Result::
          Tag::kErr:
        return 2;
    }
  }

  static constexpr ::test_protocollayouts::
      MainProtocol_TwoWayLocalWithError_Result::Tag
      IndexToTag(size_t index) {
    switch (index) {
      case 1:
        return ::test_protocollayouts::
            MainProtocol_TwoWayLocalWithError_Result::Tag::kResponse;
      case 2:
        return ::test_protocollayouts::
            MainProtocol_TwoWayLocalWithError_Result::Tag::kErr;
      // TODO: what's the right thing to do here?
      default:
        return ::test_protocollayouts::
            MainProtocol_TwoWayLocalWithError_Result::Tag::kResponse;
    }
  }
};

extern "C" const fidl_type_t
    test_protocollayouts_MainProtocolTwoWayLocalWithErrorTopResponseTable;

class MainProtocolTwoWayLocalWithErrorTopResponse final {
 private:
  struct Storage_;

 public:
  MainProtocolTwoWayLocalWithErrorTopResponse(Storage_ storage) noexcept
      : storage_(std::move(storage)) {}
  MainProtocolTwoWayLocalWithErrorTopResponse(
      ::test_protocollayouts::MainProtocol_TwoWayLocalWithError_Result
          result) noexcept
      : storage_({.result = std::move(result)}) {}
  MainProtocolTwoWayLocalWithErrorTopResponse()
      : MainProtocolTwoWayLocalWithErrorTopResponse(Storage_{}) {}

  MainProtocolTwoWayLocalWithErrorTopResponse(
      MainProtocolTwoWayLocalWithErrorTopResponse&&) noexcept = default;
  MainProtocolTwoWayLocalWithErrorTopResponse& operator=(
      MainProtocolTwoWayLocalWithErrorTopResponse&&) noexcept = default;
  MainProtocolTwoWayLocalWithErrorTopResponse(
      const MainProtocolTwoWayLocalWithErrorTopResponse& other) noexcept
      : MainProtocolTwoWayLocalWithErrorTopResponse(other.CloneStorage_()) {}
  MainProtocolTwoWayLocalWithErrorTopResponse& operator=(
      const MainProtocolTwoWayLocalWithErrorTopResponse& other) noexcept {
    storage_ = other.CloneStorage_();
    return *this;
  }

  bool operator==(
      const MainProtocolTwoWayLocalWithErrorTopResponse& other) const noexcept {
    return ::fidl::internal::NaturalStructCodingTraits<
        ::test_protocollayouts::MainProtocolTwoWayLocalWithErrorTopResponse, 24,
        16>::Equal(this, &other);
  }
  bool operator!=(
      const MainProtocolTwoWayLocalWithErrorTopResponse& other) const noexcept {
    return !::fidl::internal::NaturalStructCodingTraits<
        ::test_protocollayouts::MainProtocolTwoWayLocalWithErrorTopResponse, 24,
        16>::Equal(this, &other);
  }

  const ::test_protocollayouts::MainProtocol_TwoWayLocalWithError_Result&
  result() const {
    return storage_.result;
  }

  ::test_protocollayouts::MainProtocol_TwoWayLocalWithError_Result& result() {
    return storage_.result;
  }

 private:
  struct Storage_ final {
    ::test_protocollayouts::MainProtocol_TwoWayLocalWithError_Result result{};
  };

  Storage_ storage_;
  Storage_ CloneStorage_() const;

  friend struct ::fidl::internal::NaturalStructCodingTraits<
      ::test_protocollayouts::MainProtocolTwoWayLocalWithErrorTopResponse, 24,
      16>;
  friend struct ::fidl::internal::MemberVisitor<
      ::test_protocollayouts::MainProtocolTwoWayLocalWithErrorTopResponse>;
  static constexpr auto kMembers = std::make_tuple(
      ::fidl::internal::NaturalStructMember<
          Storage_,
          ::test_protocollayouts::MainProtocol_TwoWayLocalWithError_Result,
          fidl::internal::NaturalCodingConstraintEmpty>{&Storage_::result, 0,
                                                        0});
};

extern "C" const fidl_type_t test_protocollayouts_LocalTablePayloadTable;

class LocalTablePayload final {
 private:
  struct Storage_;

 public:
  LocalTablePayload(Storage_ storage) noexcept : storage_(std::move(storage)) {}
  LocalTablePayload() noexcept = default;
  LocalTablePayload(LocalTablePayload&&) noexcept = default;
  LocalTablePayload& operator=(LocalTablePayload&&) noexcept = default;
  LocalTablePayload(const LocalTablePayload& other) noexcept
      : LocalTablePayload(other.CloneStorage_()) {}
  LocalTablePayload& operator=(const LocalTablePayload& other) noexcept {
    storage_ = other.CloneStorage_();
    return *this;
  }
  bool operator==(const LocalTablePayload& other) const noexcept {
    return ::fidl::internal::NaturalTableCodingTraits<
        ::test_protocollayouts::LocalTablePayload>::Equal(this, &other);
  }
  bool operator!=(const LocalTablePayload& other) const noexcept {
    return !::fidl::internal::NaturalTableCodingTraits<
        ::test_protocollayouts::LocalTablePayload>::Equal(this, &other);
  }

  bool IsEmpty() const { return !(storage_.a.has_value()); }

  const cpp17::optional<uint16_t>& a() const { return storage_.a; }
  ::cpp17::optional<uint16_t>& a() { return storage_.a; }

 private:
  struct Storage_ final {
    ::cpp17::optional<uint16_t> a{};
  };

  // TODO(https://fxbug.dev/91252): Box the storage.
  Storage_ storage_;
  Storage_ CloneStorage_() const;
  friend struct ::fidl::internal::NaturalTableCodingTraits<
      ::test_protocollayouts::LocalTablePayload>;
  friend struct ::fidl::internal::MemberVisitor<
      ::test_protocollayouts::LocalTablePayload>;
  static constexpr auto kMembers = std::make_tuple(
      ::fidl::internal::NaturalTableMember<
          Storage_, uint16_t, fidl::internal::NaturalCodingConstraintEmpty>{
          1, &Storage_::a});
};

extern "C" const fidl_type_t
    test_protocollayouts_MainProtocol_OnLocalWithError_ResultTable;

class MainProtocol_OnLocalWithError_Result final {
 private:
  using Storage_ =
      cpp17::variant<cpp17::monostate,
                     ::test_protocollayouts::LocalTablePayload, uint32_t>;

 public:
  // TODO: share union tag types between wire & natural.
  enum class Tag : fidl_union_tag_t {
    kResponse = 1,  // 0x1
    kErr = 2,       // 0x2
  };

  // Create an unknown value of this union.
  MainProtocol_OnLocalWithError_Result()
      : storage_(std::make_shared<Storage_>()) {}

  MainProtocol_OnLocalWithError_Result(
      MainProtocol_OnLocalWithError_Result&&) noexcept = default;
  MainProtocol_OnLocalWithError_Result& operator=(
      MainProtocol_OnLocalWithError_Result&&) noexcept = default;
  MainProtocol_OnLocalWithError_Result(
      const MainProtocol_OnLocalWithError_Result& other) noexcept
      : MainProtocol_OnLocalWithError_Result(other.CloneStorage_()) {}
  MainProtocol_OnLocalWithError_Result& operator=(
      const MainProtocol_OnLocalWithError_Result& other) noexcept {
    storage_ = other.CloneStorage_();
    return *this;
  }

  bool operator==(
      const MainProtocol_OnLocalWithError_Result& other) const noexcept {
    return *storage_ == *other.storage_;
  }
  bool operator!=(
      const MainProtocol_OnLocalWithError_Result& other) const noexcept {
    return *storage_ != *other.storage_;
  }

  constexpr ::test_protocollayouts::MainProtocol_OnLocalWithError_Result::Tag
  Which() const {
    return MainProtocol_OnLocalWithError_Result::IndexToTag(storage_->index());
  }
  static MainProtocol_OnLocalWithError_Result WithResponse(
      ::test_protocollayouts::LocalTablePayload val) {
    return MainProtocol_OnLocalWithError_Result(
        std::make_shared<Storage_>(std::in_place_index_t<1>{}, std::move(val)));
  }

  const ::fidl::internal::UnionMemberView<1, Storage_> response() const {
    return ::fidl::internal::UnionMemberView<1, Storage_>(storage_);
  }
  ::fidl::internal::UnionMemberView<1, Storage_> response() {
    return ::fidl::internal::UnionMemberView<1, Storage_>(storage_);
  }
  static MainProtocol_OnLocalWithError_Result WithErr(uint32_t val) {
    return MainProtocol_OnLocalWithError_Result(
        std::make_shared<Storage_>(std::in_place_index_t<2>{}, std::move(val)));
  }

  const ::fidl::internal::UnionMemberView<2, Storage_> err() const {
    return ::fidl::internal::UnionMemberView<2, Storage_>(storage_);
  }
  ::fidl::internal::UnionMemberView<2, Storage_> err() {
    return ::fidl::internal::UnionMemberView<2, Storage_>(storage_);
  }

 private:
  std::shared_ptr<Storage_> storage_;
  std::shared_ptr<Storage_> CloneStorage_() const;
  friend struct ::fidl::internal::NaturalUnionCodingTraits<
      ::test_protocollayouts::MainProtocol_OnLocalWithError_Result>;
  static constexpr auto kMembers =
      std::make_tuple(::fidl::internal::NaturalUnionMember<
                          ::fidl::internal::NaturalCodingConstraintEmpty>(),
                      ::fidl::internal::NaturalUnionMember<
                          fidl::internal::NaturalCodingConstraintEmpty>(),
                      ::fidl::internal::NaturalUnionMember<
                          fidl::internal::NaturalCodingConstraintEmpty>());

  explicit MainProtocol_OnLocalWithError_Result(
      std::shared_ptr<Storage_> storage)
      : storage_(std::move(storage)) {}

  static constexpr size_t TagToIndex(
      ::test_protocollayouts::MainProtocol_OnLocalWithError_Result::Tag tag) {
    switch (tag) {
      case ::test_protocollayouts::MainProtocol_OnLocalWithError_Result::Tag::
          kResponse:
        return 1;
      case ::test_protocollayouts::MainProtocol_OnLocalWithError_Result::Tag::
          kErr:
        return 2;
    }
  }

  static constexpr ::test_protocollayouts::
      MainProtocol_OnLocalWithError_Result::Tag
      IndexToTag(size_t index) {
    switch (index) {
      case 1:
        return ::test_protocollayouts::MainProtocol_OnLocalWithError_Result::
            Tag::kResponse;
      case 2:
        return ::test_protocollayouts::MainProtocol_OnLocalWithError_Result::
            Tag::kErr;
      // TODO: what's the right thing to do here?
      default:
        return ::test_protocollayouts::MainProtocol_OnLocalWithError_Result::
            Tag::kResponse;
    }
  }
};

extern "C" const fidl_type_t
    test_protocollayouts_MainProtocolOnLocalWithErrorRequestTable;

class MainProtocolOnLocalWithErrorRequest final {
 private:
  struct Storage_;

 public:
  MainProtocolOnLocalWithErrorRequest(Storage_ storage) noexcept
      : storage_(std::move(storage)) {}
  MainProtocolOnLocalWithErrorRequest(
      ::test_protocollayouts::MainProtocol_OnLocalWithError_Result
          result) noexcept
      : storage_({.result = std::move(result)}) {}
  MainProtocolOnLocalWithErrorRequest()
      : MainProtocolOnLocalWithErrorRequest(Storage_{}) {}

  MainProtocolOnLocalWithErrorRequest(
      MainProtocolOnLocalWithErrorRequest&&) noexcept = default;
  MainProtocolOnLocalWithErrorRequest& operator=(
      MainProtocolOnLocalWithErrorRequest&&) noexcept = default;
  MainProtocolOnLocalWithErrorRequest(
      const MainProtocolOnLocalWithErrorRequest& other) noexcept
      : MainProtocolOnLocalWithErrorRequest(other.CloneStorage_()) {}
  MainProtocolOnLocalWithErrorRequest& operator=(
      const MainProtocolOnLocalWithErrorRequest& other) noexcept {
    storage_ = other.CloneStorage_();
    return *this;
  }

  bool operator==(
      const MainProtocolOnLocalWithErrorRequest& other) const noexcept {
    return ::fidl::internal::NaturalStructCodingTraits<
        ::test_protocollayouts::MainProtocolOnLocalWithErrorRequest, 24,
        16>::Equal(this, &other);
  }
  bool operator!=(
      const MainProtocolOnLocalWithErrorRequest& other) const noexcept {
    return !::fidl::internal::NaturalStructCodingTraits<
        ::test_protocollayouts::MainProtocolOnLocalWithErrorRequest, 24,
        16>::Equal(this, &other);
  }

  const ::test_protocollayouts::MainProtocol_OnLocalWithError_Result& result()
      const {
    return storage_.result;
  }

  ::test_protocollayouts::MainProtocol_OnLocalWithError_Result& result() {
    return storage_.result;
  }

 private:
  struct Storage_ final {
    ::test_protocollayouts::MainProtocol_OnLocalWithError_Result result{};
  };

  Storage_ storage_;
  Storage_ CloneStorage_() const;

  friend struct ::fidl::internal::NaturalStructCodingTraits<
      ::test_protocollayouts::MainProtocolOnLocalWithErrorRequest, 24, 16>;
  friend struct ::fidl::internal::MemberVisitor<
      ::test_protocollayouts::MainProtocolOnLocalWithErrorRequest>;
  static constexpr auto kMembers = std::make_tuple(
      ::fidl::internal::NaturalStructMember<
          Storage_,
          ::test_protocollayouts::MainProtocol_OnLocalWithError_Result,
          fidl::internal::NaturalCodingConstraintEmpty>{&Storage_::result, 0,
                                                        0});
};

}  // namespace test_protocollayouts
namespace fidl {

extern "C" const fidl_type_t
    test_protocollayouts_MainProtocolTwoWayImportWithErrorTopResponseTable;

template <>
struct IsFidlType<
    ::test_protocollayouts::MainProtocolTwoWayImportWithErrorTopResponse>
    : public std::true_type {};

template <>
struct ::fidl::internal::TypeTraits<
    ::test_protocollayouts::MainProtocolTwoWayImportWithErrorTopResponse>
    final {
 public:
  static constexpr const fidl_type_t* kCodingTable =
      &test_protocollayouts_MainProtocolTwoWayImportWithErrorTopResponseTable;
};

template <>
struct internal::NaturalCodingTraits<
    ::test_protocollayouts::MainProtocolTwoWayImportWithErrorTopResponse,
    ::fidl::internal::NaturalCodingConstraintEmpty>
    final
    : public ::fidl::internal::NaturalStructCodingTraits<
          ::test_protocollayouts::MainProtocolTwoWayImportWithErrorTopResponse,
          24, 16> {};

template <>
struct internal::NaturalHasPadding<
    ::test_protocollayouts::MainProtocolTwoWayImportWithErrorTopResponse>
    : public std::true_type {};

template <>
struct internal::NaturalIsMemcpyCompatible<
    ::test_protocollayouts::MainProtocolTwoWayImportWithErrorTopResponse>
    : public std::bool_constant<
          !internal::NaturalHasPadding<
              ::test_protocollayouts::
                  MainProtocolTwoWayImportWithErrorTopResponse>::value &&
          internal::NaturalIsMemcpyCompatible<
              ::test_protocollayouts::
                  MainProtocol_TwoWayImportWithError_Result>::value> {};

extern "C" const fidl_type_t
    test_protocollayouts_MainProtocolTwoWayAnonWithErrorTopResponseTable;

template <>
struct IsFidlType<
    ::test_protocollayouts::MainProtocolTwoWayAnonWithErrorTopResponse>
    : public std::true_type {};

template <>
struct ::fidl::internal::TypeTraits<
    ::test_protocollayouts::MainProtocolTwoWayAnonWithErrorTopResponse>
    final {
 public:
  static constexpr const fidl_type_t* kCodingTable =
      &test_protocollayouts_MainProtocolTwoWayAnonWithErrorTopResponseTable;
};

template <>
struct internal::NaturalCodingTraits<
    ::test_protocollayouts::MainProtocolTwoWayAnonWithErrorTopResponse,
    ::fidl::internal::NaturalCodingConstraintEmpty>
    final
    : public ::fidl::internal::NaturalStructCodingTraits<
          ::test_protocollayouts::MainProtocolTwoWayAnonWithErrorTopResponse,
          24, 16> {};

template <>
struct internal::NaturalHasPadding<
    ::test_protocollayouts::MainProtocolTwoWayAnonWithErrorTopResponse>
    : public std::true_type {};

template <>
struct internal::NaturalIsMemcpyCompatible<
    ::test_protocollayouts::MainProtocolTwoWayAnonWithErrorTopResponse>
    : public std::bool_constant<
          !internal::NaturalHasPadding<
              ::test_protocollayouts::
                  MainProtocolTwoWayAnonWithErrorTopResponse>::value &&
          internal::NaturalIsMemcpyCompatible<
              ::test_protocollayouts::MainProtocol_TwoWayAnonWithError_Result>::
              value> {};

extern "C" const fidl_type_t
    test_protocollayouts_MainProtocolOnImportWithErrorRequestTable;

template <>
struct IsFidlType<::test_protocollayouts::MainProtocolOnImportWithErrorRequest>
    : public std::true_type {};

template <>
struct ::fidl::internal::TypeTraits<
    ::test_protocollayouts::MainProtocolOnImportWithErrorRequest>
    final {
 public:
  static constexpr const fidl_type_t* kCodingTable =
      &test_protocollayouts_MainProtocolOnImportWithErrorRequestTable;
};

template <>
struct internal::NaturalCodingTraits<
    ::test_protocollayouts::MainProtocolOnImportWithErrorRequest,
    ::fidl::internal::NaturalCodingConstraintEmpty>
    final : public ::fidl::internal::NaturalStructCodingTraits<
                ::test_protocollayouts::MainProtocolOnImportWithErrorRequest,
                24, 16> {};

template <>
struct internal::NaturalHasPadding<
    ::test_protocollayouts::MainProtocolOnImportWithErrorRequest>
    : public std::true_type {};

template <>
struct internal::NaturalIsMemcpyCompatible<
    ::test_protocollayouts::MainProtocolOnImportWithErrorRequest>
    : public std::bool_constant<
          !internal::NaturalHasPadding<
              ::test_protocollayouts::MainProtocolOnImportWithErrorRequest>::
              value &&
          internal::NaturalIsMemcpyCompatible<
              ::test_protocollayouts::MainProtocol_OnImportWithError_Result>::
              value> {};

extern "C" const fidl_type_t
    test_protocollayouts_MainProtocolOnAnonWithErrorRequestTable;

template <>
struct IsFidlType<::test_protocollayouts::MainProtocolOnAnonWithErrorRequest>
    : public std::true_type {};

template <>
struct ::fidl::internal::TypeTraits<
    ::test_protocollayouts::MainProtocolOnAnonWithErrorRequest>
    final {
 public:
  static constexpr const fidl_type_t* kCodingTable =
      &test_protocollayouts_MainProtocolOnAnonWithErrorRequestTable;
};

template <>
struct internal::NaturalCodingTraits<
    ::test_protocollayouts::MainProtocolOnAnonWithErrorRequest,
    ::fidl::internal::NaturalCodingConstraintEmpty>
    final
    : public ::fidl::internal::NaturalStructCodingTraits<
          ::test_protocollayouts::MainProtocolOnAnonWithErrorRequest, 24, 16> {
};

template <>
struct internal::NaturalHasPadding<
    ::test_protocollayouts::MainProtocolOnAnonWithErrorRequest>
    : public std::true_type {};

template <>
struct internal::NaturalIsMemcpyCompatible<
    ::test_protocollayouts::MainProtocolOnAnonWithErrorRequest>
    : public std::bool_constant<
          !internal::NaturalHasPadding<
              ::test_protocollayouts::MainProtocolOnAnonWithErrorRequest>::
              value &&
          internal::NaturalIsMemcpyCompatible<
              ::test_protocollayouts::MainProtocol_OnAnonWithError_Result>::
              value> {};

extern "C" const fidl_type_t
    test_protocollayouts_MainProtocolTwoWayLocalWithErrorTopResponseTable;

template <>
struct IsFidlType<
    ::test_protocollayouts::MainProtocolTwoWayLocalWithErrorTopResponse>
    : public std::true_type {};

template <>
struct ::fidl::internal::TypeTraits<
    ::test_protocollayouts::MainProtocolTwoWayLocalWithErrorTopResponse>
    final {
 public:
  static constexpr const fidl_type_t* kCodingTable =
      &test_protocollayouts_MainProtocolTwoWayLocalWithErrorTopResponseTable;
};

template <>
struct internal::NaturalCodingTraits<
    ::test_protocollayouts::MainProtocolTwoWayLocalWithErrorTopResponse,
    ::fidl::internal::NaturalCodingConstraintEmpty>
    final
    : public ::fidl::internal::NaturalStructCodingTraits<
          ::test_protocollayouts::MainProtocolTwoWayLocalWithErrorTopResponse,
          24, 16> {};

template <>
struct internal::NaturalHasPadding<
    ::test_protocollayouts::MainProtocolTwoWayLocalWithErrorTopResponse>
    : public std::true_type {};

template <>
struct internal::NaturalIsMemcpyCompatible<
    ::test_protocollayouts::MainProtocolTwoWayLocalWithErrorTopResponse>
    : public std::bool_constant<
          !internal::NaturalHasPadding<
              ::test_protocollayouts::
                  MainProtocolTwoWayLocalWithErrorTopResponse>::value &&
          internal::NaturalIsMemcpyCompatible<
              ::test_protocollayouts::
                  MainProtocol_TwoWayLocalWithError_Result>::value> {};

extern "C" const fidl_type_t
    test_protocollayouts_MainProtocolOnLocalWithErrorRequestTable;

template <>
struct IsFidlType<::test_protocollayouts::MainProtocolOnLocalWithErrorRequest>
    : public std::true_type {};

template <>
struct ::fidl::internal::TypeTraits<
    ::test_protocollayouts::MainProtocolOnLocalWithErrorRequest>
    final {
 public:
  static constexpr const fidl_type_t* kCodingTable =
      &test_protocollayouts_MainProtocolOnLocalWithErrorRequestTable;
};

template <>
struct internal::NaturalCodingTraits<
    ::test_protocollayouts::MainProtocolOnLocalWithErrorRequest,
    ::fidl::internal::NaturalCodingConstraintEmpty>
    final
    : public ::fidl::internal::NaturalStructCodingTraits<
          ::test_protocollayouts::MainProtocolOnLocalWithErrorRequest, 24, 16> {
};

template <>
struct internal::NaturalHasPadding<
    ::test_protocollayouts::MainProtocolOnLocalWithErrorRequest>
    : public std::true_type {};

template <>
struct internal::NaturalIsMemcpyCompatible<
    ::test_protocollayouts::MainProtocolOnLocalWithErrorRequest>
    : public std::bool_constant<
          !internal::NaturalHasPadding<
              ::test_protocollayouts::MainProtocolOnLocalWithErrorRequest>::
              value &&
          internal::NaturalIsMemcpyCompatible<
              ::test_protocollayouts::MainProtocol_OnLocalWithError_Result>::
              value> {};

extern "C" const fidl_type_t
    test_protocollayouts_MainProtocol_OnAnonWithError_ResponseTable;

template <>
struct IsFidlType<::test_protocollayouts::MainProtocol_OnAnonWithError_Response>
    : public std::true_type {};

template <>
struct ::fidl::internal::TypeTraits<
    ::test_protocollayouts::MainProtocol_OnAnonWithError_Response>
    final {
 public:
  static constexpr const fidl_type_t* kCodingTable =
      &test_protocollayouts_MainProtocol_OnAnonWithError_ResponseTable;
};

template <>
struct internal::NaturalCodingTraits<
    ::test_protocollayouts::MainProtocol_OnAnonWithError_Response,
    ::fidl::internal::NaturalCodingConstraintEmpty>
    : public ::fidl::internal::NaturalTableCodingTraits<
          ::test_protocollayouts::MainProtocol_OnAnonWithError_Response> {};

extern "C" const fidl_type_t
    test_protocollayouts_MainProtocolTwoWayAnonWithErrorRequestTable;

template <>
struct IsFidlType<
    ::test_protocollayouts::MainProtocolTwoWayAnonWithErrorRequest>
    : public std::true_type {};

template <>
struct ::fidl::internal::TypeTraits<
    ::test_protocollayouts::MainProtocolTwoWayAnonWithErrorRequest>
    final {
 public:
  static constexpr const fidl_type_t* kCodingTable =
      &test_protocollayouts_MainProtocolTwoWayAnonWithErrorRequestTable;
};

template <>
struct internal::NaturalCodingTraits<
    ::test_protocollayouts::MainProtocolTwoWayAnonWithErrorRequest,
    ::fidl::internal::NaturalCodingConstraintEmpty>
    : public ::fidl::internal::NaturalTableCodingTraits<
          ::test_protocollayouts::MainProtocolTwoWayAnonWithErrorRequest> {};

extern "C" const fidl_type_t
    test_protocollayouts_MainProtocolTwoWayAnonTopResponseTable;

template <>
struct IsFidlType<::test_protocollayouts::MainProtocolTwoWayAnonTopResponse>
    : public std::true_type {};

template <>
struct ::fidl::internal::TypeTraits<
    ::test_protocollayouts::MainProtocolTwoWayAnonTopResponse>
    final {
 public:
  static constexpr const fidl_type_t* kCodingTable =
      &test_protocollayouts_MainProtocolTwoWayAnonTopResponseTable;
};

template <>
struct internal::NaturalCodingTraits<
    ::test_protocollayouts::MainProtocolTwoWayAnonTopResponse,
    ::fidl::internal::NaturalCodingConstraintEmpty>
    : public ::fidl::internal::NaturalTableCodingTraits<
          ::test_protocollayouts::MainProtocolTwoWayAnonTopResponse> {};

extern "C" const fidl_type_t
    test_protocollayouts_MainProtocolOneWayAnonRequestTable;

template <>
struct IsFidlType<::test_protocollayouts::MainProtocolOneWayAnonRequest>
    : public std::true_type {};

template <>
struct ::fidl::internal::TypeTraits<
    ::test_protocollayouts::MainProtocolOneWayAnonRequest>
    final {
 public:
  static constexpr const fidl_type_t* kCodingTable =
      &test_protocollayouts_MainProtocolOneWayAnonRequestTable;
};

template <>
struct internal::NaturalCodingTraits<
    ::test_protocollayouts::MainProtocolOneWayAnonRequest,
    ::fidl::internal::NaturalCodingConstraintEmpty>
    : public ::fidl::internal::NaturalTableCodingTraits<
          ::test_protocollayouts::MainProtocolOneWayAnonRequest> {};

extern "C" const fidl_type_t test_protocollayouts_LocalTablePayloadTable;

template <>
struct IsFidlType<::test_protocollayouts::LocalTablePayload>
    : public std::true_type {};

template <>
struct ::fidl::internal::TypeTraits<::test_protocollayouts::LocalTablePayload>
    final {
 public:
  static constexpr const fidl_type_t* kCodingTable =
      &test_protocollayouts_LocalTablePayloadTable;
};

template <>
struct internal::NaturalCodingTraits<
    ::test_protocollayouts::LocalTablePayload,
    ::fidl::internal::NaturalCodingConstraintEmpty>
    : public ::fidl::internal::NaturalTableCodingTraits<
          ::test_protocollayouts::LocalTablePayload> {};

extern "C" const fidl_type_t
    test_protocollayouts_MainProtocol_TwoWayImportWithError_ResultTable;

template <>
struct IsFidlType<
    ::test_protocollayouts::MainProtocol_TwoWayImportWithError_Result>
    : public std::true_type {};
template <>
struct IsUnion<
    ::test_protocollayouts::MainProtocol_TwoWayImportWithError_Result>
    : public std::true_type {};

template <>
struct ::fidl::internal::TypeTraits<
    ::test_protocollayouts::MainProtocol_TwoWayImportWithError_Result>
    final {
 public:
  static constexpr const fidl_type_t* kCodingTable =
      &test_protocollayouts_MainProtocol_TwoWayImportWithError_ResultTable;
};

template <>
struct internal::NaturalCodingTraits<
    ::test_protocollayouts::MainProtocol_TwoWayImportWithError_Result,
    ::fidl::internal::NaturalCodingConstraintEmpty>
    final
    : public ::fidl::internal::NaturalUnionCodingTraits<
          ::test_protocollayouts::MainProtocol_TwoWayImportWithError_Result> {};

extern "C" const fidl_type_t
    test_protocollayouts_MainProtocol_TwoWayAnonWithError_ResponseTable;

template <>
struct IsFidlType<
    ::test_protocollayouts::MainProtocol_TwoWayAnonWithError_Response>
    : public std::true_type {};
template <>
struct IsUnion<
    ::test_protocollayouts::MainProtocol_TwoWayAnonWithError_Response>
    : public std::true_type {};

template <>
struct ::fidl::internal::TypeTraits<
    ::test_protocollayouts::MainProtocol_TwoWayAnonWithError_Response>
    final {
 public:
  static constexpr const fidl_type_t* kCodingTable =
      &test_protocollayouts_MainProtocol_TwoWayAnonWithError_ResponseTable;
};

template <>
struct internal::NaturalCodingTraits<
    ::test_protocollayouts::MainProtocol_TwoWayAnonWithError_Response,
    ::fidl::internal::NaturalCodingConstraintEmpty>
    final
    : public ::fidl::internal::NaturalUnionCodingTraits<
          ::test_protocollayouts::MainProtocol_TwoWayAnonWithError_Response> {};

extern "C" const fidl_type_t
    test_protocollayouts_MainProtocol_TwoWayAnonWithError_ResultTable;

template <>
struct IsFidlType<
    ::test_protocollayouts::MainProtocol_TwoWayAnonWithError_Result>
    : public std::true_type {};
template <>
struct IsUnion<::test_protocollayouts::MainProtocol_TwoWayAnonWithError_Result>
    : public std::true_type {};

template <>
struct ::fidl::internal::TypeTraits<
    ::test_protocollayouts::MainProtocol_TwoWayAnonWithError_Result>
    final {
 public:
  static constexpr const fidl_type_t* kCodingTable =
      &test_protocollayouts_MainProtocol_TwoWayAnonWithError_ResultTable;
};

template <>
struct internal::NaturalCodingTraits<
    ::test_protocollayouts::MainProtocol_TwoWayAnonWithError_Result,
    ::fidl::internal::NaturalCodingConstraintEmpty>
    final
    : public ::fidl::internal::NaturalUnionCodingTraits<
          ::test_protocollayouts::MainProtocol_TwoWayAnonWithError_Result> {};

extern "C" const fidl_type_t
    test_protocollayouts_MainProtocol_OnImportWithError_ResultTable;

template <>
struct IsFidlType<::test_protocollayouts::MainProtocol_OnImportWithError_Result>
    : public std::true_type {};
template <>
struct IsUnion<::test_protocollayouts::MainProtocol_OnImportWithError_Result>
    : public std::true_type {};

template <>
struct ::fidl::internal::TypeTraits<
    ::test_protocollayouts::MainProtocol_OnImportWithError_Result>
    final {
 public:
  static constexpr const fidl_type_t* kCodingTable =
      &test_protocollayouts_MainProtocol_OnImportWithError_ResultTable;
};

template <>
struct internal::NaturalCodingTraits<
    ::test_protocollayouts::MainProtocol_OnImportWithError_Result,
    ::fidl::internal::NaturalCodingConstraintEmpty>
    final : public ::fidl::internal::NaturalUnionCodingTraits<
                ::test_protocollayouts::MainProtocol_OnImportWithError_Result> {
};

extern "C" const fidl_type_t
    test_protocollayouts_MainProtocol_OnAnonWithError_ResultTable;

template <>
struct IsFidlType<::test_protocollayouts::MainProtocol_OnAnonWithError_Result>
    : public std::true_type {};
template <>
struct IsUnion<::test_protocollayouts::MainProtocol_OnAnonWithError_Result>
    : public std::true_type {};

template <>
struct ::fidl::internal::TypeTraits<
    ::test_protocollayouts::MainProtocol_OnAnonWithError_Result>
    final {
 public:
  static constexpr const fidl_type_t* kCodingTable =
      &test_protocollayouts_MainProtocol_OnAnonWithError_ResultTable;
};

template <>
struct internal::NaturalCodingTraits<
    ::test_protocollayouts::MainProtocol_OnAnonWithError_Result,
    ::fidl::internal::NaturalCodingConstraintEmpty>
    final : public ::fidl::internal::NaturalUnionCodingTraits<
                ::test_protocollayouts::MainProtocol_OnAnonWithError_Result> {};

extern "C" const fidl_type_t
    test_protocollayouts_MainProtocolTwoWayAnonRequestTable;

template <>
struct IsFidlType<::test_protocollayouts::MainProtocolTwoWayAnonRequest>
    : public std::true_type {};
template <>
struct IsUnion<::test_protocollayouts::MainProtocolTwoWayAnonRequest>
    : public std::true_type {};

template <>
struct ::fidl::internal::TypeTraits<
    ::test_protocollayouts::MainProtocolTwoWayAnonRequest>
    final {
 public:
  static constexpr const fidl_type_t* kCodingTable =
      &test_protocollayouts_MainProtocolTwoWayAnonRequestTable;
};

template <>
struct internal::NaturalCodingTraits<
    ::test_protocollayouts::MainProtocolTwoWayAnonRequest,
    ::fidl::internal::NaturalCodingConstraintEmpty>
    final : public ::fidl::internal::NaturalUnionCodingTraits<
                ::test_protocollayouts::MainProtocolTwoWayAnonRequest> {};

extern "C" const fidl_type_t
    test_protocollayouts_MainProtocolOnAnonRequestTable;

template <>
struct IsFidlType<::test_protocollayouts::MainProtocolOnAnonRequest>
    : public std::true_type {};
template <>
struct IsUnion<::test_protocollayouts::MainProtocolOnAnonRequest>
    : public std::true_type {};

template <>
struct ::fidl::internal::TypeTraits<
    ::test_protocollayouts::MainProtocolOnAnonRequest>
    final {
 public:
  static constexpr const fidl_type_t* kCodingTable =
      &test_protocollayouts_MainProtocolOnAnonRequestTable;
};

template <>
struct internal::NaturalCodingTraits<
    ::test_protocollayouts::MainProtocolOnAnonRequest,
    ::fidl::internal::NaturalCodingConstraintEmpty>
    final : public ::fidl::internal::NaturalUnionCodingTraits<
                ::test_protocollayouts::MainProtocolOnAnonRequest> {};

extern "C" const fidl_type_t test_protocollayouts_LocalUnionPayloadTable;

template <>
struct IsFidlType<::test_protocollayouts::LocalUnionPayload>
    : public std::true_type {};
template <>
struct IsUnion<::test_protocollayouts::LocalUnionPayload>
    : public std::true_type {};

template <>
struct ::fidl::internal::TypeTraits<::test_protocollayouts::LocalUnionPayload>
    final {
 public:
  static constexpr const fidl_type_t* kCodingTable =
      &test_protocollayouts_LocalUnionPayloadTable;
};

template <>
struct internal::NaturalCodingTraits<
    ::test_protocollayouts::LocalUnionPayload,
    ::fidl::internal::NaturalCodingConstraintEmpty>
    final : public ::fidl::internal::NaturalUnionCodingTraits<
                ::test_protocollayouts::LocalUnionPayload> {};

extern "C" const fidl_type_t
    test_protocollayouts_MainProtocol_TwoWayLocalWithError_ResultTable;

template <>
struct IsFidlType<
    ::test_protocollayouts::MainProtocol_TwoWayLocalWithError_Result>
    : public std::true_type {};
template <>
struct IsUnion<::test_protocollayouts::MainProtocol_TwoWayLocalWithError_Result>
    : public std::true_type {};

template <>
struct ::fidl::internal::TypeTraits<
    ::test_protocollayouts::MainProtocol_TwoWayLocalWithError_Result>
    final {
 public:
  static constexpr const fidl_type_t* kCodingTable =
      &test_protocollayouts_MainProtocol_TwoWayLocalWithError_ResultTable;
};

template <>
struct internal::NaturalCodingTraits<
    ::test_protocollayouts::MainProtocol_TwoWayLocalWithError_Result,
    ::fidl::internal::NaturalCodingConstraintEmpty>
    final
    : public ::fidl::internal::NaturalUnionCodingTraits<
          ::test_protocollayouts::MainProtocol_TwoWayLocalWithError_Result> {};

extern "C" const fidl_type_t
    test_protocollayouts_MainProtocol_OnLocalWithError_ResultTable;

template <>
struct IsFidlType<::test_protocollayouts::MainProtocol_OnLocalWithError_Result>
    : public std::true_type {};
template <>
struct IsUnion<::test_protocollayouts::MainProtocol_OnLocalWithError_Result>
    : public std::true_type {};

template <>
struct ::fidl::internal::TypeTraits<
    ::test_protocollayouts::MainProtocol_OnLocalWithError_Result>
    final {
 public:
  static constexpr const fidl_type_t* kCodingTable =
      &test_protocollayouts_MainProtocol_OnLocalWithError_ResultTable;
};

template <>
struct internal::NaturalCodingTraits<
    ::test_protocollayouts::MainProtocol_OnLocalWithError_Result,
    ::fidl::internal::NaturalCodingConstraintEmpty>
    final : public ::fidl::internal::NaturalUnionCodingTraits<
                ::test_protocollayouts::MainProtocol_OnLocalWithError_Result> {
};

}  // namespace fidl
