// WARNING: This file is machine generated by fidlgen.

#include <fidl/fidl.test.anonymous/cpp/wire.h>

#include <memory>

auto ::fidl_test_anonymous::wire::UnionMember::which() const
    -> ::fidl_test_anonymous::wire::UnionMember::Tag {
  ZX_ASSERT(!has_invalid_tag());
  switch (ordinal_) {
    case ::fidl_test_anonymous::wire::UnionMember::Ordinal::kUnionData:
      return static_cast<::fidl_test_anonymous::wire::UnionMember::Tag>(
          ordinal_);
    default:
      return ::fidl_test_anonymous::wire::UnionMember::Tag::kUnknown;
  }
}

void ::fidl_test_anonymous::wire::UnionMember::SizeAndOffsetAssertionHelper() {
  static_assert(sizeof(UnionMember) == sizeof(fidl_xunion_v2_t));
  static_assert(offsetof(UnionMember, ordinal_) ==
                offsetof(fidl_xunion_v2_t, tag));
  static_assert(offsetof(UnionMember, envelope_) ==
                offsetof(fidl_xunion_v2_t, envelope));
}

auto ::fidl_test_anonymous::wire::Expression::which() const
    -> ::fidl_test_anonymous::wire::Expression::Tag {
  ZX_ASSERT(!has_invalid_tag());
  switch (ordinal_) {
    case ::fidl_test_anonymous::wire::Expression::Ordinal::kValue:
    case ::fidl_test_anonymous::wire::Expression::Ordinal::kBinOp:
    case ::fidl_test_anonymous::wire::Expression::Ordinal::kFunctionApplication:
      return static_cast<::fidl_test_anonymous::wire::Expression::Tag>(
          ordinal_);
    default:
      return ::fidl_test_anonymous::wire::Expression::Tag::kUnknown;
  }
}

void ::fidl_test_anonymous::wire::Expression::SizeAndOffsetAssertionHelper() {
  static_assert(sizeof(Expression) == sizeof(fidl_xunion_v2_t));
  static_assert(offsetof(Expression, ordinal_) ==
                offsetof(fidl_xunion_v2_t, tag));
  static_assert(offsetof(Expression, envelope_) ==
                offsetof(fidl_xunion_v2_t, envelope));
}

void ::fidl_test_anonymous::wire::SomeProtocolSomeMethodResult::
    SizeAndOffsetAssertionHelper() {
  static_assert(sizeof(SomeProtocolSomeMethodResult) ==
                sizeof(fidl_xunion_v2_t));
  static_assert(offsetof(SomeProtocolSomeMethodResult, ordinal_) ==
                offsetof(fidl_xunion_v2_t, tag));
  static_assert(offsetof(SomeProtocolSomeMethodResult, envelope_) ==
                offsetof(fidl_xunion_v2_t, envelope));
}

namespace fidl_test_anonymous {
[[maybe_unused]] constexpr uint64_t kSomeProtocol_SomeMethod_Ordinal =
    8941579241812366574lu;

extern "C" const fidl_type_t
    fidl_test_anonymous_SomeProtocolSomeMethodRequestTable;

extern "C" const fidl_type_t
    fidl_test_anonymous_SomeProtocolSomeMethodResponseTable;
#ifdef __Fuchsia__
}  // namespace fidl_test_anonymous
::fidl::WireResult<::fidl_test_anonymous::SomeProtocol::SomeMethod>::WireResult(
    ::fidl::UnownedClientEnd<::fidl_test_anonymous::SomeProtocol> _client,
    ::fidl_test_anonymous::wire::UnionMember union_member,
    ::fidl_test_anonymous::wire::TableMember table_member) {
  FIDL_INTERNAL_DISABLE_AUTO_VAR_INIT
  ::fidl::OwnedEncodedMessage<
      ::fidl::WireRequest<::fidl_test_anonymous::SomeProtocol::SomeMethod>>
      _request(::fidl::internal::AllowUnownedInputRef{}, union_member,
               table_member);
  auto& _outgoing = _request.GetOutgoingMessage();
  _outgoing.Call<
      ::fidl::WireResponse<::fidl_test_anonymous::SomeProtocol::SomeMethod>>(
      _client, bytes_.data(), static_cast<uint32_t>(bytes_.size()));
  SetResult(_outgoing);
}

::fidl::WireResult<::fidl_test_anonymous::SomeProtocol::SomeMethod>::WireResult(
    ::fidl::UnownedClientEnd<::fidl_test_anonymous::SomeProtocol> _client,
    ::fidl_test_anonymous::wire::UnionMember union_member,
    ::fidl_test_anonymous::wire::TableMember table_member,
    zx_time_t _deadline) {
  FIDL_INTERNAL_DISABLE_AUTO_VAR_INIT
  ::fidl::OwnedEncodedMessage<
      ::fidl::WireRequest<::fidl_test_anonymous::SomeProtocol::SomeMethod>>
      _request(::fidl::internal::AllowUnownedInputRef{}, union_member,
               table_member);
  auto& _outgoing = _request.GetOutgoingMessage();
  _outgoing.Call<
      ::fidl::WireResponse<::fidl_test_anonymous::SomeProtocol::SomeMethod>>(
      _client, bytes_.data(), static_cast<uint32_t>(bytes_.size()), _deadline);
  SetResult(_outgoing);
}
namespace fidl_test_anonymous {
#endif  // __Fuchsia__

#ifdef __Fuchsia__
}  // namespace fidl_test_anonymous
::fidl::WireUnownedResult<::fidl_test_anonymous::SomeProtocol::SomeMethod>::
    WireUnownedResult(
        ::fidl::UnownedClientEnd<::fidl_test_anonymous::SomeProtocol> _client,
        uint8_t* _request_bytes, uint32_t _request_byte_capacity,
        ::fidl_test_anonymous::wire::UnionMember union_member,
        ::fidl_test_anonymous::wire::TableMember table_member,
        uint8_t* _response_bytes, uint32_t _response_byte_capacity)
    : bytes_(_response_bytes) {
  ::fidl::UnownedEncodedMessage<
      ::fidl::WireRequest<::fidl_test_anonymous::SomeProtocol::SomeMethod>>
      _request(_request_bytes, _request_byte_capacity, union_member,
               table_member);
  auto& _outgoing = _request.GetOutgoingMessage();
  _outgoing.Call<
      ::fidl::WireResponse<::fidl_test_anonymous::SomeProtocol::SomeMethod>>(
      _client, _response_bytes, _response_byte_capacity);
  ::fidl::Result::operator=(_outgoing);
}
namespace fidl_test_anonymous {
#endif  // __Fuchsia__

}  // namespace fidl_test_anonymous
#ifdef __Fuchsia__

::fidl::WireResponseContext<
    ::fidl_test_anonymous::SomeProtocol::SomeMethod>::WireResponseContext()
    : ::fidl::internal::ResponseContext(
          ::fidl_test_anonymous::kSomeProtocol_SomeMethod_Ordinal) {}

::cpp17::optional<::fidl::UnbindInfo>
fidl::WireResponseContext<::fidl_test_anonymous::SomeProtocol::SomeMethod>::
    OnRawResult(::fidl::IncomingMessage&& msg) {
  if (unlikely(!msg.ok())) {
    ::fidl::WireUnownedResult<::fidl_test_anonymous::SomeProtocol::SomeMethod>
        result{msg.error()};
    OnResult(result);
    return cpp17::nullopt;
  }
  ::fidl::DecodedMessage<
      ::fidl::WireResponse<::fidl_test_anonymous::SomeProtocol::SomeMethod>>
      decoded{std::move(msg)};
  ::fidl::Result maybe_error = decoded;
  ::fidl::WireUnownedResult<::fidl_test_anonymous::SomeProtocol::SomeMethod>
      result{std::move(decoded)};
  OnResult(result);
  if (unlikely(!maybe_error.ok())) {
    return ::fidl::UnbindInfo(maybe_error);
  }
  return cpp17::nullopt;
}
#endif  // __Fuchsia__

#ifdef __Fuchsia__

void fidl::internal::WireClientImpl<::fidl_test_anonymous::SomeProtocol>::
    SomeMethod(::fidl_test_anonymous::wire::UnionMember union_member,
               ::fidl_test_anonymous::wire::TableMember table_member,
               ::fidl::WireClientCallback<
                   ::fidl_test_anonymous::SomeProtocol::SomeMethod>
                   _cb) {
  using Callback = decltype(_cb);
  class ResponseContext final
      : public ::fidl::WireResponseContext<
            ::fidl_test_anonymous::SomeProtocol::SomeMethod> {
   public:
    ResponseContext(Callback cb) : cb_(std::move(cb)) {}

    void OnResult(
        ::fidl::WireUnownedResult<
            ::fidl_test_anonymous::SomeProtocol::SomeMethod>& result) override {
      cb_(result);
      delete this;
    }

   private:
    Callback cb_;
  };

  auto* _context = new ResponseContext(std::move(_cb));
  FIDL_INTERNAL_DISABLE_AUTO_VAR_INIT
  ::fidl::WireRequest<::fidl_test_anonymous::SomeProtocol::SomeMethod>::
      OwnedEncodedMessage _request(::fidl::internal::AllowUnownedInputRef{},
                                   union_member, table_member);
  ::fidl::internal::ClientBase::SendTwoWay(_request.GetOutgoingMessage(),
                                           _context);
}

void fidl::internal::WireClientImpl<::fidl_test_anonymous::SomeProtocol>::
    SomeMethod(
        ::fidl_test_anonymous::wire::UnionMember union_member,
        ::fidl_test_anonymous::wire::TableMember table_member,
        ::fit::callback<
            void(::fidl::WireResponse<
                 ::fidl_test_anonymous::SomeProtocol::SomeMethod>* response)>
            _cb) {
  using Callback = decltype(_cb);
  class ResponseContext final
      : public ::fidl::WireResponseContext<
            ::fidl_test_anonymous::SomeProtocol::SomeMethod> {
   public:
    ResponseContext(Callback cb) : cb_(std::move(cb)) {}

    void OnResult(
        ::fidl::WireUnownedResult<
            ::fidl_test_anonymous::SomeProtocol::SomeMethod>& result) override {
      if (result.ok()) {
        ::fidl::WireResponse<::fidl_test_anonymous::SomeProtocol::SomeMethod>*
            response = result.Unwrap();
        cb_(response);
      }
      delete this;
    }

   private:
    Callback cb_;
  };

  auto* _context = new ResponseContext(std::move(_cb));
  FIDL_INTERNAL_DISABLE_AUTO_VAR_INIT
  ::fidl::WireRequest<::fidl_test_anonymous::SomeProtocol::SomeMethod>::
      OwnedEncodedMessage _request(::fidl::internal::AllowUnownedInputRef{},
                                   union_member, table_member);
  ::fidl::internal::ClientBase::SendTwoWay(_request.GetOutgoingMessage(),
                                           _context);
}
void fidl::internal::WireClientImpl<::fidl_test_anonymous::SomeProtocol>::
    SomeMethod(::fidl::BufferSpan _request_buffer,
               ::fidl_test_anonymous::wire::UnionMember union_member,
               ::fidl_test_anonymous::wire::TableMember table_member,
               ::fidl::WireResponseContext<
                   ::fidl_test_anonymous::SomeProtocol::SomeMethod>* _context) {
  ::fidl::WireRequest<::fidl_test_anonymous::SomeProtocol::SomeMethod>::
      UnownedEncodedMessage _request(_request_buffer.data,
                                     _request_buffer.capacity, union_member,
                                     table_member);
  ::fidl::internal::ClientBase::SendTwoWay(_request.GetOutgoingMessage(),
                                           _context);
}
::fidl::WireResult<::fidl_test_anonymous::SomeProtocol::SomeMethod>
fidl::internal::WireClientImpl<::fidl_test_anonymous::SomeProtocol>::
    SomeMethod_Sync(::fidl_test_anonymous::wire::UnionMember union_member,
                    ::fidl_test_anonymous::wire::TableMember table_member) {
  return ::fidl::internal::ClientBase::MakeSyncCallWith(
      [&](std::shared_ptr<zx::channel> _channel) {
        return ::fidl::WireResult<
            ::fidl_test_anonymous::SomeProtocol::SomeMethod>(
            ::fidl::UnownedClientEnd<::fidl_test_anonymous::SomeProtocol>(
                _channel->get()),
            union_member, table_member);
      });
}
::fidl::WireUnownedResult<::fidl_test_anonymous::SomeProtocol::SomeMethod>
fidl::internal::WireClientImpl<::fidl_test_anonymous::SomeProtocol>::
    SomeMethod_Sync(::fidl::BufferSpan _request_buffer,
                    ::fidl_test_anonymous::wire::UnionMember union_member,
                    ::fidl_test_anonymous::wire::TableMember table_member,
                    ::fidl::BufferSpan _response_buffer) {
  return ::fidl::internal::ClientBase::MakeSyncCallWith(
      [&](std::shared_ptr<zx::channel> _channel) {
        return ::fidl::WireUnownedResult<
            ::fidl_test_anonymous::SomeProtocol::SomeMethod>(
            ::fidl::UnownedClientEnd<::fidl_test_anonymous::SomeProtocol>(
                _channel->get()),
            _request_buffer.data, _request_buffer.capacity, union_member,
            table_member, _response_buffer.data, _response_buffer.capacity);
      });
}

std::optional<::fidl::UnbindInfo> fidl::internal::
    WireClientImpl<::fidl_test_anonymous::SomeProtocol>::DispatchEvent(
        fidl::IncomingMessage& msg,
        ::fidl::internal::AsyncEventHandler* maybe_event_handler) {
  return ::fidl::UnbindInfo::UnknownOrdinal();
}
#endif  // __Fuchsia__

#ifdef __Fuchsia__

::fidl::DispatchResult fidl::internal::
    WireServerDispatcher<::fidl_test_anonymous::SomeProtocol>::TryDispatch(
        ::fidl::WireServer<::fidl_test_anonymous::SomeProtocol>* impl,
        ::fidl::IncomingMessage& msg, ::fidl::Transaction* txn) {
  static const ::fidl::internal::MethodEntry entries[] = {
      {
          ::fidl_test_anonymous::kSomeProtocol_SomeMethod_Ordinal,
          [](void* interface, ::fidl::IncomingMessage&& msg,
             ::fidl::Transaction* txn) {
            ::fidl::DecodedMessage<::fidl::WireRequest<
                ::fidl_test_anonymous::SomeProtocol::SomeMethod>>
                decoded{std::move(msg)};
            if (unlikely(!decoded.ok())) {
              return decoded.status();
            }
            auto* primary = decoded.PrimaryObject();
            ::fidl::internal::WireCompleter<
                ::fidl_test_anonymous::SomeProtocol::SomeMethod>::Sync
                completer(txn);
            reinterpret_cast<
                ::fidl::WireServer<::fidl_test_anonymous::SomeProtocol>*>(
                interface)
                ->SomeMethod(primary, completer);
            return ZX_OK;
          },
      },
  };
  return ::fidl::internal::TryDispatch(
      impl, msg, txn, entries,
      entries + sizeof(entries) / sizeof(::fidl::internal::MethodEntry));
}

::fidl::DispatchResult fidl::internal::
    WireServerDispatcher<::fidl_test_anonymous::SomeProtocol>::Dispatch(
        ::fidl::WireServer<::fidl_test_anonymous::SomeProtocol>* impl,
        ::fidl::IncomingMessage&& msg, ::fidl::Transaction* txn) {
  ::fidl::DispatchResult dispatch_result = TryDispatch(impl, msg, txn);
  if (unlikely(dispatch_result == ::fidl::DispatchResult::kNotFound)) {
    std::move(msg).CloseHandles();
    txn->InternalError(::fidl::UnbindInfo::UnknownOrdinal());
  }
  return dispatch_result;
}
::fidl::DispatchResult
fidl::WireServer<::fidl_test_anonymous::SomeProtocol>::dispatch_message(
    fidl::IncomingMessage&& msg, ::fidl::Transaction* txn) {
  return ::fidl::internal::WireServerDispatcher<
      ::fidl_test_anonymous::SomeProtocol>::Dispatch(this, std::move(msg), txn);
}
#endif  // __Fuchsia__

#ifdef __Fuchsia__
::fidl::Result fidl::internal::
    WireCompleterBase<::fidl_test_anonymous::SomeProtocol::SomeMethod>::Reply(
        ::fidl_test_anonymous::wire::SomeProtocolSomeMethodResult result) {
  FIDL_INTERNAL_DISABLE_AUTO_VAR_INIT
  ::fidl::OwnedEncodedMessage<
      ::fidl::WireResponse<::fidl_test_anonymous::SomeProtocol::SomeMethod>>
      _response{::fidl::internal::AllowUnownedInputRef{}, result};
  return ::fidl::internal::WireCompleterBase<
      ::fidl_test_anonymous::SomeProtocol::SomeMethod>::
      SendReply(&_response.GetOutgoingMessage());
}
::fidl::Result fidl::internal::WireCompleterBase<
    ::fidl_test_anonymous::SomeProtocol::SomeMethod>::
    ReplySuccess(::fidl_test_anonymous::wire::BitsMember bits_member) {
  ::fidl_test_anonymous::wire::SomeProtocolSomeMethodResponse _response;
  _response.bits_member = std::move(bits_member);

  return Reply(
      ::fidl_test_anonymous::wire::SomeProtocolSomeMethodResult::WithResponse(
          ::fidl::ObjectView<
              ::fidl_test_anonymous::wire::SomeProtocolSomeMethodResponse>::
              FromExternal(&_response)));
}

::fidl::Result fidl::internal::WireCompleterBase<
    ::fidl_test_anonymous::SomeProtocol::SomeMethod>::
    ReplyError(::fidl_test_anonymous::wire::SomeProtocolSomeMethodError error) {
  return Reply(
      ::fidl_test_anonymous::wire::SomeProtocolSomeMethodResult::WithErr(
          ::fidl::ObjectView<
              ::fidl_test_anonymous::wire::SomeProtocolSomeMethodError>::
              FromExternal(&error)));
}

::fidl::Result fidl::internal::
    WireCompleterBase<::fidl_test_anonymous::SomeProtocol::SomeMethod>::Reply(
        ::fidl::BufferSpan _buffer,
        ::fidl_test_anonymous::wire::SomeProtocolSomeMethodResult result) {
  ::fidl::WireResponse<::fidl_test_anonymous::SomeProtocol::SomeMethod>::
      UnownedEncodedMessage _response(_buffer.data, _buffer.capacity, result);
  return CompleterBase::SendReply(&_response.GetOutgoingMessage());
}
::fidl::Result fidl::internal::WireCompleterBase<
    ::fidl_test_anonymous::SomeProtocol::SomeMethod>::
    ReplySuccess(::fidl::BufferSpan _buffer,
                 ::fidl_test_anonymous::wire::BitsMember bits_member) {
  ::fidl_test_anonymous::wire::SomeProtocolSomeMethodResponse response;
  response.bits_member = std::move(bits_member);
  return Reply(
      std::move(_buffer),
      ::fidl_test_anonymous::wire::SomeProtocolSomeMethodResult::WithResponse(
          ::fidl::ObjectView<
              ::fidl_test_anonymous::wire::SomeProtocolSomeMethodResponse>::
              FromExternal(&response)));
}
#endif  // __Fuchsia__

void ::fidl::WireRequest<
    ::fidl_test_anonymous::SomeProtocol::SomeMethod>::_InitHeader() {
  fidl_init_txn_header(&_hdr, 0,
                       ::fidl_test_anonymous::kSomeProtocol_SomeMethod_Ordinal);
}

void ::fidl::WireResponse<
    ::fidl_test_anonymous::SomeProtocol::SomeMethod>::_InitHeader() {
  fidl_init_txn_header(&_hdr, 0,
                       ::fidl_test_anonymous::kSomeProtocol_SomeMethod_Ordinal);
}

#ifdef __Fuchsia__

#endif  // __Fuchsia__
