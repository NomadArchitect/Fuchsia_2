// WARNING: This file is machine generated by fidlgen.

#include <fidl/fidl.test.placementofattributes/cpp/wire_messaging.h>

#include <memory>

namespace fidl_test_placementofattributes {
[[maybe_unused]] constexpr uint64_t kExampleProtocol_Method_Ordinal =
    2341079615635566980lu;

extern "C" const fidl_type_t
    fidl_test_placementofattributes_ExampleProtocolMethodRequestTable;

extern "C" const fidl_type_t
    fidl_test_placementofattributes_ExampleProtocolMethodResponseTable;
#ifdef __Fuchsia__
}  // namespace fidl_test_placementofattributes
::fidl::WireResult<::fidl_test_placementofattributes::ExampleProtocol::Method>::
    WireResult(::fidl::UnownedClientEnd<
                   ::fidl_test_placementofattributes::ExampleProtocol>
                   client,
               ::fidl::WireRequest<
                   ::fidl_test_placementofattributes::ExampleProtocol::Method>*
                   request) {
  FIDL_INTERNAL_DISABLE_AUTO_VAR_INIT
  ::fidl::OwnedEncodedMessage<::fidl::WireRequest<
      ::fidl_test_placementofattributes::ExampleProtocol::Method>>
      request_message(::fidl::internal::AllowUnownedInputRef{}, request);
  auto& outgoing = request_message.GetOutgoingMessage();
  outgoing.Write(client.channel());
  SetResult(outgoing);
}
namespace fidl_test_placementofattributes {
#endif  // __Fuchsia__

#ifdef __Fuchsia__
}  // namespace fidl_test_placementofattributes
::fidl::WireUnownedResult<
    ::fidl_test_placementofattributes::ExampleProtocol::Method>::
    WireUnownedResult(
        ::fidl::UnownedClientEnd<
            ::fidl_test_placementofattributes::ExampleProtocol>
            client,
        uint8_t* request_bytes, uint32_t request_byte_capacity,
        ::fidl::WireRequest<
            ::fidl_test_placementofattributes::ExampleProtocol::Method>*
            request) {
  ::fidl::UnownedEncodedMessage<::fidl::WireRequest<
      ::fidl_test_placementofattributes::ExampleProtocol::Method>>
      request_message(request_bytes, request_byte_capacity, request);
  auto& outgoing = request_message.GetOutgoingMessage();
  outgoing.Write(client.channel());
  ::fidl::Result::operator=(outgoing);
}
namespace fidl_test_placementofattributes {
#endif  // __Fuchsia__

}  // namespace fidl_test_placementofattributes
#ifdef __Fuchsia__

::fidl::Result fidl::internal::
    WireClientImpl<::fidl_test_placementofattributes::ExampleProtocol>::Method(
        const ::exampleusing::wire::Empty& arg) {
  FIDL_INTERNAL_DISABLE_AUTO_VAR_INIT
  ::fidl::WireRequest<
      ::fidl_test_placementofattributes::ExampleProtocol::Method>
      _request_object{arg};
  ::fidl::OwnedEncodedMessage<::fidl::WireRequest<
      ::fidl_test_placementofattributes::ExampleProtocol::Method>>
      _request_message(::fidl::internal::AllowUnownedInputRef{},
                       &_request_object);
  return ::fidl::internal::ClientBase::SendOneWay(
      _request_message.GetOutgoingMessage());
}
::fidl::Result fidl::internal::
    WireClientImpl<::fidl_test_placementofattributes::ExampleProtocol>::Method(
        ::fidl::BufferSpan _request_buffer,
        const ::exampleusing::wire::Empty& arg) {
  ::fidl::WireRequest<
      ::fidl_test_placementofattributes::ExampleProtocol::Method>
      _request_object{arg};
  ::fidl::UnownedEncodedMessage<::fidl::WireRequest<
      ::fidl_test_placementofattributes::ExampleProtocol::Method>>
      _request_message(_request_buffer.data, _request_buffer.capacity,
                       &_request_object);
  return ::fidl::internal::ClientBase::SendOneWay(
      _request_message.GetOutgoingMessage());
}

std::optional<::fidl::UnbindInfo> fidl::internal::WireClientImpl<
    ::fidl_test_placementofattributes::ExampleProtocol>::
    DispatchEvent(fidl::IncomingMessage& msg,
                  ::fidl::internal::AsyncEventHandler* maybe_event_handler) {
  return ::fidl::UnbindInfo::UnknownOrdinal();
}
#endif  // __Fuchsia__

#ifdef __Fuchsia__

constexpr ::fidl::internal::MethodEntry fidl::internal::WireServerDispatcher<
    ::fidl_test_placementofattributes::ExampleProtocol>::entries_[] = {
    {
        ::fidl_test_placementofattributes::kExampleProtocol_Method_Ordinal,
        [](void* interface, ::fidl::IncomingMessage&& msg,
           ::fidl::Transaction* txn) {
          ::fidl::DecodedMessage<::fidl::WireRequest<
              ::fidl_test_placementofattributes::ExampleProtocol::Method>>
              decoded{std::move(msg)};
          if (unlikely(!decoded.ok())) {
            return decoded.status();
          }
          auto* primary = decoded.PrimaryObject();
          ::fidl::internal::WireCompleter<
              ::fidl_test_placementofattributes::ExampleProtocol::Method>::Sync
              completer(txn);
          reinterpret_cast<::fidl::WireServer<
              ::fidl_test_placementofattributes::ExampleProtocol>*>(interface)
              ->Method(primary, completer);
          return ZX_OK;
        },
    },
};

const ::fidl::internal::MethodEntry* fidl::internal::WireServerDispatcher<
    ::fidl_test_placementofattributes::ExampleProtocol>::entries_end_ =
    &entries_[1];

::fidl::DispatchResult fidl::internal::WireServerDispatcher<
    ::fidl_test_placementofattributes::ExampleProtocol>::
    TryDispatch(::fidl::WireServer<
                    ::fidl_test_placementofattributes::ExampleProtocol>* impl,
                ::fidl::IncomingMessage& msg, ::fidl::Transaction* txn) {
  return ::fidl::internal::TryDispatch(impl, msg, txn, entries_, entries_end_);
}

void fidl::internal::WireServerDispatcher<
    ::fidl_test_placementofattributes::ExampleProtocol>::
    Dispatch(::fidl::WireServer<
                 ::fidl_test_placementofattributes::ExampleProtocol>* impl,
             ::fidl::IncomingMessage&& msg, ::fidl::Transaction* txn) {
  ::fidl::internal::Dispatch(impl, msg, txn, entries_, entries_end_);
}
void fidl::WireServer<::fidl_test_placementofattributes::ExampleProtocol>::
    dispatch_message(fidl::IncomingMessage&& msg, ::fidl::Transaction* txn) {
  ::fidl::internal::WireServerDispatcher<
      ::fidl_test_placementofattributes::ExampleProtocol>::Dispatch(this,
                                                                    std::move(
                                                                        msg),
                                                                    txn);
}
#endif  // __Fuchsia__

void ::fidl::WireRequest<
    ::fidl_test_placementofattributes::ExampleProtocol::Method>::_InitHeader() {
  fidl_init_txn_header(
      &_hdr, 0,
      ::fidl_test_placementofattributes::kExampleProtocol_Method_Ordinal);
}

#ifdef __Fuchsia__

#endif  // __Fuchsia__
