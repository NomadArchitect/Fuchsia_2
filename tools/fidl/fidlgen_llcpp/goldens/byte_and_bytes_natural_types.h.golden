// WARNING: This file is machine generated by fidlgen.

#pragma once

#include <fidl/test.byteandbytes/cpp/common_types.h>
#include <fidl/test.byteandbytes/cpp/markers.h>
#include <lib/fidl/cpp/coding_traits.h>
#include <lib/fidl/cpp/internal/codable_base.h>
#include <lib/fidl/cpp/unified_messaging.h>

#include <cinttypes>
#include <string>

#ifdef __Fuchsia__

#endif  // __Fuchsia__

namespace test_byteandbytes {
class ByteAndBytes;

extern "C" const fidl_type_t test_byteandbytes_ByteAndBytesTable;

class ByteAndBytes final : public ::fidl::internal::CodableBase<ByteAndBytes> {
 private:
  struct Storage_;

 public:
  ByteAndBytes(Storage_ storage) noexcept : storage_(std::move(storage)) {}
  ByteAndBytes(
      uint8_t single_byte, ::std::vector<uint8_t> many_bytes,
      ::std::vector<uint8_t> only_one_k_bytes,
      ::cpp17::optional<::std::vector<uint8_t>> opt_only_one_k_bytes) noexcept
      : storage_({.single_byte = std::move(single_byte),
                  .many_bytes = std::move(many_bytes),
                  .only_one_k_bytes = std::move(only_one_k_bytes),
                  .opt_only_one_k_bytes = std::move(opt_only_one_k_bytes)}) {}
  ByteAndBytes() : ByteAndBytes(Storage_{}) {}

  ByteAndBytes(ByteAndBytes&&) noexcept = default;
  ByteAndBytes& operator=(ByteAndBytes&&) noexcept = default;
  ByteAndBytes(const ByteAndBytes& other) noexcept
      : ByteAndBytes(other.CloneStorage_()) {}
  ByteAndBytes& operator=(const ByteAndBytes& other) noexcept {
    storage_ = other.CloneStorage_();
    return *this;
  }

  uint8_t single_byte() const { return storage_.single_byte; }

  uint8_t& single_byte() { return storage_.single_byte; }

  const ::std::vector<uint8_t>& many_bytes() const {
    return storage_.many_bytes;
  }

  ::std::vector<uint8_t>& many_bytes() { return storage_.many_bytes; }

  const ::std::vector<uint8_t>& only_one_k_bytes() const {
    return storage_.only_one_k_bytes;
  }

  ::std::vector<uint8_t>& only_one_k_bytes() {
    return storage_.only_one_k_bytes;
  }

  const ::cpp17::optional<::std::vector<uint8_t>>& opt_only_one_k_bytes()
      const {
    return storage_.opt_only_one_k_bytes;
  }

  ::cpp17::optional<::std::vector<uint8_t>>& opt_only_one_k_bytes() {
    return storage_.opt_only_one_k_bytes;
  }

 private:
  friend ::fidl::internal::CodableBase<ByteAndBytes>;
  friend ::fidl::CodingTraits<ByteAndBytes>;
  ByteAndBytes(::fidl::Decoder& decoder);
  template <typename Payload>
  friend auto ::fidl::internal::EncodeTransactionalMessageWithoutValidating(
      ::fidl::Encoder& encoder, Payload&& payload)
      -> ::fidl::HLCPPOutgoingMessage;
  void EncodeWithoutValidating(::fidl::Encoder& encoder, size_t offset);

  struct Storage_ final {
    uint8_t single_byte{};
    ::std::vector<uint8_t> many_bytes{};
    ::std::vector<uint8_t> only_one_k_bytes{};
    ::cpp17::optional<::std::vector<uint8_t>> opt_only_one_k_bytes{};
  };

  Storage_ storage_;
  Storage_ CloneStorage_() const;
};

}  // namespace test_byteandbytes
namespace fidl {

#ifdef __Fuchsia__
extern "C" const fidl_type_t test_byteandbytes_ByteAndBytesTable;

template <>
struct IsFidlType<::test_byteandbytes::ByteAndBytes> : public std::true_type {};

template <>
struct ::fidl::internal::TypeTraits<::test_byteandbytes::ByteAndBytes> final {
 public:
  static constexpr const fidl_type_t* kCodingTable =
      &test_byteandbytes_ByteAndBytesTable;
};

template <>
struct CodingTraits<::test_byteandbytes::ByteAndBytes> {
  static constexpr size_t inline_size_v1_no_ee = 56;
  static constexpr size_t inline_size_v2 = 56;

  template <class EncoderImpl>
  static void Encode(
      EncoderImpl* encoder, ::test_byteandbytes::ByteAndBytes* value,
      size_t offset,
      cpp17::optional<HandleInformation> maybe_handle_info = cpp17::nullopt) {
    [[maybe_unused]] uint32_t field_offset;
    field_offset =
        encoder->wire_format() == ::fidl::internal::WireFormatVersion::kV1 ? 0
                                                                           : 0;
    ::fidl::Encode(encoder, &value->storage_.single_byte,
                   offset + field_offset);
    field_offset =
        encoder->wire_format() == ::fidl::internal::WireFormatVersion::kV1 ? 8
                                                                           : 8;
    ::fidl::Encode(encoder, &value->storage_.many_bytes, offset + field_offset);
    field_offset =
        encoder->wire_format() == ::fidl::internal::WireFormatVersion::kV1 ? 24
                                                                           : 24;
    ::fidl::Encode(encoder, &value->storage_.only_one_k_bytes,
                   offset + field_offset);
    field_offset =
        encoder->wire_format() == ::fidl::internal::WireFormatVersion::kV1 ? 40
                                                                           : 40;
    ::fidl::Encode(encoder, &value->storage_.opt_only_one_k_bytes,
                   offset + field_offset);
  }

  template <typename DecoderImpl>
  static void Decode(DecoderImpl* decoder,
                     ::test_byteandbytes::ByteAndBytes* value, size_t offset) {
    ::fidl::Decode(decoder, &value->storage_.single_byte, offset + 0);
    ::fidl::Decode(decoder, &value->storage_.many_bytes, offset + 8);
    ::fidl::Decode(decoder, &value->storage_.only_one_k_bytes, offset + 24);
    ::fidl::Decode(decoder, &value->storage_.opt_only_one_k_bytes, offset + 40);
  }
};
#endif  // __Fuchsia__

}  // namespace fidl
