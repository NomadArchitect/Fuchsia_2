// WARNING: This file is machine generated by fidlgen_llcpp.

#include <fidl/test.emptystruct/cpp/natural_messaging.h>

namespace test_emptystruct {
[[maybe_unused]] constexpr inline uint64_t kEmptyProtocol_Send_Ordinal =
    1378773277029173000lu;

[[maybe_unused]] constexpr inline ::fidl::MessageDynamicFlags
    kEmptyProtocol_Send_DynamicFlags =
        ::fidl::MessageDynamicFlags::kStrictMethod;

[[maybe_unused]] constexpr inline uint64_t kEmptyProtocol_Receive_Ordinal =
    2301564782476583487lu;

[[maybe_unused]] constexpr inline ::fidl::MessageDynamicFlags
    kEmptyProtocol_Receive_DynamicFlags =
        ::fidl::MessageDynamicFlags::kStrictMethod;

[[maybe_unused]] constexpr inline uint64_t
    kEmptyProtocol_SendAndReceive_Ordinal = 534401212734647530lu;

[[maybe_unused]] constexpr inline ::fidl::MessageDynamicFlags
    kEmptyProtocol_SendAndReceive_DynamicFlags =
        ::fidl::MessageDynamicFlags::kStrictMethod;

#ifdef __Fuchsia__
}  // namespace test_emptystruct
::fidl::internal::NaturalThenable<
    ::test_emptystruct::EmptyProtocol::SendAndReceive>
fidl::internal::NaturalClientImpl<::test_emptystruct::EmptyProtocol>::
    SendAndReceive(
        ::fidl::Request<::test_emptystruct::EmptyProtocol::SendAndReceive>
            request) const {
  ::fidl::internal::NaturalMessageEncoder _encoder{
      &::fidl::internal::ChannelTransport::VTable,
      ::test_emptystruct::kEmptyProtocol_SendAndReceive_Ordinal,
      ::test_emptystruct::kEmptyProtocol_SendAndReceive_DynamicFlags};
  _encoder.EncodeBody(
      ::fidl::internal::NaturalMessageConverter<
          ::fidl::Request<::test_emptystruct::EmptyProtocol::SendAndReceive>>::
          IntoDomainObject(std::move(request)));
  return ::fidl::internal::NaturalThenable<
      ::test_emptystruct::EmptyProtocol::SendAndReceive>(
      &client_base(), {}, std::move(_encoder),
      [](::fidl::internal::ThenableBase* base,
         ::fidl::internal::NaturalMessageEncoder& encoder,
         ::fidl::internal::ResponseContext* response_context) {
        ::fidl::OutgoingMessage msg = encoder.GetMessage();
        return base->SendTwoWay(msg, response_context);
      });
}

::fitx::result<::fidl::Error>
fidl::internal::NaturalClientImpl<::test_emptystruct::EmptyProtocol>::Send(
    ::fidl::Request<::test_emptystruct::EmptyProtocol::Send> request) const {
  ::fidl::internal::NaturalMessageEncoder _encoder{
      &::fidl::internal::ChannelTransport::VTable,
      ::test_emptystruct::kEmptyProtocol_Send_Ordinal,
      ::test_emptystruct::kEmptyProtocol_Send_DynamicFlags};
  _encoder.EncodeBody(
      ::fidl::internal::NaturalMessageConverter<
          ::fidl::Request<::test_emptystruct::EmptyProtocol::Send>>::
          IntoDomainObject(std::move(request)));

  ::fidl::OutgoingMessage _encoded_message = _encoder.GetMessage();
  ::fidl::Status status = client_base().SendOneWay(_encoded_message);
  return ::fidl::internal::ToFitxResult(status);
}
namespace test_emptystruct {
#endif  // __Fuchsia__

}  // namespace test_emptystruct
#ifdef __Fuchsia__

std::optional<::fidl::UnbindInfo> fidl::internal::
    NaturalEventDispatcher<::test_emptystruct::EmptyProtocol>::DispatchEvent(
        ::fidl::IncomingMessage& msg,
        ::fidl::internal::IncomingTransportContext transport_context) {
  switch (msg.header()->ordinal) {
    case ::test_emptystruct::kEmptyProtocol_Receive_Ordinal: {
      ::fitx::result decoded = ::fidl::internal::DecodeTransactionalMessage<
          ::test_emptystruct::EmptyProtocolReceiveRequest>(std::move(msg));
      if (decoded.is_error()) {
        return ::fidl::UnbindInfo(decoded.error_value());
      }
      if (event_handler()) {
        ::fidl::Event<::test_emptystruct::EmptyProtocol::Receive> event =
            ::fidl::internal::NaturalMessageConverter<
                ::fidl::Event<::test_emptystruct::EmptyProtocol::Receive>>::
                FromDomainObject(std::move(decoded.value()));
        event_handler()->Receive(event);
      }
      return std::nullopt;
    }
    default:
      break;
  }
  return ::fidl::UnbindInfo::UnknownOrdinal();
}
#endif  // __Fuchsia__

#ifdef __Fuchsia__

::fitx::result<::fidl::Error> fidl::internal::
    NaturalWeakEventSender<::test_emptystruct::EmptyProtocol>::Receive(
        ::test_emptystruct::EmptyProtocolReceiveRequest payload) {
  ::fidl::internal::NaturalMessageEncoder _encoder{
      &::fidl::internal::ChannelTransport::VTable,
      ::test_emptystruct::kEmptyProtocol_Receive_Ordinal,
      ::test_emptystruct::kEmptyProtocol_Receive_DynamicFlags};
  _encoder.EncodeBody(std::move(payload));
  ::fidl::OutgoingMessage _encoded_message = _encoder.GetMessage();
  ::fidl::Status result = _inner().SendEvent(_encoded_message);
  return ::fidl::internal::ToFitxResult(result);
}

::fitx::result<::fidl::Error>
fidl::internal::NaturalEventSender<::test_emptystruct::EmptyProtocol>::Receive(
    ::test_emptystruct::EmptyProtocolReceiveRequest payload) {
  ::fidl::internal::NaturalMessageEncoder _encoder{
      &::fidl::internal::ChannelTransport::VTable,
      ::test_emptystruct::kEmptyProtocol_Receive_Ordinal,
      ::test_emptystruct::kEmptyProtocol_Receive_DynamicFlags};
  _encoder.EncodeBody(std::move(payload));
  ::fidl::OutgoingMessage _encoded_message = _encoder.GetMessage();
  _encoded_message.Write(_transport());
  return ::fidl::internal::ToFitxResult(::fidl::Status{_encoded_message});
}

#endif  // __Fuchsia__

void fidl::internal::NaturalCompleterBase<
    ::test_emptystruct::EmptyProtocol::SendAndReceive>::
    Reply(::fidl::Response<::test_emptystruct::EmptyProtocol::SendAndReceive>&&
              response) {
  ::fidl::internal::NaturalMessageEncoder _encoder{
      &::fidl::internal::ChannelTransport::VTable,
      ::test_emptystruct::kEmptyProtocol_SendAndReceive_Ordinal,
      ::test_emptystruct::kEmptyProtocol_SendAndReceive_DynamicFlags};
  _encoder.EncodeBody(
      ::fidl::internal::NaturalMessageConverter<
          ::fidl::Response<::test_emptystruct::EmptyProtocol::SendAndReceive>>::
          IntoDomainObject(std::move(response)));
  ::fidl::OutgoingMessage _encoded_message = _encoder.GetMessage();
  SendReply(&_encoded_message, ::fidl::internal::OutgoingTransportContext{});
}

#ifdef __Fuchsia__

constexpr ::fidl::internal::MethodEntry fidl::internal::NaturalServerDispatcher<
    ::test_emptystruct::EmptyProtocol>::entries_[] = {
    {
        ::test_emptystruct::kEmptyProtocol_Send_Ordinal,
        [](void* interface, ::fidl::IncomingMessage&& msg,
           internal::IncomingTransportContext transport_context,
           ::fidl::Transaction* txn) {
          ::fitx::result decoded = ::fidl::internal::DecodeTransactionalMessage<
              ::test_emptystruct::EmptyProtocolSendRequest>(std::move(msg));
          if (decoded.is_error()) {
            return decoded.error_value();
          }
          ::fidl::Request<::test_emptystruct::EmptyProtocol::Send> request =
              ::fidl::internal::NaturalMessageConverter<
                  ::fidl::Request<::test_emptystruct::EmptyProtocol::Send>>::
                  FromDomainObject(std::move(decoded.value()));
          ::fidl::internal::NaturalCompleter<
              ::test_emptystruct::EmptyProtocol::Send>::Sync completer(txn);
          static_cast<::fidl::Server<::test_emptystruct::EmptyProtocol>*>(
              interface)
              ->Send(request, completer);
          return ::fidl::Status::Ok();
        },
    },
    {
        ::test_emptystruct::kEmptyProtocol_SendAndReceive_Ordinal,
        [](void* interface, ::fidl::IncomingMessage&& msg,
           internal::IncomingTransportContext transport_context,
           ::fidl::Transaction* txn) {
          ::fitx::result decoded = ::fidl::internal::DecodeTransactionalMessage<
              ::test_emptystruct::EmptyProtocolSendAndReceiveRequest>(
              std::move(msg));
          if (decoded.is_error()) {
            return decoded.error_value();
          }
          ::fidl::Request<::test_emptystruct::EmptyProtocol::SendAndReceive>
              request =
                  ::fidl::internal::NaturalMessageConverter<::fidl::Request<
                      ::test_emptystruct::EmptyProtocol::SendAndReceive>>::
                      FromDomainObject(std::move(decoded.value()));
          ::fidl::internal::NaturalCompleter<
              ::test_emptystruct::EmptyProtocol::SendAndReceive>::Sync
              completer(txn);
          static_cast<::fidl::Server<::test_emptystruct::EmptyProtocol>*>(
              interface)
              ->SendAndReceive(request, completer);
          return ::fidl::Status::Ok();
        },
    },
};

const ::fidl::internal::MethodEntry* fidl::internal::NaturalServerDispatcher<
    ::test_emptystruct::EmptyProtocol>::entries_end_ = &entries_[2];

void fidl::internal::
    NaturalServerDispatcher<::test_emptystruct::EmptyProtocol>::Dispatch(
        ::fidl::Server<::test_emptystruct::EmptyProtocol>* impl,
        ::fidl::IncomingMessage&& msg,
        internal::IncomingTransportContext transport_context,
        ::fidl::Transaction* txn) {
  ::fidl::internal::Dispatch(impl, msg, std::move(transport_context), txn,
                             entries_, entries_end_);
}
void fidl::Server<::test_emptystruct::EmptyProtocol>::dispatch_message(
    ::fidl::IncomingMessage&& msg, ::fidl::Transaction* txn,
    ::fidl::internal::IncomingTransportContext transport_context) {
  ::fidl::internal::NaturalServerDispatcher<
      ::test_emptystruct::EmptyProtocol>::Dispatch(this, std::move(msg),
                                                   std::move(transport_context),
                                                   txn);
}
#endif  // __Fuchsia__
