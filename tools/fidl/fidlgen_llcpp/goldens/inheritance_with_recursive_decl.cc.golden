// WARNING: This file is machine generated by fidlgen.

#include <fidl/test/inheritancewithrecursivedecl/llcpp/fidl.h>

#include <memory>

namespace fidl_test_inheritancewithrecursivedecl {
namespace {

[[maybe_unused]] constexpr uint64_t kParent_First_Ordinal =
    3051519745671742363lu;

extern "C" const fidl_type_t
    fidl_test_inheritancewithrecursivedecl_ParentFirstRequestTable;

extern "C" const fidl_type_t
    fidl_test_inheritancewithrecursivedecl_ParentFirstResponseTable;

}  // namespace
#ifdef __Fuchsia__
::fidl_test_inheritancewithrecursivedecl::Parent::ResultOf::First::First(
    ::fidl::UnownedClientEnd<::fidl_test_inheritancewithrecursivedecl::Parent>
        _client,
    ::fidl::ServerEnd<::fidl_test_inheritancewithrecursivedecl::Parent>&
        request) {
  ::fidl::OwnedEncodedMessage<FirstRequest> _request(zx_txid_t(0), request);
  _request.GetOutgoingMessage().Write(_client);
  status_ = _request.status();
  error_ = _request.error();
}
#endif

#ifdef __Fuchsia__
::fidl_test_inheritancewithrecursivedecl::Parent::UnownedResultOf::First::First(
    ::fidl::UnownedClientEnd<::fidl_test_inheritancewithrecursivedecl::Parent>
        _client,
    uint8_t* _request_bytes, uint32_t _request_byte_capacity,
    ::fidl::ServerEnd<::fidl_test_inheritancewithrecursivedecl::Parent>&
        request) {
  ::fidl::UnownedEncodedMessage<FirstRequest> _request(
      _request_bytes, _request_byte_capacity, 0, request);
  _request.GetOutgoingMessage().Write(_client);
  status_ = _request.status();
  error_ = _request.error();
}
#endif

#ifdef __Fuchsia__
::fidl::Result Parent::ClientImpl::First(
    ::fidl::ServerEnd<::fidl_test_inheritancewithrecursivedecl::Parent>
        request) {
  if (auto _channel = ::fidl::internal::ClientBase::GetChannel()) {
    auto _res =
        ResultOf::First(::fidl::UnownedClientEnd<
                            ::fidl_test_inheritancewithrecursivedecl::Parent>(
                            _channel->handle()),
                        request);
    return ::fidl::Result(_res.status(), _res.error());
  }
  return ::fidl::Result(ZX_ERR_CANCELED, ::fidl::kErrorChannelUnbound);
}
#endif

#ifdef __Fuchsia__
::fidl::Result Parent::ClientImpl::First(
    ::fidl::BufferSpan _request_buffer,
    ::fidl::ServerEnd<::fidl_test_inheritancewithrecursivedecl::Parent>
        request) {
  if (auto _channel = ::fidl::internal::ClientBase::GetChannel()) {
    auto _res = UnownedResultOf::First(
        ::fidl::UnownedClientEnd<
            ::fidl_test_inheritancewithrecursivedecl::Parent>(
            _channel->handle()),
        _request_buffer.data, _request_buffer.capacity, request);
    return ::fidl::Result(_res.status(), _res.error());
  }
  return ::fidl::Result(ZX_ERR_CANCELED, ::fidl::kErrorChannelUnbound);
}
#endif

#ifdef __Fuchsia__
std::optional<::fidl::UnbindInfo> Parent::ClientImpl::DispatchEvent(
    fidl_incoming_msg_t* msg) {
  FidlHandleInfoCloseMany(msg->handles, msg->num_handles);
  return ::fidl::UnbindInfo{::fidl::UnbindInfo::kUnexpectedMessage,
                            ZX_ERR_NOT_SUPPORTED};
}
#endif

#ifdef __Fuchsia__
namespace methods {

void ParentDispatchFirst(void* interface, void* bytes,
                         ::fidl::Transaction* txn) {
  auto message = reinterpret_cast<
      ::fidl_test_inheritancewithrecursivedecl::Parent::FirstRequest*>(bytes);
  ::fidl_test_inheritancewithrecursivedecl::Parent::Interface::FirstCompleter::
      Sync completer(txn);
  reinterpret_cast<
      ::fidl_test_inheritancewithrecursivedecl::Parent::Interface*>(interface)
      ->First(std::move(message->request), completer);
}

}  // namespace methods

namespace entries {

::fidl::internal::MethodEntry Parent[] = {
    {kParent_First_Ordinal,
     ::fidl_test_inheritancewithrecursivedecl::Parent::FirstRequest::Type,
     methods::ParentDispatchFirst},
};

}  // namespace entries

::fidl::DispatchResult Parent::TryDispatch(Interface* impl,
                                           fidl_incoming_msg_t* msg,
                                           ::fidl::Transaction* txn) {
  return ::fidl::internal::TryDispatch(
      impl, msg, txn, entries::Parent,
      entries::Parent +
          sizeof(entries::Parent) / sizeof(::fidl::internal::MethodEntry));
}
#endif

#ifdef __Fuchsia__
::fidl::DispatchResult Parent::Dispatch(Interface* impl,
                                        fidl_incoming_msg_t* msg,
                                        ::fidl::Transaction* txn) {
  ::fidl::DispatchResult dispatch_result = TryDispatch(impl, msg, txn);
  if (dispatch_result == ::fidl::DispatchResult::kNotFound) {
    FidlHandleInfoCloseMany(msg->handles, msg->num_handles);
    txn->InternalError(
        {::fidl::UnbindInfo::kUnexpectedMessage, ZX_ERR_NOT_SUPPORTED});
  }
  return dispatch_result;
}

::fidl::DispatchResult Parent::Interface::dispatch_message(
    fidl_incoming_msg_t* msg, ::fidl::Transaction* txn) {
  return Parent::Dispatch(this, msg, txn);
}
#endif

void ::fidl_test_inheritancewithrecursivedecl::Parent::FirstRequest::
    _InitHeader(zx_txid_t _txid) {
  fidl_init_txn_header(&_hdr, _txid, kParent_First_Ordinal);
}

void ::fidl_test_inheritancewithrecursivedecl::Parent::FirstRequest::
    _CloseHandles() {
  request.reset();
}

#ifdef __Fuchsia__
#endif

namespace {

[[maybe_unused]] constexpr uint64_t kChild_First_Ordinal =
    3051519745671742363lu;

extern "C" const fidl_type_t
    fidl_test_inheritancewithrecursivedecl_ChildFirstRequestTable;

extern "C" const fidl_type_t
    fidl_test_inheritancewithrecursivedecl_ChildFirstResponseTable;
[[maybe_unused]] constexpr uint64_t kChild_Second_Ordinal =
    489667253787160198lu;

extern "C" const fidl_type_t
    fidl_test_inheritancewithrecursivedecl_ChildSecondRequestTable;

extern "C" const fidl_type_t
    fidl_test_inheritancewithrecursivedecl_ChildSecondResponseTable;

}  // namespace
#ifdef __Fuchsia__
::fidl_test_inheritancewithrecursivedecl::Child::ResultOf::First::First(
    ::fidl::UnownedClientEnd<::fidl_test_inheritancewithrecursivedecl::Child>
        _client,
    ::fidl::ServerEnd<::fidl_test_inheritancewithrecursivedecl::Parent>&
        request) {
  ::fidl::OwnedEncodedMessage<FirstRequest> _request(zx_txid_t(0), request);
  _request.GetOutgoingMessage().Write(_client);
  status_ = _request.status();
  error_ = _request.error();
}
#endif

#ifdef __Fuchsia__
::fidl_test_inheritancewithrecursivedecl::Child::UnownedResultOf::First::First(
    ::fidl::UnownedClientEnd<::fidl_test_inheritancewithrecursivedecl::Child>
        _client,
    uint8_t* _request_bytes, uint32_t _request_byte_capacity,
    ::fidl::ServerEnd<::fidl_test_inheritancewithrecursivedecl::Parent>&
        request) {
  ::fidl::UnownedEncodedMessage<FirstRequest> _request(
      _request_bytes, _request_byte_capacity, 0, request);
  _request.GetOutgoingMessage().Write(_client);
  status_ = _request.status();
  error_ = _request.error();
}
#endif

#ifdef __Fuchsia__
::fidl_test_inheritancewithrecursivedecl::Child::ResultOf::Second::Second(
    ::fidl::UnownedClientEnd<::fidl_test_inheritancewithrecursivedecl::Child>
        _client,
    ::fidl::ServerEnd<::fidl_test_inheritancewithrecursivedecl::Parent>&
        request) {
  ::fidl::OwnedEncodedMessage<SecondRequest> _request(zx_txid_t(0), request);
  _request.GetOutgoingMessage().Write(_client);
  status_ = _request.status();
  error_ = _request.error();
}
#endif

#ifdef __Fuchsia__
::fidl_test_inheritancewithrecursivedecl::Child::UnownedResultOf::Second::
    Second(::fidl::UnownedClientEnd<
               ::fidl_test_inheritancewithrecursivedecl::Child>
               _client,
           uint8_t* _request_bytes, uint32_t _request_byte_capacity,
           ::fidl::ServerEnd<::fidl_test_inheritancewithrecursivedecl::Parent>&
               request) {
  ::fidl::UnownedEncodedMessage<SecondRequest> _request(
      _request_bytes, _request_byte_capacity, 0, request);
  _request.GetOutgoingMessage().Write(_client);
  status_ = _request.status();
  error_ = _request.error();
}
#endif

#ifdef __Fuchsia__
::fidl::Result Child::ClientImpl::First(
    ::fidl::ServerEnd<::fidl_test_inheritancewithrecursivedecl::Parent>
        request) {
  if (auto _channel = ::fidl::internal::ClientBase::GetChannel()) {
    auto _res =
        ResultOf::First(::fidl::UnownedClientEnd<
                            ::fidl_test_inheritancewithrecursivedecl::Child>(
                            _channel->handle()),
                        request);
    return ::fidl::Result(_res.status(), _res.error());
  }
  return ::fidl::Result(ZX_ERR_CANCELED, ::fidl::kErrorChannelUnbound);
}
#endif

#ifdef __Fuchsia__
::fidl::Result Child::ClientImpl::First(
    ::fidl::BufferSpan _request_buffer,
    ::fidl::ServerEnd<::fidl_test_inheritancewithrecursivedecl::Parent>
        request) {
  if (auto _channel = ::fidl::internal::ClientBase::GetChannel()) {
    auto _res = UnownedResultOf::First(
        ::fidl::UnownedClientEnd<
            ::fidl_test_inheritancewithrecursivedecl::Child>(
            _channel->handle()),
        _request_buffer.data, _request_buffer.capacity, request);
    return ::fidl::Result(_res.status(), _res.error());
  }
  return ::fidl::Result(ZX_ERR_CANCELED, ::fidl::kErrorChannelUnbound);
}
#endif

#ifdef __Fuchsia__
::fidl::Result Child::ClientImpl::Second(
    ::fidl::ServerEnd<::fidl_test_inheritancewithrecursivedecl::Parent>
        request) {
  if (auto _channel = ::fidl::internal::ClientBase::GetChannel()) {
    auto _res =
        ResultOf::Second(::fidl::UnownedClientEnd<
                             ::fidl_test_inheritancewithrecursivedecl::Child>(
                             _channel->handle()),
                         request);
    return ::fidl::Result(_res.status(), _res.error());
  }
  return ::fidl::Result(ZX_ERR_CANCELED, ::fidl::kErrorChannelUnbound);
}
#endif

#ifdef __Fuchsia__
::fidl::Result Child::ClientImpl::Second(
    ::fidl::BufferSpan _request_buffer,
    ::fidl::ServerEnd<::fidl_test_inheritancewithrecursivedecl::Parent>
        request) {
  if (auto _channel = ::fidl::internal::ClientBase::GetChannel()) {
    auto _res = UnownedResultOf::Second(
        ::fidl::UnownedClientEnd<
            ::fidl_test_inheritancewithrecursivedecl::Child>(
            _channel->handle()),
        _request_buffer.data, _request_buffer.capacity, request);
    return ::fidl::Result(_res.status(), _res.error());
  }
  return ::fidl::Result(ZX_ERR_CANCELED, ::fidl::kErrorChannelUnbound);
}
#endif

#ifdef __Fuchsia__
std::optional<::fidl::UnbindInfo> Child::ClientImpl::DispatchEvent(
    fidl_incoming_msg_t* msg) {
  FidlHandleInfoCloseMany(msg->handles, msg->num_handles);
  return ::fidl::UnbindInfo{::fidl::UnbindInfo::kUnexpectedMessage,
                            ZX_ERR_NOT_SUPPORTED};
}
#endif

#ifdef __Fuchsia__
namespace methods {

void ChildDispatchFirst(void* interface, void* bytes,
                        ::fidl::Transaction* txn) {
  auto message = reinterpret_cast<
      ::fidl_test_inheritancewithrecursivedecl::Child::FirstRequest*>(bytes);
  ::fidl_test_inheritancewithrecursivedecl::Child::Interface::FirstCompleter::
      Sync completer(txn);
  reinterpret_cast<::fidl_test_inheritancewithrecursivedecl::Child::Interface*>(
      interface)
      ->First(std::move(message->request), completer);
}

void ChildDispatchSecond(void* interface, void* bytes,
                         ::fidl::Transaction* txn) {
  auto message = reinterpret_cast<
      ::fidl_test_inheritancewithrecursivedecl::Child::SecondRequest*>(bytes);
  ::fidl_test_inheritancewithrecursivedecl::Child::Interface::SecondCompleter::
      Sync completer(txn);
  reinterpret_cast<::fidl_test_inheritancewithrecursivedecl::Child::Interface*>(
      interface)
      ->Second(std::move(message->request), completer);
}

}  // namespace methods

namespace entries {

::fidl::internal::MethodEntry Child[] = {
    {kChild_First_Ordinal,
     ::fidl_test_inheritancewithrecursivedecl::Child::FirstRequest::Type,
     methods::ChildDispatchFirst},
    {kChild_Second_Ordinal,
     ::fidl_test_inheritancewithrecursivedecl::Child::SecondRequest::Type,
     methods::ChildDispatchSecond},
};

}  // namespace entries

::fidl::DispatchResult Child::TryDispatch(Interface* impl,
                                          fidl_incoming_msg_t* msg,
                                          ::fidl::Transaction* txn) {
  return ::fidl::internal::TryDispatch(
      impl, msg, txn, entries::Child,
      entries::Child +
          sizeof(entries::Child) / sizeof(::fidl::internal::MethodEntry));
}
#endif

#ifdef __Fuchsia__
::fidl::DispatchResult Child::Dispatch(Interface* impl,
                                       fidl_incoming_msg_t* msg,
                                       ::fidl::Transaction* txn) {
  ::fidl::DispatchResult dispatch_result = TryDispatch(impl, msg, txn);
  if (dispatch_result == ::fidl::DispatchResult::kNotFound) {
    FidlHandleInfoCloseMany(msg->handles, msg->num_handles);
    txn->InternalError(
        {::fidl::UnbindInfo::kUnexpectedMessage, ZX_ERR_NOT_SUPPORTED});
  }
  return dispatch_result;
}

::fidl::DispatchResult Child::Interface::dispatch_message(
    fidl_incoming_msg_t* msg, ::fidl::Transaction* txn) {
  return Child::Dispatch(this, msg, txn);
}
#endif

void ::fidl_test_inheritancewithrecursivedecl::Child::FirstRequest::_InitHeader(
    zx_txid_t _txid) {
  fidl_init_txn_header(&_hdr, _txid, kChild_First_Ordinal);
}

void ::fidl_test_inheritancewithrecursivedecl::Child::FirstRequest::
    _CloseHandles() {
  request.reset();
}

void ::fidl_test_inheritancewithrecursivedecl::Child::SecondRequest::
    _InitHeader(zx_txid_t _txid) {
  fidl_init_txn_header(&_hdr, _txid, kChild_Second_Ordinal);
}

void ::fidl_test_inheritancewithrecursivedecl::Child::SecondRequest::
    _CloseHandles() {
  request.reset();
}

#ifdef __Fuchsia__
#endif

}  // namespace fidl_test_inheritancewithrecursivedecl
