// WARNING: This file is machine generated by fidlgen.

#pragma once

#include <lib/fidl/internal.h>
#include <lib/fidl/llcpp/array.h>
#include <lib/fidl/llcpp/coding.h>
#include <lib/fidl/llcpp/envelope.h>
#include <lib/fidl/llcpp/message.h>
#include <lib/fidl/llcpp/message_storage.h>
#include <lib/fidl/llcpp/object_view.h>
#include <lib/fidl/llcpp/result.h>
#include <lib/fidl/llcpp/string_view.h>
#include <lib/fidl/llcpp/traits.h>
#include <lib/fidl/llcpp/vector_view.h>
#include <lib/fidl/llcpp/wire_messaging.h>
#include <lib/fit/function.h>
#include <lib/stdcompat/optional.h>

#include <algorithm>
#include <cstddef>
#include <variant>
#ifdef __Fuchsia__
#include <lib/fidl/llcpp/client.h>
#include <lib/fidl/llcpp/client_end.h>
#include <lib/fidl/llcpp/connect_service.h>
#include <lib/fidl/llcpp/server.h>
#include <lib/fidl/llcpp/server_end.h>
#include <lib/fidl/llcpp/service_handler_interface.h>
#include <lib/fidl/llcpp/sync_call.h>
#include <lib/fidl/llcpp/transaction.h>
#include <lib/fidl/txn_header.h>
#include <lib/zx/channel.h>

#endif  // __Fuchsia__
#include <zircon/fidl.h>

namespace fidl_test_anonymous {
namespace wire {
class UnionMember;

struct TableData;

class TableMember;

class SomeProtocolSomeMethodError final {
 public:
  constexpr SomeProtocolSomeMethodError() : value_(0) {}
  constexpr explicit SomeProtocolSomeMethodError(uint32_t value)
      : value_(value) {}
  constexpr SomeProtocolSomeMethodError(
      const SomeProtocolSomeMethodError& other) = default;
  constexpr operator uint32_t() const { return value_; }

  constexpr bool IsUnknown() const {
    switch (value_) {
      case 1u:

      case 2u:

        return false;
      default:
        return true;
    }
  }

  constexpr static SomeProtocolSomeMethodError Unknown() {
    return SomeProtocolSomeMethodError(0xffffffff);
  }

  static const SomeProtocolSomeMethodError kErrorOne;

  static const SomeProtocolSomeMethodError kErrorTwo;

 private:
  uint32_t value_;
};
constexpr const ::fidl_test_anonymous::wire::SomeProtocolSomeMethodError
    SomeProtocolSomeMethodError::kErrorOne =
        ::fidl_test_anonymous::wire::SomeProtocolSomeMethodError(1u);
constexpr const ::fidl_test_anonymous::wire::SomeProtocolSomeMethodError
    SomeProtocolSomeMethodError::kErrorTwo =
        ::fidl_test_anonymous::wire::SomeProtocolSomeMethodError(2u);

class Op final {
 public:
  constexpr Op() : value_(0) {}
  constexpr explicit Op(uint32_t value) : value_(value) {}
  constexpr Op(const Op& other) = default;
  constexpr operator uint32_t() const { return value_; }

  constexpr bool IsUnknown() const {
    switch (value_) {
      case 1u:

      case 2u:

      case 3u:

        return false;
      default:
        return true;
    }
  }

  constexpr static Op Unknown() { return Op(0xffffffff); }

  static const Op kAdd;

  static const Op kMul;

  static const Op kDiv;

 private:
  uint32_t value_;
};
constexpr const ::fidl_test_anonymous::wire::Op Op::kAdd =
    ::fidl_test_anonymous::wire::Op(1u);
constexpr const ::fidl_test_anonymous::wire::Op Op::kMul =
    ::fidl_test_anonymous::wire::Op(2u);
constexpr const ::fidl_test_anonymous::wire::Op Op::kDiv =
    ::fidl_test_anonymous::wire::Op(3u);

struct BinOp;

// |Flags| is flexible, hence may contain unknown members not
// defined in the FIDL schema.
class Flags final {
 public:
  constexpr Flags() = default;
  constexpr Flags(const Flags& other) = default;

  // Constructs an instance of |Flags| from an underlying primitive value,
  // preserving any bit member not defined in the FIDL schema.
  explicit constexpr Flags(uint16_t value) : value_(value) {}
  const static Flags kInline;
  const static Flags kMask;

  explicit constexpr inline operator uint16_t() const { return value_; }
  explicit constexpr inline operator bool() const {
    return static_cast<bool>(value_);
  }
  constexpr inline bool operator==(const Flags& other) const {
    return value_ == other.value_;
  }
  constexpr inline bool operator!=(const Flags& other) const {
    return value_ != other.value_;
  }
  constexpr inline Flags operator~() const;
  constexpr inline Flags operator|(const Flags& other) const;
  constexpr inline Flags operator&(const Flags& other) const;
  constexpr inline Flags operator^(const Flags& other) const;
  constexpr inline void operator|=(const Flags& other);
  constexpr inline void operator&=(const Flags& other);
  constexpr inline void operator^=(const Flags& other);

  // Constructs an instance of |Flags| from an underlying primitive value
  // if the primitive does not contain any unknown members not defined in the
  // FIDL schema. Otherwise, returns |cpp17::nullopt|.
  constexpr inline static cpp17::optional<Flags> TryFrom(uint16_t value) {
    if (value & ~kMask.value_) {
      return cpp17::nullopt;
    }
    return Flags(value & Flags::kMask.value_);
  }

  // Constructs an instance of |Flags| from an underlying primitive value,
  // clearing any bit member not defined in the FIDL schema.
  constexpr inline static Flags TruncatingUnknown(uint16_t value) {
    return Flags(value & Flags::kMask.value_);
  }
  constexpr inline Flags unknown_bits() const {
    return *this & Flags(~kMask.value_);
  }
  constexpr inline bool has_unknown_bits() const {
    return static_cast<bool>(unknown_bits());
  }

 private:
  uint16_t value_ = 0;
};
constexpr const ::fidl_test_anonymous::wire::Flags Flags::kInline =
    ::fidl_test_anonymous::wire::Flags(1u);
constexpr const ::fidl_test_anonymous::wire::Flags Flags::kMask =
    ::fidl_test_anonymous::wire::Flags(1u);

constexpr inline ::fidl_test_anonymous::wire::Flags Flags::operator~() const {
  return ::fidl_test_anonymous::wire::Flags(
      static_cast<uint16_t>(~this->value_ & kMask.value_));
}

constexpr inline ::fidl_test_anonymous::wire::Flags Flags::operator|(
    const ::fidl_test_anonymous::wire::Flags& other) const {
  return ::fidl_test_anonymous::wire::Flags(
      static_cast<uint16_t>(this->value_ | other.value_));
}

constexpr inline ::fidl_test_anonymous::wire::Flags Flags::operator&(
    const ::fidl_test_anonymous::wire::Flags& other) const {
  return ::fidl_test_anonymous::wire::Flags(
      static_cast<uint16_t>(this->value_ & other.value_));
}

constexpr inline ::fidl_test_anonymous::wire::Flags Flags::operator^(
    const ::fidl_test_anonymous::wire::Flags& other) const {
  return ::fidl_test_anonymous::wire::Flags(
      static_cast<uint16_t>(this->value_ ^ other.value_));
}

constexpr inline void Flags::operator|=(
    const ::fidl_test_anonymous::wire::Flags& other) {
  this->value_ |= other.value_;
}

constexpr inline void Flags::operator&=(
    const ::fidl_test_anonymous::wire::Flags& other) {
  this->value_ &= other.value_;
}

constexpr inline void Flags::operator^=(
    const ::fidl_test_anonymous::wire::Flags& other) {
  this->value_ ^= other.value_;
}

class FunctionApplication;

class Expression;

// |BitsMember| is flexible, hence may contain unknown members not
// defined in the FIDL schema.
class BitsMember final {
 public:
  constexpr BitsMember() = default;
  constexpr BitsMember(const BitsMember& other) = default;

  // Constructs an instance of |BitsMember| from an underlying primitive value,
  // preserving any bit member not defined in the FIDL schema.
  explicit constexpr BitsMember(uint32_t value) : value_(value) {}
  const static BitsMember kBitOne;
  const static BitsMember kBitTwo;
  const static BitsMember kMask;

  explicit constexpr inline operator uint32_t() const { return value_; }
  explicit constexpr inline operator bool() const {
    return static_cast<bool>(value_);
  }
  constexpr inline bool operator==(const BitsMember& other) const {
    return value_ == other.value_;
  }
  constexpr inline bool operator!=(const BitsMember& other) const {
    return value_ != other.value_;
  }
  constexpr inline BitsMember operator~() const;
  constexpr inline BitsMember operator|(const BitsMember& other) const;
  constexpr inline BitsMember operator&(const BitsMember& other) const;
  constexpr inline BitsMember operator^(const BitsMember& other) const;
  constexpr inline void operator|=(const BitsMember& other);
  constexpr inline void operator&=(const BitsMember& other);
  constexpr inline void operator^=(const BitsMember& other);

  // Constructs an instance of |BitsMember| from an underlying primitive value
  // if the primitive does not contain any unknown members not defined in the
  // FIDL schema. Otherwise, returns |cpp17::nullopt|.
  constexpr inline static cpp17::optional<BitsMember> TryFrom(uint32_t value) {
    if (value & ~kMask.value_) {
      return cpp17::nullopt;
    }
    return BitsMember(value & BitsMember::kMask.value_);
  }

  // Constructs an instance of |BitsMember| from an underlying primitive value,
  // clearing any bit member not defined in the FIDL schema.
  constexpr inline static BitsMember TruncatingUnknown(uint32_t value) {
    return BitsMember(value & BitsMember::kMask.value_);
  }
  constexpr inline BitsMember unknown_bits() const {
    return *this & BitsMember(~kMask.value_);
  }
  constexpr inline bool has_unknown_bits() const {
    return static_cast<bool>(unknown_bits());
  }

 private:
  uint32_t value_ = 0;
};
constexpr const ::fidl_test_anonymous::wire::BitsMember BitsMember::kBitOne =
    ::fidl_test_anonymous::wire::BitsMember(1u);
constexpr const ::fidl_test_anonymous::wire::BitsMember BitsMember::kBitTwo =
    ::fidl_test_anonymous::wire::BitsMember(2u);
constexpr const ::fidl_test_anonymous::wire::BitsMember BitsMember::kMask =
    ::fidl_test_anonymous::wire::BitsMember(3u);

constexpr inline ::fidl_test_anonymous::wire::BitsMember BitsMember::operator~()
    const {
  return ::fidl_test_anonymous::wire::BitsMember(
      static_cast<uint32_t>(~this->value_ & kMask.value_));
}

constexpr inline ::fidl_test_anonymous::wire::BitsMember BitsMember::operator|(
    const ::fidl_test_anonymous::wire::BitsMember& other) const {
  return ::fidl_test_anonymous::wire::BitsMember(
      static_cast<uint32_t>(this->value_ | other.value_));
}

constexpr inline ::fidl_test_anonymous::wire::BitsMember BitsMember::operator&(
    const ::fidl_test_anonymous::wire::BitsMember& other) const {
  return ::fidl_test_anonymous::wire::BitsMember(
      static_cast<uint32_t>(this->value_ & other.value_));
}

constexpr inline ::fidl_test_anonymous::wire::BitsMember BitsMember::operator^(
    const ::fidl_test_anonymous::wire::BitsMember& other) const {
  return ::fidl_test_anonymous::wire::BitsMember(
      static_cast<uint32_t>(this->value_ ^ other.value_));
}

constexpr inline void BitsMember::operator|=(
    const ::fidl_test_anonymous::wire::BitsMember& other) {
  this->value_ |= other.value_;
}

constexpr inline void BitsMember::operator&=(
    const ::fidl_test_anonymous::wire::BitsMember& other) {
  this->value_ &= other.value_;
}

constexpr inline void BitsMember::operator^=(
    const ::fidl_test_anonymous::wire::BitsMember& other) {
  this->value_ ^= other.value_;
}

struct SomeProtocolSomeMethodResponse;

class SomeProtocolSomeMethodResult;
}  // namespace wire
class SomeProtocol;
namespace wire {

extern "C" const fidl_type_t fidl_test_anonymous_UnionMemberTable;

class UnionMember {
 public:
  UnionMember()
      : ordinal_(::fidl_test_anonymous::wire::UnionMember::Ordinal::Invalid),
        envelope_{} {}

  UnionMember(const UnionMember&) = default;
  UnionMember& operator=(const UnionMember&) = default;
  UnionMember(UnionMember&&) = default;
  UnionMember& operator=(UnionMember&&) = default;

  enum class Tag : fidl_xunion_tag_t {
    kUnionData = 2,  // 0x2
    kUnknown = ::std::numeric_limits<::fidl_union_tag_t>::max(),
  };

  bool has_invalid_tag() const {
    return ordinal_ ==
           ::fidl_test_anonymous::wire::UnionMember::Ordinal::Invalid;
  }

  bool is_union_data() const {
    return ordinal_ ==
           ::fidl_test_anonymous::wire::UnionMember::Ordinal::kUnionData;
  }

  static UnionMember WithUnionData(::fidl::ObjectView<uint8_t> val) {
    UnionMember result;
    result.set_union_data(val);
    return result;
  }

  template <typename... Args>
  static UnionMember WithUnionData(::fidl::AnyArena& allocator,
                                   Args&&... args) {
    UnionMember result;
    result.set_union_data(
        ::fidl::ObjectView<uint8_t>(allocator, std::forward<Args>(args)...));
    return result;
  }

  void set_union_data(::fidl::ObjectView<uint8_t> elem) {
    ordinal_ = ::fidl_test_anonymous::wire::UnionMember::Ordinal::kUnionData;
    envelope_.data =
        ::fidl::ObjectView<void>::FromExternal(static_cast<void*>(elem.get()));
  }

  template <typename... Args>
  void set_union_data(::fidl::AnyArena& allocator, Args&&... args) {
    ordinal_ = ::fidl_test_anonymous::wire::UnionMember::Ordinal::kUnionData;
    set_union_data(
        ::fidl::ObjectView<uint8_t>(allocator, std::forward<Args>(args)...));
  }

  uint8_t& mutable_union_data() {
    ZX_ASSERT(ordinal_ ==
              ::fidl_test_anonymous::wire::UnionMember::Ordinal::kUnionData);
    return *static_cast<uint8_t*>(envelope_.data.get());
  }
  const uint8_t& union_data() const {
    ZX_ASSERT(ordinal_ ==
              ::fidl_test_anonymous::wire::UnionMember::Ordinal::kUnionData);
    return *static_cast<uint8_t*>(envelope_.data.get());
  }
  ::fidl_test_anonymous::wire::UnionMember::Tag which() const;

  static constexpr const fidl_type_t* Type =
      &fidl_test_anonymous_UnionMemberTable;
  static constexpr uint32_t MaxNumHandles = 0;
  static constexpr uint32_t PrimarySize = 24;
  [[maybe_unused]] static constexpr uint32_t MaxOutOfLine = 8;
  static constexpr bool HasPointer = true;

 private:
  enum class Ordinal : fidl_xunion_tag_t {
    Invalid = 0,
    kUnionData = 2,  // 0x2
  };

  static void SizeAndOffsetAssertionHelper();
  ::fidl_test_anonymous::wire::UnionMember::Ordinal ordinal_;
  FIDL_ALIGNDECL
  ::fidl::Envelope<void> envelope_;
};

extern "C" const fidl_type_t fidl_test_anonymous_TableMemberTable;

class TableMember final {
 public:
  using TableData = fidl_test_anonymous::wire::TableData;

  // Returns whether no field is set.
  bool IsEmpty() const { return max_ordinal_ == 0; }

  class Frame_;

  const ::fidl::VectorView<::fidl_test_anonymous::wire::TableData>& table_data()
      const {
    ZX_ASSERT(has_table_data());
    return *frame_ptr_->table_data_.data;
  }
  ::fidl::VectorView<::fidl_test_anonymous::wire::TableData>& table_data() {
    ZX_ASSERT(has_table_data());
    return *frame_ptr_->table_data_.data;
  }
  bool has_table_data() const {
    return max_ordinal_ >= 2 && frame_ptr_->table_data_.data != nullptr;
  }
  TableMember& set_table_data(
      ::fidl::ObjectView<
          ::fidl::VectorView<::fidl_test_anonymous::wire::TableData>>
          elem) {
    ZX_DEBUG_ASSERT(frame_ptr_ != nullptr);
    frame_ptr_->table_data_.data = elem;
    max_ordinal_ = std::max(max_ordinal_, static_cast<uint64_t>(2));
    return *this;
  }
  TableMember& set_table_data(std::nullptr_t) {
    ZX_DEBUG_ASSERT(frame_ptr_ != nullptr);
    frame_ptr_->table_data_.data = nullptr;
    return *this;
  }
  template <typename... Args>
  TableMember& set_table_data(::fidl::AnyArena& allocator, Args&&... args) {
    ZX_DEBUG_ASSERT(frame_ptr_ != nullptr);
    frame_ptr_->table_data_.data = ::fidl::ObjectView<
        ::fidl::VectorView<::fidl_test_anonymous::wire::TableData>>(
        allocator, std::forward<Args>(args)...);
    max_ordinal_ = std::max(max_ordinal_, static_cast<uint64_t>(2));
    return *this;
  }

  TableMember() = default;
  explicit TableMember(::fidl::AnyArena& allocator)
      : frame_ptr_(::fidl::ObjectView<Frame_>(allocator)) {}
  // This constructor allows a user controlled allocation (not using a Arena).
  // It should only be used when performance is key.
  // As soon as the frame is given to the table, it must not be used directly or
  // for another table.
  explicit TableMember(::fidl::ObjectView<Frame_>&& frame)
      : frame_ptr_(std::move(frame)) {}
  ~TableMember() = default;
  TableMember(const TableMember& other) noexcept = default;
  TableMember& operator=(const TableMember& other) noexcept = default;
  TableMember(TableMember&& other) noexcept = default;
  TableMember& operator=(TableMember&& other) noexcept = default;

  static constexpr const fidl_type_t* Type =
      &fidl_test_anonymous_TableMemberTable;
  static constexpr uint32_t MaxNumHandles = 0;
  static constexpr uint32_t PrimarySize = 16;
  [[maybe_unused]] static constexpr uint32_t MaxOutOfLine = 64;
  static constexpr bool HasPointer = true;

  void Allocate(::fidl::AnyArena& allocator) {
    max_ordinal_ = 0;
    frame_ptr_ = ::fidl::ObjectView<Frame_>(allocator);
  }
  void Init(::fidl::ObjectView<Frame_>&& frame_ptr) {
    max_ordinal_ = 0;
    frame_ptr_ = std::move(frame_ptr);
  }

  class UnownedEncodedMessage final {
   public:
    UnownedEncodedMessage(uint8_t* backing_buffer, uint32_t backing_buffer_size,
                          TableMember* value)
        : UnownedEncodedMessage(::fidl::internal::IovecBufferSize,
                                backing_buffer, backing_buffer_size, value) {}
    UnownedEncodedMessage(uint32_t iovec_capacity, uint8_t* backing_buffer,
                          uint32_t backing_buffer_size, TableMember* value)
        : message_(::fidl::OutgoingMessage::ConstructorArgs{
              .iovecs = iovecs_,
              .iovec_capacity = iovec_capacity,
              .backing_buffer = backing_buffer,
              .backing_buffer_capacity = backing_buffer_size,
          }) {
      ZX_ASSERT(iovec_capacity <= std::size(iovecs_));
      message_.Encode<TableMember>(value);
    }
    UnownedEncodedMessage(const UnownedEncodedMessage&) = delete;
    UnownedEncodedMessage(UnownedEncodedMessage&&) = delete;
    UnownedEncodedMessage* operator=(const UnownedEncodedMessage&) = delete;
    UnownedEncodedMessage* operator=(UnownedEncodedMessage&&) = delete;

    zx_status_t status() const { return message_.status(); }
#ifdef __Fuchsia__
    const char* status_string() const { return message_.status_string(); }
#endif  // __Fuchsia__
    bool ok() const { return message_.status() == ZX_OK; }
    std::string FormatDescription() const {
      return message_.FormatDescription();
    }
    const char* lossy_description() const {
      return message_.lossy_description();
    }
    const ::fidl::Result& error() const { return message_.error(); }

    ::fidl::OutgoingMessage& GetOutgoingMessage() { return message_; }

   private:
    ::fidl::internal::IovecBuffer iovecs_;
    ::fidl::OutgoingMessage message_;
  };

  class OwnedEncodedMessage final {
   public:
    explicit OwnedEncodedMessage(TableMember* value)
        : message_(1u, backing_buffer_.data(), backing_buffer_.size(), value) {}
    // Construct a message using owned buffers.
    // If |iovec_capacity>1|, then the message in OwnedEncodedMessage may point
    // the input FIDL object, which is not owned by it.
    explicit OwnedEncodedMessage(
        ::fidl::internal::AllowUnownedInputRef allow_unowned,
        TableMember* value)
        : message_(::fidl::internal::IovecBufferSize, backing_buffer_.data(),
                   backing_buffer_.size(), value) {}
    OwnedEncodedMessage(const OwnedEncodedMessage&) = delete;
    OwnedEncodedMessage(OwnedEncodedMessage&&) = delete;
    OwnedEncodedMessage* operator=(const OwnedEncodedMessage&) = delete;
    OwnedEncodedMessage* operator=(OwnedEncodedMessage&&) = delete;

    zx_status_t status() const { return message_.status(); }
#ifdef __Fuchsia__
    const char* status_string() const { return message_.status_string(); }
#endif  // __Fuchsia__
    bool ok() const { return message_.ok(); }
    std::string FormatDescription() const {
      return message_.FormatDescription();
    }
    const char* lossy_description() const {
      return message_.lossy_description();
    }
    const ::fidl::Result& error() const { return message_.error(); }

    ::fidl::OutgoingMessage& GetOutgoingMessage() {
      return message_.GetOutgoingMessage();
    }

   private:
    ::fidl::internal::InlineMessageBuffer<80> backing_buffer_;
    UnownedEncodedMessage message_;
  };

  class DecodedMessage final
      : public ::fidl::internal::DecodedMessageBase<TableMember> {
   public:
    using DecodedMessageBase<TableMember>::DecodedMessageBase;

    DecodedMessage(uint8_t* bytes, uint32_t byte_actual,
                   zx_handle_info_t* handles = nullptr,
                   uint32_t handle_actual = 0)
        : DecodedMessageBase(
              ::fidl::internal::kLLCPPInMemoryWireFormatVersion,
              ::fidl::IncomingMessage(
                  bytes, byte_actual, handles, handle_actual,
                  ::fidl::IncomingMessage::kSkipMessageHeaderValidation)) {}

    // Internal constructor for specifying a specific wire format version.
    DecodedMessage(::fidl::internal::WireFormatVersion wire_format_version,
                   uint8_t* bytes, uint32_t byte_actual,
                   zx_handle_info_t* handles = nullptr,
                   uint32_t handle_actual = 0)
        : DecodedMessageBase(
              wire_format_version,
              ::fidl::IncomingMessage(
                  bytes, byte_actual, handles, handle_actual,
                  ::fidl::IncomingMessage::kSkipMessageHeaderValidation)) {}

    DecodedMessage(const fidl_incoming_msg_t* c_msg)
        : DecodedMessage(reinterpret_cast<uint8_t*>(c_msg->bytes),
                         c_msg->num_bytes, c_msg->handles, c_msg->num_handles) {
    }

    // Internal constructor for specifying a specific wire format version.
    DecodedMessage(::fidl::internal::WireFormatVersion wire_format_version,
                   const fidl_incoming_msg_t* c_msg)
        : DecodedMessage(wire_format_version,
                         reinterpret_cast<uint8_t*>(c_msg->bytes),
                         c_msg->num_bytes, c_msg->handles, c_msg->num_handles) {
    }

    TableMember* PrimaryObject() {
      ZX_DEBUG_ASSERT(ok());
      return reinterpret_cast<TableMember*>(bytes());
    }

    // Release the ownership of the decoded message. That means that the handles
    // won't be closed When the object is destroyed. After calling this method,
    // the |DecodedMessage| object should not be used anymore.
    void ReleasePrimaryObject() { ResetBytes(); }
  };

  // Frame_s are managed automatically by the Arena class.
  // The only direct usage is when performance is key and a frame needs to be
  // allocated outside a Arena. Once created, a frame can only be used for one
  // single table.
  class Frame_ final {
   public:
    Frame_() = default;
    // In its intended usage, Frame_ will be referenced by an ObjectView. If the
    // ObjectView is assigned before a move or copy, then it will reference the
    // old invalid object. Because this is unsafe, copies are disallowed and
    // moves are only allowed by friend classes that operate safely.
    Frame_(const Frame_&) = delete;
    Frame_& operator=(const Frame_&) = delete;

   private:
    Frame_(Frame_&&) noexcept = default;
    Frame_& operator=(Frame_&&) noexcept = default;
    ::fidl::Envelope<void> reserved_0_;
    ::fidl::Envelope<::fidl::VectorView<::fidl_test_anonymous::wire::TableData>>
        table_data_;

    friend class TableMember;
  };

 private:
  uint64_t max_ordinal_ = 0;
  ::fidl::ObjectView<Frame_> frame_ptr_;
};

extern "C" const fidl_type_t fidl_test_anonymous_FunctionApplicationTable;

class FunctionApplication final {
 public:
  using Flags = fidl_test_anonymous::wire::Flags;

  // Returns whether no field is set.
  bool IsEmpty() const { return max_ordinal_ == 0; }

  class Frame_;

  const ::fidl::StringView& func() const {
    ZX_ASSERT(has_func());
    return *frame_ptr_->func_.data;
  }
  ::fidl::StringView& func() {
    ZX_ASSERT(has_func());
    return *frame_ptr_->func_.data;
  }
  bool has_func() const {
    return max_ordinal_ >= 1 && frame_ptr_->func_.data != nullptr;
  }
  FunctionApplication& set_func(::fidl::ObjectView<::fidl::StringView> elem) {
    ZX_DEBUG_ASSERT(frame_ptr_ != nullptr);
    frame_ptr_->func_.data = elem;
    max_ordinal_ = std::max(max_ordinal_, static_cast<uint64_t>(1));
    return *this;
  }
  FunctionApplication& set_func(std::nullptr_t) {
    ZX_DEBUG_ASSERT(frame_ptr_ != nullptr);
    frame_ptr_->func_.data = nullptr;
    return *this;
  }
  template <typename... Args>
  FunctionApplication& set_func(::fidl::AnyArena& allocator, Args&&... args) {
    ZX_DEBUG_ASSERT(frame_ptr_ != nullptr);
    frame_ptr_->func_.data = ::fidl::ObjectView<::fidl::StringView>(
        allocator, std::forward<Args>(args)...);
    max_ordinal_ = std::max(max_ordinal_, static_cast<uint64_t>(1));
    return *this;
  }

  const ::fidl::VectorView<::fidl_test_anonymous::wire::Expression>& args()
      const {
    ZX_ASSERT(has_args());
    return *frame_ptr_->args_.data;
  }
  ::fidl::VectorView<::fidl_test_anonymous::wire::Expression>& args() {
    ZX_ASSERT(has_args());
    return *frame_ptr_->args_.data;
  }
  bool has_args() const {
    return max_ordinal_ >= 3 && frame_ptr_->args_.data != nullptr;
  }
  FunctionApplication& set_args(
      ::fidl::ObjectView<
          ::fidl::VectorView<::fidl_test_anonymous::wire::Expression>>
          elem) {
    ZX_DEBUG_ASSERT(frame_ptr_ != nullptr);
    frame_ptr_->args_.data = elem;
    max_ordinal_ = std::max(max_ordinal_, static_cast<uint64_t>(3));
    return *this;
  }
  FunctionApplication& set_args(std::nullptr_t) {
    ZX_DEBUG_ASSERT(frame_ptr_ != nullptr);
    frame_ptr_->args_.data = nullptr;
    return *this;
  }
  template <typename... Args>
  FunctionApplication& set_args(::fidl::AnyArena& allocator, Args&&... args) {
    ZX_DEBUG_ASSERT(frame_ptr_ != nullptr);
    frame_ptr_->args_.data = ::fidl::ObjectView<
        ::fidl::VectorView<::fidl_test_anonymous::wire::Expression>>(
        allocator, std::forward<Args>(args)...);
    max_ordinal_ = std::max(max_ordinal_, static_cast<uint64_t>(3));
    return *this;
  }

  const ::fidl_test_anonymous::wire::Flags& flags() const {
    ZX_ASSERT(has_flags());
    return *frame_ptr_->flags_.data;
  }
  ::fidl_test_anonymous::wire::Flags& flags() {
    ZX_ASSERT(has_flags());
    return *frame_ptr_->flags_.data;
  }
  bool has_flags() const {
    return max_ordinal_ >= 4 && frame_ptr_->flags_.data != nullptr;
  }
  FunctionApplication& set_flags(
      ::fidl::ObjectView<::fidl_test_anonymous::wire::Flags> elem) {
    ZX_DEBUG_ASSERT(frame_ptr_ != nullptr);
    frame_ptr_->flags_.data = elem;
    max_ordinal_ = std::max(max_ordinal_, static_cast<uint64_t>(4));
    return *this;
  }
  FunctionApplication& set_flags(std::nullptr_t) {
    ZX_DEBUG_ASSERT(frame_ptr_ != nullptr);
    frame_ptr_->flags_.data = nullptr;
    return *this;
  }
  template <typename... Args>
  FunctionApplication& set_flags(::fidl::AnyArena& allocator, Args&&... args) {
    ZX_DEBUG_ASSERT(frame_ptr_ != nullptr);
    frame_ptr_->flags_.data =
        ::fidl::ObjectView<::fidl_test_anonymous::wire::Flags>(
            allocator, std::forward<Args>(args)...);
    max_ordinal_ = std::max(max_ordinal_, static_cast<uint64_t>(4));
    return *this;
  }

  FunctionApplication() = default;
  explicit FunctionApplication(::fidl::AnyArena& allocator)
      : frame_ptr_(::fidl::ObjectView<Frame_>(allocator)) {}
  // This constructor allows a user controlled allocation (not using a Arena).
  // It should only be used when performance is key.
  // As soon as the frame is given to the table, it must not be used directly or
  // for another table.
  explicit FunctionApplication(::fidl::ObjectView<Frame_>&& frame)
      : frame_ptr_(std::move(frame)) {}
  ~FunctionApplication() = default;
  FunctionApplication(const FunctionApplication& other) noexcept = default;
  FunctionApplication& operator=(const FunctionApplication& other) noexcept =
      default;
  FunctionApplication(FunctionApplication&& other) noexcept = default;
  FunctionApplication& operator=(FunctionApplication&& other) noexcept =
      default;

  static constexpr const fidl_type_t* Type =
      &fidl_test_anonymous_FunctionApplicationTable;
  static constexpr uint32_t MaxNumHandles = 0;
  static constexpr uint32_t PrimarySize = 16;
  [[maybe_unused]] static constexpr uint32_t MaxOutOfLine = 4294967295;
  static constexpr bool HasPointer = true;

  void Allocate(::fidl::AnyArena& allocator) {
    max_ordinal_ = 0;
    frame_ptr_ = ::fidl::ObjectView<Frame_>(allocator);
  }
  void Init(::fidl::ObjectView<Frame_>&& frame_ptr) {
    max_ordinal_ = 0;
    frame_ptr_ = std::move(frame_ptr);
  }

  class UnownedEncodedMessage final {
   public:
    UnownedEncodedMessage(uint8_t* backing_buffer, uint32_t backing_buffer_size,
                          FunctionApplication* value)
        : UnownedEncodedMessage(::fidl::internal::IovecBufferSize,
                                backing_buffer, backing_buffer_size, value) {}
    UnownedEncodedMessage(uint32_t iovec_capacity, uint8_t* backing_buffer,
                          uint32_t backing_buffer_size,
                          FunctionApplication* value)
        : message_(::fidl::OutgoingMessage::ConstructorArgs{
              .iovecs = iovecs_,
              .iovec_capacity = iovec_capacity,
              .backing_buffer = backing_buffer,
              .backing_buffer_capacity = backing_buffer_size,
          }) {
      ZX_ASSERT(iovec_capacity <= std::size(iovecs_));
      message_.Encode<FunctionApplication>(value);
    }
    UnownedEncodedMessage(const UnownedEncodedMessage&) = delete;
    UnownedEncodedMessage(UnownedEncodedMessage&&) = delete;
    UnownedEncodedMessage* operator=(const UnownedEncodedMessage&) = delete;
    UnownedEncodedMessage* operator=(UnownedEncodedMessage&&) = delete;

    zx_status_t status() const { return message_.status(); }
#ifdef __Fuchsia__
    const char* status_string() const { return message_.status_string(); }
#endif  // __Fuchsia__
    bool ok() const { return message_.status() == ZX_OK; }
    std::string FormatDescription() const {
      return message_.FormatDescription();
    }
    const char* lossy_description() const {
      return message_.lossy_description();
    }
    const ::fidl::Result& error() const { return message_.error(); }

    ::fidl::OutgoingMessage& GetOutgoingMessage() { return message_; }

   private:
    ::fidl::internal::IovecBuffer iovecs_;
    ::fidl::OutgoingMessage message_;
  };

  class OwnedEncodedMessage final {
   public:
    explicit OwnedEncodedMessage(FunctionApplication* value)
        : message_(1u, backing_buffer_.data(), backing_buffer_.size(), value) {}
    // Construct a message using owned buffers.
    // If |iovec_capacity>1|, then the message in OwnedEncodedMessage may point
    // the input FIDL object, which is not owned by it.
    explicit OwnedEncodedMessage(
        ::fidl::internal::AllowUnownedInputRef allow_unowned,
        FunctionApplication* value)
        : message_(::fidl::internal::IovecBufferSize, backing_buffer_.data(),
                   backing_buffer_.size(), value) {}
    OwnedEncodedMessage(const OwnedEncodedMessage&) = delete;
    OwnedEncodedMessage(OwnedEncodedMessage&&) = delete;
    OwnedEncodedMessage* operator=(const OwnedEncodedMessage&) = delete;
    OwnedEncodedMessage* operator=(OwnedEncodedMessage&&) = delete;

    zx_status_t status() const { return message_.status(); }
#ifdef __Fuchsia__
    const char* status_string() const { return message_.status_string(); }
#endif  // __Fuchsia__
    bool ok() const { return message_.ok(); }
    std::string FormatDescription() const {
      return message_.FormatDescription();
    }
    const char* lossy_description() const {
      return message_.lossy_description();
    }
    const ::fidl::Result& error() const { return message_.error(); }

    ::fidl::OutgoingMessage& GetOutgoingMessage() {
      return message_.GetOutgoingMessage();
    }

   private:
    ::fidl::internal::BoxedMessageBuffer<ZX_CHANNEL_MAX_MSG_BYTES>
        backing_buffer_;
    UnownedEncodedMessage message_;
  };

  class DecodedMessage final
      : public ::fidl::internal::DecodedMessageBase<FunctionApplication> {
   public:
    using DecodedMessageBase<FunctionApplication>::DecodedMessageBase;

    DecodedMessage(uint8_t* bytes, uint32_t byte_actual,
                   zx_handle_info_t* handles = nullptr,
                   uint32_t handle_actual = 0)
        : DecodedMessageBase(
              ::fidl::internal::kLLCPPInMemoryWireFormatVersion,
              ::fidl::IncomingMessage(
                  bytes, byte_actual, handles, handle_actual,
                  ::fidl::IncomingMessage::kSkipMessageHeaderValidation)) {}

    // Internal constructor for specifying a specific wire format version.
    DecodedMessage(::fidl::internal::WireFormatVersion wire_format_version,
                   uint8_t* bytes, uint32_t byte_actual,
                   zx_handle_info_t* handles = nullptr,
                   uint32_t handle_actual = 0)
        : DecodedMessageBase(
              wire_format_version,
              ::fidl::IncomingMessage(
                  bytes, byte_actual, handles, handle_actual,
                  ::fidl::IncomingMessage::kSkipMessageHeaderValidation)) {}

    DecodedMessage(const fidl_incoming_msg_t* c_msg)
        : DecodedMessage(reinterpret_cast<uint8_t*>(c_msg->bytes),
                         c_msg->num_bytes, c_msg->handles, c_msg->num_handles) {
    }

    // Internal constructor for specifying a specific wire format version.
    DecodedMessage(::fidl::internal::WireFormatVersion wire_format_version,
                   const fidl_incoming_msg_t* c_msg)
        : DecodedMessage(wire_format_version,
                         reinterpret_cast<uint8_t*>(c_msg->bytes),
                         c_msg->num_bytes, c_msg->handles, c_msg->num_handles) {
    }

    FunctionApplication* PrimaryObject() {
      ZX_DEBUG_ASSERT(ok());
      return reinterpret_cast<FunctionApplication*>(bytes());
    }

    // Release the ownership of the decoded message. That means that the handles
    // won't be closed When the object is destroyed. After calling this method,
    // the |DecodedMessage| object should not be used anymore.
    void ReleasePrimaryObject() { ResetBytes(); }
  };

  // Frame_s are managed automatically by the Arena class.
  // The only direct usage is when performance is key and a frame needs to be
  // allocated outside a Arena. Once created, a frame can only be used for one
  // single table.
  class Frame_ final {
   public:
    Frame_() = default;
    // In its intended usage, Frame_ will be referenced by an ObjectView. If the
    // ObjectView is assigned before a move or copy, then it will reference the
    // old invalid object. Because this is unsafe, copies are disallowed and
    // moves are only allowed by friend classes that operate safely.
    Frame_(const Frame_&) = delete;
    Frame_& operator=(const Frame_&) = delete;

   private:
    Frame_(Frame_&&) noexcept = default;
    Frame_& operator=(Frame_&&) noexcept = default;
    ::fidl::Envelope<::fidl::StringView> func_;
    ::fidl::Envelope<void> reserved_1_;
    ::fidl::Envelope<
        ::fidl::VectorView<::fidl_test_anonymous::wire::Expression>>
        args_;
    ::fidl::Envelope<::fidl_test_anonymous::wire::Flags> flags_;

    friend class FunctionApplication;
  };

 private:
  uint64_t max_ordinal_ = 0;
  ::fidl::ObjectView<Frame_> frame_ptr_;
};

extern "C" const fidl_type_t fidl_test_anonymous_ExpressionTable;

class Expression {
 public:
  using FunctionApplication = fidl_test_anonymous::wire::FunctionApplication;
  using BinOp = fidl_test_anonymous::wire::BinOp;

  Expression()
      : ordinal_(::fidl_test_anonymous::wire::Expression::Ordinal::Invalid),
        envelope_{} {}

  Expression(const Expression&) = default;
  Expression& operator=(const Expression&) = default;
  Expression(Expression&&) = default;
  Expression& operator=(Expression&&) = default;

  enum class Tag : fidl_xunion_tag_t {
    kValue = 1,                // 0x1
    kBinOp = 2,                // 0x2
    kFunctionApplication = 3,  // 0x3
    kUnknown = ::std::numeric_limits<::fidl_union_tag_t>::max(),
  };

  bool has_invalid_tag() const {
    return ordinal_ ==
           ::fidl_test_anonymous::wire::Expression::Ordinal::Invalid;
  }

  bool is_value() const {
    return ordinal_ == ::fidl_test_anonymous::wire::Expression::Ordinal::kValue;
  }

  static Expression WithValue(::fidl::ObjectView<uint64_t> val) {
    Expression result;
    result.set_value(val);
    return result;
  }

  template <typename... Args>
  static Expression WithValue(::fidl::AnyArena& allocator, Args&&... args) {
    Expression result;
    result.set_value(
        ::fidl::ObjectView<uint64_t>(allocator, std::forward<Args>(args)...));
    return result;
  }

  void set_value(::fidl::ObjectView<uint64_t> elem) {
    ordinal_ = ::fidl_test_anonymous::wire::Expression::Ordinal::kValue;
    envelope_.data =
        ::fidl::ObjectView<void>::FromExternal(static_cast<void*>(elem.get()));
  }

  template <typename... Args>
  void set_value(::fidl::AnyArena& allocator, Args&&... args) {
    ordinal_ = ::fidl_test_anonymous::wire::Expression::Ordinal::kValue;
    set_value(
        ::fidl::ObjectView<uint64_t>(allocator, std::forward<Args>(args)...));
  }

  uint64_t& mutable_value() {
    ZX_ASSERT(ordinal_ ==
              ::fidl_test_anonymous::wire::Expression::Ordinal::kValue);
    return *static_cast<uint64_t*>(envelope_.data.get());
  }
  const uint64_t& value() const {
    ZX_ASSERT(ordinal_ ==
              ::fidl_test_anonymous::wire::Expression::Ordinal::kValue);
    return *static_cast<uint64_t*>(envelope_.data.get());
  }

  bool is_bin_op() const {
    return ordinal_ == ::fidl_test_anonymous::wire::Expression::Ordinal::kBinOp;
  }

  static Expression WithBinOp(
      ::fidl::ObjectView<::fidl_test_anonymous::wire::BinOp> val) {
    Expression result;
    result.set_bin_op(val);
    return result;
  }

  template <typename... Args>
  static Expression WithBinOp(::fidl::AnyArena& allocator, Args&&... args) {
    Expression result;
    result.set_bin_op(::fidl::ObjectView<::fidl_test_anonymous::wire::BinOp>(
        allocator, std::forward<Args>(args)...));
    return result;
  }

  void set_bin_op(::fidl::ObjectView<::fidl_test_anonymous::wire::BinOp> elem) {
    ordinal_ = ::fidl_test_anonymous::wire::Expression::Ordinal::kBinOp;
    envelope_.data =
        ::fidl::ObjectView<void>::FromExternal(static_cast<void*>(elem.get()));
  }

  template <typename... Args>
  void set_bin_op(::fidl::AnyArena& allocator, Args&&... args) {
    ordinal_ = ::fidl_test_anonymous::wire::Expression::Ordinal::kBinOp;
    set_bin_op(::fidl::ObjectView<::fidl_test_anonymous::wire::BinOp>(
        allocator, std::forward<Args>(args)...));
  }

  ::fidl_test_anonymous::wire::BinOp& mutable_bin_op() {
    ZX_ASSERT(ordinal_ ==
              ::fidl_test_anonymous::wire::Expression::Ordinal::kBinOp);
    return *static_cast<::fidl_test_anonymous::wire::BinOp*>(
        envelope_.data.get());
  }
  const ::fidl_test_anonymous::wire::BinOp& bin_op() const {
    ZX_ASSERT(ordinal_ ==
              ::fidl_test_anonymous::wire::Expression::Ordinal::kBinOp);
    return *static_cast<::fidl_test_anonymous::wire::BinOp*>(
        envelope_.data.get());
  }

  bool is_function_application() const {
    return ordinal_ == ::fidl_test_anonymous::wire::Expression::Ordinal::
                           kFunctionApplication;
  }

  static Expression WithFunctionApplication(
      ::fidl::ObjectView<::fidl_test_anonymous::wire::FunctionApplication>
          val) {
    Expression result;
    result.set_function_application(val);
    return result;
  }

  template <typename... Args>
  static Expression WithFunctionApplication(::fidl::AnyArena& allocator,
                                            Args&&... args) {
    Expression result;
    result.set_function_application(
        ::fidl::ObjectView<::fidl_test_anonymous::wire::FunctionApplication>(
            allocator, std::forward<Args>(args)...));
    return result;
  }

  void set_function_application(
      ::fidl::ObjectView<::fidl_test_anonymous::wire::FunctionApplication>
          elem) {
    ordinal_ =
        ::fidl_test_anonymous::wire::Expression::Ordinal::kFunctionApplication;
    envelope_.data =
        ::fidl::ObjectView<void>::FromExternal(static_cast<void*>(elem.get()));
  }

  template <typename... Args>
  void set_function_application(::fidl::AnyArena& allocator, Args&&... args) {
    ordinal_ =
        ::fidl_test_anonymous::wire::Expression::Ordinal::kFunctionApplication;
    set_function_application(
        ::fidl::ObjectView<::fidl_test_anonymous::wire::FunctionApplication>(
            allocator, std::forward<Args>(args)...));
  }

  ::fidl_test_anonymous::wire::FunctionApplication&
  mutable_function_application() {
    ZX_ASSERT(
        ordinal_ ==
        ::fidl_test_anonymous::wire::Expression::Ordinal::kFunctionApplication);
    return *static_cast<::fidl_test_anonymous::wire::FunctionApplication*>(
        envelope_.data.get());
  }
  const ::fidl_test_anonymous::wire::FunctionApplication& function_application()
      const {
    ZX_ASSERT(
        ordinal_ ==
        ::fidl_test_anonymous::wire::Expression::Ordinal::kFunctionApplication);
    return *static_cast<::fidl_test_anonymous::wire::FunctionApplication*>(
        envelope_.data.get());
  }
  ::fidl_test_anonymous::wire::Expression::Tag which() const;

  static constexpr const fidl_type_t* Type =
      &fidl_test_anonymous_ExpressionTable;
  static constexpr uint32_t MaxNumHandles = 0;
  static constexpr uint32_t PrimarySize = 24;
  [[maybe_unused]] static constexpr uint32_t MaxOutOfLine = 4294967295;
  static constexpr bool HasPointer = true;

 private:
  enum class Ordinal : fidl_xunion_tag_t {
    Invalid = 0,
    kValue = 1,                // 0x1
    kBinOp = 2,                // 0x2
    kFunctionApplication = 3,  // 0x3
  };

  static void SizeAndOffsetAssertionHelper();
  ::fidl_test_anonymous::wire::Expression::Ordinal ordinal_;
  FIDL_ALIGNDECL
  ::fidl::Envelope<void> envelope_;
};

extern "C" const fidl_type_t
    fidl_test_anonymous_SomeProtocol_SomeMethod_ResultTable;

class SomeProtocolSomeMethodResult {
 public:
  using Err = fidl_test_anonymous::wire::SomeProtocolSomeMethodError;
  using Response = fidl_test_anonymous::wire::SomeProtocolSomeMethodResponse;

  SomeProtocolSomeMethodResult()
      : ordinal_(::fidl_test_anonymous::wire::SomeProtocolSomeMethodResult::
                     Ordinal::Invalid),
        envelope_{} {}

  SomeProtocolSomeMethodResult(const SomeProtocolSomeMethodResult&) = default;
  SomeProtocolSomeMethodResult& operator=(const SomeProtocolSomeMethodResult&) =
      default;
  SomeProtocolSomeMethodResult(SomeProtocolSomeMethodResult&&) = default;
  SomeProtocolSomeMethodResult& operator=(SomeProtocolSomeMethodResult&&) =
      default;

  enum class Tag : fidl_xunion_tag_t {
    kResponse = 1,  // 0x1
    kErr = 2,       // 0x2
  };

  bool has_invalid_tag() const {
    return ordinal_ == ::fidl_test_anonymous::wire::
                           SomeProtocolSomeMethodResult::Ordinal::Invalid;
  }

  bool is_response() const {
    return ordinal_ == ::fidl_test_anonymous::wire::
                           SomeProtocolSomeMethodResult::Ordinal::kResponse;
  }

  static SomeProtocolSomeMethodResult WithResponse(
      ::fidl::ObjectView<
          ::fidl_test_anonymous::wire::SomeProtocolSomeMethodResponse>
          val) {
    SomeProtocolSomeMethodResult result;
    result.set_response(val);
    return result;
  }

  template <typename... Args>
  static SomeProtocolSomeMethodResult WithResponse(::fidl::AnyArena& allocator,
                                                   Args&&... args) {
    SomeProtocolSomeMethodResult result;
    result.set_response(
        ::fidl::ObjectView<
            ::fidl_test_anonymous::wire::SomeProtocolSomeMethodResponse>(
            allocator, std::forward<Args>(args)...));
    return result;
  }

  void set_response(::fidl::ObjectView<
                    ::fidl_test_anonymous::wire::SomeProtocolSomeMethodResponse>
                        elem) {
    ordinal_ = ::fidl_test_anonymous::wire::SomeProtocolSomeMethodResult::
        Ordinal::kResponse;
    envelope_.data =
        ::fidl::ObjectView<void>::FromExternal(static_cast<void*>(elem.get()));
  }

  template <typename... Args>
  void set_response(::fidl::AnyArena& allocator, Args&&... args) {
    ordinal_ = ::fidl_test_anonymous::wire::SomeProtocolSomeMethodResult::
        Ordinal::kResponse;
    set_response(::fidl::ObjectView<
                 ::fidl_test_anonymous::wire::SomeProtocolSomeMethodResponse>(
        allocator, std::forward<Args>(args)...));
  }

  ::fidl_test_anonymous::wire::SomeProtocolSomeMethodResponse&
  mutable_response() {
    ZX_ASSERT(ordinal_ == ::fidl_test_anonymous::wire::
                              SomeProtocolSomeMethodResult::Ordinal::kResponse);
    return *static_cast<
        ::fidl_test_anonymous::wire::SomeProtocolSomeMethodResponse*>(
        envelope_.data.get());
  }
  const ::fidl_test_anonymous::wire::SomeProtocolSomeMethodResponse& response()
      const {
    ZX_ASSERT(ordinal_ == ::fidl_test_anonymous::wire::
                              SomeProtocolSomeMethodResult::Ordinal::kResponse);
    return *static_cast<
        ::fidl_test_anonymous::wire::SomeProtocolSomeMethodResponse*>(
        envelope_.data.get());
  }

  bool is_err() const {
    return ordinal_ == ::fidl_test_anonymous::wire::
                           SomeProtocolSomeMethodResult::Ordinal::kErr;
  }

  static SomeProtocolSomeMethodResult WithErr(
      ::fidl::ObjectView<
          ::fidl_test_anonymous::wire::SomeProtocolSomeMethodError>
          val) {
    SomeProtocolSomeMethodResult result;
    result.set_err(val);
    return result;
  }

  template <typename... Args>
  static SomeProtocolSomeMethodResult WithErr(::fidl::AnyArena& allocator,
                                              Args&&... args) {
    SomeProtocolSomeMethodResult result;
    result.set_err(::fidl::ObjectView<
                   ::fidl_test_anonymous::wire::SomeProtocolSomeMethodError>(
        allocator, std::forward<Args>(args)...));
    return result;
  }

  void set_err(::fidl::ObjectView<
               ::fidl_test_anonymous::wire::SomeProtocolSomeMethodError>
                   elem) {
    ordinal_ = ::fidl_test_anonymous::wire::SomeProtocolSomeMethodResult::
        Ordinal::kErr;
    envelope_.data =
        ::fidl::ObjectView<void>::FromExternal(static_cast<void*>(elem.get()));
  }

  template <typename... Args>
  void set_err(::fidl::AnyArena& allocator, Args&&... args) {
    ordinal_ = ::fidl_test_anonymous::wire::SomeProtocolSomeMethodResult::
        Ordinal::kErr;
    set_err(::fidl::ObjectView<
            ::fidl_test_anonymous::wire::SomeProtocolSomeMethodError>(
        allocator, std::forward<Args>(args)...));
  }

  ::fidl_test_anonymous::wire::SomeProtocolSomeMethodError& mutable_err() {
    ZX_ASSERT(ordinal_ == ::fidl_test_anonymous::wire::
                              SomeProtocolSomeMethodResult::Ordinal::kErr);
    return *static_cast<
        ::fidl_test_anonymous::wire::SomeProtocolSomeMethodError*>(
        envelope_.data.get());
  }
  const ::fidl_test_anonymous::wire::SomeProtocolSomeMethodError& err() const {
    ZX_ASSERT(ordinal_ == ::fidl_test_anonymous::wire::
                              SomeProtocolSomeMethodResult::Ordinal::kErr);
    return *static_cast<
        ::fidl_test_anonymous::wire::SomeProtocolSomeMethodError*>(
        envelope_.data.get());
  }
  ::fidl_test_anonymous::wire::SomeProtocolSomeMethodResult::Tag which() const {
    ZX_ASSERT(!has_invalid_tag());
    return static_cast<
        ::fidl_test_anonymous::wire::SomeProtocolSomeMethodResult::Tag>(
        ordinal_);
  }

  static constexpr const fidl_type_t* Type =
      &fidl_test_anonymous_SomeProtocol_SomeMethod_ResultTable;
  static constexpr uint32_t MaxNumHandles = 0;
  static constexpr uint32_t PrimarySize = 24;
  [[maybe_unused]] static constexpr uint32_t MaxOutOfLine = 8;
  static constexpr bool HasPointer = true;

 private:
  enum class Ordinal : fidl_xunion_tag_t {
    Invalid = 0,
    kResponse = 1,  // 0x1
    kErr = 2,       // 0x2
  };

  static void SizeAndOffsetAssertionHelper();
  ::fidl_test_anonymous::wire::SomeProtocolSomeMethodResult::Ordinal ordinal_;
  FIDL_ALIGNDECL
  ::fidl::Envelope<void> envelope_;
};

extern "C" const fidl_type_t fidl_test_anonymous_TableDataTable;

struct TableData {
  static constexpr const fidl_type_t* Type =
      &fidl_test_anonymous_TableDataTable;
  static constexpr uint32_t MaxNumHandles = 0;
  static constexpr uint32_t PrimarySize = 1;
  [[maybe_unused]] static constexpr uint32_t MaxOutOfLine = 0;
  static constexpr bool HasPointer = false;

  uint8_t data = {};

  class UnownedEncodedMessage final {
   public:
    UnownedEncodedMessage(uint8_t* backing_buffer, uint32_t backing_buffer_size,
                          TableData* value)
        : UnownedEncodedMessage(::fidl::internal::IovecBufferSize,
                                backing_buffer, backing_buffer_size, value) {}
    UnownedEncodedMessage(uint32_t iovec_capacity, uint8_t* backing_buffer,
                          uint32_t backing_buffer_size, TableData* value)
        : message_(::fidl::OutgoingMessage::ConstructorArgs{
              .iovecs = iovecs_,
              .iovec_capacity = iovec_capacity,
              .backing_buffer = backing_buffer,
              .backing_buffer_capacity = backing_buffer_size,
          }) {
      ZX_ASSERT(iovec_capacity <= std::size(iovecs_));
      message_.Encode<TableData>(value);
    }
    UnownedEncodedMessage(const UnownedEncodedMessage&) = delete;
    UnownedEncodedMessage(UnownedEncodedMessage&&) = delete;
    UnownedEncodedMessage* operator=(const UnownedEncodedMessage&) = delete;
    UnownedEncodedMessage* operator=(UnownedEncodedMessage&&) = delete;

    zx_status_t status() const { return message_.status(); }
#ifdef __Fuchsia__
    const char* status_string() const { return message_.status_string(); }
#endif  // __Fuchsia__
    bool ok() const { return message_.status() == ZX_OK; }
    std::string FormatDescription() const {
      return message_.FormatDescription();
    }
    const char* lossy_description() const {
      return message_.lossy_description();
    }
    const ::fidl::Result& error() const { return message_.error(); }

    ::fidl::OutgoingMessage& GetOutgoingMessage() { return message_; }

   private:
    ::fidl::internal::IovecBuffer iovecs_;
    ::fidl::OutgoingMessage message_;
  };

  class OwnedEncodedMessage final {
   public:
    explicit OwnedEncodedMessage(TableData* value)
        : message_(1u, backing_buffer_.data(), backing_buffer_.size(), value) {}
    // Internal constructor.
    explicit OwnedEncodedMessage(
        ::fidl::internal::AllowUnownedInputRef allow_unowned, TableData* value)
        : message_(::fidl::internal::IovecBufferSize, backing_buffer_.data(),
                   backing_buffer_.size(), value) {}
    OwnedEncodedMessage(const OwnedEncodedMessage&) = delete;
    OwnedEncodedMessage(OwnedEncodedMessage&&) = delete;
    OwnedEncodedMessage* operator=(const OwnedEncodedMessage&) = delete;
    OwnedEncodedMessage* operator=(OwnedEncodedMessage&&) = delete;

    zx_status_t status() const { return message_.status(); }
#ifdef __Fuchsia__
    const char* status_string() const { return message_.status_string(); }
#endif  // __Fuchsia__
    bool ok() const { return message_.ok(); }
    std::string FormatDescription() const {
      return message_.FormatDescription();
    }
    const char* lossy_description() const {
      return message_.lossy_description();
    }
    const ::fidl::Result& error() const { return message_.error(); }

    ::fidl::OutgoingMessage& GetOutgoingMessage() {
      return message_.GetOutgoingMessage();
    }

   private:
    ::fidl::internal::InlineMessageBuffer<8> backing_buffer_;
    UnownedEncodedMessage message_;
  };

  class DecodedMessage final
      : public ::fidl::internal::DecodedMessageBase<TableData> {
   public:
    using DecodedMessageBase<TableData>::DecodedMessageBase;

    DecodedMessage(uint8_t* bytes, uint32_t byte_actual,
                   zx_handle_info_t* handles = nullptr,
                   uint32_t handle_actual = 0)
        : DecodedMessageBase(
              ::fidl::internal::kLLCPPInMemoryWireFormatVersion,
              ::fidl::IncomingMessage(
                  bytes, byte_actual, handles, handle_actual,
                  ::fidl::IncomingMessage::kSkipMessageHeaderValidation)) {}

    // Internal constructor for specifying a specific wire format version.
    DecodedMessage(::fidl::internal::WireFormatVersion wire_format_version,
                   uint8_t* bytes, uint32_t byte_actual,
                   zx_handle_info_t* handles = nullptr,
                   uint32_t handle_actual = 0)
        : DecodedMessageBase(
              wire_format_version,
              ::fidl::IncomingMessage(
                  bytes, byte_actual, handles, handle_actual,
                  ::fidl::IncomingMessage::kSkipMessageHeaderValidation)) {}

    DecodedMessage(const fidl_incoming_msg_t* c_msg)
        : DecodedMessage(reinterpret_cast<uint8_t*>(c_msg->bytes),
                         c_msg->num_bytes, c_msg->handles, c_msg->num_handles) {
    }

    // Internal constructor for specifying a specific wire format version.
    DecodedMessage(::fidl::internal::WireFormatVersion wire_format_version,
                   const fidl_incoming_msg_t* c_msg)
        : DecodedMessage(wire_format_version,
                         reinterpret_cast<uint8_t*>(c_msg->bytes),
                         c_msg->num_bytes, c_msg->handles, c_msg->num_handles) {
    }

    TableData* PrimaryObject() {
      ZX_DEBUG_ASSERT(ok());
      return reinterpret_cast<TableData*>(bytes());
    }

    // Release the ownership of the decoded message. That means that the handles
    // won't be closed When the object is destroyed. After calling this method,
    // the |DecodedMessage| object should not be used anymore.
    void ReleasePrimaryObject() { ResetBytes(); }
  };
};

extern "C" const fidl_type_t fidl_test_anonymous_BinOpTable;

struct BinOp {
  static constexpr const fidl_type_t* Type = &fidl_test_anonymous_BinOpTable;
  static constexpr uint32_t MaxNumHandles = 0;
  static constexpr uint32_t PrimarySize = 56;
  [[maybe_unused]] static constexpr uint32_t MaxOutOfLine = 4294967295;
  static constexpr bool HasPointer = true;
  using Op = fidl_test_anonymous::wire::Op;

  ::fidl_test_anonymous::wire::Op op = {};

  ::fidl_test_anonymous::wire::Expression left = {};

  ::fidl_test_anonymous::wire::Expression right = {};

  class UnownedEncodedMessage final {
   public:
    UnownedEncodedMessage(uint8_t* backing_buffer, uint32_t backing_buffer_size,
                          BinOp* value)
        : UnownedEncodedMessage(::fidl::internal::IovecBufferSize,
                                backing_buffer, backing_buffer_size, value) {}
    UnownedEncodedMessage(uint32_t iovec_capacity, uint8_t* backing_buffer,
                          uint32_t backing_buffer_size, BinOp* value)
        : message_(::fidl::OutgoingMessage::ConstructorArgs{
              .iovecs = iovecs_,
              .iovec_capacity = iovec_capacity,
              .backing_buffer = backing_buffer,
              .backing_buffer_capacity = backing_buffer_size,
          }) {
      ZX_ASSERT(iovec_capacity <= std::size(iovecs_));
      message_.Encode<BinOp>(value);
    }
    UnownedEncodedMessage(const UnownedEncodedMessage&) = delete;
    UnownedEncodedMessage(UnownedEncodedMessage&&) = delete;
    UnownedEncodedMessage* operator=(const UnownedEncodedMessage&) = delete;
    UnownedEncodedMessage* operator=(UnownedEncodedMessage&&) = delete;

    zx_status_t status() const { return message_.status(); }
#ifdef __Fuchsia__
    const char* status_string() const { return message_.status_string(); }
#endif  // __Fuchsia__
    bool ok() const { return message_.status() == ZX_OK; }
    std::string FormatDescription() const {
      return message_.FormatDescription();
    }
    const char* lossy_description() const {
      return message_.lossy_description();
    }
    const ::fidl::Result& error() const { return message_.error(); }

    ::fidl::OutgoingMessage& GetOutgoingMessage() { return message_; }

   private:
    ::fidl::internal::IovecBuffer iovecs_;
    ::fidl::OutgoingMessage message_;
  };

  class OwnedEncodedMessage final {
   public:
    explicit OwnedEncodedMessage(BinOp* value)
        : message_(1u, backing_buffer_.data(), backing_buffer_.size(), value) {}
    // Internal constructor.
    explicit OwnedEncodedMessage(
        ::fidl::internal::AllowUnownedInputRef allow_unowned, BinOp* value)
        : message_(::fidl::internal::IovecBufferSize, backing_buffer_.data(),
                   backing_buffer_.size(), value) {}
    OwnedEncodedMessage(const OwnedEncodedMessage&) = delete;
    OwnedEncodedMessage(OwnedEncodedMessage&&) = delete;
    OwnedEncodedMessage* operator=(const OwnedEncodedMessage&) = delete;
    OwnedEncodedMessage* operator=(OwnedEncodedMessage&&) = delete;

    zx_status_t status() const { return message_.status(); }
#ifdef __Fuchsia__
    const char* status_string() const { return message_.status_string(); }
#endif  // __Fuchsia__
    bool ok() const { return message_.ok(); }
    std::string FormatDescription() const {
      return message_.FormatDescription();
    }
    const char* lossy_description() const {
      return message_.lossy_description();
    }
    const ::fidl::Result& error() const { return message_.error(); }

    ::fidl::OutgoingMessage& GetOutgoingMessage() {
      return message_.GetOutgoingMessage();
    }

   private:
    ::fidl::internal::BoxedMessageBuffer<ZX_CHANNEL_MAX_MSG_BYTES>
        backing_buffer_;
    UnownedEncodedMessage message_;
  };

  class DecodedMessage final
      : public ::fidl::internal::DecodedMessageBase<BinOp> {
   public:
    using DecodedMessageBase<BinOp>::DecodedMessageBase;

    DecodedMessage(uint8_t* bytes, uint32_t byte_actual,
                   zx_handle_info_t* handles = nullptr,
                   uint32_t handle_actual = 0)
        : DecodedMessageBase(
              ::fidl::internal::kLLCPPInMemoryWireFormatVersion,
              ::fidl::IncomingMessage(
                  bytes, byte_actual, handles, handle_actual,
                  ::fidl::IncomingMessage::kSkipMessageHeaderValidation)) {}

    // Internal constructor for specifying a specific wire format version.
    DecodedMessage(::fidl::internal::WireFormatVersion wire_format_version,
                   uint8_t* bytes, uint32_t byte_actual,
                   zx_handle_info_t* handles = nullptr,
                   uint32_t handle_actual = 0)
        : DecodedMessageBase(
              wire_format_version,
              ::fidl::IncomingMessage(
                  bytes, byte_actual, handles, handle_actual,
                  ::fidl::IncomingMessage::kSkipMessageHeaderValidation)) {}

    DecodedMessage(const fidl_incoming_msg_t* c_msg)
        : DecodedMessage(reinterpret_cast<uint8_t*>(c_msg->bytes),
                         c_msg->num_bytes, c_msg->handles, c_msg->num_handles) {
    }

    // Internal constructor for specifying a specific wire format version.
    DecodedMessage(::fidl::internal::WireFormatVersion wire_format_version,
                   const fidl_incoming_msg_t* c_msg)
        : DecodedMessage(wire_format_version,
                         reinterpret_cast<uint8_t*>(c_msg->bytes),
                         c_msg->num_bytes, c_msg->handles, c_msg->num_handles) {
    }

    BinOp* PrimaryObject() {
      ZX_DEBUG_ASSERT(ok());
      return reinterpret_cast<BinOp*>(bytes());
    }

    // Release the ownership of the decoded message. That means that the handles
    // won't be closed When the object is destroyed. After calling this method,
    // the |DecodedMessage| object should not be used anymore.
    void ReleasePrimaryObject() { ResetBytes(); }
  };
};

extern "C" const fidl_type_t
    fidl_test_anonymous_SomeProtocol_SomeMethod_ResponseTable;

struct SomeProtocolSomeMethodResponse {
  static constexpr const fidl_type_t* Type =
      &fidl_test_anonymous_SomeProtocol_SomeMethod_ResponseTable;
  static constexpr uint32_t MaxNumHandles = 0;
  static constexpr uint32_t PrimarySize = 4;
  [[maybe_unused]] static constexpr uint32_t MaxOutOfLine = 0;
  static constexpr bool HasPointer = false;
  using BitsMember = fidl_test_anonymous::wire::BitsMember;

  ::fidl_test_anonymous::wire::BitsMember bits_member = {};

  class UnownedEncodedMessage final {
   public:
    UnownedEncodedMessage(uint8_t* backing_buffer, uint32_t backing_buffer_size,
                          SomeProtocolSomeMethodResponse* value)
        : UnownedEncodedMessage(::fidl::internal::IovecBufferSize,
                                backing_buffer, backing_buffer_size, value) {}
    UnownedEncodedMessage(uint32_t iovec_capacity, uint8_t* backing_buffer,
                          uint32_t backing_buffer_size,
                          SomeProtocolSomeMethodResponse* value)
        : message_(::fidl::OutgoingMessage::ConstructorArgs{
              .iovecs = iovecs_,
              .iovec_capacity = iovec_capacity,
              .backing_buffer = backing_buffer,
              .backing_buffer_capacity = backing_buffer_size,
          }) {
      ZX_ASSERT(iovec_capacity <= std::size(iovecs_));
      message_.Encode<SomeProtocolSomeMethodResponse>(value);
    }
    UnownedEncodedMessage(const UnownedEncodedMessage&) = delete;
    UnownedEncodedMessage(UnownedEncodedMessage&&) = delete;
    UnownedEncodedMessage* operator=(const UnownedEncodedMessage&) = delete;
    UnownedEncodedMessage* operator=(UnownedEncodedMessage&&) = delete;

    zx_status_t status() const { return message_.status(); }
#ifdef __Fuchsia__
    const char* status_string() const { return message_.status_string(); }
#endif  // __Fuchsia__
    bool ok() const { return message_.status() == ZX_OK; }
    std::string FormatDescription() const {
      return message_.FormatDescription();
    }
    const char* lossy_description() const {
      return message_.lossy_description();
    }
    const ::fidl::Result& error() const { return message_.error(); }

    ::fidl::OutgoingMessage& GetOutgoingMessage() { return message_; }

   private:
    ::fidl::internal::IovecBuffer iovecs_;
    ::fidl::OutgoingMessage message_;
  };

  class OwnedEncodedMessage final {
   public:
    explicit OwnedEncodedMessage(SomeProtocolSomeMethodResponse* value)
        : message_(1u, backing_buffer_.data(), backing_buffer_.size(), value) {}
    // Internal constructor.
    explicit OwnedEncodedMessage(
        ::fidl::internal::AllowUnownedInputRef allow_unowned,
        SomeProtocolSomeMethodResponse* value)
        : message_(::fidl::internal::IovecBufferSize, backing_buffer_.data(),
                   backing_buffer_.size(), value) {}
    OwnedEncodedMessage(const OwnedEncodedMessage&) = delete;
    OwnedEncodedMessage(OwnedEncodedMessage&&) = delete;
    OwnedEncodedMessage* operator=(const OwnedEncodedMessage&) = delete;
    OwnedEncodedMessage* operator=(OwnedEncodedMessage&&) = delete;

    zx_status_t status() const { return message_.status(); }
#ifdef __Fuchsia__
    const char* status_string() const { return message_.status_string(); }
#endif  // __Fuchsia__
    bool ok() const { return message_.ok(); }
    std::string FormatDescription() const {
      return message_.FormatDescription();
    }
    const char* lossy_description() const {
      return message_.lossy_description();
    }
    const ::fidl::Result& error() const { return message_.error(); }

    ::fidl::OutgoingMessage& GetOutgoingMessage() {
      return message_.GetOutgoingMessage();
    }

   private:
    ::fidl::internal::InlineMessageBuffer<8> backing_buffer_;
    UnownedEncodedMessage message_;
  };

  class DecodedMessage final : public ::fidl::internal::DecodedMessageBase<
                                   SomeProtocolSomeMethodResponse> {
   public:
    using DecodedMessageBase<
        SomeProtocolSomeMethodResponse>::DecodedMessageBase;

    DecodedMessage(uint8_t* bytes, uint32_t byte_actual,
                   zx_handle_info_t* handles = nullptr,
                   uint32_t handle_actual = 0)
        : DecodedMessageBase(
              ::fidl::internal::kLLCPPInMemoryWireFormatVersion,
              ::fidl::IncomingMessage(
                  bytes, byte_actual, handles, handle_actual,
                  ::fidl::IncomingMessage::kSkipMessageHeaderValidation)) {}

    // Internal constructor for specifying a specific wire format version.
    DecodedMessage(::fidl::internal::WireFormatVersion wire_format_version,
                   uint8_t* bytes, uint32_t byte_actual,
                   zx_handle_info_t* handles = nullptr,
                   uint32_t handle_actual = 0)
        : DecodedMessageBase(
              wire_format_version,
              ::fidl::IncomingMessage(
                  bytes, byte_actual, handles, handle_actual,
                  ::fidl::IncomingMessage::kSkipMessageHeaderValidation)) {}

    DecodedMessage(const fidl_incoming_msg_t* c_msg)
        : DecodedMessage(reinterpret_cast<uint8_t*>(c_msg->bytes),
                         c_msg->num_bytes, c_msg->handles, c_msg->num_handles) {
    }

    // Internal constructor for specifying a specific wire format version.
    DecodedMessage(::fidl::internal::WireFormatVersion wire_format_version,
                   const fidl_incoming_msg_t* c_msg)
        : DecodedMessage(wire_format_version,
                         reinterpret_cast<uint8_t*>(c_msg->bytes),
                         c_msg->num_bytes, c_msg->handles, c_msg->num_handles) {
    }

    SomeProtocolSomeMethodResponse* PrimaryObject() {
      ZX_DEBUG_ASSERT(ok());
      return reinterpret_cast<SomeProtocolSomeMethodResponse*>(bytes());
    }

    // Release the ownership of the decoded message. That means that the handles
    // won't be closed When the object is destroyed. After calling this method,
    // the |DecodedMessage| object should not be used anymore.
    void ReleasePrimaryObject() { ResetBytes(); }
  };
};

}  // namespace wire
__LOCAL extern "C" const fidl_type_t
    fidl_test_anonymous_SomeProtocolSomeMethodRequestTable;

__LOCAL extern "C" const fidl_type_t
    fidl_test_anonymous_SomeProtocolSomeMethodResponseTable;

class SomeProtocol final {
  SomeProtocol() = delete;

 public:
  class SomeMethod final {
    SomeMethod() = delete;
  };
};
}  // namespace fidl_test_anonymous
#ifdef __Fuchsia__

template <>
struct ::fidl::internal::ProtocolDetails<::fidl_test_anonymous::SomeProtocol> {
};
#endif  // __Fuchsia__

#ifdef __Fuchsia__

template <>
struct ::fidl::internal::WireServerDispatcher<
    ::fidl_test_anonymous::SomeProtocol>
    final {
  WireServerDispatcher() = delete;
  static ::fidl::DispatchResult TryDispatch(
      ::fidl::WireServer<::fidl_test_anonymous::SomeProtocol>* impl,
      ::fidl::IncomingMessage& msg, ::fidl::Transaction* txn);
  static ::fidl::DispatchResult Dispatch(
      ::fidl::WireServer<::fidl_test_anonymous::SomeProtocol>* impl,
      ::fidl::IncomingMessage&& msg, ::fidl::Transaction* txn);
};
#endif  // __Fuchsia__

template <>
struct ::fidl::WireRequest<::fidl_test_anonymous::SomeProtocol::SomeMethod>
    final {
  using UnionMember = fidl_test_anonymous::wire::UnionMember;
  using TableMember = fidl_test_anonymous::wire::TableMember;

  FIDL_ALIGNDECL
  fidl_message_header_t _hdr;
  ::fidl_test_anonymous::wire::UnionMember union_member;
  ::fidl_test_anonymous::wire::TableMember table_member;
  explicit WireRequest(zx_txid_t _txid,
                       ::fidl_test_anonymous::wire::UnionMember union_member,
                       ::fidl_test_anonymous::wire::TableMember table_member)
      : union_member(union_member), table_member(table_member) {
    _InitHeader(_txid);
  }
  explicit WireRequest(zx_txid_t _txid) { _InitHeader(_txid); }

  static constexpr const fidl_type_t* Type =
      &::fidl_test_anonymous::
          fidl_test_anonymous_SomeProtocolSomeMethodRequestTable;
  static constexpr uint32_t MaxNumHandles = 0;
  static constexpr uint32_t PrimarySize = 56;
  static constexpr uint32_t MaxOutOfLine = 72;
  static constexpr uint32_t AltPrimarySize = 56;
  static constexpr uint32_t AltMaxOutOfLine = 72;
  static constexpr bool HasFlexibleEnvelope = true;
  static constexpr bool HasPointer = true;
  static constexpr ::fidl::internal::TransactionalMessageKind MessageKind =
      ::fidl::internal::TransactionalMessageKind::kRequest;
  using ResponseType =
      ::fidl::WireResponse<::fidl_test_anonymous::SomeProtocol::SomeMethod>;

  class UnownedEncodedMessage final {
   public:
    UnownedEncodedMessage(uint8_t* _backing_buffer,
                          uint32_t _backing_buffer_size, zx_txid_t _txid,
                          ::fidl_test_anonymous::wire::UnionMember union_member,
                          ::fidl_test_anonymous::wire::TableMember table_member)
        : UnownedEncodedMessage(::fidl::internal::IovecBufferSize,
                                _backing_buffer, _backing_buffer_size, _txid,
                                union_member, table_member) {}
    UnownedEncodedMessage(uint32_t _iovec_capacity, uint8_t* _backing_buffer,
                          uint32_t _backing_buffer_size, zx_txid_t _txid,
                          ::fidl_test_anonymous::wire::UnionMember union_member,
                          ::fidl_test_anonymous::wire::TableMember table_member)
        : message_(::fidl::OutgoingMessage::ConstructorArgs{
              .iovecs = iovecs_,
              .iovec_capacity = _iovec_capacity,
              .backing_buffer = _backing_buffer,
              .backing_buffer_capacity = _backing_buffer_size,
          }) {
      ZX_ASSERT(_iovec_capacity <= std::size(iovecs_));
      FIDL_ALIGNDECL WireRequest _request(_txid, union_member, table_member);
      message_.Encode<WireRequest>(&_request);
    }
    UnownedEncodedMessage(uint8_t* _backing_buffer,
                          uint32_t _backing_buffer_size, WireRequest* request)
        : UnownedEncodedMessage(::fidl::internal::IovecBufferSize,
                                _backing_buffer, _backing_buffer_size,
                                request) {}
    UnownedEncodedMessage(uint32_t _iovec_capacity, uint8_t* _backing_buffer,
                          uint32_t _backing_buffer_size, WireRequest* request)
        : message_(::fidl::OutgoingMessage::ConstructorArgs{
              .iovecs = iovecs_,
              .iovec_capacity = _iovec_capacity,
              .backing_buffer = _backing_buffer,
              .backing_buffer_capacity = _backing_buffer_size,
          }) {
      ZX_ASSERT(_iovec_capacity <= std::size(iovecs_));
      message_.Encode<WireRequest>(request);
    }
    UnownedEncodedMessage(const UnownedEncodedMessage&) = delete;
    UnownedEncodedMessage(UnownedEncodedMessage&&) = delete;
    UnownedEncodedMessage* operator=(const UnownedEncodedMessage&) = delete;
    UnownedEncodedMessage* operator=(UnownedEncodedMessage&&) = delete;

    zx_status_t status() const { return message_.status(); }
#ifdef __Fuchsia__
    const char* status_string() const { return message_.status_string(); }
#endif  // __Fuchsia__
    bool ok() const { return message_.status() == ZX_OK; }
    std::string FormatDescription() const {
      return message_.FormatDescription();
    }
    const char* lossy_description() const {
      return message_.lossy_description();
    }
    const ::fidl::Result& error() const { return message_.error(); }

    ::fidl::OutgoingMessage& GetOutgoingMessage() { return message_; }
#ifdef __Fuchsia__
    template <typename ChannelLike>
    void Write(ChannelLike&& client) {
      message_.Write(std::forward<ChannelLike>(client));
    }
#endif  // __Fuchsia__
   private:
    ::fidl::internal::IovecBuffer iovecs_;
    ::fidl::OutgoingMessage message_;
  };

  class OwnedEncodedMessage final {
   public:
    explicit OwnedEncodedMessage(
        zx_txid_t _txid, ::fidl_test_anonymous::wire::UnionMember union_member,
        ::fidl_test_anonymous::wire::TableMember table_member)
        : message_(1u, backing_buffer_.data(), backing_buffer_.size(), _txid,
                   union_member, table_member) {}
    // Internal constructor.
    explicit OwnedEncodedMessage(
        ::fidl::internal::AllowUnownedInputRef allow_unowned, zx_txid_t _txid,
        ::fidl_test_anonymous::wire::UnionMember union_member,
        ::fidl_test_anonymous::wire::TableMember table_member)
        : message_(::fidl::internal::IovecBufferSize, backing_buffer_.data(),
                   backing_buffer_.size(), _txid, union_member, table_member) {}
    explicit OwnedEncodedMessage(WireRequest* request)
        : message_(1u, backing_buffer_.data(), backing_buffer_.size(),
                   request) {}
    // Internal constructor.
    explicit OwnedEncodedMessage(
        ::fidl::internal::AllowUnownedInputRef allow_unowned,
        WireRequest* request)
        : message_(::fidl::internal::IovecBufferSize, backing_buffer_.data(),
                   backing_buffer_.size(), request) {}
    OwnedEncodedMessage(const OwnedEncodedMessage&) = delete;
    OwnedEncodedMessage(OwnedEncodedMessage&&) = delete;
    OwnedEncodedMessage* operator=(const OwnedEncodedMessage&) = delete;
    OwnedEncodedMessage* operator=(OwnedEncodedMessage&&) = delete;

    zx_status_t status() const { return message_.status(); }
#ifdef __Fuchsia__
    const char* status_string() const { return message_.status_string(); }
#endif  // __Fuchsia__
    bool ok() const { return message_.ok(); }
    std::string FormatDescription() const {
      return message_.FormatDescription();
    }
    const char* lossy_description() const {
      return message_.lossy_description();
    }
    const ::fidl::Result& error() const { return message_.error(); }

    ::fidl::OutgoingMessage& GetOutgoingMessage() {
      return message_.GetOutgoingMessage();
    }
#ifdef __Fuchsia__
    template <typename ChannelLike>
    void Write(ChannelLike&& client) {
      message_.Write(std::forward<ChannelLike>(client));
    }
#endif  // __Fuchsia__
   private:
    ::fidl::internal::InlineMessageBuffer<128> backing_buffer_;
    UnownedEncodedMessage message_;
  };

 public:
  class DecodedMessage final
      : public ::fidl::internal::DecodedMessageBase<::fidl::WireRequest<
            ::fidl_test_anonymous::SomeProtocol::SomeMethod>> {
   public:
    using DecodedMessageBase<::fidl::WireRequest<
        ::fidl_test_anonymous::SomeProtocol::SomeMethod>>::DecodedMessageBase;

    DecodedMessage(uint8_t* bytes, uint32_t byte_actual,
                   zx_handle_info_t* handles = nullptr,
                   uint32_t handle_actual = 0)
        : DecodedMessageBase(::fidl::IncomingMessage(bytes, byte_actual,
                                                     handles, handle_actual)) {}

    ::fidl::WireRequest<::fidl_test_anonymous::SomeProtocol::SomeMethod>*
    PrimaryObject() {
      ZX_DEBUG_ASSERT(ok());
      return reinterpret_cast<::fidl::WireRequest<
          ::fidl_test_anonymous::SomeProtocol::SomeMethod>*>(bytes());
    }

    // Release the ownership of the decoded message. That means that the handles
    // won't be closed When the object is destroyed. After calling this method,
    // the |DecodedMessage| object should not be used anymore.
    void ReleasePrimaryObject() { ResetBytes(); }
  };

 private:
  void _InitHeader(zx_txid_t _txid);
};
template <>
struct ::fidl::WireResponse<::fidl_test_anonymous::SomeProtocol::SomeMethod>
    final {
  using Result = fidl_test_anonymous::wire::SomeProtocolSomeMethodResult;

  FIDL_ALIGNDECL
  fidl_message_header_t _hdr;
  ::fidl_test_anonymous::wire::SomeProtocolSomeMethodResult result;
  explicit WireResponse(
      ::fidl_test_anonymous::wire::SomeProtocolSomeMethodResult result)
      : result(result) {
    _InitHeader();
  }
  WireResponse() { _InitHeader(); }

  static constexpr const fidl_type_t* Type =
      &::fidl_test_anonymous::
          fidl_test_anonymous_SomeProtocolSomeMethodResponseTable;
  static constexpr uint32_t MaxNumHandles = 0;
  static constexpr uint32_t PrimarySize = 40;
  static constexpr uint32_t MaxOutOfLine = 8;
  static constexpr bool HasFlexibleEnvelope = false;
  static constexpr bool HasPointer = true;
  static constexpr ::fidl::internal::TransactionalMessageKind MessageKind =
      ::fidl::internal::TransactionalMessageKind::kResponse;

  class UnownedEncodedMessage final {
   public:
    UnownedEncodedMessage(
        uint8_t* _backing_buffer, uint32_t _backing_buffer_size,
        ::fidl_test_anonymous::wire::SomeProtocolSomeMethodResult result)
        : UnownedEncodedMessage(::fidl::internal::IovecBufferSize,
                                _backing_buffer, _backing_buffer_size, result) {
    }
    UnownedEncodedMessage(
        uint32_t _iovec_capacity, uint8_t* _backing_buffer,
        uint32_t _backing_buffer_size,
        ::fidl_test_anonymous::wire::SomeProtocolSomeMethodResult result)
        : message_(::fidl::OutgoingMessage::ConstructorArgs{
              .iovecs = iovecs_,
              .iovec_capacity = _iovec_capacity,
              .backing_buffer = _backing_buffer,
              .backing_buffer_capacity = _backing_buffer_size,
          }) {
      ZX_ASSERT(_iovec_capacity <= std::size(iovecs_));
      FIDL_ALIGNDECL WireResponse _response{result};
      message_.Encode<::fidl::WireResponse<
          ::fidl_test_anonymous::SomeProtocol::SomeMethod>>(&_response);
    }
    UnownedEncodedMessage(uint8_t* _backing_buffer,
                          uint32_t _backing_buffer_size, WireResponse* response)
        : UnownedEncodedMessage(::fidl::internal::IovecBufferSize,
                                _backing_buffer, _backing_buffer_size,
                                response) {}
    UnownedEncodedMessage(uint32_t _iovec_capacity, uint8_t* _backing_buffer,
                          uint32_t _backing_buffer_size, WireResponse* response)
        : message_(::fidl::OutgoingMessage::ConstructorArgs{
              .iovecs = iovecs_,
              .iovec_capacity = _iovec_capacity,
              .backing_buffer = _backing_buffer,
              .backing_buffer_capacity = _backing_buffer_size,
          }) {
      ZX_ASSERT(_iovec_capacity <= std::size(iovecs_));
      message_.Encode<::fidl::WireResponse<
          ::fidl_test_anonymous::SomeProtocol::SomeMethod>>(response);
    }
    UnownedEncodedMessage(const UnownedEncodedMessage&) = delete;
    UnownedEncodedMessage(UnownedEncodedMessage&&) = delete;
    UnownedEncodedMessage* operator=(const UnownedEncodedMessage&) = delete;
    UnownedEncodedMessage* operator=(UnownedEncodedMessage&&) = delete;

    zx_status_t status() const { return message_.status(); }
#ifdef __Fuchsia__
    const char* status_string() const { return message_.status_string(); }
#endif  // __Fuchsia__
    bool ok() const { return message_.status() == ZX_OK; }
    std::string FormatDescription() const {
      return message_.FormatDescription();
    }
    const char* lossy_description() const {
      return message_.lossy_description();
    }
    const ::fidl::Result& error() const { return message_.error(); }

    ::fidl::OutgoingMessage& GetOutgoingMessage() { return message_; }
#ifdef __Fuchsia__
    template <typename ChannelLike>
    void Write(ChannelLike&& client) {
      message_.Write(std::forward<ChannelLike>(client));
    }
#endif  // __Fuchsia__
   private:
    ::fidl::internal::IovecBuffer iovecs_;
    ::fidl::OutgoingMessage message_;
  };

  class OwnedEncodedMessage final {
   public:
    explicit OwnedEncodedMessage(
        ::fidl_test_anonymous::wire::SomeProtocolSomeMethodResult result)
        : message_(1u, backing_buffer_.data(), backing_buffer_.size(), result) {
    }
    // Internal constructor.
    explicit OwnedEncodedMessage(
        ::fidl::internal::AllowUnownedInputRef allow_unowned,
        ::fidl_test_anonymous::wire::SomeProtocolSomeMethodResult result)
        : message_(::fidl::internal::IovecBufferSize, backing_buffer_.data(),
                   backing_buffer_.size(), result) {}
    explicit OwnedEncodedMessage(
        ::fidl::WireResponse<::fidl_test_anonymous::SomeProtocol::SomeMethod>*
            response)
        : message_(1u, backing_buffer_.data(), backing_buffer_.size(),
                   response) {}
    // Internal constructor.
    explicit OwnedEncodedMessage(
        ::fidl::internal::AllowUnownedInputRef allow_unowned,
        ::fidl::WireResponse<::fidl_test_anonymous::SomeProtocol::SomeMethod>*
            response)
        : message_(::fidl::internal::IovecBufferSize, backing_buffer_.data(),
                   backing_buffer_.size(), response) {}
    OwnedEncodedMessage(const OwnedEncodedMessage&) = delete;
    OwnedEncodedMessage(OwnedEncodedMessage&&) = delete;
    OwnedEncodedMessage* operator=(const OwnedEncodedMessage&) = delete;
    OwnedEncodedMessage* operator=(OwnedEncodedMessage&&) = delete;

    zx_status_t status() const { return message_.status(); }
#ifdef __Fuchsia__
    const char* status_string() const { return message_.status_string(); }
#endif  // __Fuchsia__
    bool ok() const { return message_.ok(); }
    std::string FormatDescription() const {
      return message_.FormatDescription();
    }
    const char* lossy_description() const {
      return message_.lossy_description();
    }
    const ::fidl::Result& error() const { return message_.error(); }

    ::fidl::OutgoingMessage& GetOutgoingMessage() {
      return message_.GetOutgoingMessage();
    }
#ifdef __Fuchsia__
    template <typename ChannelLike>
    void Write(ChannelLike&& client) {
      message_.Write(std::forward<ChannelLike>(client));
    }
#endif  // __Fuchsia__
   private:
    ::fidl::internal::InlineMessageBuffer<48> backing_buffer_;
    UnownedEncodedMessage message_;
  };

 public:
  class DecodedMessage final
      : public ::fidl::internal::DecodedMessageBase<::fidl::WireResponse<
            ::fidl_test_anonymous::SomeProtocol::SomeMethod>> {
   public:
    using DecodedMessageBase<::fidl::WireResponse<
        ::fidl_test_anonymous::SomeProtocol::SomeMethod>>::DecodedMessageBase;

    DecodedMessage(uint8_t* bytes, uint32_t byte_actual,
                   zx_handle_info_t* handles = nullptr,
                   uint32_t handle_actual = 0)
        : DecodedMessageBase(::fidl::IncomingMessage(bytes, byte_actual,
                                                     handles, handle_actual)) {}

    ::fidl::WireResponse<::fidl_test_anonymous::SomeProtocol::SomeMethod>*
    PrimaryObject() {
      ZX_DEBUG_ASSERT(ok());
      return reinterpret_cast<::fidl::WireResponse<
          ::fidl_test_anonymous::SomeProtocol::SomeMethod>*>(bytes());
    }

    // Release the ownership of the decoded message. That means that the handles
    // won't be closed When the object is destroyed. After calling this method,
    // the |DecodedMessage| object should not be used anymore.
    void ReleasePrimaryObject() { ResetBytes(); }
  };

 private:
  void _InitHeader();
};
#ifdef __Fuchsia__

template <>
class ::fidl::WireResult<::fidl_test_anonymous::SomeProtocol::SomeMethod> final
    : public ::fidl::Result {
 public:
  explicit WireResult(
      ::fidl::UnownedClientEnd<::fidl_test_anonymous::SomeProtocol> _client,
      ::fidl_test_anonymous::wire::UnionMember union_member,
      ::fidl_test_anonymous::wire::TableMember table_member);
  WireResult(
      ::fidl::UnownedClientEnd<::fidl_test_anonymous::SomeProtocol> _client,
      ::fidl_test_anonymous::wire::UnionMember union_member,
      ::fidl_test_anonymous::wire::TableMember table_member,
      zx_time_t _deadline);
  explicit WireResult(const ::fidl::Result& result) : ::fidl::Result(result) {}
  WireResult(WireResult&&) = delete;
  WireResult(const WireResult&) = delete;
  WireResult* operator=(WireResult&&) = delete;
  WireResult* operator=(const WireResult&) = delete;
  ~WireResult() = default;

  ::fidl::WireResponse<::fidl_test_anonymous::SomeProtocol::SomeMethod>*
  Unwrap() {
    ZX_DEBUG_ASSERT(ok());
    return reinterpret_cast<
        ::fidl::WireResponse<::fidl_test_anonymous::SomeProtocol::SomeMethod>*>(
        bytes_.data());
  }
  const ::fidl::WireResponse<::fidl_test_anonymous::SomeProtocol::SomeMethod>*
  Unwrap() const {
    ZX_DEBUG_ASSERT(ok());
    return reinterpret_cast<const ::fidl::WireResponse<
        ::fidl_test_anonymous::SomeProtocol::SomeMethod>*>(bytes_.data());
  }

  ::fidl::WireResponse<::fidl_test_anonymous::SomeProtocol::SomeMethod>&
  value() {
    return *Unwrap();
  }
  const ::fidl::WireResponse<::fidl_test_anonymous::SomeProtocol::SomeMethod>&
  value() const {
    return *Unwrap();
  }

  ::fidl::WireResponse<::fidl_test_anonymous::SomeProtocol::SomeMethod>*
  operator->() {
    return &value();
  }
  const ::fidl::WireResponse<::fidl_test_anonymous::SomeProtocol::SomeMethod>*
  operator->() const {
    return &value();
  }

  ::fidl::WireResponse<::fidl_test_anonymous::SomeProtocol::SomeMethod>&
  operator*() {
    return value();
  }
  const ::fidl::WireResponse<::fidl_test_anonymous::SomeProtocol::SomeMethod>&
  operator*() const {
    return value();
  }

 private:
  ::fidl::internal::InlineMessageBuffer<48> bytes_;
};
template <>
class ::fidl::WireUnownedResult<::fidl_test_anonymous::SomeProtocol::SomeMethod>
    final : public ::fidl::Result {
 public:
  explicit WireUnownedResult(
      ::fidl::UnownedClientEnd<::fidl_test_anonymous::SomeProtocol> _client,
      uint8_t* _request_bytes, uint32_t _request_byte_capacity,
      ::fidl_test_anonymous::wire::UnionMember union_member,
      ::fidl_test_anonymous::wire::TableMember table_member,
      uint8_t* _response_bytes, uint32_t _response_byte_capacity);
  explicit WireUnownedResult(const ::fidl::Result& result)
      : ::fidl::Result(result) {}
  explicit WireUnownedResult(
      ::fidl::DecodedMessage<::fidl::WireResponse<
          ::fidl_test_anonymous::SomeProtocol::SomeMethod>>&& decoded)
      : ::fidl::Result(decoded) {
    if (decoded.ok()) {
      bytes_ = reinterpret_cast<uint8_t*>(decoded.PrimaryObject());
    } else {
      bytes_ = nullptr;
    }
    decoded.ReleasePrimaryObject();
  }
  WireUnownedResult(WireUnownedResult&&) = delete;
  WireUnownedResult(const WireUnownedResult&) = delete;
  WireUnownedResult* operator=(WireUnownedResult&&) = delete;
  WireUnownedResult* operator=(const WireUnownedResult&) = delete;
  ~WireUnownedResult() = default;

  ::fidl::WireResponse<::fidl_test_anonymous::SomeProtocol::SomeMethod>*
  Unwrap() {
    ZX_DEBUG_ASSERT(ok());
    return reinterpret_cast<
        ::fidl::WireResponse<::fidl_test_anonymous::SomeProtocol::SomeMethod>*>(
        bytes_);
  }
  const ::fidl::WireResponse<::fidl_test_anonymous::SomeProtocol::SomeMethod>*
  Unwrap() const {
    ZX_DEBUG_ASSERT(ok());
    return reinterpret_cast<const ::fidl::WireResponse<
        ::fidl_test_anonymous::SomeProtocol::SomeMethod>*>(bytes_);
  }

  ::fidl::WireResponse<::fidl_test_anonymous::SomeProtocol::SomeMethod>&
  value() {
    return *Unwrap();
  }
  const ::fidl::WireResponse<::fidl_test_anonymous::SomeProtocol::SomeMethod>&
  value() const {
    return *Unwrap();
  }

  ::fidl::WireResponse<::fidl_test_anonymous::SomeProtocol::SomeMethod>*
  operator->() {
    return &value();
  }
  const ::fidl::WireResponse<::fidl_test_anonymous::SomeProtocol::SomeMethod>*
  operator->() const {
    return &value();
  }

  ::fidl::WireResponse<::fidl_test_anonymous::SomeProtocol::SomeMethod>&
  operator*() {
    return value();
  }
  const ::fidl::WireResponse<::fidl_test_anonymous::SomeProtocol::SomeMethod>&
  operator*() const {
    return value();
  }

 private:
  uint8_t* bytes_;
};

// Methods to make a sync FIDL call directly on an unowned channel or a
// const reference to a |fidl::ClientEnd<::fidl_test_anonymous::SomeProtocol>|,
// avoiding setting up a client.
template <>
class ::fidl::internal::WireCaller<::fidl_test_anonymous::SomeProtocol> final {
 public:
  explicit WireCaller(
      ::fidl::UnownedClientEnd<::fidl_test_anonymous::SomeProtocol> client_end)
      : client_end_(client_end) {}

  // Allocates 176 bytes of message buffer on the stack. No heap allocation
  // necessary.
  static ::fidl::WireResult<::fidl_test_anonymous::SomeProtocol::SomeMethod>
  SomeMethod(
      ::fidl::UnownedClientEnd<::fidl_test_anonymous::SomeProtocol> _client_end,
      ::fidl_test_anonymous::wire::UnionMember union_member,
      ::fidl_test_anonymous::wire::TableMember table_member) {
    return ::fidl::WireResult<::fidl_test_anonymous::SomeProtocol::SomeMethod>(
        _client_end, union_member, table_member);
  }
  // Allocates 176 bytes of message buffer on the stack. No heap allocation
  // necessary.
  ::fidl::WireResult<::fidl_test_anonymous::SomeProtocol::SomeMethod>
  SomeMethod(::fidl_test_anonymous::wire::UnionMember union_member,
             ::fidl_test_anonymous::wire::TableMember table_member) && {
    return ::fidl::WireResult<::fidl_test_anonymous::SomeProtocol::SomeMethod>(
        client_end_, union_member, table_member);
  }

  // Caller provides the backing storage for FIDL message via request and
  // response buffers.
  static ::fidl::WireUnownedResult<
      ::fidl_test_anonymous::SomeProtocol::SomeMethod>
  SomeMethod(
      ::fidl::UnownedClientEnd<::fidl_test_anonymous::SomeProtocol> _client_end,
      ::fidl::BufferSpan _request_buffer,
      ::fidl_test_anonymous::wire::UnionMember union_member,
      ::fidl_test_anonymous::wire::TableMember table_member,
      ::fidl::BufferSpan _response_buffer) {
    return ::fidl::WireUnownedResult<
        ::fidl_test_anonymous::SomeProtocol::SomeMethod>(
        _client_end, _request_buffer.data, _request_buffer.capacity,
        union_member, table_member, _response_buffer.data,
        _response_buffer.capacity);
  }
  // Caller provides the backing storage for FIDL message via request and
  // response buffers.
  ::fidl::WireUnownedResult<::fidl_test_anonymous::SomeProtocol::SomeMethod>
  SomeMethod(::fidl::BufferSpan _request_buffer,
             ::fidl_test_anonymous::wire::UnionMember union_member,
             ::fidl_test_anonymous::wire::TableMember table_member,
             ::fidl::BufferSpan _response_buffer) && {
    return ::fidl::WireUnownedResult<
        ::fidl_test_anonymous::SomeProtocol::SomeMethod>(
        client_end_, _request_buffer.data, _request_buffer.capacity,
        union_member, table_member, _response_buffer.data,
        _response_buffer.capacity);
  }

 private:
  ::fidl::UnownedClientEnd<::fidl_test_anonymous::SomeProtocol> client_end_;
};
template <>
class ::fidl::internal::WireEventHandlerInterface<
    ::fidl_test_anonymous::SomeProtocol> {
 public:
  WireEventHandlerInterface() = default;
  virtual ~WireEventHandlerInterface() = default;
};

template <>
class ::fidl::WireAsyncEventHandler<::fidl_test_anonymous::SomeProtocol>
    : public ::fidl::internal::WireEventHandlerInterface<
          ::fidl_test_anonymous::SomeProtocol>,
      public ::fidl::internal::AsyncEventHandler {
 public:
  WireAsyncEventHandler() = default;
};

template <>
class ::fidl::WireSyncEventHandler<::fidl_test_anonymous::SomeProtocol>
    : public ::fidl::internal::WireEventHandlerInterface<
          ::fidl_test_anonymous::SomeProtocol> {
 public:
  WireSyncEventHandler() = default;

  // Method called when an unknown event is found. This methods gives the status
  // which, in this case, is returned by HandleOneEvent.
  virtual zx_status_t Unknown() = 0;

  // Handle all possible events defined in this protocol.
  // Blocks to consume exactly one message from the channel, then call the
  // corresponding virtual method.
  ::fidl::Result HandleOneEvent(
      ::fidl::UnownedClientEnd<::fidl_test_anonymous::SomeProtocol> client_end);
};
template <>
class ::fidl::WireSyncClient<::fidl_test_anonymous::SomeProtocol> final {
 public:
  WireSyncClient() = default;

  explicit WireSyncClient(
      ::fidl::ClientEnd<::fidl_test_anonymous::SomeProtocol> client_end)
      : client_end_(std::move(client_end)) {}

  ~WireSyncClient() = default;
  WireSyncClient(WireSyncClient&&) = default;
  WireSyncClient& operator=(WireSyncClient&&) = default;

  const ::fidl::ClientEnd<::fidl_test_anonymous::SomeProtocol>& client_end()
      const {
    return client_end_;
  }
  ::fidl::ClientEnd<::fidl_test_anonymous::SomeProtocol>& client_end() {
    return client_end_;
  }

  const ::zx::channel& channel() const { return client_end_.channel(); }
  ::zx::channel* mutable_channel() { return &client_end_.channel(); }

  // Allocates 176 bytes of message buffer on the stack. No heap allocation
  // necessary.
  ::fidl::WireResult<::fidl_test_anonymous::SomeProtocol::SomeMethod>
  SomeMethod(::fidl_test_anonymous::wire::UnionMember union_member,
             ::fidl_test_anonymous::wire::TableMember table_member) {
    return ::fidl::WireResult<::fidl_test_anonymous::SomeProtocol::SomeMethod>(
        this->client_end(), union_member, table_member);
  }

  // Caller provides the backing storage for FIDL message via request and
  // response buffers.
  ::fidl::WireUnownedResult<::fidl_test_anonymous::SomeProtocol::SomeMethod>
  SomeMethod(::fidl::BufferSpan _request_buffer,
             ::fidl_test_anonymous::wire::UnionMember union_member,
             ::fidl_test_anonymous::wire::TableMember table_member,
             ::fidl::BufferSpan _response_buffer) {
    return ::fidl::WireUnownedResult<
        ::fidl_test_anonymous::SomeProtocol::SomeMethod>(
        this->client_end(), _request_buffer.data, _request_buffer.capacity,
        union_member, table_member, _response_buffer.data,
        _response_buffer.capacity);
  }

 private:
  ::fidl::ClientEnd<::fidl_test_anonymous::SomeProtocol> client_end_;
};

template <>
class ::fidl::internal::WireCompleterBase<
    ::fidl_test_anonymous::SomeProtocol::SomeMethod>
    : public ::fidl::CompleterBase {
 public:
  // In the following methods, the return value indicates internal errors during
  // the reply, such as encoding or writing to the transport.
  // Note that any error will automatically lead to the destruction of the
  // binding, after which the |on_unbound| callback will be triggered with a
  // detailed reason.
  //
  // See //zircon/system/ulib/fidl/include/lib/fidl/llcpp/server.h.
  //
  // Because the reply status is identical to the unbinding status, it can be
  // safely ignored.
  ::fidl::Result Reply(
      ::fidl_test_anonymous::wire::SomeProtocolSomeMethodResult result);
  ::fidl::Result ReplySuccess(
      ::fidl_test_anonymous::wire::BitsMember bits_member);
  ::fidl::Result ReplyError(
      ::fidl_test_anonymous::wire::SomeProtocolSomeMethodError error);
  ::fidl::Result Reply(
      ::fidl::BufferSpan _buffer,
      ::fidl_test_anonymous::wire::SomeProtocolSomeMethodResult result);
  ::fidl::Result ReplySuccess(
      ::fidl::BufferSpan _buffer,
      ::fidl_test_anonymous::wire::BitsMember bits_member);

 protected:
  using ::fidl::CompleterBase::CompleterBase;
};

template <>
struct ::fidl::internal::WireMethodTypes<
    ::fidl_test_anonymous::SomeProtocol::SomeMethod> {
  using Completer = fidl::Completer<::fidl::internal::WireCompleterBase<
      ::fidl_test_anonymous::SomeProtocol::SomeMethod>>;
};

// Pure-virtual interface to be implemented by a server.
// This interface uses typed channels (i.e. |fidl::ClientEnd<SomeProtocol>|
// and |fidl::ServerEnd<SomeProtocol>|).
template <>
class ::fidl::WireServer<::fidl_test_anonymous::SomeProtocol>
    : public ::fidl::internal::IncomingMessageDispatcher {
 public:
  WireServer() = default;
  virtual ~WireServer() = default;

  // The FIDL protocol type that is implemented by this server.
  using _EnclosingProtocol = ::fidl_test_anonymous::SomeProtocol;

  using SomeMethodCompleter = ::fidl::internal::WireCompleter<
      ::fidl_test_anonymous::SomeProtocol::SomeMethod>;
  using SomeMethodRequestView = ::fidl::internal::WireRequestView<
      ::fidl_test_anonymous::SomeProtocol::SomeMethod>;

  virtual void SomeMethod(SomeMethodRequestView request,
                          SomeMethodCompleter::Sync& _completer) = 0;

 private:
  ::fidl::DispatchResult dispatch_message(::fidl::IncomingMessage&& msg,
                                          ::fidl::Transaction* txn) final;
};
#endif  // __Fuchsia__

namespace fidl {

template <>
struct IsFidlType<::fidl_test_anonymous::wire::UnionMember>
    : public std::true_type {};
template <>
struct IsUnion<::fidl_test_anonymous::wire::UnionMember>
    : public std::true_type {};
static_assert(
    std::is_standard_layout_v<::fidl_test_anonymous::wire::UnionMember>);

template <>
struct IsFidlType<::fidl_test_anonymous::wire::TableData>
    : public std::true_type {};
template <>
struct IsStruct<::fidl_test_anonymous::wire::TableData>
    : public std::true_type {};
static_assert(
    std::is_standard_layout_v<::fidl_test_anonymous::wire::TableData>);
static_assert(offsetof(::fidl_test_anonymous::wire::TableData, data) == 0);
static_assert(sizeof(::fidl_test_anonymous::wire::TableData) ==
              ::fidl_test_anonymous::wire::TableData::PrimarySize);

template <>
struct IsFidlType<::fidl_test_anonymous::wire::TableMember>
    : public std::true_type {};
template <>
struct IsTable<::fidl_test_anonymous::wire::TableMember>
    : public std::true_type {};
static_assert(
    std::is_standard_layout_v<::fidl_test_anonymous::wire::TableMember>);

template <>
struct IsFidlType<::fidl_test_anonymous::wire::SomeProtocolSomeMethodError>
    : public std::true_type {};

template <>
struct IsFidlType<::fidl_test_anonymous::wire::Op> : public std::true_type {};

template <>
struct IsFidlType<::fidl_test_anonymous::wire::BinOp> : public std::true_type {
};
template <>
struct IsStruct<::fidl_test_anonymous::wire::BinOp> : public std::true_type {};
static_assert(std::is_standard_layout_v<::fidl_test_anonymous::wire::BinOp>);
static_assert(offsetof(::fidl_test_anonymous::wire::BinOp, op) == 0);
static_assert(offsetof(::fidl_test_anonymous::wire::BinOp, left) == 8);
static_assert(offsetof(::fidl_test_anonymous::wire::BinOp, right) == 32);
static_assert(sizeof(::fidl_test_anonymous::wire::BinOp) ==
              ::fidl_test_anonymous::wire::BinOp::PrimarySize);

template <>
struct IsFidlType<::fidl_test_anonymous::wire::Flags> : public std::true_type {
};
static_assert(std::is_standard_layout_v<::fidl_test_anonymous::wire::Flags>);
static_assert(sizeof(::fidl_test_anonymous::wire::Flags) == sizeof(uint16_t));

template <>
struct IsFidlType<::fidl_test_anonymous::wire::FunctionApplication>
    : public std::true_type {};
template <>
struct IsTable<::fidl_test_anonymous::wire::FunctionApplication>
    : public std::true_type {};
static_assert(std::is_standard_layout_v<
              ::fidl_test_anonymous::wire::FunctionApplication>);

template <>
struct IsFidlType<::fidl_test_anonymous::wire::Expression>
    : public std::true_type {};
template <>
struct IsUnion<::fidl_test_anonymous::wire::Expression>
    : public std::true_type {};
static_assert(
    std::is_standard_layout_v<::fidl_test_anonymous::wire::Expression>);

template <>
struct IsFidlType<::fidl_test_anonymous::wire::BitsMember>
    : public std::true_type {};
static_assert(
    std::is_standard_layout_v<::fidl_test_anonymous::wire::BitsMember>);
static_assert(sizeof(::fidl_test_anonymous::wire::BitsMember) ==
              sizeof(uint32_t));

template <>
struct IsFidlType<::fidl_test_anonymous::wire::SomeProtocolSomeMethodResponse>
    : public std::true_type {};
template <>
struct IsStruct<::fidl_test_anonymous::wire::SomeProtocolSomeMethodResponse>
    : public std::true_type {};
static_assert(std::is_standard_layout_v<
              ::fidl_test_anonymous::wire::SomeProtocolSomeMethodResponse>);
static_assert(
    offsetof(::fidl_test_anonymous::wire::SomeProtocolSomeMethodResponse,
             bits_member) == 0);
static_assert(
    sizeof(::fidl_test_anonymous::wire::SomeProtocolSomeMethodResponse) ==
    ::fidl_test_anonymous::wire::SomeProtocolSomeMethodResponse::PrimarySize);

template <>
struct IsFidlType<::fidl_test_anonymous::wire::SomeProtocolSomeMethodResult>
    : public std::true_type {};
template <>
struct IsUnion<::fidl_test_anonymous::wire::SomeProtocolSomeMethodResult>
    : public std::true_type {};
static_assert(std::is_standard_layout_v<
              ::fidl_test_anonymous::wire::SomeProtocolSomeMethodResult>);

template <>
struct IsFidlType<
    ::fidl::WireRequest<::fidl_test_anonymous::SomeProtocol::SomeMethod>>
    : public std::true_type {};
template <>
struct IsFidlMessage<
    ::fidl::WireRequest<::fidl_test_anonymous::SomeProtocol::SomeMethod>>
    : public std::true_type {};
static_assert(
    sizeof(
        ::fidl::WireRequest<::fidl_test_anonymous::SomeProtocol::SomeMethod>) ==
    ::fidl::WireRequest<
        ::fidl_test_anonymous::SomeProtocol::SomeMethod>::PrimarySize);
static_assert(
    offsetof(
        ::fidl::WireRequest<::fidl_test_anonymous::SomeProtocol::SomeMethod>,
        union_member) == 16);
static_assert(
    offsetof(
        ::fidl::WireRequest<::fidl_test_anonymous::SomeProtocol::SomeMethod>,
        table_member) == 40);

template <>
struct IsFidlType<
    ::fidl::WireResponse<::fidl_test_anonymous::SomeProtocol::SomeMethod>>
    : public std::true_type {};
template <>
struct IsFidlMessage<
    ::fidl::WireResponse<::fidl_test_anonymous::SomeProtocol::SomeMethod>>
    : public std::true_type {};
static_assert(
    sizeof(::fidl::WireResponse<
           ::fidl_test_anonymous::SomeProtocol::SomeMethod>) ==
    ::fidl::WireResponse<
        ::fidl_test_anonymous::SomeProtocol::SomeMethod>::PrimarySize);
static_assert(
    offsetof(
        ::fidl::WireResponse<::fidl_test_anonymous::SomeProtocol::SomeMethod>,
        result) == 16);
}  // namespace fidl
#ifdef __Fuchsia__

template <>
class ::fidl::WireResponseContext<
    ::fidl_test_anonymous::SomeProtocol::SomeMethod>
    : public ::fidl::internal::ResponseContext {
 public:
  WireResponseContext();

  virtual void OnResult(
      ::fidl::WireUnownedResult<
          ::fidl_test_anonymous::SomeProtocol::SomeMethod>&& result) = 0;

 private:
  ::cpp17::optional<::fidl::UnbindInfo> OnRawResult(
      ::fidl::IncomingMessage&& msg) override;
};
#endif  // __Fuchsia__

#ifdef __Fuchsia__

template <>
class ::fidl::internal::WireClientImpl<::fidl_test_anonymous::SomeProtocol>
    final : public ::fidl::internal::ClientBase {
 public:
  // Asynchronous variant of |SomeProtocol.SomeMethod()|.
  // Allocates 128 bytes of request buffer on the stack. The callback is stored
  // on the heap.
  ::fidl::Result SomeMethod(
      ::fidl_test_anonymous::wire::UnionMember union_member,
      ::fidl_test_anonymous::wire::TableMember table_member,
      ::fit::callback<void(
          ::fidl::WireResponse<::fidl_test_anonymous::SomeProtocol::SomeMethod>*
              response)>
          _cb);

  // Asynchronous variant of |SomeProtocol.SomeMethod()|.
  // Caller provides the backing storage for FIDL message via request buffer.
  // Ownership of |_context| is given unsafely to the binding until |OnError|
  // or |OnReply| are called on it.
  ::fidl::Result SomeMethod(
      ::fidl::BufferSpan _request_buffer,
      ::fidl_test_anonymous::wire::UnionMember union_member,
      ::fidl_test_anonymous::wire::TableMember table_member,
      ::fidl::WireResponseContext<
          ::fidl_test_anonymous::SomeProtocol::SomeMethod>* _context);

  // Synchronous variant of |SomeProtocol.SomeMethod()|.
  // Allocates 176 bytes of message buffer on the stack. No heap allocation
  // necessary.
  ::fidl::WireResult<::fidl_test_anonymous::SomeProtocol::SomeMethod>
  SomeMethod_Sync(::fidl_test_anonymous::wire::UnionMember union_member,
                  ::fidl_test_anonymous::wire::TableMember table_member);

  // Synchronous variant of |SomeProtocol.SomeMethod()|.
  // Caller provides the backing storage for FIDL message via request and
  // response buffers.
  ::fidl::WireUnownedResult<::fidl_test_anonymous::SomeProtocol::SomeMethod>
  SomeMethod_Sync(::fidl::BufferSpan _request_buffer,
                  ::fidl_test_anonymous::wire::UnionMember union_member,
                  ::fidl_test_anonymous::wire::TableMember table_member,
                  ::fidl::BufferSpan _response_buffer);

  WireClientImpl() = default;

 private:
  std::optional<::fidl::UnbindInfo> DispatchEvent(
      ::fidl::IncomingMessage& msg,
      ::fidl::internal::AsyncEventHandler* maybe_event_handler) override;
};
#endif  // __Fuchsia__

#ifdef __Fuchsia__
// |EventSender| owns a server endpoint of a channel speaking
// the SomeProtocol protocol, and can send events in that protocol.
template <>
class ::fidl::WireEventSender<::fidl_test_anonymous::SomeProtocol> {
 public:
  // Constructs an event sender with an invalid channel.
  WireEventSender() = default;

  explicit WireEventSender(
      ::fidl::ServerEnd<::fidl_test_anonymous::SomeProtocol> server_end)
      : server_end_(std::move(server_end)) {}

  // The underlying server channel endpoint, which may be replaced at run-time.
  const ::fidl::ServerEnd<::fidl_test_anonymous::SomeProtocol>& server_end()
      const {
    return server_end_;
  }
  ::fidl::ServerEnd<::fidl_test_anonymous::SomeProtocol>& server_end() {
    return server_end_;
  }

  const ::zx::channel& channel() const { return server_end_.channel(); }
  ::zx::channel& channel() { return server_end_.channel(); }

  // Whether the underlying channel is valid.
  bool is_valid() const { return server_end_.is_valid(); }

 private:
  ::fidl::ServerEnd<::fidl_test_anonymous::SomeProtocol> server_end_;
};

template <>
class ::fidl::internal::WireWeakEventSender<
    ::fidl_test_anonymous::SomeProtocol> {
 public:
 private:
  friend class ::fidl::ServerBindingRef<::fidl_test_anonymous::SomeProtocol>;

  explicit WireWeakEventSender(
      std::weak_ptr<::fidl::internal::AsyncServerBinding<
          ::fidl_test_anonymous::SomeProtocol>>
          binding)
      : binding_(std::move(binding)) {}

  std::weak_ptr<
      ::fidl::internal::AsyncServerBinding<::fidl_test_anonymous::SomeProtocol>>
      binding_;
};
#endif  // __Fuchsia__
