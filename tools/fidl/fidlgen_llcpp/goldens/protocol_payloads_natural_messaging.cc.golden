// WARNING: This file is machine generated by fidlgen_llcpp.

#include <fidl/test.protocolpayloads/cpp/natural_messaging.h>

namespace test_protocolpayloads {
[[maybe_unused]] constexpr inline uint64_t
    kMainProtocol_OneWayComposed_Ordinal = 2602591870026304272lu;

[[maybe_unused]] constexpr inline uint64_t
    kMainProtocol_TwoWayComposed_Ordinal = 2542459230546612144lu;

[[maybe_unused]] constexpr inline uint64_t
    kMainProtocol_TwoWayComposedWithError_Ordinal = 7681984876526769495lu;

[[maybe_unused]] constexpr inline uint64_t kMainProtocol_OnComposed_Ordinal =
    1872339328378152762lu;

[[maybe_unused]] constexpr inline uint64_t
    kMainProtocol_OnComposedWithError_Ordinal = 7167282778061495960lu;

[[maybe_unused]] constexpr inline uint64_t kMainProtocol_OneWayLocal_Ordinal =
    7755175439334311701lu;

[[maybe_unused]] constexpr inline uint64_t kMainProtocol_TwoWayLocal_Ordinal =
    8374292137648566031lu;

[[maybe_unused]] constexpr inline uint64_t
    kMainProtocol_TwoWayLocalWithError_Ordinal = 2898559119954589948lu;

[[maybe_unused]] constexpr inline uint64_t kMainProtocol_OnLocal_Ordinal =
    5135782819583756313lu;

[[maybe_unused]] constexpr inline uint64_t
    kMainProtocol_OnLocalWithError_Ordinal = 5678277415565140399lu;

[[maybe_unused]] constexpr inline uint64_t kMainProtocol_OneWayImport_Ordinal =
    3344777159365288972lu;

[[maybe_unused]] constexpr inline uint64_t kMainProtocol_TwoWayImport_Ordinal =
    2374708679656510579lu;

[[maybe_unused]] constexpr inline uint64_t
    kMainProtocol_TwoWayImportWithError_Ordinal = 4286143084949642173lu;

[[maybe_unused]] constexpr inline uint64_t kMainProtocol_OnImport_Ordinal =
    1996489653379631369lu;

[[maybe_unused]] constexpr inline uint64_t
    kMainProtocol_OnImportWithError_Ordinal = 7102941407914553861lu;

[[maybe_unused]] constexpr inline uint64_t kMainProtocol_OneWayAnon_Ordinal =
    811587311021806764lu;

[[maybe_unused]] constexpr inline uint64_t kMainProtocol_TwoWayAnon_Ordinal =
    629880979996923737lu;

[[maybe_unused]] constexpr inline uint64_t
    kMainProtocol_TwoWayAnonWithError_Ordinal = 6368863385719175734lu;

[[maybe_unused]] constexpr inline uint64_t kMainProtocol_OnAnon_Ordinal =
    4815229650203439104lu;

[[maybe_unused]] constexpr inline uint64_t
    kMainProtocol_OnAnonWithError_Ordinal = 5024931894357412354lu;

#ifdef __Fuchsia__
}  // namespace test_protocolpayloads
void fidl::internal::NaturalClientImpl<::test_protocolpayloads::MainProtocol>::
    TwoWayComposed(
        ::fidl::Request<::test_protocolpayloads::MainProtocol::TwoWayComposed>
            request,
        ::fidl::ClientCallback<
            ::test_protocolpayloads::MainProtocol::TwoWayComposed>&& _callback)
        const {
  ::fidl::internal::NaturalMessageEncoder _encoder{
      &::fidl::internal::ChannelTransport::VTable,
      ::test_protocolpayloads::kMainProtocol_TwoWayComposed_Ordinal};
  return messenger().TwoWay(
      _encoder.EncodeTransactionalMessage(
          ::fidl::internal::NaturalMessageConverter<::fidl::Request<
              ::test_protocolpayloads::MainProtocol::TwoWayComposed>>::
              IntoDomainObject(std::move(request))),
      ::fidl::internal::MakeResponseContext<
          ::test_protocolpayloads::MainProtocol::TwoWayComposed>(
          ::test_protocolpayloads::kMainProtocol_TwoWayComposed_Ordinal,
          std::move(_callback)));
}

void fidl::internal::NaturalClientImpl<::test_protocolpayloads::MainProtocol>::
    TwoWayComposedWithError(
        ::fidl::Request<
            ::test_protocolpayloads::MainProtocol::TwoWayComposedWithError>
            request,
        ::fidl::ClientCallback<
            ::test_protocolpayloads::MainProtocol::TwoWayComposedWithError>&&
            _callback) const {
  ::fidl::internal::NaturalMessageEncoder _encoder{
      &::fidl::internal::ChannelTransport::VTable,
      ::test_protocolpayloads::kMainProtocol_TwoWayComposedWithError_Ordinal};
  return messenger().TwoWay(
      _encoder.EncodeTransactionalMessage(
          ::fidl::internal::NaturalMessageConverter<::fidl::Request<
              ::test_protocolpayloads::MainProtocol::TwoWayComposedWithError>>::
              IntoDomainObject(std::move(request))),
      ::fidl::internal::MakeResponseContext<
          ::test_protocolpayloads::MainProtocol::TwoWayComposedWithError>(
          ::test_protocolpayloads::
              kMainProtocol_TwoWayComposedWithError_Ordinal,
          std::move(_callback)));
}

void fidl::internal::NaturalClientImpl<::test_protocolpayloads::MainProtocol>::
    TwoWayLocal(
        ::fidl::Request<::test_protocolpayloads::MainProtocol::TwoWayLocal>
            request,
        ::fidl::ClientCallback<
            ::test_protocolpayloads::MainProtocol::TwoWayLocal>&& _callback)
        const {
  ::fidl::internal::NaturalMessageEncoder _encoder{
      &::fidl::internal::ChannelTransport::VTable,
      ::test_protocolpayloads::kMainProtocol_TwoWayLocal_Ordinal};
  return messenger().TwoWay(
      _encoder.EncodeTransactionalMessage(
          ::fidl::internal::NaturalMessageConverter<::fidl::Request<
              ::test_protocolpayloads::MainProtocol::TwoWayLocal>>::
              IntoDomainObject(std::move(request))),
      ::fidl::internal::MakeResponseContext<
          ::test_protocolpayloads::MainProtocol::TwoWayLocal>(
          ::test_protocolpayloads::kMainProtocol_TwoWayLocal_Ordinal,
          std::move(_callback)));
}

void fidl::internal::NaturalClientImpl<::test_protocolpayloads::MainProtocol>::
    TwoWayLocalWithError(
        ::fidl::Request<
            ::test_protocolpayloads::MainProtocol::TwoWayLocalWithError>
            request,
        ::fidl::ClientCallback<
            ::test_protocolpayloads::MainProtocol::TwoWayLocalWithError>&&
            _callback) const {
  ::fidl::internal::NaturalMessageEncoder _encoder{
      &::fidl::internal::ChannelTransport::VTable,
      ::test_protocolpayloads::kMainProtocol_TwoWayLocalWithError_Ordinal};
  return messenger().TwoWay(
      _encoder.EncodeTransactionalMessage(
          ::fidl::internal::NaturalMessageConverter<::fidl::Request<
              ::test_protocolpayloads::MainProtocol::TwoWayLocalWithError>>::
              IntoDomainObject(std::move(request))),
      ::fidl::internal::MakeResponseContext<
          ::test_protocolpayloads::MainProtocol::TwoWayLocalWithError>(
          ::test_protocolpayloads::kMainProtocol_TwoWayLocalWithError_Ordinal,
          std::move(_callback)));
}

void fidl::internal::NaturalClientImpl<::test_protocolpayloads::MainProtocol>::
    TwoWayImport(
        ::fidl::Request<::test_protocolpayloads::MainProtocol::TwoWayImport>
            request,
        ::fidl::ClientCallback<
            ::test_protocolpayloads::MainProtocol::TwoWayImport>&& _callback)
        const {
  ::fidl::internal::NaturalMessageEncoder _encoder{
      &::fidl::internal::ChannelTransport::VTable,
      ::test_protocolpayloads::kMainProtocol_TwoWayImport_Ordinal};
  return messenger().TwoWay(
      _encoder.EncodeTransactionalMessage(
          ::fidl::internal::NaturalMessageConverter<::fidl::Request<
              ::test_protocolpayloads::MainProtocol::TwoWayImport>>::
              IntoDomainObject(std::move(request))),
      ::fidl::internal::MakeResponseContext<
          ::test_protocolpayloads::MainProtocol::TwoWayImport>(
          ::test_protocolpayloads::kMainProtocol_TwoWayImport_Ordinal,
          std::move(_callback)));
}

void fidl::internal::NaturalClientImpl<::test_protocolpayloads::MainProtocol>::
    TwoWayImportWithError(
        ::fidl::Request<
            ::test_protocolpayloads::MainProtocol::TwoWayImportWithError>
            request,
        ::fidl::ClientCallback<
            ::test_protocolpayloads::MainProtocol::TwoWayImportWithError>&&
            _callback) const {
  ::fidl::internal::NaturalMessageEncoder _encoder{
      &::fidl::internal::ChannelTransport::VTable,
      ::test_protocolpayloads::kMainProtocol_TwoWayImportWithError_Ordinal};
  return messenger().TwoWay(
      _encoder.EncodeTransactionalMessage(
          ::fidl::internal::NaturalMessageConverter<::fidl::Request<
              ::test_protocolpayloads::MainProtocol::TwoWayImportWithError>>::
              IntoDomainObject(std::move(request))),
      ::fidl::internal::MakeResponseContext<
          ::test_protocolpayloads::MainProtocol::TwoWayImportWithError>(
          ::test_protocolpayloads::kMainProtocol_TwoWayImportWithError_Ordinal,
          std::move(_callback)));
}

void fidl::internal::NaturalClientImpl<::test_protocolpayloads::MainProtocol>::
    TwoWayAnon(
        ::fidl::Request<::test_protocolpayloads::MainProtocol::TwoWayAnon>
            request,
        ::fidl::ClientCallback<
            ::test_protocolpayloads::MainProtocol::TwoWayAnon>&& _callback)
        const {
  ::fidl::internal::NaturalMessageEncoder _encoder{
      &::fidl::internal::ChannelTransport::VTable,
      ::test_protocolpayloads::kMainProtocol_TwoWayAnon_Ordinal};
  return messenger().TwoWay(
      _encoder.EncodeTransactionalMessage(
          ::fidl::internal::NaturalMessageConverter<::fidl::Request<
              ::test_protocolpayloads::MainProtocol::TwoWayAnon>>::
              IntoDomainObject(std::move(request))),
      ::fidl::internal::MakeResponseContext<
          ::test_protocolpayloads::MainProtocol::TwoWayAnon>(
          ::test_protocolpayloads::kMainProtocol_TwoWayAnon_Ordinal,
          std::move(_callback)));
}

void fidl::internal::NaturalClientImpl<::test_protocolpayloads::MainProtocol>::
    TwoWayAnonWithError(
        ::fidl::Request<
            ::test_protocolpayloads::MainProtocol::TwoWayAnonWithError>
            request,
        ::fidl::ClientCallback<
            ::test_protocolpayloads::MainProtocol::TwoWayAnonWithError>&&
            _callback) const {
  ::fidl::internal::NaturalMessageEncoder _encoder{
      &::fidl::internal::ChannelTransport::VTable,
      ::test_protocolpayloads::kMainProtocol_TwoWayAnonWithError_Ordinal};
  return messenger().TwoWay(
      _encoder.EncodeTransactionalMessage(
          ::fidl::internal::NaturalMessageConverter<::fidl::Request<
              ::test_protocolpayloads::MainProtocol::TwoWayAnonWithError>>::
              IntoDomainObject(std::move(request))),
      ::fidl::internal::MakeResponseContext<
          ::test_protocolpayloads::MainProtocol::TwoWayAnonWithError>(
          ::test_protocolpayloads::kMainProtocol_TwoWayAnonWithError_Ordinal,
          std::move(_callback)));
}

::fitx::result<::fidl::Error> fidl::internal::
    NaturalClientImpl<::test_protocolpayloads::MainProtocol>::OneWayComposed(
        ::fidl::Request<::test_protocolpayloads::MainProtocol::OneWayComposed>
            request) const {
  ::fidl::internal::NaturalMessageEncoder _encoder{
      &::fidl::internal::ChannelTransport::VTable,
      ::test_protocolpayloads::kMainProtocol_OneWayComposed_Ordinal};
  ::fidl::Status status =
      messenger().OneWay(_encoder.EncodeTransactionalMessage(
          ::fidl::internal::NaturalMessageConverter<::fidl::Request<
              ::test_protocolpayloads::MainProtocol::OneWayComposed>>::
              IntoDomainObject(std::move(request))));
  return ::fidl::internal::ToFitxResult(status);
}

::fitx::result<::fidl::Error> fidl::internal::
    NaturalClientImpl<::test_protocolpayloads::MainProtocol>::OneWayLocal(
        ::fidl::Request<::test_protocolpayloads::MainProtocol::OneWayLocal>
            request) const {
  ::fidl::internal::NaturalMessageEncoder _encoder{
      &::fidl::internal::ChannelTransport::VTable,
      ::test_protocolpayloads::kMainProtocol_OneWayLocal_Ordinal};
  ::fidl::Status status =
      messenger().OneWay(_encoder.EncodeTransactionalMessage(
          ::fidl::internal::NaturalMessageConverter<::fidl::Request<
              ::test_protocolpayloads::MainProtocol::OneWayLocal>>::
              IntoDomainObject(std::move(request))));
  return ::fidl::internal::ToFitxResult(status);
}

::fitx::result<::fidl::Error> fidl::internal::
    NaturalClientImpl<::test_protocolpayloads::MainProtocol>::OneWayImport(
        ::fidl::Request<::test_protocolpayloads::MainProtocol::OneWayImport>
            request) const {
  ::fidl::internal::NaturalMessageEncoder _encoder{
      &::fidl::internal::ChannelTransport::VTable,
      ::test_protocolpayloads::kMainProtocol_OneWayImport_Ordinal};
  ::fidl::Status status =
      messenger().OneWay(_encoder.EncodeTransactionalMessage(
          ::fidl::internal::NaturalMessageConverter<::fidl::Request<
              ::test_protocolpayloads::MainProtocol::OneWayImport>>::
              IntoDomainObject(std::move(request))));
  return ::fidl::internal::ToFitxResult(status);
}

::fitx::result<::fidl::Error> fidl::internal::
    NaturalClientImpl<::test_protocolpayloads::MainProtocol>::OneWayAnon(
        ::fidl::Request<::test_protocolpayloads::MainProtocol::OneWayAnon>
            request) const {
  ::fidl::internal::NaturalMessageEncoder _encoder{
      &::fidl::internal::ChannelTransport::VTable,
      ::test_protocolpayloads::kMainProtocol_OneWayAnon_Ordinal};
  ::fidl::Status status =
      messenger().OneWay(_encoder.EncodeTransactionalMessage(
          ::fidl::internal::NaturalMessageConverter<::fidl::Request<
              ::test_protocolpayloads::MainProtocol::OneWayAnon>>::
              IntoDomainObject(std::move(request))));
  return ::fidl::internal::ToFitxResult(status);
}
namespace test_protocolpayloads {
#endif  // __Fuchsia__

}  // namespace test_protocolpayloads
#ifdef __Fuchsia__

std::optional<::fidl::UnbindInfo>
fidl::internal::NaturalEventDispatcher<::test_protocolpayloads::MainProtocol>::
    DispatchEvent(
        ::fidl::IncomingMessage& msg,
        ::fidl::internal::IncomingTransportContext transport_context) {
  switch (msg.header()->ordinal) {
    case ::test_protocolpayloads::kMainProtocol_OnComposed_Ordinal: {
      ::fitx::result decoded = ::fidl::internal::DecodeTransactionalMessage<
          ::test_protocolpayloads_imported::ImportStructPayload>(
          std::move(msg));
      if (decoded.is_error()) {
        return ::fidl::UnbindInfo(decoded.error_value());
      }
      if (event_handler()) {
        ::fidl::Event<::test_protocolpayloads::MainProtocol::OnComposed> event =
            ::fidl::internal::NaturalMessageConverter<::fidl::Event<
                ::test_protocolpayloads::MainProtocol::OnComposed>>::
                FromDomainObject(std::move(decoded.value()));
        event_handler()->OnComposed(event);
      }
      return std::nullopt;
    }
    case ::test_protocolpayloads::kMainProtocol_OnComposedWithError_Ordinal: {
      ::fitx::result decoded = ::fidl::internal::DecodeTransactionalMessage<
          ::test_protocolpayloads_imported::
              ComposedProtocolOnComposedWithErrorRequest>(std::move(msg));
      if (decoded.is_error()) {
        return ::fidl::UnbindInfo(decoded.error_value());
      }
      if (event_handler()) {
        ::fidl::Event<
            ::test_protocolpayloads::MainProtocol::OnComposedWithError>
            event = ::fidl::internal::NaturalMessageConverter<::fidl::Event<
                ::test_protocolpayloads::MainProtocol::OnComposedWithError>>::
                FromDomainObject(std::move(decoded.value()));
        event_handler()->OnComposedWithError(event);
      }
      return std::nullopt;
    }
    case ::test_protocolpayloads::kMainProtocol_OnLocal_Ordinal: {
      ::fitx::result decoded = ::fidl::internal::DecodeTransactionalMessage<
          ::test_protocolpayloads::LocalStructPayload>(std::move(msg));
      if (decoded.is_error()) {
        return ::fidl::UnbindInfo(decoded.error_value());
      }
      if (event_handler()) {
        ::fidl::Event<::test_protocolpayloads::MainProtocol::OnLocal> event =
            ::fidl::internal::NaturalMessageConverter<
                ::fidl::Event<::test_protocolpayloads::MainProtocol::OnLocal>>::
                FromDomainObject(std::move(decoded.value()));
        event_handler()->OnLocal(event);
      }
      return std::nullopt;
    }
    case ::test_protocolpayloads::kMainProtocol_OnLocalWithError_Ordinal: {
      ::fitx::result decoded = ::fidl::internal::DecodeTransactionalMessage<
          ::test_protocolpayloads::MainProtocolOnLocalWithErrorRequest>(
          std::move(msg));
      if (decoded.is_error()) {
        return ::fidl::UnbindInfo(decoded.error_value());
      }
      if (event_handler()) {
        ::fidl::Event<::test_protocolpayloads::MainProtocol::OnLocalWithError>
            event = ::fidl::internal::NaturalMessageConverter<::fidl::Event<
                ::test_protocolpayloads::MainProtocol::OnLocalWithError>>::
                FromDomainObject(std::move(decoded.value()));
        event_handler()->OnLocalWithError(event);
      }
      return std::nullopt;
    }
    case ::test_protocolpayloads::kMainProtocol_OnImport_Ordinal: {
      ::fitx::result decoded = ::fidl::internal::DecodeTransactionalMessage<
          ::test_protocolpayloads_imported::ImportStructPayload>(
          std::move(msg));
      if (decoded.is_error()) {
        return ::fidl::UnbindInfo(decoded.error_value());
      }
      if (event_handler()) {
        ::fidl::Event<::test_protocolpayloads::MainProtocol::OnImport> event =
            ::fidl::internal::NaturalMessageConverter<::fidl::Event<
                ::test_protocolpayloads::MainProtocol::OnImport>>::
                FromDomainObject(std::move(decoded.value()));
        event_handler()->OnImport(event);
      }
      return std::nullopt;
    }
    case ::test_protocolpayloads::kMainProtocol_OnImportWithError_Ordinal: {
      ::fitx::result decoded = ::fidl::internal::DecodeTransactionalMessage<
          ::test_protocolpayloads::MainProtocolOnImportWithErrorRequest>(
          std::move(msg));
      if (decoded.is_error()) {
        return ::fidl::UnbindInfo(decoded.error_value());
      }
      if (event_handler()) {
        ::fidl::Event<::test_protocolpayloads::MainProtocol::OnImportWithError>
            event = ::fidl::internal::NaturalMessageConverter<::fidl::Event<
                ::test_protocolpayloads::MainProtocol::OnImportWithError>>::
                FromDomainObject(std::move(decoded.value()));
        event_handler()->OnImportWithError(event);
      }
      return std::nullopt;
    }
    case ::test_protocolpayloads::kMainProtocol_OnAnon_Ordinal: {
      ::fitx::result decoded = ::fidl::internal::DecodeTransactionalMessage<
          ::test_protocolpayloads::MainProtocolOnAnonRequest>(std::move(msg));
      if (decoded.is_error()) {
        return ::fidl::UnbindInfo(decoded.error_value());
      }
      if (event_handler()) {
        ::fidl::Event<::test_protocolpayloads::MainProtocol::OnAnon> event =
            ::fidl::internal::NaturalMessageConverter<
                ::fidl::Event<::test_protocolpayloads::MainProtocol::OnAnon>>::
                FromDomainObject(std::move(decoded.value()));
        event_handler()->OnAnon(event);
      }
      return std::nullopt;
    }
    case ::test_protocolpayloads::kMainProtocol_OnAnonWithError_Ordinal: {
      ::fitx::result decoded = ::fidl::internal::DecodeTransactionalMessage<
          ::test_protocolpayloads::MainProtocolOnAnonWithErrorRequest>(
          std::move(msg));
      if (decoded.is_error()) {
        return ::fidl::UnbindInfo(decoded.error_value());
      }
      if (event_handler()) {
        ::fidl::Event<::test_protocolpayloads::MainProtocol::OnAnonWithError>
            event = ::fidl::internal::NaturalMessageConverter<::fidl::Event<
                ::test_protocolpayloads::MainProtocol::OnAnonWithError>>::
                FromDomainObject(std::move(decoded.value()));
        event_handler()->OnAnonWithError(event);
      }
      return std::nullopt;
    }
    default:
      break;
  }
  return ::fidl::UnbindInfo::UnknownOrdinal();
}
#endif  // __Fuchsia__

#ifdef __Fuchsia__

::fitx::result<::fidl::Error> fidl::internal::
    NaturalWeakEventSender<::test_protocolpayloads::MainProtocol>::OnComposed(
        ::test_protocolpayloads_imported::ImportStructPayload payload) {
  ::fidl::internal::NaturalMessageEncoder _encoder{
      &::fidl::internal::ChannelTransport::VTable,
      ::test_protocolpayloads::kMainProtocol_OnComposed_Ordinal};
  auto encoded_message =
      _encoder.EncodeTransactionalMessage(std::move(payload));
  ::fidl::Status result = _inner().SendEvent(encoded_message);
  return ::fidl::internal::ToFitxResult(result);
}

::fitx::result<::fidl::Error> fidl::internal::
    NaturalEventSender<::test_protocolpayloads::MainProtocol>::OnComposed(
        ::test_protocolpayloads_imported::ImportStructPayload payload) {
  ::fidl::internal::NaturalMessageEncoder _encoder{
      &::fidl::internal::ChannelTransport::VTable,
      ::test_protocolpayloads::kMainProtocol_OnComposed_Ordinal};
  auto encoded_message =
      _encoder.EncodeTransactionalMessage(std::move(payload));
  encoded_message.Write(_transport());
  return ::fidl::internal::ToFitxResult(::fidl::Status{encoded_message});
}

::fitx::result<::fidl::Error>
fidl::internal::NaturalWeakEventSender<::test_protocolpayloads::MainProtocol>::
    OnComposedWithError(
        ::test_protocolpayloads_imported::
            ComposedProtocolOnComposedWithErrorRequest payload) {
  ::fidl::internal::NaturalMessageEncoder _encoder{
      &::fidl::internal::ChannelTransport::VTable,
      ::test_protocolpayloads::kMainProtocol_OnComposedWithError_Ordinal};
  auto encoded_message =
      _encoder.EncodeTransactionalMessage(std::move(payload));
  ::fidl::Status result = _inner().SendEvent(encoded_message);
  return ::fidl::internal::ToFitxResult(result);
}

::fitx::result<::fidl::Error>
fidl::internal::NaturalEventSender<::test_protocolpayloads::MainProtocol>::
    OnComposedWithError(
        ::test_protocolpayloads_imported::
            ComposedProtocolOnComposedWithErrorRequest payload) {
  ::fidl::internal::NaturalMessageEncoder _encoder{
      &::fidl::internal::ChannelTransport::VTable,
      ::test_protocolpayloads::kMainProtocol_OnComposedWithError_Ordinal};
  auto encoded_message =
      _encoder.EncodeTransactionalMessage(std::move(payload));
  encoded_message.Write(_transport());
  return ::fidl::internal::ToFitxResult(::fidl::Status{encoded_message});
}

::fitx::result<::fidl::Error> fidl::internal::
    NaturalWeakEventSender<::test_protocolpayloads::MainProtocol>::OnLocal(
        ::test_protocolpayloads::LocalStructPayload payload) {
  ::fidl::internal::NaturalMessageEncoder _encoder{
      &::fidl::internal::ChannelTransport::VTable,
      ::test_protocolpayloads::kMainProtocol_OnLocal_Ordinal};
  auto encoded_message =
      _encoder.EncodeTransactionalMessage(std::move(payload));
  ::fidl::Status result = _inner().SendEvent(encoded_message);
  return ::fidl::internal::ToFitxResult(result);
}

::fitx::result<::fidl::Error> fidl::internal::
    NaturalEventSender<::test_protocolpayloads::MainProtocol>::OnLocal(
        ::test_protocolpayloads::LocalStructPayload payload) {
  ::fidl::internal::NaturalMessageEncoder _encoder{
      &::fidl::internal::ChannelTransport::VTable,
      ::test_protocolpayloads::kMainProtocol_OnLocal_Ordinal};
  auto encoded_message =
      _encoder.EncodeTransactionalMessage(std::move(payload));
  encoded_message.Write(_transport());
  return ::fidl::internal::ToFitxResult(::fidl::Status{encoded_message});
}

::fitx::result<::fidl::Error>
fidl::internal::NaturalWeakEventSender<::test_protocolpayloads::MainProtocol>::
    OnLocalWithError(
        ::test_protocolpayloads::MainProtocolOnLocalWithErrorRequest payload) {
  ::fidl::internal::NaturalMessageEncoder _encoder{
      &::fidl::internal::ChannelTransport::VTable,
      ::test_protocolpayloads::kMainProtocol_OnLocalWithError_Ordinal};
  auto encoded_message =
      _encoder.EncodeTransactionalMessage(std::move(payload));
  ::fidl::Status result = _inner().SendEvent(encoded_message);
  return ::fidl::internal::ToFitxResult(result);
}

::fitx::result<::fidl::Error> fidl::internal::
    NaturalEventSender<::test_protocolpayloads::MainProtocol>::OnLocalWithError(
        ::test_protocolpayloads::MainProtocolOnLocalWithErrorRequest payload) {
  ::fidl::internal::NaturalMessageEncoder _encoder{
      &::fidl::internal::ChannelTransport::VTable,
      ::test_protocolpayloads::kMainProtocol_OnLocalWithError_Ordinal};
  auto encoded_message =
      _encoder.EncodeTransactionalMessage(std::move(payload));
  encoded_message.Write(_transport());
  return ::fidl::internal::ToFitxResult(::fidl::Status{encoded_message});
}

::fitx::result<::fidl::Error> fidl::internal::
    NaturalWeakEventSender<::test_protocolpayloads::MainProtocol>::OnImport(
        ::test_protocolpayloads_imported::ImportStructPayload payload) {
  ::fidl::internal::NaturalMessageEncoder _encoder{
      &::fidl::internal::ChannelTransport::VTable,
      ::test_protocolpayloads::kMainProtocol_OnImport_Ordinal};
  auto encoded_message =
      _encoder.EncodeTransactionalMessage(std::move(payload));
  ::fidl::Status result = _inner().SendEvent(encoded_message);
  return ::fidl::internal::ToFitxResult(result);
}

::fitx::result<::fidl::Error> fidl::internal::
    NaturalEventSender<::test_protocolpayloads::MainProtocol>::OnImport(
        ::test_protocolpayloads_imported::ImportStructPayload payload) {
  ::fidl::internal::NaturalMessageEncoder _encoder{
      &::fidl::internal::ChannelTransport::VTable,
      ::test_protocolpayloads::kMainProtocol_OnImport_Ordinal};
  auto encoded_message =
      _encoder.EncodeTransactionalMessage(std::move(payload));
  encoded_message.Write(_transport());
  return ::fidl::internal::ToFitxResult(::fidl::Status{encoded_message});
}

::fitx::result<::fidl::Error>
fidl::internal::NaturalWeakEventSender<::test_protocolpayloads::MainProtocol>::
    OnImportWithError(
        ::test_protocolpayloads::MainProtocolOnImportWithErrorRequest payload) {
  ::fidl::internal::NaturalMessageEncoder _encoder{
      &::fidl::internal::ChannelTransport::VTable,
      ::test_protocolpayloads::kMainProtocol_OnImportWithError_Ordinal};
  auto encoded_message =
      _encoder.EncodeTransactionalMessage(std::move(payload));
  ::fidl::Status result = _inner().SendEvent(encoded_message);
  return ::fidl::internal::ToFitxResult(result);
}

::fitx::result<::fidl::Error>
fidl::internal::NaturalEventSender<::test_protocolpayloads::MainProtocol>::
    OnImportWithError(
        ::test_protocolpayloads::MainProtocolOnImportWithErrorRequest payload) {
  ::fidl::internal::NaturalMessageEncoder _encoder{
      &::fidl::internal::ChannelTransport::VTable,
      ::test_protocolpayloads::kMainProtocol_OnImportWithError_Ordinal};
  auto encoded_message =
      _encoder.EncodeTransactionalMessage(std::move(payload));
  encoded_message.Write(_transport());
  return ::fidl::internal::ToFitxResult(::fidl::Status{encoded_message});
}

::fitx::result<::fidl::Error> fidl::internal::
    NaturalWeakEventSender<::test_protocolpayloads::MainProtocol>::OnAnon(
        ::test_protocolpayloads::MainProtocolOnAnonRequest payload) {
  ::fidl::internal::NaturalMessageEncoder _encoder{
      &::fidl::internal::ChannelTransport::VTable,
      ::test_protocolpayloads::kMainProtocol_OnAnon_Ordinal};
  auto encoded_message =
      _encoder.EncodeTransactionalMessage(std::move(payload));
  ::fidl::Status result = _inner().SendEvent(encoded_message);
  return ::fidl::internal::ToFitxResult(result);
}

::fitx::result<::fidl::Error> fidl::internal::
    NaturalEventSender<::test_protocolpayloads::MainProtocol>::OnAnon(
        ::test_protocolpayloads::MainProtocolOnAnonRequest payload) {
  ::fidl::internal::NaturalMessageEncoder _encoder{
      &::fidl::internal::ChannelTransport::VTable,
      ::test_protocolpayloads::kMainProtocol_OnAnon_Ordinal};
  auto encoded_message =
      _encoder.EncodeTransactionalMessage(std::move(payload));
  encoded_message.Write(_transport());
  return ::fidl::internal::ToFitxResult(::fidl::Status{encoded_message});
}

::fitx::result<::fidl::Error>
fidl::internal::NaturalWeakEventSender<::test_protocolpayloads::MainProtocol>::
    OnAnonWithError(
        ::test_protocolpayloads::MainProtocolOnAnonWithErrorRequest payload) {
  ::fidl::internal::NaturalMessageEncoder _encoder{
      &::fidl::internal::ChannelTransport::VTable,
      ::test_protocolpayloads::kMainProtocol_OnAnonWithError_Ordinal};
  auto encoded_message =
      _encoder.EncodeTransactionalMessage(std::move(payload));
  ::fidl::Status result = _inner().SendEvent(encoded_message);
  return ::fidl::internal::ToFitxResult(result);
}

::fitx::result<::fidl::Error> fidl::internal::
    NaturalEventSender<::test_protocolpayloads::MainProtocol>::OnAnonWithError(
        ::test_protocolpayloads::MainProtocolOnAnonWithErrorRequest payload) {
  ::fidl::internal::NaturalMessageEncoder _encoder{
      &::fidl::internal::ChannelTransport::VTable,
      ::test_protocolpayloads::kMainProtocol_OnAnonWithError_Ordinal};
  auto encoded_message =
      _encoder.EncodeTransactionalMessage(std::move(payload));
  encoded_message.Write(_transport());
  return ::fidl::internal::ToFitxResult(::fidl::Status{encoded_message});
}

#endif  // __Fuchsia__

void fidl::internal::NaturalCompleterBase<
    ::test_protocolpayloads::MainProtocol::TwoWayComposed>::
    Reply(::fidl::Response<
          ::test_protocolpayloads::MainProtocol::TwoWayComposed>&& response) {
  ::fidl::internal::NaturalServerMessenger _messenger{this};
  ::fidl::internal::NaturalMessageEncoder _encoder{
      &::fidl::internal::ChannelTransport::VTable,
      ::test_protocolpayloads::kMainProtocol_TwoWayComposed_Ordinal};
  _messenger.SendReply(
      _encoder.EncodeTransactionalMessage(
          ::fidl::internal::NaturalMessageConverter<::fidl::Response<
              ::test_protocolpayloads::MainProtocol::TwoWayComposed>>::
              IntoDomainObject(std::move(response))),
      ::fidl::internal::OutgoingTransportContext{});
}

void fidl::internal::NaturalCompleterBase<
    ::test_protocolpayloads::MainProtocol::TwoWayComposedWithError>::
    Reply(::fidl::Response<
          ::test_protocolpayloads::MainProtocol::TwoWayComposedWithError>&&
              response) {
  ::fidl::internal::NaturalServerMessenger _messenger{this};
  ::fidl::internal::NaturalMessageEncoder _encoder{
      &::fidl::internal::ChannelTransport::VTable,
      ::test_protocolpayloads::kMainProtocol_TwoWayComposedWithError_Ordinal};
  _messenger.SendReply(
      _encoder.EncodeTransactionalMessage(
          ::fidl::internal::NaturalMessageConverter<::fidl::Response<
              ::test_protocolpayloads::MainProtocol::TwoWayComposedWithError>>::
              IntoDomainObject(std::move(response))),
      ::fidl::internal::OutgoingTransportContext{});
}

void fidl::internal::NaturalCompleterBase<
    ::test_protocolpayloads::MainProtocol::TwoWayLocal>::
    Reply(::fidl::Response<::test_protocolpayloads::MainProtocol::TwoWayLocal>&&
              response) {
  ::fidl::internal::NaturalServerMessenger _messenger{this};
  ::fidl::internal::NaturalMessageEncoder _encoder{
      &::fidl::internal::ChannelTransport::VTable,
      ::test_protocolpayloads::kMainProtocol_TwoWayLocal_Ordinal};
  _messenger.SendReply(
      _encoder.EncodeTransactionalMessage(
          ::fidl::internal::NaturalMessageConverter<::fidl::Response<
              ::test_protocolpayloads::MainProtocol::TwoWayLocal>>::
              IntoDomainObject(std::move(response))),
      ::fidl::internal::OutgoingTransportContext{});
}

void fidl::internal::NaturalCompleterBase<
    ::test_protocolpayloads::MainProtocol::TwoWayLocalWithError>::
    Reply(::fidl::Response<
          ::test_protocolpayloads::MainProtocol::TwoWayLocalWithError>&&
              response) {
  ::fidl::internal::NaturalServerMessenger _messenger{this};
  ::fidl::internal::NaturalMessageEncoder _encoder{
      &::fidl::internal::ChannelTransport::VTable,
      ::test_protocolpayloads::kMainProtocol_TwoWayLocalWithError_Ordinal};
  _messenger.SendReply(
      _encoder.EncodeTransactionalMessage(
          ::fidl::internal::NaturalMessageConverter<::fidl::Response<
              ::test_protocolpayloads::MainProtocol::TwoWayLocalWithError>>::
              IntoDomainObject(std::move(response))),
      ::fidl::internal::OutgoingTransportContext{});
}

void fidl::internal::NaturalCompleterBase<
    ::test_protocolpayloads::MainProtocol::TwoWayImport>::
    Reply(
        ::fidl::Response<::test_protocolpayloads::MainProtocol::TwoWayImport>&&
            response) {
  ::fidl::internal::NaturalServerMessenger _messenger{this};
  ::fidl::internal::NaturalMessageEncoder _encoder{
      &::fidl::internal::ChannelTransport::VTable,
      ::test_protocolpayloads::kMainProtocol_TwoWayImport_Ordinal};
  _messenger.SendReply(
      _encoder.EncodeTransactionalMessage(
          ::fidl::internal::NaturalMessageConverter<::fidl::Response<
              ::test_protocolpayloads::MainProtocol::TwoWayImport>>::
              IntoDomainObject(std::move(response))),
      ::fidl::internal::OutgoingTransportContext{});
}

void fidl::internal::NaturalCompleterBase<
    ::test_protocolpayloads::MainProtocol::TwoWayImportWithError>::
    Reply(::fidl::Response<
          ::test_protocolpayloads::MainProtocol::TwoWayImportWithError>&&
              response) {
  ::fidl::internal::NaturalServerMessenger _messenger{this};
  ::fidl::internal::NaturalMessageEncoder _encoder{
      &::fidl::internal::ChannelTransport::VTable,
      ::test_protocolpayloads::kMainProtocol_TwoWayImportWithError_Ordinal};
  _messenger.SendReply(
      _encoder.EncodeTransactionalMessage(
          ::fidl::internal::NaturalMessageConverter<::fidl::Response<
              ::test_protocolpayloads::MainProtocol::TwoWayImportWithError>>::
              IntoDomainObject(std::move(response))),
      ::fidl::internal::OutgoingTransportContext{});
}

void fidl::internal::NaturalCompleterBase<
    ::test_protocolpayloads::MainProtocol::TwoWayAnon>::
    Reply(::fidl::Response<::test_protocolpayloads::MainProtocol::TwoWayAnon>&&
              response) {
  ::fidl::internal::NaturalServerMessenger _messenger{this};
  ::fidl::internal::NaturalMessageEncoder _encoder{
      &::fidl::internal::ChannelTransport::VTable,
      ::test_protocolpayloads::kMainProtocol_TwoWayAnon_Ordinal};
  _messenger.SendReply(
      _encoder.EncodeTransactionalMessage(
          ::fidl::internal::NaturalMessageConverter<::fidl::Response<
              ::test_protocolpayloads::MainProtocol::TwoWayAnon>>::
              IntoDomainObject(std::move(response))),
      ::fidl::internal::OutgoingTransportContext{});
}

void fidl::internal::NaturalCompleterBase<
    ::test_protocolpayloads::MainProtocol::TwoWayAnonWithError>::
    Reply(::fidl::Response<
          ::test_protocolpayloads::MainProtocol::TwoWayAnonWithError>&&
              response) {
  ::fidl::internal::NaturalServerMessenger _messenger{this};
  ::fidl::internal::NaturalMessageEncoder _encoder{
      &::fidl::internal::ChannelTransport::VTable,
      ::test_protocolpayloads::kMainProtocol_TwoWayAnonWithError_Ordinal};
  _messenger.SendReply(
      _encoder.EncodeTransactionalMessage(
          ::fidl::internal::NaturalMessageConverter<::fidl::Response<
              ::test_protocolpayloads::MainProtocol::TwoWayAnonWithError>>::
              IntoDomainObject(std::move(response))),
      ::fidl::internal::OutgoingTransportContext{});
}

#ifdef __Fuchsia__

constexpr ::fidl::internal::MethodEntry fidl::internal::NaturalServerDispatcher<
    ::test_protocolpayloads::MainProtocol>::entries_[] = {
    {
        ::test_protocolpayloads::kMainProtocol_OneWayComposed_Ordinal,
        [](void* interface, ::fidl::IncomingMessage&& msg,
           internal::IncomingTransportContext transport_context,
           ::fidl::Transaction* txn) {
          ::fitx::result decoded = ::fidl::internal::DecodeTransactionalMessage<
              ::test_protocolpayloads_imported::ImportStructPayload>(
              std::move(msg));
          if (decoded.is_error()) {
            return decoded.error_value().status();
          }
          ::fidl::Request<::test_protocolpayloads::MainProtocol::OneWayComposed>
              request =
                  ::fidl::internal::NaturalMessageConverter<::fidl::Request<
                      ::test_protocolpayloads::MainProtocol::OneWayComposed>>::
                      FromDomainObject(std::move(decoded.value()));
          ::fidl::internal::NaturalCompleter<
              ::test_protocolpayloads::MainProtocol::OneWayComposed>::Sync
              completer(txn);
          static_cast<::fidl::Server<::test_protocolpayloads::MainProtocol>*>(
              interface)
              ->OneWayComposed(request, completer);
          return ZX_OK;
        },
    },
    {
        ::test_protocolpayloads::kMainProtocol_TwoWayComposed_Ordinal,
        [](void* interface, ::fidl::IncomingMessage&& msg,
           internal::IncomingTransportContext transport_context,
           ::fidl::Transaction* txn) {
          ::fitx::result decoded = ::fidl::internal::DecodeTransactionalMessage<
              ::test_protocolpayloads_imported::ImportStructPayload>(
              std::move(msg));
          if (decoded.is_error()) {
            return decoded.error_value().status();
          }
          ::fidl::Request<::test_protocolpayloads::MainProtocol::TwoWayComposed>
              request =
                  ::fidl::internal::NaturalMessageConverter<::fidl::Request<
                      ::test_protocolpayloads::MainProtocol::TwoWayComposed>>::
                      FromDomainObject(std::move(decoded.value()));
          ::fidl::internal::NaturalCompleter<
              ::test_protocolpayloads::MainProtocol::TwoWayComposed>::Sync
              completer(txn);
          static_cast<::fidl::Server<::test_protocolpayloads::MainProtocol>*>(
              interface)
              ->TwoWayComposed(request, completer);
          return ZX_OK;
        },
    },
    {
        ::test_protocolpayloads::kMainProtocol_TwoWayComposedWithError_Ordinal,
        [](void* interface, ::fidl::IncomingMessage&& msg,
           internal::IncomingTransportContext transport_context,
           ::fidl::Transaction* txn) {
          ::fitx::result decoded = ::fidl::internal::DecodeTransactionalMessage<
              ::test_protocolpayloads_imported::ImportStructPayload>(
              std::move(msg));
          if (decoded.is_error()) {
            return decoded.error_value().status();
          }
          ::fidl::Request<
              ::test_protocolpayloads::MainProtocol::TwoWayComposedWithError>
              request = ::fidl::internal::NaturalMessageConverter<
                  ::fidl::Request<::test_protocolpayloads::MainProtocol::
                                      TwoWayComposedWithError>>::
                  FromDomainObject(std::move(decoded.value()));
          ::fidl::internal::NaturalCompleter<
              ::test_protocolpayloads::MainProtocol::TwoWayComposedWithError>::
              Sync completer(txn);
          static_cast<::fidl::Server<::test_protocolpayloads::MainProtocol>*>(
              interface)
              ->TwoWayComposedWithError(request, completer);
          return ZX_OK;
        },
    },
    {
        ::test_protocolpayloads::kMainProtocol_OneWayLocal_Ordinal,
        [](void* interface, ::fidl::IncomingMessage&& msg,
           internal::IncomingTransportContext transport_context,
           ::fidl::Transaction* txn) {
          ::fitx::result decoded = ::fidl::internal::DecodeTransactionalMessage<
              ::test_protocolpayloads::LocalStructPayload>(std::move(msg));
          if (decoded.is_error()) {
            return decoded.error_value().status();
          }
          ::fidl::Request<::test_protocolpayloads::MainProtocol::OneWayLocal>
              request =
                  ::fidl::internal::NaturalMessageConverter<::fidl::Request<
                      ::test_protocolpayloads::MainProtocol::OneWayLocal>>::
                      FromDomainObject(std::move(decoded.value()));
          ::fidl::internal::NaturalCompleter<
              ::test_protocolpayloads::MainProtocol::OneWayLocal>::Sync
              completer(txn);
          static_cast<::fidl::Server<::test_protocolpayloads::MainProtocol>*>(
              interface)
              ->OneWayLocal(request, completer);
          return ZX_OK;
        },
    },
    {
        ::test_protocolpayloads::kMainProtocol_TwoWayLocal_Ordinal,
        [](void* interface, ::fidl::IncomingMessage&& msg,
           internal::IncomingTransportContext transport_context,
           ::fidl::Transaction* txn) {
          ::fitx::result decoded = ::fidl::internal::DecodeTransactionalMessage<
              ::test_protocolpayloads::LocalStructPayload>(std::move(msg));
          if (decoded.is_error()) {
            return decoded.error_value().status();
          }
          ::fidl::Request<::test_protocolpayloads::MainProtocol::TwoWayLocal>
              request =
                  ::fidl::internal::NaturalMessageConverter<::fidl::Request<
                      ::test_protocolpayloads::MainProtocol::TwoWayLocal>>::
                      FromDomainObject(std::move(decoded.value()));
          ::fidl::internal::NaturalCompleter<
              ::test_protocolpayloads::MainProtocol::TwoWayLocal>::Sync
              completer(txn);
          static_cast<::fidl::Server<::test_protocolpayloads::MainProtocol>*>(
              interface)
              ->TwoWayLocal(request, completer);
          return ZX_OK;
        },
    },
    {
        ::test_protocolpayloads::kMainProtocol_TwoWayLocalWithError_Ordinal,
        [](void* interface, ::fidl::IncomingMessage&& msg,
           internal::IncomingTransportContext transport_context,
           ::fidl::Transaction* txn) {
          ::fitx::result decoded = ::fidl::internal::DecodeTransactionalMessage<
              ::test_protocolpayloads::LocalStructPayload>(std::move(msg));
          if (decoded.is_error()) {
            return decoded.error_value().status();
          }
          ::fidl::Request<
              ::test_protocolpayloads::MainProtocol::TwoWayLocalWithError>
              request = ::fidl::internal::NaturalMessageConverter<
                  ::fidl::Request<::test_protocolpayloads::MainProtocol::
                                      TwoWayLocalWithError>>::
                  FromDomainObject(std::move(decoded.value()));
          ::fidl::internal::NaturalCompleter<
              ::test_protocolpayloads::MainProtocol::TwoWayLocalWithError>::Sync
              completer(txn);
          static_cast<::fidl::Server<::test_protocolpayloads::MainProtocol>*>(
              interface)
              ->TwoWayLocalWithError(request, completer);
          return ZX_OK;
        },
    },
    {
        ::test_protocolpayloads::kMainProtocol_OneWayImport_Ordinal,
        [](void* interface, ::fidl::IncomingMessage&& msg,
           internal::IncomingTransportContext transport_context,
           ::fidl::Transaction* txn) {
          ::fitx::result decoded = ::fidl::internal::DecodeTransactionalMessage<
              ::test_protocolpayloads_imported::ImportStructPayload>(
              std::move(msg));
          if (decoded.is_error()) {
            return decoded.error_value().status();
          }
          ::fidl::Request<::test_protocolpayloads::MainProtocol::OneWayImport>
              request =
                  ::fidl::internal::NaturalMessageConverter<::fidl::Request<
                      ::test_protocolpayloads::MainProtocol::OneWayImport>>::
                      FromDomainObject(std::move(decoded.value()));
          ::fidl::internal::NaturalCompleter<
              ::test_protocolpayloads::MainProtocol::OneWayImport>::Sync
              completer(txn);
          static_cast<::fidl::Server<::test_protocolpayloads::MainProtocol>*>(
              interface)
              ->OneWayImport(request, completer);
          return ZX_OK;
        },
    },
    {
        ::test_protocolpayloads::kMainProtocol_TwoWayImport_Ordinal,
        [](void* interface, ::fidl::IncomingMessage&& msg,
           internal::IncomingTransportContext transport_context,
           ::fidl::Transaction* txn) {
          ::fitx::result decoded = ::fidl::internal::DecodeTransactionalMessage<
              ::test_protocolpayloads_imported::ImportStructPayload>(
              std::move(msg));
          if (decoded.is_error()) {
            return decoded.error_value().status();
          }
          ::fidl::Request<::test_protocolpayloads::MainProtocol::TwoWayImport>
              request =
                  ::fidl::internal::NaturalMessageConverter<::fidl::Request<
                      ::test_protocolpayloads::MainProtocol::TwoWayImport>>::
                      FromDomainObject(std::move(decoded.value()));
          ::fidl::internal::NaturalCompleter<
              ::test_protocolpayloads::MainProtocol::TwoWayImport>::Sync
              completer(txn);
          static_cast<::fidl::Server<::test_protocolpayloads::MainProtocol>*>(
              interface)
              ->TwoWayImport(request, completer);
          return ZX_OK;
        },
    },
    {
        ::test_protocolpayloads::kMainProtocol_TwoWayImportWithError_Ordinal,
        [](void* interface, ::fidl::IncomingMessage&& msg,
           internal::IncomingTransportContext transport_context,
           ::fidl::Transaction* txn) {
          ::fitx::result decoded = ::fidl::internal::DecodeTransactionalMessage<
              ::test_protocolpayloads_imported::ImportStructPayload>(
              std::move(msg));
          if (decoded.is_error()) {
            return decoded.error_value().status();
          }
          ::fidl::Request<
              ::test_protocolpayloads::MainProtocol::TwoWayImportWithError>
              request = ::fidl::internal::NaturalMessageConverter<
                  ::fidl::Request<::test_protocolpayloads::MainProtocol::
                                      TwoWayImportWithError>>::
                  FromDomainObject(std::move(decoded.value()));
          ::fidl::internal::NaturalCompleter<
              ::test_protocolpayloads::MainProtocol::TwoWayImportWithError>::
              Sync completer(txn);
          static_cast<::fidl::Server<::test_protocolpayloads::MainProtocol>*>(
              interface)
              ->TwoWayImportWithError(request, completer);
          return ZX_OK;
        },
    },
    {
        ::test_protocolpayloads::kMainProtocol_OneWayAnon_Ordinal,
        [](void* interface, ::fidl::IncomingMessage&& msg,
           internal::IncomingTransportContext transport_context,
           ::fidl::Transaction* txn) {
          ::fitx::result decoded = ::fidl::internal::DecodeTransactionalMessage<
              ::test_protocolpayloads::MainProtocolOneWayAnonRequest>(
              std::move(msg));
          if (decoded.is_error()) {
            return decoded.error_value().status();
          }
          ::fidl::Request<::test_protocolpayloads::MainProtocol::OneWayAnon>
              request =
                  ::fidl::internal::NaturalMessageConverter<::fidl::Request<
                      ::test_protocolpayloads::MainProtocol::OneWayAnon>>::
                      FromDomainObject(std::move(decoded.value()));
          ::fidl::internal::NaturalCompleter<
              ::test_protocolpayloads::MainProtocol::OneWayAnon>::Sync
              completer(txn);
          static_cast<::fidl::Server<::test_protocolpayloads::MainProtocol>*>(
              interface)
              ->OneWayAnon(request, completer);
          return ZX_OK;
        },
    },
    {
        ::test_protocolpayloads::kMainProtocol_TwoWayAnon_Ordinal,
        [](void* interface, ::fidl::IncomingMessage&& msg,
           internal::IncomingTransportContext transport_context,
           ::fidl::Transaction* txn) {
          ::fitx::result decoded = ::fidl::internal::DecodeTransactionalMessage<
              ::test_protocolpayloads::MainProtocolTwoWayAnonRequest>(
              std::move(msg));
          if (decoded.is_error()) {
            return decoded.error_value().status();
          }
          ::fidl::Request<::test_protocolpayloads::MainProtocol::TwoWayAnon>
              request =
                  ::fidl::internal::NaturalMessageConverter<::fidl::Request<
                      ::test_protocolpayloads::MainProtocol::TwoWayAnon>>::
                      FromDomainObject(std::move(decoded.value()));
          ::fidl::internal::NaturalCompleter<
              ::test_protocolpayloads::MainProtocol::TwoWayAnon>::Sync
              completer(txn);
          static_cast<::fidl::Server<::test_protocolpayloads::MainProtocol>*>(
              interface)
              ->TwoWayAnon(request, completer);
          return ZX_OK;
        },
    },
    {
        ::test_protocolpayloads::kMainProtocol_TwoWayAnonWithError_Ordinal,
        [](void* interface, ::fidl::IncomingMessage&& msg,
           internal::IncomingTransportContext transport_context,
           ::fidl::Transaction* txn) {
          ::fitx::result decoded = ::fidl::internal::DecodeTransactionalMessage<
              ::test_protocolpayloads::MainProtocolTwoWayAnonWithErrorRequest>(
              std::move(msg));
          if (decoded.is_error()) {
            return decoded.error_value().status();
          }
          ::fidl::Request<
              ::test_protocolpayloads::MainProtocol::TwoWayAnonWithError>
              request = ::fidl::internal::NaturalMessageConverter<
                  ::fidl::Request<::test_protocolpayloads::MainProtocol::
                                      TwoWayAnonWithError>>::
                  FromDomainObject(std::move(decoded.value()));
          ::fidl::internal::NaturalCompleter<
              ::test_protocolpayloads::MainProtocol::TwoWayAnonWithError>::Sync
              completer(txn);
          static_cast<::fidl::Server<::test_protocolpayloads::MainProtocol>*>(
              interface)
              ->TwoWayAnonWithError(request, completer);
          return ZX_OK;
        },
    },
};

const ::fidl::internal::MethodEntry* fidl::internal::NaturalServerDispatcher<
    ::test_protocolpayloads::MainProtocol>::entries_end_ = &entries_[12];

void fidl::internal::
    NaturalServerDispatcher<::test_protocolpayloads::MainProtocol>::Dispatch(
        ::fidl::Server<::test_protocolpayloads::MainProtocol>* impl,
        ::fidl::IncomingMessage&& msg,
        internal::IncomingTransportContext transport_context,
        ::fidl::Transaction* txn) {
  ::fidl::internal::Dispatch(impl, msg, std::move(transport_context), txn,
                             entries_, entries_end_);
}
void fidl::Server<::test_protocolpayloads::MainProtocol>::dispatch_message(
    ::fidl::IncomingMessage&& msg, ::fidl::Transaction* txn,
    ::fidl::internal::IncomingTransportContext transport_context) {
  ::fidl::internal::NaturalServerDispatcher<
      ::test_protocolpayloads::MainProtocol>::Dispatch(this, std::move(msg),
                                                       std::move(
                                                           transport_context),
                                                       txn);
}
#endif  // __Fuchsia__
