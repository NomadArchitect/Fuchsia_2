// WARNING: This file is machine generated by fidlgen.

#pragma once

#include <fidl/test.errorsyntax/cpp/markers.h>
#include <fidl/test.errorsyntax/cpp/natural_types.h>
#include <fidl/test.errorsyntax/cpp/wire_types.h>
#ifdef __Fuchsia__
#include <fidl/test.errorsyntax/cpp/natural_messaging.h>
#include <fidl/test.errorsyntax/cpp/wire_messaging.h>
#endif  // __Fuchsia__
#include <fidl/test.errorsyntax.parent/cpp/type_conversions.h>
#include <lib/fidl/cpp/wire_natural_conversions.h>
namespace fidl {
namespace internal {

template <>
struct WireNaturalConversionTraits<
    ::test_errorsyntax::wire::ExampleUseOfErrorSyntaxCallWhichMayFailResponse,
    ::test_errorsyntax::ExampleUseOfErrorSyntaxCallWhichMayFailResponse> {
  static ::test_errorsyntax::ExampleUseOfErrorSyntaxCallWhichMayFailResponse
  ToNatural(
      ::test_errorsyntax::wire::ExampleUseOfErrorSyntaxCallWhichMayFailResponse
          src);
};

template <>
struct NaturalTypeForWireType<
    ::test_errorsyntax::wire::ExampleUseOfErrorSyntaxCallWhichMayFailResponse> {
  using type =
      ::test_errorsyntax::ExampleUseOfErrorSyntaxCallWhichMayFailResponse;
};

template <>
struct WireNaturalConversionTraits<
    ::test_errorsyntax::wire::
        ExampleUseOfErrorSyntaxCallWhichMayFailTopResponse,
    ::test_errorsyntax::ExampleUseOfErrorSyntaxCallWhichMayFailTopResponse> {
  static ::test_errorsyntax::ExampleUseOfErrorSyntaxCallWhichMayFailTopResponse
  ToNatural(::test_errorsyntax::wire::
                ExampleUseOfErrorSyntaxCallWhichMayFailTopResponse src);
};

template <>
struct NaturalTypeForWireType<
    ::test_errorsyntax::wire::
        ExampleUseOfErrorSyntaxCallWhichMayFailTopResponse> {
  using type =
      ::test_errorsyntax::ExampleUseOfErrorSyntaxCallWhichMayFailTopResponse;
};

template <>
struct WireNaturalConversionTraits<
    ::test_errorsyntax::wire::ExampleUseOfErrorSyntaxCallWhichMayFailRequest,
    ::test_errorsyntax::ExampleUseOfErrorSyntaxCallWhichMayFailRequest> {
  static ::test_errorsyntax::ExampleUseOfErrorSyntaxCallWhichMayFailRequest
  ToNatural(
      ::test_errorsyntax::wire::ExampleUseOfErrorSyntaxCallWhichMayFailRequest
          src);
};

template <>
struct NaturalTypeForWireType<
    ::test_errorsyntax::wire::ExampleUseOfErrorSyntaxCallWhichMayFailRequest> {
  using type =
      ::test_errorsyntax::ExampleUseOfErrorSyntaxCallWhichMayFailRequest;
};

template <>
struct WireNaturalConversionTraits<
    ::test_errorsyntax::wire::ExampleUseOfErrorSyntaxCallWhichMayFailResult,
    ::test_errorsyntax::ExampleUseOfErrorSyntaxCallWhichMayFailResult> {
  static ::test_errorsyntax::ExampleUseOfErrorSyntaxCallWhichMayFailResult
  ToNatural(
      ::test_errorsyntax::wire::ExampleUseOfErrorSyntaxCallWhichMayFailResult
          src);
};

template <>
struct WireNaturalConversionTraits<
    ::test_errorsyntax::wire::ExampleUseOfErrorSyntaxCallWhichMayFailResult,
    std::unique_ptr<
        ::test_errorsyntax::ExampleUseOfErrorSyntaxCallWhichMayFailResult>> {
  static std::unique_ptr<
      ::test_errorsyntax::ExampleUseOfErrorSyntaxCallWhichMayFailResult>
  ToNatural(
      ::test_errorsyntax::wire::ExampleUseOfErrorSyntaxCallWhichMayFailResult
          src);
};

template <>
struct NaturalTypeForWireType<
    ::test_errorsyntax::wire::ExampleUseOfErrorSyntaxCallWhichMayFailResult> {
  using type = std::unique_ptr<
      ::test_errorsyntax::ExampleUseOfErrorSyntaxCallWhichMayFailResult>;
};

#ifdef __Fuchsia__

template <>
struct WireNaturalConversionTraits<
    ::fidl::WireRequest<
        ::test_errorsyntax::ExampleUseOfErrorSyntax::ComposedCallWhichMayFail>,
    ::fidl::Request<::test_errorsyntax::ExampleUseOfErrorSyntax::
                        ComposedCallWhichMayFail>> {
  static ::fidl::Request<
      ::test_errorsyntax::ExampleUseOfErrorSyntax::ComposedCallWhichMayFail>
  ToNatural(
      ::fidl::WireRequest<
          ::test_errorsyntax::ExampleUseOfErrorSyntax::ComposedCallWhichMayFail>
          src);
};

template <>
struct NaturalTypeForWireType<::fidl::WireRequest<
    ::test_errorsyntax::ExampleUseOfErrorSyntax::ComposedCallWhichMayFail>> {
  using type = ::fidl::Request<
      ::test_errorsyntax::ExampleUseOfErrorSyntax::ComposedCallWhichMayFail>;
};

template <>
struct WireNaturalConversionTraits<
    ::fidl::WireRequest<
        ::test_errorsyntax::ExampleUseOfErrorSyntax::CallWhichMayFail>,
    ::fidl::Request<
        ::test_errorsyntax::ExampleUseOfErrorSyntax::CallWhichMayFail>> {
  static ::fidl::Request<
      ::test_errorsyntax::ExampleUseOfErrorSyntax::CallWhichMayFail>
  ToNatural(::fidl::WireRequest<
            ::test_errorsyntax::ExampleUseOfErrorSyntax::CallWhichMayFail>
                src);
};

template <>
struct NaturalTypeForWireType<::fidl::WireRequest<
    ::test_errorsyntax::ExampleUseOfErrorSyntax::CallWhichMayFail>> {
  using type = ::fidl::Request<
      ::test_errorsyntax::ExampleUseOfErrorSyntax::CallWhichMayFail>;
};

template <>
struct WireNaturalConversionTraits<
    ::fidl::WireResponse<
        ::test_errorsyntax::ExampleUseOfErrorSyntax::ComposedCallWhichMayFail>,
    ::fidl::Response<::test_errorsyntax::ExampleUseOfErrorSyntax::
                         ComposedCallWhichMayFail>> {
  static ::fidl::Response<
      ::test_errorsyntax::ExampleUseOfErrorSyntax::ComposedCallWhichMayFail>
  ToNatural(
      ::fidl::WireResponse<
          ::test_errorsyntax::ExampleUseOfErrorSyntax::ComposedCallWhichMayFail>
          src);
};

template <>
struct NaturalTypeForWireType<::fidl::WireResponse<
    ::test_errorsyntax::ExampleUseOfErrorSyntax::ComposedCallWhichMayFail>> {
  using type = ::fidl::Response<
      ::test_errorsyntax::ExampleUseOfErrorSyntax::ComposedCallWhichMayFail>;
};

template <>
struct WireNaturalConversionTraits<
    ::fidl::WireResponse<
        ::test_errorsyntax::ExampleUseOfErrorSyntax::CallWhichMayFail>,
    ::fidl::Response<
        ::test_errorsyntax::ExampleUseOfErrorSyntax::CallWhichMayFail>> {
  static ::fidl::Response<
      ::test_errorsyntax::ExampleUseOfErrorSyntax::CallWhichMayFail>
  ToNatural(::fidl::WireResponse<
            ::test_errorsyntax::ExampleUseOfErrorSyntax::CallWhichMayFail>
                src);
};

template <>
struct NaturalTypeForWireType<::fidl::WireResponse<
    ::test_errorsyntax::ExampleUseOfErrorSyntax::CallWhichMayFail>> {
  using type = ::fidl::Response<
      ::test_errorsyntax::ExampleUseOfErrorSyntax::CallWhichMayFail>;
};
#endif  // __Fuchsia__
}  // namespace internal
}  // namespace fidl
