// WARNING: This file is machine generated by fidlgen.

#pragma once

#include <fidl/test.inheritance/cpp/common_types.h>
#include <fidl/test.inheritance/cpp/markers.h>
#include <lib/fidl/cpp/coding_traits.h>
#include <lib/fidl/cpp/internal/codable_base.h>
#include <lib/fidl/cpp/unified_messaging.h>

#include <cinttypes>
#include <string>

#ifdef __Fuchsia__

#include <lib/zx/channel.h>

#endif  // __Fuchsia__

namespace test_inheritance {
class SuperFooTopResponse;

class SuperFooRequest;

extern "C" const fidl_type_t test_inheritance_SuperFooTopResponseTable;

class SuperFooTopResponse final
    : public ::fidl::internal::CodableBase<SuperFooTopResponse> {
 private:
  friend ::fidl::internal::CodableBase<SuperFooTopResponse>;
  friend ::fidl::CodingTraits<SuperFooTopResponse>;
  SuperFooTopResponse(::fidl::Decoder& decoder);
  template <typename Payload>
  friend auto ::fidl::internal::EncodeTransactionalMessageWithoutValidating(
      ::fidl::Encoder& encoder, Payload&& payload)
      -> ::fidl::HLCPPOutgoingMessage;
  void EncodeWithoutValidating(::fidl::Encoder& encoder, size_t offset);

 public:
  struct Storage final {
    int64_t y{};
  };

  SuperFooTopResponse(Storage storage) noexcept
      : storage_(std::move(storage)) {}
  SuperFooTopResponse(int64_t y) noexcept : storage_({.y = std::move(y)}) {}
  SuperFooTopResponse() : SuperFooTopResponse(Storage{}) {}

  SuperFooTopResponse(SuperFooTopResponse&&) noexcept = default;
  SuperFooTopResponse& operator=(SuperFooTopResponse&&) noexcept = default;
  SuperFooTopResponse(const SuperFooTopResponse& other) noexcept
      : SuperFooTopResponse(other.CloneStorage()) {}
  SuperFooTopResponse& operator=(const SuperFooTopResponse& other) noexcept {
    storage_ = other.CloneStorage();
    return *this;
  }

  int64_t y() const { return storage_.y; }

  int64_t& y() { return storage_.y; }

 private:
  Storage storage_;
  Storage CloneStorage() const;
};

extern "C" const fidl_type_t test_inheritance_SuperFooRequestTable;

class SuperFooRequest final
    : public ::fidl::internal::CodableBase<SuperFooRequest> {
 private:
  friend ::fidl::internal::CodableBase<SuperFooRequest>;
  friend ::fidl::CodingTraits<SuperFooRequest>;
  SuperFooRequest(::fidl::Decoder& decoder);
  template <typename Payload>
  friend auto ::fidl::internal::EncodeTransactionalMessageWithoutValidating(
      ::fidl::Encoder& encoder, Payload&& payload)
      -> ::fidl::HLCPPOutgoingMessage;
  void EncodeWithoutValidating(::fidl::Encoder& encoder, size_t offset);

 public:
  struct Storage final {
    ::std::string s{};
  };

  SuperFooRequest(Storage storage) noexcept : storage_(std::move(storage)) {}
  SuperFooRequest(::std::string s) noexcept : storage_({.s = std::move(s)}) {}
  SuperFooRequest() : SuperFooRequest(Storage{}) {}

  SuperFooRequest(SuperFooRequest&&) noexcept = default;
  SuperFooRequest& operator=(SuperFooRequest&&) noexcept = default;
  SuperFooRequest(const SuperFooRequest& other) noexcept
      : SuperFooRequest(other.CloneStorage()) {}
  SuperFooRequest& operator=(const SuperFooRequest& other) noexcept {
    storage_ = other.CloneStorage();
    return *this;
  }

  const ::std::string& s() const { return storage_.s; }

  ::std::string& s() { return storage_.s; }

 private:
  Storage storage_;
  Storage CloneStorage() const;
};

}  // namespace test_inheritance
namespace fidl {

#ifdef __Fuchsia__
extern "C" const fidl_type_t test_inheritance_SuperFooTopResponseTable;

template <>
struct IsFidlType<::test_inheritance::SuperFooTopResponse>
    : public std::true_type {};

template <>
struct ::fidl::internal::TypeTraits<::test_inheritance::SuperFooTopResponse>
    final {
 public:
  static constexpr const fidl_type_t* kCodingTable =
      &test_inheritance_SuperFooTopResponseTable;
};

template <>
struct CodingTraits<::test_inheritance::SuperFooTopResponse> {
  static constexpr size_t inline_size_v1_no_ee = 8;
  static constexpr size_t inline_size_v2 = 8;

  template <class EncoderImpl>
  static void Encode(
      EncoderImpl* encoder, ::test_inheritance::SuperFooTopResponse* value,
      size_t offset,
      cpp17::optional<HandleInformation> maybe_handle_info = cpp17::nullopt) {
    [[maybe_unused]] uint32_t field_offset;
    field_offset =
        encoder->wire_format() == ::fidl::internal::WireFormatVersion::kV1 ? 0
                                                                           : 0;
    ::fidl::Encode(encoder, &value->storage_.y, offset + field_offset);
  }

  template <typename DecoderImpl>
  static void Decode(DecoderImpl* decoder,
                     ::test_inheritance::SuperFooTopResponse* value,
                     size_t offset) {
    ::fidl::Decode(decoder, &value->storage_.y, offset + 0);
  }
};
#endif  // __Fuchsia__

#ifdef __Fuchsia__
extern "C" const fidl_type_t test_inheritance_SuperFooRequestTable;

template <>
struct IsFidlType<::test_inheritance::SuperFooRequest> : public std::true_type {
};

template <>
struct ::fidl::internal::TypeTraits<::test_inheritance::SuperFooRequest> final {
 public:
  static constexpr const fidl_type_t* kCodingTable =
      &test_inheritance_SuperFooRequestTable;
};

template <>
struct CodingTraits<::test_inheritance::SuperFooRequest> {
  static constexpr size_t inline_size_v1_no_ee = 16;
  static constexpr size_t inline_size_v2 = 16;

  template <class EncoderImpl>
  static void Encode(
      EncoderImpl* encoder, ::test_inheritance::SuperFooRequest* value,
      size_t offset,
      cpp17::optional<HandleInformation> maybe_handle_info = cpp17::nullopt) {
    [[maybe_unused]] uint32_t field_offset;
    field_offset =
        encoder->wire_format() == ::fidl::internal::WireFormatVersion::kV1 ? 0
                                                                           : 0;
    ::fidl::Encode(encoder, &value->storage_.s, offset + field_offset);
  }

  template <typename DecoderImpl>
  static void Decode(DecoderImpl* decoder,
                     ::test_inheritance::SuperFooRequest* value,
                     size_t offset) {
    ::fidl::Decode(decoder, &value->storage_.s, offset + 0);
  }
};
#endif  // __Fuchsia__

}  // namespace fidl
