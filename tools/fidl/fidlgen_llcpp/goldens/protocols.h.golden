// WARNING: This file is machine generated by fidlgen.

#pragma once

#include <lib/fidl/internal.h>
#include <lib/fidl/llcpp/array.h>
#include <lib/fidl/llcpp/coding.h>
#include <lib/fidl/llcpp/envelope.h>
#include <lib/fidl/llcpp/errors.h>
#include <lib/fidl/llcpp/memory.h>
#include <lib/fidl/llcpp/message.h>
#include <lib/fidl/llcpp/message_storage.h>
#include <lib/fidl/llcpp/object_view.h>
#include <lib/fidl/llcpp/string_view.h>
#include <lib/fidl/llcpp/traits.h>
#include <lib/fidl/llcpp/vector_view.h>
#include <lib/fit/function.h>
#include <lib/stdcompat/optional.h>

#include <algorithm>
#include <cstddef>
#include <variant>
#ifdef __Fuchsia__
#include <lib/fidl/llcpp/client.h>
#include <lib/fidl/llcpp/client_end.h>
#include <lib/fidl/llcpp/connect_service.h>
#include <lib/fidl/llcpp/result.h>
#include <lib/fidl/llcpp/server.h>
#include <lib/fidl/llcpp/server_end.h>
#include <lib/fidl/llcpp/service_handler_interface.h>
#include <lib/fidl/llcpp/sync_call.h>
#include <lib/fidl/llcpp/transaction.h>
#include <lib/fidl/llcpp/wire_messaging.h>
#include <lib/fidl/txn_header.h>
#include <lib/zx/channel.h>
#include <lib/zx/handle.h>
#include <lib/zx/socket.h>

#endif  // __Fuchsia__
#include <zircon/fidl.h>

namespace fidl_test_protocols {
namespace wire {

enum class obj_type : uint32_t {

  NONE = 0u,

  SOCKET = 14u,
};

struct WithErrorSyntax_ResponseAsStruct_Response;

class WithErrorSyntax_ResponseAsStruct_Result;

struct WithErrorSyntax_ErrorAsPrimitive_Response;

class WithErrorSyntax_ErrorAsPrimitive_Result;

struct WithErrorSyntax_ErrorAsEnum_Response;
}  // namespace wire
class Transitional;

class ChannelProtocol;

class WithAndWithoutRequestResponse;
namespace wire {

enum class ErrorEnun : uint32_t {

  ERR_FOO = 1u,

  ERR_BAR = 2u,
};

class WithErrorSyntax_ErrorAsEnum_Result;
}  // namespace wire
class WithErrorSyntax;
namespace wire {

extern "C" const fidl_type_t
    fidl_test_protocols_WithErrorSyntax_ResponseAsStruct_ResultTable;

class WithErrorSyntax_ResponseAsStruct_Result {
 public:
  WithErrorSyntax_ResponseAsStruct_Result()
      : ordinal_(Ordinal::Invalid), envelope_{} {}

  WithErrorSyntax_ResponseAsStruct_Result(
      WithErrorSyntax_ResponseAsStruct_Result&&) = default;
  WithErrorSyntax_ResponseAsStruct_Result& operator=(
      WithErrorSyntax_ResponseAsStruct_Result&&) = default;

  enum class Tag : fidl_xunion_tag_t {
    kResponse = 1,  // 0x1
    kErr = 2,       // 0x2
  };

  bool has_invalid_tag() const { return ordinal_ == Ordinal::Invalid; }

  bool is_response() const { return ordinal_ == Ordinal::kResponse; }

  static WithErrorSyntax_ResponseAsStruct_Result WithResponse(
      ::fidl::ObjectView<::fidl_test_protocols::wire::
                             WithErrorSyntax_ResponseAsStruct_Response>
          val) {
    WithErrorSyntax_ResponseAsStruct_Result result;
    result.set_response(val);
    return result;
  }

  template <typename... Args>
  static WithErrorSyntax_ResponseAsStruct_Result WithResponse(
      ::fidl::AnyAllocator& allocator, Args&&... args) {
    WithErrorSyntax_ResponseAsStruct_Result result;
    result.set_response(
        ::fidl::ObjectView<::fidl_test_protocols::wire::
                               WithErrorSyntax_ResponseAsStruct_Response>(
            allocator, std::forward<Args>(args)...));
    return result;
  }

  void set_response(
      ::fidl::ObjectView<::fidl_test_protocols::wire::
                             WithErrorSyntax_ResponseAsStruct_Response>
          elem) {
    ordinal_ = Ordinal::kResponse;
    envelope_.data = ::fidl::ObjectView<void>(
        ::fidl::unowned_ptr_t<void>(static_cast<void*>(elem.get())));
  }

  template <typename... Args>
  void set_response(::fidl::AnyAllocator& allocator, Args&&... args) {
    ordinal_ = Ordinal::kResponse;
    set_response(
        ::fidl::ObjectView<::fidl_test_protocols::wire::
                               WithErrorSyntax_ResponseAsStruct_Response>(
            allocator, std::forward<Args>(args)...));
  }

  ::fidl_test_protocols::wire::WithErrorSyntax_ResponseAsStruct_Response&
  mutable_response() {
    ZX_ASSERT(ordinal_ == Ordinal::kResponse);
    return *static_cast<::fidl_test_protocols::wire::
                            WithErrorSyntax_ResponseAsStruct_Response*>(
        envelope_.data.get());
  }
  const ::fidl_test_protocols::wire::WithErrorSyntax_ResponseAsStruct_Response&
  response() const {
    ZX_ASSERT(ordinal_ == Ordinal::kResponse);
    return *static_cast<::fidl_test_protocols::wire::
                            WithErrorSyntax_ResponseAsStruct_Response*>(
        envelope_.data.get());
  }

  bool is_err() const { return ordinal_ == Ordinal::kErr; }

  static WithErrorSyntax_ResponseAsStruct_Result WithErr(
      ::fidl::ObjectView<uint32_t> val) {
    WithErrorSyntax_ResponseAsStruct_Result result;
    result.set_err(val);
    return result;
  }

  template <typename... Args>
  static WithErrorSyntax_ResponseAsStruct_Result WithErr(
      ::fidl::AnyAllocator& allocator, Args&&... args) {
    WithErrorSyntax_ResponseAsStruct_Result result;
    result.set_err(
        ::fidl::ObjectView<uint32_t>(allocator, std::forward<Args>(args)...));
    return result;
  }

  void set_err(::fidl::ObjectView<uint32_t> elem) {
    ordinal_ = Ordinal::kErr;
    envelope_.data = ::fidl::ObjectView<void>(
        ::fidl::unowned_ptr_t<void>(static_cast<void*>(elem.get())));
  }

  template <typename... Args>
  void set_err(::fidl::AnyAllocator& allocator, Args&&... args) {
    ordinal_ = Ordinal::kErr;
    set_err(
        ::fidl::ObjectView<uint32_t>(allocator, std::forward<Args>(args)...));
  }

  uint32_t& mutable_err() {
    ZX_ASSERT(ordinal_ == Ordinal::kErr);
    return *static_cast<uint32_t*>(envelope_.data.get());
  }
  const uint32_t& err() const {
    ZX_ASSERT(ordinal_ == Ordinal::kErr);
    return *static_cast<uint32_t*>(envelope_.data.get());
  }
  Tag which() const {
    ZX_ASSERT(!has_invalid_tag());
    return static_cast<Tag>(ordinal_);
  }

  static constexpr const fidl_type_t* Type =
      &fidl_test_protocols_WithErrorSyntax_ResponseAsStruct_ResultTable;
  static constexpr uint32_t MaxNumHandles = 0;
  static constexpr uint32_t PrimarySize = 24;
  [[maybe_unused]] static constexpr uint32_t MaxOutOfLine = 24;
  static constexpr bool HasPointer = true;

 private:
  enum class Ordinal : fidl_xunion_tag_t {
    Invalid = 0,
    kResponse = 1,  // 0x1
    kErr = 2,       // 0x2
  };

  static void SizeAndOffsetAssertionHelper();
  Ordinal ordinal_;
  FIDL_ALIGNDECL
  ::fidl::Envelope<void> envelope_;
};

extern "C" const fidl_type_t
    fidl_test_protocols_WithErrorSyntax_ErrorAsPrimitive_ResultTable;

class WithErrorSyntax_ErrorAsPrimitive_Result {
 public:
  WithErrorSyntax_ErrorAsPrimitive_Result()
      : ordinal_(Ordinal::Invalid), envelope_{} {}

  WithErrorSyntax_ErrorAsPrimitive_Result(
      WithErrorSyntax_ErrorAsPrimitive_Result&&) = default;
  WithErrorSyntax_ErrorAsPrimitive_Result& operator=(
      WithErrorSyntax_ErrorAsPrimitive_Result&&) = default;

  enum class Tag : fidl_xunion_tag_t {
    kResponse = 1,  // 0x1
    kErr = 2,       // 0x2
  };

  bool has_invalid_tag() const { return ordinal_ == Ordinal::Invalid; }

  bool is_response() const { return ordinal_ == Ordinal::kResponse; }

  static WithErrorSyntax_ErrorAsPrimitive_Result WithResponse(
      ::fidl::ObjectView<::fidl_test_protocols::wire::
                             WithErrorSyntax_ErrorAsPrimitive_Response>
          val) {
    WithErrorSyntax_ErrorAsPrimitive_Result result;
    result.set_response(val);
    return result;
  }

  template <typename... Args>
  static WithErrorSyntax_ErrorAsPrimitive_Result WithResponse(
      ::fidl::AnyAllocator& allocator, Args&&... args) {
    WithErrorSyntax_ErrorAsPrimitive_Result result;
    result.set_response(
        ::fidl::ObjectView<::fidl_test_protocols::wire::
                               WithErrorSyntax_ErrorAsPrimitive_Response>(
            allocator, std::forward<Args>(args)...));
    return result;
  }

  void set_response(
      ::fidl::ObjectView<::fidl_test_protocols::wire::
                             WithErrorSyntax_ErrorAsPrimitive_Response>
          elem) {
    ordinal_ = Ordinal::kResponse;
    envelope_.data = ::fidl::ObjectView<void>(
        ::fidl::unowned_ptr_t<void>(static_cast<void*>(elem.get())));
  }

  template <typename... Args>
  void set_response(::fidl::AnyAllocator& allocator, Args&&... args) {
    ordinal_ = Ordinal::kResponse;
    set_response(
        ::fidl::ObjectView<::fidl_test_protocols::wire::
                               WithErrorSyntax_ErrorAsPrimitive_Response>(
            allocator, std::forward<Args>(args)...));
  }

  ::fidl_test_protocols::wire::WithErrorSyntax_ErrorAsPrimitive_Response&
  mutable_response() {
    ZX_ASSERT(ordinal_ == Ordinal::kResponse);
    return *static_cast<::fidl_test_protocols::wire::
                            WithErrorSyntax_ErrorAsPrimitive_Response*>(
        envelope_.data.get());
  }
  const ::fidl_test_protocols::wire::WithErrorSyntax_ErrorAsPrimitive_Response&
  response() const {
    ZX_ASSERT(ordinal_ == Ordinal::kResponse);
    return *static_cast<::fidl_test_protocols::wire::
                            WithErrorSyntax_ErrorAsPrimitive_Response*>(
        envelope_.data.get());
  }

  bool is_err() const { return ordinal_ == Ordinal::kErr; }

  static WithErrorSyntax_ErrorAsPrimitive_Result WithErr(
      ::fidl::ObjectView<uint32_t> val) {
    WithErrorSyntax_ErrorAsPrimitive_Result result;
    result.set_err(val);
    return result;
  }

  template <typename... Args>
  static WithErrorSyntax_ErrorAsPrimitive_Result WithErr(
      ::fidl::AnyAllocator& allocator, Args&&... args) {
    WithErrorSyntax_ErrorAsPrimitive_Result result;
    result.set_err(
        ::fidl::ObjectView<uint32_t>(allocator, std::forward<Args>(args)...));
    return result;
  }

  void set_err(::fidl::ObjectView<uint32_t> elem) {
    ordinal_ = Ordinal::kErr;
    envelope_.data = ::fidl::ObjectView<void>(
        ::fidl::unowned_ptr_t<void>(static_cast<void*>(elem.get())));
  }

  template <typename... Args>
  void set_err(::fidl::AnyAllocator& allocator, Args&&... args) {
    ordinal_ = Ordinal::kErr;
    set_err(
        ::fidl::ObjectView<uint32_t>(allocator, std::forward<Args>(args)...));
  }

  uint32_t& mutable_err() {
    ZX_ASSERT(ordinal_ == Ordinal::kErr);
    return *static_cast<uint32_t*>(envelope_.data.get());
  }
  const uint32_t& err() const {
    ZX_ASSERT(ordinal_ == Ordinal::kErr);
    return *static_cast<uint32_t*>(envelope_.data.get());
  }
  Tag which() const {
    ZX_ASSERT(!has_invalid_tag());
    return static_cast<Tag>(ordinal_);
  }

  static constexpr const fidl_type_t* Type =
      &fidl_test_protocols_WithErrorSyntax_ErrorAsPrimitive_ResultTable;
  static constexpr uint32_t MaxNumHandles = 0;
  static constexpr uint32_t PrimarySize = 24;
  [[maybe_unused]] static constexpr uint32_t MaxOutOfLine = 8;
  static constexpr bool HasPointer = true;

 private:
  enum class Ordinal : fidl_xunion_tag_t {
    Invalid = 0,
    kResponse = 1,  // 0x1
    kErr = 2,       // 0x2
  };

  static void SizeAndOffsetAssertionHelper();
  Ordinal ordinal_;
  FIDL_ALIGNDECL
  ::fidl::Envelope<void> envelope_;
};

extern "C" const fidl_type_t
    fidl_test_protocols_WithErrorSyntax_ErrorAsEnum_ResultTable;

class WithErrorSyntax_ErrorAsEnum_Result {
 public:
  WithErrorSyntax_ErrorAsEnum_Result()
      : ordinal_(Ordinal::Invalid), envelope_{} {}

  WithErrorSyntax_ErrorAsEnum_Result(WithErrorSyntax_ErrorAsEnum_Result&&) =
      default;
  WithErrorSyntax_ErrorAsEnum_Result& operator=(
      WithErrorSyntax_ErrorAsEnum_Result&&) = default;

  enum class Tag : fidl_xunion_tag_t {
    kResponse = 1,  // 0x1
    kErr = 2,       // 0x2
  };

  bool has_invalid_tag() const { return ordinal_ == Ordinal::Invalid; }

  bool is_response() const { return ordinal_ == Ordinal::kResponse; }

  static WithErrorSyntax_ErrorAsEnum_Result WithResponse(
      ::fidl::ObjectView<
          ::fidl_test_protocols::wire::WithErrorSyntax_ErrorAsEnum_Response>
          val) {
    WithErrorSyntax_ErrorAsEnum_Result result;
    result.set_response(val);
    return result;
  }

  template <typename... Args>
  static WithErrorSyntax_ErrorAsEnum_Result WithResponse(
      ::fidl::AnyAllocator& allocator, Args&&... args) {
    WithErrorSyntax_ErrorAsEnum_Result result;
    result.set_response(
        ::fidl::ObjectView<
            ::fidl_test_protocols::wire::WithErrorSyntax_ErrorAsEnum_Response>(
            allocator, std::forward<Args>(args)...));
    return result;
  }

  void set_response(
      ::fidl::ObjectView<
          ::fidl_test_protocols::wire::WithErrorSyntax_ErrorAsEnum_Response>
          elem) {
    ordinal_ = Ordinal::kResponse;
    envelope_.data = ::fidl::ObjectView<void>(
        ::fidl::unowned_ptr_t<void>(static_cast<void*>(elem.get())));
  }

  template <typename... Args>
  void set_response(::fidl::AnyAllocator& allocator, Args&&... args) {
    ordinal_ = Ordinal::kResponse;
    set_response(
        ::fidl::ObjectView<
            ::fidl_test_protocols::wire::WithErrorSyntax_ErrorAsEnum_Response>(
            allocator, std::forward<Args>(args)...));
  }

  ::fidl_test_protocols::wire::WithErrorSyntax_ErrorAsEnum_Response&
  mutable_response() {
    ZX_ASSERT(ordinal_ == Ordinal::kResponse);
    return *static_cast<
        ::fidl_test_protocols::wire::WithErrorSyntax_ErrorAsEnum_Response*>(
        envelope_.data.get());
  }
  const ::fidl_test_protocols::wire::WithErrorSyntax_ErrorAsEnum_Response&
  response() const {
    ZX_ASSERT(ordinal_ == Ordinal::kResponse);
    return *static_cast<
        ::fidl_test_protocols::wire::WithErrorSyntax_ErrorAsEnum_Response*>(
        envelope_.data.get());
  }

  bool is_err() const { return ordinal_ == Ordinal::kErr; }

  static WithErrorSyntax_ErrorAsEnum_Result WithErr(
      ::fidl::ObjectView<::fidl_test_protocols::wire::ErrorEnun> val) {
    WithErrorSyntax_ErrorAsEnum_Result result;
    result.set_err(val);
    return result;
  }

  template <typename... Args>
  static WithErrorSyntax_ErrorAsEnum_Result WithErr(
      ::fidl::AnyAllocator& allocator, Args&&... args) {
    WithErrorSyntax_ErrorAsEnum_Result result;
    result.set_err(::fidl::ObjectView<::fidl_test_protocols::wire::ErrorEnun>(
        allocator, std::forward<Args>(args)...));
    return result;
  }

  void set_err(
      ::fidl::ObjectView<::fidl_test_protocols::wire::ErrorEnun> elem) {
    ordinal_ = Ordinal::kErr;
    envelope_.data = ::fidl::ObjectView<void>(
        ::fidl::unowned_ptr_t<void>(static_cast<void*>(elem.get())));
  }

  template <typename... Args>
  void set_err(::fidl::AnyAllocator& allocator, Args&&... args) {
    ordinal_ = Ordinal::kErr;
    set_err(::fidl::ObjectView<::fidl_test_protocols::wire::ErrorEnun>(
        allocator, std::forward<Args>(args)...));
  }

  ::fidl_test_protocols::wire::ErrorEnun& mutable_err() {
    ZX_ASSERT(ordinal_ == Ordinal::kErr);
    return *static_cast<::fidl_test_protocols::wire::ErrorEnun*>(
        envelope_.data.get());
  }
  const ::fidl_test_protocols::wire::ErrorEnun& err() const {
    ZX_ASSERT(ordinal_ == Ordinal::kErr);
    return *static_cast<::fidl_test_protocols::wire::ErrorEnun*>(
        envelope_.data.get());
  }
  Tag which() const {
    ZX_ASSERT(!has_invalid_tag());
    return static_cast<Tag>(ordinal_);
  }

  static constexpr const fidl_type_t* Type =
      &fidl_test_protocols_WithErrorSyntax_ErrorAsEnum_ResultTable;
  static constexpr uint32_t MaxNumHandles = 0;
  static constexpr uint32_t PrimarySize = 24;
  [[maybe_unused]] static constexpr uint32_t MaxOutOfLine = 8;
  static constexpr bool HasPointer = true;

 private:
  enum class Ordinal : fidl_xunion_tag_t {
    Invalid = 0,
    kResponse = 1,  // 0x1
    kErr = 2,       // 0x2
  };

  static void SizeAndOffsetAssertionHelper();
  Ordinal ordinal_;
  FIDL_ALIGNDECL
  ::fidl::Envelope<void> envelope_;
};

extern "C" const fidl_type_t
    fidl_test_protocols_WithErrorSyntax_ResponseAsStruct_ResponseTable;

struct WithErrorSyntax_ResponseAsStruct_Response {
  static constexpr const fidl_type_t* Type =
      &fidl_test_protocols_WithErrorSyntax_ResponseAsStruct_ResponseTable;
  static constexpr uint32_t MaxNumHandles = 0;
  static constexpr uint32_t PrimarySize = 24;
  [[maybe_unused]] static constexpr uint32_t MaxOutOfLine = 0;
  static constexpr bool HasPointer = false;

  int64_t a = {};

  int64_t b = {};

  int64_t c = {};

  class UnownedEncodedMessage final {
   public:
    UnownedEncodedMessage(uint8_t* bytes, uint32_t byte_size,
                          WithErrorSyntax_ResponseAsStruct_Response* value)
        : message_(bytes, byte_size,
                   sizeof(WithErrorSyntax_ResponseAsStruct_Response), nullptr,
                   0, 0) {
      message_.Encode<WithErrorSyntax_ResponseAsStruct_Response>(value);
    }
    UnownedEncodedMessage(const UnownedEncodedMessage&) = delete;
    UnownedEncodedMessage(UnownedEncodedMessage&&) = delete;
    UnownedEncodedMessage* operator=(const UnownedEncodedMessage&) = delete;
    UnownedEncodedMessage* operator=(UnownedEncodedMessage&&) = delete;

    zx_status_t status() const { return message_.status(); }
#ifdef __Fuchsia__
    const char* status_string() const { return message_.status_string(); }
#endif
    bool ok() const { return message_.status() == ZX_OK; }
    const char* error() const { return message_.error(); }

    ::fidl::OutgoingMessage& GetOutgoingMessage() { return message_; }

   private:
    ::fidl::OutgoingMessage message_;
  };

  class OwnedEncodedMessage final {
   public:
    explicit OwnedEncodedMessage(
        WithErrorSyntax_ResponseAsStruct_Response* value)
        : message_(bytes_.data(), bytes_.size(), value) {}
    OwnedEncodedMessage(const OwnedEncodedMessage&) = delete;
    OwnedEncodedMessage(OwnedEncodedMessage&&) = delete;
    OwnedEncodedMessage* operator=(const OwnedEncodedMessage&) = delete;
    OwnedEncodedMessage* operator=(OwnedEncodedMessage&&) = delete;

    zx_status_t status() const { return message_.status(); }
#ifdef __Fuchsia__
    const char* status_string() const { return message_.status_string(); }
#endif
    bool ok() const { return message_.ok(); }
    const char* error() const { return message_.error(); }

    ::fidl::OutgoingMessage& GetOutgoingMessage() {
      return message_.GetOutgoingMessage();
    }

   private:
    ::fidl::internal::InlineMessageBuffer<24> bytes_;
    UnownedEncodedMessage message_;
  };

  class DecodedMessage final : public ::fidl::internal::IncomingMessage {
   public:
    DecodedMessage(uint8_t* bytes, uint32_t byte_actual,
                   zx_handle_info_t* handles = nullptr,
                   uint32_t handle_actual = 0)
        : ::fidl::internal::IncomingMessage(bytes, byte_actual, handles,
                                            handle_actual) {
      Decode<struct WithErrorSyntax_ResponseAsStruct_Response>();
    }
    DecodedMessage(fidl_incoming_msg_t* msg)
        : ::fidl::internal::IncomingMessage(msg) {
      Decode<struct WithErrorSyntax_ResponseAsStruct_Response>();
    }
    DecodedMessage(const DecodedMessage&) = delete;
    DecodedMessage(DecodedMessage&&) = delete;
    DecodedMessage* operator=(const DecodedMessage&) = delete;
    DecodedMessage* operator=(DecodedMessage&&) = delete;

    struct WithErrorSyntax_ResponseAsStruct_Response* PrimaryObject() {
      ZX_DEBUG_ASSERT(ok());
      return reinterpret_cast<
          struct WithErrorSyntax_ResponseAsStruct_Response*>(bytes());
    }

    // Release the ownership of the decoded message. That means that the handles
    // won't be closed When the object is destroyed. After calling this method,
    // the DecodedMessage object should not be used anymore.
    void ReleasePrimaryObject() { ResetBytes(); }
  };
};

extern "C" const fidl_type_t
    fidl_test_protocols_WithErrorSyntax_ErrorAsPrimitive_ResponseTable;

struct WithErrorSyntax_ErrorAsPrimitive_Response {
  static constexpr const fidl_type_t* Type =
      &fidl_test_protocols_WithErrorSyntax_ErrorAsPrimitive_ResponseTable;
  static constexpr uint32_t MaxNumHandles = 0;
  static constexpr uint32_t PrimarySize = 1;
  [[maybe_unused]] static constexpr uint32_t MaxOutOfLine = 0;
  static constexpr bool HasPointer = false;

  uint8_t __reserved = {};

  class UnownedEncodedMessage final {
   public:
    UnownedEncodedMessage(uint8_t* bytes, uint32_t byte_size,
                          WithErrorSyntax_ErrorAsPrimitive_Response* value)
        : message_(bytes, byte_size,
                   sizeof(WithErrorSyntax_ErrorAsPrimitive_Response), nullptr,
                   0, 0) {
      message_.Encode<WithErrorSyntax_ErrorAsPrimitive_Response>(value);
    }
    UnownedEncodedMessage(const UnownedEncodedMessage&) = delete;
    UnownedEncodedMessage(UnownedEncodedMessage&&) = delete;
    UnownedEncodedMessage* operator=(const UnownedEncodedMessage&) = delete;
    UnownedEncodedMessage* operator=(UnownedEncodedMessage&&) = delete;

    zx_status_t status() const { return message_.status(); }
#ifdef __Fuchsia__
    const char* status_string() const { return message_.status_string(); }
#endif
    bool ok() const { return message_.status() == ZX_OK; }
    const char* error() const { return message_.error(); }

    ::fidl::OutgoingMessage& GetOutgoingMessage() { return message_; }

   private:
    ::fidl::OutgoingMessage message_;
  };

  class OwnedEncodedMessage final {
   public:
    explicit OwnedEncodedMessage(
        WithErrorSyntax_ErrorAsPrimitive_Response* value)
        : message_(bytes_.data(), bytes_.size(), value) {}
    OwnedEncodedMessage(const OwnedEncodedMessage&) = delete;
    OwnedEncodedMessage(OwnedEncodedMessage&&) = delete;
    OwnedEncodedMessage* operator=(const OwnedEncodedMessage&) = delete;
    OwnedEncodedMessage* operator=(OwnedEncodedMessage&&) = delete;

    zx_status_t status() const { return message_.status(); }
#ifdef __Fuchsia__
    const char* status_string() const { return message_.status_string(); }
#endif
    bool ok() const { return message_.ok(); }
    const char* error() const { return message_.error(); }

    ::fidl::OutgoingMessage& GetOutgoingMessage() {
      return message_.GetOutgoingMessage();
    }

   private:
    ::fidl::internal::InlineMessageBuffer<8> bytes_;
    UnownedEncodedMessage message_;
  };

  class DecodedMessage final : public ::fidl::internal::IncomingMessage {
   public:
    DecodedMessage(uint8_t* bytes, uint32_t byte_actual,
                   zx_handle_info_t* handles = nullptr,
                   uint32_t handle_actual = 0)
        : ::fidl::internal::IncomingMessage(bytes, byte_actual, handles,
                                            handle_actual) {
      Decode<struct WithErrorSyntax_ErrorAsPrimitive_Response>();
    }
    DecodedMessage(fidl_incoming_msg_t* msg)
        : ::fidl::internal::IncomingMessage(msg) {
      Decode<struct WithErrorSyntax_ErrorAsPrimitive_Response>();
    }
    DecodedMessage(const DecodedMessage&) = delete;
    DecodedMessage(DecodedMessage&&) = delete;
    DecodedMessage* operator=(const DecodedMessage&) = delete;
    DecodedMessage* operator=(DecodedMessage&&) = delete;

    struct WithErrorSyntax_ErrorAsPrimitive_Response* PrimaryObject() {
      ZX_DEBUG_ASSERT(ok());
      return reinterpret_cast<
          struct WithErrorSyntax_ErrorAsPrimitive_Response*>(bytes());
    }

    // Release the ownership of the decoded message. That means that the handles
    // won't be closed When the object is destroyed. After calling this method,
    // the DecodedMessage object should not be used anymore.
    void ReleasePrimaryObject() { ResetBytes(); }
  };
};

extern "C" const fidl_type_t
    fidl_test_protocols_WithErrorSyntax_ErrorAsEnum_ResponseTable;

struct WithErrorSyntax_ErrorAsEnum_Response {
  static constexpr const fidl_type_t* Type =
      &fidl_test_protocols_WithErrorSyntax_ErrorAsEnum_ResponseTable;
  static constexpr uint32_t MaxNumHandles = 0;
  static constexpr uint32_t PrimarySize = 1;
  [[maybe_unused]] static constexpr uint32_t MaxOutOfLine = 0;
  static constexpr bool HasPointer = false;

  uint8_t __reserved = {};

  class UnownedEncodedMessage final {
   public:
    UnownedEncodedMessage(uint8_t* bytes, uint32_t byte_size,
                          WithErrorSyntax_ErrorAsEnum_Response* value)
        : message_(bytes, byte_size,
                   sizeof(WithErrorSyntax_ErrorAsEnum_Response), nullptr, 0,
                   0) {
      message_.Encode<WithErrorSyntax_ErrorAsEnum_Response>(value);
    }
    UnownedEncodedMessage(const UnownedEncodedMessage&) = delete;
    UnownedEncodedMessage(UnownedEncodedMessage&&) = delete;
    UnownedEncodedMessage* operator=(const UnownedEncodedMessage&) = delete;
    UnownedEncodedMessage* operator=(UnownedEncodedMessage&&) = delete;

    zx_status_t status() const { return message_.status(); }
#ifdef __Fuchsia__
    const char* status_string() const { return message_.status_string(); }
#endif
    bool ok() const { return message_.status() == ZX_OK; }
    const char* error() const { return message_.error(); }

    ::fidl::OutgoingMessage& GetOutgoingMessage() { return message_; }

   private:
    ::fidl::OutgoingMessage message_;
  };

  class OwnedEncodedMessage final {
   public:
    explicit OwnedEncodedMessage(WithErrorSyntax_ErrorAsEnum_Response* value)
        : message_(bytes_.data(), bytes_.size(), value) {}
    OwnedEncodedMessage(const OwnedEncodedMessage&) = delete;
    OwnedEncodedMessage(OwnedEncodedMessage&&) = delete;
    OwnedEncodedMessage* operator=(const OwnedEncodedMessage&) = delete;
    OwnedEncodedMessage* operator=(OwnedEncodedMessage&&) = delete;

    zx_status_t status() const { return message_.status(); }
#ifdef __Fuchsia__
    const char* status_string() const { return message_.status_string(); }
#endif
    bool ok() const { return message_.ok(); }
    const char* error() const { return message_.error(); }

    ::fidl::OutgoingMessage& GetOutgoingMessage() {
      return message_.GetOutgoingMessage();
    }

   private:
    ::fidl::internal::InlineMessageBuffer<8> bytes_;
    UnownedEncodedMessage message_;
  };

  class DecodedMessage final : public ::fidl::internal::IncomingMessage {
   public:
    DecodedMessage(uint8_t* bytes, uint32_t byte_actual,
                   zx_handle_info_t* handles = nullptr,
                   uint32_t handle_actual = 0)
        : ::fidl::internal::IncomingMessage(bytes, byte_actual, handles,
                                            handle_actual) {
      Decode<struct WithErrorSyntax_ErrorAsEnum_Response>();
    }
    DecodedMessage(fidl_incoming_msg_t* msg)
        : ::fidl::internal::IncomingMessage(msg) {
      Decode<struct WithErrorSyntax_ErrorAsEnum_Response>();
    }
    DecodedMessage(const DecodedMessage&) = delete;
    DecodedMessage(DecodedMessage&&) = delete;
    DecodedMessage* operator=(const DecodedMessage&) = delete;
    DecodedMessage* operator=(DecodedMessage&&) = delete;

    struct WithErrorSyntax_ErrorAsEnum_Response* PrimaryObject() {
      ZX_DEBUG_ASSERT(ok());
      return reinterpret_cast<struct WithErrorSyntax_ErrorAsEnum_Response*>(
          bytes());
    }

    // Release the ownership of the decoded message. That means that the handles
    // won't be closed When the object is destroyed. After calling this method,
    // the DecodedMessage object should not be used anymore.
    void ReleasePrimaryObject() { ResetBytes(); }
  };
};

}  // namespace wire
extern "C" const fidl_type_t
    fidl_test_protocols_TransitionalRequestRequestTable;

extern "C" const fidl_type_t
    fidl_test_protocols_TransitionalRequestResponseTable;

extern "C" const fidl_type_t fidl_test_protocols_TransitionalOneWayRequestTable;

extern "C" const fidl_type_t
    fidl_test_protocols_TransitionalOneWayResponseTable;

extern "C" const fidl_type_t fidl_test_protocols_TransitionalEventRequestTable;

extern "C" const fidl_type_t fidl_test_protocols_TransitionalEventEventTable;

class Transitional final {
  Transitional() = delete;

 public:
  struct RequestResponse final {
    FIDL_ALIGNDECL
    fidl_message_header_t _hdr;
    int64_t y;
    explicit RequestResponse(int64_t y) : y(y) { _InitHeader(); }
    RequestResponse() { _InitHeader(); }

    static constexpr const fidl_type_t* Type =
        &::fidl_test_protocols::
            fidl_test_protocols_TransitionalRequestResponseTable;
    static constexpr uint32_t MaxNumHandles = 0;
    static constexpr uint32_t PrimarySize = 24;
    static constexpr uint32_t MaxOutOfLine = 0;
    static constexpr bool HasFlexibleEnvelope = false;
    static constexpr bool HasPointer = false;
    static constexpr ::fidl::internal::TransactionalMessageKind MessageKind =
        ::fidl::internal::TransactionalMessageKind::kResponse;

    class UnownedEncodedMessage final {
     public:
      UnownedEncodedMessage(uint8_t* _bytes, uint32_t _byte_size, int64_t y)
          : message_(_bytes, _byte_size, sizeof(RequestResponse), nullptr, 0,
                     0) {
        FIDL_ALIGNDECL RequestResponse _response{y};
        message_.Encode<::fidl_test_protocols::Transitional::RequestResponse>(
            &_response);
      }
      UnownedEncodedMessage(uint8_t* bytes, uint32_t byte_size,
                            RequestResponse* response)
          : message_(bytes, byte_size, sizeof(RequestResponse), nullptr, 0, 0) {
        message_.Encode<::fidl_test_protocols::Transitional::RequestResponse>(
            response);
      }
      UnownedEncodedMessage(const UnownedEncodedMessage&) = delete;
      UnownedEncodedMessage(UnownedEncodedMessage&&) = delete;
      UnownedEncodedMessage* operator=(const UnownedEncodedMessage&) = delete;
      UnownedEncodedMessage* operator=(UnownedEncodedMessage&&) = delete;

      zx_status_t status() const { return message_.status(); }
#ifdef __Fuchsia__
      const char* status_string() const { return message_.status_string(); }
#endif
      bool ok() const { return message_.status() == ZX_OK; }
      const char* error() const { return message_.error(); }

      ::fidl::OutgoingMessage& GetOutgoingMessage() { return message_; }

#ifdef __Fuchsia__
      template <typename ChannelLike>
      void Write(ChannelLike&& client) {
        message_.Write(std::forward<ChannelLike>(client));
      }
#endif

     private:
      ::fidl::OutgoingMessage message_;
    };

    class OwnedEncodedMessage final {
     public:
      explicit OwnedEncodedMessage(int64_t y)
          : message_(bytes_.data(), bytes_.size(), y) {}
      explicit OwnedEncodedMessage(
          ::fidl_test_protocols::Transitional::RequestResponse* response)
          : message_(bytes_.data(), bytes_.size(), response) {}
      OwnedEncodedMessage(const OwnedEncodedMessage&) = delete;
      OwnedEncodedMessage(OwnedEncodedMessage&&) = delete;
      OwnedEncodedMessage* operator=(const OwnedEncodedMessage&) = delete;
      OwnedEncodedMessage* operator=(OwnedEncodedMessage&&) = delete;

      zx_status_t status() const { return message_.status(); }
#ifdef __Fuchsia__
      const char* status_string() const { return message_.status_string(); }
#endif
      bool ok() const { return message_.ok(); }
      const char* error() const { return message_.error(); }

      ::fidl::OutgoingMessage& GetOutgoingMessage() {
        return message_.GetOutgoingMessage();
      }

#ifdef __Fuchsia__
      template <typename ChannelLike>
      void Write(ChannelLike&& client) {
        message_.Write(std::forward<ChannelLike>(client));
      }
#endif

     private:
      ::fidl::internal::InlineMessageBuffer<24> bytes_;
      UnownedEncodedMessage message_;
    };

   public:
    class DecodedMessage final : public ::fidl::internal::IncomingMessage {
     public:
      DecodedMessage(uint8_t* bytes, uint32_t byte_actual,
                     zx_handle_info_t* handles = nullptr,
                     uint32_t handle_actual = 0)
          : ::fidl::internal::IncomingMessage(bytes, byte_actual, handles,
                                              handle_actual) {
        Decode<::fidl_test_protocols::Transitional::RequestResponse>();
      }
      DecodedMessage(fidl_incoming_msg_t* msg)
          : ::fidl::internal::IncomingMessage(msg) {
        Decode<::fidl_test_protocols::Transitional::RequestResponse>();
      }
      DecodedMessage(const DecodedMessage&) = delete;
      DecodedMessage(DecodedMessage&&) = delete;
      DecodedMessage* operator=(const DecodedMessage&) = delete;
      DecodedMessage* operator=(DecodedMessage&&) = delete;

      RequestResponse* PrimaryObject() {
        ZX_DEBUG_ASSERT(ok());
        return reinterpret_cast<
            ::fidl_test_protocols::Transitional::RequestResponse*>(bytes());
      }

      // Release the ownership of the decoded message. That means that the
      // handles won't be closed When the object is destroyed. After calling
      // this method, the DecodedMessage object should not be used anymore.
      void ReleasePrimaryObject() { ResetBytes(); }
    };

   private:
    void _InitHeader();
  };
  struct RequestRequest final {
    FIDL_ALIGNDECL
    fidl_message_header_t _hdr;
    int64_t x;
    explicit RequestRequest(zx_txid_t _txid, int64_t x) : x(x) {
      _InitHeader(_txid);
    }
    explicit RequestRequest(zx_txid_t _txid) { _InitHeader(_txid); }

    static constexpr const fidl_type_t* Type =
        &::fidl_test_protocols::
            fidl_test_protocols_TransitionalRequestRequestTable;
    static constexpr uint32_t MaxNumHandles = 0;
    static constexpr uint32_t PrimarySize = 24;
    static constexpr uint32_t MaxOutOfLine = 0;
    static constexpr uint32_t AltPrimarySize = 24;
    static constexpr uint32_t AltMaxOutOfLine = 0;
    static constexpr bool HasFlexibleEnvelope = false;
    static constexpr bool HasPointer = false;
    static constexpr ::fidl::internal::TransactionalMessageKind MessageKind =
        ::fidl::internal::TransactionalMessageKind::kRequest;
    using ResponseType = ::fidl_test_protocols::Transitional::RequestResponse;

    class UnownedEncodedMessage final {
     public:
      UnownedEncodedMessage(uint8_t* _bytes, uint32_t _byte_size,
                            zx_txid_t _txid, int64_t x)
          : message_(_bytes, _byte_size, sizeof(RequestRequest), nullptr, 0,
                     0) {
        FIDL_ALIGNDECL RequestRequest _request(_txid, x);
        message_.Encode<RequestRequest>(&_request);
      }
      UnownedEncodedMessage(uint8_t* bytes, uint32_t byte_size,
                            RequestRequest* request)
          : message_(bytes, byte_size, sizeof(RequestRequest), nullptr, 0, 0) {
        message_.Encode<RequestRequest>(request);
      }
      UnownedEncodedMessage(const UnownedEncodedMessage&) = delete;
      UnownedEncodedMessage(UnownedEncodedMessage&&) = delete;
      UnownedEncodedMessage* operator=(const UnownedEncodedMessage&) = delete;
      UnownedEncodedMessage* operator=(UnownedEncodedMessage&&) = delete;

      zx_status_t status() const { return message_.status(); }
#ifdef __Fuchsia__
      const char* status_string() const { return message_.status_string(); }
#endif
      bool ok() const { return message_.status() == ZX_OK; }
      const char* error() const { return message_.error(); }

      ::fidl::OutgoingMessage& GetOutgoingMessage() { return message_; }

#ifdef __Fuchsia__
      template <typename ChannelLike>
      void Write(ChannelLike&& client) {
        message_.Write(std::forward<ChannelLike>(client));
      }
#endif

     private:
      ::fidl::OutgoingMessage message_;
    };

    class OwnedEncodedMessage final {
     public:
      explicit OwnedEncodedMessage(zx_txid_t _txid, int64_t x)
          : message_(bytes_.data(), bytes_.size(), _txid, x) {}
      explicit OwnedEncodedMessage(RequestRequest* request)
          : message_(bytes_.data(), bytes_.size(), request) {}
      OwnedEncodedMessage(const OwnedEncodedMessage&) = delete;
      OwnedEncodedMessage(OwnedEncodedMessage&&) = delete;
      OwnedEncodedMessage* operator=(const OwnedEncodedMessage&) = delete;
      OwnedEncodedMessage* operator=(OwnedEncodedMessage&&) = delete;

      zx_status_t status() const { return message_.status(); }
#ifdef __Fuchsia__
      const char* status_string() const { return message_.status_string(); }
#endif
      bool ok() const { return message_.ok(); }
      const char* error() const { return message_.error(); }

      ::fidl::OutgoingMessage& GetOutgoingMessage() {
        return message_.GetOutgoingMessage();
      }

#ifdef __Fuchsia__
      template <typename ChannelLike>
      void Write(ChannelLike&& client) {
        message_.Write(std::forward<ChannelLike>(client));
      }
#endif

     private:
      ::fidl::internal::InlineMessageBuffer<24> bytes_;
      UnownedEncodedMessage message_;
    };

   public:
    class DecodedMessage final : public ::fidl::internal::IncomingMessage {
     public:
      DecodedMessage(uint8_t* bytes, uint32_t byte_actual,
                     zx_handle_info_t* handles = nullptr,
                     uint32_t handle_actual = 0)
          : ::fidl::internal::IncomingMessage(bytes, byte_actual, handles,
                                              handle_actual) {
        Decode<RequestRequest>();
      }
      DecodedMessage(fidl_incoming_msg_t* msg)
          : ::fidl::internal::IncomingMessage(msg) {
        Decode<RequestRequest>();
      }
      DecodedMessage(const DecodedMessage&) = delete;
      DecodedMessage(DecodedMessage&&) = delete;
      DecodedMessage* operator=(const DecodedMessage&) = delete;
      DecodedMessage* operator=(DecodedMessage&&) = delete;

      RequestRequest* PrimaryObject() {
        ZX_DEBUG_ASSERT(ok());
        return reinterpret_cast<RequestRequest*>(bytes());
      }

      // Release the ownership of the decoded message. That means that the
      // handles won't be closed When the object is destroyed. After calling
      // this method, the DecodedMessage object should not be used anymore.
      void ReleasePrimaryObject() { ResetBytes(); }
    };

   private:
    void _InitHeader(zx_txid_t _txid);
  };

  struct OneWayRequest final {
    FIDL_ALIGNDECL
    fidl_message_header_t _hdr;
    int64_t x;
    explicit OneWayRequest(zx_txid_t _txid, int64_t x) : x(x) {
      _InitHeader(_txid);
    }
    explicit OneWayRequest(zx_txid_t _txid) { _InitHeader(_txid); }

    static constexpr const fidl_type_t* Type =
        &::fidl_test_protocols::
            fidl_test_protocols_TransitionalOneWayRequestTable;
    static constexpr uint32_t MaxNumHandles = 0;
    static constexpr uint32_t PrimarySize = 24;
    static constexpr uint32_t MaxOutOfLine = 0;
    static constexpr uint32_t AltPrimarySize = 24;
    static constexpr uint32_t AltMaxOutOfLine = 0;
    static constexpr bool HasFlexibleEnvelope = false;
    static constexpr bool HasPointer = false;
    static constexpr ::fidl::internal::TransactionalMessageKind MessageKind =
        ::fidl::internal::TransactionalMessageKind::kRequest;

    class UnownedEncodedMessage final {
     public:
      UnownedEncodedMessage(uint8_t* _bytes, uint32_t _byte_size,
                            zx_txid_t _txid, int64_t x)
          : message_(_bytes, _byte_size, sizeof(OneWayRequest), nullptr, 0, 0) {
        FIDL_ALIGNDECL OneWayRequest _request(_txid, x);
        message_.Encode<OneWayRequest>(&_request);
      }
      UnownedEncodedMessage(uint8_t* bytes, uint32_t byte_size,
                            OneWayRequest* request)
          : message_(bytes, byte_size, sizeof(OneWayRequest), nullptr, 0, 0) {
        message_.Encode<OneWayRequest>(request);
      }
      UnownedEncodedMessage(const UnownedEncodedMessage&) = delete;
      UnownedEncodedMessage(UnownedEncodedMessage&&) = delete;
      UnownedEncodedMessage* operator=(const UnownedEncodedMessage&) = delete;
      UnownedEncodedMessage* operator=(UnownedEncodedMessage&&) = delete;

      zx_status_t status() const { return message_.status(); }
#ifdef __Fuchsia__
      const char* status_string() const { return message_.status_string(); }
#endif
      bool ok() const { return message_.status() == ZX_OK; }
      const char* error() const { return message_.error(); }

      ::fidl::OutgoingMessage& GetOutgoingMessage() { return message_; }

#ifdef __Fuchsia__
      template <typename ChannelLike>
      void Write(ChannelLike&& client) {
        message_.Write(std::forward<ChannelLike>(client));
      }
#endif

     private:
      ::fidl::OutgoingMessage message_;
    };

    class OwnedEncodedMessage final {
     public:
      explicit OwnedEncodedMessage(zx_txid_t _txid, int64_t x)
          : message_(bytes_.data(), bytes_.size(), _txid, x) {}
      explicit OwnedEncodedMessage(OneWayRequest* request)
          : message_(bytes_.data(), bytes_.size(), request) {}
      OwnedEncodedMessage(const OwnedEncodedMessage&) = delete;
      OwnedEncodedMessage(OwnedEncodedMessage&&) = delete;
      OwnedEncodedMessage* operator=(const OwnedEncodedMessage&) = delete;
      OwnedEncodedMessage* operator=(OwnedEncodedMessage&&) = delete;

      zx_status_t status() const { return message_.status(); }
#ifdef __Fuchsia__
      const char* status_string() const { return message_.status_string(); }
#endif
      bool ok() const { return message_.ok(); }
      const char* error() const { return message_.error(); }

      ::fidl::OutgoingMessage& GetOutgoingMessage() {
        return message_.GetOutgoingMessage();
      }

#ifdef __Fuchsia__
      template <typename ChannelLike>
      void Write(ChannelLike&& client) {
        message_.Write(std::forward<ChannelLike>(client));
      }
#endif

     private:
      ::fidl::internal::InlineMessageBuffer<24> bytes_;
      UnownedEncodedMessage message_;
    };

   public:
    class DecodedMessage final : public ::fidl::internal::IncomingMessage {
     public:
      DecodedMessage(uint8_t* bytes, uint32_t byte_actual,
                     zx_handle_info_t* handles = nullptr,
                     uint32_t handle_actual = 0)
          : ::fidl::internal::IncomingMessage(bytes, byte_actual, handles,
                                              handle_actual) {
        Decode<OneWayRequest>();
      }
      DecodedMessage(fidl_incoming_msg_t* msg)
          : ::fidl::internal::IncomingMessage(msg) {
        Decode<OneWayRequest>();
      }
      DecodedMessage(const DecodedMessage&) = delete;
      DecodedMessage(DecodedMessage&&) = delete;
      DecodedMessage* operator=(const DecodedMessage&) = delete;
      DecodedMessage* operator=(DecodedMessage&&) = delete;

      OneWayRequest* PrimaryObject() {
        ZX_DEBUG_ASSERT(ok());
        return reinterpret_cast<OneWayRequest*>(bytes());
      }

      // Release the ownership of the decoded message. That means that the
      // handles won't be closed When the object is destroyed. After calling
      // this method, the DecodedMessage object should not be used anymore.
      void ReleasePrimaryObject() { ResetBytes(); }
    };

   private:
    void _InitHeader(zx_txid_t _txid);
  };

  struct EventResponse final {
    FIDL_ALIGNDECL
    fidl_message_header_t _hdr;
    int64_t x;
    explicit EventResponse(int64_t x) : x(x) { _InitHeader(); }
    EventResponse() { _InitHeader(); }

    static constexpr const fidl_type_t* Type =
        &::fidl_test_protocols::fidl_test_protocols_TransitionalEventEventTable;
    static constexpr uint32_t MaxNumHandles = 0;
    static constexpr uint32_t PrimarySize = 24;
    static constexpr uint32_t MaxOutOfLine = 0;
    static constexpr bool HasFlexibleEnvelope = false;
    static constexpr bool HasPointer = false;
    static constexpr ::fidl::internal::TransactionalMessageKind MessageKind =
        ::fidl::internal::TransactionalMessageKind::kResponse;

    class UnownedEncodedMessage final {
     public:
      UnownedEncodedMessage(uint8_t* _bytes, uint32_t _byte_size, int64_t x)
          : message_(_bytes, _byte_size, sizeof(EventResponse), nullptr, 0, 0) {
        FIDL_ALIGNDECL EventResponse _response{x};
        message_.Encode<::fidl_test_protocols::Transitional::EventResponse>(
            &_response);
      }
      UnownedEncodedMessage(uint8_t* bytes, uint32_t byte_size,
                            EventResponse* response)
          : message_(bytes, byte_size, sizeof(EventResponse), nullptr, 0, 0) {
        message_.Encode<::fidl_test_protocols::Transitional::EventResponse>(
            response);
      }
      UnownedEncodedMessage(const UnownedEncodedMessage&) = delete;
      UnownedEncodedMessage(UnownedEncodedMessage&&) = delete;
      UnownedEncodedMessage* operator=(const UnownedEncodedMessage&) = delete;
      UnownedEncodedMessage* operator=(UnownedEncodedMessage&&) = delete;

      zx_status_t status() const { return message_.status(); }
#ifdef __Fuchsia__
      const char* status_string() const { return message_.status_string(); }
#endif
      bool ok() const { return message_.status() == ZX_OK; }
      const char* error() const { return message_.error(); }

      ::fidl::OutgoingMessage& GetOutgoingMessage() { return message_; }

#ifdef __Fuchsia__
      template <typename ChannelLike>
      void Write(ChannelLike&& client) {
        message_.Write(std::forward<ChannelLike>(client));
      }
#endif

     private:
      ::fidl::OutgoingMessage message_;
    };

    class OwnedEncodedMessage final {
     public:
      explicit OwnedEncodedMessage(int64_t x)
          : message_(bytes_.data(), bytes_.size(), x) {}
      explicit OwnedEncodedMessage(
          ::fidl_test_protocols::Transitional::EventResponse* response)
          : message_(bytes_.data(), bytes_.size(), response) {}
      OwnedEncodedMessage(const OwnedEncodedMessage&) = delete;
      OwnedEncodedMessage(OwnedEncodedMessage&&) = delete;
      OwnedEncodedMessage* operator=(const OwnedEncodedMessage&) = delete;
      OwnedEncodedMessage* operator=(OwnedEncodedMessage&&) = delete;

      zx_status_t status() const { return message_.status(); }
#ifdef __Fuchsia__
      const char* status_string() const { return message_.status_string(); }
#endif
      bool ok() const { return message_.ok(); }
      const char* error() const { return message_.error(); }

      ::fidl::OutgoingMessage& GetOutgoingMessage() {
        return message_.GetOutgoingMessage();
      }

#ifdef __Fuchsia__
      template <typename ChannelLike>
      void Write(ChannelLike&& client) {
        message_.Write(std::forward<ChannelLike>(client));
      }
#endif

     private:
      ::fidl::internal::InlineMessageBuffer<24> bytes_;
      UnownedEncodedMessage message_;
    };

   public:
    class DecodedMessage final : public ::fidl::internal::IncomingMessage {
     public:
      DecodedMessage(uint8_t* bytes, uint32_t byte_actual,
                     zx_handle_info_t* handles = nullptr,
                     uint32_t handle_actual = 0)
          : ::fidl::internal::IncomingMessage(bytes, byte_actual, handles,
                                              handle_actual) {
        Decode<::fidl_test_protocols::Transitional::EventResponse>();
      }
      DecodedMessage(fidl_incoming_msg_t* msg)
          : ::fidl::internal::IncomingMessage(msg) {
        Decode<::fidl_test_protocols::Transitional::EventResponse>();
      }
      DecodedMessage(const DecodedMessage&) = delete;
      DecodedMessage(DecodedMessage&&) = delete;
      DecodedMessage* operator=(const DecodedMessage&) = delete;
      DecodedMessage* operator=(DecodedMessage&&) = delete;

      EventResponse* PrimaryObject() {
        ZX_DEBUG_ASSERT(ok());
        return reinterpret_cast<
            ::fidl_test_protocols::Transitional::EventResponse*>(bytes());
      }

      // Release the ownership of the decoded message. That means that the
      // handles won't be closed When the object is destroyed. After calling
      // this method, the DecodedMessage object should not be used anymore.
      void ReleasePrimaryObject() { ResetBytes(); }
    };

   private:
    void _InitHeader();
  };

  class EventHandlerInterface {
   public:
    EventHandlerInterface() = default;
    virtual ~EventHandlerInterface() = default;
    virtual void Event(
        ::fidl_test_protocols::Transitional::EventResponse* event) {}
  };

  class SyncEventHandler : public EventHandlerInterface {
   public:
    SyncEventHandler() = default;

    // Method called when an unknown event is found. This methods gives the
    // status which, in this case, is returned by HandleOneEvent.
    virtual zx_status_t Unknown() = 0;

    // Handle all possible events defined in this protocol.
    // Blocks to consume exactly one message from the channel, then call the
    // corresponding virtual method.
    ::fidl::Result HandleOneEvent(
        ::fidl::UnownedClientEnd<::fidl_test_protocols::Transitional>
            client_end);
  };

#ifdef __Fuchsia__
  // Collection of return types of FIDL calls in this protocol.
  class ResultOf final {
    ResultOf() = delete;

   public:
    class Request final : public ::fidl::Result {
     public:
      explicit Request(
          ::fidl::UnownedClientEnd<::fidl_test_protocols::Transitional> _client,
          int64_t x);
      Request(
          ::fidl::UnownedClientEnd<::fidl_test_protocols::Transitional> _client,
          int64_t x, zx_time_t _deadline);
      explicit Request(const ::fidl::Result& result) : ::fidl::Result(result) {}
      Request(Request&&) = delete;
      Request(const Request&) = delete;
      Request* operator=(Request&&) = delete;
      Request* operator=(const Request&) = delete;
      ~Request() = default;

      ::fidl_test_protocols::Transitional::RequestResponse* Unwrap() {
        ZX_DEBUG_ASSERT(ok());
        return reinterpret_cast<
            ::fidl_test_protocols::Transitional::RequestResponse*>(
            bytes_.data());
      }
      const ::fidl_test_protocols::Transitional::RequestResponse* Unwrap()
          const {
        ZX_DEBUG_ASSERT(ok());
        return reinterpret_cast<
            const ::fidl_test_protocols::Transitional::RequestResponse*>(
            bytes_.data());
      }

      ::fidl_test_protocols::Transitional::RequestResponse& value() {
        return *Unwrap();
      }
      const ::fidl_test_protocols::Transitional::RequestResponse& value()
          const {
        return *Unwrap();
      }

      ::fidl_test_protocols::Transitional::RequestResponse* operator->() {
        return &value();
      }
      const RequestResponse* operator->() const { return &value(); }

      RequestResponse& operator*() { return value(); }
      const RequestResponse& operator*() const { return value(); }

     private:
      ::fidl::internal::InlineMessageBuffer<24> bytes_;
    };
    class OneWay final : public ::fidl::Result {
     public:
      explicit OneWay(
          ::fidl::UnownedClientEnd<::fidl_test_protocols::Transitional> _client,
          int64_t x);
      explicit OneWay(const ::fidl::Result& result) : ::fidl::Result(result) {}
      OneWay(OneWay&&) = delete;
      OneWay(const OneWay&) = delete;
      OneWay* operator=(OneWay&&) = delete;
      OneWay* operator=(const OneWay&) = delete;
      ~OneWay() = default;

     private:
    };
  };

  // Collection of return types of FIDL calls in this protocol,
  // when the caller-allocate flavor or in-place call is used.
  class UnownedResultOf final {
    UnownedResultOf() = delete;

   public:
    class Request final : public ::fidl::Result {
     public:
      explicit Request(
          ::fidl::UnownedClientEnd<::fidl_test_protocols::Transitional> _client,
          uint8_t* _request_bytes, uint32_t _request_byte_capacity, int64_t x,
          uint8_t* _response_bytes, uint32_t _response_byte_capacity);
      explicit Request(const ::fidl::Result& result) : ::fidl::Result(result) {}
      Request(Request&&) = delete;
      Request(const Request&) = delete;
      Request* operator=(Request&&) = delete;
      Request* operator=(const Request&) = delete;
      ~Request() = default;

      RequestResponse* Unwrap() {
        ZX_DEBUG_ASSERT(ok());
        return reinterpret_cast<
            ::fidl_test_protocols::Transitional::RequestResponse*>(bytes_);
      }
      const RequestResponse* Unwrap() const {
        ZX_DEBUG_ASSERT(ok());
        return reinterpret_cast<
            const ::fidl_test_protocols::Transitional::RequestResponse*>(
            bytes_);
      }

      RequestResponse& value() { return *Unwrap(); }
      const RequestResponse& value() const { return *Unwrap(); }

      RequestResponse* operator->() { return &value(); }
      const RequestResponse* operator->() const { return &value(); }

      RequestResponse& operator*() { return value(); }
      const RequestResponse& operator*() const { return value(); }

     private:
      uint8_t* bytes_;
    };
    class OneWay final : public ::fidl::Result {
     public:
      explicit OneWay(
          ::fidl::UnownedClientEnd<::fidl_test_protocols::Transitional> _client,
          uint8_t* _request_bytes, uint32_t _request_byte_capacity, int64_t x);
      explicit OneWay(const ::fidl::Result& result) : ::fidl::Result(result) {}
      OneWay(OneWay&&) = delete;
      OneWay(const OneWay&) = delete;
      OneWay* operator=(OneWay&&) = delete;
      OneWay* operator=(const OneWay&) = delete;
      ~OneWay() = default;
    };
  };

  // Methods to make a sync FIDL call directly on an unowned channel or a
  // const reference to a
  // |fidl::ClientEnd<::fidl_test_protocols::Transitional>|, avoiding setting up
  // a client.
  class Call final {
    Call() = delete;

   public:
    // Allocates 48 bytes of message buffer on the stack. No heap allocation
    // necessary.
    static ResultOf::Request Request(
        ::fidl::UnownedClientEnd<::fidl_test_protocols::Transitional>
            _client_end,
        int64_t x) {
      return ResultOf::Request(_client_end, x);
    }

    // Caller provides the backing storage for FIDL message via request and
    // response buffers.
    static UnownedResultOf::Request Request(
        ::fidl::UnownedClientEnd<::fidl_test_protocols::Transitional>
            _client_end,
        ::fidl::BufferSpan _request_buffer, int64_t x,
        ::fidl::BufferSpan _response_buffer) {
      return UnownedResultOf::Request(
          _client_end, _request_buffer.data, _request_buffer.capacity, x,
          _response_buffer.data, _response_buffer.capacity);
    }

    // Allocates 24 bytes of message buffer on the stack. No heap allocation
    // necessary.
    static ResultOf::OneWay OneWay(
        ::fidl::UnownedClientEnd<::fidl_test_protocols::Transitional>
            _client_end,
        int64_t x) {
      return ResultOf::OneWay(_client_end, x);
    }

    // Caller provides the backing storage for FIDL message via request and
    // response buffers.
    static UnownedResultOf::OneWay OneWay(
        ::fidl::UnownedClientEnd<::fidl_test_protocols::Transitional>
            _client_end,
        ::fidl::BufferSpan _request_buffer, int64_t x) {
      return UnownedResultOf::OneWay(_client_end, _request_buffer.data,
                                     _request_buffer.capacity, x);
    }
  };

  using SyncClient = fidl::WireSyncClient<::fidl_test_protocols::Transitional>;

#ifdef __Fuchsia__
  using AsyncEventHandler =
      ::fidl::WireAsyncEventHandler<::fidl_test_protocols::Transitional>;
  class RequestResponseContext;
  using ClientImpl =
      ::fidl::internal::WireClientImpl<::fidl_test_protocols::Transitional>;
#endif

  using Interface = ::fidl::WireInterface<::fidl_test_protocols::Transitional>;

  // Attempts to dispatch the incoming message to a handler function in the
  // server implementation. If there is no matching handler, it returns false,
  // leaving the message and transaction intact. In all other cases, it consumes
  // the message and returns true. It is possible to chain multiple TryDispatch
  // functions in this manner.
  static ::fidl::DispatchResult TryDispatch(Interface* impl,
                                            fidl_incoming_msg_t* msg,
                                            ::fidl::Transaction* txn);

  // Dispatches the incoming message to one of the handlers functions in the
  // protocol. If there is no matching handler, it closes all the handles in
  // |msg| and closes the channel with a |ZX_ERR_NOT_SUPPORTED| epitaph, before
  // returning false. The message should then be discarded.
  static ::fidl::DispatchResult Dispatch(Interface* impl,
                                         fidl_incoming_msg_t* msg,
                                         ::fidl::Transaction* txn);

  // Same as |Dispatch|, but takes a |void*| instead of |Interface*|.
  // Only used with |fidl::BindServer| to reduce template expansion.
  // Do not call this method manually. Use |Dispatch| instead.
  static ::fidl::DispatchResult TypeErasedDispatch(void* impl,
                                                   fidl_incoming_msg_t* msg,
                                                   ::fidl::Transaction* txn) {
    return Dispatch(static_cast<Interface*>(impl), msg, txn);
  }

#endif

  using EventSender =
      ::fidl::WireEventSender<::fidl_test_protocols::Transitional>;
  using WeakEventSender = ::fidl::internal::WireWeakEventSender<
      ::fidl_test_protocols::Transitional>;
};
}  // namespace fidl_test_protocols
template <>
class ::fidl::WireSyncClient<::fidl_test_protocols::Transitional> final {
 public:
  WireSyncClient() = default;

  explicit WireSyncClient(
      ::fidl::ClientEnd<::fidl_test_protocols::Transitional> client_end)
      : client_end_(std::move(client_end)) {}

  ~WireSyncClient() = default;
  WireSyncClient(WireSyncClient&&) = default;
  WireSyncClient& operator=(WireSyncClient&&) = default;

  const ::fidl::ClientEnd<::fidl_test_protocols::Transitional>& client_end()
      const {
    return client_end_;
  }
  ::fidl::ClientEnd<::fidl_test_protocols::Transitional>& client_end() {
    return client_end_;
  }

  const ::zx::channel& channel() const { return client_end_.channel(); }
  ::zx::channel* mutable_channel() { return &client_end_.channel(); }

  // Allocates 48 bytes of message buffer on the stack. No heap allocation
  // necessary.
  ::fidl_test_protocols::Transitional::ResultOf::Request Request(int64_t x) {
    return ::fidl_test_protocols::Transitional::ResultOf::Request(
        this->client_end(), x);
  }

  // Caller provides the backing storage for FIDL message via request and
  // response buffers.
  ::fidl_test_protocols::Transitional::UnownedResultOf::Request Request(
      ::fidl::BufferSpan _request_buffer, int64_t x,
      ::fidl::BufferSpan _response_buffer) {
    return ::fidl_test_protocols::Transitional::UnownedResultOf::Request(
        this->client_end(), _request_buffer.data, _request_buffer.capacity, x,
        _response_buffer.data, _response_buffer.capacity);
  }

  // Allocates 24 bytes of message buffer on the stack. No heap allocation
  // necessary.
  ::fidl_test_protocols::Transitional::ResultOf::OneWay OneWay(int64_t x) {
    return ::fidl_test_protocols::Transitional::ResultOf::OneWay(
        this->client_end(), x);
  }

  // Caller provides the backing storage for FIDL message via request and
  // response buffers.
  ::fidl_test_protocols::Transitional::UnownedResultOf::OneWay OneWay(
      ::fidl::BufferSpan _request_buffer, int64_t x) {
    return ::fidl_test_protocols::Transitional::UnownedResultOf::OneWay(
        this->client_end(), _request_buffer.data, _request_buffer.capacity, x);
  }

  // Handle all possible events defined in this protocol.
  // Blocks to consume exactly one message from the channel, then call the
  // corresponding virtual method defined in |SyncEventHandler|. The return
  // status of the handler function is folded with any transport-level errors
  // and returned.
  ::fidl::Result HandleOneEvent(
      ::fidl_test_protocols::Transitional::SyncEventHandler& event_handler) {
    return event_handler.HandleOneEvent(client_end_);
  }

 private:
  ::fidl::ClientEnd<::fidl_test_protocols::Transitional> client_end_;
};

// Pure-virtual interface to be implemented by a server.
// This interface uses typed channels (i.e. |fidl::ClientEnd<SomeProtocol>|
// and |fidl::ServerEnd<SomeProtocol>|).
template <>
class ::fidl::WireInterface<::fidl_test_protocols::Transitional>
    : public ::fidl::internal::IncomingMessageDispatcher {
 public:
  WireInterface() = default;
  virtual ~WireInterface() = default;

  // The marker protocol type within which this |WireInterface| class is
  // defined.
  using _EnclosingProtocol = ::fidl_test_protocols::Transitional;

  class RequestCompleterBase : public ::fidl::CompleterBase {
   public:
    // In the following methods, the return value indicates internal errors
    // during the reply, such as encoding or writing to the transport. Note that
    // any error will automatically lead to the destruction of the binding,
    // after which the |on_unbound| callback will be triggered with a detailed
    // reason.
    //
    // See //zircon/system/ulib/fidl/include/lib/fidl/llcpp/server.h.
    //
    // Because the reply status is identical to the unbinding status, it can be
    // safely ignored.
    ::fidl::Result Reply(int64_t y);
    ::fidl::Result Reply(::fidl::BufferSpan _buffer, int64_t y);

   protected:
    using ::fidl::CompleterBase::CompleterBase;
  };

  using RequestCompleter = ::fidl::Completer<RequestCompleterBase>;

  virtual void Request(int64_t x, RequestCompleter::Sync& _completer) {
    _completer.Close(ZX_ERR_NOT_SUPPORTED);
  }

  using OneWayCompleter = ::fidl::Completer<>;

  virtual void OneWay(int64_t x, OneWayCompleter::Sync& _completer) {
    _completer.Close(ZX_ERR_NOT_SUPPORTED);
  }

 private:
  ::fidl::DispatchResult dispatch_message(fidl_incoming_msg_t* msg,
                                          ::fidl::Transaction* txn) final;
};

namespace fidl_test_protocols {
extern "C" const fidl_type_t
    fidl_test_protocols_ChannelProtocolMethodARequestTable;

extern "C" const fidl_type_t
    fidl_test_protocols_ChannelProtocolMethodAResponseTable;

extern "C" const fidl_type_t
    fidl_test_protocols_ChannelProtocolEventARequestTable;

extern "C" const fidl_type_t
    fidl_test_protocols_ChannelProtocolEventAEventTable;

extern "C" const fidl_type_t
    fidl_test_protocols_ChannelProtocolMethodBRequestTable;

extern "C" const fidl_type_t
    fidl_test_protocols_ChannelProtocolMethodBResponseTable;

extern "C" const fidl_type_t
    fidl_test_protocols_ChannelProtocolTakeHandleRequestTable;

extern "C" const fidl_type_t
    fidl_test_protocols_ChannelProtocolTakeHandleResponseTable;

extern "C" const fidl_type_t
    fidl_test_protocols_ChannelProtocolMutateSocketRequestTable;

extern "C" const fidl_type_t
    fidl_test_protocols_ChannelProtocolMutateSocketResponseTable;

class ChannelProtocol final {
  ChannelProtocol() = delete;

 public:
  struct MethodARequest final {
    FIDL_ALIGNDECL
    fidl_message_header_t _hdr;
    int64_t a;
    int64_t b;
    explicit MethodARequest(zx_txid_t _txid, int64_t a, int64_t b)
        : a(a), b(b) {
      _InitHeader(_txid);
    }
    explicit MethodARequest(zx_txid_t _txid) { _InitHeader(_txid); }

    static constexpr const fidl_type_t* Type =
        &::fidl_test_protocols::
            fidl_test_protocols_ChannelProtocolMethodARequestTable;
    static constexpr uint32_t MaxNumHandles = 0;
    static constexpr uint32_t PrimarySize = 32;
    static constexpr uint32_t MaxOutOfLine = 0;
    static constexpr uint32_t AltPrimarySize = 32;
    static constexpr uint32_t AltMaxOutOfLine = 0;
    static constexpr bool HasFlexibleEnvelope = false;
    static constexpr bool HasPointer = false;
    static constexpr ::fidl::internal::TransactionalMessageKind MessageKind =
        ::fidl::internal::TransactionalMessageKind::kRequest;

    class UnownedEncodedMessage final {
     public:
      UnownedEncodedMessage(uint8_t* _bytes, uint32_t _byte_size,
                            zx_txid_t _txid, int64_t a, int64_t b)
          : message_(_bytes, _byte_size, sizeof(MethodARequest), nullptr, 0,
                     0) {
        FIDL_ALIGNDECL MethodARequest _request(_txid, a, b);
        message_.Encode<MethodARequest>(&_request);
      }
      UnownedEncodedMessage(uint8_t* bytes, uint32_t byte_size,
                            MethodARequest* request)
          : message_(bytes, byte_size, sizeof(MethodARequest), nullptr, 0, 0) {
        message_.Encode<MethodARequest>(request);
      }
      UnownedEncodedMessage(const UnownedEncodedMessage&) = delete;
      UnownedEncodedMessage(UnownedEncodedMessage&&) = delete;
      UnownedEncodedMessage* operator=(const UnownedEncodedMessage&) = delete;
      UnownedEncodedMessage* operator=(UnownedEncodedMessage&&) = delete;

      zx_status_t status() const { return message_.status(); }
#ifdef __Fuchsia__
      const char* status_string() const { return message_.status_string(); }
#endif
      bool ok() const { return message_.status() == ZX_OK; }
      const char* error() const { return message_.error(); }

      ::fidl::OutgoingMessage& GetOutgoingMessage() { return message_; }

#ifdef __Fuchsia__
      template <typename ChannelLike>
      void Write(ChannelLike&& client) {
        message_.Write(std::forward<ChannelLike>(client));
      }
#endif

     private:
      ::fidl::OutgoingMessage message_;
    };

    class OwnedEncodedMessage final {
     public:
      explicit OwnedEncodedMessage(zx_txid_t _txid, int64_t a, int64_t b)
          : message_(bytes_.data(), bytes_.size(), _txid, a, b) {}
      explicit OwnedEncodedMessage(MethodARequest* request)
          : message_(bytes_.data(), bytes_.size(), request) {}
      OwnedEncodedMessage(const OwnedEncodedMessage&) = delete;
      OwnedEncodedMessage(OwnedEncodedMessage&&) = delete;
      OwnedEncodedMessage* operator=(const OwnedEncodedMessage&) = delete;
      OwnedEncodedMessage* operator=(OwnedEncodedMessage&&) = delete;

      zx_status_t status() const { return message_.status(); }
#ifdef __Fuchsia__
      const char* status_string() const { return message_.status_string(); }
#endif
      bool ok() const { return message_.ok(); }
      const char* error() const { return message_.error(); }

      ::fidl::OutgoingMessage& GetOutgoingMessage() {
        return message_.GetOutgoingMessage();
      }

#ifdef __Fuchsia__
      template <typename ChannelLike>
      void Write(ChannelLike&& client) {
        message_.Write(std::forward<ChannelLike>(client));
      }
#endif

     private:
      ::fidl::internal::InlineMessageBuffer<32> bytes_;
      UnownedEncodedMessage message_;
    };

   public:
    class DecodedMessage final : public ::fidl::internal::IncomingMessage {
     public:
      DecodedMessage(uint8_t* bytes, uint32_t byte_actual,
                     zx_handle_info_t* handles = nullptr,
                     uint32_t handle_actual = 0)
          : ::fidl::internal::IncomingMessage(bytes, byte_actual, handles,
                                              handle_actual) {
        Decode<MethodARequest>();
      }
      DecodedMessage(fidl_incoming_msg_t* msg)
          : ::fidl::internal::IncomingMessage(msg) {
        Decode<MethodARequest>();
      }
      DecodedMessage(const DecodedMessage&) = delete;
      DecodedMessage(DecodedMessage&&) = delete;
      DecodedMessage* operator=(const DecodedMessage&) = delete;
      DecodedMessage* operator=(DecodedMessage&&) = delete;

      MethodARequest* PrimaryObject() {
        ZX_DEBUG_ASSERT(ok());
        return reinterpret_cast<MethodARequest*>(bytes());
      }

      // Release the ownership of the decoded message. That means that the
      // handles won't be closed When the object is destroyed. After calling
      // this method, the DecodedMessage object should not be used anymore.
      void ReleasePrimaryObject() { ResetBytes(); }
    };

   private:
    void _InitHeader(zx_txid_t _txid);
  };

  struct EventAResponse final {
    FIDL_ALIGNDECL
    fidl_message_header_t _hdr;
    int64_t a;
    int64_t b;
    explicit EventAResponse(int64_t a, int64_t b) : a(a), b(b) {
      _InitHeader();
    }
    EventAResponse() { _InitHeader(); }

    static constexpr const fidl_type_t* Type =
        &::fidl_test_protocols::
            fidl_test_protocols_ChannelProtocolEventAEventTable;
    static constexpr uint32_t MaxNumHandles = 0;
    static constexpr uint32_t PrimarySize = 32;
    static constexpr uint32_t MaxOutOfLine = 0;
    static constexpr bool HasFlexibleEnvelope = false;
    static constexpr bool HasPointer = false;
    static constexpr ::fidl::internal::TransactionalMessageKind MessageKind =
        ::fidl::internal::TransactionalMessageKind::kResponse;

    class UnownedEncodedMessage final {
     public:
      UnownedEncodedMessage(uint8_t* _bytes, uint32_t _byte_size, int64_t a,
                            int64_t b)
          : message_(_bytes, _byte_size, sizeof(EventAResponse), nullptr, 0,
                     0) {
        FIDL_ALIGNDECL EventAResponse _response{a, b};
        message_.Encode<::fidl_test_protocols::ChannelProtocol::EventAResponse>(
            &_response);
      }
      UnownedEncodedMessage(uint8_t* bytes, uint32_t byte_size,
                            EventAResponse* response)
          : message_(bytes, byte_size, sizeof(EventAResponse), nullptr, 0, 0) {
        message_.Encode<::fidl_test_protocols::ChannelProtocol::EventAResponse>(
            response);
      }
      UnownedEncodedMessage(const UnownedEncodedMessage&) = delete;
      UnownedEncodedMessage(UnownedEncodedMessage&&) = delete;
      UnownedEncodedMessage* operator=(const UnownedEncodedMessage&) = delete;
      UnownedEncodedMessage* operator=(UnownedEncodedMessage&&) = delete;

      zx_status_t status() const { return message_.status(); }
#ifdef __Fuchsia__
      const char* status_string() const { return message_.status_string(); }
#endif
      bool ok() const { return message_.status() == ZX_OK; }
      const char* error() const { return message_.error(); }

      ::fidl::OutgoingMessage& GetOutgoingMessage() { return message_; }

#ifdef __Fuchsia__
      template <typename ChannelLike>
      void Write(ChannelLike&& client) {
        message_.Write(std::forward<ChannelLike>(client));
      }
#endif

     private:
      ::fidl::OutgoingMessage message_;
    };

    class OwnedEncodedMessage final {
     public:
      explicit OwnedEncodedMessage(int64_t a, int64_t b)
          : message_(bytes_.data(), bytes_.size(), a, b) {}
      explicit OwnedEncodedMessage(
          ::fidl_test_protocols::ChannelProtocol::EventAResponse* response)
          : message_(bytes_.data(), bytes_.size(), response) {}
      OwnedEncodedMessage(const OwnedEncodedMessage&) = delete;
      OwnedEncodedMessage(OwnedEncodedMessage&&) = delete;
      OwnedEncodedMessage* operator=(const OwnedEncodedMessage&) = delete;
      OwnedEncodedMessage* operator=(OwnedEncodedMessage&&) = delete;

      zx_status_t status() const { return message_.status(); }
#ifdef __Fuchsia__
      const char* status_string() const { return message_.status_string(); }
#endif
      bool ok() const { return message_.ok(); }
      const char* error() const { return message_.error(); }

      ::fidl::OutgoingMessage& GetOutgoingMessage() {
        return message_.GetOutgoingMessage();
      }

#ifdef __Fuchsia__
      template <typename ChannelLike>
      void Write(ChannelLike&& client) {
        message_.Write(std::forward<ChannelLike>(client));
      }
#endif

     private:
      ::fidl::internal::InlineMessageBuffer<32> bytes_;
      UnownedEncodedMessage message_;
    };

   public:
    class DecodedMessage final : public ::fidl::internal::IncomingMessage {
     public:
      DecodedMessage(uint8_t* bytes, uint32_t byte_actual,
                     zx_handle_info_t* handles = nullptr,
                     uint32_t handle_actual = 0)
          : ::fidl::internal::IncomingMessage(bytes, byte_actual, handles,
                                              handle_actual) {
        Decode<::fidl_test_protocols::ChannelProtocol::EventAResponse>();
      }
      DecodedMessage(fidl_incoming_msg_t* msg)
          : ::fidl::internal::IncomingMessage(msg) {
        Decode<::fidl_test_protocols::ChannelProtocol::EventAResponse>();
      }
      DecodedMessage(const DecodedMessage&) = delete;
      DecodedMessage(DecodedMessage&&) = delete;
      DecodedMessage* operator=(const DecodedMessage&) = delete;
      DecodedMessage* operator=(DecodedMessage&&) = delete;

      EventAResponse* PrimaryObject() {
        ZX_DEBUG_ASSERT(ok());
        return reinterpret_cast<
            ::fidl_test_protocols::ChannelProtocol::EventAResponse*>(bytes());
      }

      // Release the ownership of the decoded message. That means that the
      // handles won't be closed When the object is destroyed. After calling
      // this method, the DecodedMessage object should not be used anymore.
      void ReleasePrimaryObject() { ResetBytes(); }
    };

   private:
    void _InitHeader();
  };
  struct MethodBResponse final {
    FIDL_ALIGNDECL
    fidl_message_header_t _hdr;
    int64_t result;
    explicit MethodBResponse(int64_t result) : result(result) { _InitHeader(); }
    MethodBResponse() { _InitHeader(); }

    static constexpr const fidl_type_t* Type =
        &::fidl_test_protocols::
            fidl_test_protocols_ChannelProtocolMethodBResponseTable;
    static constexpr uint32_t MaxNumHandles = 0;
    static constexpr uint32_t PrimarySize = 24;
    static constexpr uint32_t MaxOutOfLine = 0;
    static constexpr bool HasFlexibleEnvelope = false;
    static constexpr bool HasPointer = false;
    static constexpr ::fidl::internal::TransactionalMessageKind MessageKind =
        ::fidl::internal::TransactionalMessageKind::kResponse;

    class UnownedEncodedMessage final {
     public:
      UnownedEncodedMessage(uint8_t* _bytes, uint32_t _byte_size,
                            int64_t result)
          : message_(_bytes, _byte_size, sizeof(MethodBResponse), nullptr, 0,
                     0) {
        FIDL_ALIGNDECL MethodBResponse _response{result};
        message_
            .Encode<::fidl_test_protocols::ChannelProtocol::MethodBResponse>(
                &_response);
      }
      UnownedEncodedMessage(uint8_t* bytes, uint32_t byte_size,
                            MethodBResponse* response)
          : message_(bytes, byte_size, sizeof(MethodBResponse), nullptr, 0, 0) {
        message_
            .Encode<::fidl_test_protocols::ChannelProtocol::MethodBResponse>(
                response);
      }
      UnownedEncodedMessage(const UnownedEncodedMessage&) = delete;
      UnownedEncodedMessage(UnownedEncodedMessage&&) = delete;
      UnownedEncodedMessage* operator=(const UnownedEncodedMessage&) = delete;
      UnownedEncodedMessage* operator=(UnownedEncodedMessage&&) = delete;

      zx_status_t status() const { return message_.status(); }
#ifdef __Fuchsia__
      const char* status_string() const { return message_.status_string(); }
#endif
      bool ok() const { return message_.status() == ZX_OK; }
      const char* error() const { return message_.error(); }

      ::fidl::OutgoingMessage& GetOutgoingMessage() { return message_; }

#ifdef __Fuchsia__
      template <typename ChannelLike>
      void Write(ChannelLike&& client) {
        message_.Write(std::forward<ChannelLike>(client));
      }
#endif

     private:
      ::fidl::OutgoingMessage message_;
    };

    class OwnedEncodedMessage final {
     public:
      explicit OwnedEncodedMessage(int64_t result)
          : message_(bytes_.data(), bytes_.size(), result) {}
      explicit OwnedEncodedMessage(
          ::fidl_test_protocols::ChannelProtocol::MethodBResponse* response)
          : message_(bytes_.data(), bytes_.size(), response) {}
      OwnedEncodedMessage(const OwnedEncodedMessage&) = delete;
      OwnedEncodedMessage(OwnedEncodedMessage&&) = delete;
      OwnedEncodedMessage* operator=(const OwnedEncodedMessage&) = delete;
      OwnedEncodedMessage* operator=(OwnedEncodedMessage&&) = delete;

      zx_status_t status() const { return message_.status(); }
#ifdef __Fuchsia__
      const char* status_string() const { return message_.status_string(); }
#endif
      bool ok() const { return message_.ok(); }
      const char* error() const { return message_.error(); }

      ::fidl::OutgoingMessage& GetOutgoingMessage() {
        return message_.GetOutgoingMessage();
      }

#ifdef __Fuchsia__
      template <typename ChannelLike>
      void Write(ChannelLike&& client) {
        message_.Write(std::forward<ChannelLike>(client));
      }
#endif

     private:
      ::fidl::internal::InlineMessageBuffer<24> bytes_;
      UnownedEncodedMessage message_;
    };

   public:
    class DecodedMessage final : public ::fidl::internal::IncomingMessage {
     public:
      DecodedMessage(uint8_t* bytes, uint32_t byte_actual,
                     zx_handle_info_t* handles = nullptr,
                     uint32_t handle_actual = 0)
          : ::fidl::internal::IncomingMessage(bytes, byte_actual, handles,
                                              handle_actual) {
        Decode<::fidl_test_protocols::ChannelProtocol::MethodBResponse>();
      }
      DecodedMessage(fidl_incoming_msg_t* msg)
          : ::fidl::internal::IncomingMessage(msg) {
        Decode<::fidl_test_protocols::ChannelProtocol::MethodBResponse>();
      }
      DecodedMessage(const DecodedMessage&) = delete;
      DecodedMessage(DecodedMessage&&) = delete;
      DecodedMessage* operator=(const DecodedMessage&) = delete;
      DecodedMessage* operator=(DecodedMessage&&) = delete;

      MethodBResponse* PrimaryObject() {
        ZX_DEBUG_ASSERT(ok());
        return reinterpret_cast<
            ::fidl_test_protocols::ChannelProtocol::MethodBResponse*>(bytes());
      }

      // Release the ownership of the decoded message. That means that the
      // handles won't be closed When the object is destroyed. After calling
      // this method, the DecodedMessage object should not be used anymore.
      void ReleasePrimaryObject() { ResetBytes(); }
    };

   private:
    void _InitHeader();
  };
  struct MethodBRequest final {
    FIDL_ALIGNDECL
    fidl_message_header_t _hdr;
    int64_t a;
    int64_t b;
    explicit MethodBRequest(zx_txid_t _txid, int64_t a, int64_t b)
        : a(a), b(b) {
      _InitHeader(_txid);
    }
    explicit MethodBRequest(zx_txid_t _txid) { _InitHeader(_txid); }

    static constexpr const fidl_type_t* Type =
        &::fidl_test_protocols::
            fidl_test_protocols_ChannelProtocolMethodBRequestTable;
    static constexpr uint32_t MaxNumHandles = 0;
    static constexpr uint32_t PrimarySize = 32;
    static constexpr uint32_t MaxOutOfLine = 0;
    static constexpr uint32_t AltPrimarySize = 32;
    static constexpr uint32_t AltMaxOutOfLine = 0;
    static constexpr bool HasFlexibleEnvelope = false;
    static constexpr bool HasPointer = false;
    static constexpr ::fidl::internal::TransactionalMessageKind MessageKind =
        ::fidl::internal::TransactionalMessageKind::kRequest;
    using ResponseType =
        ::fidl_test_protocols::ChannelProtocol::MethodBResponse;

    class UnownedEncodedMessage final {
     public:
      UnownedEncodedMessage(uint8_t* _bytes, uint32_t _byte_size,
                            zx_txid_t _txid, int64_t a, int64_t b)
          : message_(_bytes, _byte_size, sizeof(MethodBRequest), nullptr, 0,
                     0) {
        FIDL_ALIGNDECL MethodBRequest _request(_txid, a, b);
        message_.Encode<MethodBRequest>(&_request);
      }
      UnownedEncodedMessage(uint8_t* bytes, uint32_t byte_size,
                            MethodBRequest* request)
          : message_(bytes, byte_size, sizeof(MethodBRequest), nullptr, 0, 0) {
        message_.Encode<MethodBRequest>(request);
      }
      UnownedEncodedMessage(const UnownedEncodedMessage&) = delete;
      UnownedEncodedMessage(UnownedEncodedMessage&&) = delete;
      UnownedEncodedMessage* operator=(const UnownedEncodedMessage&) = delete;
      UnownedEncodedMessage* operator=(UnownedEncodedMessage&&) = delete;

      zx_status_t status() const { return message_.status(); }
#ifdef __Fuchsia__
      const char* status_string() const { return message_.status_string(); }
#endif
      bool ok() const { return message_.status() == ZX_OK; }
      const char* error() const { return message_.error(); }

      ::fidl::OutgoingMessage& GetOutgoingMessage() { return message_; }

#ifdef __Fuchsia__
      template <typename ChannelLike>
      void Write(ChannelLike&& client) {
        message_.Write(std::forward<ChannelLike>(client));
      }
#endif

     private:
      ::fidl::OutgoingMessage message_;
    };

    class OwnedEncodedMessage final {
     public:
      explicit OwnedEncodedMessage(zx_txid_t _txid, int64_t a, int64_t b)
          : message_(bytes_.data(), bytes_.size(), _txid, a, b) {}
      explicit OwnedEncodedMessage(MethodBRequest* request)
          : message_(bytes_.data(), bytes_.size(), request) {}
      OwnedEncodedMessage(const OwnedEncodedMessage&) = delete;
      OwnedEncodedMessage(OwnedEncodedMessage&&) = delete;
      OwnedEncodedMessage* operator=(const OwnedEncodedMessage&) = delete;
      OwnedEncodedMessage* operator=(OwnedEncodedMessage&&) = delete;

      zx_status_t status() const { return message_.status(); }
#ifdef __Fuchsia__
      const char* status_string() const { return message_.status_string(); }
#endif
      bool ok() const { return message_.ok(); }
      const char* error() const { return message_.error(); }

      ::fidl::OutgoingMessage& GetOutgoingMessage() {
        return message_.GetOutgoingMessage();
      }

#ifdef __Fuchsia__
      template <typename ChannelLike>
      void Write(ChannelLike&& client) {
        message_.Write(std::forward<ChannelLike>(client));
      }
#endif

     private:
      ::fidl::internal::InlineMessageBuffer<32> bytes_;
      UnownedEncodedMessage message_;
    };

   public:
    class DecodedMessage final : public ::fidl::internal::IncomingMessage {
     public:
      DecodedMessage(uint8_t* bytes, uint32_t byte_actual,
                     zx_handle_info_t* handles = nullptr,
                     uint32_t handle_actual = 0)
          : ::fidl::internal::IncomingMessage(bytes, byte_actual, handles,
                                              handle_actual) {
        Decode<MethodBRequest>();
      }
      DecodedMessage(fidl_incoming_msg_t* msg)
          : ::fidl::internal::IncomingMessage(msg) {
        Decode<MethodBRequest>();
      }
      DecodedMessage(const DecodedMessage&) = delete;
      DecodedMessage(DecodedMessage&&) = delete;
      DecodedMessage* operator=(const DecodedMessage&) = delete;
      DecodedMessage* operator=(DecodedMessage&&) = delete;

      MethodBRequest* PrimaryObject() {
        ZX_DEBUG_ASSERT(ok());
        return reinterpret_cast<MethodBRequest*>(bytes());
      }

      // Release the ownership of the decoded message. That means that the
      // handles won't be closed When the object is destroyed. After calling
      // this method, the DecodedMessage object should not be used anymore.
      void ReleasePrimaryObject() { ResetBytes(); }
    };

   private:
    void _InitHeader(zx_txid_t _txid);
  };

  struct TakeHandleResponse final {
    FIDL_ALIGNDECL
    fidl_message_header_t _hdr;
    TakeHandleResponse() { _InitHeader(); }

    static constexpr const fidl_type_t* Type =
        &::fidl::_llcpp_coding_AnyZeroArgMessageTable;
    static constexpr uint32_t MaxNumHandles = 0;
    static constexpr uint32_t PrimarySize = 16;
    static constexpr uint32_t MaxOutOfLine = 0;
    static constexpr bool HasFlexibleEnvelope = false;
    static constexpr bool HasPointer = false;
    static constexpr ::fidl::internal::TransactionalMessageKind MessageKind =
        ::fidl::internal::TransactionalMessageKind::kResponse;

    class UnownedEncodedMessage final {
     public:
      UnownedEncodedMessage(uint8_t* _bytes, uint32_t _byte_size)
          : message_(_bytes, _byte_size, sizeof(TakeHandleResponse), nullptr, 0,
                     0) {
        FIDL_ALIGNDECL TakeHandleResponse _response{};
        message_
            .Encode<::fidl_test_protocols::ChannelProtocol::TakeHandleResponse>(
                &_response);
      }
      UnownedEncodedMessage(uint8_t* bytes, uint32_t byte_size,
                            TakeHandleResponse* response)
          : message_(bytes, byte_size, sizeof(TakeHandleResponse), nullptr, 0,
                     0) {
        message_
            .Encode<::fidl_test_protocols::ChannelProtocol::TakeHandleResponse>(
                response);
      }
      UnownedEncodedMessage(const UnownedEncodedMessage&) = delete;
      UnownedEncodedMessage(UnownedEncodedMessage&&) = delete;
      UnownedEncodedMessage* operator=(const UnownedEncodedMessage&) = delete;
      UnownedEncodedMessage* operator=(UnownedEncodedMessage&&) = delete;

      zx_status_t status() const { return message_.status(); }
#ifdef __Fuchsia__
      const char* status_string() const { return message_.status_string(); }
#endif
      bool ok() const { return message_.status() == ZX_OK; }
      const char* error() const { return message_.error(); }

      ::fidl::OutgoingMessage& GetOutgoingMessage() { return message_; }

#ifdef __Fuchsia__
      template <typename ChannelLike>
      void Write(ChannelLike&& client) {
        message_.Write(std::forward<ChannelLike>(client));
      }
#endif

     private:
      ::fidl::OutgoingMessage message_;
    };

    class OwnedEncodedMessage final {
     public:
      explicit OwnedEncodedMessage() : message_(bytes_.data(), bytes_.size()) {}
      explicit OwnedEncodedMessage(
          ::fidl_test_protocols::ChannelProtocol::TakeHandleResponse* response)
          : message_(bytes_.data(), bytes_.size(), response) {}
      OwnedEncodedMessage(const OwnedEncodedMessage&) = delete;
      OwnedEncodedMessage(OwnedEncodedMessage&&) = delete;
      OwnedEncodedMessage* operator=(const OwnedEncodedMessage&) = delete;
      OwnedEncodedMessage* operator=(OwnedEncodedMessage&&) = delete;

      zx_status_t status() const { return message_.status(); }
#ifdef __Fuchsia__
      const char* status_string() const { return message_.status_string(); }
#endif
      bool ok() const { return message_.ok(); }
      const char* error() const { return message_.error(); }

      ::fidl::OutgoingMessage& GetOutgoingMessage() {
        return message_.GetOutgoingMessage();
      }

#ifdef __Fuchsia__
      template <typename ChannelLike>
      void Write(ChannelLike&& client) {
        message_.Write(std::forward<ChannelLike>(client));
      }
#endif

     private:
      ::fidl::internal::InlineMessageBuffer<16> bytes_;
      UnownedEncodedMessage message_;
    };

   public:
    class DecodedMessage final : public ::fidl::internal::IncomingMessage {
     public:
      DecodedMessage(uint8_t* bytes, uint32_t byte_actual,
                     zx_handle_info_t* handles = nullptr,
                     uint32_t handle_actual = 0)
          : ::fidl::internal::IncomingMessage(bytes, byte_actual, handles,
                                              handle_actual) {
        Decode<::fidl_test_protocols::ChannelProtocol::TakeHandleResponse>();
      }
      DecodedMessage(fidl_incoming_msg_t* msg)
          : ::fidl::internal::IncomingMessage(msg) {
        Decode<::fidl_test_protocols::ChannelProtocol::TakeHandleResponse>();
      }
      DecodedMessage(const DecodedMessage&) = delete;
      DecodedMessage(DecodedMessage&&) = delete;
      DecodedMessage* operator=(const DecodedMessage&) = delete;
      DecodedMessage* operator=(DecodedMessage&&) = delete;

      TakeHandleResponse* PrimaryObject() {
        ZX_DEBUG_ASSERT(ok());
        return reinterpret_cast<
            ::fidl_test_protocols::ChannelProtocol::TakeHandleResponse*>(
            bytes());
      }

      // Release the ownership of the decoded message. That means that the
      // handles won't be closed When the object is destroyed. After calling
      // this method, the DecodedMessage object should not be used anymore.
      void ReleasePrimaryObject() { ResetBytes(); }
    };

   private:
    void _InitHeader();
  };
  struct TakeHandleRequest final {
    FIDL_ALIGNDECL
    fidl_message_header_t _hdr;
    ::zx::handle h;
    explicit TakeHandleRequest(zx_txid_t _txid, ::zx::handle& h)
        : h(std::move(h)) {
      _InitHeader(_txid);
    }
    explicit TakeHandleRequest(zx_txid_t _txid) { _InitHeader(_txid); }

    static constexpr const fidl_type_t* Type =
        &::fidl_test_protocols::
            fidl_test_protocols_ChannelProtocolTakeHandleRequestTable;
    static constexpr uint32_t MaxNumHandles = 1;
    static constexpr uint32_t PrimarySize = 24;
    static constexpr uint32_t MaxOutOfLine = 0;
    static constexpr uint32_t AltPrimarySize = 24;
    static constexpr uint32_t AltMaxOutOfLine = 0;
    static constexpr bool HasFlexibleEnvelope = false;
    static constexpr bool HasPointer = false;
    static constexpr ::fidl::internal::TransactionalMessageKind MessageKind =
        ::fidl::internal::TransactionalMessageKind::kRequest;
    void _CloseHandles();

    class UnownedEncodedMessage final {
     public:
      UnownedEncodedMessage(uint8_t* _bytes, uint32_t _byte_size,
                            zx_txid_t _txid, ::zx::handle& h)
          : message_(_bytes, _byte_size, sizeof(TakeHandleRequest), handles_,
                     std::min(ZX_CHANNEL_MAX_MSG_HANDLES, MaxNumHandles), 0) {
        FIDL_ALIGNDECL TakeHandleRequest _request(_txid, h);
        message_.Encode<TakeHandleRequest>(&_request);
      }
      UnownedEncodedMessage(uint8_t* bytes, uint32_t byte_size,
                            TakeHandleRequest* request)
          : message_(bytes, byte_size, sizeof(TakeHandleRequest), handles_,
                     std::min(ZX_CHANNEL_MAX_MSG_HANDLES, MaxNumHandles), 0) {
        message_.Encode<TakeHandleRequest>(request);
      }
      UnownedEncodedMessage(const UnownedEncodedMessage&) = delete;
      UnownedEncodedMessage(UnownedEncodedMessage&&) = delete;
      UnownedEncodedMessage* operator=(const UnownedEncodedMessage&) = delete;
      UnownedEncodedMessage* operator=(UnownedEncodedMessage&&) = delete;

      zx_status_t status() const { return message_.status(); }
#ifdef __Fuchsia__
      const char* status_string() const { return message_.status_string(); }
#endif
      bool ok() const { return message_.status() == ZX_OK; }
      const char* error() const { return message_.error(); }

      ::fidl::OutgoingMessage& GetOutgoingMessage() { return message_; }

#ifdef __Fuchsia__
      template <typename ChannelLike>
      void Write(ChannelLike&& client) {
        message_.Write(std::forward<ChannelLike>(client));
      }
#endif

     private:
      zx_handle_disposition_t
          handles_[std::min(ZX_CHANNEL_MAX_MSG_HANDLES, MaxNumHandles)];
      ::fidl::OutgoingMessage message_;
    };

    class OwnedEncodedMessage final {
     public:
      explicit OwnedEncodedMessage(zx_txid_t _txid, ::zx::handle& h)
          : message_(bytes_.data(), bytes_.size(), _txid, h) {}
      explicit OwnedEncodedMessage(TakeHandleRequest* request)
          : message_(bytes_.data(), bytes_.size(), request) {}
      OwnedEncodedMessage(const OwnedEncodedMessage&) = delete;
      OwnedEncodedMessage(OwnedEncodedMessage&&) = delete;
      OwnedEncodedMessage* operator=(const OwnedEncodedMessage&) = delete;
      OwnedEncodedMessage* operator=(OwnedEncodedMessage&&) = delete;

      zx_status_t status() const { return message_.status(); }
#ifdef __Fuchsia__
      const char* status_string() const { return message_.status_string(); }
#endif
      bool ok() const { return message_.ok(); }
      const char* error() const { return message_.error(); }

      ::fidl::OutgoingMessage& GetOutgoingMessage() {
        return message_.GetOutgoingMessage();
      }

#ifdef __Fuchsia__
      template <typename ChannelLike>
      void Write(ChannelLike&& client) {
        message_.Write(std::forward<ChannelLike>(client));
      }
#endif

     private:
      ::fidl::internal::InlineMessageBuffer<24> bytes_;
      UnownedEncodedMessage message_;
    };

   public:
    class DecodedMessage final : public ::fidl::internal::IncomingMessage {
     public:
      DecodedMessage(uint8_t* bytes, uint32_t byte_actual,
                     zx_handle_info_t* handles = nullptr,
                     uint32_t handle_actual = 0)
          : ::fidl::internal::IncomingMessage(bytes, byte_actual, handles,
                                              handle_actual) {
        Decode<TakeHandleRequest>();
      }
      DecodedMessage(fidl_incoming_msg_t* msg)
          : ::fidl::internal::IncomingMessage(msg) {
        Decode<TakeHandleRequest>();
      }
      DecodedMessage(const DecodedMessage&) = delete;
      DecodedMessage(DecodedMessage&&) = delete;
      DecodedMessage* operator=(const DecodedMessage&) = delete;
      DecodedMessage* operator=(DecodedMessage&&) = delete;
      ~DecodedMessage() {
        if (ok() && (PrimaryObject() != nullptr)) {
          PrimaryObject()->_CloseHandles();
        }
      }

      TakeHandleRequest* PrimaryObject() {
        ZX_DEBUG_ASSERT(ok());
        return reinterpret_cast<TakeHandleRequest*>(bytes());
      }

      // Release the ownership of the decoded message. That means that the
      // handles won't be closed When the object is destroyed. After calling
      // this method, the DecodedMessage object should not be used anymore.
      void ReleasePrimaryObject() { ResetBytes(); }
    };

   private:
    void _InitHeader(zx_txid_t _txid);
  };

  struct MutateSocketResponse final {
    FIDL_ALIGNDECL
    fidl_message_header_t _hdr;
    ::zx::socket b;
    explicit MutateSocketResponse(::zx::socket& b) : b(std::move(b)) {
      _InitHeader();
    }
    MutateSocketResponse() { _InitHeader(); }

    static constexpr const fidl_type_t* Type =
        &::fidl_test_protocols::
            fidl_test_protocols_ChannelProtocolMutateSocketResponseTable;
    static constexpr uint32_t MaxNumHandles = 1;
    static constexpr uint32_t PrimarySize = 24;
    static constexpr uint32_t MaxOutOfLine = 0;
    static constexpr bool HasFlexibleEnvelope = false;
    static constexpr bool HasPointer = false;
    static constexpr ::fidl::internal::TransactionalMessageKind MessageKind =
        ::fidl::internal::TransactionalMessageKind::kResponse;
    void _CloseHandles();

    class UnownedEncodedMessage final {
     public:
      UnownedEncodedMessage(uint8_t* _bytes, uint32_t _byte_size,
                            ::zx::socket& b)
          : message_(_bytes, _byte_size, sizeof(MutateSocketResponse), handles_,
                     std::min(ZX_CHANNEL_MAX_MSG_HANDLES, MaxNumHandles), 0) {
        FIDL_ALIGNDECL MutateSocketResponse _response{b};
        message_.Encode<
            ::fidl_test_protocols::ChannelProtocol::MutateSocketResponse>(
            &_response);
      }
      UnownedEncodedMessage(uint8_t* bytes, uint32_t byte_size,
                            MutateSocketResponse* response)
          : message_(bytes, byte_size, sizeof(MutateSocketResponse), handles_,
                     std::min(ZX_CHANNEL_MAX_MSG_HANDLES, MaxNumHandles), 0) {
        message_.Encode<
            ::fidl_test_protocols::ChannelProtocol::MutateSocketResponse>(
            response);
      }
      UnownedEncodedMessage(const UnownedEncodedMessage&) = delete;
      UnownedEncodedMessage(UnownedEncodedMessage&&) = delete;
      UnownedEncodedMessage* operator=(const UnownedEncodedMessage&) = delete;
      UnownedEncodedMessage* operator=(UnownedEncodedMessage&&) = delete;

      zx_status_t status() const { return message_.status(); }
#ifdef __Fuchsia__
      const char* status_string() const { return message_.status_string(); }
#endif
      bool ok() const { return message_.status() == ZX_OK; }
      const char* error() const { return message_.error(); }

      ::fidl::OutgoingMessage& GetOutgoingMessage() { return message_; }

#ifdef __Fuchsia__
      template <typename ChannelLike>
      void Write(ChannelLike&& client) {
        message_.Write(std::forward<ChannelLike>(client));
      }
#endif

     private:
      zx_handle_disposition_t
          handles_[std::min(ZX_CHANNEL_MAX_MSG_HANDLES, MaxNumHandles)];
      ::fidl::OutgoingMessage message_;
    };

    class OwnedEncodedMessage final {
     public:
      explicit OwnedEncodedMessage(::zx::socket& b)
          : message_(bytes_.data(), bytes_.size(), b) {}
      explicit OwnedEncodedMessage(
          ::fidl_test_protocols::ChannelProtocol::MutateSocketResponse*
              response)
          : message_(bytes_.data(), bytes_.size(), response) {}
      OwnedEncodedMessage(const OwnedEncodedMessage&) = delete;
      OwnedEncodedMessage(OwnedEncodedMessage&&) = delete;
      OwnedEncodedMessage* operator=(const OwnedEncodedMessage&) = delete;
      OwnedEncodedMessage* operator=(OwnedEncodedMessage&&) = delete;

      zx_status_t status() const { return message_.status(); }
#ifdef __Fuchsia__
      const char* status_string() const { return message_.status_string(); }
#endif
      bool ok() const { return message_.ok(); }
      const char* error() const { return message_.error(); }

      ::fidl::OutgoingMessage& GetOutgoingMessage() {
        return message_.GetOutgoingMessage();
      }

#ifdef __Fuchsia__
      template <typename ChannelLike>
      void Write(ChannelLike&& client) {
        message_.Write(std::forward<ChannelLike>(client));
      }
#endif

     private:
      ::fidl::internal::InlineMessageBuffer<24> bytes_;
      UnownedEncodedMessage message_;
    };

   public:
    class DecodedMessage final : public ::fidl::internal::IncomingMessage {
     public:
      DecodedMessage(uint8_t* bytes, uint32_t byte_actual,
                     zx_handle_info_t* handles = nullptr,
                     uint32_t handle_actual = 0)
          : ::fidl::internal::IncomingMessage(bytes, byte_actual, handles,
                                              handle_actual) {
        Decode<::fidl_test_protocols::ChannelProtocol::MutateSocketResponse>();
      }
      DecodedMessage(fidl_incoming_msg_t* msg)
          : ::fidl::internal::IncomingMessage(msg) {
        Decode<::fidl_test_protocols::ChannelProtocol::MutateSocketResponse>();
      }
      DecodedMessage(const DecodedMessage&) = delete;
      DecodedMessage(DecodedMessage&&) = delete;
      DecodedMessage* operator=(const DecodedMessage&) = delete;
      DecodedMessage* operator=(DecodedMessage&&) = delete;
      ~DecodedMessage() {
        if (ok() && (PrimaryObject() != nullptr)) {
          PrimaryObject()->_CloseHandles();
        }
      }

      MutateSocketResponse* PrimaryObject() {
        ZX_DEBUG_ASSERT(ok());
        return reinterpret_cast<
            ::fidl_test_protocols::ChannelProtocol::MutateSocketResponse*>(
            bytes());
      }

      // Release the ownership of the decoded message. That means that the
      // handles won't be closed When the object is destroyed. After calling
      // this method, the DecodedMessage object should not be used anymore.
      void ReleasePrimaryObject() { ResetBytes(); }
    };

   private:
    void _InitHeader();
  };
  struct MutateSocketRequest final {
    FIDL_ALIGNDECL
    fidl_message_header_t _hdr;
    ::zx::socket a;
    explicit MutateSocketRequest(zx_txid_t _txid, ::zx::socket& a)
        : a(std::move(a)) {
      _InitHeader(_txid);
    }
    explicit MutateSocketRequest(zx_txid_t _txid) { _InitHeader(_txid); }

    static constexpr const fidl_type_t* Type =
        &::fidl_test_protocols::
            fidl_test_protocols_ChannelProtocolMutateSocketRequestTable;
    static constexpr uint32_t MaxNumHandles = 1;
    static constexpr uint32_t PrimarySize = 24;
    static constexpr uint32_t MaxOutOfLine = 0;
    static constexpr uint32_t AltPrimarySize = 24;
    static constexpr uint32_t AltMaxOutOfLine = 0;
    static constexpr bool HasFlexibleEnvelope = false;
    static constexpr bool HasPointer = false;
    static constexpr ::fidl::internal::TransactionalMessageKind MessageKind =
        ::fidl::internal::TransactionalMessageKind::kRequest;
    using ResponseType =
        ::fidl_test_protocols::ChannelProtocol::MutateSocketResponse;
    void _CloseHandles();

    class UnownedEncodedMessage final {
     public:
      UnownedEncodedMessage(uint8_t* _bytes, uint32_t _byte_size,
                            zx_txid_t _txid, ::zx::socket& a)
          : message_(_bytes, _byte_size, sizeof(MutateSocketRequest), handles_,
                     std::min(ZX_CHANNEL_MAX_MSG_HANDLES, MaxNumHandles), 0) {
        FIDL_ALIGNDECL MutateSocketRequest _request(_txid, a);
        message_.Encode<MutateSocketRequest>(&_request);
      }
      UnownedEncodedMessage(uint8_t* bytes, uint32_t byte_size,
                            MutateSocketRequest* request)
          : message_(bytes, byte_size, sizeof(MutateSocketRequest), handles_,
                     std::min(ZX_CHANNEL_MAX_MSG_HANDLES, MaxNumHandles), 0) {
        message_.Encode<MutateSocketRequest>(request);
      }
      UnownedEncodedMessage(const UnownedEncodedMessage&) = delete;
      UnownedEncodedMessage(UnownedEncodedMessage&&) = delete;
      UnownedEncodedMessage* operator=(const UnownedEncodedMessage&) = delete;
      UnownedEncodedMessage* operator=(UnownedEncodedMessage&&) = delete;

      zx_status_t status() const { return message_.status(); }
#ifdef __Fuchsia__
      const char* status_string() const { return message_.status_string(); }
#endif
      bool ok() const { return message_.status() == ZX_OK; }
      const char* error() const { return message_.error(); }

      ::fidl::OutgoingMessage& GetOutgoingMessage() { return message_; }

#ifdef __Fuchsia__
      template <typename ChannelLike>
      void Write(ChannelLike&& client) {
        message_.Write(std::forward<ChannelLike>(client));
      }
#endif

     private:
      zx_handle_disposition_t
          handles_[std::min(ZX_CHANNEL_MAX_MSG_HANDLES, MaxNumHandles)];
      ::fidl::OutgoingMessage message_;
    };

    class OwnedEncodedMessage final {
     public:
      explicit OwnedEncodedMessage(zx_txid_t _txid, ::zx::socket& a)
          : message_(bytes_.data(), bytes_.size(), _txid, a) {}
      explicit OwnedEncodedMessage(MutateSocketRequest* request)
          : message_(bytes_.data(), bytes_.size(), request) {}
      OwnedEncodedMessage(const OwnedEncodedMessage&) = delete;
      OwnedEncodedMessage(OwnedEncodedMessage&&) = delete;
      OwnedEncodedMessage* operator=(const OwnedEncodedMessage&) = delete;
      OwnedEncodedMessage* operator=(OwnedEncodedMessage&&) = delete;

      zx_status_t status() const { return message_.status(); }
#ifdef __Fuchsia__
      const char* status_string() const { return message_.status_string(); }
#endif
      bool ok() const { return message_.ok(); }
      const char* error() const { return message_.error(); }

      ::fidl::OutgoingMessage& GetOutgoingMessage() {
        return message_.GetOutgoingMessage();
      }

#ifdef __Fuchsia__
      template <typename ChannelLike>
      void Write(ChannelLike&& client) {
        message_.Write(std::forward<ChannelLike>(client));
      }
#endif

     private:
      ::fidl::internal::InlineMessageBuffer<24> bytes_;
      UnownedEncodedMessage message_;
    };

   public:
    class DecodedMessage final : public ::fidl::internal::IncomingMessage {
     public:
      DecodedMessage(uint8_t* bytes, uint32_t byte_actual,
                     zx_handle_info_t* handles = nullptr,
                     uint32_t handle_actual = 0)
          : ::fidl::internal::IncomingMessage(bytes, byte_actual, handles,
                                              handle_actual) {
        Decode<MutateSocketRequest>();
      }
      DecodedMessage(fidl_incoming_msg_t* msg)
          : ::fidl::internal::IncomingMessage(msg) {
        Decode<MutateSocketRequest>();
      }
      DecodedMessage(const DecodedMessage&) = delete;
      DecodedMessage(DecodedMessage&&) = delete;
      DecodedMessage* operator=(const DecodedMessage&) = delete;
      DecodedMessage* operator=(DecodedMessage&&) = delete;
      ~DecodedMessage() {
        if (ok() && (PrimaryObject() != nullptr)) {
          PrimaryObject()->_CloseHandles();
        }
      }

      MutateSocketRequest* PrimaryObject() {
        ZX_DEBUG_ASSERT(ok());
        return reinterpret_cast<MutateSocketRequest*>(bytes());
      }

      // Release the ownership of the decoded message. That means that the
      // handles won't be closed When the object is destroyed. After calling
      // this method, the DecodedMessage object should not be used anymore.
      void ReleasePrimaryObject() { ResetBytes(); }
    };

   private:
    void _InitHeader(zx_txid_t _txid);
  };

  class EventHandlerInterface {
   public:
    EventHandlerInterface() = default;
    virtual ~EventHandlerInterface() = default;
    virtual void EventA(
        ::fidl_test_protocols::ChannelProtocol::EventAResponse* event) {}
  };

  class SyncEventHandler : public EventHandlerInterface {
   public:
    SyncEventHandler() = default;

    // Method called when an unknown event is found. This methods gives the
    // status which, in this case, is returned by HandleOneEvent.
    virtual zx_status_t Unknown() = 0;

    // Handle all possible events defined in this protocol.
    // Blocks to consume exactly one message from the channel, then call the
    // corresponding virtual method.
    ::fidl::Result HandleOneEvent(
        ::fidl::UnownedClientEnd<::fidl_test_protocols::ChannelProtocol>
            client_end);
  };

#ifdef __Fuchsia__
  // Collection of return types of FIDL calls in this protocol.
  class ResultOf final {
    ResultOf() = delete;

   public:
    class MethodA final : public ::fidl::Result {
     public:
      explicit MethodA(
          ::fidl::UnownedClientEnd<::fidl_test_protocols::ChannelProtocol>
              _client,
          int64_t a, int64_t b);
      explicit MethodA(const ::fidl::Result& result) : ::fidl::Result(result) {}
      MethodA(MethodA&&) = delete;
      MethodA(const MethodA&) = delete;
      MethodA* operator=(MethodA&&) = delete;
      MethodA* operator=(const MethodA&) = delete;
      ~MethodA() = default;

     private:
    };
    class MethodB final : public ::fidl::Result {
     public:
      explicit MethodB(
          ::fidl::UnownedClientEnd<::fidl_test_protocols::ChannelProtocol>
              _client,
          int64_t a, int64_t b);
      MethodB(::fidl::UnownedClientEnd<::fidl_test_protocols::ChannelProtocol>
                  _client,
              int64_t a, int64_t b, zx_time_t _deadline);
      explicit MethodB(const ::fidl::Result& result) : ::fidl::Result(result) {}
      MethodB(MethodB&&) = delete;
      MethodB(const MethodB&) = delete;
      MethodB* operator=(MethodB&&) = delete;
      MethodB* operator=(const MethodB&) = delete;
      ~MethodB() = default;

      ::fidl_test_protocols::ChannelProtocol::MethodBResponse* Unwrap() {
        ZX_DEBUG_ASSERT(ok());
        return reinterpret_cast<
            ::fidl_test_protocols::ChannelProtocol::MethodBResponse*>(
            bytes_.data());
      }
      const ::fidl_test_protocols::ChannelProtocol::MethodBResponse* Unwrap()
          const {
        ZX_DEBUG_ASSERT(ok());
        return reinterpret_cast<
            const ::fidl_test_protocols::ChannelProtocol::MethodBResponse*>(
            bytes_.data());
      }

      ::fidl_test_protocols::ChannelProtocol::MethodBResponse& value() {
        return *Unwrap();
      }
      const ::fidl_test_protocols::ChannelProtocol::MethodBResponse& value()
          const {
        return *Unwrap();
      }

      ::fidl_test_protocols::ChannelProtocol::MethodBResponse* operator->() {
        return &value();
      }
      const MethodBResponse* operator->() const { return &value(); }

      MethodBResponse& operator*() { return value(); }
      const MethodBResponse& operator*() const { return value(); }

     private:
      ::fidl::internal::InlineMessageBuffer<24> bytes_;
    };
    class TakeHandle final : public ::fidl::Result {
     public:
      explicit TakeHandle(
          ::fidl::UnownedClientEnd<::fidl_test_protocols::ChannelProtocol>
              _client,
          ::zx::handle& h);
      TakeHandle(
          ::fidl::UnownedClientEnd<::fidl_test_protocols::ChannelProtocol>
              _client,
          ::zx::handle& h, zx_time_t _deadline);
      explicit TakeHandle(const ::fidl::Result& result)
          : ::fidl::Result(result) {}
      TakeHandle(TakeHandle&&) = delete;
      TakeHandle(const TakeHandle&) = delete;
      TakeHandle* operator=(TakeHandle&&) = delete;
      TakeHandle* operator=(const TakeHandle&) = delete;
      ~TakeHandle() = default;

      ::fidl_test_protocols::ChannelProtocol::TakeHandleResponse* Unwrap() {
        ZX_DEBUG_ASSERT(ok());
        return reinterpret_cast<
            ::fidl_test_protocols::ChannelProtocol::TakeHandleResponse*>(
            bytes_.data());
      }
      const ::fidl_test_protocols::ChannelProtocol::TakeHandleResponse* Unwrap()
          const {
        ZX_DEBUG_ASSERT(ok());
        return reinterpret_cast<
            const ::fidl_test_protocols::ChannelProtocol::TakeHandleResponse*>(
            bytes_.data());
      }

      ::fidl_test_protocols::ChannelProtocol::TakeHandleResponse& value() {
        return *Unwrap();
      }
      const ::fidl_test_protocols::ChannelProtocol::TakeHandleResponse& value()
          const {
        return *Unwrap();
      }

      ::fidl_test_protocols::ChannelProtocol::TakeHandleResponse* operator->() {
        return &value();
      }
      const TakeHandleResponse* operator->() const { return &value(); }

      TakeHandleResponse& operator*() { return value(); }
      const TakeHandleResponse& operator*() const { return value(); }

     private:
      ::fidl::internal::InlineMessageBuffer<16> bytes_;
    };
    class MutateSocket final : public ::fidl::Result {
     public:
      explicit MutateSocket(
          ::fidl::UnownedClientEnd<::fidl_test_protocols::ChannelProtocol>
              _client,
          ::zx::socket& a);
      MutateSocket(
          ::fidl::UnownedClientEnd<::fidl_test_protocols::ChannelProtocol>
              _client,
          ::zx::socket& a, zx_time_t _deadline);
      explicit MutateSocket(const ::fidl::Result& result)
          : ::fidl::Result(result) {}
      MutateSocket(MutateSocket&&) = delete;
      MutateSocket(const MutateSocket&) = delete;
      MutateSocket* operator=(MutateSocket&&) = delete;
      MutateSocket* operator=(const MutateSocket&) = delete;
      ~MutateSocket() {
        if (ok()) {
          Unwrap()->_CloseHandles();
        }
      }

      ::fidl_test_protocols::ChannelProtocol::MutateSocketResponse* Unwrap() {
        ZX_DEBUG_ASSERT(ok());
        return reinterpret_cast<
            ::fidl_test_protocols::ChannelProtocol::MutateSocketResponse*>(
            bytes_.data());
      }
      const ::fidl_test_protocols::ChannelProtocol::MutateSocketResponse*
      Unwrap() const {
        ZX_DEBUG_ASSERT(ok());
        return reinterpret_cast<const ::fidl_test_protocols::ChannelProtocol::
                                    MutateSocketResponse*>(bytes_.data());
      }

      ::fidl_test_protocols::ChannelProtocol::MutateSocketResponse& value() {
        return *Unwrap();
      }
      const ::fidl_test_protocols::ChannelProtocol::MutateSocketResponse&
      value() const {
        return *Unwrap();
      }

      ::fidl_test_protocols::ChannelProtocol::MutateSocketResponse*
      operator->() {
        return &value();
      }
      const MutateSocketResponse* operator->() const { return &value(); }

      MutateSocketResponse& operator*() { return value(); }
      const MutateSocketResponse& operator*() const { return value(); }

     private:
      ::fidl::internal::InlineMessageBuffer<24> bytes_;
    };
  };

  // Collection of return types of FIDL calls in this protocol,
  // when the caller-allocate flavor or in-place call is used.
  class UnownedResultOf final {
    UnownedResultOf() = delete;

   public:
    class MethodA final : public ::fidl::Result {
     public:
      explicit MethodA(
          ::fidl::UnownedClientEnd<::fidl_test_protocols::ChannelProtocol>
              _client,
          uint8_t* _request_bytes, uint32_t _request_byte_capacity, int64_t a,
          int64_t b);
      explicit MethodA(const ::fidl::Result& result) : ::fidl::Result(result) {}
      MethodA(MethodA&&) = delete;
      MethodA(const MethodA&) = delete;
      MethodA* operator=(MethodA&&) = delete;
      MethodA* operator=(const MethodA&) = delete;
      ~MethodA() = default;
    };
    class MethodB final : public ::fidl::Result {
     public:
      explicit MethodB(
          ::fidl::UnownedClientEnd<::fidl_test_protocols::ChannelProtocol>
              _client,
          uint8_t* _request_bytes, uint32_t _request_byte_capacity, int64_t a,
          int64_t b, uint8_t* _response_bytes,
          uint32_t _response_byte_capacity);
      explicit MethodB(const ::fidl::Result& result) : ::fidl::Result(result) {}
      MethodB(MethodB&&) = delete;
      MethodB(const MethodB&) = delete;
      MethodB* operator=(MethodB&&) = delete;
      MethodB* operator=(const MethodB&) = delete;
      ~MethodB() = default;

      MethodBResponse* Unwrap() {
        ZX_DEBUG_ASSERT(ok());
        return reinterpret_cast<
            ::fidl_test_protocols::ChannelProtocol::MethodBResponse*>(bytes_);
      }
      const MethodBResponse* Unwrap() const {
        ZX_DEBUG_ASSERT(ok());
        return reinterpret_cast<
            const ::fidl_test_protocols::ChannelProtocol::MethodBResponse*>(
            bytes_);
      }

      MethodBResponse& value() { return *Unwrap(); }
      const MethodBResponse& value() const { return *Unwrap(); }

      MethodBResponse* operator->() { return &value(); }
      const MethodBResponse* operator->() const { return &value(); }

      MethodBResponse& operator*() { return value(); }
      const MethodBResponse& operator*() const { return value(); }

     private:
      uint8_t* bytes_;
    };
    class TakeHandle final : public ::fidl::Result {
     public:
      explicit TakeHandle(
          ::fidl::UnownedClientEnd<::fidl_test_protocols::ChannelProtocol>
              _client,
          uint8_t* _request_bytes, uint32_t _request_byte_capacity,
          ::zx::handle& h, uint8_t* _response_bytes,
          uint32_t _response_byte_capacity);
      explicit TakeHandle(const ::fidl::Result& result)
          : ::fidl::Result(result) {}
      TakeHandle(TakeHandle&&) = delete;
      TakeHandle(const TakeHandle&) = delete;
      TakeHandle* operator=(TakeHandle&&) = delete;
      TakeHandle* operator=(const TakeHandle&) = delete;
      ~TakeHandle() = default;

      TakeHandleResponse* Unwrap() {
        ZX_DEBUG_ASSERT(ok());
        return reinterpret_cast<
            ::fidl_test_protocols::ChannelProtocol::TakeHandleResponse*>(
            bytes_);
      }
      const TakeHandleResponse* Unwrap() const {
        ZX_DEBUG_ASSERT(ok());
        return reinterpret_cast<
            const ::fidl_test_protocols::ChannelProtocol::TakeHandleResponse*>(
            bytes_);
      }

      TakeHandleResponse& value() { return *Unwrap(); }
      const TakeHandleResponse& value() const { return *Unwrap(); }

      TakeHandleResponse* operator->() { return &value(); }
      const TakeHandleResponse* operator->() const { return &value(); }

      TakeHandleResponse& operator*() { return value(); }
      const TakeHandleResponse& operator*() const { return value(); }

     private:
      uint8_t* bytes_;
    };
    class MutateSocket final : public ::fidl::Result {
     public:
      explicit MutateSocket(
          ::fidl::UnownedClientEnd<::fidl_test_protocols::ChannelProtocol>
              _client,
          uint8_t* _request_bytes, uint32_t _request_byte_capacity,
          ::zx::socket& a, uint8_t* _response_bytes,
          uint32_t _response_byte_capacity);
      explicit MutateSocket(const ::fidl::Result& result)
          : ::fidl::Result(result) {}
      MutateSocket(MutateSocket&&) = delete;
      MutateSocket(const MutateSocket&) = delete;
      MutateSocket* operator=(MutateSocket&&) = delete;
      MutateSocket* operator=(const MutateSocket&) = delete;
      ~MutateSocket() {
        if (ok()) {
          Unwrap()->_CloseHandles();
        }
      }

      MutateSocketResponse* Unwrap() {
        ZX_DEBUG_ASSERT(ok());
        return reinterpret_cast<
            ::fidl_test_protocols::ChannelProtocol::MutateSocketResponse*>(
            bytes_);
      }
      const MutateSocketResponse* Unwrap() const {
        ZX_DEBUG_ASSERT(ok());
        return reinterpret_cast<const ::fidl_test_protocols::ChannelProtocol::
                                    MutateSocketResponse*>(bytes_);
      }

      MutateSocketResponse& value() { return *Unwrap(); }
      const MutateSocketResponse& value() const { return *Unwrap(); }

      MutateSocketResponse* operator->() { return &value(); }
      const MutateSocketResponse* operator->() const { return &value(); }

      MutateSocketResponse& operator*() { return value(); }
      const MutateSocketResponse& operator*() const { return value(); }

     private:
      uint8_t* bytes_;
    };
  };

  // Methods to make a sync FIDL call directly on an unowned channel or a
  // const reference to a
  // |fidl::ClientEnd<::fidl_test_protocols::ChannelProtocol>|, avoiding setting
  // up a client.
  class Call final {
    Call() = delete;

   public:
    // Allocates 32 bytes of message buffer on the stack. No heap allocation
    // necessary.
    static ResultOf::MethodA MethodA(
        ::fidl::UnownedClientEnd<::fidl_test_protocols::ChannelProtocol>
            _client_end,
        int64_t a, int64_t b) {
      return ResultOf::MethodA(_client_end, a, b);
    }

    // Caller provides the backing storage for FIDL message via request and
    // response buffers.
    static UnownedResultOf::MethodA MethodA(
        ::fidl::UnownedClientEnd<::fidl_test_protocols::ChannelProtocol>
            _client_end,
        ::fidl::BufferSpan _request_buffer, int64_t a, int64_t b) {
      return UnownedResultOf::MethodA(_client_end, _request_buffer.data,
                                      _request_buffer.capacity, a, b);
    }

    // Allocates 56 bytes of message buffer on the stack. No heap allocation
    // necessary.
    static ResultOf::MethodB MethodB(
        ::fidl::UnownedClientEnd<::fidl_test_protocols::ChannelProtocol>
            _client_end,
        int64_t a, int64_t b) {
      return ResultOf::MethodB(_client_end, a, b);
    }

    // Caller provides the backing storage for FIDL message via request and
    // response buffers.
    static UnownedResultOf::MethodB MethodB(
        ::fidl::UnownedClientEnd<::fidl_test_protocols::ChannelProtocol>
            _client_end,
        ::fidl::BufferSpan _request_buffer, int64_t a, int64_t b,
        ::fidl::BufferSpan _response_buffer) {
      return UnownedResultOf::MethodB(
          _client_end, _request_buffer.data, _request_buffer.capacity, a, b,
          _response_buffer.data, _response_buffer.capacity);
    }

    // Allocates 40 bytes of message buffer on the stack. No heap allocation
    // necessary.
    static ResultOf::TakeHandle TakeHandle(
        ::fidl::UnownedClientEnd<::fidl_test_protocols::ChannelProtocol>
            _client_end,
        ::zx::handle h) {
      return ResultOf::TakeHandle(_client_end, h);
    }

    // Caller provides the backing storage for FIDL message via request and
    // response buffers.
    static UnownedResultOf::TakeHandle TakeHandle(
        ::fidl::UnownedClientEnd<::fidl_test_protocols::ChannelProtocol>
            _client_end,
        ::fidl::BufferSpan _request_buffer, ::zx::handle h,
        ::fidl::BufferSpan _response_buffer) {
      return UnownedResultOf::TakeHandle(
          _client_end, _request_buffer.data, _request_buffer.capacity, h,
          _response_buffer.data, _response_buffer.capacity);
    }

    // Allocates 48 bytes of message buffer on the stack. No heap allocation
    // necessary.
    static ResultOf::MutateSocket MutateSocket(
        ::fidl::UnownedClientEnd<::fidl_test_protocols::ChannelProtocol>
            _client_end,
        ::zx::socket a) {
      return ResultOf::MutateSocket(_client_end, a);
    }

    // Caller provides the backing storage for FIDL message via request and
    // response buffers.
    static UnownedResultOf::MutateSocket MutateSocket(
        ::fidl::UnownedClientEnd<::fidl_test_protocols::ChannelProtocol>
            _client_end,
        ::fidl::BufferSpan _request_buffer, ::zx::socket a,
        ::fidl::BufferSpan _response_buffer) {
      return UnownedResultOf::MutateSocket(
          _client_end, _request_buffer.data, _request_buffer.capacity, a,
          _response_buffer.data, _response_buffer.capacity);
    }
  };

  using SyncClient =
      fidl::WireSyncClient<::fidl_test_protocols::ChannelProtocol>;

#ifdef __Fuchsia__
  using AsyncEventHandler =
      ::fidl::WireAsyncEventHandler<::fidl_test_protocols::ChannelProtocol>;
  class MethodBResponseContext;
  class TakeHandleResponseContext;
  class MutateSocketResponseContext;
  using ClientImpl =
      ::fidl::internal::WireClientImpl<::fidl_test_protocols::ChannelProtocol>;
#endif

  using Interface =
      ::fidl::WireInterface<::fidl_test_protocols::ChannelProtocol>;

  // Attempts to dispatch the incoming message to a handler function in the
  // server implementation. If there is no matching handler, it returns false,
  // leaving the message and transaction intact. In all other cases, it consumes
  // the message and returns true. It is possible to chain multiple TryDispatch
  // functions in this manner.
  static ::fidl::DispatchResult TryDispatch(Interface* impl,
                                            fidl_incoming_msg_t* msg,
                                            ::fidl::Transaction* txn);

  // Dispatches the incoming message to one of the handlers functions in the
  // protocol. If there is no matching handler, it closes all the handles in
  // |msg| and closes the channel with a |ZX_ERR_NOT_SUPPORTED| epitaph, before
  // returning false. The message should then be discarded.
  static ::fidl::DispatchResult Dispatch(Interface* impl,
                                         fidl_incoming_msg_t* msg,
                                         ::fidl::Transaction* txn);

  // Same as |Dispatch|, but takes a |void*| instead of |Interface*|.
  // Only used with |fidl::BindServer| to reduce template expansion.
  // Do not call this method manually. Use |Dispatch| instead.
  static ::fidl::DispatchResult TypeErasedDispatch(void* impl,
                                                   fidl_incoming_msg_t* msg,
                                                   ::fidl::Transaction* txn) {
    return Dispatch(static_cast<Interface*>(impl), msg, txn);
  }

#endif

  using EventSender =
      ::fidl::WireEventSender<::fidl_test_protocols::ChannelProtocol>;
  using WeakEventSender = ::fidl::internal::WireWeakEventSender<
      ::fidl_test_protocols::ChannelProtocol>;
};
}  // namespace fidl_test_protocols
template <>
class ::fidl::WireSyncClient<::fidl_test_protocols::ChannelProtocol> final {
 public:
  WireSyncClient() = default;

  explicit WireSyncClient(
      ::fidl::ClientEnd<::fidl_test_protocols::ChannelProtocol> client_end)
      : client_end_(std::move(client_end)) {}

  ~WireSyncClient() = default;
  WireSyncClient(WireSyncClient&&) = default;
  WireSyncClient& operator=(WireSyncClient&&) = default;

  const ::fidl::ClientEnd<::fidl_test_protocols::ChannelProtocol>& client_end()
      const {
    return client_end_;
  }
  ::fidl::ClientEnd<::fidl_test_protocols::ChannelProtocol>& client_end() {
    return client_end_;
  }

  const ::zx::channel& channel() const { return client_end_.channel(); }
  ::zx::channel* mutable_channel() { return &client_end_.channel(); }

  // Allocates 32 bytes of message buffer on the stack. No heap allocation
  // necessary.
  ::fidl_test_protocols::ChannelProtocol::ResultOf::MethodA MethodA(int64_t a,
                                                                    int64_t b) {
    return ::fidl_test_protocols::ChannelProtocol::ResultOf::MethodA(
        this->client_end(), a, b);
  }

  // Caller provides the backing storage for FIDL message via request and
  // response buffers.
  ::fidl_test_protocols::ChannelProtocol::UnownedResultOf::MethodA MethodA(
      ::fidl::BufferSpan _request_buffer, int64_t a, int64_t b) {
    return ::fidl_test_protocols::ChannelProtocol::UnownedResultOf::MethodA(
        this->client_end(), _request_buffer.data, _request_buffer.capacity, a,
        b);
  }

  // Allocates 56 bytes of message buffer on the stack. No heap allocation
  // necessary.
  ::fidl_test_protocols::ChannelProtocol::ResultOf::MethodB MethodB(int64_t a,
                                                                    int64_t b) {
    return ::fidl_test_protocols::ChannelProtocol::ResultOf::MethodB(
        this->client_end(), a, b);
  }

  // Caller provides the backing storage for FIDL message via request and
  // response buffers.
  ::fidl_test_protocols::ChannelProtocol::UnownedResultOf::MethodB MethodB(
      ::fidl::BufferSpan _request_buffer, int64_t a, int64_t b,
      ::fidl::BufferSpan _response_buffer) {
    return ::fidl_test_protocols::ChannelProtocol::UnownedResultOf::MethodB(
        this->client_end(), _request_buffer.data, _request_buffer.capacity, a,
        b, _response_buffer.data, _response_buffer.capacity);
  }

  // Allocates 40 bytes of message buffer on the stack. No heap allocation
  // necessary.
  ::fidl_test_protocols::ChannelProtocol::ResultOf::TakeHandle TakeHandle(
      ::zx::handle h) {
    return ::fidl_test_protocols::ChannelProtocol::ResultOf::TakeHandle(
        this->client_end(), h);
  }

  // Caller provides the backing storage for FIDL message via request and
  // response buffers.
  ::fidl_test_protocols::ChannelProtocol::UnownedResultOf::TakeHandle
  TakeHandle(::fidl::BufferSpan _request_buffer, ::zx::handle h,
             ::fidl::BufferSpan _response_buffer) {
    return ::fidl_test_protocols::ChannelProtocol::UnownedResultOf::TakeHandle(
        this->client_end(), _request_buffer.data, _request_buffer.capacity, h,
        _response_buffer.data, _response_buffer.capacity);
  }

  // Allocates 48 bytes of message buffer on the stack. No heap allocation
  // necessary.
  ::fidl_test_protocols::ChannelProtocol::ResultOf::MutateSocket MutateSocket(
      ::zx::socket a) {
    return ::fidl_test_protocols::ChannelProtocol::ResultOf::MutateSocket(
        this->client_end(), a);
  }

  // Caller provides the backing storage for FIDL message via request and
  // response buffers.
  ::fidl_test_protocols::ChannelProtocol::UnownedResultOf::MutateSocket
  MutateSocket(::fidl::BufferSpan _request_buffer, ::zx::socket a,
               ::fidl::BufferSpan _response_buffer) {
    return ::fidl_test_protocols::ChannelProtocol::UnownedResultOf::
        MutateSocket(this->client_end(), _request_buffer.data,
                     _request_buffer.capacity, a, _response_buffer.data,
                     _response_buffer.capacity);
  }

  // Handle all possible events defined in this protocol.
  // Blocks to consume exactly one message from the channel, then call the
  // corresponding virtual method defined in |SyncEventHandler|. The return
  // status of the handler function is folded with any transport-level errors
  // and returned.
  ::fidl::Result HandleOneEvent(
      ::fidl_test_protocols::ChannelProtocol::SyncEventHandler& event_handler) {
    return event_handler.HandleOneEvent(client_end_);
  }

 private:
  ::fidl::ClientEnd<::fidl_test_protocols::ChannelProtocol> client_end_;
};

// Pure-virtual interface to be implemented by a server.
// This interface uses typed channels (i.e. |fidl::ClientEnd<SomeProtocol>|
// and |fidl::ServerEnd<SomeProtocol>|).
template <>
class ::fidl::WireInterface<::fidl_test_protocols::ChannelProtocol>
    : public ::fidl::internal::IncomingMessageDispatcher {
 public:
  WireInterface() = default;
  virtual ~WireInterface() = default;

  // The marker protocol type within which this |WireInterface| class is
  // defined.
  using _EnclosingProtocol = ::fidl_test_protocols::ChannelProtocol;

  using MethodACompleter = ::fidl::Completer<>;

  virtual void MethodA(int64_t a, int64_t b,
                       MethodACompleter::Sync& _completer) = 0;

  class MethodBCompleterBase : public ::fidl::CompleterBase {
   public:
    // In the following methods, the return value indicates internal errors
    // during the reply, such as encoding or writing to the transport. Note that
    // any error will automatically lead to the destruction of the binding,
    // after which the |on_unbound| callback will be triggered with a detailed
    // reason.
    //
    // See //zircon/system/ulib/fidl/include/lib/fidl/llcpp/server.h.
    //
    // Because the reply status is identical to the unbinding status, it can be
    // safely ignored.
    ::fidl::Result Reply(int64_t result);
    ::fidl::Result Reply(::fidl::BufferSpan _buffer, int64_t result);

   protected:
    using ::fidl::CompleterBase::CompleterBase;
  };

  using MethodBCompleter = ::fidl::Completer<MethodBCompleterBase>;

  virtual void MethodB(int64_t a, int64_t b,
                       MethodBCompleter::Sync& _completer) = 0;

  class TakeHandleCompleterBase : public ::fidl::CompleterBase {
   public:
    // In the following methods, the return value indicates internal errors
    // during the reply, such as encoding or writing to the transport. Note that
    // any error will automatically lead to the destruction of the binding,
    // after which the |on_unbound| callback will be triggered with a detailed
    // reason.
    //
    // See //zircon/system/ulib/fidl/include/lib/fidl/llcpp/server.h.
    //
    // Because the reply status is identical to the unbinding status, it can be
    // safely ignored.
    ::fidl::Result Reply();

   protected:
    using ::fidl::CompleterBase::CompleterBase;
  };

  using TakeHandleCompleter = ::fidl::Completer<TakeHandleCompleterBase>;

  virtual void TakeHandle(::zx::handle h,
                          TakeHandleCompleter::Sync& _completer) = 0;

  class MutateSocketCompleterBase : public ::fidl::CompleterBase {
   public:
    // In the following methods, the return value indicates internal errors
    // during the reply, such as encoding or writing to the transport. Note that
    // any error will automatically lead to the destruction of the binding,
    // after which the |on_unbound| callback will be triggered with a detailed
    // reason.
    //
    // See //zircon/system/ulib/fidl/include/lib/fidl/llcpp/server.h.
    //
    // Because the reply status is identical to the unbinding status, it can be
    // safely ignored.
    ::fidl::Result Reply(::zx::socket b);
    ::fidl::Result Reply(::fidl::BufferSpan _buffer, ::zx::socket b);

   protected:
    using ::fidl::CompleterBase::CompleterBase;
  };

  using MutateSocketCompleter = ::fidl::Completer<MutateSocketCompleterBase>;

  virtual void MutateSocket(::zx::socket a,
                            MutateSocketCompleter::Sync& _completer) = 0;

 private:
  ::fidl::DispatchResult dispatch_message(fidl_incoming_msg_t* msg,
                                          ::fidl::Transaction* txn) final;
};

namespace fidl_test_protocols {
extern "C" const fidl_type_t
    fidl_test_protocols_WithAndWithoutRequestResponseNoRequestNoResponseRequestTable;

extern "C" const fidl_type_t
    fidl_test_protocols_WithAndWithoutRequestResponseNoRequestNoResponseResponseTable;

extern "C" const fidl_type_t
    fidl_test_protocols_WithAndWithoutRequestResponseNoRequestEmptyResponseRequestTable;

extern "C" const fidl_type_t
    fidl_test_protocols_WithAndWithoutRequestResponseNoRequestEmptyResponseResponseTable;

extern "C" const fidl_type_t
    fidl_test_protocols_WithAndWithoutRequestResponseNoRequestWithResponseRequestTable;

extern "C" const fidl_type_t
    fidl_test_protocols_WithAndWithoutRequestResponseNoRequestWithResponseResponseTable;

extern "C" const fidl_type_t
    fidl_test_protocols_WithAndWithoutRequestResponseWithRequestNoResponseRequestTable;

extern "C" const fidl_type_t
    fidl_test_protocols_WithAndWithoutRequestResponseWithRequestNoResponseResponseTable;

extern "C" const fidl_type_t
    fidl_test_protocols_WithAndWithoutRequestResponseWithRequestEmptyResponseRequestTable;

extern "C" const fidl_type_t
    fidl_test_protocols_WithAndWithoutRequestResponseWithRequestEmptyResponseResponseTable;

extern "C" const fidl_type_t
    fidl_test_protocols_WithAndWithoutRequestResponseWithRequestWithResponseRequestTable;

extern "C" const fidl_type_t
    fidl_test_protocols_WithAndWithoutRequestResponseWithRequestWithResponseResponseTable;

extern "C" const fidl_type_t
    fidl_test_protocols_WithAndWithoutRequestResponseOnEmptyResponseRequestTable;

extern "C" const fidl_type_t
    fidl_test_protocols_WithAndWithoutRequestResponseOnEmptyResponseEventTable;

extern "C" const fidl_type_t
    fidl_test_protocols_WithAndWithoutRequestResponseOnWithResponseRequestTable;

extern "C" const fidl_type_t
    fidl_test_protocols_WithAndWithoutRequestResponseOnWithResponseEventTable;

class WithAndWithoutRequestResponse final {
  WithAndWithoutRequestResponse() = delete;

 public:
  struct NoRequestNoResponseRequest final {
    FIDL_ALIGNDECL
    fidl_message_header_t _hdr;
    explicit NoRequestNoResponseRequest(zx_txid_t _txid) { _InitHeader(_txid); }

    static constexpr const fidl_type_t* Type =
        &::fidl::_llcpp_coding_AnyZeroArgMessageTable;
    static constexpr uint32_t MaxNumHandles = 0;
    static constexpr uint32_t PrimarySize = 16;
    static constexpr uint32_t MaxOutOfLine = 0;
    static constexpr uint32_t AltPrimarySize = 16;
    static constexpr uint32_t AltMaxOutOfLine = 0;
    static constexpr bool HasFlexibleEnvelope = false;
    static constexpr bool HasPointer = false;
    static constexpr ::fidl::internal::TransactionalMessageKind MessageKind =
        ::fidl::internal::TransactionalMessageKind::kRequest;

    class UnownedEncodedMessage final {
     public:
      UnownedEncodedMessage(uint8_t* _bytes, uint32_t _byte_size,
                            zx_txid_t _txid)
          : message_(_bytes, _byte_size, sizeof(NoRequestNoResponseRequest),
                     nullptr, 0, 0) {
        FIDL_ALIGNDECL NoRequestNoResponseRequest _request(_txid);
        message_.Encode<NoRequestNoResponseRequest>(&_request);
      }
      UnownedEncodedMessage(uint8_t* bytes, uint32_t byte_size,
                            NoRequestNoResponseRequest* request)
          : message_(bytes, byte_size, sizeof(NoRequestNoResponseRequest),
                     nullptr, 0, 0) {
        message_.Encode<NoRequestNoResponseRequest>(request);
      }
      UnownedEncodedMessage(const UnownedEncodedMessage&) = delete;
      UnownedEncodedMessage(UnownedEncodedMessage&&) = delete;
      UnownedEncodedMessage* operator=(const UnownedEncodedMessage&) = delete;
      UnownedEncodedMessage* operator=(UnownedEncodedMessage&&) = delete;

      zx_status_t status() const { return message_.status(); }
#ifdef __Fuchsia__
      const char* status_string() const { return message_.status_string(); }
#endif
      bool ok() const { return message_.status() == ZX_OK; }
      const char* error() const { return message_.error(); }

      ::fidl::OutgoingMessage& GetOutgoingMessage() { return message_; }

#ifdef __Fuchsia__
      template <typename ChannelLike>
      void Write(ChannelLike&& client) {
        message_.Write(std::forward<ChannelLike>(client));
      }
#endif

     private:
      ::fidl::OutgoingMessage message_;
    };

    class OwnedEncodedMessage final {
     public:
      explicit OwnedEncodedMessage(zx_txid_t _txid)
          : message_(bytes_.data(), bytes_.size(), _txid) {}
      explicit OwnedEncodedMessage(NoRequestNoResponseRequest* request)
          : message_(bytes_.data(), bytes_.size(), request) {}
      OwnedEncodedMessage(const OwnedEncodedMessage&) = delete;
      OwnedEncodedMessage(OwnedEncodedMessage&&) = delete;
      OwnedEncodedMessage* operator=(const OwnedEncodedMessage&) = delete;
      OwnedEncodedMessage* operator=(OwnedEncodedMessage&&) = delete;

      zx_status_t status() const { return message_.status(); }
#ifdef __Fuchsia__
      const char* status_string() const { return message_.status_string(); }
#endif
      bool ok() const { return message_.ok(); }
      const char* error() const { return message_.error(); }

      ::fidl::OutgoingMessage& GetOutgoingMessage() {
        return message_.GetOutgoingMessage();
      }

#ifdef __Fuchsia__
      template <typename ChannelLike>
      void Write(ChannelLike&& client) {
        message_.Write(std::forward<ChannelLike>(client));
      }
#endif

     private:
      ::fidl::internal::InlineMessageBuffer<16> bytes_;
      UnownedEncodedMessage message_;
    };

   public:
    class DecodedMessage final : public ::fidl::internal::IncomingMessage {
     public:
      DecodedMessage(uint8_t* bytes, uint32_t byte_actual,
                     zx_handle_info_t* handles = nullptr,
                     uint32_t handle_actual = 0)
          : ::fidl::internal::IncomingMessage(bytes, byte_actual, handles,
                                              handle_actual) {
        Decode<NoRequestNoResponseRequest>();
      }
      DecodedMessage(fidl_incoming_msg_t* msg)
          : ::fidl::internal::IncomingMessage(msg) {
        Decode<NoRequestNoResponseRequest>();
      }
      DecodedMessage(const DecodedMessage&) = delete;
      DecodedMessage(DecodedMessage&&) = delete;
      DecodedMessage* operator=(const DecodedMessage&) = delete;
      DecodedMessage* operator=(DecodedMessage&&) = delete;

      NoRequestNoResponseRequest* PrimaryObject() {
        ZX_DEBUG_ASSERT(ok());
        return reinterpret_cast<NoRequestNoResponseRequest*>(bytes());
      }

      // Release the ownership of the decoded message. That means that the
      // handles won't be closed When the object is destroyed. After calling
      // this method, the DecodedMessage object should not be used anymore.
      void ReleasePrimaryObject() { ResetBytes(); }
    };

   private:
    void _InitHeader(zx_txid_t _txid);
  };

  struct NoRequestEmptyResponseResponse final {
    FIDL_ALIGNDECL
    fidl_message_header_t _hdr;
    NoRequestEmptyResponseResponse() { _InitHeader(); }

    static constexpr const fidl_type_t* Type =
        &::fidl::_llcpp_coding_AnyZeroArgMessageTable;
    static constexpr uint32_t MaxNumHandles = 0;
    static constexpr uint32_t PrimarySize = 16;
    static constexpr uint32_t MaxOutOfLine = 0;
    static constexpr bool HasFlexibleEnvelope = false;
    static constexpr bool HasPointer = false;
    static constexpr ::fidl::internal::TransactionalMessageKind MessageKind =
        ::fidl::internal::TransactionalMessageKind::kResponse;

    class UnownedEncodedMessage final {
     public:
      UnownedEncodedMessage(uint8_t* _bytes, uint32_t _byte_size)
          : message_(_bytes, _byte_size, sizeof(NoRequestEmptyResponseResponse),
                     nullptr, 0, 0) {
        FIDL_ALIGNDECL NoRequestEmptyResponseResponse _response{};
        message_.Encode<::fidl_test_protocols::WithAndWithoutRequestResponse::
                            NoRequestEmptyResponseResponse>(&_response);
      }
      UnownedEncodedMessage(uint8_t* bytes, uint32_t byte_size,
                            NoRequestEmptyResponseResponse* response)
          : message_(bytes, byte_size, sizeof(NoRequestEmptyResponseResponse),
                     nullptr, 0, 0) {
        message_.Encode<::fidl_test_protocols::WithAndWithoutRequestResponse::
                            NoRequestEmptyResponseResponse>(response);
      }
      UnownedEncodedMessage(const UnownedEncodedMessage&) = delete;
      UnownedEncodedMessage(UnownedEncodedMessage&&) = delete;
      UnownedEncodedMessage* operator=(const UnownedEncodedMessage&) = delete;
      UnownedEncodedMessage* operator=(UnownedEncodedMessage&&) = delete;

      zx_status_t status() const { return message_.status(); }
#ifdef __Fuchsia__
      const char* status_string() const { return message_.status_string(); }
#endif
      bool ok() const { return message_.status() == ZX_OK; }
      const char* error() const { return message_.error(); }

      ::fidl::OutgoingMessage& GetOutgoingMessage() { return message_; }

#ifdef __Fuchsia__
      template <typename ChannelLike>
      void Write(ChannelLike&& client) {
        message_.Write(std::forward<ChannelLike>(client));
      }
#endif

     private:
      ::fidl::OutgoingMessage message_;
    };

    class OwnedEncodedMessage final {
     public:
      explicit OwnedEncodedMessage() : message_(bytes_.data(), bytes_.size()) {}
      explicit OwnedEncodedMessage(
          ::fidl_test_protocols::WithAndWithoutRequestResponse::
              NoRequestEmptyResponseResponse* response)
          : message_(bytes_.data(), bytes_.size(), response) {}
      OwnedEncodedMessage(const OwnedEncodedMessage&) = delete;
      OwnedEncodedMessage(OwnedEncodedMessage&&) = delete;
      OwnedEncodedMessage* operator=(const OwnedEncodedMessage&) = delete;
      OwnedEncodedMessage* operator=(OwnedEncodedMessage&&) = delete;

      zx_status_t status() const { return message_.status(); }
#ifdef __Fuchsia__
      const char* status_string() const { return message_.status_string(); }
#endif
      bool ok() const { return message_.ok(); }
      const char* error() const { return message_.error(); }

      ::fidl::OutgoingMessage& GetOutgoingMessage() {
        return message_.GetOutgoingMessage();
      }

#ifdef __Fuchsia__
      template <typename ChannelLike>
      void Write(ChannelLike&& client) {
        message_.Write(std::forward<ChannelLike>(client));
      }
#endif

     private:
      ::fidl::internal::InlineMessageBuffer<16> bytes_;
      UnownedEncodedMessage message_;
    };

   public:
    class DecodedMessage final : public ::fidl::internal::IncomingMessage {
     public:
      DecodedMessage(uint8_t* bytes, uint32_t byte_actual,
                     zx_handle_info_t* handles = nullptr,
                     uint32_t handle_actual = 0)
          : ::fidl::internal::IncomingMessage(bytes, byte_actual, handles,
                                              handle_actual) {
        Decode<::fidl_test_protocols::WithAndWithoutRequestResponse::
                   NoRequestEmptyResponseResponse>();
      }
      DecodedMessage(fidl_incoming_msg_t* msg)
          : ::fidl::internal::IncomingMessage(msg) {
        Decode<::fidl_test_protocols::WithAndWithoutRequestResponse::
                   NoRequestEmptyResponseResponse>();
      }
      DecodedMessage(const DecodedMessage&) = delete;
      DecodedMessage(DecodedMessage&&) = delete;
      DecodedMessage* operator=(const DecodedMessage&) = delete;
      DecodedMessage* operator=(DecodedMessage&&) = delete;

      NoRequestEmptyResponseResponse* PrimaryObject() {
        ZX_DEBUG_ASSERT(ok());
        return reinterpret_cast<
            ::fidl_test_protocols::WithAndWithoutRequestResponse::
                NoRequestEmptyResponseResponse*>(bytes());
      }

      // Release the ownership of the decoded message. That means that the
      // handles won't be closed When the object is destroyed. After calling
      // this method, the DecodedMessage object should not be used anymore.
      void ReleasePrimaryObject() { ResetBytes(); }
    };

   private:
    void _InitHeader();
  };
  struct NoRequestEmptyResponseRequest final {
    FIDL_ALIGNDECL
    fidl_message_header_t _hdr;
    explicit NoRequestEmptyResponseRequest(zx_txid_t _txid) {
      _InitHeader(_txid);
    }

    static constexpr const fidl_type_t* Type =
        &::fidl::_llcpp_coding_AnyZeroArgMessageTable;
    static constexpr uint32_t MaxNumHandles = 0;
    static constexpr uint32_t PrimarySize = 16;
    static constexpr uint32_t MaxOutOfLine = 0;
    static constexpr uint32_t AltPrimarySize = 16;
    static constexpr uint32_t AltMaxOutOfLine = 0;
    static constexpr bool HasFlexibleEnvelope = false;
    static constexpr bool HasPointer = false;
    static constexpr ::fidl::internal::TransactionalMessageKind MessageKind =
        ::fidl::internal::TransactionalMessageKind::kRequest;

    class UnownedEncodedMessage final {
     public:
      UnownedEncodedMessage(uint8_t* _bytes, uint32_t _byte_size,
                            zx_txid_t _txid)
          : message_(_bytes, _byte_size, sizeof(NoRequestEmptyResponseRequest),
                     nullptr, 0, 0) {
        FIDL_ALIGNDECL NoRequestEmptyResponseRequest _request(_txid);
        message_.Encode<NoRequestEmptyResponseRequest>(&_request);
      }
      UnownedEncodedMessage(uint8_t* bytes, uint32_t byte_size,
                            NoRequestEmptyResponseRequest* request)
          : message_(bytes, byte_size, sizeof(NoRequestEmptyResponseRequest),
                     nullptr, 0, 0) {
        message_.Encode<NoRequestEmptyResponseRequest>(request);
      }
      UnownedEncodedMessage(const UnownedEncodedMessage&) = delete;
      UnownedEncodedMessage(UnownedEncodedMessage&&) = delete;
      UnownedEncodedMessage* operator=(const UnownedEncodedMessage&) = delete;
      UnownedEncodedMessage* operator=(UnownedEncodedMessage&&) = delete;

      zx_status_t status() const { return message_.status(); }
#ifdef __Fuchsia__
      const char* status_string() const { return message_.status_string(); }
#endif
      bool ok() const { return message_.status() == ZX_OK; }
      const char* error() const { return message_.error(); }

      ::fidl::OutgoingMessage& GetOutgoingMessage() { return message_; }

#ifdef __Fuchsia__
      template <typename ChannelLike>
      void Write(ChannelLike&& client) {
        message_.Write(std::forward<ChannelLike>(client));
      }
#endif

     private:
      ::fidl::OutgoingMessage message_;
    };

    class OwnedEncodedMessage final {
     public:
      explicit OwnedEncodedMessage(zx_txid_t _txid)
          : message_(bytes_.data(), bytes_.size(), _txid) {}
      explicit OwnedEncodedMessage(NoRequestEmptyResponseRequest* request)
          : message_(bytes_.data(), bytes_.size(), request) {}
      OwnedEncodedMessage(const OwnedEncodedMessage&) = delete;
      OwnedEncodedMessage(OwnedEncodedMessage&&) = delete;
      OwnedEncodedMessage* operator=(const OwnedEncodedMessage&) = delete;
      OwnedEncodedMessage* operator=(OwnedEncodedMessage&&) = delete;

      zx_status_t status() const { return message_.status(); }
#ifdef __Fuchsia__
      const char* status_string() const { return message_.status_string(); }
#endif
      bool ok() const { return message_.ok(); }
      const char* error() const { return message_.error(); }

      ::fidl::OutgoingMessage& GetOutgoingMessage() {
        return message_.GetOutgoingMessage();
      }

#ifdef __Fuchsia__
      template <typename ChannelLike>
      void Write(ChannelLike&& client) {
        message_.Write(std::forward<ChannelLike>(client));
      }
#endif

     private:
      ::fidl::internal::InlineMessageBuffer<16> bytes_;
      UnownedEncodedMessage message_;
    };

   public:
    class DecodedMessage final : public ::fidl::internal::IncomingMessage {
     public:
      DecodedMessage(uint8_t* bytes, uint32_t byte_actual,
                     zx_handle_info_t* handles = nullptr,
                     uint32_t handle_actual = 0)
          : ::fidl::internal::IncomingMessage(bytes, byte_actual, handles,
                                              handle_actual) {
        Decode<NoRequestEmptyResponseRequest>();
      }
      DecodedMessage(fidl_incoming_msg_t* msg)
          : ::fidl::internal::IncomingMessage(msg) {
        Decode<NoRequestEmptyResponseRequest>();
      }
      DecodedMessage(const DecodedMessage&) = delete;
      DecodedMessage(DecodedMessage&&) = delete;
      DecodedMessage* operator=(const DecodedMessage&) = delete;
      DecodedMessage* operator=(DecodedMessage&&) = delete;

      NoRequestEmptyResponseRequest* PrimaryObject() {
        ZX_DEBUG_ASSERT(ok());
        return reinterpret_cast<NoRequestEmptyResponseRequest*>(bytes());
      }

      // Release the ownership of the decoded message. That means that the
      // handles won't be closed When the object is destroyed. After calling
      // this method, the DecodedMessage object should not be used anymore.
      void ReleasePrimaryObject() { ResetBytes(); }
    };

   private:
    void _InitHeader(zx_txid_t _txid);
  };

  struct NoRequestWithResponseResponse final {
    FIDL_ALIGNDECL
    fidl_message_header_t _hdr;
    ::fidl::StringView ret;
    explicit NoRequestWithResponseResponse(const ::fidl::StringView& ret)
        : ret(::fidl::unowned_ptr_t<const char>(ret.data()), ret.size()) {
      _InitHeader();
    }
    NoRequestWithResponseResponse() { _InitHeader(); }

    static constexpr const fidl_type_t* Type =
        &::fidl_test_protocols::
            fidl_test_protocols_WithAndWithoutRequestResponseNoRequestWithResponseResponseTable;
    static constexpr uint32_t MaxNumHandles = 0;
    static constexpr uint32_t PrimarySize = 32;
    static constexpr uint32_t MaxOutOfLine = 4294967295;
    static constexpr bool HasFlexibleEnvelope = false;
    static constexpr bool HasPointer = true;
    static constexpr ::fidl::internal::TransactionalMessageKind MessageKind =
        ::fidl::internal::TransactionalMessageKind::kResponse;

    class UnownedEncodedMessage final {
     public:
      UnownedEncodedMessage(uint8_t* _bytes, uint32_t _byte_size,
                            const ::fidl::StringView& ret)
          : message_(_bytes, _byte_size, sizeof(NoRequestWithResponseResponse),
                     nullptr, 0, 0) {
        FIDL_ALIGNDECL NoRequestWithResponseResponse _response{ret};
        message_.Encode<::fidl_test_protocols::WithAndWithoutRequestResponse::
                            NoRequestWithResponseResponse>(&_response);
      }
      UnownedEncodedMessage(uint8_t* bytes, uint32_t byte_size,
                            NoRequestWithResponseResponse* response)
          : message_(bytes, byte_size, sizeof(NoRequestWithResponseResponse),
                     nullptr, 0, 0) {
        message_.Encode<::fidl_test_protocols::WithAndWithoutRequestResponse::
                            NoRequestWithResponseResponse>(response);
      }
      UnownedEncodedMessage(const UnownedEncodedMessage&) = delete;
      UnownedEncodedMessage(UnownedEncodedMessage&&) = delete;
      UnownedEncodedMessage* operator=(const UnownedEncodedMessage&) = delete;
      UnownedEncodedMessage* operator=(UnownedEncodedMessage&&) = delete;

      zx_status_t status() const { return message_.status(); }
#ifdef __Fuchsia__
      const char* status_string() const { return message_.status_string(); }
#endif
      bool ok() const { return message_.status() == ZX_OK; }
      const char* error() const { return message_.error(); }

      ::fidl::OutgoingMessage& GetOutgoingMessage() { return message_; }

#ifdef __Fuchsia__
      template <typename ChannelLike>
      void Write(ChannelLike&& client) {
        message_.Write(std::forward<ChannelLike>(client));
      }
#endif

     private:
      ::fidl::OutgoingMessage message_;
    };

    class OwnedEncodedMessage final {
     public:
      explicit OwnedEncodedMessage(const ::fidl::StringView& ret)
          : message_(bytes_.data(), bytes_.size(), ret) {}
      explicit OwnedEncodedMessage(
          ::fidl_test_protocols::WithAndWithoutRequestResponse::
              NoRequestWithResponseResponse* response)
          : message_(bytes_.data(), bytes_.size(), response) {}
      OwnedEncodedMessage(const OwnedEncodedMessage&) = delete;
      OwnedEncodedMessage(OwnedEncodedMessage&&) = delete;
      OwnedEncodedMessage* operator=(const OwnedEncodedMessage&) = delete;
      OwnedEncodedMessage* operator=(OwnedEncodedMessage&&) = delete;

      zx_status_t status() const { return message_.status(); }
#ifdef __Fuchsia__
      const char* status_string() const { return message_.status_string(); }
#endif
      bool ok() const { return message_.ok(); }
      const char* error() const { return message_.error(); }

      ::fidl::OutgoingMessage& GetOutgoingMessage() {
        return message_.GetOutgoingMessage();
      }

#ifdef __Fuchsia__
      template <typename ChannelLike>
      void Write(ChannelLike&& client) {
        message_.Write(std::forward<ChannelLike>(client));
      }
#endif

     private:
      ::fidl::internal::BoxedMessageBuffer<ZX_CHANNEL_MAX_MSG_BYTES> bytes_;
      UnownedEncodedMessage message_;
    };

   public:
    class DecodedMessage final : public ::fidl::internal::IncomingMessage {
     public:
      DecodedMessage(uint8_t* bytes, uint32_t byte_actual,
                     zx_handle_info_t* handles = nullptr,
                     uint32_t handle_actual = 0)
          : ::fidl::internal::IncomingMessage(bytes, byte_actual, handles,
                                              handle_actual) {
        Decode<::fidl_test_protocols::WithAndWithoutRequestResponse::
                   NoRequestWithResponseResponse>();
      }
      DecodedMessage(fidl_incoming_msg_t* msg)
          : ::fidl::internal::IncomingMessage(msg) {
        Decode<::fidl_test_protocols::WithAndWithoutRequestResponse::
                   NoRequestWithResponseResponse>();
      }
      DecodedMessage(const DecodedMessage&) = delete;
      DecodedMessage(DecodedMessage&&) = delete;
      DecodedMessage* operator=(const DecodedMessage&) = delete;
      DecodedMessage* operator=(DecodedMessage&&) = delete;

      NoRequestWithResponseResponse* PrimaryObject() {
        ZX_DEBUG_ASSERT(ok());
        return reinterpret_cast<
            ::fidl_test_protocols::WithAndWithoutRequestResponse::
                NoRequestWithResponseResponse*>(bytes());
      }

      // Release the ownership of the decoded message. That means that the
      // handles won't be closed When the object is destroyed. After calling
      // this method, the DecodedMessage object should not be used anymore.
      void ReleasePrimaryObject() { ResetBytes(); }
    };

   private:
    void _InitHeader();
  };
  struct NoRequestWithResponseRequest final {
    FIDL_ALIGNDECL
    fidl_message_header_t _hdr;
    explicit NoRequestWithResponseRequest(zx_txid_t _txid) {
      _InitHeader(_txid);
    }

    static constexpr const fidl_type_t* Type =
        &::fidl::_llcpp_coding_AnyZeroArgMessageTable;
    static constexpr uint32_t MaxNumHandles = 0;
    static constexpr uint32_t PrimarySize = 16;
    static constexpr uint32_t MaxOutOfLine = 0;
    static constexpr uint32_t AltPrimarySize = 16;
    static constexpr uint32_t AltMaxOutOfLine = 0;
    static constexpr bool HasFlexibleEnvelope = false;
    static constexpr bool HasPointer = false;
    static constexpr ::fidl::internal::TransactionalMessageKind MessageKind =
        ::fidl::internal::TransactionalMessageKind::kRequest;
    using ResponseType = ::fidl_test_protocols::WithAndWithoutRequestResponse::
        NoRequestWithResponseResponse;

    class UnownedEncodedMessage final {
     public:
      UnownedEncodedMessage(uint8_t* _bytes, uint32_t _byte_size,
                            zx_txid_t _txid)
          : message_(_bytes, _byte_size, sizeof(NoRequestWithResponseRequest),
                     nullptr, 0, 0) {
        FIDL_ALIGNDECL NoRequestWithResponseRequest _request(_txid);
        message_.Encode<NoRequestWithResponseRequest>(&_request);
      }
      UnownedEncodedMessage(uint8_t* bytes, uint32_t byte_size,
                            NoRequestWithResponseRequest* request)
          : message_(bytes, byte_size, sizeof(NoRequestWithResponseRequest),
                     nullptr, 0, 0) {
        message_.Encode<NoRequestWithResponseRequest>(request);
      }
      UnownedEncodedMessage(const UnownedEncodedMessage&) = delete;
      UnownedEncodedMessage(UnownedEncodedMessage&&) = delete;
      UnownedEncodedMessage* operator=(const UnownedEncodedMessage&) = delete;
      UnownedEncodedMessage* operator=(UnownedEncodedMessage&&) = delete;

      zx_status_t status() const { return message_.status(); }
#ifdef __Fuchsia__
      const char* status_string() const { return message_.status_string(); }
#endif
      bool ok() const { return message_.status() == ZX_OK; }
      const char* error() const { return message_.error(); }

      ::fidl::OutgoingMessage& GetOutgoingMessage() { return message_; }

#ifdef __Fuchsia__
      template <typename ChannelLike>
      void Write(ChannelLike&& client) {
        message_.Write(std::forward<ChannelLike>(client));
      }
#endif

     private:
      ::fidl::OutgoingMessage message_;
    };

    class OwnedEncodedMessage final {
     public:
      explicit OwnedEncodedMessage(zx_txid_t _txid)
          : message_(bytes_.data(), bytes_.size(), _txid) {}
      explicit OwnedEncodedMessage(NoRequestWithResponseRequest* request)
          : message_(bytes_.data(), bytes_.size(), request) {}
      OwnedEncodedMessage(const OwnedEncodedMessage&) = delete;
      OwnedEncodedMessage(OwnedEncodedMessage&&) = delete;
      OwnedEncodedMessage* operator=(const OwnedEncodedMessage&) = delete;
      OwnedEncodedMessage* operator=(OwnedEncodedMessage&&) = delete;

      zx_status_t status() const { return message_.status(); }
#ifdef __Fuchsia__
      const char* status_string() const { return message_.status_string(); }
#endif
      bool ok() const { return message_.ok(); }
      const char* error() const { return message_.error(); }

      ::fidl::OutgoingMessage& GetOutgoingMessage() {
        return message_.GetOutgoingMessage();
      }

#ifdef __Fuchsia__
      template <typename ChannelLike>
      void Write(ChannelLike&& client) {
        message_.Write(std::forward<ChannelLike>(client));
      }
#endif

     private:
      ::fidl::internal::InlineMessageBuffer<16> bytes_;
      UnownedEncodedMessage message_;
    };

   public:
    class DecodedMessage final : public ::fidl::internal::IncomingMessage {
     public:
      DecodedMessage(uint8_t* bytes, uint32_t byte_actual,
                     zx_handle_info_t* handles = nullptr,
                     uint32_t handle_actual = 0)
          : ::fidl::internal::IncomingMessage(bytes, byte_actual, handles,
                                              handle_actual) {
        Decode<NoRequestWithResponseRequest>();
      }
      DecodedMessage(fidl_incoming_msg_t* msg)
          : ::fidl::internal::IncomingMessage(msg) {
        Decode<NoRequestWithResponseRequest>();
      }
      DecodedMessage(const DecodedMessage&) = delete;
      DecodedMessage(DecodedMessage&&) = delete;
      DecodedMessage* operator=(const DecodedMessage&) = delete;
      DecodedMessage* operator=(DecodedMessage&&) = delete;

      NoRequestWithResponseRequest* PrimaryObject() {
        ZX_DEBUG_ASSERT(ok());
        return reinterpret_cast<NoRequestWithResponseRequest*>(bytes());
      }

      // Release the ownership of the decoded message. That means that the
      // handles won't be closed When the object is destroyed. After calling
      // this method, the DecodedMessage object should not be used anymore.
      void ReleasePrimaryObject() { ResetBytes(); }
    };

   private:
    void _InitHeader(zx_txid_t _txid);
  };

  struct WithRequestNoResponseRequest final {
    FIDL_ALIGNDECL
    fidl_message_header_t _hdr;
    ::fidl::StringView arg;
    explicit WithRequestNoResponseRequest(zx_txid_t _txid,
                                          const ::fidl::StringView& arg)
        : arg(::fidl::unowned_ptr_t<const char>(arg.data()), arg.size()) {
      _InitHeader(_txid);
    }
    explicit WithRequestNoResponseRequest(zx_txid_t _txid) {
      _InitHeader(_txid);
    }

    static constexpr const fidl_type_t* Type =
        &::fidl_test_protocols::
            fidl_test_protocols_WithAndWithoutRequestResponseWithRequestNoResponseRequestTable;
    static constexpr uint32_t MaxNumHandles = 0;
    static constexpr uint32_t PrimarySize = 32;
    static constexpr uint32_t MaxOutOfLine = 4294967295;
    static constexpr uint32_t AltPrimarySize = 32;
    static constexpr uint32_t AltMaxOutOfLine = 4294967295;
    static constexpr bool HasFlexibleEnvelope = false;
    static constexpr bool HasPointer = true;
    static constexpr ::fidl::internal::TransactionalMessageKind MessageKind =
        ::fidl::internal::TransactionalMessageKind::kRequest;

    class UnownedEncodedMessage final {
     public:
      UnownedEncodedMessage(uint8_t* _bytes, uint32_t _byte_size,
                            zx_txid_t _txid, const ::fidl::StringView& arg)
          : message_(_bytes, _byte_size, sizeof(WithRequestNoResponseRequest),
                     nullptr, 0, 0) {
        FIDL_ALIGNDECL WithRequestNoResponseRequest _request(_txid, arg);
        message_.Encode<WithRequestNoResponseRequest>(&_request);
      }
      UnownedEncodedMessage(uint8_t* bytes, uint32_t byte_size,
                            WithRequestNoResponseRequest* request)
          : message_(bytes, byte_size, sizeof(WithRequestNoResponseRequest),
                     nullptr, 0, 0) {
        message_.Encode<WithRequestNoResponseRequest>(request);
      }
      UnownedEncodedMessage(const UnownedEncodedMessage&) = delete;
      UnownedEncodedMessage(UnownedEncodedMessage&&) = delete;
      UnownedEncodedMessage* operator=(const UnownedEncodedMessage&) = delete;
      UnownedEncodedMessage* operator=(UnownedEncodedMessage&&) = delete;

      zx_status_t status() const { return message_.status(); }
#ifdef __Fuchsia__
      const char* status_string() const { return message_.status_string(); }
#endif
      bool ok() const { return message_.status() == ZX_OK; }
      const char* error() const { return message_.error(); }

      ::fidl::OutgoingMessage& GetOutgoingMessage() { return message_; }

#ifdef __Fuchsia__
      template <typename ChannelLike>
      void Write(ChannelLike&& client) {
        message_.Write(std::forward<ChannelLike>(client));
      }
#endif

     private:
      ::fidl::OutgoingMessage message_;
    };

    class OwnedEncodedMessage final {
     public:
      explicit OwnedEncodedMessage(zx_txid_t _txid,
                                   const ::fidl::StringView& arg)
          : message_(bytes_.data(), bytes_.size(), _txid, arg) {}
      explicit OwnedEncodedMessage(WithRequestNoResponseRequest* request)
          : message_(bytes_.data(), bytes_.size(), request) {}
      OwnedEncodedMessage(const OwnedEncodedMessage&) = delete;
      OwnedEncodedMessage(OwnedEncodedMessage&&) = delete;
      OwnedEncodedMessage* operator=(const OwnedEncodedMessage&) = delete;
      OwnedEncodedMessage* operator=(OwnedEncodedMessage&&) = delete;

      zx_status_t status() const { return message_.status(); }
#ifdef __Fuchsia__
      const char* status_string() const { return message_.status_string(); }
#endif
      bool ok() const { return message_.ok(); }
      const char* error() const { return message_.error(); }

      ::fidl::OutgoingMessage& GetOutgoingMessage() {
        return message_.GetOutgoingMessage();
      }

#ifdef __Fuchsia__
      template <typename ChannelLike>
      void Write(ChannelLike&& client) {
        message_.Write(std::forward<ChannelLike>(client));
      }
#endif

     private:
      ::fidl::internal::BoxedMessageBuffer<ZX_CHANNEL_MAX_MSG_BYTES> bytes_;
      UnownedEncodedMessage message_;
    };

   public:
    class DecodedMessage final : public ::fidl::internal::IncomingMessage {
     public:
      DecodedMessage(uint8_t* bytes, uint32_t byte_actual,
                     zx_handle_info_t* handles = nullptr,
                     uint32_t handle_actual = 0)
          : ::fidl::internal::IncomingMessage(bytes, byte_actual, handles,
                                              handle_actual) {
        Decode<WithRequestNoResponseRequest>();
      }
      DecodedMessage(fidl_incoming_msg_t* msg)
          : ::fidl::internal::IncomingMessage(msg) {
        Decode<WithRequestNoResponseRequest>();
      }
      DecodedMessage(const DecodedMessage&) = delete;
      DecodedMessage(DecodedMessage&&) = delete;
      DecodedMessage* operator=(const DecodedMessage&) = delete;
      DecodedMessage* operator=(DecodedMessage&&) = delete;

      WithRequestNoResponseRequest* PrimaryObject() {
        ZX_DEBUG_ASSERT(ok());
        return reinterpret_cast<WithRequestNoResponseRequest*>(bytes());
      }

      // Release the ownership of the decoded message. That means that the
      // handles won't be closed When the object is destroyed. After calling
      // this method, the DecodedMessage object should not be used anymore.
      void ReleasePrimaryObject() { ResetBytes(); }
    };

   private:
    void _InitHeader(zx_txid_t _txid);
  };

  struct WithRequestEmptyResponseResponse final {
    FIDL_ALIGNDECL
    fidl_message_header_t _hdr;
    WithRequestEmptyResponseResponse() { _InitHeader(); }

    static constexpr const fidl_type_t* Type =
        &::fidl::_llcpp_coding_AnyZeroArgMessageTable;
    static constexpr uint32_t MaxNumHandles = 0;
    static constexpr uint32_t PrimarySize = 16;
    static constexpr uint32_t MaxOutOfLine = 0;
    static constexpr bool HasFlexibleEnvelope = false;
    static constexpr bool HasPointer = false;
    static constexpr ::fidl::internal::TransactionalMessageKind MessageKind =
        ::fidl::internal::TransactionalMessageKind::kResponse;

    class UnownedEncodedMessage final {
     public:
      UnownedEncodedMessage(uint8_t* _bytes, uint32_t _byte_size)
          : message_(_bytes, _byte_size,
                     sizeof(WithRequestEmptyResponseResponse), nullptr, 0, 0) {
        FIDL_ALIGNDECL WithRequestEmptyResponseResponse _response{};
        message_.Encode<::fidl_test_protocols::WithAndWithoutRequestResponse::
                            WithRequestEmptyResponseResponse>(&_response);
      }
      UnownedEncodedMessage(uint8_t* bytes, uint32_t byte_size,
                            WithRequestEmptyResponseResponse* response)
          : message_(bytes, byte_size, sizeof(WithRequestEmptyResponseResponse),
                     nullptr, 0, 0) {
        message_.Encode<::fidl_test_protocols::WithAndWithoutRequestResponse::
                            WithRequestEmptyResponseResponse>(response);
      }
      UnownedEncodedMessage(const UnownedEncodedMessage&) = delete;
      UnownedEncodedMessage(UnownedEncodedMessage&&) = delete;
      UnownedEncodedMessage* operator=(const UnownedEncodedMessage&) = delete;
      UnownedEncodedMessage* operator=(UnownedEncodedMessage&&) = delete;

      zx_status_t status() const { return message_.status(); }
#ifdef __Fuchsia__
      const char* status_string() const { return message_.status_string(); }
#endif
      bool ok() const { return message_.status() == ZX_OK; }
      const char* error() const { return message_.error(); }

      ::fidl::OutgoingMessage& GetOutgoingMessage() { return message_; }

#ifdef __Fuchsia__
      template <typename ChannelLike>
      void Write(ChannelLike&& client) {
        message_.Write(std::forward<ChannelLike>(client));
      }
#endif

     private:
      ::fidl::OutgoingMessage message_;
    };

    class OwnedEncodedMessage final {
     public:
      explicit OwnedEncodedMessage() : message_(bytes_.data(), bytes_.size()) {}
      explicit OwnedEncodedMessage(
          ::fidl_test_protocols::WithAndWithoutRequestResponse::
              WithRequestEmptyResponseResponse* response)
          : message_(bytes_.data(), bytes_.size(), response) {}
      OwnedEncodedMessage(const OwnedEncodedMessage&) = delete;
      OwnedEncodedMessage(OwnedEncodedMessage&&) = delete;
      OwnedEncodedMessage* operator=(const OwnedEncodedMessage&) = delete;
      OwnedEncodedMessage* operator=(OwnedEncodedMessage&&) = delete;

      zx_status_t status() const { return message_.status(); }
#ifdef __Fuchsia__
      const char* status_string() const { return message_.status_string(); }
#endif
      bool ok() const { return message_.ok(); }
      const char* error() const { return message_.error(); }

      ::fidl::OutgoingMessage& GetOutgoingMessage() {
        return message_.GetOutgoingMessage();
      }

#ifdef __Fuchsia__
      template <typename ChannelLike>
      void Write(ChannelLike&& client) {
        message_.Write(std::forward<ChannelLike>(client));
      }
#endif

     private:
      ::fidl::internal::InlineMessageBuffer<16> bytes_;
      UnownedEncodedMessage message_;
    };

   public:
    class DecodedMessage final : public ::fidl::internal::IncomingMessage {
     public:
      DecodedMessage(uint8_t* bytes, uint32_t byte_actual,
                     zx_handle_info_t* handles = nullptr,
                     uint32_t handle_actual = 0)
          : ::fidl::internal::IncomingMessage(bytes, byte_actual, handles,
                                              handle_actual) {
        Decode<::fidl_test_protocols::WithAndWithoutRequestResponse::
                   WithRequestEmptyResponseResponse>();
      }
      DecodedMessage(fidl_incoming_msg_t* msg)
          : ::fidl::internal::IncomingMessage(msg) {
        Decode<::fidl_test_protocols::WithAndWithoutRequestResponse::
                   WithRequestEmptyResponseResponse>();
      }
      DecodedMessage(const DecodedMessage&) = delete;
      DecodedMessage(DecodedMessage&&) = delete;
      DecodedMessage* operator=(const DecodedMessage&) = delete;
      DecodedMessage* operator=(DecodedMessage&&) = delete;

      WithRequestEmptyResponseResponse* PrimaryObject() {
        ZX_DEBUG_ASSERT(ok());
        return reinterpret_cast<
            ::fidl_test_protocols::WithAndWithoutRequestResponse::
                WithRequestEmptyResponseResponse*>(bytes());
      }

      // Release the ownership of the decoded message. That means that the
      // handles won't be closed When the object is destroyed. After calling
      // this method, the DecodedMessage object should not be used anymore.
      void ReleasePrimaryObject() { ResetBytes(); }
    };

   private:
    void _InitHeader();
  };
  struct WithRequestEmptyResponseRequest final {
    FIDL_ALIGNDECL
    fidl_message_header_t _hdr;
    ::fidl::StringView arg;
    explicit WithRequestEmptyResponseRequest(zx_txid_t _txid,
                                             const ::fidl::StringView& arg)
        : arg(::fidl::unowned_ptr_t<const char>(arg.data()), arg.size()) {
      _InitHeader(_txid);
    }
    explicit WithRequestEmptyResponseRequest(zx_txid_t _txid) {
      _InitHeader(_txid);
    }

    static constexpr const fidl_type_t* Type =
        &::fidl_test_protocols::
            fidl_test_protocols_WithAndWithoutRequestResponseWithRequestEmptyResponseRequestTable;
    static constexpr uint32_t MaxNumHandles = 0;
    static constexpr uint32_t PrimarySize = 32;
    static constexpr uint32_t MaxOutOfLine = 4294967295;
    static constexpr uint32_t AltPrimarySize = 32;
    static constexpr uint32_t AltMaxOutOfLine = 4294967295;
    static constexpr bool HasFlexibleEnvelope = false;
    static constexpr bool HasPointer = true;
    static constexpr ::fidl::internal::TransactionalMessageKind MessageKind =
        ::fidl::internal::TransactionalMessageKind::kRequest;

    class UnownedEncodedMessage final {
     public:
      UnownedEncodedMessage(uint8_t* _bytes, uint32_t _byte_size,
                            zx_txid_t _txid, const ::fidl::StringView& arg)
          : message_(_bytes, _byte_size,
                     sizeof(WithRequestEmptyResponseRequest), nullptr, 0, 0) {
        FIDL_ALIGNDECL WithRequestEmptyResponseRequest _request(_txid, arg);
        message_.Encode<WithRequestEmptyResponseRequest>(&_request);
      }
      UnownedEncodedMessage(uint8_t* bytes, uint32_t byte_size,
                            WithRequestEmptyResponseRequest* request)
          : message_(bytes, byte_size, sizeof(WithRequestEmptyResponseRequest),
                     nullptr, 0, 0) {
        message_.Encode<WithRequestEmptyResponseRequest>(request);
      }
      UnownedEncodedMessage(const UnownedEncodedMessage&) = delete;
      UnownedEncodedMessage(UnownedEncodedMessage&&) = delete;
      UnownedEncodedMessage* operator=(const UnownedEncodedMessage&) = delete;
      UnownedEncodedMessage* operator=(UnownedEncodedMessage&&) = delete;

      zx_status_t status() const { return message_.status(); }
#ifdef __Fuchsia__
      const char* status_string() const { return message_.status_string(); }
#endif
      bool ok() const { return message_.status() == ZX_OK; }
      const char* error() const { return message_.error(); }

      ::fidl::OutgoingMessage& GetOutgoingMessage() { return message_; }

#ifdef __Fuchsia__
      template <typename ChannelLike>
      void Write(ChannelLike&& client) {
        message_.Write(std::forward<ChannelLike>(client));
      }
#endif

     private:
      ::fidl::OutgoingMessage message_;
    };

    class OwnedEncodedMessage final {
     public:
      explicit OwnedEncodedMessage(zx_txid_t _txid,
                                   const ::fidl::StringView& arg)
          : message_(bytes_.data(), bytes_.size(), _txid, arg) {}
      explicit OwnedEncodedMessage(WithRequestEmptyResponseRequest* request)
          : message_(bytes_.data(), bytes_.size(), request) {}
      OwnedEncodedMessage(const OwnedEncodedMessage&) = delete;
      OwnedEncodedMessage(OwnedEncodedMessage&&) = delete;
      OwnedEncodedMessage* operator=(const OwnedEncodedMessage&) = delete;
      OwnedEncodedMessage* operator=(OwnedEncodedMessage&&) = delete;

      zx_status_t status() const { return message_.status(); }
#ifdef __Fuchsia__
      const char* status_string() const { return message_.status_string(); }
#endif
      bool ok() const { return message_.ok(); }
      const char* error() const { return message_.error(); }

      ::fidl::OutgoingMessage& GetOutgoingMessage() {
        return message_.GetOutgoingMessage();
      }

#ifdef __Fuchsia__
      template <typename ChannelLike>
      void Write(ChannelLike&& client) {
        message_.Write(std::forward<ChannelLike>(client));
      }
#endif

     private:
      ::fidl::internal::BoxedMessageBuffer<ZX_CHANNEL_MAX_MSG_BYTES> bytes_;
      UnownedEncodedMessage message_;
    };

   public:
    class DecodedMessage final : public ::fidl::internal::IncomingMessage {
     public:
      DecodedMessage(uint8_t* bytes, uint32_t byte_actual,
                     zx_handle_info_t* handles = nullptr,
                     uint32_t handle_actual = 0)
          : ::fidl::internal::IncomingMessage(bytes, byte_actual, handles,
                                              handle_actual) {
        Decode<WithRequestEmptyResponseRequest>();
      }
      DecodedMessage(fidl_incoming_msg_t* msg)
          : ::fidl::internal::IncomingMessage(msg) {
        Decode<WithRequestEmptyResponseRequest>();
      }
      DecodedMessage(const DecodedMessage&) = delete;
      DecodedMessage(DecodedMessage&&) = delete;
      DecodedMessage* operator=(const DecodedMessage&) = delete;
      DecodedMessage* operator=(DecodedMessage&&) = delete;

      WithRequestEmptyResponseRequest* PrimaryObject() {
        ZX_DEBUG_ASSERT(ok());
        return reinterpret_cast<WithRequestEmptyResponseRequest*>(bytes());
      }

      // Release the ownership of the decoded message. That means that the
      // handles won't be closed When the object is destroyed. After calling
      // this method, the DecodedMessage object should not be used anymore.
      void ReleasePrimaryObject() { ResetBytes(); }
    };

   private:
    void _InitHeader(zx_txid_t _txid);
  };

  struct WithRequestWithResponseResponse final {
    FIDL_ALIGNDECL
    fidl_message_header_t _hdr;
    ::fidl::StringView ret;
    explicit WithRequestWithResponseResponse(const ::fidl::StringView& ret)
        : ret(::fidl::unowned_ptr_t<const char>(ret.data()), ret.size()) {
      _InitHeader();
    }
    WithRequestWithResponseResponse() { _InitHeader(); }

    static constexpr const fidl_type_t* Type =
        &::fidl_test_protocols::
            fidl_test_protocols_WithAndWithoutRequestResponseWithRequestWithResponseResponseTable;
    static constexpr uint32_t MaxNumHandles = 0;
    static constexpr uint32_t PrimarySize = 32;
    static constexpr uint32_t MaxOutOfLine = 4294967295;
    static constexpr bool HasFlexibleEnvelope = false;
    static constexpr bool HasPointer = true;
    static constexpr ::fidl::internal::TransactionalMessageKind MessageKind =
        ::fidl::internal::TransactionalMessageKind::kResponse;

    class UnownedEncodedMessage final {
     public:
      UnownedEncodedMessage(uint8_t* _bytes, uint32_t _byte_size,
                            const ::fidl::StringView& ret)
          : message_(_bytes, _byte_size,
                     sizeof(WithRequestWithResponseResponse), nullptr, 0, 0) {
        FIDL_ALIGNDECL WithRequestWithResponseResponse _response{ret};
        message_.Encode<::fidl_test_protocols::WithAndWithoutRequestResponse::
                            WithRequestWithResponseResponse>(&_response);
      }
      UnownedEncodedMessage(uint8_t* bytes, uint32_t byte_size,
                            WithRequestWithResponseResponse* response)
          : message_(bytes, byte_size, sizeof(WithRequestWithResponseResponse),
                     nullptr, 0, 0) {
        message_.Encode<::fidl_test_protocols::WithAndWithoutRequestResponse::
                            WithRequestWithResponseResponse>(response);
      }
      UnownedEncodedMessage(const UnownedEncodedMessage&) = delete;
      UnownedEncodedMessage(UnownedEncodedMessage&&) = delete;
      UnownedEncodedMessage* operator=(const UnownedEncodedMessage&) = delete;
      UnownedEncodedMessage* operator=(UnownedEncodedMessage&&) = delete;

      zx_status_t status() const { return message_.status(); }
#ifdef __Fuchsia__
      const char* status_string() const { return message_.status_string(); }
#endif
      bool ok() const { return message_.status() == ZX_OK; }
      const char* error() const { return message_.error(); }

      ::fidl::OutgoingMessage& GetOutgoingMessage() { return message_; }

#ifdef __Fuchsia__
      template <typename ChannelLike>
      void Write(ChannelLike&& client) {
        message_.Write(std::forward<ChannelLike>(client));
      }
#endif

     private:
      ::fidl::OutgoingMessage message_;
    };

    class OwnedEncodedMessage final {
     public:
      explicit OwnedEncodedMessage(const ::fidl::StringView& ret)
          : message_(bytes_.data(), bytes_.size(), ret) {}
      explicit OwnedEncodedMessage(
          ::fidl_test_protocols::WithAndWithoutRequestResponse::
              WithRequestWithResponseResponse* response)
          : message_(bytes_.data(), bytes_.size(), response) {}
      OwnedEncodedMessage(const OwnedEncodedMessage&) = delete;
      OwnedEncodedMessage(OwnedEncodedMessage&&) = delete;
      OwnedEncodedMessage* operator=(const OwnedEncodedMessage&) = delete;
      OwnedEncodedMessage* operator=(OwnedEncodedMessage&&) = delete;

      zx_status_t status() const { return message_.status(); }
#ifdef __Fuchsia__
      const char* status_string() const { return message_.status_string(); }
#endif
      bool ok() const { return message_.ok(); }
      const char* error() const { return message_.error(); }

      ::fidl::OutgoingMessage& GetOutgoingMessage() {
        return message_.GetOutgoingMessage();
      }

#ifdef __Fuchsia__
      template <typename ChannelLike>
      void Write(ChannelLike&& client) {
        message_.Write(std::forward<ChannelLike>(client));
      }
#endif

     private:
      ::fidl::internal::BoxedMessageBuffer<ZX_CHANNEL_MAX_MSG_BYTES> bytes_;
      UnownedEncodedMessage message_;
    };

   public:
    class DecodedMessage final : public ::fidl::internal::IncomingMessage {
     public:
      DecodedMessage(uint8_t* bytes, uint32_t byte_actual,
                     zx_handle_info_t* handles = nullptr,
                     uint32_t handle_actual = 0)
          : ::fidl::internal::IncomingMessage(bytes, byte_actual, handles,
                                              handle_actual) {
        Decode<::fidl_test_protocols::WithAndWithoutRequestResponse::
                   WithRequestWithResponseResponse>();
      }
      DecodedMessage(fidl_incoming_msg_t* msg)
          : ::fidl::internal::IncomingMessage(msg) {
        Decode<::fidl_test_protocols::WithAndWithoutRequestResponse::
                   WithRequestWithResponseResponse>();
      }
      DecodedMessage(const DecodedMessage&) = delete;
      DecodedMessage(DecodedMessage&&) = delete;
      DecodedMessage* operator=(const DecodedMessage&) = delete;
      DecodedMessage* operator=(DecodedMessage&&) = delete;

      WithRequestWithResponseResponse* PrimaryObject() {
        ZX_DEBUG_ASSERT(ok());
        return reinterpret_cast<
            ::fidl_test_protocols::WithAndWithoutRequestResponse::
                WithRequestWithResponseResponse*>(bytes());
      }

      // Release the ownership of the decoded message. That means that the
      // handles won't be closed When the object is destroyed. After calling
      // this method, the DecodedMessage object should not be used anymore.
      void ReleasePrimaryObject() { ResetBytes(); }
    };

   private:
    void _InitHeader();
  };
  struct WithRequestWithResponseRequest final {
    FIDL_ALIGNDECL
    fidl_message_header_t _hdr;
    ::fidl::StringView arg;
    explicit WithRequestWithResponseRequest(zx_txid_t _txid,
                                            const ::fidl::StringView& arg)
        : arg(::fidl::unowned_ptr_t<const char>(arg.data()), arg.size()) {
      _InitHeader(_txid);
    }
    explicit WithRequestWithResponseRequest(zx_txid_t _txid) {
      _InitHeader(_txid);
    }

    static constexpr const fidl_type_t* Type =
        &::fidl_test_protocols::
            fidl_test_protocols_WithAndWithoutRequestResponseWithRequestWithResponseRequestTable;
    static constexpr uint32_t MaxNumHandles = 0;
    static constexpr uint32_t PrimarySize = 32;
    static constexpr uint32_t MaxOutOfLine = 4294967295;
    static constexpr uint32_t AltPrimarySize = 32;
    static constexpr uint32_t AltMaxOutOfLine = 4294967295;
    static constexpr bool HasFlexibleEnvelope = false;
    static constexpr bool HasPointer = true;
    static constexpr ::fidl::internal::TransactionalMessageKind MessageKind =
        ::fidl::internal::TransactionalMessageKind::kRequest;
    using ResponseType = ::fidl_test_protocols::WithAndWithoutRequestResponse::
        WithRequestWithResponseResponse;

    class UnownedEncodedMessage final {
     public:
      UnownedEncodedMessage(uint8_t* _bytes, uint32_t _byte_size,
                            zx_txid_t _txid, const ::fidl::StringView& arg)
          : message_(_bytes, _byte_size, sizeof(WithRequestWithResponseRequest),
                     nullptr, 0, 0) {
        FIDL_ALIGNDECL WithRequestWithResponseRequest _request(_txid, arg);
        message_.Encode<WithRequestWithResponseRequest>(&_request);
      }
      UnownedEncodedMessage(uint8_t* bytes, uint32_t byte_size,
                            WithRequestWithResponseRequest* request)
          : message_(bytes, byte_size, sizeof(WithRequestWithResponseRequest),
                     nullptr, 0, 0) {
        message_.Encode<WithRequestWithResponseRequest>(request);
      }
      UnownedEncodedMessage(const UnownedEncodedMessage&) = delete;
      UnownedEncodedMessage(UnownedEncodedMessage&&) = delete;
      UnownedEncodedMessage* operator=(const UnownedEncodedMessage&) = delete;
      UnownedEncodedMessage* operator=(UnownedEncodedMessage&&) = delete;

      zx_status_t status() const { return message_.status(); }
#ifdef __Fuchsia__
      const char* status_string() const { return message_.status_string(); }
#endif
      bool ok() const { return message_.status() == ZX_OK; }
      const char* error() const { return message_.error(); }

      ::fidl::OutgoingMessage& GetOutgoingMessage() { return message_; }

#ifdef __Fuchsia__
      template <typename ChannelLike>
      void Write(ChannelLike&& client) {
        message_.Write(std::forward<ChannelLike>(client));
      }
#endif

     private:
      ::fidl::OutgoingMessage message_;
    };

    class OwnedEncodedMessage final {
     public:
      explicit OwnedEncodedMessage(zx_txid_t _txid,
                                   const ::fidl::StringView& arg)
          : message_(bytes_.data(), bytes_.size(), _txid, arg) {}
      explicit OwnedEncodedMessage(WithRequestWithResponseRequest* request)
          : message_(bytes_.data(), bytes_.size(), request) {}
      OwnedEncodedMessage(const OwnedEncodedMessage&) = delete;
      OwnedEncodedMessage(OwnedEncodedMessage&&) = delete;
      OwnedEncodedMessage* operator=(const OwnedEncodedMessage&) = delete;
      OwnedEncodedMessage* operator=(OwnedEncodedMessage&&) = delete;

      zx_status_t status() const { return message_.status(); }
#ifdef __Fuchsia__
      const char* status_string() const { return message_.status_string(); }
#endif
      bool ok() const { return message_.ok(); }
      const char* error() const { return message_.error(); }

      ::fidl::OutgoingMessage& GetOutgoingMessage() {
        return message_.GetOutgoingMessage();
      }

#ifdef __Fuchsia__
      template <typename ChannelLike>
      void Write(ChannelLike&& client) {
        message_.Write(std::forward<ChannelLike>(client));
      }
#endif

     private:
      ::fidl::internal::BoxedMessageBuffer<ZX_CHANNEL_MAX_MSG_BYTES> bytes_;
      UnownedEncodedMessage message_;
    };

   public:
    class DecodedMessage final : public ::fidl::internal::IncomingMessage {
     public:
      DecodedMessage(uint8_t* bytes, uint32_t byte_actual,
                     zx_handle_info_t* handles = nullptr,
                     uint32_t handle_actual = 0)
          : ::fidl::internal::IncomingMessage(bytes, byte_actual, handles,
                                              handle_actual) {
        Decode<WithRequestWithResponseRequest>();
      }
      DecodedMessage(fidl_incoming_msg_t* msg)
          : ::fidl::internal::IncomingMessage(msg) {
        Decode<WithRequestWithResponseRequest>();
      }
      DecodedMessage(const DecodedMessage&) = delete;
      DecodedMessage(DecodedMessage&&) = delete;
      DecodedMessage* operator=(const DecodedMessage&) = delete;
      DecodedMessage* operator=(DecodedMessage&&) = delete;

      WithRequestWithResponseRequest* PrimaryObject() {
        ZX_DEBUG_ASSERT(ok());
        return reinterpret_cast<WithRequestWithResponseRequest*>(bytes());
      }

      // Release the ownership of the decoded message. That means that the
      // handles won't be closed When the object is destroyed. After calling
      // this method, the DecodedMessage object should not be used anymore.
      void ReleasePrimaryObject() { ResetBytes(); }
    };

   private:
    void _InitHeader(zx_txid_t _txid);
  };

  struct OnEmptyResponseResponse final {
    FIDL_ALIGNDECL
    fidl_message_header_t _hdr;
    OnEmptyResponseResponse() { _InitHeader(); }

    static constexpr const fidl_type_t* Type =
        &::fidl::_llcpp_coding_AnyZeroArgMessageTable;
    static constexpr uint32_t MaxNumHandles = 0;
    static constexpr uint32_t PrimarySize = 16;
    static constexpr uint32_t MaxOutOfLine = 0;
    static constexpr bool HasFlexibleEnvelope = false;
    static constexpr bool HasPointer = false;
    static constexpr ::fidl::internal::TransactionalMessageKind MessageKind =
        ::fidl::internal::TransactionalMessageKind::kResponse;

    class UnownedEncodedMessage final {
     public:
      UnownedEncodedMessage(uint8_t* _bytes, uint32_t _byte_size)
          : message_(_bytes, _byte_size, sizeof(OnEmptyResponseResponse),
                     nullptr, 0, 0) {
        FIDL_ALIGNDECL OnEmptyResponseResponse _response{};
        message_.Encode<::fidl_test_protocols::WithAndWithoutRequestResponse::
                            OnEmptyResponseResponse>(&_response);
      }
      UnownedEncodedMessage(uint8_t* bytes, uint32_t byte_size,
                            OnEmptyResponseResponse* response)
          : message_(bytes, byte_size, sizeof(OnEmptyResponseResponse), nullptr,
                     0, 0) {
        message_.Encode<::fidl_test_protocols::WithAndWithoutRequestResponse::
                            OnEmptyResponseResponse>(response);
      }
      UnownedEncodedMessage(const UnownedEncodedMessage&) = delete;
      UnownedEncodedMessage(UnownedEncodedMessage&&) = delete;
      UnownedEncodedMessage* operator=(const UnownedEncodedMessage&) = delete;
      UnownedEncodedMessage* operator=(UnownedEncodedMessage&&) = delete;

      zx_status_t status() const { return message_.status(); }
#ifdef __Fuchsia__
      const char* status_string() const { return message_.status_string(); }
#endif
      bool ok() const { return message_.status() == ZX_OK; }
      const char* error() const { return message_.error(); }

      ::fidl::OutgoingMessage& GetOutgoingMessage() { return message_; }

#ifdef __Fuchsia__
      template <typename ChannelLike>
      void Write(ChannelLike&& client) {
        message_.Write(std::forward<ChannelLike>(client));
      }
#endif

     private:
      ::fidl::OutgoingMessage message_;
    };

    class OwnedEncodedMessage final {
     public:
      explicit OwnedEncodedMessage() : message_(bytes_.data(), bytes_.size()) {}
      explicit OwnedEncodedMessage(
          ::fidl_test_protocols::WithAndWithoutRequestResponse::
              OnEmptyResponseResponse* response)
          : message_(bytes_.data(), bytes_.size(), response) {}
      OwnedEncodedMessage(const OwnedEncodedMessage&) = delete;
      OwnedEncodedMessage(OwnedEncodedMessage&&) = delete;
      OwnedEncodedMessage* operator=(const OwnedEncodedMessage&) = delete;
      OwnedEncodedMessage* operator=(OwnedEncodedMessage&&) = delete;

      zx_status_t status() const { return message_.status(); }
#ifdef __Fuchsia__
      const char* status_string() const { return message_.status_string(); }
#endif
      bool ok() const { return message_.ok(); }
      const char* error() const { return message_.error(); }

      ::fidl::OutgoingMessage& GetOutgoingMessage() {
        return message_.GetOutgoingMessage();
      }

#ifdef __Fuchsia__
      template <typename ChannelLike>
      void Write(ChannelLike&& client) {
        message_.Write(std::forward<ChannelLike>(client));
      }
#endif

     private:
      ::fidl::internal::InlineMessageBuffer<16> bytes_;
      UnownedEncodedMessage message_;
    };

   public:
    class DecodedMessage final : public ::fidl::internal::IncomingMessage {
     public:
      DecodedMessage(uint8_t* bytes, uint32_t byte_actual,
                     zx_handle_info_t* handles = nullptr,
                     uint32_t handle_actual = 0)
          : ::fidl::internal::IncomingMessage(bytes, byte_actual, handles,
                                              handle_actual) {
        Decode<::fidl_test_protocols::WithAndWithoutRequestResponse::
                   OnEmptyResponseResponse>();
      }
      DecodedMessage(fidl_incoming_msg_t* msg)
          : ::fidl::internal::IncomingMessage(msg) {
        Decode<::fidl_test_protocols::WithAndWithoutRequestResponse::
                   OnEmptyResponseResponse>();
      }
      DecodedMessage(const DecodedMessage&) = delete;
      DecodedMessage(DecodedMessage&&) = delete;
      DecodedMessage* operator=(const DecodedMessage&) = delete;
      DecodedMessage* operator=(DecodedMessage&&) = delete;

      OnEmptyResponseResponse* PrimaryObject() {
        ZX_DEBUG_ASSERT(ok());
        return reinterpret_cast<
            ::fidl_test_protocols::WithAndWithoutRequestResponse::
                OnEmptyResponseResponse*>(bytes());
      }

      // Release the ownership of the decoded message. That means that the
      // handles won't be closed When the object is destroyed. After calling
      // this method, the DecodedMessage object should not be used anymore.
      void ReleasePrimaryObject() { ResetBytes(); }
    };

   private:
    void _InitHeader();
  };
  struct OnWithResponseResponse final {
    FIDL_ALIGNDECL
    fidl_message_header_t _hdr;
    ::fidl::StringView ret;
    explicit OnWithResponseResponse(const ::fidl::StringView& ret)
        : ret(::fidl::unowned_ptr_t<const char>(ret.data()), ret.size()) {
      _InitHeader();
    }
    OnWithResponseResponse() { _InitHeader(); }

    static constexpr const fidl_type_t* Type =
        &::fidl_test_protocols::
            fidl_test_protocols_WithAndWithoutRequestResponseOnWithResponseEventTable;
    static constexpr uint32_t MaxNumHandles = 0;
    static constexpr uint32_t PrimarySize = 32;
    static constexpr uint32_t MaxOutOfLine = 4294967295;
    static constexpr bool HasFlexibleEnvelope = false;
    static constexpr bool HasPointer = true;
    static constexpr ::fidl::internal::TransactionalMessageKind MessageKind =
        ::fidl::internal::TransactionalMessageKind::kResponse;

    class UnownedEncodedMessage final {
     public:
      UnownedEncodedMessage(uint8_t* _bytes, uint32_t _byte_size,
                            const ::fidl::StringView& ret)
          : message_(_bytes, _byte_size, sizeof(OnWithResponseResponse),
                     nullptr, 0, 0) {
        FIDL_ALIGNDECL OnWithResponseResponse _response{ret};
        message_.Encode<::fidl_test_protocols::WithAndWithoutRequestResponse::
                            OnWithResponseResponse>(&_response);
      }
      UnownedEncodedMessage(uint8_t* bytes, uint32_t byte_size,
                            OnWithResponseResponse* response)
          : message_(bytes, byte_size, sizeof(OnWithResponseResponse), nullptr,
                     0, 0) {
        message_.Encode<::fidl_test_protocols::WithAndWithoutRequestResponse::
                            OnWithResponseResponse>(response);
      }
      UnownedEncodedMessage(const UnownedEncodedMessage&) = delete;
      UnownedEncodedMessage(UnownedEncodedMessage&&) = delete;
      UnownedEncodedMessage* operator=(const UnownedEncodedMessage&) = delete;
      UnownedEncodedMessage* operator=(UnownedEncodedMessage&&) = delete;

      zx_status_t status() const { return message_.status(); }
#ifdef __Fuchsia__
      const char* status_string() const { return message_.status_string(); }
#endif
      bool ok() const { return message_.status() == ZX_OK; }
      const char* error() const { return message_.error(); }

      ::fidl::OutgoingMessage& GetOutgoingMessage() { return message_; }

#ifdef __Fuchsia__
      template <typename ChannelLike>
      void Write(ChannelLike&& client) {
        message_.Write(std::forward<ChannelLike>(client));
      }
#endif

     private:
      ::fidl::OutgoingMessage message_;
    };

    class OwnedEncodedMessage final {
     public:
      explicit OwnedEncodedMessage(const ::fidl::StringView& ret)
          : message_(bytes_.data(), bytes_.size(), ret) {}
      explicit OwnedEncodedMessage(
          ::fidl_test_protocols::WithAndWithoutRequestResponse::
              OnWithResponseResponse* response)
          : message_(bytes_.data(), bytes_.size(), response) {}
      OwnedEncodedMessage(const OwnedEncodedMessage&) = delete;
      OwnedEncodedMessage(OwnedEncodedMessage&&) = delete;
      OwnedEncodedMessage* operator=(const OwnedEncodedMessage&) = delete;
      OwnedEncodedMessage* operator=(OwnedEncodedMessage&&) = delete;

      zx_status_t status() const { return message_.status(); }
#ifdef __Fuchsia__
      const char* status_string() const { return message_.status_string(); }
#endif
      bool ok() const { return message_.ok(); }
      const char* error() const { return message_.error(); }

      ::fidl::OutgoingMessage& GetOutgoingMessage() {
        return message_.GetOutgoingMessage();
      }

#ifdef __Fuchsia__
      template <typename ChannelLike>
      void Write(ChannelLike&& client) {
        message_.Write(std::forward<ChannelLike>(client));
      }
#endif

     private:
      ::fidl::internal::BoxedMessageBuffer<ZX_CHANNEL_MAX_MSG_BYTES> bytes_;
      UnownedEncodedMessage message_;
    };

   public:
    class DecodedMessage final : public ::fidl::internal::IncomingMessage {
     public:
      DecodedMessage(uint8_t* bytes, uint32_t byte_actual,
                     zx_handle_info_t* handles = nullptr,
                     uint32_t handle_actual = 0)
          : ::fidl::internal::IncomingMessage(bytes, byte_actual, handles,
                                              handle_actual) {
        Decode<::fidl_test_protocols::WithAndWithoutRequestResponse::
                   OnWithResponseResponse>();
      }
      DecodedMessage(fidl_incoming_msg_t* msg)
          : ::fidl::internal::IncomingMessage(msg) {
        Decode<::fidl_test_protocols::WithAndWithoutRequestResponse::
                   OnWithResponseResponse>();
      }
      DecodedMessage(const DecodedMessage&) = delete;
      DecodedMessage(DecodedMessage&&) = delete;
      DecodedMessage* operator=(const DecodedMessage&) = delete;
      DecodedMessage* operator=(DecodedMessage&&) = delete;

      OnWithResponseResponse* PrimaryObject() {
        ZX_DEBUG_ASSERT(ok());
        return reinterpret_cast<
            ::fidl_test_protocols::WithAndWithoutRequestResponse::
                OnWithResponseResponse*>(bytes());
      }

      // Release the ownership of the decoded message. That means that the
      // handles won't be closed When the object is destroyed. After calling
      // this method, the DecodedMessage object should not be used anymore.
      void ReleasePrimaryObject() { ResetBytes(); }
    };

   private:
    void _InitHeader();
  };

  class EventHandlerInterface {
   public:
    EventHandlerInterface() = default;
    virtual ~EventHandlerInterface() = default;
    virtual void OnEmptyResponse(
        ::fidl_test_protocols::WithAndWithoutRequestResponse::
            OnEmptyResponseResponse* event) {}
    virtual void OnWithResponse(
        ::fidl_test_protocols::WithAndWithoutRequestResponse::
            OnWithResponseResponse* event) {}
  };

  class SyncEventHandler : public EventHandlerInterface {
   public:
    SyncEventHandler() = default;

    // Method called when an unknown event is found. This methods gives the
    // status which, in this case, is returned by HandleOneEvent.
    virtual zx_status_t Unknown() = 0;

    // Handle all possible events defined in this protocol.
    // Blocks to consume exactly one message from the channel, then call the
    // corresponding virtual method.
    ::fidl::Result HandleOneEvent(
        ::fidl::UnownedClientEnd<
            ::fidl_test_protocols::WithAndWithoutRequestResponse>
            client_end);
  };

#ifdef __Fuchsia__
  // Collection of return types of FIDL calls in this protocol.
  class ResultOf final {
    ResultOf() = delete;

   public:
    class NoRequestNoResponse final : public ::fidl::Result {
     public:
      explicit NoRequestNoResponse(
          ::fidl::UnownedClientEnd<
              ::fidl_test_protocols::WithAndWithoutRequestResponse>
              _client);
      explicit NoRequestNoResponse(const ::fidl::Result& result)
          : ::fidl::Result(result) {}
      NoRequestNoResponse(NoRequestNoResponse&&) = delete;
      NoRequestNoResponse(const NoRequestNoResponse&) = delete;
      NoRequestNoResponse* operator=(NoRequestNoResponse&&) = delete;
      NoRequestNoResponse* operator=(const NoRequestNoResponse&) = delete;
      ~NoRequestNoResponse() = default;

     private:
    };
    class NoRequestEmptyResponse final : public ::fidl::Result {
     public:
      explicit NoRequestEmptyResponse(
          ::fidl::UnownedClientEnd<
              ::fidl_test_protocols::WithAndWithoutRequestResponse>
              _client);
      NoRequestEmptyResponse(
          ::fidl::UnownedClientEnd<
              ::fidl_test_protocols::WithAndWithoutRequestResponse>
              _client,
          zx_time_t _deadline);
      explicit NoRequestEmptyResponse(const ::fidl::Result& result)
          : ::fidl::Result(result) {}
      NoRequestEmptyResponse(NoRequestEmptyResponse&&) = delete;
      NoRequestEmptyResponse(const NoRequestEmptyResponse&) = delete;
      NoRequestEmptyResponse* operator=(NoRequestEmptyResponse&&) = delete;
      NoRequestEmptyResponse* operator=(const NoRequestEmptyResponse&) = delete;
      ~NoRequestEmptyResponse() = default;

      ::fidl_test_protocols::WithAndWithoutRequestResponse::
          NoRequestEmptyResponseResponse*
          Unwrap() {
        ZX_DEBUG_ASSERT(ok());
        return reinterpret_cast<
            ::fidl_test_protocols::WithAndWithoutRequestResponse::
                NoRequestEmptyResponseResponse*>(bytes_.data());
      }
      const ::fidl_test_protocols::WithAndWithoutRequestResponse::
          NoRequestEmptyResponseResponse*
          Unwrap() const {
        ZX_DEBUG_ASSERT(ok());
        return reinterpret_cast<
            const ::fidl_test_protocols::WithAndWithoutRequestResponse::
                NoRequestEmptyResponseResponse*>(bytes_.data());
      }

      ::fidl_test_protocols::WithAndWithoutRequestResponse::
          NoRequestEmptyResponseResponse&
          value() {
        return *Unwrap();
      }
      const ::fidl_test_protocols::WithAndWithoutRequestResponse::
          NoRequestEmptyResponseResponse&
          value() const {
        return *Unwrap();
      }

      ::fidl_test_protocols::WithAndWithoutRequestResponse::
          NoRequestEmptyResponseResponse*
          operator->() {
        return &value();
      }
      const NoRequestEmptyResponseResponse* operator->() const {
        return &value();
      }

      NoRequestEmptyResponseResponse& operator*() { return value(); }
      const NoRequestEmptyResponseResponse& operator*() const {
        return value();
      }

     private:
      ::fidl::internal::InlineMessageBuffer<16> bytes_;
    };
    class NoRequestWithResponse final : public ::fidl::Result {
     public:
      explicit NoRequestWithResponse(
          ::fidl::UnownedClientEnd<
              ::fidl_test_protocols::WithAndWithoutRequestResponse>
              _client);
      NoRequestWithResponse(
          ::fidl::UnownedClientEnd<
              ::fidl_test_protocols::WithAndWithoutRequestResponse>
              _client,
          zx_time_t _deadline);
      explicit NoRequestWithResponse(const ::fidl::Result& result)
          : ::fidl::Result(result) {}
      NoRequestWithResponse(NoRequestWithResponse&&) = delete;
      NoRequestWithResponse(const NoRequestWithResponse&) = delete;
      NoRequestWithResponse* operator=(NoRequestWithResponse&&) = delete;
      NoRequestWithResponse* operator=(const NoRequestWithResponse&) = delete;
      ~NoRequestWithResponse() = default;

      ::fidl_test_protocols::WithAndWithoutRequestResponse::
          NoRequestWithResponseResponse*
          Unwrap() {
        ZX_DEBUG_ASSERT(ok());
        return reinterpret_cast<
            ::fidl_test_protocols::WithAndWithoutRequestResponse::
                NoRequestWithResponseResponse*>(bytes_.data());
      }
      const ::fidl_test_protocols::WithAndWithoutRequestResponse::
          NoRequestWithResponseResponse*
          Unwrap() const {
        ZX_DEBUG_ASSERT(ok());
        return reinterpret_cast<
            const ::fidl_test_protocols::WithAndWithoutRequestResponse::
                NoRequestWithResponseResponse*>(bytes_.data());
      }

      ::fidl_test_protocols::WithAndWithoutRequestResponse::
          NoRequestWithResponseResponse&
          value() {
        return *Unwrap();
      }
      const ::fidl_test_protocols::WithAndWithoutRequestResponse::
          NoRequestWithResponseResponse&
          value() const {
        return *Unwrap();
      }

      ::fidl_test_protocols::WithAndWithoutRequestResponse::
          NoRequestWithResponseResponse*
          operator->() {
        return &value();
      }
      const NoRequestWithResponseResponse* operator->() const {
        return &value();
      }

      NoRequestWithResponseResponse& operator*() { return value(); }
      const NoRequestWithResponseResponse& operator*() const { return value(); }

     private:
      ::fidl::internal::BoxedMessageBuffer<ZX_CHANNEL_MAX_MSG_BYTES> bytes_;
    };
    class WithRequestNoResponse final : public ::fidl::Result {
     public:
      explicit WithRequestNoResponse(
          ::fidl::UnownedClientEnd<
              ::fidl_test_protocols::WithAndWithoutRequestResponse>
              _client,
          const ::fidl::StringView& arg);
      explicit WithRequestNoResponse(const ::fidl::Result& result)
          : ::fidl::Result(result) {}
      WithRequestNoResponse(WithRequestNoResponse&&) = delete;
      WithRequestNoResponse(const WithRequestNoResponse&) = delete;
      WithRequestNoResponse* operator=(WithRequestNoResponse&&) = delete;
      WithRequestNoResponse* operator=(const WithRequestNoResponse&) = delete;
      ~WithRequestNoResponse() = default;

     private:
    };
    class WithRequestEmptyResponse final : public ::fidl::Result {
     public:
      explicit WithRequestEmptyResponse(
          ::fidl::UnownedClientEnd<
              ::fidl_test_protocols::WithAndWithoutRequestResponse>
              _client,
          const ::fidl::StringView& arg);
      WithRequestEmptyResponse(
          ::fidl::UnownedClientEnd<
              ::fidl_test_protocols::WithAndWithoutRequestResponse>
              _client,
          const ::fidl::StringView& arg, zx_time_t _deadline);
      explicit WithRequestEmptyResponse(const ::fidl::Result& result)
          : ::fidl::Result(result) {}
      WithRequestEmptyResponse(WithRequestEmptyResponse&&) = delete;
      WithRequestEmptyResponse(const WithRequestEmptyResponse&) = delete;
      WithRequestEmptyResponse* operator=(WithRequestEmptyResponse&&) = delete;
      WithRequestEmptyResponse* operator=(const WithRequestEmptyResponse&) =
          delete;
      ~WithRequestEmptyResponse() = default;

      ::fidl_test_protocols::WithAndWithoutRequestResponse::
          WithRequestEmptyResponseResponse*
          Unwrap() {
        ZX_DEBUG_ASSERT(ok());
        return reinterpret_cast<
            ::fidl_test_protocols::WithAndWithoutRequestResponse::
                WithRequestEmptyResponseResponse*>(bytes_.data());
      }
      const ::fidl_test_protocols::WithAndWithoutRequestResponse::
          WithRequestEmptyResponseResponse*
          Unwrap() const {
        ZX_DEBUG_ASSERT(ok());
        return reinterpret_cast<
            const ::fidl_test_protocols::WithAndWithoutRequestResponse::
                WithRequestEmptyResponseResponse*>(bytes_.data());
      }

      ::fidl_test_protocols::WithAndWithoutRequestResponse::
          WithRequestEmptyResponseResponse&
          value() {
        return *Unwrap();
      }
      const ::fidl_test_protocols::WithAndWithoutRequestResponse::
          WithRequestEmptyResponseResponse&
          value() const {
        return *Unwrap();
      }

      ::fidl_test_protocols::WithAndWithoutRequestResponse::
          WithRequestEmptyResponseResponse*
          operator->() {
        return &value();
      }
      const WithRequestEmptyResponseResponse* operator->() const {
        return &value();
      }

      WithRequestEmptyResponseResponse& operator*() { return value(); }
      const WithRequestEmptyResponseResponse& operator*() const {
        return value();
      }

     private:
      ::fidl::internal::InlineMessageBuffer<16> bytes_;
    };
    class WithRequestWithResponse final : public ::fidl::Result {
     public:
      explicit WithRequestWithResponse(
          ::fidl::UnownedClientEnd<
              ::fidl_test_protocols::WithAndWithoutRequestResponse>
              _client,
          const ::fidl::StringView& arg);
      WithRequestWithResponse(
          ::fidl::UnownedClientEnd<
              ::fidl_test_protocols::WithAndWithoutRequestResponse>
              _client,
          const ::fidl::StringView& arg, zx_time_t _deadline);
      explicit WithRequestWithResponse(const ::fidl::Result& result)
          : ::fidl::Result(result) {}
      WithRequestWithResponse(WithRequestWithResponse&&) = delete;
      WithRequestWithResponse(const WithRequestWithResponse&) = delete;
      WithRequestWithResponse* operator=(WithRequestWithResponse&&) = delete;
      WithRequestWithResponse* operator=(const WithRequestWithResponse&) =
          delete;
      ~WithRequestWithResponse() = default;

      ::fidl_test_protocols::WithAndWithoutRequestResponse::
          WithRequestWithResponseResponse*
          Unwrap() {
        ZX_DEBUG_ASSERT(ok());
        return reinterpret_cast<
            ::fidl_test_protocols::WithAndWithoutRequestResponse::
                WithRequestWithResponseResponse*>(bytes_.data());
      }
      const ::fidl_test_protocols::WithAndWithoutRequestResponse::
          WithRequestWithResponseResponse*
          Unwrap() const {
        ZX_DEBUG_ASSERT(ok());
        return reinterpret_cast<
            const ::fidl_test_protocols::WithAndWithoutRequestResponse::
                WithRequestWithResponseResponse*>(bytes_.data());
      }

      ::fidl_test_protocols::WithAndWithoutRequestResponse::
          WithRequestWithResponseResponse&
          value() {
        return *Unwrap();
      }
      const ::fidl_test_protocols::WithAndWithoutRequestResponse::
          WithRequestWithResponseResponse&
          value() const {
        return *Unwrap();
      }

      ::fidl_test_protocols::WithAndWithoutRequestResponse::
          WithRequestWithResponseResponse*
          operator->() {
        return &value();
      }
      const WithRequestWithResponseResponse* operator->() const {
        return &value();
      }

      WithRequestWithResponseResponse& operator*() { return value(); }
      const WithRequestWithResponseResponse& operator*() const {
        return value();
      }

     private:
      ::fidl::internal::BoxedMessageBuffer<ZX_CHANNEL_MAX_MSG_BYTES> bytes_;
    };
  };

  // Collection of return types of FIDL calls in this protocol,
  // when the caller-allocate flavor or in-place call is used.
  class UnownedResultOf final {
    UnownedResultOf() = delete;

   public:
    class NoRequestNoResponse final : public ::fidl::Result {
     public:
      explicit NoRequestNoResponse(
          ::fidl::UnownedClientEnd<
              ::fidl_test_protocols::WithAndWithoutRequestResponse>
              _client);
      explicit NoRequestNoResponse(const ::fidl::Result& result)
          : ::fidl::Result(result) {}
      NoRequestNoResponse(NoRequestNoResponse&&) = delete;
      NoRequestNoResponse(const NoRequestNoResponse&) = delete;
      NoRequestNoResponse* operator=(NoRequestNoResponse&&) = delete;
      NoRequestNoResponse* operator=(const NoRequestNoResponse&) = delete;
      ~NoRequestNoResponse() = default;
    };
    class NoRequestEmptyResponse final : public ::fidl::Result {
     public:
      explicit NoRequestEmptyResponse(
          ::fidl::UnownedClientEnd<
              ::fidl_test_protocols::WithAndWithoutRequestResponse>
              _client,
          uint8_t* _response_bytes, uint32_t _response_byte_capacity);
      explicit NoRequestEmptyResponse(const ::fidl::Result& result)
          : ::fidl::Result(result) {}
      NoRequestEmptyResponse(NoRequestEmptyResponse&&) = delete;
      NoRequestEmptyResponse(const NoRequestEmptyResponse&) = delete;
      NoRequestEmptyResponse* operator=(NoRequestEmptyResponse&&) = delete;
      NoRequestEmptyResponse* operator=(const NoRequestEmptyResponse&) = delete;
      ~NoRequestEmptyResponse() = default;

      NoRequestEmptyResponseResponse* Unwrap() {
        ZX_DEBUG_ASSERT(ok());
        return reinterpret_cast<
            ::fidl_test_protocols::WithAndWithoutRequestResponse::
                NoRequestEmptyResponseResponse*>(bytes_);
      }
      const NoRequestEmptyResponseResponse* Unwrap() const {
        ZX_DEBUG_ASSERT(ok());
        return reinterpret_cast<
            const ::fidl_test_protocols::WithAndWithoutRequestResponse::
                NoRequestEmptyResponseResponse*>(bytes_);
      }

      NoRequestEmptyResponseResponse& value() { return *Unwrap(); }
      const NoRequestEmptyResponseResponse& value() const { return *Unwrap(); }

      NoRequestEmptyResponseResponse* operator->() { return &value(); }
      const NoRequestEmptyResponseResponse* operator->() const {
        return &value();
      }

      NoRequestEmptyResponseResponse& operator*() { return value(); }
      const NoRequestEmptyResponseResponse& operator*() const {
        return value();
      }

     private:
      uint8_t* bytes_;
    };
    class NoRequestWithResponse final : public ::fidl::Result {
     public:
      explicit NoRequestWithResponse(
          ::fidl::UnownedClientEnd<
              ::fidl_test_protocols::WithAndWithoutRequestResponse>
              _client,
          uint8_t* _response_bytes, uint32_t _response_byte_capacity);
      explicit NoRequestWithResponse(const ::fidl::Result& result)
          : ::fidl::Result(result) {}
      NoRequestWithResponse(NoRequestWithResponse&&) = delete;
      NoRequestWithResponse(const NoRequestWithResponse&) = delete;
      NoRequestWithResponse* operator=(NoRequestWithResponse&&) = delete;
      NoRequestWithResponse* operator=(const NoRequestWithResponse&) = delete;
      ~NoRequestWithResponse() = default;

      NoRequestWithResponseResponse* Unwrap() {
        ZX_DEBUG_ASSERT(ok());
        return reinterpret_cast<
            ::fidl_test_protocols::WithAndWithoutRequestResponse::
                NoRequestWithResponseResponse*>(bytes_);
      }
      const NoRequestWithResponseResponse* Unwrap() const {
        ZX_DEBUG_ASSERT(ok());
        return reinterpret_cast<
            const ::fidl_test_protocols::WithAndWithoutRequestResponse::
                NoRequestWithResponseResponse*>(bytes_);
      }

      NoRequestWithResponseResponse& value() { return *Unwrap(); }
      const NoRequestWithResponseResponse& value() const { return *Unwrap(); }

      NoRequestWithResponseResponse* operator->() { return &value(); }
      const NoRequestWithResponseResponse* operator->() const {
        return &value();
      }

      NoRequestWithResponseResponse& operator*() { return value(); }
      const NoRequestWithResponseResponse& operator*() const { return value(); }

     private:
      uint8_t* bytes_;
    };
    class WithRequestNoResponse final : public ::fidl::Result {
     public:
      explicit WithRequestNoResponse(
          ::fidl::UnownedClientEnd<
              ::fidl_test_protocols::WithAndWithoutRequestResponse>
              _client,
          uint8_t* _request_bytes, uint32_t _request_byte_capacity,
          const ::fidl::StringView& arg);
      explicit WithRequestNoResponse(const ::fidl::Result& result)
          : ::fidl::Result(result) {}
      WithRequestNoResponse(WithRequestNoResponse&&) = delete;
      WithRequestNoResponse(const WithRequestNoResponse&) = delete;
      WithRequestNoResponse* operator=(WithRequestNoResponse&&) = delete;
      WithRequestNoResponse* operator=(const WithRequestNoResponse&) = delete;
      ~WithRequestNoResponse() = default;
    };
    class WithRequestEmptyResponse final : public ::fidl::Result {
     public:
      explicit WithRequestEmptyResponse(
          ::fidl::UnownedClientEnd<
              ::fidl_test_protocols::WithAndWithoutRequestResponse>
              _client,
          uint8_t* _request_bytes, uint32_t _request_byte_capacity,
          const ::fidl::StringView& arg, uint8_t* _response_bytes,
          uint32_t _response_byte_capacity);
      explicit WithRequestEmptyResponse(const ::fidl::Result& result)
          : ::fidl::Result(result) {}
      WithRequestEmptyResponse(WithRequestEmptyResponse&&) = delete;
      WithRequestEmptyResponse(const WithRequestEmptyResponse&) = delete;
      WithRequestEmptyResponse* operator=(WithRequestEmptyResponse&&) = delete;
      WithRequestEmptyResponse* operator=(const WithRequestEmptyResponse&) =
          delete;
      ~WithRequestEmptyResponse() = default;

      WithRequestEmptyResponseResponse* Unwrap() {
        ZX_DEBUG_ASSERT(ok());
        return reinterpret_cast<
            ::fidl_test_protocols::WithAndWithoutRequestResponse::
                WithRequestEmptyResponseResponse*>(bytes_);
      }
      const WithRequestEmptyResponseResponse* Unwrap() const {
        ZX_DEBUG_ASSERT(ok());
        return reinterpret_cast<
            const ::fidl_test_protocols::WithAndWithoutRequestResponse::
                WithRequestEmptyResponseResponse*>(bytes_);
      }

      WithRequestEmptyResponseResponse& value() { return *Unwrap(); }
      const WithRequestEmptyResponseResponse& value() const {
        return *Unwrap();
      }

      WithRequestEmptyResponseResponse* operator->() { return &value(); }
      const WithRequestEmptyResponseResponse* operator->() const {
        return &value();
      }

      WithRequestEmptyResponseResponse& operator*() { return value(); }
      const WithRequestEmptyResponseResponse& operator*() const {
        return value();
      }

     private:
      uint8_t* bytes_;
    };
    class WithRequestWithResponse final : public ::fidl::Result {
     public:
      explicit WithRequestWithResponse(
          ::fidl::UnownedClientEnd<
              ::fidl_test_protocols::WithAndWithoutRequestResponse>
              _client,
          uint8_t* _request_bytes, uint32_t _request_byte_capacity,
          const ::fidl::StringView& arg, uint8_t* _response_bytes,
          uint32_t _response_byte_capacity);
      explicit WithRequestWithResponse(const ::fidl::Result& result)
          : ::fidl::Result(result) {}
      WithRequestWithResponse(WithRequestWithResponse&&) = delete;
      WithRequestWithResponse(const WithRequestWithResponse&) = delete;
      WithRequestWithResponse* operator=(WithRequestWithResponse&&) = delete;
      WithRequestWithResponse* operator=(const WithRequestWithResponse&) =
          delete;
      ~WithRequestWithResponse() = default;

      WithRequestWithResponseResponse* Unwrap() {
        ZX_DEBUG_ASSERT(ok());
        return reinterpret_cast<
            ::fidl_test_protocols::WithAndWithoutRequestResponse::
                WithRequestWithResponseResponse*>(bytes_);
      }
      const WithRequestWithResponseResponse* Unwrap() const {
        ZX_DEBUG_ASSERT(ok());
        return reinterpret_cast<
            const ::fidl_test_protocols::WithAndWithoutRequestResponse::
                WithRequestWithResponseResponse*>(bytes_);
      }

      WithRequestWithResponseResponse& value() { return *Unwrap(); }
      const WithRequestWithResponseResponse& value() const { return *Unwrap(); }

      WithRequestWithResponseResponse* operator->() { return &value(); }
      const WithRequestWithResponseResponse* operator->() const {
        return &value();
      }

      WithRequestWithResponseResponse& operator*() { return value(); }
      const WithRequestWithResponseResponse& operator*() const {
        return value();
      }

     private:
      uint8_t* bytes_;
    };
  };

  // Methods to make a sync FIDL call directly on an unowned channel or a
  // const reference to a
  // |fidl::ClientEnd<::fidl_test_protocols::WithAndWithoutRequestResponse>|,
  // avoiding setting up a client.
  class Call final {
    Call() = delete;

   public:
    // Allocates 16 bytes of message buffer on the stack. No heap allocation
    // necessary.
    static ResultOf::NoRequestNoResponse NoRequestNoResponse(
        ::fidl::UnownedClientEnd<
            ::fidl_test_protocols::WithAndWithoutRequestResponse>
            _client_end) {
      return ResultOf::NoRequestNoResponse(_client_end);
    }

    // Allocates 32 bytes of message buffer on the stack. No heap allocation
    // necessary.
    static ResultOf::NoRequestEmptyResponse NoRequestEmptyResponse(
        ::fidl::UnownedClientEnd<
            ::fidl_test_protocols::WithAndWithoutRequestResponse>
            _client_end) {
      return ResultOf::NoRequestEmptyResponse(_client_end);
    }

    // Allocates 16 bytes of request buffer on the stack. Response is
    // heap-allocated.
    static ResultOf::NoRequestWithResponse NoRequestWithResponse(
        ::fidl::UnownedClientEnd<
            ::fidl_test_protocols::WithAndWithoutRequestResponse>
            _client_end) {
      return ResultOf::NoRequestWithResponse(_client_end);
    }

    // Caller provides the backing storage for FIDL message via request and
    // response buffers.
    static UnownedResultOf::NoRequestWithResponse NoRequestWithResponse(
        ::fidl::UnownedClientEnd<
            ::fidl_test_protocols::WithAndWithoutRequestResponse>
            _client_end,
        ::fidl::BufferSpan _response_buffer) {
      return UnownedResultOf::NoRequestWithResponse(
          _client_end, _response_buffer.data, _response_buffer.capacity);
    }

    // Request is heap-allocated.
    static ResultOf::WithRequestNoResponse WithRequestNoResponse(
        ::fidl::UnownedClientEnd<
            ::fidl_test_protocols::WithAndWithoutRequestResponse>
            _client_end,
        ::fidl::StringView arg) {
      return ResultOf::WithRequestNoResponse(_client_end, arg);
    }

    // Caller provides the backing storage for FIDL message via request and
    // response buffers.
    static UnownedResultOf::WithRequestNoResponse WithRequestNoResponse(
        ::fidl::UnownedClientEnd<
            ::fidl_test_protocols::WithAndWithoutRequestResponse>
            _client_end,
        ::fidl::BufferSpan _request_buffer, ::fidl::StringView arg) {
      return UnownedResultOf::WithRequestNoResponse(
          _client_end, _request_buffer.data, _request_buffer.capacity, arg);
    }

    // Allocates 16 bytes of response buffer on the stack. Request is
    // heap-allocated.
    static ResultOf::WithRequestEmptyResponse WithRequestEmptyResponse(
        ::fidl::UnownedClientEnd<
            ::fidl_test_protocols::WithAndWithoutRequestResponse>
            _client_end,
        ::fidl::StringView arg) {
      return ResultOf::WithRequestEmptyResponse(_client_end, arg);
    }

    // Caller provides the backing storage for FIDL message via request and
    // response buffers.
    static UnownedResultOf::WithRequestEmptyResponse WithRequestEmptyResponse(
        ::fidl::UnownedClientEnd<
            ::fidl_test_protocols::WithAndWithoutRequestResponse>
            _client_end,
        ::fidl::BufferSpan _request_buffer, ::fidl::StringView arg,
        ::fidl::BufferSpan _response_buffer) {
      return UnownedResultOf::WithRequestEmptyResponse(
          _client_end, _request_buffer.data, _request_buffer.capacity, arg,
          _response_buffer.data, _response_buffer.capacity);
    }

    // Request is heap-allocated. Response is heap-allocated.
    static ResultOf::WithRequestWithResponse WithRequestWithResponse(
        ::fidl::UnownedClientEnd<
            ::fidl_test_protocols::WithAndWithoutRequestResponse>
            _client_end,
        ::fidl::StringView arg) {
      return ResultOf::WithRequestWithResponse(_client_end, arg);
    }

    // Caller provides the backing storage for FIDL message via request and
    // response buffers.
    static UnownedResultOf::WithRequestWithResponse WithRequestWithResponse(
        ::fidl::UnownedClientEnd<
            ::fidl_test_protocols::WithAndWithoutRequestResponse>
            _client_end,
        ::fidl::BufferSpan _request_buffer, ::fidl::StringView arg,
        ::fidl::BufferSpan _response_buffer) {
      return UnownedResultOf::WithRequestWithResponse(
          _client_end, _request_buffer.data, _request_buffer.capacity, arg,
          _response_buffer.data, _response_buffer.capacity);
    }
  };

  using SyncClient = fidl::WireSyncClient<
      ::fidl_test_protocols::WithAndWithoutRequestResponse>;

#ifdef __Fuchsia__
  using AsyncEventHandler = ::fidl::WireAsyncEventHandler<
      ::fidl_test_protocols::WithAndWithoutRequestResponse>;
  class NoRequestEmptyResponseResponseContext;
  class NoRequestWithResponseResponseContext;
  class WithRequestEmptyResponseResponseContext;
  class WithRequestWithResponseResponseContext;
  using ClientImpl = ::fidl::internal::WireClientImpl<
      ::fidl_test_protocols::WithAndWithoutRequestResponse>;
#endif

  using Interface = ::fidl::WireInterface<
      ::fidl_test_protocols::WithAndWithoutRequestResponse>;

  // Attempts to dispatch the incoming message to a handler function in the
  // server implementation. If there is no matching handler, it returns false,
  // leaving the message and transaction intact. In all other cases, it consumes
  // the message and returns true. It is possible to chain multiple TryDispatch
  // functions in this manner.
  static ::fidl::DispatchResult TryDispatch(Interface* impl,
                                            fidl_incoming_msg_t* msg,
                                            ::fidl::Transaction* txn);

  // Dispatches the incoming message to one of the handlers functions in the
  // protocol. If there is no matching handler, it closes all the handles in
  // |msg| and closes the channel with a |ZX_ERR_NOT_SUPPORTED| epitaph, before
  // returning false. The message should then be discarded.
  static ::fidl::DispatchResult Dispatch(Interface* impl,
                                         fidl_incoming_msg_t* msg,
                                         ::fidl::Transaction* txn);

  // Same as |Dispatch|, but takes a |void*| instead of |Interface*|.
  // Only used with |fidl::BindServer| to reduce template expansion.
  // Do not call this method manually. Use |Dispatch| instead.
  static ::fidl::DispatchResult TypeErasedDispatch(void* impl,
                                                   fidl_incoming_msg_t* msg,
                                                   ::fidl::Transaction* txn) {
    return Dispatch(static_cast<Interface*>(impl), msg, txn);
  }

#endif

  using EventSender = ::fidl::WireEventSender<
      ::fidl_test_protocols::WithAndWithoutRequestResponse>;
  using WeakEventSender = ::fidl::internal::WireWeakEventSender<
      ::fidl_test_protocols::WithAndWithoutRequestResponse>;
};
}  // namespace fidl_test_protocols
template <>
class ::fidl::WireSyncClient<
    ::fidl_test_protocols::WithAndWithoutRequestResponse>
    final {
 public:
  WireSyncClient() = default;

  explicit WireSyncClient(
      ::fidl::ClientEnd<::fidl_test_protocols::WithAndWithoutRequestResponse>
          client_end)
      : client_end_(std::move(client_end)) {}

  ~WireSyncClient() = default;
  WireSyncClient(WireSyncClient&&) = default;
  WireSyncClient& operator=(WireSyncClient&&) = default;

  const ::fidl::ClientEnd<::fidl_test_protocols::WithAndWithoutRequestResponse>&
  client_end() const {
    return client_end_;
  }
  ::fidl::ClientEnd<::fidl_test_protocols::WithAndWithoutRequestResponse>&
  client_end() {
    return client_end_;
  }

  const ::zx::channel& channel() const { return client_end_.channel(); }
  ::zx::channel* mutable_channel() { return &client_end_.channel(); }

  // Allocates 16 bytes of message buffer on the stack. No heap allocation
  // necessary.
  ::fidl_test_protocols::WithAndWithoutRequestResponse::ResultOf::
      NoRequestNoResponse
      NoRequestNoResponse() {
    return ::fidl_test_protocols::WithAndWithoutRequestResponse::ResultOf::
        NoRequestNoResponse(this->client_end());
  }

  // Allocates 32 bytes of message buffer on the stack. No heap allocation
  // necessary.
  ::fidl_test_protocols::WithAndWithoutRequestResponse::ResultOf::
      NoRequestEmptyResponse
      NoRequestEmptyResponse() {
    return ::fidl_test_protocols::WithAndWithoutRequestResponse::ResultOf::
        NoRequestEmptyResponse(this->client_end());
  }

  // Allocates 16 bytes of request buffer on the stack. Response is
  // heap-allocated.
  ::fidl_test_protocols::WithAndWithoutRequestResponse::ResultOf::
      NoRequestWithResponse
      NoRequestWithResponse() {
    return ::fidl_test_protocols::WithAndWithoutRequestResponse::ResultOf::
        NoRequestWithResponse(this->client_end());
  }

  // Caller provides the backing storage for FIDL message via request and
  // response buffers.
  ::fidl_test_protocols::WithAndWithoutRequestResponse::UnownedResultOf::
      NoRequestWithResponse
      NoRequestWithResponse(::fidl::BufferSpan _response_buffer) {
    return ::fidl_test_protocols::WithAndWithoutRequestResponse::
        UnownedResultOf::NoRequestWithResponse(this->client_end(),
                                               _response_buffer.data,
                                               _response_buffer.capacity);
  }

  // Request is heap-allocated.
  ::fidl_test_protocols::WithAndWithoutRequestResponse::ResultOf::
      WithRequestNoResponse
      WithRequestNoResponse(::fidl::StringView arg) {
    return ::fidl_test_protocols::WithAndWithoutRequestResponse::ResultOf::
        WithRequestNoResponse(this->client_end(), arg);
  }

  // Caller provides the backing storage for FIDL message via request and
  // response buffers.
  ::fidl_test_protocols::WithAndWithoutRequestResponse::UnownedResultOf::
      WithRequestNoResponse
      WithRequestNoResponse(::fidl::BufferSpan _request_buffer,
                            ::fidl::StringView arg) {
    return ::fidl_test_protocols::WithAndWithoutRequestResponse::
        UnownedResultOf::WithRequestNoResponse(this->client_end(),
                                               _request_buffer.data,
                                               _request_buffer.capacity, arg);
  }

  // Allocates 16 bytes of response buffer on the stack. Request is
  // heap-allocated.
  ::fidl_test_protocols::WithAndWithoutRequestResponse::ResultOf::
      WithRequestEmptyResponse
      WithRequestEmptyResponse(::fidl::StringView arg) {
    return ::fidl_test_protocols::WithAndWithoutRequestResponse::ResultOf::
        WithRequestEmptyResponse(this->client_end(), arg);
  }

  // Caller provides the backing storage for FIDL message via request and
  // response buffers.
  ::fidl_test_protocols::WithAndWithoutRequestResponse::UnownedResultOf::
      WithRequestEmptyResponse
      WithRequestEmptyResponse(::fidl::BufferSpan _request_buffer,
                               ::fidl::StringView arg,
                               ::fidl::BufferSpan _response_buffer) {
    return ::fidl_test_protocols::WithAndWithoutRequestResponse::
        UnownedResultOf::WithRequestEmptyResponse(
            this->client_end(), _request_buffer.data, _request_buffer.capacity,
            arg, _response_buffer.data, _response_buffer.capacity);
  }

  // Request is heap-allocated. Response is heap-allocated.
  ::fidl_test_protocols::WithAndWithoutRequestResponse::ResultOf::
      WithRequestWithResponse
      WithRequestWithResponse(::fidl::StringView arg) {
    return ::fidl_test_protocols::WithAndWithoutRequestResponse::ResultOf::
        WithRequestWithResponse(this->client_end(), arg);
  }

  // Caller provides the backing storage for FIDL message via request and
  // response buffers.
  ::fidl_test_protocols::WithAndWithoutRequestResponse::UnownedResultOf::
      WithRequestWithResponse
      WithRequestWithResponse(::fidl::BufferSpan _request_buffer,
                              ::fidl::StringView arg,
                              ::fidl::BufferSpan _response_buffer) {
    return ::fidl_test_protocols::WithAndWithoutRequestResponse::
        UnownedResultOf::WithRequestWithResponse(
            this->client_end(), _request_buffer.data, _request_buffer.capacity,
            arg, _response_buffer.data, _response_buffer.capacity);
  }

  // Handle all possible events defined in this protocol.
  // Blocks to consume exactly one message from the channel, then call the
  // corresponding virtual method defined in |SyncEventHandler|. The return
  // status of the handler function is folded with any transport-level errors
  // and returned.
  ::fidl::Result HandleOneEvent(
      ::fidl_test_protocols::WithAndWithoutRequestResponse::SyncEventHandler&
          event_handler) {
    return event_handler.HandleOneEvent(client_end_);
  }

 private:
  ::fidl::ClientEnd<::fidl_test_protocols::WithAndWithoutRequestResponse>
      client_end_;
};

// Pure-virtual interface to be implemented by a server.
// This interface uses typed channels (i.e. |fidl::ClientEnd<SomeProtocol>|
// and |fidl::ServerEnd<SomeProtocol>|).
template <>
class ::fidl::WireInterface<
    ::fidl_test_protocols::WithAndWithoutRequestResponse>
    : public ::fidl::internal::IncomingMessageDispatcher {
 public:
  WireInterface() = default;
  virtual ~WireInterface() = default;

  // The marker protocol type within which this |WireInterface| class is
  // defined.
  using _EnclosingProtocol =
      ::fidl_test_protocols::WithAndWithoutRequestResponse;

  using NoRequestNoResponseCompleter = ::fidl::Completer<>;

  virtual void NoRequestNoResponse(
      NoRequestNoResponseCompleter::Sync& _completer) = 0;

  class NoRequestEmptyResponseCompleterBase : public ::fidl::CompleterBase {
   public:
    // In the following methods, the return value indicates internal errors
    // during the reply, such as encoding or writing to the transport. Note that
    // any error will automatically lead to the destruction of the binding,
    // after which the |on_unbound| callback will be triggered with a detailed
    // reason.
    //
    // See //zircon/system/ulib/fidl/include/lib/fidl/llcpp/server.h.
    //
    // Because the reply status is identical to the unbinding status, it can be
    // safely ignored.
    ::fidl::Result Reply();

   protected:
    using ::fidl::CompleterBase::CompleterBase;
  };

  using NoRequestEmptyResponseCompleter =
      ::fidl::Completer<NoRequestEmptyResponseCompleterBase>;

  virtual void NoRequestEmptyResponse(
      NoRequestEmptyResponseCompleter::Sync& _completer) = 0;

  class NoRequestWithResponseCompleterBase : public ::fidl::CompleterBase {
   public:
    // In the following methods, the return value indicates internal errors
    // during the reply, such as encoding or writing to the transport. Note that
    // any error will automatically lead to the destruction of the binding,
    // after which the |on_unbound| callback will be triggered with a detailed
    // reason.
    //
    // See //zircon/system/ulib/fidl/include/lib/fidl/llcpp/server.h.
    //
    // Because the reply status is identical to the unbinding status, it can be
    // safely ignored.
    ::fidl::Result Reply(::fidl::StringView ret);
    ::fidl::Result Reply(::fidl::BufferSpan _buffer, ::fidl::StringView ret);

   protected:
    using ::fidl::CompleterBase::CompleterBase;
  };

  using NoRequestWithResponseCompleter =
      ::fidl::Completer<NoRequestWithResponseCompleterBase>;

  virtual void NoRequestWithResponse(
      NoRequestWithResponseCompleter::Sync& _completer) = 0;

  using WithRequestNoResponseCompleter = ::fidl::Completer<>;

  virtual void WithRequestNoResponse(
      ::fidl::StringView arg,
      WithRequestNoResponseCompleter::Sync& _completer) = 0;

  class WithRequestEmptyResponseCompleterBase : public ::fidl::CompleterBase {
   public:
    // In the following methods, the return value indicates internal errors
    // during the reply, such as encoding or writing to the transport. Note that
    // any error will automatically lead to the destruction of the binding,
    // after which the |on_unbound| callback will be triggered with a detailed
    // reason.
    //
    // See //zircon/system/ulib/fidl/include/lib/fidl/llcpp/server.h.
    //
    // Because the reply status is identical to the unbinding status, it can be
    // safely ignored.
    ::fidl::Result Reply();

   protected:
    using ::fidl::CompleterBase::CompleterBase;
  };

  using WithRequestEmptyResponseCompleter =
      ::fidl::Completer<WithRequestEmptyResponseCompleterBase>;

  virtual void WithRequestEmptyResponse(
      ::fidl::StringView arg,
      WithRequestEmptyResponseCompleter::Sync& _completer) = 0;

  class WithRequestWithResponseCompleterBase : public ::fidl::CompleterBase {
   public:
    // In the following methods, the return value indicates internal errors
    // during the reply, such as encoding or writing to the transport. Note that
    // any error will automatically lead to the destruction of the binding,
    // after which the |on_unbound| callback will be triggered with a detailed
    // reason.
    //
    // See //zircon/system/ulib/fidl/include/lib/fidl/llcpp/server.h.
    //
    // Because the reply status is identical to the unbinding status, it can be
    // safely ignored.
    ::fidl::Result Reply(::fidl::StringView ret);
    ::fidl::Result Reply(::fidl::BufferSpan _buffer, ::fidl::StringView ret);

   protected:
    using ::fidl::CompleterBase::CompleterBase;
  };

  using WithRequestWithResponseCompleter =
      ::fidl::Completer<WithRequestWithResponseCompleterBase>;

  virtual void WithRequestWithResponse(
      ::fidl::StringView arg,
      WithRequestWithResponseCompleter::Sync& _completer) = 0;

 private:
  ::fidl::DispatchResult dispatch_message(fidl_incoming_msg_t* msg,
                                          ::fidl::Transaction* txn) final;
};

namespace fidl_test_protocols {
extern "C" const fidl_type_t
    fidl_test_protocols_WithErrorSyntaxResponseAsStructRequestTable;

extern "C" const fidl_type_t
    fidl_test_protocols_WithErrorSyntaxResponseAsStructResponseTable;

extern "C" const fidl_type_t
    fidl_test_protocols_WithErrorSyntaxErrorAsPrimitiveRequestTable;

extern "C" const fidl_type_t
    fidl_test_protocols_WithErrorSyntaxErrorAsPrimitiveResponseTable;

extern "C" const fidl_type_t
    fidl_test_protocols_WithErrorSyntaxErrorAsEnumRequestTable;

extern "C" const fidl_type_t
    fidl_test_protocols_WithErrorSyntaxErrorAsEnumResponseTable;

class WithErrorSyntax final {
  WithErrorSyntax() = delete;

 public:
  struct ResponseAsStructResponse final {
    FIDL_ALIGNDECL
    fidl_message_header_t _hdr;
    ::fidl_test_protocols::wire::WithErrorSyntax_ResponseAsStruct_Result result;
    explicit ResponseAsStructResponse(
        ::fidl_test_protocols::wire::WithErrorSyntax_ResponseAsStruct_Result&
            result)
        : result(std::move(result)) {
      _InitHeader();
    }
    ResponseAsStructResponse() { _InitHeader(); }

    static constexpr const fidl_type_t* Type =
        &::fidl_test_protocols::
            fidl_test_protocols_WithErrorSyntaxResponseAsStructResponseTable;
    static constexpr uint32_t MaxNumHandles = 0;
    static constexpr uint32_t PrimarySize = 40;
    static constexpr uint32_t MaxOutOfLine = 24;
    static constexpr bool HasFlexibleEnvelope = false;
    static constexpr bool HasPointer = true;
    static constexpr ::fidl::internal::TransactionalMessageKind MessageKind =
        ::fidl::internal::TransactionalMessageKind::kResponse;

    class UnownedEncodedMessage final {
     public:
      UnownedEncodedMessage(
          uint8_t* _bytes, uint32_t _byte_size,
          ::fidl_test_protocols::wire::WithErrorSyntax_ResponseAsStruct_Result&
              result)
          : message_(_bytes, _byte_size, sizeof(ResponseAsStructResponse),
                     nullptr, 0, 0) {
        FIDL_ALIGNDECL ResponseAsStructResponse _response{result};
        message_.Encode<
            ::fidl_test_protocols::WithErrorSyntax::ResponseAsStructResponse>(
            &_response);
      }
      UnownedEncodedMessage(uint8_t* bytes, uint32_t byte_size,
                            ResponseAsStructResponse* response)
          : message_(bytes, byte_size, sizeof(ResponseAsStructResponse),
                     nullptr, 0, 0) {
        message_.Encode<
            ::fidl_test_protocols::WithErrorSyntax::ResponseAsStructResponse>(
            response);
      }
      UnownedEncodedMessage(const UnownedEncodedMessage&) = delete;
      UnownedEncodedMessage(UnownedEncodedMessage&&) = delete;
      UnownedEncodedMessage* operator=(const UnownedEncodedMessage&) = delete;
      UnownedEncodedMessage* operator=(UnownedEncodedMessage&&) = delete;

      zx_status_t status() const { return message_.status(); }
#ifdef __Fuchsia__
      const char* status_string() const { return message_.status_string(); }
#endif
      bool ok() const { return message_.status() == ZX_OK; }
      const char* error() const { return message_.error(); }

      ::fidl::OutgoingMessage& GetOutgoingMessage() { return message_; }

#ifdef __Fuchsia__
      template <typename ChannelLike>
      void Write(ChannelLike&& client) {
        message_.Write(std::forward<ChannelLike>(client));
      }
#endif

     private:
      ::fidl::OutgoingMessage message_;
    };

    class OwnedEncodedMessage final {
     public:
      explicit OwnedEncodedMessage(
          ::fidl_test_protocols::wire::WithErrorSyntax_ResponseAsStruct_Result&
              result)
          : message_(bytes_.data(), bytes_.size(), result) {}
      explicit OwnedEncodedMessage(
          ::fidl_test_protocols::WithErrorSyntax::ResponseAsStructResponse*
              response)
          : message_(bytes_.data(), bytes_.size(), response) {}
      OwnedEncodedMessage(const OwnedEncodedMessage&) = delete;
      OwnedEncodedMessage(OwnedEncodedMessage&&) = delete;
      OwnedEncodedMessage* operator=(const OwnedEncodedMessage&) = delete;
      OwnedEncodedMessage* operator=(OwnedEncodedMessage&&) = delete;

      zx_status_t status() const { return message_.status(); }
#ifdef __Fuchsia__
      const char* status_string() const { return message_.status_string(); }
#endif
      bool ok() const { return message_.ok(); }
      const char* error() const { return message_.error(); }

      ::fidl::OutgoingMessage& GetOutgoingMessage() {
        return message_.GetOutgoingMessage();
      }

#ifdef __Fuchsia__
      template <typename ChannelLike>
      void Write(ChannelLike&& client) {
        message_.Write(std::forward<ChannelLike>(client));
      }
#endif

     private:
      ::fidl::internal::InlineMessageBuffer<64> bytes_;
      UnownedEncodedMessage message_;
    };

   public:
    class DecodedMessage final : public ::fidl::internal::IncomingMessage {
     public:
      DecodedMessage(uint8_t* bytes, uint32_t byte_actual,
                     zx_handle_info_t* handles = nullptr,
                     uint32_t handle_actual = 0)
          : ::fidl::internal::IncomingMessage(bytes, byte_actual, handles,
                                              handle_actual) {
        Decode<
            ::fidl_test_protocols::WithErrorSyntax::ResponseAsStructResponse>();
      }
      DecodedMessage(fidl_incoming_msg_t* msg)
          : ::fidl::internal::IncomingMessage(msg) {
        Decode<
            ::fidl_test_protocols::WithErrorSyntax::ResponseAsStructResponse>();
      }
      DecodedMessage(const DecodedMessage&) = delete;
      DecodedMessage(DecodedMessage&&) = delete;
      DecodedMessage* operator=(const DecodedMessage&) = delete;
      DecodedMessage* operator=(DecodedMessage&&) = delete;

      ResponseAsStructResponse* PrimaryObject() {
        ZX_DEBUG_ASSERT(ok());
        return reinterpret_cast<
            ::fidl_test_protocols::WithErrorSyntax::ResponseAsStructResponse*>(
            bytes());
      }

      // Release the ownership of the decoded message. That means that the
      // handles won't be closed When the object is destroyed. After calling
      // this method, the DecodedMessage object should not be used anymore.
      void ReleasePrimaryObject() { ResetBytes(); }
    };

   private:
    void _InitHeader();
  };
  struct ResponseAsStructRequest final {
    FIDL_ALIGNDECL
    fidl_message_header_t _hdr;
    explicit ResponseAsStructRequest(zx_txid_t _txid) { _InitHeader(_txid); }

    static constexpr const fidl_type_t* Type =
        &::fidl::_llcpp_coding_AnyZeroArgMessageTable;
    static constexpr uint32_t MaxNumHandles = 0;
    static constexpr uint32_t PrimarySize = 16;
    static constexpr uint32_t MaxOutOfLine = 0;
    static constexpr uint32_t AltPrimarySize = 16;
    static constexpr uint32_t AltMaxOutOfLine = 0;
    static constexpr bool HasFlexibleEnvelope = false;
    static constexpr bool HasPointer = false;
    static constexpr ::fidl::internal::TransactionalMessageKind MessageKind =
        ::fidl::internal::TransactionalMessageKind::kRequest;
    using ResponseType =
        ::fidl_test_protocols::WithErrorSyntax::ResponseAsStructResponse;

    class UnownedEncodedMessage final {
     public:
      UnownedEncodedMessage(uint8_t* _bytes, uint32_t _byte_size,
                            zx_txid_t _txid)
          : message_(_bytes, _byte_size, sizeof(ResponseAsStructRequest),
                     nullptr, 0, 0) {
        FIDL_ALIGNDECL ResponseAsStructRequest _request(_txid);
        message_.Encode<ResponseAsStructRequest>(&_request);
      }
      UnownedEncodedMessage(uint8_t* bytes, uint32_t byte_size,
                            ResponseAsStructRequest* request)
          : message_(bytes, byte_size, sizeof(ResponseAsStructRequest), nullptr,
                     0, 0) {
        message_.Encode<ResponseAsStructRequest>(request);
      }
      UnownedEncodedMessage(const UnownedEncodedMessage&) = delete;
      UnownedEncodedMessage(UnownedEncodedMessage&&) = delete;
      UnownedEncodedMessage* operator=(const UnownedEncodedMessage&) = delete;
      UnownedEncodedMessage* operator=(UnownedEncodedMessage&&) = delete;

      zx_status_t status() const { return message_.status(); }
#ifdef __Fuchsia__
      const char* status_string() const { return message_.status_string(); }
#endif
      bool ok() const { return message_.status() == ZX_OK; }
      const char* error() const { return message_.error(); }

      ::fidl::OutgoingMessage& GetOutgoingMessage() { return message_; }

#ifdef __Fuchsia__
      template <typename ChannelLike>
      void Write(ChannelLike&& client) {
        message_.Write(std::forward<ChannelLike>(client));
      }
#endif

     private:
      ::fidl::OutgoingMessage message_;
    };

    class OwnedEncodedMessage final {
     public:
      explicit OwnedEncodedMessage(zx_txid_t _txid)
          : message_(bytes_.data(), bytes_.size(), _txid) {}
      explicit OwnedEncodedMessage(ResponseAsStructRequest* request)
          : message_(bytes_.data(), bytes_.size(), request) {}
      OwnedEncodedMessage(const OwnedEncodedMessage&) = delete;
      OwnedEncodedMessage(OwnedEncodedMessage&&) = delete;
      OwnedEncodedMessage* operator=(const OwnedEncodedMessage&) = delete;
      OwnedEncodedMessage* operator=(OwnedEncodedMessage&&) = delete;

      zx_status_t status() const { return message_.status(); }
#ifdef __Fuchsia__
      const char* status_string() const { return message_.status_string(); }
#endif
      bool ok() const { return message_.ok(); }
      const char* error() const { return message_.error(); }

      ::fidl::OutgoingMessage& GetOutgoingMessage() {
        return message_.GetOutgoingMessage();
      }

#ifdef __Fuchsia__
      template <typename ChannelLike>
      void Write(ChannelLike&& client) {
        message_.Write(std::forward<ChannelLike>(client));
      }
#endif

     private:
      ::fidl::internal::InlineMessageBuffer<16> bytes_;
      UnownedEncodedMessage message_;
    };

   public:
    class DecodedMessage final : public ::fidl::internal::IncomingMessage {
     public:
      DecodedMessage(uint8_t* bytes, uint32_t byte_actual,
                     zx_handle_info_t* handles = nullptr,
                     uint32_t handle_actual = 0)
          : ::fidl::internal::IncomingMessage(bytes, byte_actual, handles,
                                              handle_actual) {
        Decode<ResponseAsStructRequest>();
      }
      DecodedMessage(fidl_incoming_msg_t* msg)
          : ::fidl::internal::IncomingMessage(msg) {
        Decode<ResponseAsStructRequest>();
      }
      DecodedMessage(const DecodedMessage&) = delete;
      DecodedMessage(DecodedMessage&&) = delete;
      DecodedMessage* operator=(const DecodedMessage&) = delete;
      DecodedMessage* operator=(DecodedMessage&&) = delete;

      ResponseAsStructRequest* PrimaryObject() {
        ZX_DEBUG_ASSERT(ok());
        return reinterpret_cast<ResponseAsStructRequest*>(bytes());
      }

      // Release the ownership of the decoded message. That means that the
      // handles won't be closed When the object is destroyed. After calling
      // this method, the DecodedMessage object should not be used anymore.
      void ReleasePrimaryObject() { ResetBytes(); }
    };

   private:
    void _InitHeader(zx_txid_t _txid);
  };

  struct ErrorAsPrimitiveResponse final {
    FIDL_ALIGNDECL
    fidl_message_header_t _hdr;
    ::fidl_test_protocols::wire::WithErrorSyntax_ErrorAsPrimitive_Result result;
    explicit ErrorAsPrimitiveResponse(
        ::fidl_test_protocols::wire::WithErrorSyntax_ErrorAsPrimitive_Result&
            result)
        : result(std::move(result)) {
      _InitHeader();
    }
    ErrorAsPrimitiveResponse() { _InitHeader(); }

    static constexpr const fidl_type_t* Type =
        &::fidl_test_protocols::
            fidl_test_protocols_WithErrorSyntaxErrorAsPrimitiveResponseTable;
    static constexpr uint32_t MaxNumHandles = 0;
    static constexpr uint32_t PrimarySize = 40;
    static constexpr uint32_t MaxOutOfLine = 8;
    static constexpr bool HasFlexibleEnvelope = false;
    static constexpr bool HasPointer = true;
    static constexpr ::fidl::internal::TransactionalMessageKind MessageKind =
        ::fidl::internal::TransactionalMessageKind::kResponse;

    class UnownedEncodedMessage final {
     public:
      UnownedEncodedMessage(
          uint8_t* _bytes, uint32_t _byte_size,
          ::fidl_test_protocols::wire::WithErrorSyntax_ErrorAsPrimitive_Result&
              result)
          : message_(_bytes, _byte_size, sizeof(ErrorAsPrimitiveResponse),
                     nullptr, 0, 0) {
        FIDL_ALIGNDECL ErrorAsPrimitiveResponse _response{result};
        message_.Encode<
            ::fidl_test_protocols::WithErrorSyntax::ErrorAsPrimitiveResponse>(
            &_response);
      }
      UnownedEncodedMessage(uint8_t* bytes, uint32_t byte_size,
                            ErrorAsPrimitiveResponse* response)
          : message_(bytes, byte_size, sizeof(ErrorAsPrimitiveResponse),
                     nullptr, 0, 0) {
        message_.Encode<
            ::fidl_test_protocols::WithErrorSyntax::ErrorAsPrimitiveResponse>(
            response);
      }
      UnownedEncodedMessage(const UnownedEncodedMessage&) = delete;
      UnownedEncodedMessage(UnownedEncodedMessage&&) = delete;
      UnownedEncodedMessage* operator=(const UnownedEncodedMessage&) = delete;
      UnownedEncodedMessage* operator=(UnownedEncodedMessage&&) = delete;

      zx_status_t status() const { return message_.status(); }
#ifdef __Fuchsia__
      const char* status_string() const { return message_.status_string(); }
#endif
      bool ok() const { return message_.status() == ZX_OK; }
      const char* error() const { return message_.error(); }

      ::fidl::OutgoingMessage& GetOutgoingMessage() { return message_; }

#ifdef __Fuchsia__
      template <typename ChannelLike>
      void Write(ChannelLike&& client) {
        message_.Write(std::forward<ChannelLike>(client));
      }
#endif

     private:
      ::fidl::OutgoingMessage message_;
    };

    class OwnedEncodedMessage final {
     public:
      explicit OwnedEncodedMessage(
          ::fidl_test_protocols::wire::WithErrorSyntax_ErrorAsPrimitive_Result&
              result)
          : message_(bytes_.data(), bytes_.size(), result) {}
      explicit OwnedEncodedMessage(
          ::fidl_test_protocols::WithErrorSyntax::ErrorAsPrimitiveResponse*
              response)
          : message_(bytes_.data(), bytes_.size(), response) {}
      OwnedEncodedMessage(const OwnedEncodedMessage&) = delete;
      OwnedEncodedMessage(OwnedEncodedMessage&&) = delete;
      OwnedEncodedMessage* operator=(const OwnedEncodedMessage&) = delete;
      OwnedEncodedMessage* operator=(OwnedEncodedMessage&&) = delete;

      zx_status_t status() const { return message_.status(); }
#ifdef __Fuchsia__
      const char* status_string() const { return message_.status_string(); }
#endif
      bool ok() const { return message_.ok(); }
      const char* error() const { return message_.error(); }

      ::fidl::OutgoingMessage& GetOutgoingMessage() {
        return message_.GetOutgoingMessage();
      }

#ifdef __Fuchsia__
      template <typename ChannelLike>
      void Write(ChannelLike&& client) {
        message_.Write(std::forward<ChannelLike>(client));
      }
#endif

     private:
      ::fidl::internal::InlineMessageBuffer<48> bytes_;
      UnownedEncodedMessage message_;
    };

   public:
    class DecodedMessage final : public ::fidl::internal::IncomingMessage {
     public:
      DecodedMessage(uint8_t* bytes, uint32_t byte_actual,
                     zx_handle_info_t* handles = nullptr,
                     uint32_t handle_actual = 0)
          : ::fidl::internal::IncomingMessage(bytes, byte_actual, handles,
                                              handle_actual) {
        Decode<
            ::fidl_test_protocols::WithErrorSyntax::ErrorAsPrimitiveResponse>();
      }
      DecodedMessage(fidl_incoming_msg_t* msg)
          : ::fidl::internal::IncomingMessage(msg) {
        Decode<
            ::fidl_test_protocols::WithErrorSyntax::ErrorAsPrimitiveResponse>();
      }
      DecodedMessage(const DecodedMessage&) = delete;
      DecodedMessage(DecodedMessage&&) = delete;
      DecodedMessage* operator=(const DecodedMessage&) = delete;
      DecodedMessage* operator=(DecodedMessage&&) = delete;

      ErrorAsPrimitiveResponse* PrimaryObject() {
        ZX_DEBUG_ASSERT(ok());
        return reinterpret_cast<
            ::fidl_test_protocols::WithErrorSyntax::ErrorAsPrimitiveResponse*>(
            bytes());
      }

      // Release the ownership of the decoded message. That means that the
      // handles won't be closed When the object is destroyed. After calling
      // this method, the DecodedMessage object should not be used anymore.
      void ReleasePrimaryObject() { ResetBytes(); }
    };

   private:
    void _InitHeader();
  };
  struct ErrorAsPrimitiveRequest final {
    FIDL_ALIGNDECL
    fidl_message_header_t _hdr;
    explicit ErrorAsPrimitiveRequest(zx_txid_t _txid) { _InitHeader(_txid); }

    static constexpr const fidl_type_t* Type =
        &::fidl::_llcpp_coding_AnyZeroArgMessageTable;
    static constexpr uint32_t MaxNumHandles = 0;
    static constexpr uint32_t PrimarySize = 16;
    static constexpr uint32_t MaxOutOfLine = 0;
    static constexpr uint32_t AltPrimarySize = 16;
    static constexpr uint32_t AltMaxOutOfLine = 0;
    static constexpr bool HasFlexibleEnvelope = false;
    static constexpr bool HasPointer = false;
    static constexpr ::fidl::internal::TransactionalMessageKind MessageKind =
        ::fidl::internal::TransactionalMessageKind::kRequest;
    using ResponseType =
        ::fidl_test_protocols::WithErrorSyntax::ErrorAsPrimitiveResponse;

    class UnownedEncodedMessage final {
     public:
      UnownedEncodedMessage(uint8_t* _bytes, uint32_t _byte_size,
                            zx_txid_t _txid)
          : message_(_bytes, _byte_size, sizeof(ErrorAsPrimitiveRequest),
                     nullptr, 0, 0) {
        FIDL_ALIGNDECL ErrorAsPrimitiveRequest _request(_txid);
        message_.Encode<ErrorAsPrimitiveRequest>(&_request);
      }
      UnownedEncodedMessage(uint8_t* bytes, uint32_t byte_size,
                            ErrorAsPrimitiveRequest* request)
          : message_(bytes, byte_size, sizeof(ErrorAsPrimitiveRequest), nullptr,
                     0, 0) {
        message_.Encode<ErrorAsPrimitiveRequest>(request);
      }
      UnownedEncodedMessage(const UnownedEncodedMessage&) = delete;
      UnownedEncodedMessage(UnownedEncodedMessage&&) = delete;
      UnownedEncodedMessage* operator=(const UnownedEncodedMessage&) = delete;
      UnownedEncodedMessage* operator=(UnownedEncodedMessage&&) = delete;

      zx_status_t status() const { return message_.status(); }
#ifdef __Fuchsia__
      const char* status_string() const { return message_.status_string(); }
#endif
      bool ok() const { return message_.status() == ZX_OK; }
      const char* error() const { return message_.error(); }

      ::fidl::OutgoingMessage& GetOutgoingMessage() { return message_; }

#ifdef __Fuchsia__
      template <typename ChannelLike>
      void Write(ChannelLike&& client) {
        message_.Write(std::forward<ChannelLike>(client));
      }
#endif

     private:
      ::fidl::OutgoingMessage message_;
    };

    class OwnedEncodedMessage final {
     public:
      explicit OwnedEncodedMessage(zx_txid_t _txid)
          : message_(bytes_.data(), bytes_.size(), _txid) {}
      explicit OwnedEncodedMessage(ErrorAsPrimitiveRequest* request)
          : message_(bytes_.data(), bytes_.size(), request) {}
      OwnedEncodedMessage(const OwnedEncodedMessage&) = delete;
      OwnedEncodedMessage(OwnedEncodedMessage&&) = delete;
      OwnedEncodedMessage* operator=(const OwnedEncodedMessage&) = delete;
      OwnedEncodedMessage* operator=(OwnedEncodedMessage&&) = delete;

      zx_status_t status() const { return message_.status(); }
#ifdef __Fuchsia__
      const char* status_string() const { return message_.status_string(); }
#endif
      bool ok() const { return message_.ok(); }
      const char* error() const { return message_.error(); }

      ::fidl::OutgoingMessage& GetOutgoingMessage() {
        return message_.GetOutgoingMessage();
      }

#ifdef __Fuchsia__
      template <typename ChannelLike>
      void Write(ChannelLike&& client) {
        message_.Write(std::forward<ChannelLike>(client));
      }
#endif

     private:
      ::fidl::internal::InlineMessageBuffer<16> bytes_;
      UnownedEncodedMessage message_;
    };

   public:
    class DecodedMessage final : public ::fidl::internal::IncomingMessage {
     public:
      DecodedMessage(uint8_t* bytes, uint32_t byte_actual,
                     zx_handle_info_t* handles = nullptr,
                     uint32_t handle_actual = 0)
          : ::fidl::internal::IncomingMessage(bytes, byte_actual, handles,
                                              handle_actual) {
        Decode<ErrorAsPrimitiveRequest>();
      }
      DecodedMessage(fidl_incoming_msg_t* msg)
          : ::fidl::internal::IncomingMessage(msg) {
        Decode<ErrorAsPrimitiveRequest>();
      }
      DecodedMessage(const DecodedMessage&) = delete;
      DecodedMessage(DecodedMessage&&) = delete;
      DecodedMessage* operator=(const DecodedMessage&) = delete;
      DecodedMessage* operator=(DecodedMessage&&) = delete;

      ErrorAsPrimitiveRequest* PrimaryObject() {
        ZX_DEBUG_ASSERT(ok());
        return reinterpret_cast<ErrorAsPrimitiveRequest*>(bytes());
      }

      // Release the ownership of the decoded message. That means that the
      // handles won't be closed When the object is destroyed. After calling
      // this method, the DecodedMessage object should not be used anymore.
      void ReleasePrimaryObject() { ResetBytes(); }
    };

   private:
    void _InitHeader(zx_txid_t _txid);
  };

  struct ErrorAsEnumResponse final {
    FIDL_ALIGNDECL
    fidl_message_header_t _hdr;
    ::fidl_test_protocols::wire::WithErrorSyntax_ErrorAsEnum_Result result;
    explicit ErrorAsEnumResponse(
        ::fidl_test_protocols::wire::WithErrorSyntax_ErrorAsEnum_Result& result)
        : result(std::move(result)) {
      _InitHeader();
    }
    ErrorAsEnumResponse() { _InitHeader(); }

    static constexpr const fidl_type_t* Type =
        &::fidl_test_protocols::
            fidl_test_protocols_WithErrorSyntaxErrorAsEnumResponseTable;
    static constexpr uint32_t MaxNumHandles = 0;
    static constexpr uint32_t PrimarySize = 40;
    static constexpr uint32_t MaxOutOfLine = 8;
    static constexpr bool HasFlexibleEnvelope = false;
    static constexpr bool HasPointer = true;
    static constexpr ::fidl::internal::TransactionalMessageKind MessageKind =
        ::fidl::internal::TransactionalMessageKind::kResponse;

    class UnownedEncodedMessage final {
     public:
      UnownedEncodedMessage(
          uint8_t* _bytes, uint32_t _byte_size,
          ::fidl_test_protocols::wire::WithErrorSyntax_ErrorAsEnum_Result&
              result)
          : message_(_bytes, _byte_size, sizeof(ErrorAsEnumResponse), nullptr,
                     0, 0) {
        FIDL_ALIGNDECL ErrorAsEnumResponse _response{result};
        message_.Encode<
            ::fidl_test_protocols::WithErrorSyntax::ErrorAsEnumResponse>(
            &_response);
      }
      UnownedEncodedMessage(uint8_t* bytes, uint32_t byte_size,
                            ErrorAsEnumResponse* response)
          : message_(bytes, byte_size, sizeof(ErrorAsEnumResponse), nullptr, 0,
                     0) {
        message_.Encode<
            ::fidl_test_protocols::WithErrorSyntax::ErrorAsEnumResponse>(
            response);
      }
      UnownedEncodedMessage(const UnownedEncodedMessage&) = delete;
      UnownedEncodedMessage(UnownedEncodedMessage&&) = delete;
      UnownedEncodedMessage* operator=(const UnownedEncodedMessage&) = delete;
      UnownedEncodedMessage* operator=(UnownedEncodedMessage&&) = delete;

      zx_status_t status() const { return message_.status(); }
#ifdef __Fuchsia__
      const char* status_string() const { return message_.status_string(); }
#endif
      bool ok() const { return message_.status() == ZX_OK; }
      const char* error() const { return message_.error(); }

      ::fidl::OutgoingMessage& GetOutgoingMessage() { return message_; }

#ifdef __Fuchsia__
      template <typename ChannelLike>
      void Write(ChannelLike&& client) {
        message_.Write(std::forward<ChannelLike>(client));
      }
#endif

     private:
      ::fidl::OutgoingMessage message_;
    };

    class OwnedEncodedMessage final {
     public:
      explicit OwnedEncodedMessage(
          ::fidl_test_protocols::wire::WithErrorSyntax_ErrorAsEnum_Result&
              result)
          : message_(bytes_.data(), bytes_.size(), result) {}
      explicit OwnedEncodedMessage(
          ::fidl_test_protocols::WithErrorSyntax::ErrorAsEnumResponse* response)
          : message_(bytes_.data(), bytes_.size(), response) {}
      OwnedEncodedMessage(const OwnedEncodedMessage&) = delete;
      OwnedEncodedMessage(OwnedEncodedMessage&&) = delete;
      OwnedEncodedMessage* operator=(const OwnedEncodedMessage&) = delete;
      OwnedEncodedMessage* operator=(OwnedEncodedMessage&&) = delete;

      zx_status_t status() const { return message_.status(); }
#ifdef __Fuchsia__
      const char* status_string() const { return message_.status_string(); }
#endif
      bool ok() const { return message_.ok(); }
      const char* error() const { return message_.error(); }

      ::fidl::OutgoingMessage& GetOutgoingMessage() {
        return message_.GetOutgoingMessage();
      }

#ifdef __Fuchsia__
      template <typename ChannelLike>
      void Write(ChannelLike&& client) {
        message_.Write(std::forward<ChannelLike>(client));
      }
#endif

     private:
      ::fidl::internal::InlineMessageBuffer<48> bytes_;
      UnownedEncodedMessage message_;
    };

   public:
    class DecodedMessage final : public ::fidl::internal::IncomingMessage {
     public:
      DecodedMessage(uint8_t* bytes, uint32_t byte_actual,
                     zx_handle_info_t* handles = nullptr,
                     uint32_t handle_actual = 0)
          : ::fidl::internal::IncomingMessage(bytes, byte_actual, handles,
                                              handle_actual) {
        Decode<::fidl_test_protocols::WithErrorSyntax::ErrorAsEnumResponse>();
      }
      DecodedMessage(fidl_incoming_msg_t* msg)
          : ::fidl::internal::IncomingMessage(msg) {
        Decode<::fidl_test_protocols::WithErrorSyntax::ErrorAsEnumResponse>();
      }
      DecodedMessage(const DecodedMessage&) = delete;
      DecodedMessage(DecodedMessage&&) = delete;
      DecodedMessage* operator=(const DecodedMessage&) = delete;
      DecodedMessage* operator=(DecodedMessage&&) = delete;

      ErrorAsEnumResponse* PrimaryObject() {
        ZX_DEBUG_ASSERT(ok());
        return reinterpret_cast<
            ::fidl_test_protocols::WithErrorSyntax::ErrorAsEnumResponse*>(
            bytes());
      }

      // Release the ownership of the decoded message. That means that the
      // handles won't be closed When the object is destroyed. After calling
      // this method, the DecodedMessage object should not be used anymore.
      void ReleasePrimaryObject() { ResetBytes(); }
    };

   private:
    void _InitHeader();
  };
  struct ErrorAsEnumRequest final {
    FIDL_ALIGNDECL
    fidl_message_header_t _hdr;
    explicit ErrorAsEnumRequest(zx_txid_t _txid) { _InitHeader(_txid); }

    static constexpr const fidl_type_t* Type =
        &::fidl::_llcpp_coding_AnyZeroArgMessageTable;
    static constexpr uint32_t MaxNumHandles = 0;
    static constexpr uint32_t PrimarySize = 16;
    static constexpr uint32_t MaxOutOfLine = 0;
    static constexpr uint32_t AltPrimarySize = 16;
    static constexpr uint32_t AltMaxOutOfLine = 0;
    static constexpr bool HasFlexibleEnvelope = false;
    static constexpr bool HasPointer = false;
    static constexpr ::fidl::internal::TransactionalMessageKind MessageKind =
        ::fidl::internal::TransactionalMessageKind::kRequest;
    using ResponseType =
        ::fidl_test_protocols::WithErrorSyntax::ErrorAsEnumResponse;

    class UnownedEncodedMessage final {
     public:
      UnownedEncodedMessage(uint8_t* _bytes, uint32_t _byte_size,
                            zx_txid_t _txid)
          : message_(_bytes, _byte_size, sizeof(ErrorAsEnumRequest), nullptr, 0,
                     0) {
        FIDL_ALIGNDECL ErrorAsEnumRequest _request(_txid);
        message_.Encode<ErrorAsEnumRequest>(&_request);
      }
      UnownedEncodedMessage(uint8_t* bytes, uint32_t byte_size,
                            ErrorAsEnumRequest* request)
          : message_(bytes, byte_size, sizeof(ErrorAsEnumRequest), nullptr, 0,
                     0) {
        message_.Encode<ErrorAsEnumRequest>(request);
      }
      UnownedEncodedMessage(const UnownedEncodedMessage&) = delete;
      UnownedEncodedMessage(UnownedEncodedMessage&&) = delete;
      UnownedEncodedMessage* operator=(const UnownedEncodedMessage&) = delete;
      UnownedEncodedMessage* operator=(UnownedEncodedMessage&&) = delete;

      zx_status_t status() const { return message_.status(); }
#ifdef __Fuchsia__
      const char* status_string() const { return message_.status_string(); }
#endif
      bool ok() const { return message_.status() == ZX_OK; }
      const char* error() const { return message_.error(); }

      ::fidl::OutgoingMessage& GetOutgoingMessage() { return message_; }

#ifdef __Fuchsia__
      template <typename ChannelLike>
      void Write(ChannelLike&& client) {
        message_.Write(std::forward<ChannelLike>(client));
      }
#endif

     private:
      ::fidl::OutgoingMessage message_;
    };

    class OwnedEncodedMessage final {
     public:
      explicit OwnedEncodedMessage(zx_txid_t _txid)
          : message_(bytes_.data(), bytes_.size(), _txid) {}
      explicit OwnedEncodedMessage(ErrorAsEnumRequest* request)
          : message_(bytes_.data(), bytes_.size(), request) {}
      OwnedEncodedMessage(const OwnedEncodedMessage&) = delete;
      OwnedEncodedMessage(OwnedEncodedMessage&&) = delete;
      OwnedEncodedMessage* operator=(const OwnedEncodedMessage&) = delete;
      OwnedEncodedMessage* operator=(OwnedEncodedMessage&&) = delete;

      zx_status_t status() const { return message_.status(); }
#ifdef __Fuchsia__
      const char* status_string() const { return message_.status_string(); }
#endif
      bool ok() const { return message_.ok(); }
      const char* error() const { return message_.error(); }

      ::fidl::OutgoingMessage& GetOutgoingMessage() {
        return message_.GetOutgoingMessage();
      }

#ifdef __Fuchsia__
      template <typename ChannelLike>
      void Write(ChannelLike&& client) {
        message_.Write(std::forward<ChannelLike>(client));
      }
#endif

     private:
      ::fidl::internal::InlineMessageBuffer<16> bytes_;
      UnownedEncodedMessage message_;
    };

   public:
    class DecodedMessage final : public ::fidl::internal::IncomingMessage {
     public:
      DecodedMessage(uint8_t* bytes, uint32_t byte_actual,
                     zx_handle_info_t* handles = nullptr,
                     uint32_t handle_actual = 0)
          : ::fidl::internal::IncomingMessage(bytes, byte_actual, handles,
                                              handle_actual) {
        Decode<ErrorAsEnumRequest>();
      }
      DecodedMessage(fidl_incoming_msg_t* msg)
          : ::fidl::internal::IncomingMessage(msg) {
        Decode<ErrorAsEnumRequest>();
      }
      DecodedMessage(const DecodedMessage&) = delete;
      DecodedMessage(DecodedMessage&&) = delete;
      DecodedMessage* operator=(const DecodedMessage&) = delete;
      DecodedMessage* operator=(DecodedMessage&&) = delete;

      ErrorAsEnumRequest* PrimaryObject() {
        ZX_DEBUG_ASSERT(ok());
        return reinterpret_cast<ErrorAsEnumRequest*>(bytes());
      }

      // Release the ownership of the decoded message. That means that the
      // handles won't be closed When the object is destroyed. After calling
      // this method, the DecodedMessage object should not be used anymore.
      void ReleasePrimaryObject() { ResetBytes(); }
    };

   private:
    void _InitHeader(zx_txid_t _txid);
  };

  class EventHandlerInterface {
   public:
    EventHandlerInterface() = default;
    virtual ~EventHandlerInterface() = default;
  };

#ifdef __Fuchsia__
  // Collection of return types of FIDL calls in this protocol.
  class ResultOf final {
    ResultOf() = delete;

   public:
    class ResponseAsStruct final : public ::fidl::Result {
     public:
      explicit ResponseAsStruct(
          ::fidl::UnownedClientEnd<::fidl_test_protocols::WithErrorSyntax>
              _client);
      ResponseAsStruct(
          ::fidl::UnownedClientEnd<::fidl_test_protocols::WithErrorSyntax>
              _client,
          zx_time_t _deadline);
      explicit ResponseAsStruct(const ::fidl::Result& result)
          : ::fidl::Result(result) {}
      ResponseAsStruct(ResponseAsStruct&&) = delete;
      ResponseAsStruct(const ResponseAsStruct&) = delete;
      ResponseAsStruct* operator=(ResponseAsStruct&&) = delete;
      ResponseAsStruct* operator=(const ResponseAsStruct&) = delete;
      ~ResponseAsStruct() = default;

      ::fidl_test_protocols::WithErrorSyntax::ResponseAsStructResponse*
      Unwrap() {
        ZX_DEBUG_ASSERT(ok());
        return reinterpret_cast<
            ::fidl_test_protocols::WithErrorSyntax::ResponseAsStructResponse*>(
            bytes_.data());
      }
      const ::fidl_test_protocols::WithErrorSyntax::ResponseAsStructResponse*
      Unwrap() const {
        ZX_DEBUG_ASSERT(ok());
        return reinterpret_cast<const ::fidl_test_protocols::WithErrorSyntax::
                                    ResponseAsStructResponse*>(bytes_.data());
      }

      ::fidl_test_protocols::WithErrorSyntax::ResponseAsStructResponse&
      value() {
        return *Unwrap();
      }
      const ::fidl_test_protocols::WithErrorSyntax::ResponseAsStructResponse&
      value() const {
        return *Unwrap();
      }

      ::fidl_test_protocols::WithErrorSyntax::ResponseAsStructResponse*
      operator->() {
        return &value();
      }
      const ResponseAsStructResponse* operator->() const { return &value(); }

      ResponseAsStructResponse& operator*() { return value(); }
      const ResponseAsStructResponse& operator*() const { return value(); }

     private:
      ::fidl::internal::InlineMessageBuffer<64> bytes_;
    };
    class ErrorAsPrimitive final : public ::fidl::Result {
     public:
      explicit ErrorAsPrimitive(
          ::fidl::UnownedClientEnd<::fidl_test_protocols::WithErrorSyntax>
              _client);
      ErrorAsPrimitive(
          ::fidl::UnownedClientEnd<::fidl_test_protocols::WithErrorSyntax>
              _client,
          zx_time_t _deadline);
      explicit ErrorAsPrimitive(const ::fidl::Result& result)
          : ::fidl::Result(result) {}
      ErrorAsPrimitive(ErrorAsPrimitive&&) = delete;
      ErrorAsPrimitive(const ErrorAsPrimitive&) = delete;
      ErrorAsPrimitive* operator=(ErrorAsPrimitive&&) = delete;
      ErrorAsPrimitive* operator=(const ErrorAsPrimitive&) = delete;
      ~ErrorAsPrimitive() = default;

      ::fidl_test_protocols::WithErrorSyntax::ErrorAsPrimitiveResponse*
      Unwrap() {
        ZX_DEBUG_ASSERT(ok());
        return reinterpret_cast<
            ::fidl_test_protocols::WithErrorSyntax::ErrorAsPrimitiveResponse*>(
            bytes_.data());
      }
      const ::fidl_test_protocols::WithErrorSyntax::ErrorAsPrimitiveResponse*
      Unwrap() const {
        ZX_DEBUG_ASSERT(ok());
        return reinterpret_cast<const ::fidl_test_protocols::WithErrorSyntax::
                                    ErrorAsPrimitiveResponse*>(bytes_.data());
      }

      ::fidl_test_protocols::WithErrorSyntax::ErrorAsPrimitiveResponse&
      value() {
        return *Unwrap();
      }
      const ::fidl_test_protocols::WithErrorSyntax::ErrorAsPrimitiveResponse&
      value() const {
        return *Unwrap();
      }

      ::fidl_test_protocols::WithErrorSyntax::ErrorAsPrimitiveResponse*
      operator->() {
        return &value();
      }
      const ErrorAsPrimitiveResponse* operator->() const { return &value(); }

      ErrorAsPrimitiveResponse& operator*() { return value(); }
      const ErrorAsPrimitiveResponse& operator*() const { return value(); }

     private:
      ::fidl::internal::InlineMessageBuffer<48> bytes_;
    };
    class ErrorAsEnum final : public ::fidl::Result {
     public:
      explicit ErrorAsEnum(
          ::fidl::UnownedClientEnd<::fidl_test_protocols::WithErrorSyntax>
              _client);
      ErrorAsEnum(
          ::fidl::UnownedClientEnd<::fidl_test_protocols::WithErrorSyntax>
              _client,
          zx_time_t _deadline);
      explicit ErrorAsEnum(const ::fidl::Result& result)
          : ::fidl::Result(result) {}
      ErrorAsEnum(ErrorAsEnum&&) = delete;
      ErrorAsEnum(const ErrorAsEnum&) = delete;
      ErrorAsEnum* operator=(ErrorAsEnum&&) = delete;
      ErrorAsEnum* operator=(const ErrorAsEnum&) = delete;
      ~ErrorAsEnum() = default;

      ::fidl_test_protocols::WithErrorSyntax::ErrorAsEnumResponse* Unwrap() {
        ZX_DEBUG_ASSERT(ok());
        return reinterpret_cast<
            ::fidl_test_protocols::WithErrorSyntax::ErrorAsEnumResponse*>(
            bytes_.data());
      }
      const ::fidl_test_protocols::WithErrorSyntax::ErrorAsEnumResponse*
      Unwrap() const {
        ZX_DEBUG_ASSERT(ok());
        return reinterpret_cast<
            const ::fidl_test_protocols::WithErrorSyntax::ErrorAsEnumResponse*>(
            bytes_.data());
      }

      ::fidl_test_protocols::WithErrorSyntax::ErrorAsEnumResponse& value() {
        return *Unwrap();
      }
      const ::fidl_test_protocols::WithErrorSyntax::ErrorAsEnumResponse& value()
          const {
        return *Unwrap();
      }

      ::fidl_test_protocols::WithErrorSyntax::ErrorAsEnumResponse*
      operator->() {
        return &value();
      }
      const ErrorAsEnumResponse* operator->() const { return &value(); }

      ErrorAsEnumResponse& operator*() { return value(); }
      const ErrorAsEnumResponse& operator*() const { return value(); }

     private:
      ::fidl::internal::InlineMessageBuffer<48> bytes_;
    };
  };

  // Collection of return types of FIDL calls in this protocol,
  // when the caller-allocate flavor or in-place call is used.
  class UnownedResultOf final {
    UnownedResultOf() = delete;

   public:
    class ResponseAsStruct final : public ::fidl::Result {
     public:
      explicit ResponseAsStruct(
          ::fidl::UnownedClientEnd<::fidl_test_protocols::WithErrorSyntax>
              _client,
          uint8_t* _response_bytes, uint32_t _response_byte_capacity);
      explicit ResponseAsStruct(const ::fidl::Result& result)
          : ::fidl::Result(result) {}
      ResponseAsStruct(ResponseAsStruct&&) = delete;
      ResponseAsStruct(const ResponseAsStruct&) = delete;
      ResponseAsStruct* operator=(ResponseAsStruct&&) = delete;
      ResponseAsStruct* operator=(const ResponseAsStruct&) = delete;
      ~ResponseAsStruct() = default;

      ResponseAsStructResponse* Unwrap() {
        ZX_DEBUG_ASSERT(ok());
        return reinterpret_cast<
            ::fidl_test_protocols::WithErrorSyntax::ResponseAsStructResponse*>(
            bytes_);
      }
      const ResponseAsStructResponse* Unwrap() const {
        ZX_DEBUG_ASSERT(ok());
        return reinterpret_cast<const ::fidl_test_protocols::WithErrorSyntax::
                                    ResponseAsStructResponse*>(bytes_);
      }

      ResponseAsStructResponse& value() { return *Unwrap(); }
      const ResponseAsStructResponse& value() const { return *Unwrap(); }

      ResponseAsStructResponse* operator->() { return &value(); }
      const ResponseAsStructResponse* operator->() const { return &value(); }

      ResponseAsStructResponse& operator*() { return value(); }
      const ResponseAsStructResponse& operator*() const { return value(); }

     private:
      uint8_t* bytes_;
    };
    class ErrorAsPrimitive final : public ::fidl::Result {
     public:
      explicit ErrorAsPrimitive(
          ::fidl::UnownedClientEnd<::fidl_test_protocols::WithErrorSyntax>
              _client,
          uint8_t* _response_bytes, uint32_t _response_byte_capacity);
      explicit ErrorAsPrimitive(const ::fidl::Result& result)
          : ::fidl::Result(result) {}
      ErrorAsPrimitive(ErrorAsPrimitive&&) = delete;
      ErrorAsPrimitive(const ErrorAsPrimitive&) = delete;
      ErrorAsPrimitive* operator=(ErrorAsPrimitive&&) = delete;
      ErrorAsPrimitive* operator=(const ErrorAsPrimitive&) = delete;
      ~ErrorAsPrimitive() = default;

      ErrorAsPrimitiveResponse* Unwrap() {
        ZX_DEBUG_ASSERT(ok());
        return reinterpret_cast<
            ::fidl_test_protocols::WithErrorSyntax::ErrorAsPrimitiveResponse*>(
            bytes_);
      }
      const ErrorAsPrimitiveResponse* Unwrap() const {
        ZX_DEBUG_ASSERT(ok());
        return reinterpret_cast<const ::fidl_test_protocols::WithErrorSyntax::
                                    ErrorAsPrimitiveResponse*>(bytes_);
      }

      ErrorAsPrimitiveResponse& value() { return *Unwrap(); }
      const ErrorAsPrimitiveResponse& value() const { return *Unwrap(); }

      ErrorAsPrimitiveResponse* operator->() { return &value(); }
      const ErrorAsPrimitiveResponse* operator->() const { return &value(); }

      ErrorAsPrimitiveResponse& operator*() { return value(); }
      const ErrorAsPrimitiveResponse& operator*() const { return value(); }

     private:
      uint8_t* bytes_;
    };
    class ErrorAsEnum final : public ::fidl::Result {
     public:
      explicit ErrorAsEnum(
          ::fidl::UnownedClientEnd<::fidl_test_protocols::WithErrorSyntax>
              _client,
          uint8_t* _response_bytes, uint32_t _response_byte_capacity);
      explicit ErrorAsEnum(const ::fidl::Result& result)
          : ::fidl::Result(result) {}
      ErrorAsEnum(ErrorAsEnum&&) = delete;
      ErrorAsEnum(const ErrorAsEnum&) = delete;
      ErrorAsEnum* operator=(ErrorAsEnum&&) = delete;
      ErrorAsEnum* operator=(const ErrorAsEnum&) = delete;
      ~ErrorAsEnum() = default;

      ErrorAsEnumResponse* Unwrap() {
        ZX_DEBUG_ASSERT(ok());
        return reinterpret_cast<
            ::fidl_test_protocols::WithErrorSyntax::ErrorAsEnumResponse*>(
            bytes_);
      }
      const ErrorAsEnumResponse* Unwrap() const {
        ZX_DEBUG_ASSERT(ok());
        return reinterpret_cast<
            const ::fidl_test_protocols::WithErrorSyntax::ErrorAsEnumResponse*>(
            bytes_);
      }

      ErrorAsEnumResponse& value() { return *Unwrap(); }
      const ErrorAsEnumResponse& value() const { return *Unwrap(); }

      ErrorAsEnumResponse* operator->() { return &value(); }
      const ErrorAsEnumResponse* operator->() const { return &value(); }

      ErrorAsEnumResponse& operator*() { return value(); }
      const ErrorAsEnumResponse& operator*() const { return value(); }

     private:
      uint8_t* bytes_;
    };
  };

  // Methods to make a sync FIDL call directly on an unowned channel or a
  // const reference to a
  // |fidl::ClientEnd<::fidl_test_protocols::WithErrorSyntax>|, avoiding setting
  // up a client.
  class Call final {
    Call() = delete;

   public:
    // Allocates 80 bytes of message buffer on the stack. No heap allocation
    // necessary.
    static ResultOf::ResponseAsStruct ResponseAsStruct(
        ::fidl::UnownedClientEnd<::fidl_test_protocols::WithErrorSyntax>
            _client_end) {
      return ResultOf::ResponseAsStruct(_client_end);
    }

    // Caller provides the backing storage for FIDL message via request and
    // response buffers.
    static UnownedResultOf::ResponseAsStruct ResponseAsStruct(
        ::fidl::UnownedClientEnd<::fidl_test_protocols::WithErrorSyntax>
            _client_end,
        ::fidl::BufferSpan _response_buffer) {
      return UnownedResultOf::ResponseAsStruct(
          _client_end, _response_buffer.data, _response_buffer.capacity);
    }

    // Allocates 64 bytes of message buffer on the stack. No heap allocation
    // necessary.
    static ResultOf::ErrorAsPrimitive ErrorAsPrimitive(
        ::fidl::UnownedClientEnd<::fidl_test_protocols::WithErrorSyntax>
            _client_end) {
      return ResultOf::ErrorAsPrimitive(_client_end);
    }

    // Caller provides the backing storage for FIDL message via request and
    // response buffers.
    static UnownedResultOf::ErrorAsPrimitive ErrorAsPrimitive(
        ::fidl::UnownedClientEnd<::fidl_test_protocols::WithErrorSyntax>
            _client_end,
        ::fidl::BufferSpan _response_buffer) {
      return UnownedResultOf::ErrorAsPrimitive(
          _client_end, _response_buffer.data, _response_buffer.capacity);
    }

    // Allocates 64 bytes of message buffer on the stack. No heap allocation
    // necessary.
    static ResultOf::ErrorAsEnum ErrorAsEnum(
        ::fidl::UnownedClientEnd<::fidl_test_protocols::WithErrorSyntax>
            _client_end) {
      return ResultOf::ErrorAsEnum(_client_end);
    }

    // Caller provides the backing storage for FIDL message via request and
    // response buffers.
    static UnownedResultOf::ErrorAsEnum ErrorAsEnum(
        ::fidl::UnownedClientEnd<::fidl_test_protocols::WithErrorSyntax>
            _client_end,
        ::fidl::BufferSpan _response_buffer) {
      return UnownedResultOf::ErrorAsEnum(_client_end, _response_buffer.data,
                                          _response_buffer.capacity);
    }
  };

  using SyncClient =
      fidl::WireSyncClient<::fidl_test_protocols::WithErrorSyntax>;

#ifdef __Fuchsia__
  using AsyncEventHandler =
      ::fidl::WireAsyncEventHandler<::fidl_test_protocols::WithErrorSyntax>;
  class ResponseAsStructResponseContext;
  class ErrorAsPrimitiveResponseContext;
  class ErrorAsEnumResponseContext;
  using ClientImpl =
      ::fidl::internal::WireClientImpl<::fidl_test_protocols::WithErrorSyntax>;
#endif

  using Interface =
      ::fidl::WireInterface<::fidl_test_protocols::WithErrorSyntax>;

  // Attempts to dispatch the incoming message to a handler function in the
  // server implementation. If there is no matching handler, it returns false,
  // leaving the message and transaction intact. In all other cases, it consumes
  // the message and returns true. It is possible to chain multiple TryDispatch
  // functions in this manner.
  static ::fidl::DispatchResult TryDispatch(Interface* impl,
                                            fidl_incoming_msg_t* msg,
                                            ::fidl::Transaction* txn);

  // Dispatches the incoming message to one of the handlers functions in the
  // protocol. If there is no matching handler, it closes all the handles in
  // |msg| and closes the channel with a |ZX_ERR_NOT_SUPPORTED| epitaph, before
  // returning false. The message should then be discarded.
  static ::fidl::DispatchResult Dispatch(Interface* impl,
                                         fidl_incoming_msg_t* msg,
                                         ::fidl::Transaction* txn);

  // Same as |Dispatch|, but takes a |void*| instead of |Interface*|.
  // Only used with |fidl::BindServer| to reduce template expansion.
  // Do not call this method manually. Use |Dispatch| instead.
  static ::fidl::DispatchResult TypeErasedDispatch(void* impl,
                                                   fidl_incoming_msg_t* msg,
                                                   ::fidl::Transaction* txn) {
    return Dispatch(static_cast<Interface*>(impl), msg, txn);
  }

#endif

  using EventSender =
      ::fidl::WireEventSender<::fidl_test_protocols::WithErrorSyntax>;
  using WeakEventSender = ::fidl::internal::WireWeakEventSender<
      ::fidl_test_protocols::WithErrorSyntax>;
};
}  // namespace fidl_test_protocols
template <>
class ::fidl::WireSyncClient<::fidl_test_protocols::WithErrorSyntax> final {
 public:
  WireSyncClient() = default;

  explicit WireSyncClient(
      ::fidl::ClientEnd<::fidl_test_protocols::WithErrorSyntax> client_end)
      : client_end_(std::move(client_end)) {}

  ~WireSyncClient() = default;
  WireSyncClient(WireSyncClient&&) = default;
  WireSyncClient& operator=(WireSyncClient&&) = default;

  const ::fidl::ClientEnd<::fidl_test_protocols::WithErrorSyntax>& client_end()
      const {
    return client_end_;
  }
  ::fidl::ClientEnd<::fidl_test_protocols::WithErrorSyntax>& client_end() {
    return client_end_;
  }

  const ::zx::channel& channel() const { return client_end_.channel(); }
  ::zx::channel* mutable_channel() { return &client_end_.channel(); }

  // Allocates 80 bytes of message buffer on the stack. No heap allocation
  // necessary.
  ::fidl_test_protocols::WithErrorSyntax::ResultOf::ResponseAsStruct
  ResponseAsStruct() {
    return ::fidl_test_protocols::WithErrorSyntax::ResultOf::ResponseAsStruct(
        this->client_end());
  }

  // Caller provides the backing storage for FIDL message via request and
  // response buffers.
  ::fidl_test_protocols::WithErrorSyntax::UnownedResultOf::ResponseAsStruct
  ResponseAsStruct(::fidl::BufferSpan _response_buffer) {
    return ::fidl_test_protocols::WithErrorSyntax::UnownedResultOf::
        ResponseAsStruct(this->client_end(), _response_buffer.data,
                         _response_buffer.capacity);
  }

  // Allocates 64 bytes of message buffer on the stack. No heap allocation
  // necessary.
  ::fidl_test_protocols::WithErrorSyntax::ResultOf::ErrorAsPrimitive
  ErrorAsPrimitive() {
    return ::fidl_test_protocols::WithErrorSyntax::ResultOf::ErrorAsPrimitive(
        this->client_end());
  }

  // Caller provides the backing storage for FIDL message via request and
  // response buffers.
  ::fidl_test_protocols::WithErrorSyntax::UnownedResultOf::ErrorAsPrimitive
  ErrorAsPrimitive(::fidl::BufferSpan _response_buffer) {
    return ::fidl_test_protocols::WithErrorSyntax::UnownedResultOf::
        ErrorAsPrimitive(this->client_end(), _response_buffer.data,
                         _response_buffer.capacity);
  }

  // Allocates 64 bytes of message buffer on the stack. No heap allocation
  // necessary.
  ::fidl_test_protocols::WithErrorSyntax::ResultOf::ErrorAsEnum ErrorAsEnum() {
    return ::fidl_test_protocols::WithErrorSyntax::ResultOf::ErrorAsEnum(
        this->client_end());
  }

  // Caller provides the backing storage for FIDL message via request and
  // response buffers.
  ::fidl_test_protocols::WithErrorSyntax::UnownedResultOf::ErrorAsEnum
  ErrorAsEnum(::fidl::BufferSpan _response_buffer) {
    return ::fidl_test_protocols::WithErrorSyntax::UnownedResultOf::ErrorAsEnum(
        this->client_end(), _response_buffer.data, _response_buffer.capacity);
  }

 private:
  ::fidl::ClientEnd<::fidl_test_protocols::WithErrorSyntax> client_end_;
};

// Pure-virtual interface to be implemented by a server.
// This interface uses typed channels (i.e. |fidl::ClientEnd<SomeProtocol>|
// and |fidl::ServerEnd<SomeProtocol>|).
template <>
class ::fidl::WireInterface<::fidl_test_protocols::WithErrorSyntax>
    : public ::fidl::internal::IncomingMessageDispatcher {
 public:
  WireInterface() = default;
  virtual ~WireInterface() = default;

  // The marker protocol type within which this |WireInterface| class is
  // defined.
  using _EnclosingProtocol = ::fidl_test_protocols::WithErrorSyntax;

  class ResponseAsStructCompleterBase : public ::fidl::CompleterBase {
   public:
    // In the following methods, the return value indicates internal errors
    // during the reply, such as encoding or writing to the transport. Note that
    // any error will automatically lead to the destruction of the binding,
    // after which the |on_unbound| callback will be triggered with a detailed
    // reason.
    //
    // See //zircon/system/ulib/fidl/include/lib/fidl/llcpp/server.h.
    //
    // Because the reply status is identical to the unbinding status, it can be
    // safely ignored.
    ::fidl::Result Reply(
        ::fidl_test_protocols::wire::WithErrorSyntax_ResponseAsStruct_Result
            result);
    ::fidl::Result ReplySuccess(int64_t a, int64_t b, int64_t c);
    ::fidl::Result ReplyError(uint32_t error);
    ::fidl::Result Reply(
        ::fidl::BufferSpan _buffer,
        ::fidl_test_protocols::wire::WithErrorSyntax_ResponseAsStruct_Result
            result);
    ::fidl::Result ReplySuccess(::fidl::BufferSpan _buffer, int64_t a,
                                int64_t b, int64_t c);

   protected:
    using ::fidl::CompleterBase::CompleterBase;
  };

  using ResponseAsStructCompleter =
      ::fidl::Completer<ResponseAsStructCompleterBase>;

  virtual void ResponseAsStruct(
      ResponseAsStructCompleter::Sync& _completer) = 0;

  class ErrorAsPrimitiveCompleterBase : public ::fidl::CompleterBase {
   public:
    // In the following methods, the return value indicates internal errors
    // during the reply, such as encoding or writing to the transport. Note that
    // any error will automatically lead to the destruction of the binding,
    // after which the |on_unbound| callback will be triggered with a detailed
    // reason.
    //
    // See //zircon/system/ulib/fidl/include/lib/fidl/llcpp/server.h.
    //
    // Because the reply status is identical to the unbinding status, it can be
    // safely ignored.
    ::fidl::Result Reply(
        ::fidl_test_protocols::wire::WithErrorSyntax_ErrorAsPrimitive_Result
            result);
    ::fidl::Result ReplySuccess();
    ::fidl::Result ReplyError(uint32_t error);
    ::fidl::Result Reply(
        ::fidl::BufferSpan _buffer,
        ::fidl_test_protocols::wire::WithErrorSyntax_ErrorAsPrimitive_Result
            result);
    ::fidl::Result ReplySuccess(::fidl::BufferSpan _buffer);

   protected:
    using ::fidl::CompleterBase::CompleterBase;
  };

  using ErrorAsPrimitiveCompleter =
      ::fidl::Completer<ErrorAsPrimitiveCompleterBase>;

  virtual void ErrorAsPrimitive(
      ErrorAsPrimitiveCompleter::Sync& _completer) = 0;

  class ErrorAsEnumCompleterBase : public ::fidl::CompleterBase {
   public:
    // In the following methods, the return value indicates internal errors
    // during the reply, such as encoding or writing to the transport. Note that
    // any error will automatically lead to the destruction of the binding,
    // after which the |on_unbound| callback will be triggered with a detailed
    // reason.
    //
    // See //zircon/system/ulib/fidl/include/lib/fidl/llcpp/server.h.
    //
    // Because the reply status is identical to the unbinding status, it can be
    // safely ignored.
    ::fidl::Result Reply(
        ::fidl_test_protocols::wire::WithErrorSyntax_ErrorAsEnum_Result result);
    ::fidl::Result ReplySuccess();
    ::fidl::Result ReplyError(::fidl_test_protocols::wire::ErrorEnun error);
    ::fidl::Result Reply(
        ::fidl::BufferSpan _buffer,
        ::fidl_test_protocols::wire::WithErrorSyntax_ErrorAsEnum_Result result);
    ::fidl::Result ReplySuccess(::fidl::BufferSpan _buffer);

   protected:
    using ::fidl::CompleterBase::CompleterBase;
  };

  using ErrorAsEnumCompleter = ::fidl::Completer<ErrorAsEnumCompleterBase>;

  virtual void ErrorAsEnum(ErrorAsEnumCompleter::Sync& _completer) = 0;

 private:
  ::fidl::DispatchResult dispatch_message(fidl_incoming_msg_t* msg,
                                          ::fidl::Transaction* txn) final;
};

namespace fidl {

template <>
struct IsFidlType<::fidl_test_protocols::wire::obj_type>
    : public std::true_type {};

template <>
struct IsFidlType<
    ::fidl_test_protocols::wire::WithErrorSyntax_ResponseAsStruct_Response>
    : public std::true_type {};
template <>
struct IsStruct<
    ::fidl_test_protocols::wire::WithErrorSyntax_ResponseAsStruct_Response>
    : public std::true_type {};
static_assert(
    std::is_standard_layout_v<::fidl_test_protocols::wire::
                                  WithErrorSyntax_ResponseAsStruct_Response>);
static_assert(
    offsetof(
        ::fidl_test_protocols::wire::WithErrorSyntax_ResponseAsStruct_Response,
        a) == 0);
static_assert(
    offsetof(
        ::fidl_test_protocols::wire::WithErrorSyntax_ResponseAsStruct_Response,
        b) == 8);
static_assert(
    offsetof(
        ::fidl_test_protocols::wire::WithErrorSyntax_ResponseAsStruct_Response,
        c) == 16);
static_assert(sizeof(::fidl_test_protocols::wire::
                         WithErrorSyntax_ResponseAsStruct_Response) ==
              ::fidl_test_protocols::wire::
                  WithErrorSyntax_ResponseAsStruct_Response::PrimarySize);

template <>
struct IsFidlType<
    ::fidl_test_protocols::wire::WithErrorSyntax_ResponseAsStruct_Result>
    : public std::true_type {};
template <>
struct IsUnion<
    ::fidl_test_protocols::wire::WithErrorSyntax_ResponseAsStruct_Result>
    : public std::true_type {};
static_assert(
    std::is_standard_layout_v<
        ::fidl_test_protocols::wire::WithErrorSyntax_ResponseAsStruct_Result>);

template <>
struct IsFidlType<
    ::fidl_test_protocols::wire::WithErrorSyntax_ErrorAsPrimitive_Response>
    : public std::true_type {};
template <>
struct IsStruct<
    ::fidl_test_protocols::wire::WithErrorSyntax_ErrorAsPrimitive_Response>
    : public std::true_type {};
static_assert(
    std::is_standard_layout_v<::fidl_test_protocols::wire::
                                  WithErrorSyntax_ErrorAsPrimitive_Response>);
static_assert(
    offsetof(
        ::fidl_test_protocols::wire::WithErrorSyntax_ErrorAsPrimitive_Response,
        __reserved) == 0);
static_assert(sizeof(::fidl_test_protocols::wire::
                         WithErrorSyntax_ErrorAsPrimitive_Response) ==
              ::fidl_test_protocols::wire::
                  WithErrorSyntax_ErrorAsPrimitive_Response::PrimarySize);

template <>
struct IsFidlType<
    ::fidl_test_protocols::wire::WithErrorSyntax_ErrorAsPrimitive_Result>
    : public std::true_type {};
template <>
struct IsUnion<
    ::fidl_test_protocols::wire::WithErrorSyntax_ErrorAsPrimitive_Result>
    : public std::true_type {};
static_assert(
    std::is_standard_layout_v<
        ::fidl_test_protocols::wire::WithErrorSyntax_ErrorAsPrimitive_Result>);

template <>
struct IsFidlType<
    ::fidl_test_protocols::wire::WithErrorSyntax_ErrorAsEnum_Response>
    : public std::true_type {};
template <>
struct IsStruct<
    ::fidl_test_protocols::wire::WithErrorSyntax_ErrorAsEnum_Response>
    : public std::true_type {};
static_assert(
    std::is_standard_layout_v<
        ::fidl_test_protocols::wire::WithErrorSyntax_ErrorAsEnum_Response>);
static_assert(
    offsetof(::fidl_test_protocols::wire::WithErrorSyntax_ErrorAsEnum_Response,
             __reserved) == 0);
static_assert(
    sizeof(::fidl_test_protocols::wire::WithErrorSyntax_ErrorAsEnum_Response) ==
    ::fidl_test_protocols::wire::WithErrorSyntax_ErrorAsEnum_Response::
        PrimarySize);

template <>
struct IsFidlType<::fidl_test_protocols::Transitional::RequestRequest>
    : public std::true_type {};
template <>
struct IsFidlMessage<::fidl_test_protocols::Transitional::RequestRequest>
    : public std::true_type {};
static_assert(sizeof(::fidl_test_protocols::Transitional::RequestRequest) ==
              ::fidl_test_protocols::Transitional::RequestRequest::PrimarySize);
static_assert(offsetof(::fidl_test_protocols::Transitional::RequestRequest,
                       x) == 16);

template <>
struct IsFidlType<::fidl_test_protocols::Transitional::RequestResponse>
    : public std::true_type {};
template <>
struct IsFidlMessage<::fidl_test_protocols::Transitional::RequestResponse>
    : public std::true_type {};
static_assert(
    sizeof(::fidl_test_protocols::Transitional::RequestResponse) ==
    ::fidl_test_protocols::Transitional::RequestResponse::PrimarySize);
static_assert(offsetof(::fidl_test_protocols::Transitional::RequestResponse,
                       y) == 16);

template <>
struct IsFidlType<::fidl_test_protocols::Transitional::OneWayRequest>
    : public std::true_type {};
template <>
struct IsFidlMessage<::fidl_test_protocols::Transitional::OneWayRequest>
    : public std::true_type {};
static_assert(sizeof(::fidl_test_protocols::Transitional::OneWayRequest) ==
              ::fidl_test_protocols::Transitional::OneWayRequest::PrimarySize);
static_assert(offsetof(::fidl_test_protocols::Transitional::OneWayRequest, x) ==
              16);

template <>
struct IsFidlType<::fidl_test_protocols::Transitional::EventResponse>
    : public std::true_type {};
template <>
struct IsFidlMessage<::fidl_test_protocols::Transitional::EventResponse>
    : public std::true_type {};
static_assert(sizeof(::fidl_test_protocols::Transitional::EventResponse) ==
              ::fidl_test_protocols::Transitional::EventResponse::PrimarySize);
static_assert(offsetof(::fidl_test_protocols::Transitional::EventResponse, x) ==
              16);

template <>
struct IsFidlType<::fidl_test_protocols::ChannelProtocol::MethodARequest>
    : public std::true_type {};
template <>
struct IsFidlMessage<::fidl_test_protocols::ChannelProtocol::MethodARequest>
    : public std::true_type {};
static_assert(
    sizeof(::fidl_test_protocols::ChannelProtocol::MethodARequest) ==
    ::fidl_test_protocols::ChannelProtocol::MethodARequest::PrimarySize);
static_assert(offsetof(::fidl_test_protocols::ChannelProtocol::MethodARequest,
                       a) == 16);
static_assert(offsetof(::fidl_test_protocols::ChannelProtocol::MethodARequest,
                       b) == 24);

template <>
struct IsFidlType<::fidl_test_protocols::ChannelProtocol::EventAResponse>
    : public std::true_type {};
template <>
struct IsFidlMessage<::fidl_test_protocols::ChannelProtocol::EventAResponse>
    : public std::true_type {};
static_assert(
    sizeof(::fidl_test_protocols::ChannelProtocol::EventAResponse) ==
    ::fidl_test_protocols::ChannelProtocol::EventAResponse::PrimarySize);
static_assert(offsetof(::fidl_test_protocols::ChannelProtocol::EventAResponse,
                       a) == 16);
static_assert(offsetof(::fidl_test_protocols::ChannelProtocol::EventAResponse,
                       b) == 24);

template <>
struct IsFidlType<::fidl_test_protocols::ChannelProtocol::MethodBRequest>
    : public std::true_type {};
template <>
struct IsFidlMessage<::fidl_test_protocols::ChannelProtocol::MethodBRequest>
    : public std::true_type {};
static_assert(
    sizeof(::fidl_test_protocols::ChannelProtocol::MethodBRequest) ==
    ::fidl_test_protocols::ChannelProtocol::MethodBRequest::PrimarySize);
static_assert(offsetof(::fidl_test_protocols::ChannelProtocol::MethodBRequest,
                       a) == 16);
static_assert(offsetof(::fidl_test_protocols::ChannelProtocol::MethodBRequest,
                       b) == 24);

template <>
struct IsFidlType<::fidl_test_protocols::ChannelProtocol::MethodBResponse>
    : public std::true_type {};
template <>
struct IsFidlMessage<::fidl_test_protocols::ChannelProtocol::MethodBResponse>
    : public std::true_type {};
static_assert(
    sizeof(::fidl_test_protocols::ChannelProtocol::MethodBResponse) ==
    ::fidl_test_protocols::ChannelProtocol::MethodBResponse::PrimarySize);
static_assert(offsetof(::fidl_test_protocols::ChannelProtocol::MethodBResponse,
                       result) == 16);

template <>
struct IsFidlType<::fidl_test_protocols::ChannelProtocol::TakeHandleRequest>
    : public std::true_type {};
template <>
struct IsFidlMessage<::fidl_test_protocols::ChannelProtocol::TakeHandleRequest>
    : public std::true_type {};
static_assert(
    sizeof(::fidl_test_protocols::ChannelProtocol::TakeHandleRequest) ==
    ::fidl_test_protocols::ChannelProtocol::TakeHandleRequest::PrimarySize);
static_assert(
    offsetof(::fidl_test_protocols::ChannelProtocol::TakeHandleRequest, h) ==
    16);

template <>
struct IsFidlType<::fidl_test_protocols::ChannelProtocol::TakeHandleResponse>
    : public std::true_type {};
template <>
struct IsFidlMessage<::fidl_test_protocols::ChannelProtocol::TakeHandleResponse>
    : public std::true_type {};
static_assert(
    sizeof(::fidl_test_protocols::ChannelProtocol::TakeHandleResponse) ==
    ::fidl_test_protocols::ChannelProtocol::TakeHandleResponse::PrimarySize);

template <>
struct IsFidlType<::fidl_test_protocols::ChannelProtocol::MutateSocketRequest>
    : public std::true_type {};
template <>
struct IsFidlMessage<
    ::fidl_test_protocols::ChannelProtocol::MutateSocketRequest>
    : public std::true_type {};
static_assert(
    sizeof(::fidl_test_protocols::ChannelProtocol::MutateSocketRequest) ==
    ::fidl_test_protocols::ChannelProtocol::MutateSocketRequest::PrimarySize);
static_assert(
    offsetof(::fidl_test_protocols::ChannelProtocol::MutateSocketRequest, a) ==
    16);

template <>
struct IsFidlType<::fidl_test_protocols::ChannelProtocol::MutateSocketResponse>
    : public std::true_type {};
template <>
struct IsFidlMessage<
    ::fidl_test_protocols::ChannelProtocol::MutateSocketResponse>
    : public std::true_type {};
static_assert(
    sizeof(::fidl_test_protocols::ChannelProtocol::MutateSocketResponse) ==
    ::fidl_test_protocols::ChannelProtocol::MutateSocketResponse::PrimarySize);
static_assert(
    offsetof(::fidl_test_protocols::ChannelProtocol::MutateSocketResponse, b) ==
    16);

template <>
struct IsFidlType<::fidl_test_protocols::WithAndWithoutRequestResponse::
                      NoRequestNoResponseRequest> : public std::true_type {};
template <>
struct IsFidlMessage<::fidl_test_protocols::WithAndWithoutRequestResponse::
                         NoRequestNoResponseRequest> : public std::true_type {};
static_assert(sizeof(::fidl_test_protocols::WithAndWithoutRequestResponse::
                         NoRequestNoResponseRequest) ==
              ::fidl_test_protocols::WithAndWithoutRequestResponse::
                  NoRequestNoResponseRequest::PrimarySize);

template <>
struct IsFidlType<::fidl_test_protocols::WithAndWithoutRequestResponse::
                      NoRequestEmptyResponseRequest> : public std::true_type {};
template <>
struct IsFidlMessage<::fidl_test_protocols::WithAndWithoutRequestResponse::
                         NoRequestEmptyResponseRequest>
    : public std::true_type {};
static_assert(sizeof(::fidl_test_protocols::WithAndWithoutRequestResponse::
                         NoRequestEmptyResponseRequest) ==
              ::fidl_test_protocols::WithAndWithoutRequestResponse::
                  NoRequestEmptyResponseRequest::PrimarySize);

template <>
struct IsFidlType<::fidl_test_protocols::WithAndWithoutRequestResponse::
                      NoRequestEmptyResponseResponse> : public std::true_type {
};
template <>
struct IsFidlMessage<::fidl_test_protocols::WithAndWithoutRequestResponse::
                         NoRequestEmptyResponseResponse>
    : public std::true_type {};
static_assert(sizeof(::fidl_test_protocols::WithAndWithoutRequestResponse::
                         NoRequestEmptyResponseResponse) ==
              ::fidl_test_protocols::WithAndWithoutRequestResponse::
                  NoRequestEmptyResponseResponse::PrimarySize);

template <>
struct IsFidlType<::fidl_test_protocols::WithAndWithoutRequestResponse::
                      NoRequestWithResponseRequest> : public std::true_type {};
template <>
struct IsFidlMessage<::fidl_test_protocols::WithAndWithoutRequestResponse::
                         NoRequestWithResponseRequest> : public std::true_type {
};
static_assert(sizeof(::fidl_test_protocols::WithAndWithoutRequestResponse::
                         NoRequestWithResponseRequest) ==
              ::fidl_test_protocols::WithAndWithoutRequestResponse::
                  NoRequestWithResponseRequest::PrimarySize);

template <>
struct IsFidlType<::fidl_test_protocols::WithAndWithoutRequestResponse::
                      NoRequestWithResponseResponse> : public std::true_type {};
template <>
struct IsFidlMessage<::fidl_test_protocols::WithAndWithoutRequestResponse::
                         NoRequestWithResponseResponse>
    : public std::true_type {};
static_assert(sizeof(::fidl_test_protocols::WithAndWithoutRequestResponse::
                         NoRequestWithResponseResponse) ==
              ::fidl_test_protocols::WithAndWithoutRequestResponse::
                  NoRequestWithResponseResponse::PrimarySize);
static_assert(offsetof(::fidl_test_protocols::WithAndWithoutRequestResponse::
                           NoRequestWithResponseResponse,
                       ret) == 16);

template <>
struct IsFidlType<::fidl_test_protocols::WithAndWithoutRequestResponse::
                      WithRequestNoResponseRequest> : public std::true_type {};
template <>
struct IsFidlMessage<::fidl_test_protocols::WithAndWithoutRequestResponse::
                         WithRequestNoResponseRequest> : public std::true_type {
};
static_assert(sizeof(::fidl_test_protocols::WithAndWithoutRequestResponse::
                         WithRequestNoResponseRequest) ==
              ::fidl_test_protocols::WithAndWithoutRequestResponse::
                  WithRequestNoResponseRequest::PrimarySize);
static_assert(offsetof(::fidl_test_protocols::WithAndWithoutRequestResponse::
                           WithRequestNoResponseRequest,
                       arg) == 16);

template <>
struct IsFidlType<::fidl_test_protocols::WithAndWithoutRequestResponse::
                      WithRequestEmptyResponseRequest> : public std::true_type {
};
template <>
struct IsFidlMessage<::fidl_test_protocols::WithAndWithoutRequestResponse::
                         WithRequestEmptyResponseRequest>
    : public std::true_type {};
static_assert(sizeof(::fidl_test_protocols::WithAndWithoutRequestResponse::
                         WithRequestEmptyResponseRequest) ==
              ::fidl_test_protocols::WithAndWithoutRequestResponse::
                  WithRequestEmptyResponseRequest::PrimarySize);
static_assert(offsetof(::fidl_test_protocols::WithAndWithoutRequestResponse::
                           WithRequestEmptyResponseRequest,
                       arg) == 16);

template <>
struct IsFidlType<::fidl_test_protocols::WithAndWithoutRequestResponse::
                      WithRequestEmptyResponseResponse>
    : public std::true_type {};
template <>
struct IsFidlMessage<::fidl_test_protocols::WithAndWithoutRequestResponse::
                         WithRequestEmptyResponseResponse>
    : public std::true_type {};
static_assert(sizeof(::fidl_test_protocols::WithAndWithoutRequestResponse::
                         WithRequestEmptyResponseResponse) ==
              ::fidl_test_protocols::WithAndWithoutRequestResponse::
                  WithRequestEmptyResponseResponse::PrimarySize);

template <>
struct IsFidlType<::fidl_test_protocols::WithAndWithoutRequestResponse::
                      WithRequestWithResponseRequest> : public std::true_type {
};
template <>
struct IsFidlMessage<::fidl_test_protocols::WithAndWithoutRequestResponse::
                         WithRequestWithResponseRequest>
    : public std::true_type {};
static_assert(sizeof(::fidl_test_protocols::WithAndWithoutRequestResponse::
                         WithRequestWithResponseRequest) ==
              ::fidl_test_protocols::WithAndWithoutRequestResponse::
                  WithRequestWithResponseRequest::PrimarySize);
static_assert(offsetof(::fidl_test_protocols::WithAndWithoutRequestResponse::
                           WithRequestWithResponseRequest,
                       arg) == 16);

template <>
struct IsFidlType<::fidl_test_protocols::WithAndWithoutRequestResponse::
                      WithRequestWithResponseResponse> : public std::true_type {
};
template <>
struct IsFidlMessage<::fidl_test_protocols::WithAndWithoutRequestResponse::
                         WithRequestWithResponseResponse>
    : public std::true_type {};
static_assert(sizeof(::fidl_test_protocols::WithAndWithoutRequestResponse::
                         WithRequestWithResponseResponse) ==
              ::fidl_test_protocols::WithAndWithoutRequestResponse::
                  WithRequestWithResponseResponse::PrimarySize);
static_assert(offsetof(::fidl_test_protocols::WithAndWithoutRequestResponse::
                           WithRequestWithResponseResponse,
                       ret) == 16);

template <>
struct IsFidlType<::fidl_test_protocols::WithAndWithoutRequestResponse::
                      OnEmptyResponseResponse> : public std::true_type {};
template <>
struct IsFidlMessage<::fidl_test_protocols::WithAndWithoutRequestResponse::
                         OnEmptyResponseResponse> : public std::true_type {};
static_assert(sizeof(::fidl_test_protocols::WithAndWithoutRequestResponse::
                         OnEmptyResponseResponse) ==
              ::fidl_test_protocols::WithAndWithoutRequestResponse::
                  OnEmptyResponseResponse::PrimarySize);

template <>
struct IsFidlType<::fidl_test_protocols::WithAndWithoutRequestResponse::
                      OnWithResponseResponse> : public std::true_type {};
template <>
struct IsFidlMessage<::fidl_test_protocols::WithAndWithoutRequestResponse::
                         OnWithResponseResponse> : public std::true_type {};
static_assert(sizeof(::fidl_test_protocols::WithAndWithoutRequestResponse::
                         OnWithResponseResponse) ==
              ::fidl_test_protocols::WithAndWithoutRequestResponse::
                  OnWithResponseResponse::PrimarySize);
static_assert(offsetof(::fidl_test_protocols::WithAndWithoutRequestResponse::
                           OnWithResponseResponse,
                       ret) == 16);

template <>
struct IsFidlType<::fidl_test_protocols::wire::ErrorEnun>
    : public std::true_type {};

template <>
struct IsFidlType<
    ::fidl_test_protocols::wire::WithErrorSyntax_ErrorAsEnum_Result>
    : public std::true_type {};
template <>
struct IsUnion<::fidl_test_protocols::wire::WithErrorSyntax_ErrorAsEnum_Result>
    : public std::true_type {};
static_assert(std::is_standard_layout_v<
              ::fidl_test_protocols::wire::WithErrorSyntax_ErrorAsEnum_Result>);

template <>
struct IsFidlType<
    ::fidl_test_protocols::WithErrorSyntax::ResponseAsStructRequest>
    : public std::true_type {};
template <>
struct IsFidlMessage<
    ::fidl_test_protocols::WithErrorSyntax::ResponseAsStructRequest>
    : public std::true_type {};
static_assert(
    sizeof(::fidl_test_protocols::WithErrorSyntax::ResponseAsStructRequest) ==
    ::fidl_test_protocols::WithErrorSyntax::ResponseAsStructRequest::
        PrimarySize);

template <>
struct IsFidlType<
    ::fidl_test_protocols::WithErrorSyntax::ResponseAsStructResponse>
    : public std::true_type {};
template <>
struct IsFidlMessage<
    ::fidl_test_protocols::WithErrorSyntax::ResponseAsStructResponse>
    : public std::true_type {};
static_assert(
    sizeof(::fidl_test_protocols::WithErrorSyntax::ResponseAsStructResponse) ==
    ::fidl_test_protocols::WithErrorSyntax::ResponseAsStructResponse::
        PrimarySize);
static_assert(
    offsetof(::fidl_test_protocols::WithErrorSyntax::ResponseAsStructResponse,
             result) == 16);

template <>
struct IsFidlType<
    ::fidl_test_protocols::WithErrorSyntax::ErrorAsPrimitiveRequest>
    : public std::true_type {};
template <>
struct IsFidlMessage<
    ::fidl_test_protocols::WithErrorSyntax::ErrorAsPrimitiveRequest>
    : public std::true_type {};
static_assert(
    sizeof(::fidl_test_protocols::WithErrorSyntax::ErrorAsPrimitiveRequest) ==
    ::fidl_test_protocols::WithErrorSyntax::ErrorAsPrimitiveRequest::
        PrimarySize);

template <>
struct IsFidlType<
    ::fidl_test_protocols::WithErrorSyntax::ErrorAsPrimitiveResponse>
    : public std::true_type {};
template <>
struct IsFidlMessage<
    ::fidl_test_protocols::WithErrorSyntax::ErrorAsPrimitiveResponse>
    : public std::true_type {};
static_assert(
    sizeof(::fidl_test_protocols::WithErrorSyntax::ErrorAsPrimitiveResponse) ==
    ::fidl_test_protocols::WithErrorSyntax::ErrorAsPrimitiveResponse::
        PrimarySize);
static_assert(
    offsetof(::fidl_test_protocols::WithErrorSyntax::ErrorAsPrimitiveResponse,
             result) == 16);

template <>
struct IsFidlType<::fidl_test_protocols::WithErrorSyntax::ErrorAsEnumRequest>
    : public std::true_type {};
template <>
struct IsFidlMessage<::fidl_test_protocols::WithErrorSyntax::ErrorAsEnumRequest>
    : public std::true_type {};
static_assert(
    sizeof(::fidl_test_protocols::WithErrorSyntax::ErrorAsEnumRequest) ==
    ::fidl_test_protocols::WithErrorSyntax::ErrorAsEnumRequest::PrimarySize);

template <>
struct IsFidlType<::fidl_test_protocols::WithErrorSyntax::ErrorAsEnumResponse>
    : public std::true_type {};
template <>
struct IsFidlMessage<
    ::fidl_test_protocols::WithErrorSyntax::ErrorAsEnumResponse>
    : public std::true_type {};
static_assert(
    sizeof(::fidl_test_protocols::WithErrorSyntax::ErrorAsEnumResponse) ==
    ::fidl_test_protocols::WithErrorSyntax::ErrorAsEnumResponse::PrimarySize);
static_assert(
    offsetof(::fidl_test_protocols::WithErrorSyntax::ErrorAsEnumResponse,
             result) == 16);
}  // namespace fidl
namespace fidl_test_protocols {

#ifdef __Fuchsia__
}  // namespace fidl_test_protocols
template <>
class ::fidl::WireAsyncEventHandler<::fidl_test_protocols::Transitional>
    : public ::fidl_test_protocols::Transitional::EventHandlerInterface {
 public:
  WireAsyncEventHandler() = default;

  virtual void Unbound(::fidl::UnbindInfo info) {}
};
namespace fidl_test_protocols {

class ::fidl_test_protocols::Transitional::RequestResponseContext
    : public ::fidl::internal::ResponseContext {
 public:
  RequestResponseContext();

  virtual void OnReply(
      ::fidl_test_protocols::Transitional::RequestResponse* message) = 0;

 private:
  void OnReply(uint8_t* reply) override;
};
}  // namespace fidl_test_protocols
template <>
class ::fidl::internal::WireClientImpl<::fidl_test_protocols::Transitional>
    final : private ::fidl::internal::ClientBase {
 public:
  // Asynchronous variant of |Transitional.Request()|.
  // Allocates 24 bytes of request buffer on the stack. The callback is stored
  // on the heap.
  ::fidl::Result Request(
      int64_t x,
      ::fit::callback<
          void(::fidl_test_protocols::Transitional::RequestResponse* response)>
          _cb);

  // Asynchronous variant of |Transitional.Request()|.
  // Caller provides the backing storage for FIDL message via request buffer.
  // Ownership of |_context| is given unsafely to the binding until |OnError|
  // or |OnReply| are called on it.
  ::fidl::Result Request(
      ::fidl::BufferSpan _request_buffer, int64_t x,
      ::fidl_test_protocols::Transitional::RequestResponseContext* _context);

  // Synchronous variant of |Transitional.Request()|.
  // Allocates 48 bytes of message buffer on the stack. No heap allocation
  // necessary.
  ::fidl_test_protocols::Transitional::ResultOf::Request Request_Sync(
      int64_t x);

  // Synchronous variant of |Transitional.Request()|.
  // Caller provides the backing storage for FIDL message via request and
  // response buffers.
  ::fidl_test_protocols::Transitional::UnownedResultOf::Request Request_Sync(
      ::fidl::BufferSpan _request_buffer, int64_t x,
      ::fidl::BufferSpan _response_buffer);

  // Allocates 24 bytes of message buffer on the stack. No heap allocation
  // necessary.
  ::fidl::Result OneWay(int64_t x);

  // Caller provides the backing storage for FIDL message via request buffer.
  ::fidl::Result OneWay(::fidl::BufferSpan _request_buffer, int64_t x);

  ::fidl::WireAsyncEventHandler<::fidl_test_protocols::Transitional>*
  event_handler() const {
    return event_handler_.get();
  }

 private:
  friend class ::fidl::Client<::fidl_test_protocols::Transitional>;
  friend class ::fidl::internal::ControlBlock<
      ::fidl_test_protocols::Transitional>;

  explicit WireClientImpl(
      std::shared_ptr<
          ::fidl::WireAsyncEventHandler<::fidl_test_protocols::Transitional>>
          event_handler)
      : event_handler_(std::move(event_handler)) {}

  std::optional<::fidl::UnbindInfo> DispatchEvent(
      fidl_incoming_msg_t* msg) override;

  std::shared_ptr<
      ::fidl::WireAsyncEventHandler<::fidl_test_protocols::Transitional>>
      event_handler_;
};
namespace fidl_test_protocols {
#endif

}  // namespace fidl_test_protocols
#ifdef __Fuchsia__
// |EventSender| owns a server endpoint of a channel speaking
// the Transitional protocol, and can send events in that protocol.
template <>
class ::fidl::WireEventSender<::fidl_test_protocols::Transitional> {
 public:
  // Constructs an event sender with an invalid channel.
  WireEventSender() = default;

  explicit WireEventSender(
      ::fidl::ServerEnd<::fidl_test_protocols::Transitional> server_end)
      : server_end_(std::move(server_end)) {}

  // The underlying server channel endpoint, which may be replaced at run-time.
  const ::fidl::ServerEnd<::fidl_test_protocols::Transitional>& server_end()
      const {
    return server_end_;
  }
  ::fidl::ServerEnd<::fidl_test_protocols::Transitional>& server_end() {
    return server_end_;
  }

  const ::zx::channel& channel() const { return server_end_.channel(); }
  ::zx::channel& channel() { return server_end_.channel(); }

  // Whether the underlying channel is valid.
  bool is_valid() const { return server_end_.is_valid(); }

  zx_status_t Event(int64_t x) const;

  // Caller provides the backing storage for FIDL message via response buffers.
  zx_status_t Event(::fidl::BufferSpan _buffer, int64_t x) const;

 private:
  ::fidl::ServerEnd<::fidl_test_protocols::Transitional> server_end_;
};

template <>
class ::fidl::internal::WireWeakEventSender<
    ::fidl_test_protocols::Transitional> {
 public:
  zx_status_t Event(int64_t x) const {
    if (auto _binding = binding_.lock()) {
      return _binding->event_sender().Event(std::move(x));
    }
    return ZX_ERR_CANCELED;
  }

  // Caller provides the backing storage for FIDL message via response buffers.
  zx_status_t Event(::fidl::BufferSpan _buffer, int64_t x) const {
    if (auto _binding = binding_.lock()) {
      return _binding->event_sender().Event(std::move(_buffer), std::move(x));
    }
    return ZX_ERR_CANCELED;
  }

 private:
  friend class ::fidl::ServerBindingRef<::fidl_test_protocols::Transitional>;

  explicit WireWeakEventSender(
      std::weak_ptr<::fidl::internal::AsyncServerBinding<
          ::fidl_test_protocols::Transitional>>
          binding)
      : binding_(std::move(binding)) {}

  std::weak_ptr<
      ::fidl::internal::AsyncServerBinding<::fidl_test_protocols::Transitional>>
      binding_;
};
#endif

namespace fidl_test_protocols {

#ifdef __Fuchsia__
}  // namespace fidl_test_protocols
template <>
class ::fidl::WireAsyncEventHandler<::fidl_test_protocols::ChannelProtocol>
    : public ::fidl_test_protocols::ChannelProtocol::EventHandlerInterface {
 public:
  WireAsyncEventHandler() = default;

  virtual void Unbound(::fidl::UnbindInfo info) {}
};
namespace fidl_test_protocols {

class ::fidl_test_protocols::ChannelProtocol::MethodBResponseContext
    : public ::fidl::internal::ResponseContext {
 public:
  MethodBResponseContext();

  virtual void OnReply(
      ::fidl_test_protocols::ChannelProtocol::MethodBResponse* message) = 0;

 private:
  void OnReply(uint8_t* reply) override;
};

class ::fidl_test_protocols::ChannelProtocol::TakeHandleResponseContext
    : public ::fidl::internal::ResponseContext {
 public:
  TakeHandleResponseContext();

  virtual void OnReply(
      ::fidl_test_protocols::ChannelProtocol::TakeHandleResponse* message) = 0;

 private:
  void OnReply(uint8_t* reply) override;
};

class ::fidl_test_protocols::ChannelProtocol::MutateSocketResponseContext
    : public ::fidl::internal::ResponseContext {
 public:
  MutateSocketResponseContext();

  virtual void OnReply(
      ::fidl_test_protocols::ChannelProtocol::MutateSocketResponse*
          message) = 0;

 private:
  void OnReply(uint8_t* reply) override;
};
}  // namespace fidl_test_protocols
template <>
class ::fidl::internal::WireClientImpl<::fidl_test_protocols::ChannelProtocol>
    final : private ::fidl::internal::ClientBase {
 public:
  // Asynchronous variant of |ChannelProtocol.MethodB()|.
  // Allocates 32 bytes of request buffer on the stack. The callback is stored
  // on the heap.
  ::fidl::Result MethodB(
      int64_t a, int64_t b,
      ::fit::callback<void(
          ::fidl_test_protocols::ChannelProtocol::MethodBResponse* response)>
          _cb);

  // Asynchronous variant of |ChannelProtocol.MethodB()|.
  // Caller provides the backing storage for FIDL message via request buffer.
  // Ownership of |_context| is given unsafely to the binding until |OnError|
  // or |OnReply| are called on it.
  ::fidl::Result MethodB(
      ::fidl::BufferSpan _request_buffer, int64_t a, int64_t b,
      ::fidl_test_protocols::ChannelProtocol::MethodBResponseContext* _context);

  // Synchronous variant of |ChannelProtocol.MethodB()|.
  // Allocates 56 bytes of message buffer on the stack. No heap allocation
  // necessary.
  ::fidl_test_protocols::ChannelProtocol::ResultOf::MethodB MethodB_Sync(
      int64_t a, int64_t b);

  // Synchronous variant of |ChannelProtocol.MethodB()|.
  // Caller provides the backing storage for FIDL message via request and
  // response buffers.
  ::fidl_test_protocols::ChannelProtocol::UnownedResultOf::MethodB MethodB_Sync(
      ::fidl::BufferSpan _request_buffer, int64_t a, int64_t b,
      ::fidl::BufferSpan _response_buffer);

  // Asynchronous variant of |ChannelProtocol.TakeHandle()|.
  // Allocates 24 bytes of request buffer on the stack. The callback is stored
  // on the heap.
  ::fidl::Result TakeHandle(
      ::zx::handle h,
      ::fit::callback<void(
          ::fidl_test_protocols::ChannelProtocol::TakeHandleResponse* response)>
          _cb);

  // Asynchronous variant of |ChannelProtocol.TakeHandle()|.
  // Caller provides the backing storage for FIDL message via request buffer.
  // Ownership of |_context| is given unsafely to the binding until |OnError|
  // or |OnReply| are called on it.
  ::fidl::Result TakeHandle(
      ::fidl::BufferSpan _request_buffer, ::zx::handle h,
      ::fidl_test_protocols::ChannelProtocol::TakeHandleResponseContext*
          _context);

  // Synchronous variant of |ChannelProtocol.TakeHandle()|.
  // Allocates 40 bytes of message buffer on the stack. No heap allocation
  // necessary.
  ::fidl_test_protocols::ChannelProtocol::ResultOf::TakeHandle TakeHandle_Sync(
      ::zx::handle h);

  // Synchronous variant of |ChannelProtocol.TakeHandle()|.
  // Caller provides the backing storage for FIDL message via request and
  // response buffers.
  ::fidl_test_protocols::ChannelProtocol::UnownedResultOf::TakeHandle
  TakeHandle_Sync(::fidl::BufferSpan _request_buffer, ::zx::handle h,
                  ::fidl::BufferSpan _response_buffer);

  // Asynchronous variant of |ChannelProtocol.MutateSocket()|.
  // Allocates 24 bytes of request buffer on the stack. The callback is stored
  // on the heap.
  ::fidl::Result MutateSocket(
      ::zx::socket a,
      ::fit::callback<void(::fidl_test_protocols::ChannelProtocol::
                               MutateSocketResponse* response)>
          _cb);

  // Asynchronous variant of |ChannelProtocol.MutateSocket()|.
  // Caller provides the backing storage for FIDL message via request buffer.
  // Ownership of |_context| is given unsafely to the binding until |OnError|
  // or |OnReply| are called on it.
  ::fidl::Result MutateSocket(
      ::fidl::BufferSpan _request_buffer, ::zx::socket a,
      ::fidl_test_protocols::ChannelProtocol::MutateSocketResponseContext*
          _context);

  // Synchronous variant of |ChannelProtocol.MutateSocket()|.
  // Allocates 48 bytes of message buffer on the stack. No heap allocation
  // necessary.
  ::fidl_test_protocols::ChannelProtocol::ResultOf::MutateSocket
  MutateSocket_Sync(::zx::socket a);

  // Synchronous variant of |ChannelProtocol.MutateSocket()|.
  // Caller provides the backing storage for FIDL message via request and
  // response buffers.
  ::fidl_test_protocols::ChannelProtocol::UnownedResultOf::MutateSocket
  MutateSocket_Sync(::fidl::BufferSpan _request_buffer, ::zx::socket a,
                    ::fidl::BufferSpan _response_buffer);

  // Allocates 32 bytes of message buffer on the stack. No heap allocation
  // necessary.
  ::fidl::Result MethodA(int64_t a, int64_t b);

  // Caller provides the backing storage for FIDL message via request buffer.
  ::fidl::Result MethodA(::fidl::BufferSpan _request_buffer, int64_t a,
                         int64_t b);

  ::fidl::WireAsyncEventHandler<::fidl_test_protocols::ChannelProtocol>*
  event_handler() const {
    return event_handler_.get();
  }

 private:
  friend class ::fidl::Client<::fidl_test_protocols::ChannelProtocol>;
  friend class ::fidl::internal::ControlBlock<
      ::fidl_test_protocols::ChannelProtocol>;

  explicit WireClientImpl(
      std::shared_ptr<
          ::fidl::WireAsyncEventHandler<::fidl_test_protocols::ChannelProtocol>>
          event_handler)
      : event_handler_(std::move(event_handler)) {}

  std::optional<::fidl::UnbindInfo> DispatchEvent(
      fidl_incoming_msg_t* msg) override;

  std::shared_ptr<
      ::fidl::WireAsyncEventHandler<::fidl_test_protocols::ChannelProtocol>>
      event_handler_;
};
namespace fidl_test_protocols {
#endif

}  // namespace fidl_test_protocols
#ifdef __Fuchsia__
// |EventSender| owns a server endpoint of a channel speaking
// the ChannelProtocol protocol, and can send events in that protocol.
template <>
class ::fidl::WireEventSender<::fidl_test_protocols::ChannelProtocol> {
 public:
  // Constructs an event sender with an invalid channel.
  WireEventSender() = default;

  explicit WireEventSender(
      ::fidl::ServerEnd<::fidl_test_protocols::ChannelProtocol> server_end)
      : server_end_(std::move(server_end)) {}

  // The underlying server channel endpoint, which may be replaced at run-time.
  const ::fidl::ServerEnd<::fidl_test_protocols::ChannelProtocol>& server_end()
      const {
    return server_end_;
  }
  ::fidl::ServerEnd<::fidl_test_protocols::ChannelProtocol>& server_end() {
    return server_end_;
  }

  const ::zx::channel& channel() const { return server_end_.channel(); }
  ::zx::channel& channel() { return server_end_.channel(); }

  // Whether the underlying channel is valid.
  bool is_valid() const { return server_end_.is_valid(); }

  zx_status_t EventA(int64_t a, int64_t b) const;

  // Caller provides the backing storage for FIDL message via response buffers.
  zx_status_t EventA(::fidl::BufferSpan _buffer, int64_t a, int64_t b) const;

 private:
  ::fidl::ServerEnd<::fidl_test_protocols::ChannelProtocol> server_end_;
};

template <>
class ::fidl::internal::WireWeakEventSender<
    ::fidl_test_protocols::ChannelProtocol> {
 public:
  zx_status_t EventA(int64_t a, int64_t b) const {
    if (auto _binding = binding_.lock()) {
      return _binding->event_sender().EventA(std::move(a), std::move(b));
    }
    return ZX_ERR_CANCELED;
  }

  // Caller provides the backing storage for FIDL message via response buffers.
  zx_status_t EventA(::fidl::BufferSpan _buffer, int64_t a, int64_t b) const {
    if (auto _binding = binding_.lock()) {
      return _binding->event_sender().EventA(std::move(_buffer), std::move(a),
                                             std::move(b));
    }
    return ZX_ERR_CANCELED;
  }

 private:
  friend class ::fidl::ServerBindingRef<::fidl_test_protocols::ChannelProtocol>;

  explicit WireWeakEventSender(
      std::weak_ptr<::fidl::internal::AsyncServerBinding<
          ::fidl_test_protocols::ChannelProtocol>>
          binding)
      : binding_(std::move(binding)) {}

  std::weak_ptr<::fidl::internal::AsyncServerBinding<
      ::fidl_test_protocols::ChannelProtocol>>
      binding_;
};
#endif

namespace fidl_test_protocols {

#ifdef __Fuchsia__
}  // namespace fidl_test_protocols
template <>
class ::fidl::WireAsyncEventHandler<
    ::fidl_test_protocols::WithAndWithoutRequestResponse>
    : public ::fidl_test_protocols::WithAndWithoutRequestResponse::
          EventHandlerInterface {
 public:
  WireAsyncEventHandler() = default;

  virtual void Unbound(::fidl::UnbindInfo info) {}
};
namespace fidl_test_protocols {

class ::fidl_test_protocols::WithAndWithoutRequestResponse::
    NoRequestEmptyResponseResponseContext
    : public ::fidl::internal::ResponseContext {
 public:
  NoRequestEmptyResponseResponseContext();

  virtual void OnReply(::fidl_test_protocols::WithAndWithoutRequestResponse::
                           NoRequestEmptyResponseResponse* message) = 0;

 private:
  void OnReply(uint8_t* reply) override;
};

class ::fidl_test_protocols::WithAndWithoutRequestResponse::
    NoRequestWithResponseResponseContext
    : public ::fidl::internal::ResponseContext {
 public:
  NoRequestWithResponseResponseContext();

  virtual void OnReply(::fidl_test_protocols::WithAndWithoutRequestResponse::
                           NoRequestWithResponseResponse* message) = 0;

 private:
  void OnReply(uint8_t* reply) override;
};

class ::fidl_test_protocols::WithAndWithoutRequestResponse::
    WithRequestEmptyResponseResponseContext
    : public ::fidl::internal::ResponseContext {
 public:
  WithRequestEmptyResponseResponseContext();

  virtual void OnReply(::fidl_test_protocols::WithAndWithoutRequestResponse::
                           WithRequestEmptyResponseResponse* message) = 0;

 private:
  void OnReply(uint8_t* reply) override;
};

class ::fidl_test_protocols::WithAndWithoutRequestResponse::
    WithRequestWithResponseResponseContext
    : public ::fidl::internal::ResponseContext {
 public:
  WithRequestWithResponseResponseContext();

  virtual void OnReply(::fidl_test_protocols::WithAndWithoutRequestResponse::
                           WithRequestWithResponseResponse* message) = 0;

 private:
  void OnReply(uint8_t* reply) override;
};
}  // namespace fidl_test_protocols
template <>
class ::fidl::internal::WireClientImpl<
    ::fidl_test_protocols::WithAndWithoutRequestResponse>
    final : private ::fidl::internal::ClientBase {
 public:
  // Asynchronous variant of
  // |WithAndWithoutRequestResponse.NoRequestEmptyResponse()|. Allocates 16
  // bytes of request buffer on the stack. The callback is stored on the heap.
  ::fidl::Result NoRequestEmptyResponse(
      ::fit::callback<
          void(::fidl_test_protocols::WithAndWithoutRequestResponse::
                   NoRequestEmptyResponseResponse* response)>
          _cb);

  // Asynchronous variant of
  // |WithAndWithoutRequestResponse.NoRequestEmptyResponse()|. Caller provides
  // the backing storage for FIDL message via request buffer. Ownership of
  // |_context| is given unsafely to the binding until |OnError| or |OnReply|
  // are called on it.
  ::fidl::Result NoRequestEmptyResponse(
      ::fidl_test_protocols::WithAndWithoutRequestResponse::
          NoRequestEmptyResponseResponseContext* _context);

  // Synchronous variant of
  // |WithAndWithoutRequestResponse.NoRequestEmptyResponse()|. Allocates 32
  // bytes of message buffer on the stack. No heap allocation necessary.
  ::fidl_test_protocols::WithAndWithoutRequestResponse::ResultOf::
      NoRequestEmptyResponse
      NoRequestEmptyResponse_Sync();

  // Asynchronous variant of
  // |WithAndWithoutRequestResponse.NoRequestWithResponse()|. Allocates 16 bytes
  // of request buffer on the stack. The callback is stored on the heap.
  ::fidl::Result NoRequestWithResponse(
      ::fit::callback<
          void(::fidl_test_protocols::WithAndWithoutRequestResponse::
                   NoRequestWithResponseResponse* response)>
          _cb);

  // Asynchronous variant of
  // |WithAndWithoutRequestResponse.NoRequestWithResponse()|. Caller provides
  // the backing storage for FIDL message via request buffer. Ownership of
  // |_context| is given unsafely to the binding until |OnError| or |OnReply|
  // are called on it.
  ::fidl::Result NoRequestWithResponse(
      ::fidl_test_protocols::WithAndWithoutRequestResponse::
          NoRequestWithResponseResponseContext* _context);

  // Synchronous variant of
  // |WithAndWithoutRequestResponse.NoRequestWithResponse()|. Allocates 16 bytes
  // of request buffer on the stack. Response is heap-allocated.
  ::fidl_test_protocols::WithAndWithoutRequestResponse::ResultOf::
      NoRequestWithResponse
      NoRequestWithResponse_Sync();

  // Synchronous variant of
  // |WithAndWithoutRequestResponse.NoRequestWithResponse()|. Caller provides
  // the backing storage for FIDL message via request and response buffers.
  ::fidl_test_protocols::WithAndWithoutRequestResponse::UnownedResultOf::
      NoRequestWithResponse
      NoRequestWithResponse_Sync(::fidl::BufferSpan _response_buffer);

  // Asynchronous variant of
  // |WithAndWithoutRequestResponse.WithRequestEmptyResponse()|. The request and
  // callback are allocated on the heap.
  ::fidl::Result WithRequestEmptyResponse(
      ::fidl::StringView arg,
      ::fit::callback<
          void(::fidl_test_protocols::WithAndWithoutRequestResponse::
                   WithRequestEmptyResponseResponse* response)>
          _cb);

  // Asynchronous variant of
  // |WithAndWithoutRequestResponse.WithRequestEmptyResponse()|. Caller provides
  // the backing storage for FIDL message via request buffer. Ownership of
  // |_context| is given unsafely to the binding until |OnError| or |OnReply|
  // are called on it.
  ::fidl::Result WithRequestEmptyResponse(
      ::fidl::BufferSpan _request_buffer, ::fidl::StringView arg,
      ::fidl_test_protocols::WithAndWithoutRequestResponse::
          WithRequestEmptyResponseResponseContext* _context);

  // Synchronous variant of
  // |WithAndWithoutRequestResponse.WithRequestEmptyResponse()|. Allocates 16
  // bytes of response buffer on the stack. Request is heap-allocated.
  ::fidl_test_protocols::WithAndWithoutRequestResponse::ResultOf::
      WithRequestEmptyResponse
      WithRequestEmptyResponse_Sync(::fidl::StringView arg);

  // Synchronous variant of
  // |WithAndWithoutRequestResponse.WithRequestEmptyResponse()|. Caller provides
  // the backing storage for FIDL message via request and response buffers.
  ::fidl_test_protocols::WithAndWithoutRequestResponse::UnownedResultOf::
      WithRequestEmptyResponse
      WithRequestEmptyResponse_Sync(::fidl::BufferSpan _request_buffer,
                                    ::fidl::StringView arg,
                                    ::fidl::BufferSpan _response_buffer);

  // Asynchronous variant of
  // |WithAndWithoutRequestResponse.WithRequestWithResponse()|. The request and
  // callback are allocated on the heap.
  ::fidl::Result WithRequestWithResponse(
      ::fidl::StringView arg,
      ::fit::callback<
          void(::fidl_test_protocols::WithAndWithoutRequestResponse::
                   WithRequestWithResponseResponse* response)>
          _cb);

  // Asynchronous variant of
  // |WithAndWithoutRequestResponse.WithRequestWithResponse()|. Caller provides
  // the backing storage for FIDL message via request buffer. Ownership of
  // |_context| is given unsafely to the binding until |OnError| or |OnReply|
  // are called on it.
  ::fidl::Result WithRequestWithResponse(
      ::fidl::BufferSpan _request_buffer, ::fidl::StringView arg,
      ::fidl_test_protocols::WithAndWithoutRequestResponse::
          WithRequestWithResponseResponseContext* _context);

  // Synchronous variant of
  // |WithAndWithoutRequestResponse.WithRequestWithResponse()|. Request is
  // heap-allocated. Response is heap-allocated.
  ::fidl_test_protocols::WithAndWithoutRequestResponse::ResultOf::
      WithRequestWithResponse
      WithRequestWithResponse_Sync(::fidl::StringView arg);

  // Synchronous variant of
  // |WithAndWithoutRequestResponse.WithRequestWithResponse()|. Caller provides
  // the backing storage for FIDL message via request and response buffers.
  ::fidl_test_protocols::WithAndWithoutRequestResponse::UnownedResultOf::
      WithRequestWithResponse
      WithRequestWithResponse_Sync(::fidl::BufferSpan _request_buffer,
                                   ::fidl::StringView arg,
                                   ::fidl::BufferSpan _response_buffer);

  // Allocates 16 bytes of message buffer on the stack. No heap allocation
  // necessary.
  ::fidl::Result NoRequestNoResponse();

  // Request is heap-allocated.
  ::fidl::Result WithRequestNoResponse(::fidl::StringView arg);

  // Caller provides the backing storage for FIDL message via request buffer.
  ::fidl::Result WithRequestNoResponse(::fidl::BufferSpan _request_buffer,
                                       ::fidl::StringView arg);

  ::fidl::WireAsyncEventHandler<
      ::fidl_test_protocols::WithAndWithoutRequestResponse>*
  event_handler() const {
    return event_handler_.get();
  }

 private:
  friend class ::fidl::Client<
      ::fidl_test_protocols::WithAndWithoutRequestResponse>;
  friend class ::fidl::internal::ControlBlock<
      ::fidl_test_protocols::WithAndWithoutRequestResponse>;

  explicit WireClientImpl(
      std::shared_ptr<::fidl::WireAsyncEventHandler<
          ::fidl_test_protocols::WithAndWithoutRequestResponse>>
          event_handler)
      : event_handler_(std::move(event_handler)) {}

  std::optional<::fidl::UnbindInfo> DispatchEvent(
      fidl_incoming_msg_t* msg) override;

  std::shared_ptr<::fidl::WireAsyncEventHandler<
      ::fidl_test_protocols::WithAndWithoutRequestResponse>>
      event_handler_;
};
namespace fidl_test_protocols {
#endif

}  // namespace fidl_test_protocols
#ifdef __Fuchsia__
// |EventSender| owns a server endpoint of a channel speaking
// the WithAndWithoutRequestResponse protocol, and can send events in that
// protocol.
template <>
class ::fidl::WireEventSender<
    ::fidl_test_protocols::WithAndWithoutRequestResponse> {
 public:
  // Constructs an event sender with an invalid channel.
  WireEventSender() = default;

  explicit WireEventSender(
      ::fidl::ServerEnd<::fidl_test_protocols::WithAndWithoutRequestResponse>
          server_end)
      : server_end_(std::move(server_end)) {}

  // The underlying server channel endpoint, which may be replaced at run-time.
  const ::fidl::ServerEnd<::fidl_test_protocols::WithAndWithoutRequestResponse>&
  server_end() const {
    return server_end_;
  }
  ::fidl::ServerEnd<::fidl_test_protocols::WithAndWithoutRequestResponse>&
  server_end() {
    return server_end_;
  }

  const ::zx::channel& channel() const { return server_end_.channel(); }
  ::zx::channel& channel() { return server_end_.channel(); }

  // Whether the underlying channel is valid.
  bool is_valid() const { return server_end_.is_valid(); }

  zx_status_t OnEmptyResponse() const;

  zx_status_t OnWithResponse(::fidl::StringView ret) const;

  // Caller provides the backing storage for FIDL message via response buffers.
  zx_status_t OnWithResponse(::fidl::BufferSpan _buffer,
                             ::fidl::StringView ret) const;

 private:
  ::fidl::ServerEnd<::fidl_test_protocols::WithAndWithoutRequestResponse>
      server_end_;
};

template <>
class ::fidl::internal::WireWeakEventSender<
    ::fidl_test_protocols::WithAndWithoutRequestResponse> {
 public:
  zx_status_t OnEmptyResponse() const {
    if (auto _binding = binding_.lock()) {
      return _binding->event_sender().OnEmptyResponse();
    }
    return ZX_ERR_CANCELED;
  }

  zx_status_t OnWithResponse(::fidl::StringView ret) const {
    if (auto _binding = binding_.lock()) {
      return _binding->event_sender().OnWithResponse(std::move(ret));
    }
    return ZX_ERR_CANCELED;
  }

  // Caller provides the backing storage for FIDL message via response buffers.
  zx_status_t OnWithResponse(::fidl::BufferSpan _buffer,
                             ::fidl::StringView ret) const {
    if (auto _binding = binding_.lock()) {
      return _binding->event_sender().OnWithResponse(std::move(_buffer),
                                                     std::move(ret));
    }
    return ZX_ERR_CANCELED;
  }

 private:
  friend class ::fidl::ServerBindingRef<
      ::fidl_test_protocols::WithAndWithoutRequestResponse>;

  explicit WireWeakEventSender(
      std::weak_ptr<::fidl::internal::AsyncServerBinding<
          ::fidl_test_protocols::WithAndWithoutRequestResponse>>
          binding)
      : binding_(std::move(binding)) {}

  std::weak_ptr<::fidl::internal::AsyncServerBinding<
      ::fidl_test_protocols::WithAndWithoutRequestResponse>>
      binding_;
};
#endif

namespace fidl_test_protocols {

#ifdef __Fuchsia__
}  // namespace fidl_test_protocols
template <>
class ::fidl::WireAsyncEventHandler<::fidl_test_protocols::WithErrorSyntax>
    : public ::fidl_test_protocols::WithErrorSyntax::EventHandlerInterface {
 public:
  WireAsyncEventHandler() = default;

  virtual void Unbound(::fidl::UnbindInfo info) {}
};
namespace fidl_test_protocols {

class ::fidl_test_protocols::WithErrorSyntax::ResponseAsStructResponseContext
    : public ::fidl::internal::ResponseContext {
 public:
  ResponseAsStructResponseContext();

  virtual void OnReply(
      ::fidl_test_protocols::WithErrorSyntax::ResponseAsStructResponse*
          message) = 0;

 private:
  void OnReply(uint8_t* reply) override;
};

class ::fidl_test_protocols::WithErrorSyntax::ErrorAsPrimitiveResponseContext
    : public ::fidl::internal::ResponseContext {
 public:
  ErrorAsPrimitiveResponseContext();

  virtual void OnReply(
      ::fidl_test_protocols::WithErrorSyntax::ErrorAsPrimitiveResponse*
          message) = 0;

 private:
  void OnReply(uint8_t* reply) override;
};

class ::fidl_test_protocols::WithErrorSyntax::ErrorAsEnumResponseContext
    : public ::fidl::internal::ResponseContext {
 public:
  ErrorAsEnumResponseContext();

  virtual void OnReply(
      ::fidl_test_protocols::WithErrorSyntax::ErrorAsEnumResponse* message) = 0;

 private:
  void OnReply(uint8_t* reply) override;
};
}  // namespace fidl_test_protocols
template <>
class ::fidl::internal::WireClientImpl<::fidl_test_protocols::WithErrorSyntax>
    final : private ::fidl::internal::ClientBase {
 public:
  // Asynchronous variant of |WithErrorSyntax.ResponseAsStruct()|.
  // Allocates 16 bytes of request buffer on the stack. The callback is stored
  // on the heap.
  ::fidl::Result ResponseAsStruct(
      ::fit::callback<void(::fidl_test_protocols::WithErrorSyntax::
                               ResponseAsStructResponse* response)>
          _cb);

  // Asynchronous variant of |WithErrorSyntax.ResponseAsStruct()|.
  // Caller provides the backing storage for FIDL message via request buffer.
  // Ownership of |_context| is given unsafely to the binding until |OnError|
  // or |OnReply| are called on it.
  ::fidl::Result ResponseAsStruct(
      ::fidl_test_protocols::WithErrorSyntax::ResponseAsStructResponseContext*
          _context);

  // Synchronous variant of |WithErrorSyntax.ResponseAsStruct()|.
  // Allocates 80 bytes of message buffer on the stack. No heap allocation
  // necessary.
  ::fidl_test_protocols::WithErrorSyntax::ResultOf::ResponseAsStruct
  ResponseAsStruct_Sync();

  // Synchronous variant of |WithErrorSyntax.ResponseAsStruct()|.
  // Caller provides the backing storage for FIDL message via request and
  // response buffers.
  ::fidl_test_protocols::WithErrorSyntax::UnownedResultOf::ResponseAsStruct
  ResponseAsStruct_Sync(::fidl::BufferSpan _response_buffer);

  // Asynchronous variant of |WithErrorSyntax.ErrorAsPrimitive()|.
  // Allocates 16 bytes of request buffer on the stack. The callback is stored
  // on the heap.
  ::fidl::Result ErrorAsPrimitive(
      ::fit::callback<void(::fidl_test_protocols::WithErrorSyntax::
                               ErrorAsPrimitiveResponse* response)>
          _cb);

  // Asynchronous variant of |WithErrorSyntax.ErrorAsPrimitive()|.
  // Caller provides the backing storage for FIDL message via request buffer.
  // Ownership of |_context| is given unsafely to the binding until |OnError|
  // or |OnReply| are called on it.
  ::fidl::Result ErrorAsPrimitive(
      ::fidl_test_protocols::WithErrorSyntax::ErrorAsPrimitiveResponseContext*
          _context);

  // Synchronous variant of |WithErrorSyntax.ErrorAsPrimitive()|.
  // Allocates 64 bytes of message buffer on the stack. No heap allocation
  // necessary.
  ::fidl_test_protocols::WithErrorSyntax::ResultOf::ErrorAsPrimitive
  ErrorAsPrimitive_Sync();

  // Synchronous variant of |WithErrorSyntax.ErrorAsPrimitive()|.
  // Caller provides the backing storage for FIDL message via request and
  // response buffers.
  ::fidl_test_protocols::WithErrorSyntax::UnownedResultOf::ErrorAsPrimitive
  ErrorAsPrimitive_Sync(::fidl::BufferSpan _response_buffer);

  // Asynchronous variant of |WithErrorSyntax.ErrorAsEnum()|.
  // Allocates 16 bytes of request buffer on the stack. The callback is stored
  // on the heap.
  ::fidl::Result ErrorAsEnum(
      ::fit::callback<void(::fidl_test_protocols::WithErrorSyntax::
                               ErrorAsEnumResponse* response)>
          _cb);

  // Asynchronous variant of |WithErrorSyntax.ErrorAsEnum()|.
  // Caller provides the backing storage for FIDL message via request buffer.
  // Ownership of |_context| is given unsafely to the binding until |OnError|
  // or |OnReply| are called on it.
  ::fidl::Result ErrorAsEnum(
      ::fidl_test_protocols::WithErrorSyntax::ErrorAsEnumResponseContext*
          _context);

  // Synchronous variant of |WithErrorSyntax.ErrorAsEnum()|.
  // Allocates 64 bytes of message buffer on the stack. No heap allocation
  // necessary.
  ::fidl_test_protocols::WithErrorSyntax::ResultOf::ErrorAsEnum
  ErrorAsEnum_Sync();

  // Synchronous variant of |WithErrorSyntax.ErrorAsEnum()|.
  // Caller provides the backing storage for FIDL message via request and
  // response buffers.
  ::fidl_test_protocols::WithErrorSyntax::UnownedResultOf::ErrorAsEnum
  ErrorAsEnum_Sync(::fidl::BufferSpan _response_buffer);

  ::fidl::WireAsyncEventHandler<::fidl_test_protocols::WithErrorSyntax>*
  event_handler() const {
    return event_handler_.get();
  }

 private:
  friend class ::fidl::Client<::fidl_test_protocols::WithErrorSyntax>;
  friend class ::fidl::internal::ControlBlock<
      ::fidl_test_protocols::WithErrorSyntax>;

  explicit WireClientImpl(
      std::shared_ptr<
          ::fidl::WireAsyncEventHandler<::fidl_test_protocols::WithErrorSyntax>>
          event_handler)
      : event_handler_(std::move(event_handler)) {}

  std::optional<::fidl::UnbindInfo> DispatchEvent(
      fidl_incoming_msg_t* msg) override;

  std::shared_ptr<
      ::fidl::WireAsyncEventHandler<::fidl_test_protocols::WithErrorSyntax>>
      event_handler_;
};
namespace fidl_test_protocols {
#endif

}  // namespace fidl_test_protocols
#ifdef __Fuchsia__
// |EventSender| owns a server endpoint of a channel speaking
// the WithErrorSyntax protocol, and can send events in that protocol.
template <>
class ::fidl::WireEventSender<::fidl_test_protocols::WithErrorSyntax> {
 public:
  // Constructs an event sender with an invalid channel.
  WireEventSender() = default;

  explicit WireEventSender(
      ::fidl::ServerEnd<::fidl_test_protocols::WithErrorSyntax> server_end)
      : server_end_(std::move(server_end)) {}

  // The underlying server channel endpoint, which may be replaced at run-time.
  const ::fidl::ServerEnd<::fidl_test_protocols::WithErrorSyntax>& server_end()
      const {
    return server_end_;
  }
  ::fidl::ServerEnd<::fidl_test_protocols::WithErrorSyntax>& server_end() {
    return server_end_;
  }

  const ::zx::channel& channel() const { return server_end_.channel(); }
  ::zx::channel& channel() { return server_end_.channel(); }

  // Whether the underlying channel is valid.
  bool is_valid() const { return server_end_.is_valid(); }

 private:
  ::fidl::ServerEnd<::fidl_test_protocols::WithErrorSyntax> server_end_;
};

template <>
class ::fidl::internal::WireWeakEventSender<
    ::fidl_test_protocols::WithErrorSyntax> {
 public:
 private:
  friend class ::fidl::ServerBindingRef<::fidl_test_protocols::WithErrorSyntax>;

  explicit WireWeakEventSender(
      std::weak_ptr<::fidl::internal::AsyncServerBinding<
          ::fidl_test_protocols::WithErrorSyntax>>
          binding)
      : binding_(std::move(binding)) {}

  std::weak_ptr<::fidl::internal::AsyncServerBinding<
      ::fidl_test_protocols::WithErrorSyntax>>
      binding_;
};
#endif
