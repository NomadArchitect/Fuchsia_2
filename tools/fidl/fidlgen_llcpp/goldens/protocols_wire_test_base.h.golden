// WARNING: This file is machine generated by fidlgen.

#pragma once

#include <fidl/test.protocols/cpp/wire.h>
namespace fidl {
namespace testing {

template <>
class WireTestBase<::test_protocols::HandleRightsProtocol>
    : public ::fidl::WireServer<::test_protocols::HandleRightsProtocol> {
 public:
  virtual ~WireTestBase<::test_protocols::HandleRightsProtocol>() {}
  virtual void NotImplemented_(const std::string& name,
                               ::fidl::CompleterBase& completer) = 0;
  virtual void NoResponseMethod(
      NoResponseMethodRequestView request,
      NoResponseMethodCompleter::Sync& _completer) override {
    NotImplemented_("NoResponseMethod", _completer);
  }
  virtual void ResponseMethod(
      ResponseMethodRequestView request,
      ResponseMethodCompleter::Sync& _completer) override {
    NotImplemented_("ResponseMethod", _completer);
  }
};

}  // namespace testing
}  // namespace fidl
namespace test_protocols {
namespace testing {
using HandleRightsProtocol_TestBase =
    ::fidl::testing::WireTestBase<::test_protocols::HandleRightsProtocol>;

}  // namespace testing
}  // namespace test_protocols
namespace fidl {
namespace testing {

template <>
class WireTestBase<::test_protocols::WithAndWithoutRequestResponse>
    : public ::fidl::WireServer<
          ::test_protocols::WithAndWithoutRequestResponse> {
 public:
  virtual ~WireTestBase<::test_protocols::WithAndWithoutRequestResponse>() {}
  virtual void NotImplemented_(const std::string& name,
                               ::fidl::CompleterBase& completer) = 0;
  virtual void NoRequestNoResponse(
      NoRequestNoResponseRequestView request,
      NoRequestNoResponseCompleter::Sync& _completer) override {
    NotImplemented_("NoRequestNoResponse", _completer);
  }
  virtual void NoRequestEmptyResponse(
      NoRequestEmptyResponseRequestView request,
      NoRequestEmptyResponseCompleter::Sync& _completer) override {
    NotImplemented_("NoRequestEmptyResponse", _completer);
  }
  virtual void NoRequestWithResponse(
      NoRequestWithResponseRequestView request,
      NoRequestWithResponseCompleter::Sync& _completer) override {
    NotImplemented_("NoRequestWithResponse", _completer);
  }
  virtual void WithRequestNoResponse(
      WithRequestNoResponseRequestView request,
      WithRequestNoResponseCompleter::Sync& _completer) override {
    NotImplemented_("WithRequestNoResponse", _completer);
  }
  virtual void WithRequestEmptyResponse(
      WithRequestEmptyResponseRequestView request,
      WithRequestEmptyResponseCompleter::Sync& _completer) override {
    NotImplemented_("WithRequestEmptyResponse", _completer);
  }
  virtual void WithRequestWithResponse(
      WithRequestWithResponseRequestView request,
      WithRequestWithResponseCompleter::Sync& _completer) override {
    NotImplemented_("WithRequestWithResponse", _completer);
  }
};

}  // namespace testing
}  // namespace fidl
namespace test_protocols {
namespace testing {
using WithAndWithoutRequestResponse_TestBase = ::fidl::testing::WireTestBase<
    ::test_protocols::WithAndWithoutRequestResponse>;

}  // namespace testing
}  // namespace test_protocols
namespace fidl {
namespace testing {

template <>
class WireTestBase<::test_protocols::Transitional>
    : public ::fidl::WireServer<::test_protocols::Transitional> {
 public:
  virtual ~WireTestBase<::test_protocols::Transitional>() {}
  virtual void NotImplemented_(const std::string& name,
                               ::fidl::CompleterBase& completer) = 0;
  virtual void Request(RequestRequestView request,
                       RequestCompleter::Sync& _completer) override {
    NotImplemented_("Request", _completer);
  }
  virtual void OneWay(OneWayRequestView request,
                      OneWayCompleter::Sync& _completer) override {
    NotImplemented_("OneWay", _completer);
  }
};

}  // namespace testing
}  // namespace fidl
namespace test_protocols {
namespace testing {
using Transitional_TestBase =
    ::fidl::testing::WireTestBase<::test_protocols::Transitional>;

}  // namespace testing
}  // namespace test_protocols
namespace fidl {
namespace testing {

template <>
class WireTestBase<::test_protocols::MethodWithUnion>
    : public ::fidl::WireServer<::test_protocols::MethodWithUnion> {
 public:
  virtual ~WireTestBase<::test_protocols::MethodWithUnion>() {}
  virtual void NotImplemented_(const std::string& name,
                               ::fidl::CompleterBase& completer) = 0;
  virtual void UnionMethod(UnionMethodRequestView request,
                           UnionMethodCompleter::Sync& _completer) override {
    NotImplemented_("UnionMethod", _completer);
  }
};

}  // namespace testing
}  // namespace fidl
namespace test_protocols {
namespace testing {
using MethodWithUnion_TestBase =
    ::fidl::testing::WireTestBase<::test_protocols::MethodWithUnion>;

}  // namespace testing
}  // namespace test_protocols
namespace fidl {
namespace testing {

template <>
class WireTestBase<::test_protocols::WithProtocolEnds>
    : public ::fidl::WireServer<::test_protocols::WithProtocolEnds> {
 public:
  virtual ~WireTestBase<::test_protocols::WithProtocolEnds>() {}
  virtual void NotImplemented_(const std::string& name,
                               ::fidl::CompleterBase& completer) = 0;
  virtual void ClientEnds(ClientEndsRequestView request,
                          ClientEndsCompleter::Sync& _completer) override {
    NotImplemented_("ClientEnds", _completer);
  }
  virtual void ServerEnds(ServerEndsRequestView request,
                          ServerEndsCompleter::Sync& _completer) override {
    NotImplemented_("ServerEnds", _completer);
  }
  virtual void StructContainingEnds(
      StructContainingEndsRequestView request,
      StructContainingEndsCompleter::Sync& _completer) override {
    NotImplemented_("StructContainingEnds", _completer);
  }
};

}  // namespace testing
}  // namespace fidl
namespace test_protocols {
namespace testing {
using WithProtocolEnds_TestBase =
    ::fidl::testing::WireTestBase<::test_protocols::WithProtocolEnds>;

}  // namespace testing
}  // namespace test_protocols
namespace fidl {
namespace testing {

template <>
class WireTestBase<::test_protocols::ManyParameters>
    : public ::fidl::WireServer<::test_protocols::ManyParameters> {
 public:
  virtual ~WireTestBase<::test_protocols::ManyParameters>() {}
  virtual void NotImplemented_(const std::string& name,
                               ::fidl::CompleterBase& completer) = 0;
  virtual void Fifteen(FifteenRequestView request,
                       FifteenCompleter::Sync& _completer) override {
    NotImplemented_("Fifteen", _completer);
  }
};

}  // namespace testing
}  // namespace fidl
namespace test_protocols {
namespace testing {
using ManyParameters_TestBase =
    ::fidl::testing::WireTestBase<::test_protocols::ManyParameters>;

}  // namespace testing
}  // namespace test_protocols
namespace fidl {
namespace testing {

template <>
class WireTestBase<::test_protocols::WithErrorSyntax>
    : public ::fidl::WireServer<::test_protocols::WithErrorSyntax> {
 public:
  virtual ~WireTestBase<::test_protocols::WithErrorSyntax>() {}
  virtual void NotImplemented_(const std::string& name,
                               ::fidl::CompleterBase& completer) = 0;
  virtual void ResponseAsStruct(
      ResponseAsStructRequestView request,
      ResponseAsStructCompleter::Sync& _completer) override {
    NotImplemented_("ResponseAsStruct", _completer);
  }
  virtual void ErrorAsPrimitive(
      ErrorAsPrimitiveRequestView request,
      ErrorAsPrimitiveCompleter::Sync& _completer) override {
    NotImplemented_("ErrorAsPrimitive", _completer);
  }
  virtual void ErrorAsEnum(ErrorAsEnumRequestView request,
                           ErrorAsEnumCompleter::Sync& _completer) override {
    NotImplemented_("ErrorAsEnum", _completer);
  }
  virtual void HandleInResult(
      HandleInResultRequestView request,
      HandleInResultCompleter::Sync& _completer) override {
    NotImplemented_("HandleInResult", _completer);
  }
};

}  // namespace testing
}  // namespace fidl
namespace test_protocols {
namespace testing {
using WithErrorSyntax_TestBase =
    ::fidl::testing::WireTestBase<::test_protocols::WithErrorSyntax>;

}  // namespace testing
}  // namespace test_protocols
namespace fidl {
namespace testing {

template <>
class WireTestBase<::test_protocols::DiscoverableProtocol>
    : public ::fidl::WireServer<::test_protocols::DiscoverableProtocol> {
 public:
  virtual ~WireTestBase<::test_protocols::DiscoverableProtocol>() {}
  virtual void NotImplemented_(const std::string& name,
                               ::fidl::CompleterBase& completer) = 0;
  virtual void Method(MethodRequestView request,
                      MethodCompleter::Sync& _completer) override {
    NotImplemented_("Method", _completer);
  }
};

}  // namespace testing
}  // namespace fidl
namespace test_protocols {
namespace testing {
using DiscoverableProtocol_TestBase =
    ::fidl::testing::WireTestBase<::test_protocols::DiscoverableProtocol>;

}  // namespace testing
}  // namespace test_protocols
namespace fidl {
namespace testing {

template <>
class WireTestBase<::test_protocols::ChannelProtocol>
    : public ::fidl::WireServer<::test_protocols::ChannelProtocol> {
 public:
  virtual ~WireTestBase<::test_protocols::ChannelProtocol>() {}
  virtual void NotImplemented_(const std::string& name,
                               ::fidl::CompleterBase& completer) = 0;
  virtual void MethodA(MethodARequestView request,
                       MethodACompleter::Sync& _completer) override {
    NotImplemented_("MethodA", _completer);
  }
  virtual void MethodB(MethodBRequestView request,
                       MethodBCompleter::Sync& _completer) override {
    NotImplemented_("MethodB", _completer);
  }
  virtual void TakeHandle(TakeHandleRequestView request,
                          TakeHandleCompleter::Sync& _completer) override {
    NotImplemented_("TakeHandle", _completer);
  }
  virtual void MutateSocket(MutateSocketRequestView request,
                            MutateSocketCompleter::Sync& _completer) override {
    NotImplemented_("MutateSocket", _completer);
  }
};

}  // namespace testing
}  // namespace fidl
namespace test_protocols {
namespace testing {
using ChannelProtocol_TestBase =
    ::fidl::testing::WireTestBase<::test_protocols::ChannelProtocol>;
}  // namespace testing
}  // namespace test_protocols
