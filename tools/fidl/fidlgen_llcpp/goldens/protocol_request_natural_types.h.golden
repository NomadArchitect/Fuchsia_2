// WARNING: This file is machine generated by fidlgen.

#pragma once

#include <fidl/test.protocolrequest/cpp/common_types.h>
#include <fidl/test.protocolrequest/cpp/markers.h>
#include <lib/fidl/cpp/coding_traits.h>
#include <lib/fidl/cpp/internal/codable_base.h>
#include <lib/fidl/cpp/unified_messaging.h>

#include <cinttypes>
#include <string>

#ifdef __Fuchsia__

#include <lib/zx/channel.h>

#endif  // __Fuchsia__

namespace test_protocolrequest {
class ParentTakeChildRequestRequest;

class ParentTakeChildRequest;

class ParentGetChildTopResponse;

class ParentGetChildRequestTopResponse;

#ifdef __Fuchsia__

extern "C" const fidl_type_t
    test_protocolrequest_ParentTakeChildRequestRequestTable;

class ParentTakeChildRequestRequest final
    : public ::fidl::internal::CodableBase<ParentTakeChildRequestRequest> {
 private:
  friend ::fidl::internal::CodableBase<ParentTakeChildRequestRequest>;
  friend ::fidl::CodingTraits<ParentTakeChildRequestRequest>;
  ParentTakeChildRequestRequest(::fidl::Decoder& decoder);
  template <typename Payload>
  friend auto ::fidl::internal::EncodeTransactionalMessageWithoutValidating(
      ::fidl::Encoder& encoder, Payload&& payload)
      -> ::fidl::HLCPPOutgoingMessage;
  void EncodeWithoutValidating(::fidl::Encoder& encoder, size_t offset);

 public:
  struct Storage final {
    ::fidl::ServerEnd<::test_protocolrequest::Child> r{};
  };

  ParentTakeChildRequestRequest(Storage storage) noexcept
      : storage_(std::move(storage)) {}
  ParentTakeChildRequestRequest(
      ::fidl::ServerEnd<::test_protocolrequest::Child> r) noexcept
      : storage_({.r = std::move(r)}) {}
  ParentTakeChildRequestRequest() : ParentTakeChildRequestRequest(Storage{}) {}

  ParentTakeChildRequestRequest(ParentTakeChildRequestRequest&&) noexcept =
      default;
  ParentTakeChildRequestRequest& operator=(
      ParentTakeChildRequestRequest&&) noexcept = default;

  const ::fidl::ServerEnd<::test_protocolrequest::Child>& r() const {
    return storage_.r;
  }

  ::fidl::ServerEnd<::test_protocolrequest::Child>& r() { return storage_.r; }

 private:
  Storage storage_;
};

#endif  // __Fuchsia__

#ifdef __Fuchsia__

extern "C" const fidl_type_t test_protocolrequest_ParentTakeChildRequestTable;

class ParentTakeChildRequest final
    : public ::fidl::internal::CodableBase<ParentTakeChildRequest> {
 private:
  friend ::fidl::internal::CodableBase<ParentTakeChildRequest>;
  friend ::fidl::CodingTraits<ParentTakeChildRequest>;
  ParentTakeChildRequest(::fidl::Decoder& decoder);
  template <typename Payload>
  friend auto ::fidl::internal::EncodeTransactionalMessageWithoutValidating(
      ::fidl::Encoder& encoder, Payload&& payload)
      -> ::fidl::HLCPPOutgoingMessage;
  void EncodeWithoutValidating(::fidl::Encoder& encoder, size_t offset);

 public:
  struct Storage final {
    ::fidl::ClientEnd<::test_protocolrequest::Child> c{};
  };

  ParentTakeChildRequest(Storage storage) noexcept
      : storage_(std::move(storage)) {}
  ParentTakeChildRequest(
      ::fidl::ClientEnd<::test_protocolrequest::Child> c) noexcept
      : storage_({.c = std::move(c)}) {}
  ParentTakeChildRequest() : ParentTakeChildRequest(Storage{}) {}

  ParentTakeChildRequest(ParentTakeChildRequest&&) noexcept = default;
  ParentTakeChildRequest& operator=(ParentTakeChildRequest&&) noexcept =
      default;

  const ::fidl::ClientEnd<::test_protocolrequest::Child>& c() const {
    return storage_.c;
  }

  ::fidl::ClientEnd<::test_protocolrequest::Child>& c() { return storage_.c; }

 private:
  Storage storage_;
};

#endif  // __Fuchsia__

#ifdef __Fuchsia__

extern "C" const fidl_type_t
    test_protocolrequest_ParentGetChildTopResponseTable;

class ParentGetChildTopResponse final
    : public ::fidl::internal::CodableBase<ParentGetChildTopResponse> {
 private:
  friend ::fidl::internal::CodableBase<ParentGetChildTopResponse>;
  friend ::fidl::CodingTraits<ParentGetChildTopResponse>;
  ParentGetChildTopResponse(::fidl::Decoder& decoder);
  template <typename Payload>
  friend auto ::fidl::internal::EncodeTransactionalMessageWithoutValidating(
      ::fidl::Encoder& encoder, Payload&& payload)
      -> ::fidl::HLCPPOutgoingMessage;
  void EncodeWithoutValidating(::fidl::Encoder& encoder, size_t offset);

 public:
  struct Storage final {
    ::fidl::ClientEnd<::test_protocolrequest::Child> c{};
  };

  ParentGetChildTopResponse(Storage storage) noexcept
      : storage_(std::move(storage)) {}
  ParentGetChildTopResponse(
      ::fidl::ClientEnd<::test_protocolrequest::Child> c) noexcept
      : storage_({.c = std::move(c)}) {}
  ParentGetChildTopResponse() : ParentGetChildTopResponse(Storage{}) {}

  ParentGetChildTopResponse(ParentGetChildTopResponse&&) noexcept = default;
  ParentGetChildTopResponse& operator=(ParentGetChildTopResponse&&) noexcept =
      default;

  const ::fidl::ClientEnd<::test_protocolrequest::Child>& c() const {
    return storage_.c;
  }

  ::fidl::ClientEnd<::test_protocolrequest::Child>& c() { return storage_.c; }

 private:
  Storage storage_;
};

#endif  // __Fuchsia__

#ifdef __Fuchsia__

extern "C" const fidl_type_t
    test_protocolrequest_ParentGetChildRequestTopResponseTable;

class ParentGetChildRequestTopResponse final
    : public ::fidl::internal::CodableBase<ParentGetChildRequestTopResponse> {
 private:
  friend ::fidl::internal::CodableBase<ParentGetChildRequestTopResponse>;
  friend ::fidl::CodingTraits<ParentGetChildRequestTopResponse>;
  ParentGetChildRequestTopResponse(::fidl::Decoder& decoder);
  template <typename Payload>
  friend auto ::fidl::internal::EncodeTransactionalMessageWithoutValidating(
      ::fidl::Encoder& encoder, Payload&& payload)
      -> ::fidl::HLCPPOutgoingMessage;
  void EncodeWithoutValidating(::fidl::Encoder& encoder, size_t offset);

 public:
  struct Storage final {
    ::fidl::ServerEnd<::test_protocolrequest::Child> r{};
  };

  ParentGetChildRequestTopResponse(Storage storage) noexcept
      : storage_(std::move(storage)) {}
  ParentGetChildRequestTopResponse(
      ::fidl::ServerEnd<::test_protocolrequest::Child> r) noexcept
      : storage_({.r = std::move(r)}) {}
  ParentGetChildRequestTopResponse()
      : ParentGetChildRequestTopResponse(Storage{}) {}

  ParentGetChildRequestTopResponse(
      ParentGetChildRequestTopResponse&&) noexcept = default;
  ParentGetChildRequestTopResponse& operator=(
      ParentGetChildRequestTopResponse&&) noexcept = default;

  const ::fidl::ServerEnd<::test_protocolrequest::Child>& r() const {
    return storage_.r;
  }

  ::fidl::ServerEnd<::test_protocolrequest::Child>& r() { return storage_.r; }

 private:
  Storage storage_;
};

#endif  // __Fuchsia__

}  // namespace test_protocolrequest
namespace fidl {

#ifdef __Fuchsia__
extern "C" const fidl_type_t
    test_protocolrequest_ParentTakeChildRequestRequestTable;

template <>
struct IsResource<::test_protocolrequest::ParentTakeChildRequestRequest>
    : public std::true_type {};
template <>
struct IsFidlType<::test_protocolrequest::ParentTakeChildRequestRequest>
    : public std::true_type {};

template <>
struct ::fidl::internal::TypeTraits<
    ::test_protocolrequest::ParentTakeChildRequestRequest>
    final {
 public:
  static constexpr const fidl_type_t* kCodingTable =
      &test_protocolrequest_ParentTakeChildRequestRequestTable;
};

template <>
struct CodingTraits<::test_protocolrequest::ParentTakeChildRequestRequest> {
  static constexpr size_t inline_size_v1_no_ee = 8;
  static constexpr size_t inline_size_v2 = 8;

  template <class EncoderImpl>
  static void Encode(
      EncoderImpl* encoder,
      ::test_protocolrequest::ParentTakeChildRequestRequest* value,
      size_t offset,
      cpp17::optional<HandleInformation> maybe_handle_info = cpp17::nullopt) {
    [[maybe_unused]] uint32_t field_offset;
    field_offset =
        encoder->wire_format() == ::fidl::internal::WireFormatVersion::kV1 ? 0
                                                                           : 0;
    ::fidl::Encode(encoder, &value->storage_.r, offset + field_offset,
                   ::fidl::HandleInformation{
                       .object_type = ZX_OBJ_TYPE_CHANNEL,
                       .rights = ZX_DEFAULT_CHANNEL_RIGHTS,
                   });
  }

  template <typename DecoderImpl>
  static void Decode(
      DecoderImpl* decoder,
      ::test_protocolrequest::ParentTakeChildRequestRequest* value,
      size_t offset) {
    ::fidl::Decode(decoder, &value->storage_.r, offset + 0);
  }
};
#endif  // __Fuchsia__

#ifdef __Fuchsia__
extern "C" const fidl_type_t test_protocolrequest_ParentTakeChildRequestTable;

template <>
struct IsResource<::test_protocolrequest::ParentTakeChildRequest>
    : public std::true_type {};
template <>
struct IsFidlType<::test_protocolrequest::ParentTakeChildRequest>
    : public std::true_type {};

template <>
struct ::fidl::internal::TypeTraits<
    ::test_protocolrequest::ParentTakeChildRequest>
    final {
 public:
  static constexpr const fidl_type_t* kCodingTable =
      &test_protocolrequest_ParentTakeChildRequestTable;
};

template <>
struct CodingTraits<::test_protocolrequest::ParentTakeChildRequest> {
  static constexpr size_t inline_size_v1_no_ee = 8;
  static constexpr size_t inline_size_v2 = 8;

  template <class EncoderImpl>
  static void Encode(
      EncoderImpl* encoder,
      ::test_protocolrequest::ParentTakeChildRequest* value, size_t offset,
      cpp17::optional<HandleInformation> maybe_handle_info = cpp17::nullopt) {
    [[maybe_unused]] uint32_t field_offset;
    field_offset =
        encoder->wire_format() == ::fidl::internal::WireFormatVersion::kV1 ? 0
                                                                           : 0;
    ::fidl::Encode(encoder, &value->storage_.c, offset + field_offset,
                   ::fidl::HandleInformation{
                       .object_type = ZX_OBJ_TYPE_CHANNEL,
                       .rights = ZX_DEFAULT_CHANNEL_RIGHTS,
                   });
  }

  template <typename DecoderImpl>
  static void Decode(DecoderImpl* decoder,
                     ::test_protocolrequest::ParentTakeChildRequest* value,
                     size_t offset) {
    ::fidl::Decode(decoder, &value->storage_.c, offset + 0);
  }
};
#endif  // __Fuchsia__

#ifdef __Fuchsia__
extern "C" const fidl_type_t
    test_protocolrequest_ParentGetChildTopResponseTable;

template <>
struct IsResource<::test_protocolrequest::ParentGetChildTopResponse>
    : public std::true_type {};
template <>
struct IsFidlType<::test_protocolrequest::ParentGetChildTopResponse>
    : public std::true_type {};

template <>
struct ::fidl::internal::TypeTraits<
    ::test_protocolrequest::ParentGetChildTopResponse>
    final {
 public:
  static constexpr const fidl_type_t* kCodingTable =
      &test_protocolrequest_ParentGetChildTopResponseTable;
};

template <>
struct CodingTraits<::test_protocolrequest::ParentGetChildTopResponse> {
  static constexpr size_t inline_size_v1_no_ee = 8;
  static constexpr size_t inline_size_v2 = 8;

  template <class EncoderImpl>
  static void Encode(
      EncoderImpl* encoder,
      ::test_protocolrequest::ParentGetChildTopResponse* value, size_t offset,
      cpp17::optional<HandleInformation> maybe_handle_info = cpp17::nullopt) {
    [[maybe_unused]] uint32_t field_offset;
    field_offset =
        encoder->wire_format() == ::fidl::internal::WireFormatVersion::kV1 ? 0
                                                                           : 0;
    ::fidl::Encode(encoder, &value->storage_.c, offset + field_offset,
                   ::fidl::HandleInformation{
                       .object_type = ZX_OBJ_TYPE_CHANNEL,
                       .rights = ZX_DEFAULT_CHANNEL_RIGHTS,
                   });
  }

  template <typename DecoderImpl>
  static void Decode(DecoderImpl* decoder,
                     ::test_protocolrequest::ParentGetChildTopResponse* value,
                     size_t offset) {
    ::fidl::Decode(decoder, &value->storage_.c, offset + 0);
  }
};
#endif  // __Fuchsia__

#ifdef __Fuchsia__
extern "C" const fidl_type_t
    test_protocolrequest_ParentGetChildRequestTopResponseTable;

template <>
struct IsResource<::test_protocolrequest::ParentGetChildRequestTopResponse>
    : public std::true_type {};
template <>
struct IsFidlType<::test_protocolrequest::ParentGetChildRequestTopResponse>
    : public std::true_type {};

template <>
struct ::fidl::internal::TypeTraits<
    ::test_protocolrequest::ParentGetChildRequestTopResponse>
    final {
 public:
  static constexpr const fidl_type_t* kCodingTable =
      &test_protocolrequest_ParentGetChildRequestTopResponseTable;
};

template <>
struct CodingTraits<::test_protocolrequest::ParentGetChildRequestTopResponse> {
  static constexpr size_t inline_size_v1_no_ee = 8;
  static constexpr size_t inline_size_v2 = 8;

  template <class EncoderImpl>
  static void Encode(
      EncoderImpl* encoder,
      ::test_protocolrequest::ParentGetChildRequestTopResponse* value,
      size_t offset,
      cpp17::optional<HandleInformation> maybe_handle_info = cpp17::nullopt) {
    [[maybe_unused]] uint32_t field_offset;
    field_offset =
        encoder->wire_format() == ::fidl::internal::WireFormatVersion::kV1 ? 0
                                                                           : 0;
    ::fidl::Encode(encoder, &value->storage_.r, offset + field_offset,
                   ::fidl::HandleInformation{
                       .object_type = ZX_OBJ_TYPE_CHANNEL,
                       .rights = ZX_DEFAULT_CHANNEL_RIGHTS,
                   });
  }

  template <typename DecoderImpl>
  static void Decode(
      DecoderImpl* decoder,
      ::test_protocolrequest::ParentGetChildRequestTopResponse* value,
      size_t offset) {
    ::fidl::Decode(decoder, &value->storage_.r, offset + 0);
  }
};
#endif  // __Fuchsia__

}  // namespace fidl
