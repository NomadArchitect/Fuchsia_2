// WARNING: This file is machine generated by fidlgen.

#pragma once

#include <fidl/test.protocolrequest/cpp/common_types.h>
#include <fidl/test.protocolrequest/cpp/markers.h>
#include <lib/fidl/cpp/natural_coding_traits.h>
#include <lib/fidl/cpp/natural_types.h>

#include <cinttypes>
#include <string>

#ifdef __Fuchsia__

#include <lib/zx/channel.h>

#endif  // __Fuchsia__

namespace test_protocolrequest {
class ParentTakeChildRequestRequest;

class ParentTakeChildRequest;

class ParentGetChildTopResponse;

class ParentGetChildRequestTopResponse;

#ifdef __Fuchsia__

extern "C" const fidl_type_t
    test_protocolrequest_ParentTakeChildRequestRequestTable;

class ParentTakeChildRequestRequest {
 private:
  struct Storage_;

 public:
  ParentTakeChildRequestRequest(Storage_ storage) noexcept
      : storage_(std::move(storage)) {}
  ParentTakeChildRequestRequest(
      ::fidl::ServerEnd<::test_protocolrequest::Child> r) noexcept
      : storage_({.r = std::move(r)}) {}
  ParentTakeChildRequestRequest() : ParentTakeChildRequestRequest(Storage_{}) {}

  ParentTakeChildRequestRequest(ParentTakeChildRequestRequest&&) noexcept =
      default;
  ParentTakeChildRequestRequest& operator=(
      ParentTakeChildRequestRequest&&) noexcept = default;

  const ::fidl::ServerEnd<::test_protocolrequest::Child>& r() const {
    return storage_.r;
  }

  ::fidl::ServerEnd<::test_protocolrequest::Child>& r() { return storage_.r; }

 private:
  struct Storage_ final {
    ::fidl::ServerEnd<::test_protocolrequest::Child> r{};
  };

  Storage_ storage_;

  friend struct ::fidl::internal::NaturalStructCodingTraits<
      ::test_protocolrequest::ParentTakeChildRequestRequest, 4, 4>;
  friend struct ::fidl::internal::MemberVisitor<
      ::test_protocolrequest::ParentTakeChildRequestRequest>;
  static constexpr auto kMembers = std::make_tuple(
      ::fidl::internal::NaturalStructMember<
          Storage_, ::fidl::ServerEnd<::test_protocolrequest::Child>,
          fidl::internal::NaturalCodingConstraintHandle<
              ZX_OBJ_TYPE_CHANNEL, ZX_DEFAULT_CHANNEL_RIGHTS>>{&Storage_::r, 0,
                                                               0});
};

#endif  // __Fuchsia__

#ifdef __Fuchsia__

extern "C" const fidl_type_t test_protocolrequest_ParentTakeChildRequestTable;

class ParentTakeChildRequest {
 private:
  struct Storage_;

 public:
  ParentTakeChildRequest(Storage_ storage) noexcept
      : storage_(std::move(storage)) {}
  ParentTakeChildRequest(
      ::fidl::ClientEnd<::test_protocolrequest::Child> c) noexcept
      : storage_({.c = std::move(c)}) {}
  ParentTakeChildRequest() : ParentTakeChildRequest(Storage_{}) {}

  ParentTakeChildRequest(ParentTakeChildRequest&&) noexcept = default;
  ParentTakeChildRequest& operator=(ParentTakeChildRequest&&) noexcept =
      default;

  const ::fidl::ClientEnd<::test_protocolrequest::Child>& c() const {
    return storage_.c;
  }

  ::fidl::ClientEnd<::test_protocolrequest::Child>& c() { return storage_.c; }

 private:
  struct Storage_ final {
    ::fidl::ClientEnd<::test_protocolrequest::Child> c{};
  };

  Storage_ storage_;

  friend struct ::fidl::internal::NaturalStructCodingTraits<
      ::test_protocolrequest::ParentTakeChildRequest, 4, 4>;
  friend struct ::fidl::internal::MemberVisitor<
      ::test_protocolrequest::ParentTakeChildRequest>;
  static constexpr auto kMembers = std::make_tuple(
      ::fidl::internal::NaturalStructMember<
          Storage_, ::fidl::ClientEnd<::test_protocolrequest::Child>,
          fidl::internal::NaturalCodingConstraintHandle<
              ZX_OBJ_TYPE_CHANNEL, ZX_DEFAULT_CHANNEL_RIGHTS>>{&Storage_::c, 0,
                                                               0});
};

#endif  // __Fuchsia__

#ifdef __Fuchsia__

extern "C" const fidl_type_t
    test_protocolrequest_ParentGetChildTopResponseTable;

class ParentGetChildTopResponse {
 private:
  struct Storage_;

 public:
  ParentGetChildTopResponse(Storage_ storage) noexcept
      : storage_(std::move(storage)) {}
  ParentGetChildTopResponse(
      ::fidl::ClientEnd<::test_protocolrequest::Child> c) noexcept
      : storage_({.c = std::move(c)}) {}
  ParentGetChildTopResponse() : ParentGetChildTopResponse(Storage_{}) {}

  ParentGetChildTopResponse(ParentGetChildTopResponse&&) noexcept = default;
  ParentGetChildTopResponse& operator=(ParentGetChildTopResponse&&) noexcept =
      default;

  const ::fidl::ClientEnd<::test_protocolrequest::Child>& c() const {
    return storage_.c;
  }

  ::fidl::ClientEnd<::test_protocolrequest::Child>& c() { return storage_.c; }

 private:
  struct Storage_ final {
    ::fidl::ClientEnd<::test_protocolrequest::Child> c{};
  };

  Storage_ storage_;

  friend struct ::fidl::internal::NaturalStructCodingTraits<
      ::test_protocolrequest::ParentGetChildTopResponse, 4, 4>;
  friend struct ::fidl::internal::MemberVisitor<
      ::test_protocolrequest::ParentGetChildTopResponse>;
  static constexpr auto kMembers = std::make_tuple(
      ::fidl::internal::NaturalStructMember<
          Storage_, ::fidl::ClientEnd<::test_protocolrequest::Child>,
          fidl::internal::NaturalCodingConstraintHandle<
              ZX_OBJ_TYPE_CHANNEL, ZX_DEFAULT_CHANNEL_RIGHTS>>{&Storage_::c, 0,
                                                               0});
};

#endif  // __Fuchsia__

#ifdef __Fuchsia__

extern "C" const fidl_type_t
    test_protocolrequest_ParentGetChildRequestTopResponseTable;

class ParentGetChildRequestTopResponse {
 private:
  struct Storage_;

 public:
  ParentGetChildRequestTopResponse(Storage_ storage) noexcept
      : storage_(std::move(storage)) {}
  ParentGetChildRequestTopResponse(
      ::fidl::ServerEnd<::test_protocolrequest::Child> r) noexcept
      : storage_({.r = std::move(r)}) {}
  ParentGetChildRequestTopResponse()
      : ParentGetChildRequestTopResponse(Storage_{}) {}

  ParentGetChildRequestTopResponse(
      ParentGetChildRequestTopResponse&&) noexcept = default;
  ParentGetChildRequestTopResponse& operator=(
      ParentGetChildRequestTopResponse&&) noexcept = default;

  const ::fidl::ServerEnd<::test_protocolrequest::Child>& r() const {
    return storage_.r;
  }

  ::fidl::ServerEnd<::test_protocolrequest::Child>& r() { return storage_.r; }

 private:
  struct Storage_ final {
    ::fidl::ServerEnd<::test_protocolrequest::Child> r{};
  };

  Storage_ storage_;

  friend struct ::fidl::internal::NaturalStructCodingTraits<
      ::test_protocolrequest::ParentGetChildRequestTopResponse, 4, 4>;
  friend struct ::fidl::internal::MemberVisitor<
      ::test_protocolrequest::ParentGetChildRequestTopResponse>;
  static constexpr auto kMembers = std::make_tuple(
      ::fidl::internal::NaturalStructMember<
          Storage_, ::fidl::ServerEnd<::test_protocolrequest::Child>,
          fidl::internal::NaturalCodingConstraintHandle<
              ZX_OBJ_TYPE_CHANNEL, ZX_DEFAULT_CHANNEL_RIGHTS>>{&Storage_::r, 0,
                                                               0});
};

#endif  // __Fuchsia__

}  // namespace test_protocolrequest
namespace fidl {

#ifdef __Fuchsia__

extern "C" const fidl_type_t
    test_protocolrequest_ParentTakeChildRequestRequestTable;

template <>
struct IsResource<::test_protocolrequest::ParentTakeChildRequestRequest>
    : public std::true_type {};
template <>
struct IsFidlType<::test_protocolrequest::ParentTakeChildRequestRequest>
    : public std::true_type {};

template <>
struct ::fidl::internal::TypeTraits<
    ::test_protocolrequest::ParentTakeChildRequestRequest>
    final {
 public:
  static constexpr const fidl_type_t* kCodingTable =
      &test_protocolrequest_ParentTakeChildRequestRequestTable;
};

template <>
struct internal::NaturalCodingTraits<
    ::test_protocolrequest::ParentTakeChildRequestRequest,
    ::fidl::internal::NaturalCodingConstraintEmpty>
    final : public ::fidl::internal::NaturalStructCodingTraits<
                ::test_protocolrequest::ParentTakeChildRequestRequest, 4, 4> {};

template <>
struct internal::NaturalIsMemcpyCompatible<
    ::test_protocolrequest::ParentTakeChildRequestRequest>
    : public std::bool_constant<
          !internal::NaturalHasPadding<
              ::test_protocolrequest::ParentTakeChildRequestRequest>::value &&
          internal::NaturalIsMemcpyCompatible<
              ::fidl::ServerEnd<::test_protocolrequest::Child>>::value> {};

#endif  // __Fuchsia__

#ifdef __Fuchsia__

extern "C" const fidl_type_t test_protocolrequest_ParentTakeChildRequestTable;

template <>
struct IsResource<::test_protocolrequest::ParentTakeChildRequest>
    : public std::true_type {};
template <>
struct IsFidlType<::test_protocolrequest::ParentTakeChildRequest>
    : public std::true_type {};

template <>
struct ::fidl::internal::TypeTraits<
    ::test_protocolrequest::ParentTakeChildRequest>
    final {
 public:
  static constexpr const fidl_type_t* kCodingTable =
      &test_protocolrequest_ParentTakeChildRequestTable;
};

template <>
struct internal::NaturalCodingTraits<
    ::test_protocolrequest::ParentTakeChildRequest,
    ::fidl::internal::NaturalCodingConstraintEmpty>
    final : public ::fidl::internal::NaturalStructCodingTraits<
                ::test_protocolrequest::ParentTakeChildRequest, 4, 4> {};

template <>
struct internal::NaturalIsMemcpyCompatible<
    ::test_protocolrequest::ParentTakeChildRequest>
    : public std::bool_constant<
          !internal::NaturalHasPadding<
              ::test_protocolrequest::ParentTakeChildRequest>::value &&
          internal::NaturalIsMemcpyCompatible<
              ::fidl::ClientEnd<::test_protocolrequest::Child>>::value> {};

#endif  // __Fuchsia__

#ifdef __Fuchsia__

extern "C" const fidl_type_t
    test_protocolrequest_ParentGetChildTopResponseTable;

template <>
struct IsResource<::test_protocolrequest::ParentGetChildTopResponse>
    : public std::true_type {};
template <>
struct IsFidlType<::test_protocolrequest::ParentGetChildTopResponse>
    : public std::true_type {};

template <>
struct ::fidl::internal::TypeTraits<
    ::test_protocolrequest::ParentGetChildTopResponse>
    final {
 public:
  static constexpr const fidl_type_t* kCodingTable =
      &test_protocolrequest_ParentGetChildTopResponseTable;
};

template <>
struct internal::NaturalCodingTraits<
    ::test_protocolrequest::ParentGetChildTopResponse,
    ::fidl::internal::NaturalCodingConstraintEmpty>
    final : public ::fidl::internal::NaturalStructCodingTraits<
                ::test_protocolrequest::ParentGetChildTopResponse, 4, 4> {};

template <>
struct internal::NaturalIsMemcpyCompatible<
    ::test_protocolrequest::ParentGetChildTopResponse>
    : public std::bool_constant<
          !internal::NaturalHasPadding<
              ::test_protocolrequest::ParentGetChildTopResponse>::value &&
          internal::NaturalIsMemcpyCompatible<
              ::fidl::ClientEnd<::test_protocolrequest::Child>>::value> {};

#endif  // __Fuchsia__

#ifdef __Fuchsia__

extern "C" const fidl_type_t
    test_protocolrequest_ParentGetChildRequestTopResponseTable;

template <>
struct IsResource<::test_protocolrequest::ParentGetChildRequestTopResponse>
    : public std::true_type {};
template <>
struct IsFidlType<::test_protocolrequest::ParentGetChildRequestTopResponse>
    : public std::true_type {};

template <>
struct ::fidl::internal::TypeTraits<
    ::test_protocolrequest::ParentGetChildRequestTopResponse>
    final {
 public:
  static constexpr const fidl_type_t* kCodingTable =
      &test_protocolrequest_ParentGetChildRequestTopResponseTable;
};

template <>
struct internal::NaturalCodingTraits<
    ::test_protocolrequest::ParentGetChildRequestTopResponse,
    ::fidl::internal::NaturalCodingConstraintEmpty>
    final
    : public ::fidl::internal::NaturalStructCodingTraits<
          ::test_protocolrequest::ParentGetChildRequestTopResponse, 4, 4> {};

template <>
struct internal::NaturalIsMemcpyCompatible<
    ::test_protocolrequest::ParentGetChildRequestTopResponse>
    : public std::bool_constant<
          !internal::NaturalHasPadding<
              ::test_protocolrequest::ParentGetChildRequestTopResponse>::
              value &&
          internal::NaturalIsMemcpyCompatible<
              ::fidl::ServerEnd<::test_protocolrequest::Child>>::value> {};

#endif  // __Fuchsia__

}  // namespace fidl
