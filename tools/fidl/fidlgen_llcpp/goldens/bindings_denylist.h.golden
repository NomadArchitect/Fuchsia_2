// WARNING: This file is machine generated by fidlgen.

#pragma once

#include <lib/fidl/internal.h>
#include <lib/fidl/llcpp/array.h>
#include <lib/fidl/llcpp/coding.h>
#include <lib/fidl/llcpp/envelope.h>
#include <lib/fidl/llcpp/errors.h>
#include <lib/fidl/llcpp/memory.h>
#include <lib/fidl/llcpp/message.h>
#include <lib/fidl/llcpp/message_storage.h>
#include <lib/fidl/llcpp/object_view.h>
#include <lib/fidl/llcpp/string_view.h>
#include <lib/fidl/llcpp/traits.h>
#include <lib/fidl/llcpp/vector_view.h>
#include <lib/fit/function.h>
#include <lib/stdcompat/optional.h>

#include <algorithm>
#include <cstddef>
#include <variant>
#ifdef __Fuchsia__
#include <lib/fidl/llcpp/client.h>
#include <lib/fidl/llcpp/client_end.h>
#include <lib/fidl/llcpp/connect_service.h>
#include <lib/fidl/llcpp/result.h>
#include <lib/fidl/llcpp/server.h>
#include <lib/fidl/llcpp/server_end.h>
#include <lib/fidl/llcpp/service_handler_interface.h>
#include <lib/fidl/llcpp/sync_call.h>
#include <lib/fidl/llcpp/transaction.h>
#include <lib/fidl/llcpp/wire_messaging.h>
#include <lib/fidl/txn_header.h>
#include <lib/zx/channel.h>

#endif  // __Fuchsia__
#include <zircon/fidl.h>

namespace fidl_test_bindingsdenylist {
class OnlyLibfuzzerAndDeps;
namespace wire {
class OnlyLlcpp;

extern "C" const fidl_type_t fidl_test_bindingsdenylist_OnlyLlcppTable;

class OnlyLlcpp {
 public:
  OnlyLlcpp() : ordinal_(Ordinal::Invalid), envelope_{} {}

  OnlyLlcpp(OnlyLlcpp&&) = default;
  OnlyLlcpp& operator=(OnlyLlcpp&&) = default;

  enum class Tag : fidl_xunion_tag_t {
    kX = 1,  // 0x1
  };

  bool has_invalid_tag() const { return ordinal_ == Ordinal::Invalid; }

  bool is_x() const { return ordinal_ == Ordinal::kX; }

  static OnlyLlcpp WithX(::fidl::ObjectView<uint32_t> val) {
    OnlyLlcpp result;
    result.set_x(val);
    return result;
  }

  template <typename... Args>
  static OnlyLlcpp WithX(::fidl::AnyAllocator& allocator, Args&&... args) {
    OnlyLlcpp result;
    result.set_x(
        ::fidl::ObjectView<uint32_t>(allocator, std::forward<Args>(args)...));
    return result;
  }

  void set_x(::fidl::ObjectView<uint32_t> elem) {
    ordinal_ = Ordinal::kX;
    envelope_.data = ::fidl::ObjectView<void>(
        ::fidl::unowned_ptr_t<void>(static_cast<void*>(elem.get())));
  }

  template <typename... Args>
  void set_x(::fidl::AnyAllocator& allocator, Args&&... args) {
    ordinal_ = Ordinal::kX;
    set_x(::fidl::ObjectView<uint32_t>(allocator, std::forward<Args>(args)...));
  }

  uint32_t& mutable_x() {
    ZX_ASSERT(ordinal_ == Ordinal::kX);
    return *static_cast<uint32_t*>(envelope_.data.get());
  }
  const uint32_t& x() const {
    ZX_ASSERT(ordinal_ == Ordinal::kX);
    return *static_cast<uint32_t*>(envelope_.data.get());
  }
  Tag which() const {
    ZX_ASSERT(!has_invalid_tag());
    return static_cast<Tag>(ordinal_);
  }

  static constexpr const fidl_type_t* Type =
      &fidl_test_bindingsdenylist_OnlyLlcppTable;
  static constexpr uint32_t MaxNumHandles = 0;
  static constexpr uint32_t PrimarySize = 24;
  [[maybe_unused]] static constexpr uint32_t MaxOutOfLine = 8;
  static constexpr bool HasPointer = true;

 private:
  enum class Ordinal : fidl_xunion_tag_t {
    Invalid = 0,
    kX = 1,  // 0x1
  };

  static void SizeAndOffsetAssertionHelper();
  Ordinal ordinal_;
  FIDL_ALIGNDECL
  ::fidl::Envelope<void> envelope_;
};

}  // namespace wire
extern "C" const fidl_type_t
    fidl_test_bindingsdenylist_OnlyLibfuzzerAndDepsLibfuzzerNeedsNonemptyProtocolRequestTable;

extern "C" const fidl_type_t
    fidl_test_bindingsdenylist_OnlyLibfuzzerAndDepsLibfuzzerNeedsNonemptyProtocolResponseTable;

class OnlyLibfuzzerAndDeps final {
  OnlyLibfuzzerAndDeps() = delete;

 public:
  struct LibfuzzerNeedsNonemptyProtocolResponse final {
    FIDL_ALIGNDECL
    fidl_message_header_t _hdr;
    LibfuzzerNeedsNonemptyProtocolResponse() { _InitHeader(); }

    static constexpr const fidl_type_t* Type =
        &::fidl::_llcpp_coding_AnyZeroArgMessageTable;
    static constexpr uint32_t MaxNumHandles = 0;
    static constexpr uint32_t PrimarySize = 16;
    static constexpr uint32_t MaxOutOfLine = 0;
    static constexpr bool HasFlexibleEnvelope = false;
    static constexpr bool HasPointer = false;
    static constexpr ::fidl::internal::TransactionalMessageKind MessageKind =
        ::fidl::internal::TransactionalMessageKind::kResponse;

    class UnownedEncodedMessage final {
     public:
      UnownedEncodedMessage(uint8_t* _bytes, uint32_t _byte_size)
          : message_(_bytes, _byte_size,
                     sizeof(LibfuzzerNeedsNonemptyProtocolResponse), nullptr, 0,
                     0) {
        FIDL_ALIGNDECL LibfuzzerNeedsNonemptyProtocolResponse _response{};
        message_.Encode<::fidl_test_bindingsdenylist::OnlyLibfuzzerAndDeps::
                            LibfuzzerNeedsNonemptyProtocolResponse>(&_response);
      }
      UnownedEncodedMessage(uint8_t* bytes, uint32_t byte_size,
                            LibfuzzerNeedsNonemptyProtocolResponse* response)
          : message_(bytes, byte_size,
                     sizeof(LibfuzzerNeedsNonemptyProtocolResponse), nullptr, 0,
                     0) {
        message_.Encode<::fidl_test_bindingsdenylist::OnlyLibfuzzerAndDeps::
                            LibfuzzerNeedsNonemptyProtocolResponse>(response);
      }
      UnownedEncodedMessage(const UnownedEncodedMessage&) = delete;
      UnownedEncodedMessage(UnownedEncodedMessage&&) = delete;
      UnownedEncodedMessage* operator=(const UnownedEncodedMessage&) = delete;
      UnownedEncodedMessage* operator=(UnownedEncodedMessage&&) = delete;

      zx_status_t status() const { return message_.status(); }
#ifdef __Fuchsia__
      const char* status_string() const { return message_.status_string(); }
#endif
      bool ok() const { return message_.status() == ZX_OK; }
      const char* error() const { return message_.error(); }

      ::fidl::OutgoingMessage& GetOutgoingMessage() { return message_; }

#ifdef __Fuchsia__
      template <typename ChannelLike>
      void Write(ChannelLike&& client) {
        message_.Write(std::forward<ChannelLike>(client));
      }
#endif

     private:
      ::fidl::OutgoingMessage message_;
    };

    class OwnedEncodedMessage final {
     public:
      explicit OwnedEncodedMessage() : message_(bytes_.data(), bytes_.size()) {}
      explicit OwnedEncodedMessage(
          ::fidl_test_bindingsdenylist::OnlyLibfuzzerAndDeps::
              LibfuzzerNeedsNonemptyProtocolResponse* response)
          : message_(bytes_.data(), bytes_.size(), response) {}
      OwnedEncodedMessage(const OwnedEncodedMessage&) = delete;
      OwnedEncodedMessage(OwnedEncodedMessage&&) = delete;
      OwnedEncodedMessage* operator=(const OwnedEncodedMessage&) = delete;
      OwnedEncodedMessage* operator=(OwnedEncodedMessage&&) = delete;

      zx_status_t status() const { return message_.status(); }
#ifdef __Fuchsia__
      const char* status_string() const { return message_.status_string(); }
#endif
      bool ok() const { return message_.ok(); }
      const char* error() const { return message_.error(); }

      ::fidl::OutgoingMessage& GetOutgoingMessage() {
        return message_.GetOutgoingMessage();
      }

#ifdef __Fuchsia__
      template <typename ChannelLike>
      void Write(ChannelLike&& client) {
        message_.Write(std::forward<ChannelLike>(client));
      }
#endif

     private:
      ::fidl::internal::InlineMessageBuffer<16> bytes_;
      UnownedEncodedMessage message_;
    };

   public:
    class DecodedMessage final : public ::fidl::internal::IncomingMessage {
     public:
      DecodedMessage(uint8_t* bytes, uint32_t byte_actual,
                     zx_handle_info_t* handles = nullptr,
                     uint32_t handle_actual = 0)
          : ::fidl::internal::IncomingMessage(bytes, byte_actual, handles,
                                              handle_actual) {
        Decode<::fidl_test_bindingsdenylist::OnlyLibfuzzerAndDeps::
                   LibfuzzerNeedsNonemptyProtocolResponse>();
      }
      DecodedMessage(fidl_incoming_msg_t* msg)
          : ::fidl::internal::IncomingMessage(msg) {
        Decode<::fidl_test_bindingsdenylist::OnlyLibfuzzerAndDeps::
                   LibfuzzerNeedsNonemptyProtocolResponse>();
      }
      DecodedMessage(const DecodedMessage&) = delete;
      DecodedMessage(DecodedMessage&&) = delete;
      DecodedMessage* operator=(const DecodedMessage&) = delete;
      DecodedMessage* operator=(DecodedMessage&&) = delete;

      LibfuzzerNeedsNonemptyProtocolResponse* PrimaryObject() {
        ZX_DEBUG_ASSERT(ok());
        return reinterpret_cast<
            ::fidl_test_bindingsdenylist::OnlyLibfuzzerAndDeps::
                LibfuzzerNeedsNonemptyProtocolResponse*>(bytes());
      }

      // Release the ownership of the decoded message. That means that the
      // handles won't be closed When the object is destroyed. After calling
      // this method, the DecodedMessage object should not be used anymore.
      void ReleasePrimaryObject() { ResetBytes(); }
    };

   private:
    void _InitHeader();
  };
  struct LibfuzzerNeedsNonemptyProtocolRequest final {
    FIDL_ALIGNDECL
    fidl_message_header_t _hdr;
    explicit LibfuzzerNeedsNonemptyProtocolRequest(zx_txid_t _txid) {
      _InitHeader(_txid);
    }

    static constexpr const fidl_type_t* Type =
        &::fidl::_llcpp_coding_AnyZeroArgMessageTable;
    static constexpr uint32_t MaxNumHandles = 0;
    static constexpr uint32_t PrimarySize = 16;
    static constexpr uint32_t MaxOutOfLine = 0;
    static constexpr uint32_t AltPrimarySize = 16;
    static constexpr uint32_t AltMaxOutOfLine = 0;
    static constexpr bool HasFlexibleEnvelope = false;
    static constexpr bool HasPointer = false;
    static constexpr ::fidl::internal::TransactionalMessageKind MessageKind =
        ::fidl::internal::TransactionalMessageKind::kRequest;

    class UnownedEncodedMessage final {
     public:
      UnownedEncodedMessage(uint8_t* _bytes, uint32_t _byte_size,
                            zx_txid_t _txid)
          : message_(_bytes, _byte_size,
                     sizeof(LibfuzzerNeedsNonemptyProtocolRequest), nullptr, 0,
                     0) {
        FIDL_ALIGNDECL LibfuzzerNeedsNonemptyProtocolRequest _request(_txid);
        message_.Encode<LibfuzzerNeedsNonemptyProtocolRequest>(&_request);
      }
      UnownedEncodedMessage(uint8_t* bytes, uint32_t byte_size,
                            LibfuzzerNeedsNonemptyProtocolRequest* request)
          : message_(bytes, byte_size,
                     sizeof(LibfuzzerNeedsNonemptyProtocolRequest), nullptr, 0,
                     0) {
        message_.Encode<LibfuzzerNeedsNonemptyProtocolRequest>(request);
      }
      UnownedEncodedMessage(const UnownedEncodedMessage&) = delete;
      UnownedEncodedMessage(UnownedEncodedMessage&&) = delete;
      UnownedEncodedMessage* operator=(const UnownedEncodedMessage&) = delete;
      UnownedEncodedMessage* operator=(UnownedEncodedMessage&&) = delete;

      zx_status_t status() const { return message_.status(); }
#ifdef __Fuchsia__
      const char* status_string() const { return message_.status_string(); }
#endif
      bool ok() const { return message_.status() == ZX_OK; }
      const char* error() const { return message_.error(); }

      ::fidl::OutgoingMessage& GetOutgoingMessage() { return message_; }

#ifdef __Fuchsia__
      template <typename ChannelLike>
      void Write(ChannelLike&& client) {
        message_.Write(std::forward<ChannelLike>(client));
      }
#endif

     private:
      ::fidl::OutgoingMessage message_;
    };

    class OwnedEncodedMessage final {
     public:
      explicit OwnedEncodedMessage(zx_txid_t _txid)
          : message_(bytes_.data(), bytes_.size(), _txid) {}
      explicit OwnedEncodedMessage(
          LibfuzzerNeedsNonemptyProtocolRequest* request)
          : message_(bytes_.data(), bytes_.size(), request) {}
      OwnedEncodedMessage(const OwnedEncodedMessage&) = delete;
      OwnedEncodedMessage(OwnedEncodedMessage&&) = delete;
      OwnedEncodedMessage* operator=(const OwnedEncodedMessage&) = delete;
      OwnedEncodedMessage* operator=(OwnedEncodedMessage&&) = delete;

      zx_status_t status() const { return message_.status(); }
#ifdef __Fuchsia__
      const char* status_string() const { return message_.status_string(); }
#endif
      bool ok() const { return message_.ok(); }
      const char* error() const { return message_.error(); }

      ::fidl::OutgoingMessage& GetOutgoingMessage() {
        return message_.GetOutgoingMessage();
      }

#ifdef __Fuchsia__
      template <typename ChannelLike>
      void Write(ChannelLike&& client) {
        message_.Write(std::forward<ChannelLike>(client));
      }
#endif

     private:
      ::fidl::internal::InlineMessageBuffer<16> bytes_;
      UnownedEncodedMessage message_;
    };

   public:
    class DecodedMessage final : public ::fidl::internal::IncomingMessage {
     public:
      DecodedMessage(uint8_t* bytes, uint32_t byte_actual,
                     zx_handle_info_t* handles = nullptr,
                     uint32_t handle_actual = 0)
          : ::fidl::internal::IncomingMessage(bytes, byte_actual, handles,
                                              handle_actual) {
        Decode<LibfuzzerNeedsNonemptyProtocolRequest>();
      }
      DecodedMessage(fidl_incoming_msg_t* msg)
          : ::fidl::internal::IncomingMessage(msg) {
        Decode<LibfuzzerNeedsNonemptyProtocolRequest>();
      }
      DecodedMessage(const DecodedMessage&) = delete;
      DecodedMessage(DecodedMessage&&) = delete;
      DecodedMessage* operator=(const DecodedMessage&) = delete;
      DecodedMessage* operator=(DecodedMessage&&) = delete;

      LibfuzzerNeedsNonemptyProtocolRequest* PrimaryObject() {
        ZX_DEBUG_ASSERT(ok());
        return reinterpret_cast<LibfuzzerNeedsNonemptyProtocolRequest*>(
            bytes());
      }

      // Release the ownership of the decoded message. That means that the
      // handles won't be closed When the object is destroyed. After calling
      // this method, the DecodedMessage object should not be used anymore.
      void ReleasePrimaryObject() { ResetBytes(); }
    };

   private:
    void _InitHeader(zx_txid_t _txid);
  };

  class EventHandlerInterface {
   public:
    EventHandlerInterface() = default;
    virtual ~EventHandlerInterface() = default;
  };

#ifdef __Fuchsia__
  // Collection of return types of FIDL calls in this protocol.
  class ResultOf final {
    ResultOf() = delete;

   public:
    class LibfuzzerNeedsNonemptyProtocol final : public ::fidl::Result {
     public:
      explicit LibfuzzerNeedsNonemptyProtocol(
          ::fidl::UnownedClientEnd<
              ::fidl_test_bindingsdenylist::OnlyLibfuzzerAndDeps>
              _client);
      LibfuzzerNeedsNonemptyProtocol(
          ::fidl::UnownedClientEnd<
              ::fidl_test_bindingsdenylist::OnlyLibfuzzerAndDeps>
              _client,
          zx_time_t _deadline);
      explicit LibfuzzerNeedsNonemptyProtocol(const ::fidl::Result& result)
          : ::fidl::Result(result) {}
      LibfuzzerNeedsNonemptyProtocol(LibfuzzerNeedsNonemptyProtocol&&) = delete;
      LibfuzzerNeedsNonemptyProtocol(const LibfuzzerNeedsNonemptyProtocol&) =
          delete;
      LibfuzzerNeedsNonemptyProtocol* operator=(
          LibfuzzerNeedsNonemptyProtocol&&) = delete;
      LibfuzzerNeedsNonemptyProtocol* operator=(
          const LibfuzzerNeedsNonemptyProtocol&) = delete;
      ~LibfuzzerNeedsNonemptyProtocol() = default;

      ::fidl_test_bindingsdenylist::OnlyLibfuzzerAndDeps::
          LibfuzzerNeedsNonemptyProtocolResponse*
          Unwrap() {
        ZX_DEBUG_ASSERT(ok());
        return reinterpret_cast<
            ::fidl_test_bindingsdenylist::OnlyLibfuzzerAndDeps::
                LibfuzzerNeedsNonemptyProtocolResponse*>(bytes_.data());
      }
      const ::fidl_test_bindingsdenylist::OnlyLibfuzzerAndDeps::
          LibfuzzerNeedsNonemptyProtocolResponse*
          Unwrap() const {
        ZX_DEBUG_ASSERT(ok());
        return reinterpret_cast<
            const ::fidl_test_bindingsdenylist::OnlyLibfuzzerAndDeps::
                LibfuzzerNeedsNonemptyProtocolResponse*>(bytes_.data());
      }

      ::fidl_test_bindingsdenylist::OnlyLibfuzzerAndDeps::
          LibfuzzerNeedsNonemptyProtocolResponse&
          value() {
        return *Unwrap();
      }
      const ::fidl_test_bindingsdenylist::OnlyLibfuzzerAndDeps::
          LibfuzzerNeedsNonemptyProtocolResponse&
          value() const {
        return *Unwrap();
      }

      ::fidl_test_bindingsdenylist::OnlyLibfuzzerAndDeps::
          LibfuzzerNeedsNonemptyProtocolResponse*
          operator->() {
        return &value();
      }
      const LibfuzzerNeedsNonemptyProtocolResponse* operator->() const {
        return &value();
      }

      LibfuzzerNeedsNonemptyProtocolResponse& operator*() { return value(); }
      const LibfuzzerNeedsNonemptyProtocolResponse& operator*() const {
        return value();
      }

     private:
      ::fidl::internal::InlineMessageBuffer<16> bytes_;
    };
  };

  // Collection of return types of FIDL calls in this protocol,
  // when the caller-allocate flavor or in-place call is used.
  class UnownedResultOf final {
    UnownedResultOf() = delete;

   public:
    class LibfuzzerNeedsNonemptyProtocol final : public ::fidl::Result {
     public:
      explicit LibfuzzerNeedsNonemptyProtocol(
          ::fidl::UnownedClientEnd<
              ::fidl_test_bindingsdenylist::OnlyLibfuzzerAndDeps>
              _client,
          uint8_t* _response_bytes, uint32_t _response_byte_capacity);
      explicit LibfuzzerNeedsNonemptyProtocol(const ::fidl::Result& result)
          : ::fidl::Result(result) {}
      LibfuzzerNeedsNonemptyProtocol(LibfuzzerNeedsNonemptyProtocol&&) = delete;
      LibfuzzerNeedsNonemptyProtocol(const LibfuzzerNeedsNonemptyProtocol&) =
          delete;
      LibfuzzerNeedsNonemptyProtocol* operator=(
          LibfuzzerNeedsNonemptyProtocol&&) = delete;
      LibfuzzerNeedsNonemptyProtocol* operator=(
          const LibfuzzerNeedsNonemptyProtocol&) = delete;
      ~LibfuzzerNeedsNonemptyProtocol() = default;

      LibfuzzerNeedsNonemptyProtocolResponse* Unwrap() {
        ZX_DEBUG_ASSERT(ok());
        return reinterpret_cast<
            ::fidl_test_bindingsdenylist::OnlyLibfuzzerAndDeps::
                LibfuzzerNeedsNonemptyProtocolResponse*>(bytes_);
      }
      const LibfuzzerNeedsNonemptyProtocolResponse* Unwrap() const {
        ZX_DEBUG_ASSERT(ok());
        return reinterpret_cast<
            const ::fidl_test_bindingsdenylist::OnlyLibfuzzerAndDeps::
                LibfuzzerNeedsNonemptyProtocolResponse*>(bytes_);
      }

      LibfuzzerNeedsNonemptyProtocolResponse& value() { return *Unwrap(); }
      const LibfuzzerNeedsNonemptyProtocolResponse& value() const {
        return *Unwrap();
      }

      LibfuzzerNeedsNonemptyProtocolResponse* operator->() { return &value(); }
      const LibfuzzerNeedsNonemptyProtocolResponse* operator->() const {
        return &value();
      }

      LibfuzzerNeedsNonemptyProtocolResponse& operator*() { return value(); }
      const LibfuzzerNeedsNonemptyProtocolResponse& operator*() const {
        return value();
      }

     private:
      uint8_t* bytes_;
    };
  };

  // Methods to make a sync FIDL call directly on an unowned channel or a
  // const reference to a
  // |fidl::ClientEnd<::fidl_test_bindingsdenylist::OnlyLibfuzzerAndDeps>|,
  // avoiding setting up a client.
  class Call final {
    Call() = delete;

   public:
    // Allocates 32 bytes of message buffer on the stack. No heap allocation
    // necessary.
    static ResultOf::LibfuzzerNeedsNonemptyProtocol
    LibfuzzerNeedsNonemptyProtocol(
        ::fidl::UnownedClientEnd<
            ::fidl_test_bindingsdenylist::OnlyLibfuzzerAndDeps>
            _client_end) {
      return ResultOf::LibfuzzerNeedsNonemptyProtocol(_client_end);
    }
  };

  using SyncClient =
      fidl::WireSyncClient<::fidl_test_bindingsdenylist::OnlyLibfuzzerAndDeps>;

#ifdef __Fuchsia__
  using AsyncEventHandler = ::fidl::WireAsyncEventHandler<
      ::fidl_test_bindingsdenylist::OnlyLibfuzzerAndDeps>;
  class LibfuzzerNeedsNonemptyProtocolResponseContext;
  using ClientImpl = ::fidl::internal::WireClientImpl<
      ::fidl_test_bindingsdenylist::OnlyLibfuzzerAndDeps>;
#endif

  using Interface =
      ::fidl::WireInterface<::fidl_test_bindingsdenylist::OnlyLibfuzzerAndDeps>;

  // Attempts to dispatch the incoming message to a handler function in the
  // server implementation. If there is no matching handler, it returns false,
  // leaving the message and transaction intact. In all other cases, it consumes
  // the message and returns true. It is possible to chain multiple TryDispatch
  // functions in this manner.
  static ::fidl::DispatchResult TryDispatch(Interface* impl,
                                            fidl_incoming_msg_t* msg,
                                            ::fidl::Transaction* txn);

  // Dispatches the incoming message to one of the handlers functions in the
  // protocol. If there is no matching handler, it closes all the handles in
  // |msg| and closes the channel with a |ZX_ERR_NOT_SUPPORTED| epitaph, before
  // returning false. The message should then be discarded.
  static ::fidl::DispatchResult Dispatch(Interface* impl,
                                         fidl_incoming_msg_t* msg,
                                         ::fidl::Transaction* txn);

  // Same as |Dispatch|, but takes a |void*| instead of |Interface*|.
  // Only used with |fidl::BindServer| to reduce template expansion.
  // Do not call this method manually. Use |Dispatch| instead.
  static ::fidl::DispatchResult TypeErasedDispatch(void* impl,
                                                   fidl_incoming_msg_t* msg,
                                                   ::fidl::Transaction* txn) {
    return Dispatch(static_cast<Interface*>(impl), msg, txn);
  }

#endif

  using EventSender = ::fidl::WireEventSender<
      ::fidl_test_bindingsdenylist::OnlyLibfuzzerAndDeps>;
  using WeakEventSender = ::fidl::internal::WireWeakEventSender<
      ::fidl_test_bindingsdenylist::OnlyLibfuzzerAndDeps>;
};
}  // namespace fidl_test_bindingsdenylist
template <>
class ::fidl::WireSyncClient<::fidl_test_bindingsdenylist::OnlyLibfuzzerAndDeps>
    final {
 public:
  WireSyncClient() = default;

  explicit WireSyncClient(
      ::fidl::ClientEnd<::fidl_test_bindingsdenylist::OnlyLibfuzzerAndDeps>
          client_end)
      : client_end_(std::move(client_end)) {}

  ~WireSyncClient() = default;
  WireSyncClient(WireSyncClient&&) = default;
  WireSyncClient& operator=(WireSyncClient&&) = default;

  const ::fidl::ClientEnd<::fidl_test_bindingsdenylist::OnlyLibfuzzerAndDeps>&
  client_end() const {
    return client_end_;
  }
  ::fidl::ClientEnd<::fidl_test_bindingsdenylist::OnlyLibfuzzerAndDeps>&
  client_end() {
    return client_end_;
  }

  const ::zx::channel& channel() const { return client_end_.channel(); }
  ::zx::channel* mutable_channel() { return &client_end_.channel(); }

  // Allocates 32 bytes of message buffer on the stack. No heap allocation
  // necessary.
  ::fidl_test_bindingsdenylist::OnlyLibfuzzerAndDeps::ResultOf::
      LibfuzzerNeedsNonemptyProtocol
      LibfuzzerNeedsNonemptyProtocol() {
    return ::fidl_test_bindingsdenylist::OnlyLibfuzzerAndDeps::ResultOf::
        LibfuzzerNeedsNonemptyProtocol(this->client_end());
  }

 private:
  ::fidl::ClientEnd<::fidl_test_bindingsdenylist::OnlyLibfuzzerAndDeps>
      client_end_;
};

// Pure-virtual interface to be implemented by a server.
// This interface uses typed channels (i.e. |fidl::ClientEnd<SomeProtocol>|
// and |fidl::ServerEnd<SomeProtocol>|).
template <>
class ::fidl::WireInterface<::fidl_test_bindingsdenylist::OnlyLibfuzzerAndDeps>
    : public ::fidl::internal::IncomingMessageDispatcher {
 public:
  WireInterface() = default;
  virtual ~WireInterface() = default;

  // The marker protocol type within which this |WireInterface| class is
  // defined.
  using _EnclosingProtocol = ::fidl_test_bindingsdenylist::OnlyLibfuzzerAndDeps;

  class LibfuzzerNeedsNonemptyProtocolCompleterBase
      : public ::fidl::CompleterBase {
   public:
    // In the following methods, the return value indicates internal errors
    // during the reply, such as encoding or writing to the transport. Note that
    // any error will automatically lead to the destruction of the binding,
    // after which the |on_unbound| callback will be triggered with a detailed
    // reason.
    //
    // See //zircon/system/ulib/fidl/include/lib/fidl/llcpp/server.h.
    //
    // Because the reply status is identical to the unbinding status, it can be
    // safely ignored.
    ::fidl::Result Reply();

   protected:
    using ::fidl::CompleterBase::CompleterBase;
  };

  using LibfuzzerNeedsNonemptyProtocolCompleter =
      ::fidl::Completer<LibfuzzerNeedsNonemptyProtocolCompleterBase>;

  virtual void LibfuzzerNeedsNonemptyProtocol(
      LibfuzzerNeedsNonemptyProtocolCompleter::Sync& _completer) = 0;

 private:
  ::fidl::DispatchResult dispatch_message(fidl_incoming_msg_t* msg,
                                          ::fidl::Transaction* txn) final;
};

namespace fidl_test_bindingsdenylist {
namespace wire {

constexpr uint32_t AllBindings = 0u;

}  // namespace wire
}  // namespace fidl_test_bindingsdenylist
namespace fidl {

template <>
struct IsFidlType<::fidl_test_bindingsdenylist::OnlyLibfuzzerAndDeps::
                      LibfuzzerNeedsNonemptyProtocolRequest>
    : public std::true_type {};
template <>
struct IsFidlMessage<::fidl_test_bindingsdenylist::OnlyLibfuzzerAndDeps::
                         LibfuzzerNeedsNonemptyProtocolRequest>
    : public std::true_type {};
static_assert(sizeof(::fidl_test_bindingsdenylist::OnlyLibfuzzerAndDeps::
                         LibfuzzerNeedsNonemptyProtocolRequest) ==
              ::fidl_test_bindingsdenylist::OnlyLibfuzzerAndDeps::
                  LibfuzzerNeedsNonemptyProtocolRequest::PrimarySize);

template <>
struct IsFidlType<::fidl_test_bindingsdenylist::OnlyLibfuzzerAndDeps::
                      LibfuzzerNeedsNonemptyProtocolResponse>
    : public std::true_type {};
template <>
struct IsFidlMessage<::fidl_test_bindingsdenylist::OnlyLibfuzzerAndDeps::
                         LibfuzzerNeedsNonemptyProtocolResponse>
    : public std::true_type {};
static_assert(sizeof(::fidl_test_bindingsdenylist::OnlyLibfuzzerAndDeps::
                         LibfuzzerNeedsNonemptyProtocolResponse) ==
              ::fidl_test_bindingsdenylist::OnlyLibfuzzerAndDeps::
                  LibfuzzerNeedsNonemptyProtocolResponse::PrimarySize);

template <>
struct IsFidlType<::fidl_test_bindingsdenylist::wire::OnlyLlcpp>
    : public std::true_type {};
template <>
struct IsUnion<::fidl_test_bindingsdenylist::wire::OnlyLlcpp>
    : public std::true_type {};
static_assert(
    std::is_standard_layout_v<::fidl_test_bindingsdenylist::wire::OnlyLlcpp>);
}  // namespace fidl
namespace fidl_test_bindingsdenylist {

#ifdef __Fuchsia__
}  // namespace fidl_test_bindingsdenylist
template <>
class ::fidl::WireAsyncEventHandler<
    ::fidl_test_bindingsdenylist::OnlyLibfuzzerAndDeps>
    : public ::fidl_test_bindingsdenylist::OnlyLibfuzzerAndDeps::
          EventHandlerInterface {
 public:
  WireAsyncEventHandler() = default;

  virtual void Unbound(::fidl::UnbindInfo info) {}
};
namespace fidl_test_bindingsdenylist {

class ::fidl_test_bindingsdenylist::OnlyLibfuzzerAndDeps::
    LibfuzzerNeedsNonemptyProtocolResponseContext
    : public ::fidl::internal::ResponseContext {
 public:
  LibfuzzerNeedsNonemptyProtocolResponseContext();

  virtual void OnReply(::fidl_test_bindingsdenylist::OnlyLibfuzzerAndDeps::
                           LibfuzzerNeedsNonemptyProtocolResponse* message) = 0;

 private:
  void OnReply(uint8_t* reply) override;
};
}  // namespace fidl_test_bindingsdenylist
template <>
class ::fidl::internal::WireClientImpl<
    ::fidl_test_bindingsdenylist::OnlyLibfuzzerAndDeps>
    final : private ::fidl::internal::ClientBase {
 public:
  // Asynchronous variant of
  // |OnlyLibfuzzerAndDeps.LibfuzzerNeedsNonemptyProtocol()|. Allocates 16 bytes
  // of request buffer on the stack. The callback is stored on the heap.
  ::fidl::Result LibfuzzerNeedsNonemptyProtocol(
      ::fit::callback<
          void(::fidl_test_bindingsdenylist::OnlyLibfuzzerAndDeps::
                   LibfuzzerNeedsNonemptyProtocolResponse* response)>
          _cb);

  // Asynchronous variant of
  // |OnlyLibfuzzerAndDeps.LibfuzzerNeedsNonemptyProtocol()|. Caller provides
  // the backing storage for FIDL message via request buffer. Ownership of
  // |_context| is given unsafely to the binding until |OnError| or |OnReply|
  // are called on it.
  ::fidl::Result LibfuzzerNeedsNonemptyProtocol(
      ::fidl_test_bindingsdenylist::OnlyLibfuzzerAndDeps::
          LibfuzzerNeedsNonemptyProtocolResponseContext* _context);

  // Synchronous variant of
  // |OnlyLibfuzzerAndDeps.LibfuzzerNeedsNonemptyProtocol()|. Allocates 32 bytes
  // of message buffer on the stack. No heap allocation necessary.
  ::fidl_test_bindingsdenylist::OnlyLibfuzzerAndDeps::ResultOf::
      LibfuzzerNeedsNonemptyProtocol
      LibfuzzerNeedsNonemptyProtocol_Sync();

  ::fidl::WireAsyncEventHandler<
      ::fidl_test_bindingsdenylist::OnlyLibfuzzerAndDeps>*
  event_handler() const {
    return event_handler_.get();
  }

 private:
  friend class ::fidl::Client<
      ::fidl_test_bindingsdenylist::OnlyLibfuzzerAndDeps>;
  friend class ::fidl::internal::ControlBlock<
      ::fidl_test_bindingsdenylist::OnlyLibfuzzerAndDeps>;

  explicit WireClientImpl(
      std::shared_ptr<::fidl::WireAsyncEventHandler<
          ::fidl_test_bindingsdenylist::OnlyLibfuzzerAndDeps>>
          event_handler)
      : event_handler_(std::move(event_handler)) {}

  std::optional<::fidl::UnbindInfo> DispatchEvent(
      fidl_incoming_msg_t* msg) override;

  std::shared_ptr<::fidl::WireAsyncEventHandler<
      ::fidl_test_bindingsdenylist::OnlyLibfuzzerAndDeps>>
      event_handler_;
};
namespace fidl_test_bindingsdenylist {
#endif

}  // namespace fidl_test_bindingsdenylist
#ifdef __Fuchsia__
// |EventSender| owns a server endpoint of a channel speaking
// the OnlyLibfuzzerAndDeps protocol, and can send events in that protocol.
template <>
class ::fidl::WireEventSender<
    ::fidl_test_bindingsdenylist::OnlyLibfuzzerAndDeps> {
 public:
  // Constructs an event sender with an invalid channel.
  WireEventSender() = default;

  explicit WireEventSender(
      ::fidl::ServerEnd<::fidl_test_bindingsdenylist::OnlyLibfuzzerAndDeps>
          server_end)
      : server_end_(std::move(server_end)) {}

  // The underlying server channel endpoint, which may be replaced at run-time.
  const ::fidl::ServerEnd<::fidl_test_bindingsdenylist::OnlyLibfuzzerAndDeps>&
  server_end() const {
    return server_end_;
  }
  ::fidl::ServerEnd<::fidl_test_bindingsdenylist::OnlyLibfuzzerAndDeps>&
  server_end() {
    return server_end_;
  }

  const ::zx::channel& channel() const { return server_end_.channel(); }
  ::zx::channel& channel() { return server_end_.channel(); }

  // Whether the underlying channel is valid.
  bool is_valid() const { return server_end_.is_valid(); }

 private:
  ::fidl::ServerEnd<::fidl_test_bindingsdenylist::OnlyLibfuzzerAndDeps>
      server_end_;
};

template <>
class ::fidl::internal::WireWeakEventSender<
    ::fidl_test_bindingsdenylist::OnlyLibfuzzerAndDeps> {
 public:
 private:
  friend class ::fidl::ServerBindingRef<
      ::fidl_test_bindingsdenylist::OnlyLibfuzzerAndDeps>;

  explicit WireWeakEventSender(
      std::weak_ptr<::fidl::internal::AsyncServerBinding<
          ::fidl_test_bindingsdenylist::OnlyLibfuzzerAndDeps>>
          binding)
      : binding_(std::move(binding)) {}

  std::weak_ptr<::fidl::internal::AsyncServerBinding<
      ::fidl_test_bindingsdenylist::OnlyLibfuzzerAndDeps>>
      binding_;
};
#endif
