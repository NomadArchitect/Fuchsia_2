// WARNING: This file is machine generated by fidlgen.

#pragma once

#include <lib/fidl/internal.h>
#include <lib/fidl/llcpp/array.h>
#include <lib/fidl/llcpp/coding.h>
#include <lib/fidl/llcpp/envelope.h>
#include <lib/fidl/llcpp/errors.h>
#include <lib/fidl/llcpp/memory.h>
#include <lib/fidl/llcpp/message.h>
#include <lib/fidl/llcpp/message_storage.h>
#include <lib/fidl/llcpp/object_view.h>
#include <lib/fidl/llcpp/string_view.h>
#include <lib/fidl/llcpp/traits.h>
#include <lib/fidl/llcpp/vector_view.h>
#include <lib/fit/function.h>
#include <lib/stdcompat/optional.h>

#include <algorithm>
#include <cstddef>
#include <variant>
#ifdef __Fuchsia__
#include <lib/fidl/llcpp/client.h>
#include <lib/fidl/llcpp/client_end.h>
#include <lib/fidl/llcpp/connect_service.h>
#include <lib/fidl/llcpp/result.h>
#include <lib/fidl/llcpp/server.h>
#include <lib/fidl/llcpp/server_end.h>
#include <lib/fidl/llcpp/service_handler_interface.h>
#include <lib/fidl/llcpp/sync_call.h>
#include <lib/fidl/llcpp/transaction.h>
#include <lib/fidl/txn_header.h>

#endif  // __Fuchsia__
#include <zircon/fidl.h>

namespace fidl_test_bindingsdenylist {
namespace wire {
class OnlyLlcpp;

extern "C" const fidl_type_t fidl_test_bindingsdenylist_OnlyLlcppTable;

class OnlyLlcpp {
 public:
  OnlyLlcpp() : ordinal_(Ordinal::Invalid), envelope_{} {}

  OnlyLlcpp(OnlyLlcpp&&) = default;
  OnlyLlcpp& operator=(OnlyLlcpp&&) = default;

  enum class Tag : fidl_xunion_tag_t {
    kX = 1,  // 0x1
  };

  bool has_invalid_tag() const { return ordinal_ == Ordinal::Invalid; }

  bool is_x() const { return ordinal_ == Ordinal::kX; }

  static OnlyLlcpp WithX(::fidl::ObjectView<uint32_t> val) {
    OnlyLlcpp result;
    result.set_x(val);
    return result;
  }

  template <typename... Args>
  static OnlyLlcpp WithX(::fidl::AnyAllocator& allocator, Args&&... args) {
    OnlyLlcpp result;
    result.set_x(
        ::fidl::ObjectView<uint32_t>(allocator, std::forward<Args>(args)...));
    return result;
  }

  void set_x(::fidl::ObjectView<uint32_t> elem) {
    ordinal_ = Ordinal::kX;
    envelope_.data = ::fidl::ObjectView<void>(
        ::fidl::unowned_ptr_t<void>(static_cast<void*>(elem.get())));
  }

  template <typename... Args>
  void set_x(::fidl::AnyAllocator& allocator, Args&&... args) {
    ordinal_ = Ordinal::kX;
    set_x(::fidl::ObjectView<uint32_t>(allocator, std::forward<Args>(args)...));
  }

  uint32_t& mutable_x() {
    ZX_ASSERT(ordinal_ == Ordinal::kX);
    return *static_cast<uint32_t*>(envelope_.data.get());
  }
  const uint32_t& x() const {
    ZX_ASSERT(ordinal_ == Ordinal::kX);
    return *static_cast<uint32_t*>(envelope_.data.get());
  }
  Tag which() const {
    ZX_ASSERT(!has_invalid_tag());
    return static_cast<Tag>(ordinal_);
  }

  static constexpr const fidl_type_t* Type =
      &fidl_test_bindingsdenylist_OnlyLlcppTable;
  static constexpr uint32_t MaxNumHandles = 0;
  static constexpr uint32_t PrimarySize = 24;
  [[maybe_unused]] static constexpr uint32_t MaxOutOfLine = 8;
  static constexpr bool HasPointer = true;

 private:
  enum class Ordinal : fidl_xunion_tag_t {
    Invalid = 0,
    kX = 1,  // 0x1
  };

  static void SizeAndOffsetAssertionHelper();
  Ordinal ordinal_;
  FIDL_ALIGNDECL
  ::fidl::Envelope<void> envelope_;
};

constexpr uint32_t AllBindings = 0u;

}  // namespace wire
}  // namespace fidl_test_bindingsdenylist
namespace fidl {

template <>
struct IsFidlType<::fidl_test_bindingsdenylist::wire::OnlyLlcpp>
    : public std::true_type {};
template <>
struct IsUnion<::fidl_test_bindingsdenylist::wire::OnlyLlcpp>
    : public std::true_type {};
static_assert(
    std::is_standard_layout_v<::fidl_test_bindingsdenylist::wire::OnlyLlcpp>);
}  // namespace fidl
namespace fidl_test_bindingsdenylist {
namespace wire {}  // namespace wire
}  // namespace fidl_test_bindingsdenylist
