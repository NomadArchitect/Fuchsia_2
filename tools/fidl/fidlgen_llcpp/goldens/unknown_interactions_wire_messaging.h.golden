// WARNING: This file is machine generated by fidlgen.

#pragma once

#include <fidl/test.unknowninteractions/cpp/markers.h>
#include <fidl/test.unknowninteractions/cpp/wire_types.h>
#include <lib/fidl/llcpp/wire_messaging.h>

#ifdef __Fuchsia__

#include <lib/fidl/llcpp/client.h>
#include <lib/fidl/llcpp/connect_service.h>
#include <lib/fidl/llcpp/server.h>
#include <lib/fidl/llcpp/service_handler_interface.h>
#include <lib/fidl/llcpp/sync_call.h>

#endif  // __Fuchsia__

namespace test_unknowninteractions {
class Example;

__LOCAL extern "C" const fidl_type_t test_unknowninteractions_ExampleFlexibleTwoWayTopResponseTable;

}  // namespace test_unknowninteractions
template <>
struct ::fidl::internal::WireOrdinal<::test_unknowninteractions::Example::StrictOneWay> final {
  static constexpr uint64_t value = 2276912608357927194lu;
};
template <>
struct ::fidl::internal::WireOrdinal<::test_unknowninteractions::Example::FlexibleOneWay> final {
  static constexpr uint64_t value = 2309537410782500280lu;
};
template <>
struct ::fidl::internal::WireOrdinal<::test_unknowninteractions::Example::StrictTwoWay> final {
  static constexpr uint64_t value = 4530909159434307973lu;
};
template <>
struct ::fidl::internal::WireOrdinal<::test_unknowninteractions::Example::FlexibleTwoWay> final {
  static constexpr uint64_t value = 9070032238358100524lu;
};
template <>
struct ::fidl::internal::WireOrdinal<::test_unknowninteractions::Example::StrictEvent> final {
  static constexpr uint64_t value = 2942732192976592869lu;
};
template <>
struct ::fidl::internal::WireOrdinal<::test_unknowninteractions::Example::FlexibleEvent> final {
  static constexpr uint64_t value = 2065245206460174394lu;
};

namespace test_unknowninteractions {
}  // namespace test_unknowninteractions
#ifdef __Fuchsia__

template <>
struct ::fidl::internal::ProtocolDetails<::test_unknowninteractions::Example> {
};
#endif  // __Fuchsia__

#ifdef __Fuchsia__

template <>
struct ::fidl::internal::WireServerDispatcher<::test_unknowninteractions::Example> final {
  WireServerDispatcher() = delete;
  static ::fidl::DispatchResult TryDispatch(::fidl::WireServer<::test_unknowninteractions::Example>* impl, ::fidl::IncomingMessage& msg,
                                            internal::MessageStorageViewBase* storage_view,
                                            ::fidl::Transaction* txn);
  static void Dispatch(::fidl::WireServer<::test_unknowninteractions::Example>* impl, ::fidl::IncomingMessage&& msg,
                       internal::MessageStorageViewBase* storage_view,
                       ::fidl::Transaction* txn);

 private:
  static const ::fidl::internal::MethodEntry entries_[];
  static const ::fidl::internal::MethodEntry* entries_end_;
};
#endif  // __Fuchsia__

template <>
struct ::fidl::WireRequest<::test_unknowninteractions::Example::StrictOneWay> final {
  WireRequest() = default;
};

template <>
struct ::fidl::internal::TransactionalRequest<::test_unknowninteractions::Example::StrictOneWay> final {
  FIDL_ALIGNDECL
  fidl_message_header_t header;

  TransactionalRequest() {
    _InitHeader();
  }

 private:
  void _InitHeader();
};

template <bool IsRecursive>
struct ::fidl::internal::WireCodingTraits<::fidl::internal::TransactionalRequest<::test_unknowninteractions::Example::StrictOneWay>, ::fidl::internal::WireCodingConstraintEmpty, IsRecursive>
    : public WireStructCodingTraitsBase<::fidl::internal::TransactionalRequest<::test_unknowninteractions::Example::StrictOneWay>, ::fidl::internal::WireCodingConstraintEmpty, IsRecursive> {
  static constexpr size_t inline_size = 0 + sizeof(fidl_message_header_t);

  static void Encode(internal::WireEncoder* encoder, ::fidl::internal::TransactionalRequest<::test_unknowninteractions::Example::StrictOneWay>* value, ::fidl::internal::WirePosition position, RecursionDepth<IsRecursive> recursion_depth) {
    *position.As<fidl_message_header_t>() = value->header;
  }
  static void Decode(
      internal::WireDecoder* decoder, ::fidl::internal::WirePosition position, RecursionDepth<IsRecursive> recursion_depth) {
  }
};

template <>
struct ::fidl::WireRequest<::test_unknowninteractions::Example::FlexibleOneWay> final {
  WireRequest() = default;
};

template <>
struct ::fidl::internal::TransactionalRequest<::test_unknowninteractions::Example::FlexibleOneWay> final {
  FIDL_ALIGNDECL
  fidl_message_header_t header;

  TransactionalRequest() {
    _InitHeader();
  }

 private:
  void _InitHeader();
};

template <bool IsRecursive>
struct ::fidl::internal::WireCodingTraits<::fidl::internal::TransactionalRequest<::test_unknowninteractions::Example::FlexibleOneWay>, ::fidl::internal::WireCodingConstraintEmpty, IsRecursive>
    : public WireStructCodingTraitsBase<::fidl::internal::TransactionalRequest<::test_unknowninteractions::Example::FlexibleOneWay>, ::fidl::internal::WireCodingConstraintEmpty, IsRecursive> {
  static constexpr size_t inline_size = 0 + sizeof(fidl_message_header_t);

  static void Encode(internal::WireEncoder* encoder, ::fidl::internal::TransactionalRequest<::test_unknowninteractions::Example::FlexibleOneWay>* value, ::fidl::internal::WirePosition position, RecursionDepth<IsRecursive> recursion_depth) {
    *position.As<fidl_message_header_t>() = value->header;
  }
  static void Decode(
      internal::WireDecoder* decoder, ::fidl::internal::WirePosition position, RecursionDepth<IsRecursive> recursion_depth) {
  }
};

template <>
struct ::fidl::WireRequest<::test_unknowninteractions::Example::StrictTwoWay> final {
  WireRequest() = default;
};

template <>
struct ::fidl::internal::TransactionalRequest<::test_unknowninteractions::Example::StrictTwoWay> final {
  FIDL_ALIGNDECL
  fidl_message_header_t header;

  TransactionalRequest() {
    _InitHeader();
  }

 private:
  void _InitHeader();
};

template <bool IsRecursive>
struct ::fidl::internal::WireCodingTraits<::fidl::internal::TransactionalRequest<::test_unknowninteractions::Example::StrictTwoWay>, ::fidl::internal::WireCodingConstraintEmpty, IsRecursive>
    : public WireStructCodingTraitsBase<::fidl::internal::TransactionalRequest<::test_unknowninteractions::Example::StrictTwoWay>, ::fidl::internal::WireCodingConstraintEmpty, IsRecursive> {
  static constexpr size_t inline_size = 0 + sizeof(fidl_message_header_t);

  static void Encode(internal::WireEncoder* encoder, ::fidl::internal::TransactionalRequest<::test_unknowninteractions::Example::StrictTwoWay>* value, ::fidl::internal::WirePosition position, RecursionDepth<IsRecursive> recursion_depth) {
    *position.As<fidl_message_header_t>() = value->header;
  }
  static void Decode(
      internal::WireDecoder* decoder, ::fidl::internal::WirePosition position, RecursionDepth<IsRecursive> recursion_depth) {
  }
};

template <>
struct ::fidl::WireResponse<::test_unknowninteractions::Example::StrictTwoWay> final {
  WireResponse() = default;
};

template <>
struct ::fidl::internal::TransactionalResponse<::test_unknowninteractions::Example::StrictTwoWay> final {
  FIDL_ALIGNDECL
  fidl_message_header_t header;

  TransactionalResponse() {
    _InitHeader();
  }

 private:
  void _InitHeader();
};

template <bool IsRecursive>
struct ::fidl::internal::WireCodingTraits<::fidl::internal::TransactionalResponse<::test_unknowninteractions::Example::StrictTwoWay>, ::fidl::internal::WireCodingConstraintEmpty, IsRecursive>
    : public WireStructCodingTraitsBase<::fidl::internal::TransactionalResponse<::test_unknowninteractions::Example::StrictTwoWay>, ::fidl::internal::WireCodingConstraintEmpty, IsRecursive> {
  static constexpr size_t inline_size = 0 + sizeof(fidl_message_header_t);

  static void Encode(internal::WireEncoder* encoder, ::fidl::internal::TransactionalResponse<::test_unknowninteractions::Example::StrictTwoWay>* value, ::fidl::internal::WirePosition position, RecursionDepth<IsRecursive> recursion_depth) {
    *position.As<fidl_message_header_t>() = value->header;
  }
  static void Decode(
      internal::WireDecoder* decoder, ::fidl::internal::WirePosition position, RecursionDepth<IsRecursive> recursion_depth) {
  }
};

template <>
struct ::fidl::WireRequest<::test_unknowninteractions::Example::FlexibleTwoWay> final {
  WireRequest() = default;
  using ResponseType = ::fidl::WireResponse<::test_unknowninteractions::Example::FlexibleTwoWay>;
};

template <>
struct ::fidl::internal::TransactionalRequest<::test_unknowninteractions::Example::FlexibleTwoWay> final {
  FIDL_ALIGNDECL
  fidl_message_header_t header;

  TransactionalRequest() {
    _InitHeader();
  }
  using ResponseType = ::fidl::internal::TransactionalResponse<::test_unknowninteractions::Example::FlexibleTwoWay>;

 private:
  void _InitHeader();
};

template <bool IsRecursive>
struct ::fidl::internal::WireCodingTraits<::fidl::internal::TransactionalRequest<::test_unknowninteractions::Example::FlexibleTwoWay>, ::fidl::internal::WireCodingConstraintEmpty, IsRecursive>
    : public WireStructCodingTraitsBase<::fidl::internal::TransactionalRequest<::test_unknowninteractions::Example::FlexibleTwoWay>, ::fidl::internal::WireCodingConstraintEmpty, IsRecursive> {
  static constexpr size_t inline_size = 0 + sizeof(fidl_message_header_t);

  static void Encode(internal::WireEncoder* encoder, ::fidl::internal::TransactionalRequest<::test_unknowninteractions::Example::FlexibleTwoWay>* value, ::fidl::internal::WirePosition position, RecursionDepth<IsRecursive> recursion_depth) {
    *position.As<fidl_message_header_t>() = value->header;
  }
  static void Decode(
      internal::WireDecoder* decoder, ::fidl::internal::WirePosition position, RecursionDepth<IsRecursive> recursion_depth) {
  }
};

template <>
struct ::fidl::WireResponse<::test_unknowninteractions::Example::FlexibleTwoWay> final : public ::test_unknowninteractions::wire::ExampleFlexibleTwoWayTopResponse {
  using Result = test_unknowninteractions::wire::ExampleFlexibleTwoWayResult;

  explicit WireResponse(::test_unknowninteractions::wire::ExampleFlexibleTwoWayTopResponse base) : ::test_unknowninteractions::wire::ExampleFlexibleTwoWayTopResponse(std::move(base)) {}
  explicit WireResponse(::test_unknowninteractions::wire::ExampleFlexibleTwoWayResult result) : ::test_unknowninteractions::wire::ExampleFlexibleTwoWayTopResponse{.result = std::move(result)} {}
  WireResponse() = default;
};

template <bool IsRecursive>
struct ::fidl::internal::WireCodingTraits<::fidl::WireResponse<::test_unknowninteractions::Example::FlexibleTwoWay>, ::fidl::internal::WireCodingConstraintEmpty, IsRecursive>
    : public WireStructCodingTraitsBase<::fidl::WireResponse<::test_unknowninteractions::Example::FlexibleTwoWay>, ::fidl::internal::WireCodingConstraintEmpty, IsRecursive> {
  static constexpr size_t inline_size = 16;

  static void Encode(
      internal::WireEncoder* encoder, ::fidl::WireResponse<::test_unknowninteractions::Example::FlexibleTwoWay>* value, ::fidl::internal::WirePosition position, RecursionDepth<IsRecursive> recursion_depth) {
    fidl::internal::WireCodingTraits<::test_unknowninteractions::wire::ExampleFlexibleTwoWayTopResponse, ::fidl::internal::WireCodingConstraintEmpty, IsRecursive>::Encode(
        encoder, value, position, recursion_depth);
  }
  static void Decode(
      internal::WireDecoder* decoder, ::fidl::internal::WirePosition position, RecursionDepth<IsRecursive> recursion_depth) {
    fidl::internal::WireCodingTraits<::test_unknowninteractions::wire::ExampleFlexibleTwoWayTopResponse, ::fidl::internal::WireCodingConstraintEmpty, IsRecursive>::Decode(
        decoder, position, recursion_depth);
  }
};

template <>
struct ::fidl::internal::TransactionalResponse<::test_unknowninteractions::Example::FlexibleTwoWay> final {
  FIDL_ALIGNDECL
  fidl_message_header_t header;

  ::fidl::WireResponse<::test_unknowninteractions::Example::FlexibleTwoWay> body;
  explicit TransactionalResponse(::test_unknowninteractions::wire::ExampleFlexibleTwoWayResult result)
      : body(::fidl::WireResponse<::test_unknowninteractions::Example::FlexibleTwoWay>(result)) {
    _InitHeader();
  }
  TransactionalResponse() {
    _InitHeader();
  }

 private:
  void _InitHeader();
};

template <bool IsRecursive>
struct ::fidl::internal::WireCodingTraits<::fidl::internal::TransactionalResponse<::test_unknowninteractions::Example::FlexibleTwoWay>, ::fidl::internal::WireCodingConstraintEmpty, IsRecursive>
    : public WireStructCodingTraitsBase<::fidl::internal::TransactionalResponse<::test_unknowninteractions::Example::FlexibleTwoWay>, ::fidl::internal::WireCodingConstraintEmpty, IsRecursive> {
  static constexpr size_t inline_size = 16 + sizeof(fidl_message_header_t);

  static void Encode(internal::WireEncoder* encoder, ::fidl::internal::TransactionalResponse<::test_unknowninteractions::Example::FlexibleTwoWay>* value, ::fidl::internal::WirePosition position, RecursionDepth<IsRecursive> recursion_depth) {
    *position.As<fidl_message_header_t>() = value->header;
    WireCodingTraits<::fidl::WireResponse<::test_unknowninteractions::Example::FlexibleTwoWay>, WireCodingConstraintEmpty, IsRecursive>::Encode(
        encoder, &value->body, position + sizeof(fidl_message_header_t), recursion_depth);
  }
  static void Decode(
      internal::WireDecoder* decoder, ::fidl::internal::WirePosition position, RecursionDepth<IsRecursive> recursion_depth) {
    WireCodingTraits<::fidl::WireResponse<::test_unknowninteractions::Example::FlexibleTwoWay>, WireCodingConstraintEmpty, IsRecursive>::Decode(
        decoder, position + sizeof(fidl_message_header_t), recursion_depth);
  }
};

template <>
struct ::fidl::WireEvent<::test_unknowninteractions::Example::StrictEvent> final {
  WireEvent() = default;
};

template <>
struct ::fidl::internal::TransactionalEvent<::test_unknowninteractions::Example::StrictEvent> final {
  FIDL_ALIGNDECL
  fidl_message_header_t header;

  TransactionalEvent() {
    _InitHeader();
  }

 private:
  void _InitHeader();
};

template <bool IsRecursive>
struct ::fidl::internal::WireCodingTraits<::fidl::internal::TransactionalEvent<::test_unknowninteractions::Example::StrictEvent>, ::fidl::internal::WireCodingConstraintEmpty, IsRecursive>
    : public WireStructCodingTraitsBase<::fidl::internal::TransactionalEvent<::test_unknowninteractions::Example::StrictEvent>, ::fidl::internal::WireCodingConstraintEmpty, IsRecursive> {
  static constexpr size_t inline_size = 0 + sizeof(fidl_message_header_t);

  static void Encode(
      internal::WireEncoder* encoder, ::fidl::internal::TransactionalEvent<::test_unknowninteractions::Example::StrictEvent>* value, ::fidl::internal::WirePosition position, RecursionDepth<IsRecursive> recursion_depth) {
    *position.As<fidl_message_header_t>() = value->header;
  }
  static void Decode(
      internal::WireDecoder* decoder, ::fidl::internal::WirePosition position, RecursionDepth<IsRecursive> recursion_depth) {
  }
};

template <>
struct ::fidl::WireEvent<::test_unknowninteractions::Example::FlexibleEvent> final {
  WireEvent() = default;
};

template <>
struct ::fidl::internal::TransactionalEvent<::test_unknowninteractions::Example::FlexibleEvent> final {
  FIDL_ALIGNDECL
  fidl_message_header_t header;

  TransactionalEvent() {
    _InitHeader();
  }

 private:
  void _InitHeader();
};

template <bool IsRecursive>
struct ::fidl::internal::WireCodingTraits<::fidl::internal::TransactionalEvent<::test_unknowninteractions::Example::FlexibleEvent>, ::fidl::internal::WireCodingConstraintEmpty, IsRecursive>
    : public WireStructCodingTraitsBase<::fidl::internal::TransactionalEvent<::test_unknowninteractions::Example::FlexibleEvent>, ::fidl::internal::WireCodingConstraintEmpty, IsRecursive> {
  static constexpr size_t inline_size = 0 + sizeof(fidl_message_header_t);

  static void Encode(
      internal::WireEncoder* encoder, ::fidl::internal::TransactionalEvent<::test_unknowninteractions::Example::FlexibleEvent>* value, ::fidl::internal::WirePosition position, RecursionDepth<IsRecursive> recursion_depth) {
    *position.As<fidl_message_header_t>() = value->header;
  }
  static void Decode(
      internal::WireDecoder* decoder, ::fidl::internal::WirePosition position, RecursionDepth<IsRecursive> recursion_depth) {
  }
};

#ifdef __Fuchsia__

template <>
struct ::fidl::internal::WireMethodTypes<::test_unknowninteractions::Example::StrictTwoWay> {
  using Completer = fidl::Completer<::fidl::internal::WireCompleterBase<::test_unknowninteractions::Example::StrictTwoWay>>;

  using Thenable = ::fidl::internal::WireThenableImpl<
      ::test_unknowninteractions::Example::StrictTwoWay,
      ::fidl::unstable::OwnedEncodedMessage<
          ::fidl::internal::TransactionalRequest<::test_unknowninteractions::Example::StrictTwoWay>, ::fidl::internal::ChannelTransport>>;

  using BufferThenable = ::fidl::internal::WireThenableImpl<
      ::test_unknowninteractions::Example::StrictTwoWay,
      ::fidl::unstable::UnownedEncodedMessage<
          ::fidl::internal::TransactionalRequest<::test_unknowninteractions::Example::StrictTwoWay>, ::fidl::internal::ChannelTransport>>;
};

#endif  // __Fuchsia__

#ifdef __Fuchsia__

template <>
struct ::fidl::internal::WireMethodTypes<::test_unknowninteractions::Example::FlexibleTwoWay> {
  using Completer = fidl::Completer<::fidl::internal::WireCompleterBase<::test_unknowninteractions::Example::FlexibleTwoWay>>;

  using Thenable = ::fidl::internal::WireThenableImpl<
      ::test_unknowninteractions::Example::FlexibleTwoWay,
      ::fidl::unstable::OwnedEncodedMessage<
          ::fidl::internal::TransactionalRequest<::test_unknowninteractions::Example::FlexibleTwoWay>, ::fidl::internal::ChannelTransport>>;

  using BufferThenable = ::fidl::internal::WireThenableImpl<
      ::test_unknowninteractions::Example::FlexibleTwoWay,
      ::fidl::unstable::UnownedEncodedMessage<
          ::fidl::internal::TransactionalRequest<::test_unknowninteractions::Example::FlexibleTwoWay>, ::fidl::internal::ChannelTransport>>;
};

#endif  // __Fuchsia__

namespace fidl {

template <>
struct IsFidlType<::fidl::internal::TransactionalRequest<::test_unknowninteractions::Example::StrictOneWay>> : public std::true_type {};
template <>
struct IsFidlType<::fidl::WireRequest<::test_unknowninteractions::Example::StrictOneWay>> : public std::true_type {};
template <>
struct IsFidlTransactionalMessage<::fidl::internal::TransactionalRequest<::test_unknowninteractions::Example::StrictOneWay>> : public std::true_type {};
template <>
struct IsFidlTransactionalMessage<::fidl::WireRequest<::test_unknowninteractions::Example::StrictOneWay>> : public std::false_type {};

template <>
struct TypeTraits<::fidl::internal::TransactionalRequest<::test_unknowninteractions::Example::StrictOneWay>> {
  static constexpr const fidl_type_t* kType =
      nullptr;
  static constexpr uint32_t kMaxNumHandles = 0;
  static constexpr uint32_t kMaxDepth = 0;
  static constexpr uint32_t kPrimarySize = FIDL_ALIGN(0 + sizeof(fidl_message_header_t));
  static constexpr uint32_t kPrimarySizeV1 = FIDL_ALIGN(0 + sizeof(fidl_message_header_t));
  static constexpr uint32_t kMaxOutOfLine = 0;
  static constexpr uint32_t kMaxOutOfLineV1 = 0;
  static constexpr bool kHasFlexibleEnvelope = false;
  static constexpr bool kHasEnvelope = false;
  static constexpr bool kHasPointer = false;
  static constexpr ::fidl::internal::TransactionalMessageKind kMessageKind =
      ::fidl::internal::TransactionalMessageKind::kRequest;
};

static_assert(sizeof(::fidl::internal::TransactionalRequest<::test_unknowninteractions::Example::StrictOneWay>) == TypeTraits<::fidl::internal::TransactionalRequest<::test_unknowninteractions::Example::StrictOneWay>>::kPrimarySize);
static_assert(offsetof(::fidl::internal::TransactionalRequest<::test_unknowninteractions::Example::StrictOneWay>, header) == 0);

template <>
struct TypeTraits<::fidl::WireRequest<::test_unknowninteractions::Example::StrictOneWay>> {
  static constexpr const fidl_type_t* kType =
      nullptr;
  static constexpr uint32_t kMaxNumHandles = 0;
  static constexpr uint32_t kMaxDepth = 0;
  static constexpr uint32_t kPrimarySize = 0;
  static constexpr uint32_t kPrimarySizeV1 = 0;
  static constexpr uint32_t kMaxOutOfLine = 0;
  static constexpr uint32_t kMaxOutOfLineV1 = 0;
  static constexpr bool kHasFlexibleEnvelope = false;
  static constexpr bool kHasEnvelope = false;
  static constexpr bool kHasPointer = false;
  static constexpr ::fidl::internal::TransactionalMessageKind kMessageKind =
      ::fidl::internal::TransactionalMessageKind::kRequest;
};

template <>
struct IsFidlType<::fidl::internal::TransactionalRequest<::test_unknowninteractions::Example::FlexibleOneWay>> : public std::true_type {};
template <>
struct IsFidlType<::fidl::WireRequest<::test_unknowninteractions::Example::FlexibleOneWay>> : public std::true_type {};
template <>
struct IsFidlTransactionalMessage<::fidl::internal::TransactionalRequest<::test_unknowninteractions::Example::FlexibleOneWay>> : public std::true_type {};
template <>
struct IsFidlTransactionalMessage<::fidl::WireRequest<::test_unknowninteractions::Example::FlexibleOneWay>> : public std::false_type {};

template <>
struct TypeTraits<::fidl::internal::TransactionalRequest<::test_unknowninteractions::Example::FlexibleOneWay>> {
  static constexpr const fidl_type_t* kType =
      nullptr;
  static constexpr uint32_t kMaxNumHandles = 0;
  static constexpr uint32_t kMaxDepth = 0;
  static constexpr uint32_t kPrimarySize = FIDL_ALIGN(0 + sizeof(fidl_message_header_t));
  static constexpr uint32_t kPrimarySizeV1 = FIDL_ALIGN(0 + sizeof(fidl_message_header_t));
  static constexpr uint32_t kMaxOutOfLine = 0;
  static constexpr uint32_t kMaxOutOfLineV1 = 0;
  static constexpr bool kHasFlexibleEnvelope = false;
  static constexpr bool kHasEnvelope = false;
  static constexpr bool kHasPointer = false;
  static constexpr ::fidl::internal::TransactionalMessageKind kMessageKind =
      ::fidl::internal::TransactionalMessageKind::kRequest;
};

static_assert(sizeof(::fidl::internal::TransactionalRequest<::test_unknowninteractions::Example::FlexibleOneWay>) == TypeTraits<::fidl::internal::TransactionalRequest<::test_unknowninteractions::Example::FlexibleOneWay>>::kPrimarySize);
static_assert(offsetof(::fidl::internal::TransactionalRequest<::test_unknowninteractions::Example::FlexibleOneWay>, header) == 0);

template <>
struct TypeTraits<::fidl::WireRequest<::test_unknowninteractions::Example::FlexibleOneWay>> {
  static constexpr const fidl_type_t* kType =
      nullptr;
  static constexpr uint32_t kMaxNumHandles = 0;
  static constexpr uint32_t kMaxDepth = 0;
  static constexpr uint32_t kPrimarySize = 0;
  static constexpr uint32_t kPrimarySizeV1 = 0;
  static constexpr uint32_t kMaxOutOfLine = 0;
  static constexpr uint32_t kMaxOutOfLineV1 = 0;
  static constexpr bool kHasFlexibleEnvelope = false;
  static constexpr bool kHasEnvelope = false;
  static constexpr bool kHasPointer = false;
  static constexpr ::fidl::internal::TransactionalMessageKind kMessageKind =
      ::fidl::internal::TransactionalMessageKind::kRequest;
};

template <>
struct IsFidlType<::fidl::internal::TransactionalRequest<::test_unknowninteractions::Example::StrictTwoWay>> : public std::true_type {};
template <>
struct IsFidlType<::fidl::WireRequest<::test_unknowninteractions::Example::StrictTwoWay>> : public std::true_type {};
template <>
struct IsFidlTransactionalMessage<::fidl::internal::TransactionalRequest<::test_unknowninteractions::Example::StrictTwoWay>> : public std::true_type {};
template <>
struct IsFidlTransactionalMessage<::fidl::WireRequest<::test_unknowninteractions::Example::StrictTwoWay>> : public std::false_type {};

template <>
struct TypeTraits<::fidl::internal::TransactionalRequest<::test_unknowninteractions::Example::StrictTwoWay>> {
  static constexpr const fidl_type_t* kType =
      nullptr;
  static constexpr uint32_t kMaxNumHandles = 0;
  static constexpr uint32_t kMaxDepth = 0;
  static constexpr uint32_t kPrimarySize = FIDL_ALIGN(0 + sizeof(fidl_message_header_t));
  static constexpr uint32_t kPrimarySizeV1 = FIDL_ALIGN(0 + sizeof(fidl_message_header_t));
  static constexpr uint32_t kMaxOutOfLine = 0;
  static constexpr uint32_t kMaxOutOfLineV1 = 0;
  static constexpr bool kHasFlexibleEnvelope = false;
  static constexpr bool kHasEnvelope = false;
  static constexpr bool kHasPointer = false;
  static constexpr ::fidl::internal::TransactionalMessageKind kMessageKind =
      ::fidl::internal::TransactionalMessageKind::kRequest;
};

static_assert(sizeof(::fidl::internal::TransactionalRequest<::test_unknowninteractions::Example::StrictTwoWay>) == TypeTraits<::fidl::internal::TransactionalRequest<::test_unknowninteractions::Example::StrictTwoWay>>::kPrimarySize);
static_assert(offsetof(::fidl::internal::TransactionalRequest<::test_unknowninteractions::Example::StrictTwoWay>, header) == 0);

template <>
struct TypeTraits<::fidl::WireRequest<::test_unknowninteractions::Example::StrictTwoWay>> {
  static constexpr const fidl_type_t* kType =
      nullptr;
  static constexpr uint32_t kMaxNumHandles = 0;
  static constexpr uint32_t kMaxDepth = 0;
  static constexpr uint32_t kPrimarySize = 0;
  static constexpr uint32_t kPrimarySizeV1 = 0;
  static constexpr uint32_t kMaxOutOfLine = 0;
  static constexpr uint32_t kMaxOutOfLineV1 = 0;
  static constexpr bool kHasFlexibleEnvelope = false;
  static constexpr bool kHasEnvelope = false;
  static constexpr bool kHasPointer = false;
  static constexpr ::fidl::internal::TransactionalMessageKind kMessageKind =
      ::fidl::internal::TransactionalMessageKind::kRequest;
};

template <>
struct IsFidlType<::fidl::internal::TransactionalResponse<::test_unknowninteractions::Example::StrictTwoWay>> : public std::true_type {};
template <>
struct IsFidlType<::fidl::WireResponse<::test_unknowninteractions::Example::StrictTwoWay>> : public std::true_type {};
template <>
struct IsFidlTransactionalMessage<::fidl::internal::TransactionalResponse<::test_unknowninteractions::Example::StrictTwoWay>> : public std::true_type {};
template <>
struct IsFidlTransactionalMessage<::fidl::WireResponse<::test_unknowninteractions::Example::StrictTwoWay>> : public std::false_type {};

template <>
struct TypeTraits<::fidl::internal::TransactionalResponse<::test_unknowninteractions::Example::StrictTwoWay>> {
  static constexpr const fidl_type_t* kType =
      nullptr;
  static constexpr bool kHasResponseBody = false;
  static constexpr uint32_t kMaxNumHandles = 0;
  static constexpr uint32_t kMaxDepth = 0;
  static constexpr uint32_t kPrimarySize = FIDL_ALIGN(0 + sizeof(fidl_message_header_t));
  static constexpr uint32_t kPrimarySizeV1 = FIDL_ALIGN(0 + sizeof(fidl_message_header_t));
  static constexpr uint32_t kMaxOutOfLine = 0;
  static constexpr uint32_t kMaxOutOfLineV1 = 0;
  static constexpr bool kHasFlexibleEnvelope = false;
  static constexpr bool kHasEnvelope = false;
  static constexpr bool kHasPointer = false;
  static constexpr ::fidl::internal::TransactionalMessageKind kMessageKind =
      ::fidl::internal::TransactionalMessageKind::kResponse;
};

static_assert(sizeof(::fidl::internal::TransactionalResponse<::test_unknowninteractions::Example::StrictTwoWay>) == TypeTraits<::fidl::internal::TransactionalResponse<::test_unknowninteractions::Example::StrictTwoWay>>::kPrimarySize);
static_assert(offsetof(::fidl::internal::TransactionalResponse<::test_unknowninteractions::Example::StrictTwoWay>, header) == 0);

template <>
struct TypeTraits<::fidl::WireResponse<::test_unknowninteractions::Example::StrictTwoWay>> {
  static constexpr const fidl_type_t* kType =
      nullptr;
  static constexpr bool kHasResponseBody = false;
  static constexpr uint32_t kMaxNumHandles = 0;
  static constexpr uint32_t kMaxDepth = 0;
  static constexpr uint32_t kPrimarySize = 0;
  static constexpr uint32_t kPrimarySizeV1 = 0;
  static constexpr uint32_t kMaxOutOfLine = 0;
  static constexpr uint32_t kMaxOutOfLineV1 = 0;
  static constexpr bool kHasFlexibleEnvelope = false;
  static constexpr bool kHasEnvelope = false;
  static constexpr bool kHasPointer = false;
  static constexpr ::fidl::internal::TransactionalMessageKind kMessageKind =
      ::fidl::internal::TransactionalMessageKind::kResponse;
};

template <>
struct IsFidlType<::fidl::internal::TransactionalRequest<::test_unknowninteractions::Example::FlexibleTwoWay>> : public std::true_type {};
template <>
struct IsFidlType<::fidl::WireRequest<::test_unknowninteractions::Example::FlexibleTwoWay>> : public std::true_type {};
template <>
struct IsFidlTransactionalMessage<::fidl::internal::TransactionalRequest<::test_unknowninteractions::Example::FlexibleTwoWay>> : public std::true_type {};
template <>
struct IsFidlTransactionalMessage<::fidl::WireRequest<::test_unknowninteractions::Example::FlexibleTwoWay>> : public std::false_type {};

template <>
struct TypeTraits<::fidl::internal::TransactionalRequest<::test_unknowninteractions::Example::FlexibleTwoWay>> {
  static constexpr const fidl_type_t* kType =
      nullptr;
  static constexpr uint32_t kMaxNumHandles = 0;
  static constexpr uint32_t kMaxDepth = 0;
  static constexpr uint32_t kPrimarySize = FIDL_ALIGN(0 + sizeof(fidl_message_header_t));
  static constexpr uint32_t kPrimarySizeV1 = FIDL_ALIGN(0 + sizeof(fidl_message_header_t));
  static constexpr uint32_t kMaxOutOfLine = 0;
  static constexpr uint32_t kMaxOutOfLineV1 = 0;
  static constexpr bool kHasFlexibleEnvelope = false;
  static constexpr bool kHasEnvelope = false;
  static constexpr bool kHasPointer = false;
  static constexpr ::fidl::internal::TransactionalMessageKind kMessageKind =
      ::fidl::internal::TransactionalMessageKind::kRequest;
};

static_assert(sizeof(::fidl::internal::TransactionalRequest<::test_unknowninteractions::Example::FlexibleTwoWay>) == TypeTraits<::fidl::internal::TransactionalRequest<::test_unknowninteractions::Example::FlexibleTwoWay>>::kPrimarySize);
static_assert(offsetof(::fidl::internal::TransactionalRequest<::test_unknowninteractions::Example::FlexibleTwoWay>, header) == 0);

template <>
struct TypeTraits<::fidl::WireRequest<::test_unknowninteractions::Example::FlexibleTwoWay>> {
  static constexpr const fidl_type_t* kType =
      nullptr;
  static constexpr uint32_t kMaxNumHandles = 0;
  static constexpr uint32_t kMaxDepth = 0;
  static constexpr uint32_t kPrimarySize = 0;
  static constexpr uint32_t kPrimarySizeV1 = 0;
  static constexpr uint32_t kMaxOutOfLine = 0;
  static constexpr uint32_t kMaxOutOfLineV1 = 0;
  static constexpr bool kHasFlexibleEnvelope = false;
  static constexpr bool kHasEnvelope = false;
  static constexpr bool kHasPointer = false;
  static constexpr ::fidl::internal::TransactionalMessageKind kMessageKind =
      ::fidl::internal::TransactionalMessageKind::kRequest;
};

template <>
struct IsFidlType<::fidl::internal::TransactionalResponse<::test_unknowninteractions::Example::FlexibleTwoWay>> : public std::true_type {};
template <>
struct IsFidlType<::fidl::WireResponse<::test_unknowninteractions::Example::FlexibleTwoWay>> : public std::true_type {};
template <>
struct IsFidlTransactionalMessage<::fidl::internal::TransactionalResponse<::test_unknowninteractions::Example::FlexibleTwoWay>> : public std::true_type {};
template <>
struct IsFidlTransactionalMessage<::fidl::WireResponse<::test_unknowninteractions::Example::FlexibleTwoWay>> : public std::false_type {};

template <>
struct TypeTraits<::fidl::internal::TransactionalResponse<::test_unknowninteractions::Example::FlexibleTwoWay>> {
  static constexpr const fidl_type_t* kType =
      &::test_unknowninteractions::test_unknowninteractions_ExampleFlexibleTwoWayTopResponseTable;
  static constexpr bool kHasResponseBody = true;
  static constexpr uint32_t kMaxNumHandles = 0;
  static constexpr uint32_t kMaxDepth = 1;
  static constexpr uint32_t kPrimarySize = FIDL_ALIGN(16 + sizeof(fidl_message_header_t));
  static constexpr uint32_t kPrimarySizeV1 = FIDL_ALIGN(24 + sizeof(fidl_message_header_t));
  static constexpr uint32_t kMaxOutOfLine = 0;
  static constexpr uint32_t kMaxOutOfLineV1 = 8;
  static constexpr bool kHasFlexibleEnvelope = false;
  static constexpr bool kHasEnvelope = false;
  static constexpr bool kHasPointer = true;
  static constexpr ::fidl::internal::TransactionalMessageKind kMessageKind =
      ::fidl::internal::TransactionalMessageKind::kResponse;
};

static_assert(sizeof(::fidl::internal::TransactionalResponse<::test_unknowninteractions::Example::FlexibleTwoWay>) == TypeTraits<::fidl::internal::TransactionalResponse<::test_unknowninteractions::Example::FlexibleTwoWay>>::kPrimarySize);
static_assert(offsetof(::fidl::internal::TransactionalResponse<::test_unknowninteractions::Example::FlexibleTwoWay>, header) == 0);
static_assert(offsetof(::fidl::internal::TransactionalResponse<::test_unknowninteractions::Example::FlexibleTwoWay>, body) == sizeof(fidl_message_header_t));

template <>
struct TypeTraits<::fidl::WireResponse<::test_unknowninteractions::Example::FlexibleTwoWay>> {
  static constexpr const fidl_type_t* kType =
      &::test_unknowninteractions::test_unknowninteractions_ExampleFlexibleTwoWayTopResponseTable;
  static constexpr bool kHasResponseBody = true;
  static constexpr uint32_t kMaxNumHandles = 0;
  static constexpr uint32_t kMaxDepth = 1;
  static constexpr uint32_t kPrimarySize = 16;
  static constexpr uint32_t kPrimarySizeV1 = 24;
  static constexpr uint32_t kMaxOutOfLine = 0;
  static constexpr uint32_t kMaxOutOfLineV1 = 8;
  static constexpr bool kHasFlexibleEnvelope = false;
  static constexpr bool kHasEnvelope = false;
  static constexpr bool kHasPointer = true;
  static constexpr ::fidl::internal::TransactionalMessageKind kMessageKind =
      ::fidl::internal::TransactionalMessageKind::kResponse;
};
static_assert(sizeof(::fidl::WireResponse<::test_unknowninteractions::Example::FlexibleTwoWay>) == TypeTraits<::fidl::WireResponse<::test_unknowninteractions::Example::FlexibleTwoWay>>::kPrimarySize);
static_assert(offsetof(::fidl::WireResponse<::test_unknowninteractions::Example::FlexibleTwoWay>, result) == 0);

template <>
struct IsFidlType<::fidl::internal::TransactionalEvent<::test_unknowninteractions::Example::StrictEvent>> : public std::true_type {};
template <>
struct IsFidlType<::fidl::WireEvent<::test_unknowninteractions::Example::StrictEvent>> : public std::true_type {};
template <>
struct IsFidlTransactionalMessage<::fidl::internal::TransactionalEvent<::test_unknowninteractions::Example::StrictEvent>> : public std::true_type {};
template <>
struct IsFidlTransactionalMessage<::fidl::WireEvent<::test_unknowninteractions::Example::StrictEvent>> : public std::false_type {};

template <>
struct TypeTraits<::fidl::internal::TransactionalEvent<::test_unknowninteractions::Example::StrictEvent>> {
  static constexpr const fidl_type_t* kType =
      nullptr;
  static constexpr uint32_t kMaxNumHandles = 0;
  static constexpr uint32_t kMaxDepth = 0;
  static constexpr uint32_t kPrimarySize = FIDL_ALIGN(0 + sizeof(fidl_message_header_t));
  static constexpr uint32_t kPrimarySizeV1 = FIDL_ALIGN(0 + sizeof(fidl_message_header_t));
  static constexpr uint32_t kMaxOutOfLine = 0;
  static constexpr uint32_t kMaxOutOfLineV1 = 0;
  static constexpr bool kHasFlexibleEnvelope = false;
  static constexpr bool kHasEnvelope = false;
  static constexpr bool kHasPointer = false;
  static constexpr ::fidl::internal::TransactionalMessageKind kMessageKind =
      ::fidl::internal::TransactionalMessageKind::kResponse;
};

static_assert(sizeof(::fidl::internal::TransactionalEvent<::test_unknowninteractions::Example::StrictEvent>) == TypeTraits<::fidl::internal::TransactionalEvent<::test_unknowninteractions::Example::StrictEvent>>::kPrimarySize);
static_assert(offsetof(::fidl::internal::TransactionalEvent<::test_unknowninteractions::Example::StrictEvent>, header) == 0);

template <>
struct TypeTraits<::fidl::WireEvent<::test_unknowninteractions::Example::StrictEvent>> {
  static constexpr const fidl_type_t* kType =
      nullptr;
  static constexpr uint32_t kMaxNumHandles = 0;
  static constexpr uint32_t kMaxDepth = 0;
  static constexpr uint32_t kPrimarySize = 0;
  static constexpr uint32_t kPrimarySizeV1 = 0;
  static constexpr uint32_t kMaxOutOfLine = 0;
  static constexpr uint32_t kMaxOutOfLineV1 = 0;
  static constexpr bool kHasFlexibleEnvelope = false;
  static constexpr bool kHasEnvelope = false;
  static constexpr bool kHasPointer = false;
  static constexpr ::fidl::internal::TransactionalMessageKind kMessageKind =
      ::fidl::internal::TransactionalMessageKind::kResponse;
};

template <>
struct IsFidlType<::fidl::internal::TransactionalEvent<::test_unknowninteractions::Example::FlexibleEvent>> : public std::true_type {};
template <>
struct IsFidlType<::fidl::WireEvent<::test_unknowninteractions::Example::FlexibleEvent>> : public std::true_type {};
template <>
struct IsFidlTransactionalMessage<::fidl::internal::TransactionalEvent<::test_unknowninteractions::Example::FlexibleEvent>> : public std::true_type {};
template <>
struct IsFidlTransactionalMessage<::fidl::WireEvent<::test_unknowninteractions::Example::FlexibleEvent>> : public std::false_type {};

template <>
struct TypeTraits<::fidl::internal::TransactionalEvent<::test_unknowninteractions::Example::FlexibleEvent>> {
  static constexpr const fidl_type_t* kType =
      nullptr;
  static constexpr uint32_t kMaxNumHandles = 0;
  static constexpr uint32_t kMaxDepth = 0;
  static constexpr uint32_t kPrimarySize = FIDL_ALIGN(0 + sizeof(fidl_message_header_t));
  static constexpr uint32_t kPrimarySizeV1 = FIDL_ALIGN(0 + sizeof(fidl_message_header_t));
  static constexpr uint32_t kMaxOutOfLine = 0;
  static constexpr uint32_t kMaxOutOfLineV1 = 0;
  static constexpr bool kHasFlexibleEnvelope = false;
  static constexpr bool kHasEnvelope = false;
  static constexpr bool kHasPointer = false;
  static constexpr ::fidl::internal::TransactionalMessageKind kMessageKind =
      ::fidl::internal::TransactionalMessageKind::kResponse;
};

static_assert(sizeof(::fidl::internal::TransactionalEvent<::test_unknowninteractions::Example::FlexibleEvent>) == TypeTraits<::fidl::internal::TransactionalEvent<::test_unknowninteractions::Example::FlexibleEvent>>::kPrimarySize);
static_assert(offsetof(::fidl::internal::TransactionalEvent<::test_unknowninteractions::Example::FlexibleEvent>, header) == 0);

template <>
struct TypeTraits<::fidl::WireEvent<::test_unknowninteractions::Example::FlexibleEvent>> {
  static constexpr const fidl_type_t* kType =
      nullptr;
  static constexpr uint32_t kMaxNumHandles = 0;
  static constexpr uint32_t kMaxDepth = 0;
  static constexpr uint32_t kPrimarySize = 0;
  static constexpr uint32_t kPrimarySizeV1 = 0;
  static constexpr uint32_t kMaxOutOfLine = 0;
  static constexpr uint32_t kMaxOutOfLineV1 = 0;
  static constexpr bool kHasFlexibleEnvelope = false;
  static constexpr bool kHasEnvelope = false;
  static constexpr bool kHasPointer = false;
  static constexpr ::fidl::internal::TransactionalMessageKind kMessageKind =
      ::fidl::internal::TransactionalMessageKind::kResponse;
};
#ifdef __Fuchsia__
}  // namespace fidl
template <>
struct ::fidl::internal::IncomingHandleStorage<::fidl::internal::TransactionalResponse<::test_unknowninteractions::Example::StrictTwoWay>> final
    : public ::fidl::internal::ChannelHandleStorageBase<::fidl::internal::IncomingHandleStorage<::fidl::internal::TransactionalResponse<::test_unknowninteractions::Example::StrictTwoWay>>> {
  static constexpr uint32_t kNumHandles =
      fidl::internal::ClampedHandleCount<::fidl::WireResponse<::test_unknowninteractions::Example::StrictTwoWay>, fidl::MessageDirection::kReceiving>();

  ::std::array<zx_handle_t, kNumHandles> handles_;
  ::std::array<fidl_channel_handle_metadata_t, kNumHandles> handle_metadata_;
};

template <>
struct ::fidl::internal::IncomingMessageStorage<::fidl::internal::TransactionalResponse<::test_unknowninteractions::Example::StrictTwoWay>> final
    : public ::fidl::internal::ChannelMessageStorageBase<::fidl::internal::IncomingMessageStorage<::fidl::internal::TransactionalResponse<::test_unknowninteractions::Example::StrictTwoWay>>> {
  ::fidl::internal::InlineMessageBuffer<16> bytes_;
  ::fidl::internal::IncomingHandleStorage<::fidl::internal::TransactionalResponse<::test_unknowninteractions::Example::StrictTwoWay>> handles_storage_;
};
template <>
struct ::fidl::internal::IncomingHandleStorage<::fidl::internal::TransactionalResponse<::test_unknowninteractions::Example::FlexibleTwoWay>> final
    : public ::fidl::internal::ChannelHandleStorageBase<::fidl::internal::IncomingHandleStorage<::fidl::internal::TransactionalResponse<::test_unknowninteractions::Example::FlexibleTwoWay>>> {
  static constexpr uint32_t kNumHandles =
      fidl::internal::ClampedHandleCount<::fidl::WireResponse<::test_unknowninteractions::Example::FlexibleTwoWay>, fidl::MessageDirection::kReceiving>();

  ::std::array<zx_handle_t, kNumHandles> handles_;
  ::std::array<fidl_channel_handle_metadata_t, kNumHandles> handle_metadata_;
};

template <>
struct ::fidl::internal::IncomingMessageStorage<::fidl::internal::TransactionalResponse<::test_unknowninteractions::Example::FlexibleTwoWay>> final
    : public ::fidl::internal::ChannelMessageStorageBase<::fidl::internal::IncomingMessageStorage<::fidl::internal::TransactionalResponse<::test_unknowninteractions::Example::FlexibleTwoWay>>> {
  ::fidl::internal::InlineMessageBuffer<48> bytes_;
  ::fidl::internal::IncomingHandleStorage<::fidl::internal::TransactionalResponse<::test_unknowninteractions::Example::FlexibleTwoWay>> handles_storage_;
};

template <>
class [[nodiscard]] ::fidl::WireResult<::test_unknowninteractions::Example::StrictOneWay> final : public ::fidl::Status {
 public:
  WireResult(
      ::fidl::UnownedClientEnd<::test_unknowninteractions::Example> client,
      ::fidl::internal::TransactionalRequest<::test_unknowninteractions::Example::StrictOneWay>* request);

  explicit WireResult(const ::fidl::Status& result) : ::fidl::Status(result) {}
  WireResult(WireResult&&) = delete;
  WireResult(const WireResult&) = delete;
  WireResult& operator=(WireResult&&) = delete;
  WireResult& operator=(const WireResult&) = delete;
  ~WireResult() = default;
};

template <>
class [[nodiscard]] ::fidl::WireUnownedResult<::test_unknowninteractions::Example::StrictOneWay> final : public ::fidl::Status {
 public:
  explicit WireUnownedResult(::fidl::UnownedClientEnd<::test_unknowninteractions::Example> client_end, ::fidl::internal::AnyBufferAllocator& allocator, ::fidl::internal::TransactionalRequest<::test_unknowninteractions::Example::StrictOneWay>* request);

  explicit WireUnownedResult(const ::fidl::Status& result) : ::fidl::Status(result) {}
  WireUnownedResult(WireUnownedResult&&) = delete;
  WireUnownedResult(const WireUnownedResult&) = delete;
  WireUnownedResult& operator=(WireUnownedResult&&) = delete;
  WireUnownedResult& operator=(const WireUnownedResult&) = delete;
  ~WireUnownedResult() = default;
};

template <>
class [[nodiscard]] ::fidl::WireResult<::test_unknowninteractions::Example::FlexibleOneWay> final : public ::fidl::Status {
 public:
  WireResult(
      ::fidl::UnownedClientEnd<::test_unknowninteractions::Example> client,
      ::fidl::internal::TransactionalRequest<::test_unknowninteractions::Example::FlexibleOneWay>* request);

  explicit WireResult(const ::fidl::Status& result) : ::fidl::Status(result) {}
  WireResult(WireResult&&) = delete;
  WireResult(const WireResult&) = delete;
  WireResult& operator=(WireResult&&) = delete;
  WireResult& operator=(const WireResult&) = delete;
  ~WireResult() = default;
};

template <>
class [[nodiscard]] ::fidl::WireUnownedResult<::test_unknowninteractions::Example::FlexibleOneWay> final : public ::fidl::Status {
 public:
  explicit WireUnownedResult(::fidl::UnownedClientEnd<::test_unknowninteractions::Example> client_end, ::fidl::internal::AnyBufferAllocator& allocator, ::fidl::internal::TransactionalRequest<::test_unknowninteractions::Example::FlexibleOneWay>* request);

  explicit WireUnownedResult(const ::fidl::Status& result) : ::fidl::Status(result) {}
  WireUnownedResult(WireUnownedResult&&) = delete;
  WireUnownedResult(const WireUnownedResult&) = delete;
  WireUnownedResult& operator=(WireUnownedResult&&) = delete;
  WireUnownedResult& operator=(const WireUnownedResult&) = delete;
  ~WireUnownedResult() = default;
};

template <>
class [[nodiscard]] ::fidl::WireResult<::test_unknowninteractions::Example::StrictTwoWay> final : public ::fidl::Status {
 public:
  WireResult(
      ::fidl::UnownedClientEnd<::test_unknowninteractions::Example> client,
      ::fidl::internal::TransactionalRequest<::test_unknowninteractions::Example::StrictTwoWay>* request, std::optional<zx::time> deadline = std::nullopt);

  explicit WireResult(const ::fidl::Status& result) : ::fidl::Status(result) {}
  WireResult(WireResult&&) = delete;
  WireResult(const WireResult&) = delete;
  WireResult& operator=(WireResult&&) = delete;
  WireResult& operator=(const WireResult&) = delete;
  ~WireResult() = default;

 private:
  ::fidl::internal::InlineMessageBuffer<16> bytes_;
  ::fidl::internal::DecodedValue<::fidl::internal::TransactionalResponse<::test_unknowninteractions::Example::StrictTwoWay>> decoded_;
};

template <>
class [[nodiscard]] ::fidl::WireUnownedResult<::test_unknowninteractions::Example::StrictTwoWay> final : public ::fidl::Status {
 public:
  explicit WireUnownedResult(::fidl::UnownedClientEnd<::test_unknowninteractions::Example> client_end, ::fidl::internal::AnyBufferAllocator& allocator, ::fidl::internal::TransactionalRequest<::test_unknowninteractions::Example::StrictTwoWay>* request);
  explicit WireUnownedResult(::fidl::internal::TransactionalResponse<::test_unknowninteractions::Example::StrictTwoWay>* response)
      : fidl::Status(fidl::Status::Ok()), decoded_(response) {
  }

  explicit WireUnownedResult(
      ::fidl::unstable::DecodedMessage<::fidl::internal::TransactionalResponse<::test_unknowninteractions::Example::StrictTwoWay>>&& decoded,
      ::fidl::internal::MessageStorageViewBase* storage_view) : fidl::Status(decoded) {
    if (decoded.ok()) {
      decoded_ = decoded.Take();
    }
  }

  explicit WireUnownedResult(const ::fidl::Status& result) : ::fidl::Status(result) {}
  WireUnownedResult(WireUnownedResult&&) = delete;
  WireUnownedResult(const WireUnownedResult&) = delete;
  WireUnownedResult& operator=(WireUnownedResult&&) = delete;
  WireUnownedResult& operator=(const WireUnownedResult&) = delete;
  ~WireUnownedResult() = default;

 private:
  ::fidl::internal::DecodedValue<::fidl::internal::TransactionalResponse<::test_unknowninteractions::Example::StrictTwoWay>> decoded_;
};

template <>
class [[nodiscard]] ::fidl::WireResult<::test_unknowninteractions::Example::FlexibleTwoWay> final : public ::fidl::Status {
 public:
  WireResult(
      ::fidl::UnownedClientEnd<::test_unknowninteractions::Example> client,
      ::fidl::internal::TransactionalRequest<::test_unknowninteractions::Example::FlexibleTwoWay>* request, std::optional<zx::time> deadline = std::nullopt);

  explicit WireResult(const ::fidl::Status& result) : ::fidl::Status(result) {}
  WireResult(WireResult&&) = delete;
  WireResult(const WireResult&) = delete;
  WireResult& operator=(WireResult&&) = delete;
  WireResult& operator=(const WireResult&) = delete;
  ~WireResult() = default;
  ::fidl::WireResponse<::test_unknowninteractions::Example::FlexibleTwoWay>* Unwrap() {
    ZX_ASSERT(ok());
    return &decoded_.Value()->body;
  }
  const ::fidl::WireResponse<::test_unknowninteractions::Example::FlexibleTwoWay>* Unwrap() const {
    ZX_ASSERT(ok());
    return &decoded_.Value()->body;
  }

  ::fidl::WireResponse<::test_unknowninteractions::Example::FlexibleTwoWay>* Unwrap_NEW() {
    ZX_ASSERT(ok());
    return &decoded_.Value()->body;
  }
  const ::fidl::WireResponse<::test_unknowninteractions::Example::FlexibleTwoWay>* Unwrap_NEW() const {
    ZX_ASSERT(ok());
    return &decoded_.Value()->body;
  }

  ::fidl::WireResponse<::test_unknowninteractions::Example::FlexibleTwoWay>& value() { return *Unwrap(); }
  const ::fidl::WireResponse<::test_unknowninteractions::Example::FlexibleTwoWay>& value() const { return *Unwrap(); }

  ::fidl::WireResponse<::test_unknowninteractions::Example::FlexibleTwoWay>& value_NEW() { return *Unwrap_NEW(); }
  const ::fidl::WireResponse<::test_unknowninteractions::Example::FlexibleTwoWay>& value_NEW() const { return *Unwrap_NEW(); }

  ::fidl::WireResponse<::test_unknowninteractions::Example::FlexibleTwoWay>* operator->() { return &value(); }
  const ::fidl::WireResponse<::test_unknowninteractions::Example::FlexibleTwoWay>* operator->() const { return &value(); }

  ::fidl::WireResponse<::test_unknowninteractions::Example::FlexibleTwoWay>& operator*() { return value(); }
  const ::fidl::WireResponse<::test_unknowninteractions::Example::FlexibleTwoWay>& operator*() const { return value(); }

 private:
  ::fidl::internal::InlineMessageBuffer<48> bytes_;
  ::fidl::internal::DecodedValue<::fidl::internal::TransactionalResponse<::test_unknowninteractions::Example::FlexibleTwoWay>> decoded_;
};

template <>
class [[nodiscard]] ::fidl::WireUnownedResult<::test_unknowninteractions::Example::FlexibleTwoWay> final : public ::fidl::Status {
 public:
  explicit WireUnownedResult(::fidl::UnownedClientEnd<::test_unknowninteractions::Example> client_end, ::fidl::internal::AnyBufferAllocator& allocator, ::fidl::internal::TransactionalRequest<::test_unknowninteractions::Example::FlexibleTwoWay>* request);
  explicit WireUnownedResult(::fidl::internal::TransactionalResponse<::test_unknowninteractions::Example::FlexibleTwoWay>* response)
      : fidl::Status(fidl::Status::Ok()), decoded_(response) {
  }

  explicit WireUnownedResult(
      ::fidl::unstable::DecodedMessage<::fidl::internal::TransactionalResponse<::test_unknowninteractions::Example::FlexibleTwoWay>>&& decoded,
      ::fidl::internal::MessageStorageViewBase* storage_view) : fidl::Status(decoded) {
    if (decoded.ok()) {
      decoded_ = decoded.Take();
    }
  }

  explicit WireUnownedResult(const ::fidl::Status& result) : ::fidl::Status(result) {}
  WireUnownedResult(WireUnownedResult&&) = delete;
  WireUnownedResult(const WireUnownedResult&) = delete;
  WireUnownedResult& operator=(WireUnownedResult&&) = delete;
  WireUnownedResult& operator=(const WireUnownedResult&) = delete;
  ~WireUnownedResult() = default;
  ::fidl::WireResponse<::test_unknowninteractions::Example::FlexibleTwoWay>* Unwrap() {
    ZX_ASSERT(ok());
    return &decoded_.Value()->body;
  }
  const ::fidl::WireResponse<::test_unknowninteractions::Example::FlexibleTwoWay>* Unwrap() const {
    ZX_ASSERT(ok());
    return &decoded_.Value()->body;
  }

  ::fidl::WireResponse<::test_unknowninteractions::Example::FlexibleTwoWay>* Unwrap_NEW() {
    ZX_ASSERT(ok());
    return &decoded_.Value()->body;
  }
  const ::fidl::WireResponse<::test_unknowninteractions::Example::FlexibleTwoWay>* Unwrap_NEW() const {
    ZX_ASSERT(ok());
    return &decoded_.Value()->body;
  }

  ::fidl::WireResponse<::test_unknowninteractions::Example::FlexibleTwoWay>& value() { return *Unwrap(); }
  const ::fidl::WireResponse<::test_unknowninteractions::Example::FlexibleTwoWay>& value() const { return *Unwrap(); }

  ::fidl::WireResponse<::test_unknowninteractions::Example::FlexibleTwoWay>& value_NEW() { return *Unwrap_NEW(); }
  const ::fidl::WireResponse<::test_unknowninteractions::Example::FlexibleTwoWay>& value_NEW() const { return *Unwrap_NEW(); }

  ::fidl::WireResponse<::test_unknowninteractions::Example::FlexibleTwoWay>* operator->() { return &value(); }
  const ::fidl::WireResponse<::test_unknowninteractions::Example::FlexibleTwoWay>* operator->() const { return &value(); }

  ::fidl::WireResponse<::test_unknowninteractions::Example::FlexibleTwoWay>& operator*() { return value(); }
  const ::fidl::WireResponse<::test_unknowninteractions::Example::FlexibleTwoWay>& operator*() const { return value(); }

 private:
  ::fidl::internal::DecodedValue<::fidl::internal::TransactionalResponse<::test_unknowninteractions::Example::FlexibleTwoWay>> decoded_;
};
template <>
class ::fidl::internal::WireEventHandlerInterface<::test_unknowninteractions::Example> {
 public:
  WireEventHandlerInterface() = default;
  virtual ~WireEventHandlerInterface() = default;
  virtual void StrictEvent(::fidl::WireEvent<::test_unknowninteractions::Example::StrictEvent>* event) = 0;
  virtual void FlexibleEvent(::fidl::WireEvent<::test_unknowninteractions::Example::FlexibleEvent>* event) = 0;
};

template <>
class ::fidl::WireAsyncEventHandler<::test_unknowninteractions::Example>
    : public ::fidl::internal::WireEventHandlerInterface<::test_unknowninteractions::Example>, public ::fidl::internal::AsyncEventHandler {
 public:
  WireAsyncEventHandler() = default;
  void StrictEvent(::fidl::WireEvent<::test_unknowninteractions::Example::StrictEvent>* event) override {}
  void FlexibleEvent(::fidl::WireEvent<::test_unknowninteractions::Example::FlexibleEvent>* event) override {}
};

template <>
class ::fidl::WireSyncEventHandler<::test_unknowninteractions::Example> : public ::fidl::internal::WireEventHandlerInterface<::test_unknowninteractions::Example> {
 public:
  WireSyncEventHandler() = default;

  // Handle all possible events defined in this protocol.
  // Blocks to consume exactly one message from the channel, then call the corresponding virtual
  // method.
  ::fidl::Status HandleOneEvent(
      ::fidl::UnownedClientEnd<::test_unknowninteractions::Example> client_end);

 private:
  [[maybe_unused]] bool got_transitional_ = false;
};

template <>
class ::fidl::internal::WireEventDispatcher<::test_unknowninteractions::Example> final : public ::fidl::internal::IncomingEventDispatcher<::fidl::WireAsyncEventHandler<::test_unknowninteractions::Example>> {
 public:
  explicit WireEventDispatcher(::fidl::WireAsyncEventHandler<::test_unknowninteractions::Example>* event_handler)
      : IncomingEventDispatcher(event_handler) {}

 private:
  std::optional<::fidl::UnbindInfo> DispatchEvent(
      ::fidl::IncomingMessage& msg,
      ::fidl::internal::MessageStorageViewBase* storage_view) override;
};

// Methods to make a sync FIDL call directly on an unowned handle or a
// const reference to a |fidl::ClientEnd<::test_unknowninteractions::Example>|,
// avoiding setting up a client.
template <>
class ::fidl::internal::WireSyncClientImpl<::test_unknowninteractions::Example> final : public ::fidl::internal::SyncEndpointManagedVeneer<::fidl::internal::WireSyncClientImpl<::test_unknowninteractions::Example>> {
 public:
  // Allocates 32 bytes of message buffer on the stack. No heap allocation necessary.
  ::fidl::WireResult<::test_unknowninteractions::Example::StrictOneWay> StrictOneWay() {
    ::fidl::internal::TransactionalRequest<::test_unknowninteractions::Example::StrictOneWay> _request{};
    return ::fidl::WireResult<::test_unknowninteractions::Example::StrictOneWay>(_client_end(), &_request);
  }

  // Allocates 32 bytes of message buffer on the stack. No heap allocation necessary.
  ::fidl::WireResult<::test_unknowninteractions::Example::FlexibleOneWay> FlexibleOneWay() {
    ::fidl::internal::TransactionalRequest<::test_unknowninteractions::Example::FlexibleOneWay> _request{};
    return ::fidl::WireResult<::test_unknowninteractions::Example::FlexibleOneWay>(_client_end(), &_request);
  }

  // Allocates 32 bytes of message buffer on the stack. No heap allocation necessary.
  ::fidl::WireResult<::test_unknowninteractions::Example::StrictTwoWay> StrictTwoWay() {
    ::fidl::internal::TransactionalRequest<::test_unknowninteractions::Example::StrictTwoWay> _request{};
    return ::fidl::WireResult<::test_unknowninteractions::Example::StrictTwoWay>(_client_end(), &_request);
  }

  // Allocates 48 bytes of message buffer on the stack. No heap allocation necessary.
  ::fidl::WireResult<::test_unknowninteractions::Example::FlexibleTwoWay> FlexibleTwoWay() {
    ::fidl::internal::TransactionalRequest<::test_unknowninteractions::Example::FlexibleTwoWay> _request{};
    return ::fidl::WireResult<::test_unknowninteractions::Example::FlexibleTwoWay>(_client_end(), &_request);
  }

 private:
  ::fidl::UnownedClientEnd<::test_unknowninteractions::Example> _client_end() const {
    return ::fidl::UnownedClientEnd<::test_unknowninteractions::Example>(
        _transport().get<::fidl::internal::ChannelTransport>());
  }
};

template <>
class ::fidl::internal::WireSyncBufferClientImpl<::test_unknowninteractions::Example> final : public ::fidl::internal::SyncEndpointBufferVeneer<::fidl::internal::WireSyncBufferClientImpl<::test_unknowninteractions::Example>> {
 public:
  // Caller provides the backing storage for FIDL message via an argument to `.buffer()`.
  ::fidl::WireUnownedResult<::test_unknowninteractions::Example::StrictOneWay> StrictOneWay() {
    ::fidl::internal::TransactionalRequest<::test_unknowninteractions::Example::StrictOneWay> _request{};
    return ::fidl::WireUnownedResult<::test_unknowninteractions::Example::StrictOneWay>(_client_end(), _allocator(), &_request);
  }

  // Caller provides the backing storage for FIDL message via an argument to `.buffer()`.
  ::fidl::WireUnownedResult<::test_unknowninteractions::Example::FlexibleOneWay> FlexibleOneWay() {
    ::fidl::internal::TransactionalRequest<::test_unknowninteractions::Example::FlexibleOneWay> _request{};
    return ::fidl::WireUnownedResult<::test_unknowninteractions::Example::FlexibleOneWay>(_client_end(), _allocator(), &_request);
  }

  // Caller provides the backing storage for FIDL message via an argument to `.buffer()`.
  ::fidl::WireUnownedResult<::test_unknowninteractions::Example::StrictTwoWay> StrictTwoWay() {
    ::fidl::internal::TransactionalRequest<::test_unknowninteractions::Example::StrictTwoWay> _request{};
    return ::fidl::WireUnownedResult<::test_unknowninteractions::Example::StrictTwoWay>(_client_end(), _allocator(), &_request);
  }

  // Caller provides the backing storage for FIDL message via an argument to `.buffer()`.
  ::fidl::WireUnownedResult<::test_unknowninteractions::Example::FlexibleTwoWay> FlexibleTwoWay() {
    ::fidl::internal::TransactionalRequest<::test_unknowninteractions::Example::FlexibleTwoWay> _request{};
    return ::fidl::WireUnownedResult<::test_unknowninteractions::Example::FlexibleTwoWay>(_client_end(), _allocator(), &_request);
  }

 private:
  ::fidl::UnownedClientEnd<::test_unknowninteractions::Example> _client_end() const {
    return ::fidl::UnownedClientEnd<::test_unknowninteractions::Example>(
        _transport().get<::fidl::internal::ChannelTransport>());
  }
};

template <>
class ::fidl::internal::WireCompleterImpl<::test_unknowninteractions::Example::StrictTwoWay> : public ::fidl::internal::CompleterImplBase<::test_unknowninteractions::Example::StrictTwoWay> {
 public:
  using CompleterImplBase::CompleterImplBase;

  void Reply();
};

template <>
class ::fidl::internal::WireBufferCompleterImpl<::test_unknowninteractions::Example::StrictTwoWay> : public ::fidl::internal::BufferCompleterImplBase {
 public:
  using BufferCompleterImplBase::BufferCompleterImplBase;

  void Reply();
};

template <>
class ::fidl::internal::WireCompleterBase<::test_unknowninteractions::Example::StrictTwoWay> : public ::fidl::CompleterBase, public ::fidl::internal::WireCompleterImpl<::test_unknowninteractions::Example::StrictTwoWay> {
 public:
  WireCompleterBase(::fidl::Transaction* transaction, bool owned, bool expects_reply)
      : CompleterBase(transaction, owned, expects_reply),
        WireCompleterImpl(this) {}
  WireCompleterBase(WireCompleterBase&& other) noexcept
      : CompleterBase(std::move(other)), WireCompleterImpl(this) {}
  WireCompleterBase& operator=(WireCompleterBase&& other) noexcept {
    CompleterBase::operator=(std::move(other));
    WireCompleterImpl::_set_core(this);
    return *this;
  }
};

template <>
class ::fidl::internal::WireCompleterImpl<::test_unknowninteractions::Example::FlexibleTwoWay> : public ::fidl::internal::CompleterImplBase<::test_unknowninteractions::Example::FlexibleTwoWay> {
 public:
  using CompleterImplBase::CompleterImplBase;

  void Reply(::test_unknowninteractions::wire::ExampleFlexibleTwoWayResult result);
};

template <>
class ::fidl::internal::WireBufferCompleterImpl<::test_unknowninteractions::Example::FlexibleTwoWay> : public ::fidl::internal::BufferCompleterImplBase {
 public:
  using BufferCompleterImplBase::BufferCompleterImplBase;

  void Reply(::test_unknowninteractions::wire::ExampleFlexibleTwoWayResult result);
};

template <>
class ::fidl::internal::WireCompleterBase<::test_unknowninteractions::Example::FlexibleTwoWay> : public ::fidl::CompleterBase, public ::fidl::internal::WireCompleterImpl<::test_unknowninteractions::Example::FlexibleTwoWay> {
 public:
  WireCompleterBase(::fidl::Transaction* transaction, bool owned, bool expects_reply)
      : CompleterBase(transaction, owned, expects_reply),
        WireCompleterImpl(this) {}
  WireCompleterBase(WireCompleterBase&& other) noexcept
      : CompleterBase(std::move(other)), WireCompleterImpl(this) {}
  WireCompleterBase& operator=(WireCompleterBase&& other) noexcept {
    CompleterBase::operator=(std::move(other));
    WireCompleterImpl::_set_core(this);
    return *this;
  }
};

// Pure-virtual interface to be implemented by a server.
// This interface uses typed channels (i.e. |fidl::ClientEnd<SomeProtocol>|
// and |fidl::ServerEnd<SomeProtocol>|).
template <>
class ::fidl::WireServer<::test_unknowninteractions::Example> : public ::fidl::internal::IncomingMessageDispatcher {
 public:
  WireServer() = default;
  virtual ~WireServer() = default;

  // The FIDL protocol type that is implemented by this server.
  using _EnclosingProtocol = ::test_unknowninteractions::Example;

  using StrictOneWayCompleter = ::fidl::internal::WireCompleter<::test_unknowninteractions::Example::StrictOneWay>;
  using StrictOneWayRequestView = ::fidl::internal::WireRequestView<::test_unknowninteractions::Example::StrictOneWay>;

  virtual void StrictOneWay(
      StrictOneWayRequestView request, StrictOneWayCompleter::Sync& completer) = 0;

  using FlexibleOneWayCompleter = ::fidl::internal::WireCompleter<::test_unknowninteractions::Example::FlexibleOneWay>;
  using FlexibleOneWayRequestView = ::fidl::internal::WireRequestView<::test_unknowninteractions::Example::FlexibleOneWay>;

  virtual void FlexibleOneWay(
      FlexibleOneWayRequestView request, FlexibleOneWayCompleter::Sync& completer) = 0;

  using StrictTwoWayCompleter = ::fidl::internal::WireCompleter<::test_unknowninteractions::Example::StrictTwoWay>;
  using StrictTwoWayRequestView = ::fidl::internal::WireRequestView<::test_unknowninteractions::Example::StrictTwoWay>;

  virtual void StrictTwoWay(
      StrictTwoWayRequestView request, StrictTwoWayCompleter::Sync& completer) = 0;

  using FlexibleTwoWayCompleter = ::fidl::internal::WireCompleter<::test_unknowninteractions::Example::FlexibleTwoWay>;
  using FlexibleTwoWayRequestView = ::fidl::internal::WireRequestView<::test_unknowninteractions::Example::FlexibleTwoWay>;

  virtual void FlexibleTwoWay(
      FlexibleTwoWayRequestView request, FlexibleTwoWayCompleter::Sync& completer) = 0;

 private:
  void dispatch_message(
      ::fidl::IncomingMessage&& msg, ::fidl::Transaction* txn,
      ::fidl::internal::MessageStorageViewBase* storage_view) final;
};
namespace fidl {
#endif  // __Fuchsia__

#ifdef __Fuchsia__
}  // namespace fidl
template <>
class ::fidl::internal::WireWeakOnewayClientImpl<::test_unknowninteractions::Example> : public ::fidl::internal::ClientImplBase {
 public:
  using ClientImplBase::ClientImplBase;

  // Allocates 32 bytes of message buffer on the stack. No heap allocation necessary.
  ::fidl::Status StrictOneWay();

  // Allocates 32 bytes of message buffer on the stack. No heap allocation necessary.
  ::fidl::Status FlexibleOneWay();
};

template <>
class ::fidl::internal::WireWeakAsyncClientImpl<::test_unknowninteractions::Example> final : public ::fidl::internal::WireWeakOnewayClientImpl<::test_unknowninteractions::Example> {
 public:
  using WireWeakOnewayClientImpl::WireWeakOnewayClientImpl;
  // Allocates 16 bytes of request buffer on the stack. The callback is stored on the heap.
  ::fidl::internal::WireThenable<::test_unknowninteractions::Example::StrictTwoWay> StrictTwoWay();
  // Allocates 16 bytes of request buffer on the stack. The callback is stored on the heap.
  ::fidl::internal::WireThenable<::test_unknowninteractions::Example::FlexibleTwoWay> FlexibleTwoWay();
};

template <>
class ::fidl::internal::WireWeakOnewayBufferClientImpl<::test_unknowninteractions::Example> : public ::fidl::internal::BufferClientImplBase {
 public:
  using BufferClientImplBase::BufferClientImplBase;

  // Caller provides the backing storage for FIDL message.
  ::fidl::Status StrictOneWay();

  // Caller provides the backing storage for FIDL message.
  ::fidl::Status FlexibleOneWay();
};

template <>
class ::fidl::internal::WireWeakAsyncBufferClientImpl<::test_unknowninteractions::Example> final : public ::fidl::internal::WireWeakOnewayBufferClientImpl<::test_unknowninteractions::Example> {
 public:
  using WireWeakOnewayBufferClientImpl::WireWeakOnewayBufferClientImpl;

  // Caller provides the backing storage for FIDL message.
  ::fidl::internal::WireBufferThenable<::test_unknowninteractions::Example::StrictTwoWay> StrictTwoWay();

  // Caller provides the backing storage for FIDL message.
  ::fidl::internal::WireBufferThenable<::test_unknowninteractions::Example::FlexibleTwoWay> FlexibleTwoWay();
};
template <>
class ::fidl::internal::WireWeakSyncClientImpl<::test_unknowninteractions::Example> final : public ::fidl::internal::WireWeakOnewayClientImpl<::test_unknowninteractions::Example> {
 public:
  using WireWeakOnewayClientImpl::WireWeakOnewayClientImpl;

  // Allocates 32 bytes of message buffer on the stack. No heap allocation necessary.
  ::fidl::WireResult<::test_unknowninteractions::Example::StrictTwoWay> StrictTwoWay();

  // Allocates 48 bytes of message buffer on the stack. No heap allocation necessary.
  ::fidl::WireResult<::test_unknowninteractions::Example::FlexibleTwoWay> FlexibleTwoWay();
};
namespace fidl {
#endif  // __Fuchsia__

}  // namespace fidl
#ifdef __Fuchsia__
template <>
class ::fidl::internal::WireWeakEventSender<::test_unknowninteractions::Example> : public ::fidl::internal::WeakEventSenderBase {
 public:
  using WeakEventSenderBase::WeakEventSenderBase;

  fidl::Status StrictEvent();

  fidl::Status FlexibleEvent();
};

template <>
class ::fidl::internal::WireWeakBufferEventSender<::test_unknowninteractions::Example> : public ::fidl::internal::WeakBufferEventSenderBase {
 public:
  using WeakBufferEventSenderBase::WeakBufferEventSenderBase;

  fidl::Status StrictEvent();

  fidl::Status FlexibleEvent();
};

template <>
class ::fidl::internal::WireEventSender<::test_unknowninteractions::Example>
    : public ::fidl::internal::SyncEndpointManagedVeneer<::fidl::internal::WireEventSender<::test_unknowninteractions::Example>> {
 public:
  using SyncEndpointManagedVeneer::SyncEndpointManagedVeneer;

  fidl::Status StrictEvent();

  fidl::Status FlexibleEvent();
};

template <>
class ::fidl::internal::WireBufferEventSender<::test_unknowninteractions::Example>
    : public ::fidl::internal::SyncEndpointBufferVeneer<::fidl::internal::WireBufferEventSender<::test_unknowninteractions::Example>> {
 public:
  using SyncEndpointBufferVeneer::SyncEndpointBufferVeneer;

  fidl::Status StrictEvent();

  fidl::Status FlexibleEvent();
};
#endif  // __Fuchsia__
