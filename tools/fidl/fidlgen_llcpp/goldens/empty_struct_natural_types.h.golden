// WARNING: This file is machine generated by fidlgen.

#pragma once

#include <fidl/test.emptystruct/cpp/common_types.h>
#include <fidl/test.emptystruct/cpp/markers.h>
#include <lib/fidl/cpp/coding_traits.h>
#include <lib/fidl/cpp/internal/codable_base.h>
#include <lib/fidl/cpp/unified_messaging.h>

#include <cinttypes>
#include <string>

#ifdef __Fuchsia__

#include <lib/zx/channel.h>

#endif  // __Fuchsia__

namespace test_emptystruct {
class Empty;

class EmptyProtocolSendRequest;

class EmptyProtocolSendAndReceiveTopResponse;

class EmptyProtocolSendAndReceiveRequest;

class EmptyProtocolReceiveRequest;

extern "C" const fidl_type_t test_emptystruct_EmptyTable;

class Empty final : public ::fidl::internal::CodableBase<Empty> {
 private:
  friend ::fidl::internal::CodableBase<Empty>;
  friend ::fidl::CodingTraits<Empty>;
  Empty(::fidl::Decoder& decoder);
  template <typename Payload>
  friend auto ::fidl::internal::EncodeTransactionalMessageWithoutValidating(
      ::fidl::Encoder& encoder, Payload&& payload)
      -> ::fidl::HLCPPOutgoingMessage;
  void EncodeWithoutValidating(::fidl::Encoder& encoder, size_t offset);

 public:
  struct Storage final {
    uint8_t __reserved = 0u;
  };

  Empty(Storage storage) noexcept : storage_(std::move(storage)) {}
  Empty(uint8_t __reserved) noexcept
      : storage_({.__reserved = std::move(__reserved)}) {}
  Empty() : Empty(Storage{}) {}

  Empty(Empty&&) noexcept = default;
  Empty& operator=(Empty&&) noexcept = default;
  Empty(const Empty& other) noexcept : Empty(other.CloneStorage()) {}
  Empty& operator=(const Empty& other) noexcept {
    storage_ = other.CloneStorage();
    return *this;
  }

  uint8_t __reserved() const { return storage_.__reserved; }

  uint8_t& __reserved() { return storage_.__reserved; }

 private:
  Storage storage_;
  Storage CloneStorage() const;
};

extern "C" const fidl_type_t test_emptystruct_EmptyProtocolSendRequestTable;

class EmptyProtocolSendRequest final
    : public ::fidl::internal::CodableBase<EmptyProtocolSendRequest> {
 private:
  friend ::fidl::internal::CodableBase<EmptyProtocolSendRequest>;
  friend ::fidl::CodingTraits<EmptyProtocolSendRequest>;
  EmptyProtocolSendRequest(::fidl::Decoder& decoder);
  template <typename Payload>
  friend auto ::fidl::internal::EncodeTransactionalMessageWithoutValidating(
      ::fidl::Encoder& encoder, Payload&& payload)
      -> ::fidl::HLCPPOutgoingMessage;
  void EncodeWithoutValidating(::fidl::Encoder& encoder, size_t offset);

 public:
  struct Storage final {
    ::test_emptystruct::Empty e{};
  };

  EmptyProtocolSendRequest(Storage storage) noexcept
      : storage_(std::move(storage)) {}
  EmptyProtocolSendRequest(::test_emptystruct::Empty e) noexcept
      : storage_({.e = std::move(e)}) {}
  EmptyProtocolSendRequest() : EmptyProtocolSendRequest(Storage{}) {}

  EmptyProtocolSendRequest(EmptyProtocolSendRequest&&) noexcept = default;
  EmptyProtocolSendRequest& operator=(EmptyProtocolSendRequest&&) noexcept =
      default;
  EmptyProtocolSendRequest(const EmptyProtocolSendRequest& other) noexcept
      : EmptyProtocolSendRequest(other.CloneStorage()) {}
  EmptyProtocolSendRequest& operator=(
      const EmptyProtocolSendRequest& other) noexcept {
    storage_ = other.CloneStorage();
    return *this;
  }

  const ::test_emptystruct::Empty& e() const { return storage_.e; }

  ::test_emptystruct::Empty& e() { return storage_.e; }

 private:
  Storage storage_;
  Storage CloneStorage() const;
};

extern "C" const fidl_type_t
    test_emptystruct_EmptyProtocolSendAndReceiveTopResponseTable;

class EmptyProtocolSendAndReceiveTopResponse final
    : public ::fidl::internal::CodableBase<
          EmptyProtocolSendAndReceiveTopResponse> {
 private:
  friend ::fidl::internal::CodableBase<EmptyProtocolSendAndReceiveTopResponse>;
  friend ::fidl::CodingTraits<EmptyProtocolSendAndReceiveTopResponse>;
  EmptyProtocolSendAndReceiveTopResponse(::fidl::Decoder& decoder);
  template <typename Payload>
  friend auto ::fidl::internal::EncodeTransactionalMessageWithoutValidating(
      ::fidl::Encoder& encoder, Payload&& payload)
      -> ::fidl::HLCPPOutgoingMessage;
  void EncodeWithoutValidating(::fidl::Encoder& encoder, size_t offset);

 public:
  struct Storage final {
    ::test_emptystruct::Empty e{};
  };

  EmptyProtocolSendAndReceiveTopResponse(Storage storage) noexcept
      : storage_(std::move(storage)) {}
  EmptyProtocolSendAndReceiveTopResponse(::test_emptystruct::Empty e) noexcept
      : storage_({.e = std::move(e)}) {}
  EmptyProtocolSendAndReceiveTopResponse()
      : EmptyProtocolSendAndReceiveTopResponse(Storage{}) {}

  EmptyProtocolSendAndReceiveTopResponse(
      EmptyProtocolSendAndReceiveTopResponse&&) noexcept = default;
  EmptyProtocolSendAndReceiveTopResponse& operator=(
      EmptyProtocolSendAndReceiveTopResponse&&) noexcept = default;
  EmptyProtocolSendAndReceiveTopResponse(
      const EmptyProtocolSendAndReceiveTopResponse& other) noexcept
      : EmptyProtocolSendAndReceiveTopResponse(other.CloneStorage()) {}
  EmptyProtocolSendAndReceiveTopResponse& operator=(
      const EmptyProtocolSendAndReceiveTopResponse& other) noexcept {
    storage_ = other.CloneStorage();
    return *this;
  }

  const ::test_emptystruct::Empty& e() const { return storage_.e; }

  ::test_emptystruct::Empty& e() { return storage_.e; }

 private:
  Storage storage_;
  Storage CloneStorage() const;
};

extern "C" const fidl_type_t
    test_emptystruct_EmptyProtocolSendAndReceiveRequestTable;

class EmptyProtocolSendAndReceiveRequest final
    : public ::fidl::internal::CodableBase<EmptyProtocolSendAndReceiveRequest> {
 private:
  friend ::fidl::internal::CodableBase<EmptyProtocolSendAndReceiveRequest>;
  friend ::fidl::CodingTraits<EmptyProtocolSendAndReceiveRequest>;
  EmptyProtocolSendAndReceiveRequest(::fidl::Decoder& decoder);
  template <typename Payload>
  friend auto ::fidl::internal::EncodeTransactionalMessageWithoutValidating(
      ::fidl::Encoder& encoder, Payload&& payload)
      -> ::fidl::HLCPPOutgoingMessage;
  void EncodeWithoutValidating(::fidl::Encoder& encoder, size_t offset);

 public:
  struct Storage final {
    ::test_emptystruct::Empty e{};
  };

  EmptyProtocolSendAndReceiveRequest(Storage storage) noexcept
      : storage_(std::move(storage)) {}
  EmptyProtocolSendAndReceiveRequest(::test_emptystruct::Empty e) noexcept
      : storage_({.e = std::move(e)}) {}
  EmptyProtocolSendAndReceiveRequest()
      : EmptyProtocolSendAndReceiveRequest(Storage{}) {}

  EmptyProtocolSendAndReceiveRequest(
      EmptyProtocolSendAndReceiveRequest&&) noexcept = default;
  EmptyProtocolSendAndReceiveRequest& operator=(
      EmptyProtocolSendAndReceiveRequest&&) noexcept = default;
  EmptyProtocolSendAndReceiveRequest(
      const EmptyProtocolSendAndReceiveRequest& other) noexcept
      : EmptyProtocolSendAndReceiveRequest(other.CloneStorage()) {}
  EmptyProtocolSendAndReceiveRequest& operator=(
      const EmptyProtocolSendAndReceiveRequest& other) noexcept {
    storage_ = other.CloneStorage();
    return *this;
  }

  const ::test_emptystruct::Empty& e() const { return storage_.e; }

  ::test_emptystruct::Empty& e() { return storage_.e; }

 private:
  Storage storage_;
  Storage CloneStorage() const;
};

extern "C" const fidl_type_t test_emptystruct_EmptyProtocolReceiveRequestTable;

class EmptyProtocolReceiveRequest final
    : public ::fidl::internal::CodableBase<EmptyProtocolReceiveRequest> {
 private:
  friend ::fidl::internal::CodableBase<EmptyProtocolReceiveRequest>;
  friend ::fidl::CodingTraits<EmptyProtocolReceiveRequest>;
  EmptyProtocolReceiveRequest(::fidl::Decoder& decoder);
  template <typename Payload>
  friend auto ::fidl::internal::EncodeTransactionalMessageWithoutValidating(
      ::fidl::Encoder& encoder, Payload&& payload)
      -> ::fidl::HLCPPOutgoingMessage;
  void EncodeWithoutValidating(::fidl::Encoder& encoder, size_t offset);

 public:
  struct Storage final {
    ::test_emptystruct::Empty e{};
  };

  EmptyProtocolReceiveRequest(Storage storage) noexcept
      : storage_(std::move(storage)) {}
  EmptyProtocolReceiveRequest(::test_emptystruct::Empty e) noexcept
      : storage_({.e = std::move(e)}) {}
  EmptyProtocolReceiveRequest() : EmptyProtocolReceiveRequest(Storage{}) {}

  EmptyProtocolReceiveRequest(EmptyProtocolReceiveRequest&&) noexcept = default;
  EmptyProtocolReceiveRequest& operator=(
      EmptyProtocolReceiveRequest&&) noexcept = default;
  EmptyProtocolReceiveRequest(const EmptyProtocolReceiveRequest& other) noexcept
      : EmptyProtocolReceiveRequest(other.CloneStorage()) {}
  EmptyProtocolReceiveRequest& operator=(
      const EmptyProtocolReceiveRequest& other) noexcept {
    storage_ = other.CloneStorage();
    return *this;
  }

  const ::test_emptystruct::Empty& e() const { return storage_.e; }

  ::test_emptystruct::Empty& e() { return storage_.e; }

 private:
  Storage storage_;
  Storage CloneStorage() const;
};

}  // namespace test_emptystruct
namespace fidl {

#ifdef __Fuchsia__
extern "C" const fidl_type_t test_emptystruct_EmptyTable;

template <>
struct IsFidlType<::test_emptystruct::Empty> : public std::true_type {};

template <>
struct ::fidl::internal::TypeTraits<::test_emptystruct::Empty> final {
 public:
  static constexpr const fidl_type_t* kCodingTable =
      &test_emptystruct_EmptyTable;
};

template <>
struct CodingTraits<::test_emptystruct::Empty> {
  static constexpr size_t inline_size_v1_no_ee = 1;
  static constexpr size_t inline_size_v2 = 1;

  template <class EncoderImpl>
  static void Encode(
      EncoderImpl* encoder, ::test_emptystruct::Empty* value, size_t offset,
      cpp17::optional<HandleInformation> maybe_handle_info = cpp17::nullopt) {
    [[maybe_unused]] uint32_t field_offset;
    field_offset =
        encoder->wire_format() == ::fidl::internal::WireFormatVersion::kV1 ? 0
                                                                           : 0;
    ::fidl::Encode(encoder, &value->storage_.__reserved, offset + field_offset);
  }

  template <typename DecoderImpl>
  static void Decode(DecoderImpl* decoder, ::test_emptystruct::Empty* value,
                     size_t offset) {
    ::fidl::Decode(decoder, &value->storage_.__reserved, offset + 0);
  }
};
#endif  // __Fuchsia__

#ifdef __Fuchsia__
extern "C" const fidl_type_t test_emptystruct_EmptyProtocolSendRequestTable;

template <>
struct IsFidlType<::test_emptystruct::EmptyProtocolSendRequest>
    : public std::true_type {};

template <>
struct ::fidl::internal::TypeTraits<
    ::test_emptystruct::EmptyProtocolSendRequest>
    final {
 public:
  static constexpr const fidl_type_t* kCodingTable =
      &test_emptystruct_EmptyProtocolSendRequestTable;
};

template <>
struct CodingTraits<::test_emptystruct::EmptyProtocolSendRequest> {
  static constexpr size_t inline_size_v1_no_ee = 8;
  static constexpr size_t inline_size_v2 = 8;

  template <class EncoderImpl>
  static void Encode(
      EncoderImpl* encoder, ::test_emptystruct::EmptyProtocolSendRequest* value,
      size_t offset,
      cpp17::optional<HandleInformation> maybe_handle_info = cpp17::nullopt) {
    [[maybe_unused]] uint32_t field_offset;
    field_offset =
        encoder->wire_format() == ::fidl::internal::WireFormatVersion::kV1 ? 0
                                                                           : 0;
    ::fidl::Encode(encoder, &value->storage_.e, offset + field_offset);
  }

  template <typename DecoderImpl>
  static void Decode(DecoderImpl* decoder,
                     ::test_emptystruct::EmptyProtocolSendRequest* value,
                     size_t offset) {
    ::fidl::Decode(decoder, &value->storage_.e, offset + 0);
  }
};
#endif  // __Fuchsia__

#ifdef __Fuchsia__
extern "C" const fidl_type_t
    test_emptystruct_EmptyProtocolSendAndReceiveTopResponseTable;

template <>
struct IsFidlType<::test_emptystruct::EmptyProtocolSendAndReceiveTopResponse>
    : public std::true_type {};

template <>
struct ::fidl::internal::TypeTraits<
    ::test_emptystruct::EmptyProtocolSendAndReceiveTopResponse>
    final {
 public:
  static constexpr const fidl_type_t* kCodingTable =
      &test_emptystruct_EmptyProtocolSendAndReceiveTopResponseTable;
};

template <>
struct CodingTraits<
    ::test_emptystruct::EmptyProtocolSendAndReceiveTopResponse> {
  static constexpr size_t inline_size_v1_no_ee = 8;
  static constexpr size_t inline_size_v2 = 8;

  template <class EncoderImpl>
  static void Encode(
      EncoderImpl* encoder,
      ::test_emptystruct::EmptyProtocolSendAndReceiveTopResponse* value,
      size_t offset,
      cpp17::optional<HandleInformation> maybe_handle_info = cpp17::nullopt) {
    [[maybe_unused]] uint32_t field_offset;
    field_offset =
        encoder->wire_format() == ::fidl::internal::WireFormatVersion::kV1 ? 0
                                                                           : 0;
    ::fidl::Encode(encoder, &value->storage_.e, offset + field_offset);
  }

  template <typename DecoderImpl>
  static void Decode(
      DecoderImpl* decoder,
      ::test_emptystruct::EmptyProtocolSendAndReceiveTopResponse* value,
      size_t offset) {
    ::fidl::Decode(decoder, &value->storage_.e, offset + 0);
  }
};
#endif  // __Fuchsia__

#ifdef __Fuchsia__
extern "C" const fidl_type_t
    test_emptystruct_EmptyProtocolSendAndReceiveRequestTable;

template <>
struct IsFidlType<::test_emptystruct::EmptyProtocolSendAndReceiveRequest>
    : public std::true_type {};

template <>
struct ::fidl::internal::TypeTraits<
    ::test_emptystruct::EmptyProtocolSendAndReceiveRequest>
    final {
 public:
  static constexpr const fidl_type_t* kCodingTable =
      &test_emptystruct_EmptyProtocolSendAndReceiveRequestTable;
};

template <>
struct CodingTraits<::test_emptystruct::EmptyProtocolSendAndReceiveRequest> {
  static constexpr size_t inline_size_v1_no_ee = 8;
  static constexpr size_t inline_size_v2 = 8;

  template <class EncoderImpl>
  static void Encode(
      EncoderImpl* encoder,
      ::test_emptystruct::EmptyProtocolSendAndReceiveRequest* value,
      size_t offset,
      cpp17::optional<HandleInformation> maybe_handle_info = cpp17::nullopt) {
    [[maybe_unused]] uint32_t field_offset;
    field_offset =
        encoder->wire_format() == ::fidl::internal::WireFormatVersion::kV1 ? 0
                                                                           : 0;
    ::fidl::Encode(encoder, &value->storage_.e, offset + field_offset);
  }

  template <typename DecoderImpl>
  static void Decode(
      DecoderImpl* decoder,
      ::test_emptystruct::EmptyProtocolSendAndReceiveRequest* value,
      size_t offset) {
    ::fidl::Decode(decoder, &value->storage_.e, offset + 0);
  }
};
#endif  // __Fuchsia__

#ifdef __Fuchsia__
extern "C" const fidl_type_t test_emptystruct_EmptyProtocolReceiveRequestTable;

template <>
struct IsFidlType<::test_emptystruct::EmptyProtocolReceiveRequest>
    : public std::true_type {};

template <>
struct ::fidl::internal::TypeTraits<
    ::test_emptystruct::EmptyProtocolReceiveRequest>
    final {
 public:
  static constexpr const fidl_type_t* kCodingTable =
      &test_emptystruct_EmptyProtocolReceiveRequestTable;
};

template <>
struct CodingTraits<::test_emptystruct::EmptyProtocolReceiveRequest> {
  static constexpr size_t inline_size_v1_no_ee = 8;
  static constexpr size_t inline_size_v2 = 8;

  template <class EncoderImpl>
  static void Encode(
      EncoderImpl* encoder,
      ::test_emptystruct::EmptyProtocolReceiveRequest* value, size_t offset,
      cpp17::optional<HandleInformation> maybe_handle_info = cpp17::nullopt) {
    [[maybe_unused]] uint32_t field_offset;
    field_offset =
        encoder->wire_format() == ::fidl::internal::WireFormatVersion::kV1 ? 0
                                                                           : 0;
    ::fidl::Encode(encoder, &value->storage_.e, offset + field_offset);
  }

  template <typename DecoderImpl>
  static void Decode(DecoderImpl* decoder,
                     ::test_emptystruct::EmptyProtocolReceiveRequest* value,
                     size_t offset) {
    ::fidl::Decode(decoder, &value->storage_.e, offset + 0);
  }
};
#endif  // __Fuchsia__

}  // namespace fidl
