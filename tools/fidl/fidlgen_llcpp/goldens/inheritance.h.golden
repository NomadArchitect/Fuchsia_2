// WARNING: This file is machine generated by fidlgen.

#pragma once

#include <lib/fidl/internal.h>
#include <lib/fidl/llcpp/array.h>
#include <lib/fidl/llcpp/coding.h>
#include <lib/fidl/llcpp/envelope.h>
#include <lib/fidl/llcpp/errors.h>
#include <lib/fidl/llcpp/memory.h>
#include <lib/fidl/llcpp/message.h>
#include <lib/fidl/llcpp/message_storage.h>
#include <lib/fidl/llcpp/object_view.h>
#include <lib/fidl/llcpp/string_view.h>
#include <lib/fidl/llcpp/tracking_ptr.h>
#include <lib/fidl/llcpp/traits.h>
#include <lib/fidl/llcpp/vector_view.h>
#include <lib/fit/function.h>
#include <lib/stdcompat/optional.h>

#include <algorithm>
#include <cstddef>
#include <variant>
#ifdef __Fuchsia__
#include <lib/fidl/llcpp/client.h>
#include <lib/fidl/llcpp/client_end.h>
#include <lib/fidl/llcpp/connect_service.h>
#include <lib/fidl/llcpp/result.h>
#include <lib/fidl/llcpp/server.h>
#include <lib/fidl/llcpp/server_end.h>
#include <lib/fidl/llcpp/service_handler_interface.h>
#include <lib/fidl/llcpp/sync_call.h>
#include <lib/fidl/llcpp/transaction.h>
#include <lib/fidl/txn_header.h>
#include <lib/zx/channel.h>

#endif  // __Fuchsia__
#include <zircon/fidl.h>

namespace fidl_test_inheritance {
class super;

class sub;

extern "C" const fidl_type_t fidl_test_inheritance_superfooRequestTable;

extern "C" const fidl_type_t fidl_test_inheritance_superfooResponseTable;

class super final {
  super() = delete;

 public:
  struct fooResponse final {
    FIDL_ALIGNDECL
    fidl_message_header_t _hdr;
    int64_t y;
    explicit fooResponse(int64_t y) : y(y) { _InitHeader(); }
    fooResponse() { _InitHeader(); }

    static constexpr const fidl_type_t* Type =
        &::fidl_test_inheritance::fidl_test_inheritance_superfooResponseTable;
    static constexpr uint32_t MaxNumHandles = 0;
    static constexpr uint32_t PrimarySize = 24;
    static constexpr uint32_t MaxOutOfLine = 0;
    static constexpr bool HasFlexibleEnvelope = false;
    static constexpr bool HasPointer = false;
    static constexpr ::fidl::internal::TransactionalMessageKind MessageKind =
        ::fidl::internal::TransactionalMessageKind::kResponse;

   private:
    class UnownedEncodedByteMessage final {
     public:
      UnownedEncodedByteMessage(uint8_t* _bytes, uint32_t _byte_size, int64_t y)
          : message_(_bytes, _byte_size, sizeof(fooResponse), nullptr, 0, 0) {
        FIDL_ALIGNDECL fooResponse _response{y};
        message_.Encode<fooResponse>(&_response);
      }
      UnownedEncodedByteMessage(uint8_t* bytes, uint32_t byte_size,
                                fooResponse* response)
          : message_(bytes, byte_size, sizeof(fooResponse), nullptr, 0, 0) {
        message_.Encode<fooResponse>(response);
      }
      UnownedEncodedByteMessage(const UnownedEncodedByteMessage&) = delete;
      UnownedEncodedByteMessage(UnownedEncodedByteMessage&&) = delete;
      UnownedEncodedByteMessage* operator=(const UnownedEncodedByteMessage&) =
          delete;
      UnownedEncodedByteMessage* operator=(UnownedEncodedByteMessage&&) =
          delete;

      zx_status_t status() const { return message_.status(); }
#ifdef __Fuchsia__
      const char* status_string() const { return message_.status_string(); }
#endif
      bool ok() const { return message_.status() == ZX_OK; }
      const char* error() const { return message_.error(); }

      ::fidl::OutgoingByteMessage& GetOutgoingMessage() { return message_; }

#ifdef __Fuchsia__
      template <typename ChannelLike>
      void Write(ChannelLike&& client) {
        message_.Write(std::forward<ChannelLike>(client));
      }
#endif

     private:
      ::fidl::OutgoingByteMessage message_;
    };

    class UnownedEncodedIovecMessage final {
     public:
      UnownedEncodedIovecMessage(zx_channel_iovec_t* iovecs,
                                 uint32_t iovec_size,
                                 fidl_iovec_substitution_t* substitutions,
                                 uint32_t substitutions_size, int64_t y)
          : message_(::fidl::OutgoingIovecMessage::constructor_args{
                .iovecs = iovecs,
                .iovecs_actual = 0,
                .iovecs_capacity = iovec_size,
                .substitutions = substitutions,
                .substitutions_actual = 0,
                .substitutions_capacity = substitutions_size,
                .handles = nullptr,
                .handle_actual = 0,
                .handle_capacity = 0,
            }) {
        FIDL_ALIGNDECL fooResponse _response{y};
        message_.Encode<fooResponse>(&_response);
      }
      UnownedEncodedIovecMessage(zx_channel_iovec_t* iovecs,
                                 uint32_t iovec_size,
                                 fidl_iovec_substitution_t* substitutions,
                                 uint32_t substitutions_size,
                                 fooResponse* response)
          : message_(::fidl::OutgoingIovecMessage::constructor_args{
                .iovecs = iovecs,
                .iovecs_actual = 0,
                .iovecs_capacity = iovec_size,
                .substitutions = substitutions,
                .substitutions_actual = 0,
                .substitutions_capacity = substitutions_size,
                .handles = nullptr,
                .handle_actual = 0,
                .handle_capacity = 0,
            }) {
        message_.Encode<fooResponse>(response);
      }
      UnownedEncodedIovecMessage(const UnownedEncodedIovecMessage&) = delete;
      UnownedEncodedIovecMessage(UnownedEncodedIovecMessage&&) = delete;
      UnownedEncodedIovecMessage* operator=(const UnownedEncodedIovecMessage&) =
          delete;
      UnownedEncodedIovecMessage* operator=(UnownedEncodedIovecMessage&&) =
          delete;

      zx_status_t status() const { return message_.status(); }
#ifdef __Fuchsia__
      const char* status_string() const { return message_.status_string(); }
#endif
      bool ok() const { return message_.status() == ZX_OK; }
      const char* error() const { return message_.error(); }

      ::fidl::OutgoingIovecMessage& GetOutgoingMessage() { return message_; }

#ifdef __Fuchsia__
      template <typename ChannelLike>
      void Write(ChannelLike&& client) {
        message_.Write(std::forward<ChannelLike>(client));
      }
#endif

     private:
      ::fidl::OutgoingIovecMessage message_;
    };

    class OwnedEncodedByteMessage final {
     public:
      explicit OwnedEncodedByteMessage(int64_t y)
          : message_(bytes_.data(), bytes_.size(), y) {}
      explicit OwnedEncodedByteMessage(fooResponse* response)
          : message_(bytes_.data(), bytes_.size(), response) {}
      OwnedEncodedByteMessage(const OwnedEncodedByteMessage&) = delete;
      OwnedEncodedByteMessage(OwnedEncodedByteMessage&&) = delete;
      OwnedEncodedByteMessage* operator=(const OwnedEncodedByteMessage&) =
          delete;
      OwnedEncodedByteMessage* operator=(OwnedEncodedByteMessage&&) = delete;

      zx_status_t status() const { return message_.status(); }
#ifdef __Fuchsia__
      const char* status_string() const { return message_.status_string(); }
#endif
      bool ok() const { return message_.ok(); }
      const char* error() const { return message_.error(); }

      ::fidl::OutgoingByteMessage& GetOutgoingMessage() {
        return message_.GetOutgoingMessage();
      }

#ifdef __Fuchsia__
      template <typename ChannelLike>
      void Write(ChannelLike&& client) {
        message_.Write(std::forward<ChannelLike>(client));
      }
#endif

     private:
      ::fidl::internal::InlineMessageBuffer<24> bytes_;
      UnownedEncodedByteMessage message_;
    };

    class OwnedEncodedIovecMessage final {
     public:
      explicit OwnedEncodedIovecMessage(int64_t y)
          : message_(iovecs_, ::fidl::internal::kIovecBufferSize,
                     substitutions_, ::fidl::internal::kIovecBufferSize, y) {}
      explicit OwnedEncodedIovecMessage(fooResponse* response)
          : message_(iovecs_, ::fidl::internal::kIovecBufferSize,
                     substitutions_, ::fidl::internal::kIovecBufferSize,
                     response) {}
      OwnedEncodedIovecMessage(const OwnedEncodedIovecMessage&) = delete;
      OwnedEncodedIovecMessage(OwnedEncodedIovecMessage&&) = delete;
      OwnedEncodedIovecMessage* operator=(const OwnedEncodedIovecMessage&) =
          delete;
      OwnedEncodedIovecMessage* operator=(OwnedEncodedIovecMessage&&) = delete;

      zx_status_t status() const { return message_.status(); }
#ifdef __Fuchsia__
      const char* status_string() const { return message_.status_string(); }
#endif
      bool ok() const { return message_.ok(); }
      const char* error() const { return message_.error(); }

      ::fidl::OutgoingIovecMessage& GetOutgoingMessage() {
        return message_.GetOutgoingMessage();
      }

#ifdef __Fuchsia__
      template <typename ChannelLike>
      void Write(ChannelLike&& client) {
        message_.Write(std::forward<ChannelLike>(client));
      }
#endif

     private:
      zx_channel_iovec_t iovecs_[::fidl::internal::kIovecBufferSize];
      fidl_iovec_substitution_t
          substitutions_[::fidl::internal::kIovecBufferSize];
      UnownedEncodedIovecMessage message_;
    };

   public:
    friend ::fidl::internal::EncodedMessageTypes<fooResponse>;
    using OwnedEncodedMessage = OwnedEncodedByteMessage;
    using UnownedEncodedMessage = UnownedEncodedByteMessage;

    class DecodedMessage final : public ::fidl::internal::IncomingMessage {
     public:
      DecodedMessage(uint8_t* bytes, uint32_t byte_actual,
                     zx_handle_info_t* handles = nullptr,
                     uint32_t handle_actual = 0)
          : ::fidl::internal::IncomingMessage(bytes, byte_actual, handles,
                                              handle_actual) {
        Decode<fooResponse>();
      }
      DecodedMessage(fidl_incoming_msg_t* msg)
          : ::fidl::internal::IncomingMessage(msg) {
        Decode<fooResponse>();
      }
      DecodedMessage(const DecodedMessage&) = delete;
      DecodedMessage(DecodedMessage&&) = delete;
      DecodedMessage* operator=(const DecodedMessage&) = delete;
      DecodedMessage* operator=(DecodedMessage&&) = delete;

      fooResponse* PrimaryObject() {
        ZX_DEBUG_ASSERT(ok());
        return reinterpret_cast<fooResponse*>(bytes());
      }

      // Release the ownership of the decoded message. That means that the
      // handles won't be closed When the object is destroyed. After calling
      // this method, the DecodedMessage object should not be used anymore.
      void ReleasePrimaryObject() { ResetBytes(); }
    };

   private:
    void _InitHeader();
  };
  struct fooRequest final {
    FIDL_ALIGNDECL
    fidl_message_header_t _hdr;
    ::fidl::StringView s;
    explicit fooRequest(zx_txid_t _txid, const ::fidl::StringView& s)
        : s(::fidl::unowned_ptr_t<const char>(s.data()), s.size()) {
      _InitHeader(_txid);
    }
    explicit fooRequest(zx_txid_t _txid) { _InitHeader(_txid); }

    static constexpr const fidl_type_t* Type =
        &::fidl_test_inheritance::fidl_test_inheritance_superfooRequestTable;
    static constexpr uint32_t MaxNumHandles = 0;
    static constexpr uint32_t PrimarySize = 32;
    static constexpr uint32_t MaxOutOfLine = 4294967295;
    static constexpr uint32_t AltPrimarySize = 32;
    static constexpr uint32_t AltMaxOutOfLine = 4294967295;
    static constexpr bool HasFlexibleEnvelope = false;
    static constexpr bool HasPointer = true;
    static constexpr ::fidl::internal::TransactionalMessageKind MessageKind =
        ::fidl::internal::TransactionalMessageKind::kRequest;
    using ResponseType = fooResponse;

   private:
    class UnownedEncodedByteMessage final {
     public:
      UnownedEncodedByteMessage(uint8_t* _bytes, uint32_t _byte_size,
                                zx_txid_t _txid, const ::fidl::StringView& s)
          : message_(_bytes, _byte_size, sizeof(fooRequest), nullptr, 0, 0) {
        FIDL_ALIGNDECL fooRequest _request(_txid, s);
        message_.Encode<fooRequest>(&_request);
      }
      UnownedEncodedByteMessage(uint8_t* bytes, uint32_t byte_size,
                                fooRequest* request)
          : message_(bytes, byte_size, sizeof(fooRequest), nullptr, 0, 0) {
        message_.Encode<fooRequest>(request);
      }
      UnownedEncodedByteMessage(const UnownedEncodedByteMessage&) = delete;
      UnownedEncodedByteMessage(UnownedEncodedByteMessage&&) = delete;
      UnownedEncodedByteMessage* operator=(const UnownedEncodedByteMessage&) =
          delete;
      UnownedEncodedByteMessage* operator=(UnownedEncodedByteMessage&&) =
          delete;

      zx_status_t status() const { return message_.status(); }
#ifdef __Fuchsia__
      const char* status_string() const { return message_.status_string(); }
#endif
      bool ok() const { return message_.status() == ZX_OK; }
      const char* error() const { return message_.error(); }

      ::fidl::OutgoingByteMessage& GetOutgoingMessage() { return message_; }

#ifdef __Fuchsia__
      template <typename ChannelLike>
      void Write(ChannelLike&& client) {
        message_.Write(std::forward<ChannelLike>(client));
      }
#endif

     private:
      ::fidl::OutgoingByteMessage message_;
    };

    class UnownedEncodedIovecMessage final {
     public:
      UnownedEncodedIovecMessage(zx_channel_iovec_t* iovecs,
                                 uint32_t iovec_size,
                                 fidl_iovec_substitution_t* substitutions,
                                 uint32_t substitutions_size, zx_txid_t _txid,
                                 const ::fidl::StringView& s)
          : message_(::fidl::OutgoingIovecMessage::constructor_args{
                .iovecs = iovecs,
                .iovecs_actual = 0,
                .iovecs_capacity = iovec_size,
                .substitutions = substitutions,
                .substitutions_actual = 0,
                .substitutions_capacity = substitutions_size,
                .handles = nullptr,
                .handle_actual = 0,
                .handle_capacity = 0,
            }) {
        FIDL_ALIGNDECL fooRequest _request(_txid, s);
        message_.Encode<fooRequest>(&_request);
      }
      UnownedEncodedIovecMessage(zx_channel_iovec_t* iovecs,
                                 uint32_t iovec_size,
                                 fidl_iovec_substitution_t* substitutions,
                                 uint32_t substitutions_size,
                                 fooRequest* request)
          : message_(::fidl::OutgoingIovecMessage::constructor_args{
                .iovecs = iovecs,
                .iovecs_actual = 0,
                .iovecs_capacity = iovec_size,
                .substitutions = substitutions,
                .substitutions_actual = 0,
                .substitutions_capacity = substitutions_size,
                .handles = nullptr,
                .handle_actual = 0,
                .handle_capacity = 0,
            }) {
        message_.Encode<fooRequest>(request);
      }
      UnownedEncodedIovecMessage(const UnownedEncodedIovecMessage&) = delete;
      UnownedEncodedIovecMessage(UnownedEncodedIovecMessage&&) = delete;
      UnownedEncodedIovecMessage* operator=(const UnownedEncodedIovecMessage&) =
          delete;
      UnownedEncodedIovecMessage* operator=(UnownedEncodedIovecMessage&&) =
          delete;

      zx_status_t status() const { return message_.status(); }
#ifdef __Fuchsia__
      const char* status_string() const { return message_.status_string(); }
#endif
      bool ok() const { return message_.status() == ZX_OK; }
      const char* error() const { return message_.error(); }

      ::fidl::OutgoingIovecMessage& GetOutgoingMessage() { return message_; }

#ifdef __Fuchsia__
      template <typename ChannelLike>
      void Write(ChannelLike&& client) {
        message_.Write(std::forward<ChannelLike>(client));
      }
#endif

     private:
      ::fidl::OutgoingIovecMessage message_;
    };

    class OwnedEncodedByteMessage final {
     public:
      explicit OwnedEncodedByteMessage(zx_txid_t _txid,
                                       const ::fidl::StringView& s)
          : message_(bytes_.data(), bytes_.size(), _txid, s) {}
      explicit OwnedEncodedByteMessage(fooRequest* request)
          : message_(bytes_.data(), bytes_.size(), request) {}
      OwnedEncodedByteMessage(const OwnedEncodedByteMessage&) = delete;
      OwnedEncodedByteMessage(OwnedEncodedByteMessage&&) = delete;
      OwnedEncodedByteMessage* operator=(const OwnedEncodedByteMessage&) =
          delete;
      OwnedEncodedByteMessage* operator=(OwnedEncodedByteMessage&&) = delete;

      zx_status_t status() const { return message_.status(); }
#ifdef __Fuchsia__
      const char* status_string() const { return message_.status_string(); }
#endif
      bool ok() const { return message_.ok(); }
      const char* error() const { return message_.error(); }

      ::fidl::OutgoingByteMessage& GetOutgoingMessage() {
        return message_.GetOutgoingMessage();
      }

#ifdef __Fuchsia__
      template <typename ChannelLike>
      void Write(ChannelLike&& client) {
        message_.Write(std::forward<ChannelLike>(client));
      }
#endif

     private:
      ::fidl::internal::BoxedMessageBuffer<ZX_CHANNEL_MAX_MSG_BYTES> bytes_;
      UnownedEncodedByteMessage message_;
    };

    class OwnedEncodedIovecMessage final {
     public:
      explicit OwnedEncodedIovecMessage(zx_txid_t _txid,
                                        const ::fidl::StringView& s)
          : message_(iovecs_, ::fidl::internal::kIovecBufferSize,
                     substitutions_, ::fidl::internal::kIovecBufferSize, _txid,
                     s) {}
      explicit OwnedEncodedIovecMessage(fooRequest* request)
          : message_(iovecs_, ::fidl::internal::kIovecBufferSize,
                     substitutions_, ::fidl::internal::kIovecBufferSize,
                     request) {}
      OwnedEncodedIovecMessage(const OwnedEncodedIovecMessage&) = delete;
      OwnedEncodedIovecMessage(OwnedEncodedIovecMessage&&) = delete;
      OwnedEncodedIovecMessage* operator=(const OwnedEncodedIovecMessage&) =
          delete;
      OwnedEncodedIovecMessage* operator=(OwnedEncodedIovecMessage&&) = delete;

      zx_status_t status() const { return message_.status(); }
#ifdef __Fuchsia__
      const char* status_string() const { return message_.status_string(); }
#endif
      bool ok() const { return message_.ok(); }
      const char* error() const { return message_.error(); }

      ::fidl::OutgoingIovecMessage& GetOutgoingMessage() {
        return message_.GetOutgoingMessage();
      }

#ifdef __Fuchsia__
      template <typename ChannelLike>
      void Write(ChannelLike&& client) {
        message_.Write(std::forward<ChannelLike>(client));
      }
#endif

     private:
      zx_channel_iovec_t iovecs_[::fidl::internal::kIovecBufferSize];
      fidl_iovec_substitution_t
          substitutions_[::fidl::internal::kIovecBufferSize];
      UnownedEncodedIovecMessage message_;
    };

   public:
    friend ::fidl::internal::EncodedMessageTypes<fooRequest>;
    using OwnedEncodedMessage = OwnedEncodedByteMessage;
    using UnownedEncodedMessage = UnownedEncodedByteMessage;

    class DecodedMessage final : public ::fidl::internal::IncomingMessage {
     public:
      DecodedMessage(uint8_t* bytes, uint32_t byte_actual,
                     zx_handle_info_t* handles = nullptr,
                     uint32_t handle_actual = 0)
          : ::fidl::internal::IncomingMessage(bytes, byte_actual, handles,
                                              handle_actual) {
        Decode<fooRequest>();
      }
      DecodedMessage(fidl_incoming_msg_t* msg)
          : ::fidl::internal::IncomingMessage(msg) {
        Decode<fooRequest>();
      }
      DecodedMessage(const DecodedMessage&) = delete;
      DecodedMessage(DecodedMessage&&) = delete;
      DecodedMessage* operator=(const DecodedMessage&) = delete;
      DecodedMessage* operator=(DecodedMessage&&) = delete;

      fooRequest* PrimaryObject() {
        ZX_DEBUG_ASSERT(ok());
        return reinterpret_cast<fooRequest*>(bytes());
      }

      // Release the ownership of the decoded message. That means that the
      // handles won't be closed When the object is destroyed. After calling
      // this method, the DecodedMessage object should not be used anymore.
      void ReleasePrimaryObject() { ResetBytes(); }
    };

   private:
    void _InitHeader(zx_txid_t _txid);
  };

  class EventHandlerInterface {
   public:
    EventHandlerInterface() = default;
    virtual ~EventHandlerInterface() = default;
  };

#ifdef __Fuchsia__
  // Collection of return types of FIDL calls in this protocol.
  class ResultOf final {
    ResultOf() = delete;

   public:
    class foo final : public ::fidl::Result {
     public:
      explicit foo(
          ::fidl::UnownedClientEnd<::fidl_test_inheritance::super> _client,
          const ::fidl::StringView& s);
      foo(::fidl::UnownedClientEnd<::fidl_test_inheritance::super> _client,
          const ::fidl::StringView& s, zx_time_t _deadline);
      explicit foo(const ::fidl::Result& result) : ::fidl::Result(result) {}
      foo(foo&&) = delete;
      foo(const foo&) = delete;
      foo* operator=(foo&&) = delete;
      foo* operator=(const foo&) = delete;
      ~foo() = default;

      fooResponse* Unwrap() {
        ZX_DEBUG_ASSERT(ok());
        return reinterpret_cast<fooResponse*>(bytes_.data());
      }
      const fooResponse* Unwrap() const {
        ZX_DEBUG_ASSERT(ok());
        return reinterpret_cast<const fooResponse*>(bytes_.data());
      }

      fooResponse& value() { return *Unwrap(); }
      const fooResponse& value() const { return *Unwrap(); }

      fooResponse* operator->() { return &value(); }
      const fooResponse* operator->() const { return &value(); }

      fooResponse& operator*() { return value(); }
      const fooResponse& operator*() const { return value(); }

     private:
      ::fidl::internal::InlineMessageBuffer<24> bytes_;
    };
  };

  // Collection of return types of FIDL calls in this protocol,
  // when the caller-allocate flavor or in-place call is used.
  class UnownedResultOf final {
    UnownedResultOf() = delete;

   public:
    class foo final : public ::fidl::Result {
     public:
      explicit foo(
          ::fidl::UnownedClientEnd<::fidl_test_inheritance::super> _client,
          uint8_t* _request_bytes, uint32_t _request_byte_capacity,
          const ::fidl::StringView& s, uint8_t* _response_bytes,
          uint32_t _response_byte_capacity);
      explicit foo(const ::fidl::Result& result) : ::fidl::Result(result) {}
      foo(foo&&) = delete;
      foo(const foo&) = delete;
      foo* operator=(foo&&) = delete;
      foo* operator=(const foo&) = delete;
      ~foo() = default;

      fooResponse* Unwrap() {
        ZX_DEBUG_ASSERT(ok());
        return reinterpret_cast<fooResponse*>(bytes_);
      }
      const fooResponse* Unwrap() const {
        ZX_DEBUG_ASSERT(ok());
        return reinterpret_cast<const fooResponse*>(bytes_);
      }

      fooResponse& value() { return *Unwrap(); }
      const fooResponse& value() const { return *Unwrap(); }

      fooResponse* operator->() { return &value(); }
      const fooResponse* operator->() const { return &value(); }

      fooResponse& operator*() { return value(); }
      const fooResponse& operator*() const { return value(); }

     private:
      uint8_t* bytes_;
    };
  };

  // Methods to make a sync FIDL call directly on an unowned channel or a
  // const reference to a |fidl::ClientEnd<::fidl_test_inheritance::super>|,
  // avoiding setting up a client.
  class Call final {
    Call() = delete;

   public:
    // Allocates 24 bytes of response buffer on the stack. Request is
    // heap-allocated.
    static ResultOf::foo foo(
        ::fidl::UnownedClientEnd<::fidl_test_inheritance::super> _client_end,
        ::fidl::StringView s) {
      return ResultOf::foo(_client_end, s);
    }

    // Caller provides the backing storage for FIDL message via request and
    // response buffers.
    static UnownedResultOf::foo foo(
        ::fidl::UnownedClientEnd<::fidl_test_inheritance::super> _client_end,
        ::fidl::BufferSpan _request_buffer, ::fidl::StringView s,
        ::fidl::BufferSpan _response_buffer) {
      return UnownedResultOf::foo(
          _client_end, _request_buffer.data, _request_buffer.capacity, s,
          _response_buffer.data, _response_buffer.capacity);
    }
  };

  class SyncClient final {
   public:
    SyncClient() = default;

    explicit SyncClient(::fidl::ClientEnd<super> client_end)
        : client_end_(std::move(client_end)) {}

    ~SyncClient() = default;
    SyncClient(SyncClient&&) = default;
    SyncClient& operator=(SyncClient&&) = default;

    const ::fidl::ClientEnd<super>& client_end() const { return client_end_; }
    ::fidl::ClientEnd<super>& client_end() { return client_end_; }

    const ::zx::channel& channel() const { return client_end_.channel(); }
    ::zx::channel* mutable_channel() { return &client_end_.channel(); }

    // Allocates 24 bytes of response buffer on the stack. Request is
    // heap-allocated.
    ResultOf::foo foo(::fidl::StringView s) {
      return ResultOf::foo(this->client_end(), s);
    }

    // Caller provides the backing storage for FIDL message via request and
    // response buffers.
    UnownedResultOf::foo foo(::fidl::BufferSpan _request_buffer,
                             ::fidl::StringView s,
                             ::fidl::BufferSpan _response_buffer) {
      return UnownedResultOf::foo(
          this->client_end(), _request_buffer.data, _request_buffer.capacity, s,
          _response_buffer.data, _response_buffer.capacity);
    }

   private:
    ::fidl::ClientEnd<super> client_end_;
  };

#ifdef __Fuchsia__
  class AsyncEventHandler;
  class fooResponseContext;
  class ClientImpl;
#endif

  // Pure-virtual interface to be implemented by a server.
  // This interface uses typed channels (i.e. |fidl::ClientEnd<SomeProtocol>|
  // and |fidl::ServerEnd<SomeProtocol>|).
  class Interface : public ::fidl::internal::IncomingMessageDispatcher {
   public:
    Interface() = default;
    virtual ~Interface() = default;

    // The marker protocol type within which this |Interface| class is defined.
    using _EnclosingProtocol = super;

    class fooCompleterBase : public ::fidl::CompleterBase {
     public:
      // In the following methods, the return value indicates internal errors
      // during the reply, such as encoding or writing to the transport. Note
      // that any error will automatically lead to the destruction of the
      // binding, after which the |on_unbound| callback will be triggered with a
      // detailed reason.
      //
      // See //zircon/system/ulib/fidl/include/lib/fidl/llcpp/server.h.
      //
      // Because the reply status is identical to the unbinding status, it can
      // be safely ignored.
      ::fidl::Result Reply(int64_t y);
      ::fidl::Result Reply(::fidl::BufferSpan _buffer, int64_t y);

     protected:
      using ::fidl::CompleterBase::CompleterBase;
    };

    using fooCompleter = ::fidl::Completer<fooCompleterBase>;

    virtual void foo(::fidl::StringView s, fooCompleter::Sync& _completer) = 0;

   private:
    ::fidl::DispatchResult dispatch_message(fidl_incoming_msg_t* msg,
                                            ::fidl::Transaction* txn) final;
  };

  // Attempts to dispatch the incoming message to a handler function in the
  // server implementation. If there is no matching handler, it returns false,
  // leaving the message and transaction intact. In all other cases, it consumes
  // the message and returns true. It is possible to chain multiple TryDispatch
  // functions in this manner.
  static ::fidl::DispatchResult TryDispatch(Interface* impl,
                                            fidl_incoming_msg_t* msg,
                                            ::fidl::Transaction* txn);

  // Dispatches the incoming message to one of the handlers functions in the
  // protocol. If there is no matching handler, it closes all the handles in
  // |msg| and closes the channel with a |ZX_ERR_NOT_SUPPORTED| epitaph, before
  // returning false. The message should then be discarded.
  static ::fidl::DispatchResult Dispatch(Interface* impl,
                                         fidl_incoming_msg_t* msg,
                                         ::fidl::Transaction* txn);

  // Same as |Dispatch|, but takes a |void*| instead of |Interface*|.
  // Only used with |fidl::BindServer| to reduce template expansion.
  // Do not call this method manually. Use |Dispatch| instead.
  static ::fidl::DispatchResult TypeErasedDispatch(void* impl,
                                                   fidl_incoming_msg_t* msg,
                                                   ::fidl::Transaction* txn) {
    return Dispatch(static_cast<Interface*>(impl), msg, txn);
  }

#endif

  class EventSender;
  class WeakEventSender;
};

extern "C" const fidl_type_t fidl_test_inheritance_subfooRequestTable;

extern "C" const fidl_type_t fidl_test_inheritance_subfooResponseTable;

class sub final {
  sub() = delete;

 public:
  struct fooResponse final {
    FIDL_ALIGNDECL
    fidl_message_header_t _hdr;
    int64_t y;
    explicit fooResponse(int64_t y) : y(y) { _InitHeader(); }
    fooResponse() { _InitHeader(); }

    static constexpr const fidl_type_t* Type =
        &::fidl_test_inheritance::fidl_test_inheritance_subfooResponseTable;
    static constexpr uint32_t MaxNumHandles = 0;
    static constexpr uint32_t PrimarySize = 24;
    static constexpr uint32_t MaxOutOfLine = 0;
    static constexpr bool HasFlexibleEnvelope = false;
    static constexpr bool HasPointer = false;
    static constexpr ::fidl::internal::TransactionalMessageKind MessageKind =
        ::fidl::internal::TransactionalMessageKind::kResponse;

   private:
    class UnownedEncodedByteMessage final {
     public:
      UnownedEncodedByteMessage(uint8_t* _bytes, uint32_t _byte_size, int64_t y)
          : message_(_bytes, _byte_size, sizeof(fooResponse), nullptr, 0, 0) {
        FIDL_ALIGNDECL fooResponse _response{y};
        message_.Encode<fooResponse>(&_response);
      }
      UnownedEncodedByteMessage(uint8_t* bytes, uint32_t byte_size,
                                fooResponse* response)
          : message_(bytes, byte_size, sizeof(fooResponse), nullptr, 0, 0) {
        message_.Encode<fooResponse>(response);
      }
      UnownedEncodedByteMessage(const UnownedEncodedByteMessage&) = delete;
      UnownedEncodedByteMessage(UnownedEncodedByteMessage&&) = delete;
      UnownedEncodedByteMessage* operator=(const UnownedEncodedByteMessage&) =
          delete;
      UnownedEncodedByteMessage* operator=(UnownedEncodedByteMessage&&) =
          delete;

      zx_status_t status() const { return message_.status(); }
#ifdef __Fuchsia__
      const char* status_string() const { return message_.status_string(); }
#endif
      bool ok() const { return message_.status() == ZX_OK; }
      const char* error() const { return message_.error(); }

      ::fidl::OutgoingByteMessage& GetOutgoingMessage() { return message_; }

#ifdef __Fuchsia__
      template <typename ChannelLike>
      void Write(ChannelLike&& client) {
        message_.Write(std::forward<ChannelLike>(client));
      }
#endif

     private:
      ::fidl::OutgoingByteMessage message_;
    };

    class UnownedEncodedIovecMessage final {
     public:
      UnownedEncodedIovecMessage(zx_channel_iovec_t* iovecs,
                                 uint32_t iovec_size,
                                 fidl_iovec_substitution_t* substitutions,
                                 uint32_t substitutions_size, int64_t y)
          : message_(::fidl::OutgoingIovecMessage::constructor_args{
                .iovecs = iovecs,
                .iovecs_actual = 0,
                .iovecs_capacity = iovec_size,
                .substitutions = substitutions,
                .substitutions_actual = 0,
                .substitutions_capacity = substitutions_size,
                .handles = nullptr,
                .handle_actual = 0,
                .handle_capacity = 0,
            }) {
        FIDL_ALIGNDECL fooResponse _response{y};
        message_.Encode<fooResponse>(&_response);
      }
      UnownedEncodedIovecMessage(zx_channel_iovec_t* iovecs,
                                 uint32_t iovec_size,
                                 fidl_iovec_substitution_t* substitutions,
                                 uint32_t substitutions_size,
                                 fooResponse* response)
          : message_(::fidl::OutgoingIovecMessage::constructor_args{
                .iovecs = iovecs,
                .iovecs_actual = 0,
                .iovecs_capacity = iovec_size,
                .substitutions = substitutions,
                .substitutions_actual = 0,
                .substitutions_capacity = substitutions_size,
                .handles = nullptr,
                .handle_actual = 0,
                .handle_capacity = 0,
            }) {
        message_.Encode<fooResponse>(response);
      }
      UnownedEncodedIovecMessage(const UnownedEncodedIovecMessage&) = delete;
      UnownedEncodedIovecMessage(UnownedEncodedIovecMessage&&) = delete;
      UnownedEncodedIovecMessage* operator=(const UnownedEncodedIovecMessage&) =
          delete;
      UnownedEncodedIovecMessage* operator=(UnownedEncodedIovecMessage&&) =
          delete;

      zx_status_t status() const { return message_.status(); }
#ifdef __Fuchsia__
      const char* status_string() const { return message_.status_string(); }
#endif
      bool ok() const { return message_.status() == ZX_OK; }
      const char* error() const { return message_.error(); }

      ::fidl::OutgoingIovecMessage& GetOutgoingMessage() { return message_; }

#ifdef __Fuchsia__
      template <typename ChannelLike>
      void Write(ChannelLike&& client) {
        message_.Write(std::forward<ChannelLike>(client));
      }
#endif

     private:
      ::fidl::OutgoingIovecMessage message_;
    };

    class OwnedEncodedByteMessage final {
     public:
      explicit OwnedEncodedByteMessage(int64_t y)
          : message_(bytes_.data(), bytes_.size(), y) {}
      explicit OwnedEncodedByteMessage(fooResponse* response)
          : message_(bytes_.data(), bytes_.size(), response) {}
      OwnedEncodedByteMessage(const OwnedEncodedByteMessage&) = delete;
      OwnedEncodedByteMessage(OwnedEncodedByteMessage&&) = delete;
      OwnedEncodedByteMessage* operator=(const OwnedEncodedByteMessage&) =
          delete;
      OwnedEncodedByteMessage* operator=(OwnedEncodedByteMessage&&) = delete;

      zx_status_t status() const { return message_.status(); }
#ifdef __Fuchsia__
      const char* status_string() const { return message_.status_string(); }
#endif
      bool ok() const { return message_.ok(); }
      const char* error() const { return message_.error(); }

      ::fidl::OutgoingByteMessage& GetOutgoingMessage() {
        return message_.GetOutgoingMessage();
      }

#ifdef __Fuchsia__
      template <typename ChannelLike>
      void Write(ChannelLike&& client) {
        message_.Write(std::forward<ChannelLike>(client));
      }
#endif

     private:
      ::fidl::internal::InlineMessageBuffer<24> bytes_;
      UnownedEncodedByteMessage message_;
    };

    class OwnedEncodedIovecMessage final {
     public:
      explicit OwnedEncodedIovecMessage(int64_t y)
          : message_(iovecs_, ::fidl::internal::kIovecBufferSize,
                     substitutions_, ::fidl::internal::kIovecBufferSize, y) {}
      explicit OwnedEncodedIovecMessage(fooResponse* response)
          : message_(iovecs_, ::fidl::internal::kIovecBufferSize,
                     substitutions_, ::fidl::internal::kIovecBufferSize,
                     response) {}
      OwnedEncodedIovecMessage(const OwnedEncodedIovecMessage&) = delete;
      OwnedEncodedIovecMessage(OwnedEncodedIovecMessage&&) = delete;
      OwnedEncodedIovecMessage* operator=(const OwnedEncodedIovecMessage&) =
          delete;
      OwnedEncodedIovecMessage* operator=(OwnedEncodedIovecMessage&&) = delete;

      zx_status_t status() const { return message_.status(); }
#ifdef __Fuchsia__
      const char* status_string() const { return message_.status_string(); }
#endif
      bool ok() const { return message_.ok(); }
      const char* error() const { return message_.error(); }

      ::fidl::OutgoingIovecMessage& GetOutgoingMessage() {
        return message_.GetOutgoingMessage();
      }

#ifdef __Fuchsia__
      template <typename ChannelLike>
      void Write(ChannelLike&& client) {
        message_.Write(std::forward<ChannelLike>(client));
      }
#endif

     private:
      zx_channel_iovec_t iovecs_[::fidl::internal::kIovecBufferSize];
      fidl_iovec_substitution_t
          substitutions_[::fidl::internal::kIovecBufferSize];
      UnownedEncodedIovecMessage message_;
    };

   public:
    friend ::fidl::internal::EncodedMessageTypes<fooResponse>;
    using OwnedEncodedMessage = OwnedEncodedByteMessage;
    using UnownedEncodedMessage = UnownedEncodedByteMessage;

    class DecodedMessage final : public ::fidl::internal::IncomingMessage {
     public:
      DecodedMessage(uint8_t* bytes, uint32_t byte_actual,
                     zx_handle_info_t* handles = nullptr,
                     uint32_t handle_actual = 0)
          : ::fidl::internal::IncomingMessage(bytes, byte_actual, handles,
                                              handle_actual) {
        Decode<fooResponse>();
      }
      DecodedMessage(fidl_incoming_msg_t* msg)
          : ::fidl::internal::IncomingMessage(msg) {
        Decode<fooResponse>();
      }
      DecodedMessage(const DecodedMessage&) = delete;
      DecodedMessage(DecodedMessage&&) = delete;
      DecodedMessage* operator=(const DecodedMessage&) = delete;
      DecodedMessage* operator=(DecodedMessage&&) = delete;

      fooResponse* PrimaryObject() {
        ZX_DEBUG_ASSERT(ok());
        return reinterpret_cast<fooResponse*>(bytes());
      }

      // Release the ownership of the decoded message. That means that the
      // handles won't be closed When the object is destroyed. After calling
      // this method, the DecodedMessage object should not be used anymore.
      void ReleasePrimaryObject() { ResetBytes(); }
    };

   private:
    void _InitHeader();
  };
  struct fooRequest final {
    FIDL_ALIGNDECL
    fidl_message_header_t _hdr;
    ::fidl::StringView s;
    explicit fooRequest(zx_txid_t _txid, const ::fidl::StringView& s)
        : s(::fidl::unowned_ptr_t<const char>(s.data()), s.size()) {
      _InitHeader(_txid);
    }
    explicit fooRequest(zx_txid_t _txid) { _InitHeader(_txid); }

    static constexpr const fidl_type_t* Type =
        &::fidl_test_inheritance::fidl_test_inheritance_subfooRequestTable;
    static constexpr uint32_t MaxNumHandles = 0;
    static constexpr uint32_t PrimarySize = 32;
    static constexpr uint32_t MaxOutOfLine = 4294967295;
    static constexpr uint32_t AltPrimarySize = 32;
    static constexpr uint32_t AltMaxOutOfLine = 4294967295;
    static constexpr bool HasFlexibleEnvelope = false;
    static constexpr bool HasPointer = true;
    static constexpr ::fidl::internal::TransactionalMessageKind MessageKind =
        ::fidl::internal::TransactionalMessageKind::kRequest;
    using ResponseType = fooResponse;

   private:
    class UnownedEncodedByteMessage final {
     public:
      UnownedEncodedByteMessage(uint8_t* _bytes, uint32_t _byte_size,
                                zx_txid_t _txid, const ::fidl::StringView& s)
          : message_(_bytes, _byte_size, sizeof(fooRequest), nullptr, 0, 0) {
        FIDL_ALIGNDECL fooRequest _request(_txid, s);
        message_.Encode<fooRequest>(&_request);
      }
      UnownedEncodedByteMessage(uint8_t* bytes, uint32_t byte_size,
                                fooRequest* request)
          : message_(bytes, byte_size, sizeof(fooRequest), nullptr, 0, 0) {
        message_.Encode<fooRequest>(request);
      }
      UnownedEncodedByteMessage(const UnownedEncodedByteMessage&) = delete;
      UnownedEncodedByteMessage(UnownedEncodedByteMessage&&) = delete;
      UnownedEncodedByteMessage* operator=(const UnownedEncodedByteMessage&) =
          delete;
      UnownedEncodedByteMessage* operator=(UnownedEncodedByteMessage&&) =
          delete;

      zx_status_t status() const { return message_.status(); }
#ifdef __Fuchsia__
      const char* status_string() const { return message_.status_string(); }
#endif
      bool ok() const { return message_.status() == ZX_OK; }
      const char* error() const { return message_.error(); }

      ::fidl::OutgoingByteMessage& GetOutgoingMessage() { return message_; }

#ifdef __Fuchsia__
      template <typename ChannelLike>
      void Write(ChannelLike&& client) {
        message_.Write(std::forward<ChannelLike>(client));
      }
#endif

     private:
      ::fidl::OutgoingByteMessage message_;
    };

    class UnownedEncodedIovecMessage final {
     public:
      UnownedEncodedIovecMessage(zx_channel_iovec_t* iovecs,
                                 uint32_t iovec_size,
                                 fidl_iovec_substitution_t* substitutions,
                                 uint32_t substitutions_size, zx_txid_t _txid,
                                 const ::fidl::StringView& s)
          : message_(::fidl::OutgoingIovecMessage::constructor_args{
                .iovecs = iovecs,
                .iovecs_actual = 0,
                .iovecs_capacity = iovec_size,
                .substitutions = substitutions,
                .substitutions_actual = 0,
                .substitutions_capacity = substitutions_size,
                .handles = nullptr,
                .handle_actual = 0,
                .handle_capacity = 0,
            }) {
        FIDL_ALIGNDECL fooRequest _request(_txid, s);
        message_.Encode<fooRequest>(&_request);
      }
      UnownedEncodedIovecMessage(zx_channel_iovec_t* iovecs,
                                 uint32_t iovec_size,
                                 fidl_iovec_substitution_t* substitutions,
                                 uint32_t substitutions_size,
                                 fooRequest* request)
          : message_(::fidl::OutgoingIovecMessage::constructor_args{
                .iovecs = iovecs,
                .iovecs_actual = 0,
                .iovecs_capacity = iovec_size,
                .substitutions = substitutions,
                .substitutions_actual = 0,
                .substitutions_capacity = substitutions_size,
                .handles = nullptr,
                .handle_actual = 0,
                .handle_capacity = 0,
            }) {
        message_.Encode<fooRequest>(request);
      }
      UnownedEncodedIovecMessage(const UnownedEncodedIovecMessage&) = delete;
      UnownedEncodedIovecMessage(UnownedEncodedIovecMessage&&) = delete;
      UnownedEncodedIovecMessage* operator=(const UnownedEncodedIovecMessage&) =
          delete;
      UnownedEncodedIovecMessage* operator=(UnownedEncodedIovecMessage&&) =
          delete;

      zx_status_t status() const { return message_.status(); }
#ifdef __Fuchsia__
      const char* status_string() const { return message_.status_string(); }
#endif
      bool ok() const { return message_.status() == ZX_OK; }
      const char* error() const { return message_.error(); }

      ::fidl::OutgoingIovecMessage& GetOutgoingMessage() { return message_; }

#ifdef __Fuchsia__
      template <typename ChannelLike>
      void Write(ChannelLike&& client) {
        message_.Write(std::forward<ChannelLike>(client));
      }
#endif

     private:
      ::fidl::OutgoingIovecMessage message_;
    };

    class OwnedEncodedByteMessage final {
     public:
      explicit OwnedEncodedByteMessage(zx_txid_t _txid,
                                       const ::fidl::StringView& s)
          : message_(bytes_.data(), bytes_.size(), _txid, s) {}
      explicit OwnedEncodedByteMessage(fooRequest* request)
          : message_(bytes_.data(), bytes_.size(), request) {}
      OwnedEncodedByteMessage(const OwnedEncodedByteMessage&) = delete;
      OwnedEncodedByteMessage(OwnedEncodedByteMessage&&) = delete;
      OwnedEncodedByteMessage* operator=(const OwnedEncodedByteMessage&) =
          delete;
      OwnedEncodedByteMessage* operator=(OwnedEncodedByteMessage&&) = delete;

      zx_status_t status() const { return message_.status(); }
#ifdef __Fuchsia__
      const char* status_string() const { return message_.status_string(); }
#endif
      bool ok() const { return message_.ok(); }
      const char* error() const { return message_.error(); }

      ::fidl::OutgoingByteMessage& GetOutgoingMessage() {
        return message_.GetOutgoingMessage();
      }

#ifdef __Fuchsia__
      template <typename ChannelLike>
      void Write(ChannelLike&& client) {
        message_.Write(std::forward<ChannelLike>(client));
      }
#endif

     private:
      ::fidl::internal::BoxedMessageBuffer<ZX_CHANNEL_MAX_MSG_BYTES> bytes_;
      UnownedEncodedByteMessage message_;
    };

    class OwnedEncodedIovecMessage final {
     public:
      explicit OwnedEncodedIovecMessage(zx_txid_t _txid,
                                        const ::fidl::StringView& s)
          : message_(iovecs_, ::fidl::internal::kIovecBufferSize,
                     substitutions_, ::fidl::internal::kIovecBufferSize, _txid,
                     s) {}
      explicit OwnedEncodedIovecMessage(fooRequest* request)
          : message_(iovecs_, ::fidl::internal::kIovecBufferSize,
                     substitutions_, ::fidl::internal::kIovecBufferSize,
                     request) {}
      OwnedEncodedIovecMessage(const OwnedEncodedIovecMessage&) = delete;
      OwnedEncodedIovecMessage(OwnedEncodedIovecMessage&&) = delete;
      OwnedEncodedIovecMessage* operator=(const OwnedEncodedIovecMessage&) =
          delete;
      OwnedEncodedIovecMessage* operator=(OwnedEncodedIovecMessage&&) = delete;

      zx_status_t status() const { return message_.status(); }
#ifdef __Fuchsia__
      const char* status_string() const { return message_.status_string(); }
#endif
      bool ok() const { return message_.ok(); }
      const char* error() const { return message_.error(); }

      ::fidl::OutgoingIovecMessage& GetOutgoingMessage() {
        return message_.GetOutgoingMessage();
      }

#ifdef __Fuchsia__
      template <typename ChannelLike>
      void Write(ChannelLike&& client) {
        message_.Write(std::forward<ChannelLike>(client));
      }
#endif

     private:
      zx_channel_iovec_t iovecs_[::fidl::internal::kIovecBufferSize];
      fidl_iovec_substitution_t
          substitutions_[::fidl::internal::kIovecBufferSize];
      UnownedEncodedIovecMessage message_;
    };

   public:
    friend ::fidl::internal::EncodedMessageTypes<fooRequest>;
    using OwnedEncodedMessage = OwnedEncodedByteMessage;
    using UnownedEncodedMessage = UnownedEncodedByteMessage;

    class DecodedMessage final : public ::fidl::internal::IncomingMessage {
     public:
      DecodedMessage(uint8_t* bytes, uint32_t byte_actual,
                     zx_handle_info_t* handles = nullptr,
                     uint32_t handle_actual = 0)
          : ::fidl::internal::IncomingMessage(bytes, byte_actual, handles,
                                              handle_actual) {
        Decode<fooRequest>();
      }
      DecodedMessage(fidl_incoming_msg_t* msg)
          : ::fidl::internal::IncomingMessage(msg) {
        Decode<fooRequest>();
      }
      DecodedMessage(const DecodedMessage&) = delete;
      DecodedMessage(DecodedMessage&&) = delete;
      DecodedMessage* operator=(const DecodedMessage&) = delete;
      DecodedMessage* operator=(DecodedMessage&&) = delete;

      fooRequest* PrimaryObject() {
        ZX_DEBUG_ASSERT(ok());
        return reinterpret_cast<fooRequest*>(bytes());
      }

      // Release the ownership of the decoded message. That means that the
      // handles won't be closed When the object is destroyed. After calling
      // this method, the DecodedMessage object should not be used anymore.
      void ReleasePrimaryObject() { ResetBytes(); }
    };

   private:
    void _InitHeader(zx_txid_t _txid);
  };

  class EventHandlerInterface {
   public:
    EventHandlerInterface() = default;
    virtual ~EventHandlerInterface() = default;
  };

#ifdef __Fuchsia__
  // Collection of return types of FIDL calls in this protocol.
  class ResultOf final {
    ResultOf() = delete;

   public:
    class foo final : public ::fidl::Result {
     public:
      explicit foo(
          ::fidl::UnownedClientEnd<::fidl_test_inheritance::sub> _client,
          const ::fidl::StringView& s);
      foo(::fidl::UnownedClientEnd<::fidl_test_inheritance::sub> _client,
          const ::fidl::StringView& s, zx_time_t _deadline);
      explicit foo(const ::fidl::Result& result) : ::fidl::Result(result) {}
      foo(foo&&) = delete;
      foo(const foo&) = delete;
      foo* operator=(foo&&) = delete;
      foo* operator=(const foo&) = delete;
      ~foo() = default;

      fooResponse* Unwrap() {
        ZX_DEBUG_ASSERT(ok());
        return reinterpret_cast<fooResponse*>(bytes_.data());
      }
      const fooResponse* Unwrap() const {
        ZX_DEBUG_ASSERT(ok());
        return reinterpret_cast<const fooResponse*>(bytes_.data());
      }

      fooResponse& value() { return *Unwrap(); }
      const fooResponse& value() const { return *Unwrap(); }

      fooResponse* operator->() { return &value(); }
      const fooResponse* operator->() const { return &value(); }

      fooResponse& operator*() { return value(); }
      const fooResponse& operator*() const { return value(); }

     private:
      ::fidl::internal::InlineMessageBuffer<24> bytes_;
    };
  };

  // Collection of return types of FIDL calls in this protocol,
  // when the caller-allocate flavor or in-place call is used.
  class UnownedResultOf final {
    UnownedResultOf() = delete;

   public:
    class foo final : public ::fidl::Result {
     public:
      explicit foo(
          ::fidl::UnownedClientEnd<::fidl_test_inheritance::sub> _client,
          uint8_t* _request_bytes, uint32_t _request_byte_capacity,
          const ::fidl::StringView& s, uint8_t* _response_bytes,
          uint32_t _response_byte_capacity);
      explicit foo(const ::fidl::Result& result) : ::fidl::Result(result) {}
      foo(foo&&) = delete;
      foo(const foo&) = delete;
      foo* operator=(foo&&) = delete;
      foo* operator=(const foo&) = delete;
      ~foo() = default;

      fooResponse* Unwrap() {
        ZX_DEBUG_ASSERT(ok());
        return reinterpret_cast<fooResponse*>(bytes_);
      }
      const fooResponse* Unwrap() const {
        ZX_DEBUG_ASSERT(ok());
        return reinterpret_cast<const fooResponse*>(bytes_);
      }

      fooResponse& value() { return *Unwrap(); }
      const fooResponse& value() const { return *Unwrap(); }

      fooResponse* operator->() { return &value(); }
      const fooResponse* operator->() const { return &value(); }

      fooResponse& operator*() { return value(); }
      const fooResponse& operator*() const { return value(); }

     private:
      uint8_t* bytes_;
    };
  };

  // Methods to make a sync FIDL call directly on an unowned channel or a
  // const reference to a |fidl::ClientEnd<::fidl_test_inheritance::sub>|,
  // avoiding setting up a client.
  class Call final {
    Call() = delete;

   public:
    // Allocates 24 bytes of response buffer on the stack. Request is
    // heap-allocated.
    static ResultOf::foo foo(
        ::fidl::UnownedClientEnd<::fidl_test_inheritance::sub> _client_end,
        ::fidl::StringView s) {
      return ResultOf::foo(_client_end, s);
    }

    // Caller provides the backing storage for FIDL message via request and
    // response buffers.
    static UnownedResultOf::foo foo(
        ::fidl::UnownedClientEnd<::fidl_test_inheritance::sub> _client_end,
        ::fidl::BufferSpan _request_buffer, ::fidl::StringView s,
        ::fidl::BufferSpan _response_buffer) {
      return UnownedResultOf::foo(
          _client_end, _request_buffer.data, _request_buffer.capacity, s,
          _response_buffer.data, _response_buffer.capacity);
    }
  };

  class SyncClient final {
   public:
    SyncClient() = default;

    explicit SyncClient(::fidl::ClientEnd<sub> client_end)
        : client_end_(std::move(client_end)) {}

    ~SyncClient() = default;
    SyncClient(SyncClient&&) = default;
    SyncClient& operator=(SyncClient&&) = default;

    const ::fidl::ClientEnd<sub>& client_end() const { return client_end_; }
    ::fidl::ClientEnd<sub>& client_end() { return client_end_; }

    const ::zx::channel& channel() const { return client_end_.channel(); }
    ::zx::channel* mutable_channel() { return &client_end_.channel(); }

    // Allocates 24 bytes of response buffer on the stack. Request is
    // heap-allocated.
    ResultOf::foo foo(::fidl::StringView s) {
      return ResultOf::foo(this->client_end(), s);
    }

    // Caller provides the backing storage for FIDL message via request and
    // response buffers.
    UnownedResultOf::foo foo(::fidl::BufferSpan _request_buffer,
                             ::fidl::StringView s,
                             ::fidl::BufferSpan _response_buffer) {
      return UnownedResultOf::foo(
          this->client_end(), _request_buffer.data, _request_buffer.capacity, s,
          _response_buffer.data, _response_buffer.capacity);
    }

   private:
    ::fidl::ClientEnd<sub> client_end_;
  };

#ifdef __Fuchsia__
  class AsyncEventHandler;
  class fooResponseContext;
  class ClientImpl;
#endif

  // Pure-virtual interface to be implemented by a server.
  // This interface uses typed channels (i.e. |fidl::ClientEnd<SomeProtocol>|
  // and |fidl::ServerEnd<SomeProtocol>|).
  class Interface : public ::fidl::internal::IncomingMessageDispatcher {
   public:
    Interface() = default;
    virtual ~Interface() = default;

    // The marker protocol type within which this |Interface| class is defined.
    using _EnclosingProtocol = sub;

    class fooCompleterBase : public ::fidl::CompleterBase {
     public:
      // In the following methods, the return value indicates internal errors
      // during the reply, such as encoding or writing to the transport. Note
      // that any error will automatically lead to the destruction of the
      // binding, after which the |on_unbound| callback will be triggered with a
      // detailed reason.
      //
      // See //zircon/system/ulib/fidl/include/lib/fidl/llcpp/server.h.
      //
      // Because the reply status is identical to the unbinding status, it can
      // be safely ignored.
      ::fidl::Result Reply(int64_t y);
      ::fidl::Result Reply(::fidl::BufferSpan _buffer, int64_t y);

     protected:
      using ::fidl::CompleterBase::CompleterBase;
    };

    using fooCompleter = ::fidl::Completer<fooCompleterBase>;

    virtual void foo(::fidl::StringView s, fooCompleter::Sync& _completer) = 0;

   private:
    ::fidl::DispatchResult dispatch_message(fidl_incoming_msg_t* msg,
                                            ::fidl::Transaction* txn) final;
  };

  // Attempts to dispatch the incoming message to a handler function in the
  // server implementation. If there is no matching handler, it returns false,
  // leaving the message and transaction intact. In all other cases, it consumes
  // the message and returns true. It is possible to chain multiple TryDispatch
  // functions in this manner.
  static ::fidl::DispatchResult TryDispatch(Interface* impl,
                                            fidl_incoming_msg_t* msg,
                                            ::fidl::Transaction* txn);

  // Dispatches the incoming message to one of the handlers functions in the
  // protocol. If there is no matching handler, it closes all the handles in
  // |msg| and closes the channel with a |ZX_ERR_NOT_SUPPORTED| epitaph, before
  // returning false. The message should then be discarded.
  static ::fidl::DispatchResult Dispatch(Interface* impl,
                                         fidl_incoming_msg_t* msg,
                                         ::fidl::Transaction* txn);

  // Same as |Dispatch|, but takes a |void*| instead of |Interface*|.
  // Only used with |fidl::BindServer| to reduce template expansion.
  // Do not call this method manually. Use |Dispatch| instead.
  static ::fidl::DispatchResult TypeErasedDispatch(void* impl,
                                                   fidl_incoming_msg_t* msg,
                                                   ::fidl::Transaction* txn) {
    return Dispatch(static_cast<Interface*>(impl), msg, txn);
  }

#endif

  class EventSender;
  class WeakEventSender;
};

}  // namespace fidl_test_inheritance
namespace fidl {

template <>
struct IsFidlType<::fidl_test_inheritance::super::fooRequest>
    : public std::true_type {};
template <>
struct IsFidlMessage<::fidl_test_inheritance::super::fooRequest>
    : public std::true_type {};
static_assert(sizeof(::fidl_test_inheritance::super::fooRequest) ==
              ::fidl_test_inheritance::super::fooRequest::PrimarySize);
static_assert(offsetof(::fidl_test_inheritance::super::fooRequest, s) == 16);

template <>
struct IsFidlType<::fidl_test_inheritance::super::fooResponse>
    : public std::true_type {};
template <>
struct IsFidlMessage<::fidl_test_inheritance::super::fooResponse>
    : public std::true_type {};
static_assert(sizeof(::fidl_test_inheritance::super::fooResponse) ==
              ::fidl_test_inheritance::super::fooResponse::PrimarySize);
static_assert(offsetof(::fidl_test_inheritance::super::fooResponse, y) == 16);

template <>
struct IsFidlType<::fidl_test_inheritance::sub::fooRequest>
    : public std::true_type {};
template <>
struct IsFidlMessage<::fidl_test_inheritance::sub::fooRequest>
    : public std::true_type {};
static_assert(sizeof(::fidl_test_inheritance::sub::fooRequest) ==
              ::fidl_test_inheritance::sub::fooRequest::PrimarySize);
static_assert(offsetof(::fidl_test_inheritance::sub::fooRequest, s) == 16);

template <>
struct IsFidlType<::fidl_test_inheritance::sub::fooResponse>
    : public std::true_type {};
template <>
struct IsFidlMessage<::fidl_test_inheritance::sub::fooResponse>
    : public std::true_type {};
static_assert(sizeof(::fidl_test_inheritance::sub::fooResponse) ==
              ::fidl_test_inheritance::sub::fooResponse::PrimarySize);
static_assert(offsetof(::fidl_test_inheritance::sub::fooResponse, y) == 16);
}  // namespace fidl
namespace fidl_test_inheritance {

#ifdef __Fuchsia__
class super::AsyncEventHandler : public super::EventHandlerInterface {
 public:
  AsyncEventHandler() = default;

  virtual void Unbound(::fidl::UnbindInfo info) {}
};

class super::fooResponseContext : public ::fidl::internal::ResponseContext {
 public:
  fooResponseContext();

  virtual void OnReply(super::fooResponse* message) = 0;

 private:
  void OnReply(uint8_t* reply) override;
};

class super::ClientImpl final : private ::fidl::internal::ClientBase {
 public:
  // Asynchronous variant of |super.foo()|.
  // The request and callback are allocated on the heap.
  ::fidl::Result foo(::fidl::StringView s,
                     ::fit::callback<void(fooResponse* response)> _cb);

  // Asynchronous variant of |super.foo()|.
  // Caller provides the backing storage for FIDL message via request buffer.
  // Ownership of |_context| is given unsafely to the binding until |OnError|
  // or |OnReply| are called on it.
  ::fidl::Result foo(::fidl::BufferSpan _request_buffer, ::fidl::StringView s,
                     fooResponseContext* _context);

  // Synchronous variant of |super.foo()|.
  // Allocates 24 bytes of response buffer on the stack. Request is
  // heap-allocated.
  ResultOf::foo foo_Sync(::fidl::StringView s);

  // Synchronous variant of |super.foo()|.
  // Caller provides the backing storage for FIDL message via request and
  // response buffers.
  UnownedResultOf::foo foo_Sync(::fidl::BufferSpan _request_buffer,
                                ::fidl::StringView s,
                                ::fidl::BufferSpan _response_buffer);

  AsyncEventHandler* event_handler() const { return event_handler_.get(); }

 private:
  friend class ::fidl::Client<super>;
  friend class ::fidl::internal::ControlBlock<super>;

  explicit ClientImpl(std::shared_ptr<AsyncEventHandler> event_handler)
      : event_handler_(std::move(event_handler)) {}

  std::optional<::fidl::UnbindInfo> DispatchEvent(
      fidl_incoming_msg_t* msg) override;

  std::shared_ptr<AsyncEventHandler> event_handler_;
};
#endif

#ifdef __Fuchsia__
// |EventSender| owns a server endpoint of a channel speaking
// the super protocol, and can send events in that protocol.
class super::EventSender {
 public:
  // Constructs an event sender with an invalid channel.
  EventSender() = default;

  explicit EventSender(
      ::fidl::ServerEnd<::fidl_test_inheritance::super> server_end)
      : server_end_(std::move(server_end)) {}

  // The underlying server channel endpoint, which may be replaced at run-time.
  const ::fidl::ServerEnd<super>& server_end() const { return server_end_; }
  ::fidl::ServerEnd<super>& server_end() { return server_end_; }

  const ::zx::channel& channel() const { return server_end_.channel(); }
  ::zx::channel& channel() { return server_end_.channel(); }

  // Whether the underlying channel is valid.
  bool is_valid() const { return server_end_.is_valid(); }

 private:
  ::fidl::ServerEnd<super> server_end_;
};

class super::WeakEventSender {
 public:
 private:
  friend class ::fidl::ServerBindingRef<super>;

  explicit WeakEventSender(
      std::weak_ptr<::fidl::internal::AsyncServerBinding<super>> binding)
      : binding_(std::move(binding)) {}

  std::weak_ptr<::fidl::internal::AsyncServerBinding<super>> binding_;
};
#endif

#ifdef __Fuchsia__
class sub::AsyncEventHandler : public sub::EventHandlerInterface {
 public:
  AsyncEventHandler() = default;

  virtual void Unbound(::fidl::UnbindInfo info) {}
};

class sub::fooResponseContext : public ::fidl::internal::ResponseContext {
 public:
  fooResponseContext();

  virtual void OnReply(sub::fooResponse* message) = 0;

 private:
  void OnReply(uint8_t* reply) override;
};

class sub::ClientImpl final : private ::fidl::internal::ClientBase {
 public:
  // Asynchronous variant of |sub.foo()|.
  // The request and callback are allocated on the heap.
  ::fidl::Result foo(::fidl::StringView s,
                     ::fit::callback<void(fooResponse* response)> _cb);

  // Asynchronous variant of |sub.foo()|.
  // Caller provides the backing storage for FIDL message via request buffer.
  // Ownership of |_context| is given unsafely to the binding until |OnError|
  // or |OnReply| are called on it.
  ::fidl::Result foo(::fidl::BufferSpan _request_buffer, ::fidl::StringView s,
                     fooResponseContext* _context);

  // Synchronous variant of |sub.foo()|.
  // Allocates 24 bytes of response buffer on the stack. Request is
  // heap-allocated.
  ResultOf::foo foo_Sync(::fidl::StringView s);

  // Synchronous variant of |sub.foo()|.
  // Caller provides the backing storage for FIDL message via request and
  // response buffers.
  UnownedResultOf::foo foo_Sync(::fidl::BufferSpan _request_buffer,
                                ::fidl::StringView s,
                                ::fidl::BufferSpan _response_buffer);

  AsyncEventHandler* event_handler() const { return event_handler_.get(); }

 private:
  friend class ::fidl::Client<sub>;
  friend class ::fidl::internal::ControlBlock<sub>;

  explicit ClientImpl(std::shared_ptr<AsyncEventHandler> event_handler)
      : event_handler_(std::move(event_handler)) {}

  std::optional<::fidl::UnbindInfo> DispatchEvent(
      fidl_incoming_msg_t* msg) override;

  std::shared_ptr<AsyncEventHandler> event_handler_;
};
#endif

#ifdef __Fuchsia__
// |EventSender| owns a server endpoint of a channel speaking
// the sub protocol, and can send events in that protocol.
class sub::EventSender {
 public:
  // Constructs an event sender with an invalid channel.
  EventSender() = default;

  explicit EventSender(
      ::fidl::ServerEnd<::fidl_test_inheritance::sub> server_end)
      : server_end_(std::move(server_end)) {}

  // The underlying server channel endpoint, which may be replaced at run-time.
  const ::fidl::ServerEnd<sub>& server_end() const { return server_end_; }
  ::fidl::ServerEnd<sub>& server_end() { return server_end_; }

  const ::zx::channel& channel() const { return server_end_.channel(); }
  ::zx::channel& channel() { return server_end_.channel(); }

  // Whether the underlying channel is valid.
  bool is_valid() const { return server_end_.is_valid(); }

 private:
  ::fidl::ServerEnd<sub> server_end_;
};

class sub::WeakEventSender {
 public:
 private:
  friend class ::fidl::ServerBindingRef<sub>;

  explicit WeakEventSender(
      std::weak_ptr<::fidl::internal::AsyncServerBinding<sub>> binding)
      : binding_(std::move(binding)) {}

  std::weak_ptr<::fidl::internal::AsyncServerBinding<sub>> binding_;
};
#endif

}  // namespace fidl_test_inheritance
