// WARNING: This file is machine generated by fidlgen.

#pragma once

#include <lib/fidl/internal.h>
#include <lib/fidl/llcpp/array.h>
#include <lib/fidl/llcpp/coding.h>
#include <lib/fidl/llcpp/envelope.h>
#include <lib/fidl/llcpp/message.h>
#include <lib/fidl/llcpp/message_storage.h>
#include <lib/fidl/llcpp/object_view.h>
#include <lib/fidl/llcpp/result.h>
#include <lib/fidl/llcpp/string_view.h>
#include <lib/fidl/llcpp/traits.h>
#include <lib/fidl/llcpp/vector_view.h>
#include <lib/fidl/llcpp/wire_messaging.h>
#include <lib/fit/function.h>
#include <lib/stdcompat/optional.h>

#include <algorithm>
#include <cstddef>
#include <variant>
#ifdef __Fuchsia__
#include <lib/fidl/llcpp/client.h>
#include <lib/fidl/llcpp/client_end.h>
#include <lib/fidl/llcpp/connect_service.h>
#include <lib/fidl/llcpp/server.h>
#include <lib/fidl/llcpp/server_end.h>
#include <lib/fidl/llcpp/service_handler_interface.h>
#include <lib/fidl/llcpp/sync_call.h>
#include <lib/fidl/llcpp/transaction.h>
#include <lib/fidl/txn_header.h>
#include <lib/zx/channel.h>

#endif  // __Fuchsia__
#include <zircon/fidl.h>

namespace fidl_test_inheritance {
class Super;

class Sub;

__LOCAL extern "C" const fidl_type_t fidl_test_inheritance_superfooRequestTable;

__LOCAL extern "C" const fidl_type_t
    fidl_test_inheritance_superfooResponseTable;

class Super final {
  Super() = delete;

 public:
  class Foo final {
    Foo() = delete;
  };
};
}  // namespace fidl_test_inheritance
#ifdef __Fuchsia__

template <>
struct ::fidl::internal::ProtocolDetails<::fidl_test_inheritance::Super> {};
#endif  // __Fuchsia__

#ifdef __Fuchsia__

template <>
struct ::fidl::internal::WireServerDispatcher<::fidl_test_inheritance::Super>
    final {
  WireServerDispatcher() = delete;
  static ::fidl::DispatchResult TryDispatch(
      ::fidl::WireServer<::fidl_test_inheritance::Super>* impl,
      ::fidl::IncomingMessage& msg, ::fidl::Transaction* txn);
  static ::fidl::DispatchResult Dispatch(
      ::fidl::WireServer<::fidl_test_inheritance::Super>* impl,
      ::fidl::IncomingMessage&& msg, ::fidl::Transaction* txn);
};
#endif  // __Fuchsia__

template <>
struct ::fidl::WireRequest<::fidl_test_inheritance::Super::Foo> final {
  FIDL_ALIGNDECL
  fidl_message_header_t _hdr;
  ::fidl::StringView s;
  explicit WireRequest(::fidl::StringView s) : s(s) { _InitHeader(); }
  WireRequest() { _InitHeader(); }

  static constexpr const fidl_type_t* Type =
      &::fidl_test_inheritance::fidl_test_inheritance_superfooRequestTable;
  static constexpr uint32_t MaxNumHandles = 0;
  static constexpr uint32_t PrimarySize = 32;
  static constexpr uint32_t MaxOutOfLine = 4294967295;
  static constexpr uint32_t AltPrimarySize = 32;
  static constexpr uint32_t AltMaxOutOfLine = 4294967295;
  static constexpr bool HasFlexibleEnvelope = false;
  static constexpr bool HasPointer = true;
  static constexpr ::fidl::internal::TransactionalMessageKind MessageKind =
      ::fidl::internal::TransactionalMessageKind::kRequest;
  using ResponseType =
      ::fidl::WireResponse<::fidl_test_inheritance::Super::Foo>;

  class UnownedEncodedMessage final {
   public:
    UnownedEncodedMessage(uint8_t* _backing_buffer,
                          uint32_t _backing_buffer_size, ::fidl::StringView s)
        : UnownedEncodedMessage(::fidl::internal::IovecBufferSize,
                                _backing_buffer, _backing_buffer_size, s) {}
    UnownedEncodedMessage(uint32_t _iovec_capacity, uint8_t* _backing_buffer,
                          uint32_t _backing_buffer_size, ::fidl::StringView s)
        : message_(::fidl::OutgoingMessage::ConstructorArgs{
              .iovecs = iovecs_,
              .iovec_capacity = _iovec_capacity,
              .backing_buffer = _backing_buffer,
              .backing_buffer_capacity = _backing_buffer_size,
          }) {
      ZX_ASSERT(_iovec_capacity <= std::size(iovecs_));
      FIDL_ALIGNDECL WireRequest _request{s};
      message_.Encode<WireRequest>(&_request);
    }
    UnownedEncodedMessage(uint8_t* _backing_buffer,
                          uint32_t _backing_buffer_size, WireRequest* request)
        : UnownedEncodedMessage(::fidl::internal::IovecBufferSize,
                                _backing_buffer, _backing_buffer_size,
                                request) {}
    UnownedEncodedMessage(uint32_t _iovec_capacity, uint8_t* _backing_buffer,
                          uint32_t _backing_buffer_size, WireRequest* request)
        : message_(::fidl::OutgoingMessage::ConstructorArgs{
              .iovecs = iovecs_,
              .iovec_capacity = _iovec_capacity,
              .backing_buffer = _backing_buffer,
              .backing_buffer_capacity = _backing_buffer_size,
          }) {
      ZX_ASSERT(_iovec_capacity <= std::size(iovecs_));
      message_.Encode<WireRequest>(request);
    }
    UnownedEncodedMessage(const UnownedEncodedMessage&) = delete;
    UnownedEncodedMessage(UnownedEncodedMessage&&) = delete;
    UnownedEncodedMessage* operator=(const UnownedEncodedMessage&) = delete;
    UnownedEncodedMessage* operator=(UnownedEncodedMessage&&) = delete;

    zx_status_t status() const { return message_.status(); }
#ifdef __Fuchsia__
    const char* status_string() const { return message_.status_string(); }
#endif  // __Fuchsia__
    bool ok() const { return message_.status() == ZX_OK; }
    std::string FormatDescription() const {
      return message_.FormatDescription();
    }
    const char* lossy_description() const {
      return message_.lossy_description();
    }
    const ::fidl::Result& error() const { return message_.error(); }

    ::fidl::OutgoingMessage& GetOutgoingMessage() { return message_; }
#ifdef __Fuchsia__
    template <typename ChannelLike>
    void Write(ChannelLike&& client) {
      message_.Write(std::forward<ChannelLike>(client));
    }
#endif  // __Fuchsia__
   private:
    ::fidl::internal::IovecBuffer iovecs_;
    ::fidl::OutgoingMessage message_;
  };

  class OwnedEncodedMessage final {
   public:
    explicit OwnedEncodedMessage(::fidl::StringView s)
        : message_(1u, backing_buffer_.data(),
                   static_cast<uint32_t>(backing_buffer_.size()), s) {}
    // Internal constructor.
    explicit OwnedEncodedMessage(
        ::fidl::internal::AllowUnownedInputRef allow_unowned,
        ::fidl::StringView s)
        : message_(::fidl::internal::IovecBufferSize, backing_buffer_.data(),
                   static_cast<uint32_t>(backing_buffer_.size()), s) {}
    explicit OwnedEncodedMessage(WireRequest* request)
        : message_(1u, backing_buffer_.data(),
                   static_cast<uint32_t>(backing_buffer_.size()), request) {}
    // Internal constructor.
    explicit OwnedEncodedMessage(
        ::fidl::internal::AllowUnownedInputRef allow_unowned,
        WireRequest* request)
        : message_(::fidl::internal::IovecBufferSize, backing_buffer_.data(),
                   static_cast<uint32_t>(backing_buffer_.size()), request) {}
    OwnedEncodedMessage(const OwnedEncodedMessage&) = delete;
    OwnedEncodedMessage(OwnedEncodedMessage&&) = delete;
    OwnedEncodedMessage* operator=(const OwnedEncodedMessage&) = delete;
    OwnedEncodedMessage* operator=(OwnedEncodedMessage&&) = delete;

    zx_status_t status() const { return message_.status(); }
#ifdef __Fuchsia__
    const char* status_string() const { return message_.status_string(); }
#endif  // __Fuchsia__
    bool ok() const { return message_.ok(); }
    std::string FormatDescription() const {
      return message_.FormatDescription();
    }
    const char* lossy_description() const {
      return message_.lossy_description();
    }
    const ::fidl::Result& error() const { return message_.error(); }

    ::fidl::OutgoingMessage& GetOutgoingMessage() {
      return message_.GetOutgoingMessage();
    }
#ifdef __Fuchsia__
    template <typename ChannelLike>
    void Write(ChannelLike&& client) {
      message_.Write(std::forward<ChannelLike>(client));
    }
#endif  // __Fuchsia__
   private:
    ::fidl::internal::BoxedMessageBuffer<ZX_CHANNEL_MAX_MSG_BYTES>
        backing_buffer_;
    UnownedEncodedMessage message_;
  };

 public:
  class DecodedMessage final
      : public ::fidl::internal::DecodedMessageBase<
            ::fidl::WireRequest<::fidl_test_inheritance::Super::Foo>> {
   public:
    using DecodedMessageBase<::fidl::WireRequest<
        ::fidl_test_inheritance::Super::Foo>>::DecodedMessageBase;

    DecodedMessage(uint8_t* bytes, uint32_t byte_actual,
                   zx_handle_info_t* handles = nullptr,
                   uint32_t handle_actual = 0)
        : DecodedMessageBase(::fidl::IncomingMessage(bytes, byte_actual,
                                                     handles, handle_actual)) {}

    ::fidl::WireRequest<::fidl_test_inheritance::Super::Foo>* PrimaryObject() {
      ZX_DEBUG_ASSERT(ok());
      return reinterpret_cast<
          ::fidl::WireRequest<::fidl_test_inheritance::Super::Foo>*>(bytes());
    }

    // Release the ownership of the decoded message. That means that the handles
    // won't be closed When the object is destroyed. After calling this method,
    // the |DecodedMessage| object should not be used anymore.
    void ReleasePrimaryObject() { ResetBytes(); }
  };

 private:
  void _InitHeader();
};
template <>
struct ::fidl::WireResponse<::fidl_test_inheritance::Super::Foo> final {
  FIDL_ALIGNDECL
  fidl_message_header_t _hdr;
  int64_t y;
  explicit WireResponse(int64_t y) : y(y) { _InitHeader(); }
  WireResponse() { _InitHeader(); }

  static constexpr const fidl_type_t* Type =
      &::fidl_test_inheritance::fidl_test_inheritance_superfooResponseTable;
  static constexpr uint32_t MaxNumHandles = 0;
  static constexpr uint32_t PrimarySize = 24;
  static constexpr uint32_t MaxOutOfLine = 0;
  static constexpr bool HasFlexibleEnvelope = false;
  static constexpr bool HasPointer = false;
  static constexpr ::fidl::internal::TransactionalMessageKind MessageKind =
      ::fidl::internal::TransactionalMessageKind::kResponse;

  class UnownedEncodedMessage final {
   public:
    UnownedEncodedMessage(uint8_t* _backing_buffer,
                          uint32_t _backing_buffer_size, int64_t y)
        : UnownedEncodedMessage(::fidl::internal::IovecBufferSize,
                                _backing_buffer, _backing_buffer_size, y) {}
    UnownedEncodedMessage(uint32_t _iovec_capacity, uint8_t* _backing_buffer,
                          uint32_t _backing_buffer_size, int64_t y)
        : message_(::fidl::OutgoingMessage::ConstructorArgs{
              .iovecs = iovecs_,
              .iovec_capacity = _iovec_capacity,
              .backing_buffer = _backing_buffer,
              .backing_buffer_capacity = _backing_buffer_size,
          }) {
      ZX_ASSERT(_iovec_capacity <= std::size(iovecs_));
      FIDL_ALIGNDECL WireResponse _response{y};
      message_
          .Encode<::fidl::WireResponse<::fidl_test_inheritance::Super::Foo>>(
              &_response);
    }
    UnownedEncodedMessage(uint8_t* _backing_buffer,
                          uint32_t _backing_buffer_size, WireResponse* response)
        : UnownedEncodedMessage(::fidl::internal::IovecBufferSize,
                                _backing_buffer, _backing_buffer_size,
                                response) {}
    UnownedEncodedMessage(uint32_t _iovec_capacity, uint8_t* _backing_buffer,
                          uint32_t _backing_buffer_size, WireResponse* response)
        : message_(::fidl::OutgoingMessage::ConstructorArgs{
              .iovecs = iovecs_,
              .iovec_capacity = _iovec_capacity,
              .backing_buffer = _backing_buffer,
              .backing_buffer_capacity = _backing_buffer_size,
          }) {
      ZX_ASSERT(_iovec_capacity <= std::size(iovecs_));
      message_
          .Encode<::fidl::WireResponse<::fidl_test_inheritance::Super::Foo>>(
              response);
    }
    UnownedEncodedMessage(const UnownedEncodedMessage&) = delete;
    UnownedEncodedMessage(UnownedEncodedMessage&&) = delete;
    UnownedEncodedMessage* operator=(const UnownedEncodedMessage&) = delete;
    UnownedEncodedMessage* operator=(UnownedEncodedMessage&&) = delete;

    zx_status_t status() const { return message_.status(); }
#ifdef __Fuchsia__
    const char* status_string() const { return message_.status_string(); }
#endif  // __Fuchsia__
    bool ok() const { return message_.status() == ZX_OK; }
    std::string FormatDescription() const {
      return message_.FormatDescription();
    }
    const char* lossy_description() const {
      return message_.lossy_description();
    }
    const ::fidl::Result& error() const { return message_.error(); }

    ::fidl::OutgoingMessage& GetOutgoingMessage() { return message_; }
#ifdef __Fuchsia__
    template <typename ChannelLike>
    void Write(ChannelLike&& client) {
      message_.Write(std::forward<ChannelLike>(client));
    }
#endif  // __Fuchsia__
   private:
    ::fidl::internal::IovecBuffer iovecs_;
    ::fidl::OutgoingMessage message_;
  };

  class OwnedEncodedMessage final {
   public:
    explicit OwnedEncodedMessage(int64_t y)
        : message_(1u, backing_buffer_.data(),
                   static_cast<uint32_t>(backing_buffer_.size()), y) {}
    // Internal constructor.
    explicit OwnedEncodedMessage(
        ::fidl::internal::AllowUnownedInputRef allow_unowned, int64_t y)
        : message_(::fidl::internal::IovecBufferSize, backing_buffer_.data(),
                   static_cast<uint32_t>(backing_buffer_.size()), y) {}
    explicit OwnedEncodedMessage(
        ::fidl::WireResponse<::fidl_test_inheritance::Super::Foo>* response)
        : message_(1u, backing_buffer_.data(),
                   static_cast<uint32_t>(backing_buffer_.size()), response) {}
    // Internal constructor.
    explicit OwnedEncodedMessage(
        ::fidl::internal::AllowUnownedInputRef allow_unowned,
        ::fidl::WireResponse<::fidl_test_inheritance::Super::Foo>* response)
        : message_(::fidl::internal::IovecBufferSize, backing_buffer_.data(),
                   static_cast<uint32_t>(backing_buffer_.size()), response) {}
    OwnedEncodedMessage(const OwnedEncodedMessage&) = delete;
    OwnedEncodedMessage(OwnedEncodedMessage&&) = delete;
    OwnedEncodedMessage* operator=(const OwnedEncodedMessage&) = delete;
    OwnedEncodedMessage* operator=(OwnedEncodedMessage&&) = delete;

    zx_status_t status() const { return message_.status(); }
#ifdef __Fuchsia__
    const char* status_string() const { return message_.status_string(); }
#endif  // __Fuchsia__
    bool ok() const { return message_.ok(); }
    std::string FormatDescription() const {
      return message_.FormatDescription();
    }
    const char* lossy_description() const {
      return message_.lossy_description();
    }
    const ::fidl::Result& error() const { return message_.error(); }

    ::fidl::OutgoingMessage& GetOutgoingMessage() {
      return message_.GetOutgoingMessage();
    }
#ifdef __Fuchsia__
    template <typename ChannelLike>
    void Write(ChannelLike&& client) {
      message_.Write(std::forward<ChannelLike>(client));
    }
#endif  // __Fuchsia__
   private:
    ::fidl::internal::InlineMessageBuffer<24> backing_buffer_;
    UnownedEncodedMessage message_;
  };

 public:
  class DecodedMessage final
      : public ::fidl::internal::DecodedMessageBase<
            ::fidl::WireResponse<::fidl_test_inheritance::Super::Foo>> {
   public:
    using DecodedMessageBase<::fidl::WireResponse<
        ::fidl_test_inheritance::Super::Foo>>::DecodedMessageBase;

    DecodedMessage(uint8_t* bytes, uint32_t byte_actual,
                   zx_handle_info_t* handles = nullptr,
                   uint32_t handle_actual = 0)
        : DecodedMessageBase(::fidl::IncomingMessage(bytes, byte_actual,
                                                     handles, handle_actual)) {}

    ::fidl::WireResponse<::fidl_test_inheritance::Super::Foo>* PrimaryObject() {
      ZX_DEBUG_ASSERT(ok());
      return reinterpret_cast<
          ::fidl::WireResponse<::fidl_test_inheritance::Super::Foo>*>(bytes());
    }

    // Release the ownership of the decoded message. That means that the handles
    // won't be closed When the object is destroyed. After calling this method,
    // the |DecodedMessage| object should not be used anymore.
    void ReleasePrimaryObject() { ResetBytes(); }
  };

 private:
  void _InitHeader();
};
#ifdef __Fuchsia__

template <>
class ::fidl::WireResult<::fidl_test_inheritance::Super::Foo> final
    : public ::fidl::Result {
 public:
  explicit WireResult(
      ::fidl::UnownedClientEnd<::fidl_test_inheritance::Super> _client,
      ::fidl::StringView s);
  WireResult(::fidl::UnownedClientEnd<::fidl_test_inheritance::Super> _client,
             ::fidl::StringView s, zx_time_t _deadline);
  explicit WireResult(const ::fidl::Result& result) : ::fidl::Result(result) {}
  WireResult(WireResult&&) = delete;
  WireResult(const WireResult&) = delete;
  WireResult* operator=(WireResult&&) = delete;
  WireResult* operator=(const WireResult&) = delete;
  ~WireResult() = default;

  ::fidl::WireResponse<::fidl_test_inheritance::Super::Foo>* Unwrap() {
    ZX_DEBUG_ASSERT(ok());
    return reinterpret_cast<
        ::fidl::WireResponse<::fidl_test_inheritance::Super::Foo>*>(
        bytes_.data());
  }
  const ::fidl::WireResponse<::fidl_test_inheritance::Super::Foo>* Unwrap()
      const {
    ZX_DEBUG_ASSERT(ok());
    return reinterpret_cast<
        const ::fidl::WireResponse<::fidl_test_inheritance::Super::Foo>*>(
        bytes_.data());
  }

  ::fidl::WireResponse<::fidl_test_inheritance::Super::Foo>& value() {
    return *Unwrap();
  }
  const ::fidl::WireResponse<::fidl_test_inheritance::Super::Foo>& value()
      const {
    return *Unwrap();
  }

  ::fidl::WireResponse<::fidl_test_inheritance::Super::Foo>* operator->() {
    return &value();
  }
  const ::fidl::WireResponse<::fidl_test_inheritance::Super::Foo>* operator->()
      const {
    return &value();
  }

  ::fidl::WireResponse<::fidl_test_inheritance::Super::Foo>& operator*() {
    return value();
  }
  const ::fidl::WireResponse<::fidl_test_inheritance::Super::Foo>& operator*()
      const {
    return value();
  }

 private:
  ::fidl::internal::InlineMessageBuffer<24> bytes_;
};
template <>
class ::fidl::WireUnownedResult<::fidl_test_inheritance::Super::Foo> final
    : public ::fidl::Result {
 public:
  explicit WireUnownedResult(
      ::fidl::UnownedClientEnd<::fidl_test_inheritance::Super> _client,
      uint8_t* _request_bytes, uint32_t _request_byte_capacity,
      ::fidl::StringView s, uint8_t* _response_bytes,
      uint32_t _response_byte_capacity);
  explicit WireUnownedResult(
      ::fidl::WireResponse<::fidl_test_inheritance::Super::Foo>* response)
      : bytes_(reinterpret_cast<uint8_t*>(response)) {}
  explicit WireUnownedResult(const ::fidl::Result& result)
      : ::fidl::Result(result) {}
  explicit WireUnownedResult(
      ::fidl::DecodedMessage<
          ::fidl::WireResponse<::fidl_test_inheritance::Super::Foo>>&& decoded)
      : ::fidl::Result(decoded) {
    if (decoded.ok()) {
      bytes_ = reinterpret_cast<uint8_t*>(decoded.PrimaryObject());
    } else {
      bytes_ = nullptr;
    }
    decoded.ReleasePrimaryObject();
  }
  WireUnownedResult(WireUnownedResult&&) = delete;
  WireUnownedResult(const WireUnownedResult&) = delete;
  WireUnownedResult* operator=(WireUnownedResult&&) = delete;
  WireUnownedResult* operator=(const WireUnownedResult&) = delete;
  ~WireUnownedResult() = default;

  ::fidl::WireResponse<::fidl_test_inheritance::Super::Foo>* Unwrap() {
    ZX_DEBUG_ASSERT(ok());
    return reinterpret_cast<
        ::fidl::WireResponse<::fidl_test_inheritance::Super::Foo>*>(bytes_);
  }
  const ::fidl::WireResponse<::fidl_test_inheritance::Super::Foo>* Unwrap()
      const {
    ZX_DEBUG_ASSERT(ok());
    return reinterpret_cast<
        const ::fidl::WireResponse<::fidl_test_inheritance::Super::Foo>*>(
        bytes_);
  }

  ::fidl::WireResponse<::fidl_test_inheritance::Super::Foo>& value() {
    return *Unwrap();
  }
  const ::fidl::WireResponse<::fidl_test_inheritance::Super::Foo>& value()
      const {
    return *Unwrap();
  }

  ::fidl::WireResponse<::fidl_test_inheritance::Super::Foo>* operator->() {
    return &value();
  }
  const ::fidl::WireResponse<::fidl_test_inheritance::Super::Foo>* operator->()
      const {
    return &value();
  }

  ::fidl::WireResponse<::fidl_test_inheritance::Super::Foo>& operator*() {
    return value();
  }
  const ::fidl::WireResponse<::fidl_test_inheritance::Super::Foo>& operator*()
      const {
    return value();
  }

 private:
  uint8_t* bytes_;
};

// Methods to make a sync FIDL call directly on an unowned channel or a
// const reference to a |fidl::ClientEnd<::fidl_test_inheritance::Super>|,
// avoiding setting up a client.
template <>
class ::fidl::internal::WireCaller<::fidl_test_inheritance::Super> final {
 public:
  explicit WireCaller(
      ::fidl::UnownedClientEnd<::fidl_test_inheritance::Super> client_end)
      : client_end_(client_end) {}

  // Allocates 24 bytes of response buffer on the stack. Request is
  // heap-allocated.
  static ::fidl::WireResult<::fidl_test_inheritance::Super::Foo> Foo(
      ::fidl::UnownedClientEnd<::fidl_test_inheritance::Super> _client_end,
      ::fidl::StringView s) {
    return ::fidl::WireResult<::fidl_test_inheritance::Super::Foo>(_client_end,
                                                                   s);
  }

  // Allocates 24 bytes of response buffer on the stack. Request is
  // heap-allocated.
  ::fidl::WireResult<::fidl_test_inheritance::Super::Foo> Foo(
      ::fidl::StringView s) && {
    return ::fidl::WireResult<::fidl_test_inheritance::Super::Foo>(client_end_,
                                                                   s);
  }

  // Caller provides the backing storage for FIDL message via request and
  // response buffers.
  static ::fidl::WireUnownedResult<::fidl_test_inheritance::Super::Foo> Foo(
      ::fidl::UnownedClientEnd<::fidl_test_inheritance::Super> _client_end,
      ::fidl::BufferSpan _request_buffer, ::fidl::StringView s,
      ::fidl::BufferSpan _response_buffer) {
    return ::fidl::WireUnownedResult<::fidl_test_inheritance::Super::Foo>(
        _client_end, _request_buffer.data, _request_buffer.capacity, s,
        _response_buffer.data, _response_buffer.capacity);
  }
  // Caller provides the backing storage for FIDL message via request and
  // response buffers.
  ::fidl::WireUnownedResult<::fidl_test_inheritance::Super::Foo> Foo(
      ::fidl::BufferSpan _request_buffer, ::fidl::StringView s,
      ::fidl::BufferSpan _response_buffer) && {
    return ::fidl::WireUnownedResult<::fidl_test_inheritance::Super::Foo>(
        client_end_, _request_buffer.data, _request_buffer.capacity, s,
        _response_buffer.data, _response_buffer.capacity);
  }

 private:
  ::fidl::UnownedClientEnd<::fidl_test_inheritance::Super> client_end_;
};
template <>
class ::fidl::internal::WireEventHandlerInterface<
    ::fidl_test_inheritance::Super> {
 public:
  WireEventHandlerInterface() = default;
  virtual ~WireEventHandlerInterface() = default;
};

template <>
class ::fidl::WireAsyncEventHandler<::fidl_test_inheritance::Super>
    : public ::fidl::internal::WireEventHandlerInterface<
          ::fidl_test_inheritance::Super>,
      public ::fidl::internal::AsyncEventHandler {
 public:
  WireAsyncEventHandler() = default;
};

template <>
class ::fidl::WireSyncEventHandler<::fidl_test_inheritance::Super>
    : public ::fidl::internal::WireEventHandlerInterface<
          ::fidl_test_inheritance::Super> {
 public:
  WireSyncEventHandler() = default;

  // Method called when an unknown event is found. This methods gives the status
  // which, in this case, is returned by HandleOneEvent.
  virtual zx_status_t Unknown() = 0;

  // Handle all possible events defined in this protocol.
  // Blocks to consume exactly one message from the channel, then call the
  // corresponding virtual method.
  ::fidl::Result HandleOneEvent(
      ::fidl::UnownedClientEnd<::fidl_test_inheritance::Super> client_end);
};
template <>
class ::fidl::WireSyncClient<::fidl_test_inheritance::Super> final {
 public:
  WireSyncClient() = default;

  explicit WireSyncClient(
      ::fidl::ClientEnd<::fidl_test_inheritance::Super> client_end)
      : client_end_(std::move(client_end)) {}

  ~WireSyncClient() = default;
  WireSyncClient(WireSyncClient&&) = default;
  WireSyncClient& operator=(WireSyncClient&&) = default;

  const ::fidl::ClientEnd<::fidl_test_inheritance::Super>& client_end() const {
    return client_end_;
  }
  ::fidl::ClientEnd<::fidl_test_inheritance::Super>& client_end() {
    return client_end_;
  }

  const ::zx::channel& channel() const { return client_end_.channel(); }
  ::zx::channel* mutable_channel() { return &client_end_.channel(); }

  // Allocates 24 bytes of response buffer on the stack. Request is
  // heap-allocated.
  ::fidl::WireResult<::fidl_test_inheritance::Super::Foo> Foo(
      ::fidl::StringView s) {
    return ::fidl::WireResult<::fidl_test_inheritance::Super::Foo>(
        this->client_end(), s);
  }

  // Caller provides the backing storage for FIDL message via request and
  // response buffers.
  ::fidl::WireUnownedResult<::fidl_test_inheritance::Super::Foo> Foo(
      ::fidl::BufferSpan _request_buffer, ::fidl::StringView s,
      ::fidl::BufferSpan _response_buffer) {
    return ::fidl::WireUnownedResult<::fidl_test_inheritance::Super::Foo>(
        this->client_end(), _request_buffer.data, _request_buffer.capacity, s,
        _response_buffer.data, _response_buffer.capacity);
  }

 private:
  ::fidl::ClientEnd<::fidl_test_inheritance::Super> client_end_;
};

template <>
class ::fidl::internal::WireCompleterBase<::fidl_test_inheritance::Super::Foo>
    : public ::fidl::CompleterBase {
 public:
  // In the following methods, the return value indicates internal errors during
  // the reply, such as encoding or writing to the transport.
  // Note that any error will automatically lead to the destruction of the
  // binding, after which the |on_unbound| callback will be triggered with a
  // detailed reason.
  //
  // See //zircon/system/ulib/fidl/include/lib/fidl/llcpp/server.h.
  //
  // Because the reply status is identical to the unbinding status, it can be
  // safely ignored.
  ::fidl::Result Reply(int64_t y);
  ::fidl::Result Reply(::fidl::BufferSpan _buffer, int64_t y);

 protected:
  using ::fidl::CompleterBase::CompleterBase;
};

template <>
struct ::fidl::internal::WireMethodTypes<::fidl_test_inheritance::Super::Foo> {
  using Completer = fidl::Completer<
      ::fidl::internal::WireCompleterBase<::fidl_test_inheritance::Super::Foo>>;
};

// Pure-virtual interface to be implemented by a server.
// This interface uses typed channels (i.e. |fidl::ClientEnd<SomeProtocol>|
// and |fidl::ServerEnd<SomeProtocol>|).
template <>
class ::fidl::WireServer<::fidl_test_inheritance::Super>
    : public ::fidl::internal::IncomingMessageDispatcher {
 public:
  WireServer() = default;
  virtual ~WireServer() = default;

  // The FIDL protocol type that is implemented by this server.
  using _EnclosingProtocol = ::fidl_test_inheritance::Super;

  using FooCompleter =
      ::fidl::internal::WireCompleter<::fidl_test_inheritance::Super::Foo>;
  using FooRequestView =
      ::fidl::internal::WireRequestView<::fidl_test_inheritance::Super::Foo>;

  virtual void Foo(FooRequestView request, FooCompleter::Sync& _completer) = 0;

 private:
  ::fidl::DispatchResult dispatch_message(::fidl::IncomingMessage&& msg,
                                          ::fidl::Transaction* txn) final;
};
#endif  // __Fuchsia__

namespace fidl_test_inheritance {
__LOCAL extern "C" const fidl_type_t fidl_test_inheritance_subfooRequestTable;

__LOCAL extern "C" const fidl_type_t fidl_test_inheritance_subfooResponseTable;

class Sub final {
  Sub() = delete;

 public:
  class Foo final {
    Foo() = delete;
  };
};
}  // namespace fidl_test_inheritance
#ifdef __Fuchsia__

template <>
struct ::fidl::internal::ProtocolDetails<::fidl_test_inheritance::Sub> {};
#endif  // __Fuchsia__

#ifdef __Fuchsia__

template <>
struct ::fidl::internal::WireServerDispatcher<::fidl_test_inheritance::Sub>
    final {
  WireServerDispatcher() = delete;
  static ::fidl::DispatchResult TryDispatch(
      ::fidl::WireServer<::fidl_test_inheritance::Sub>* impl,
      ::fidl::IncomingMessage& msg, ::fidl::Transaction* txn);
  static ::fidl::DispatchResult Dispatch(
      ::fidl::WireServer<::fidl_test_inheritance::Sub>* impl,
      ::fidl::IncomingMessage&& msg, ::fidl::Transaction* txn);
};
#endif  // __Fuchsia__

template <>
struct ::fidl::WireRequest<::fidl_test_inheritance::Sub::Foo> final {
  FIDL_ALIGNDECL
  fidl_message_header_t _hdr;
  ::fidl::StringView s;
  explicit WireRequest(::fidl::StringView s) : s(s) { _InitHeader(); }
  WireRequest() { _InitHeader(); }

  static constexpr const fidl_type_t* Type =
      &::fidl_test_inheritance::fidl_test_inheritance_subfooRequestTable;
  static constexpr uint32_t MaxNumHandles = 0;
  static constexpr uint32_t PrimarySize = 32;
  static constexpr uint32_t MaxOutOfLine = 4294967295;
  static constexpr uint32_t AltPrimarySize = 32;
  static constexpr uint32_t AltMaxOutOfLine = 4294967295;
  static constexpr bool HasFlexibleEnvelope = false;
  static constexpr bool HasPointer = true;
  static constexpr ::fidl::internal::TransactionalMessageKind MessageKind =
      ::fidl::internal::TransactionalMessageKind::kRequest;
  using ResponseType = ::fidl::WireResponse<::fidl_test_inheritance::Sub::Foo>;

  class UnownedEncodedMessage final {
   public:
    UnownedEncodedMessage(uint8_t* _backing_buffer,
                          uint32_t _backing_buffer_size, ::fidl::StringView s)
        : UnownedEncodedMessage(::fidl::internal::IovecBufferSize,
                                _backing_buffer, _backing_buffer_size, s) {}
    UnownedEncodedMessage(uint32_t _iovec_capacity, uint8_t* _backing_buffer,
                          uint32_t _backing_buffer_size, ::fidl::StringView s)
        : message_(::fidl::OutgoingMessage::ConstructorArgs{
              .iovecs = iovecs_,
              .iovec_capacity = _iovec_capacity,
              .backing_buffer = _backing_buffer,
              .backing_buffer_capacity = _backing_buffer_size,
          }) {
      ZX_ASSERT(_iovec_capacity <= std::size(iovecs_));
      FIDL_ALIGNDECL WireRequest _request{s};
      message_.Encode<WireRequest>(&_request);
    }
    UnownedEncodedMessage(uint8_t* _backing_buffer,
                          uint32_t _backing_buffer_size, WireRequest* request)
        : UnownedEncodedMessage(::fidl::internal::IovecBufferSize,
                                _backing_buffer, _backing_buffer_size,
                                request) {}
    UnownedEncodedMessage(uint32_t _iovec_capacity, uint8_t* _backing_buffer,
                          uint32_t _backing_buffer_size, WireRequest* request)
        : message_(::fidl::OutgoingMessage::ConstructorArgs{
              .iovecs = iovecs_,
              .iovec_capacity = _iovec_capacity,
              .backing_buffer = _backing_buffer,
              .backing_buffer_capacity = _backing_buffer_size,
          }) {
      ZX_ASSERT(_iovec_capacity <= std::size(iovecs_));
      message_.Encode<WireRequest>(request);
    }
    UnownedEncodedMessage(const UnownedEncodedMessage&) = delete;
    UnownedEncodedMessage(UnownedEncodedMessage&&) = delete;
    UnownedEncodedMessage* operator=(const UnownedEncodedMessage&) = delete;
    UnownedEncodedMessage* operator=(UnownedEncodedMessage&&) = delete;

    zx_status_t status() const { return message_.status(); }
#ifdef __Fuchsia__
    const char* status_string() const { return message_.status_string(); }
#endif  // __Fuchsia__
    bool ok() const { return message_.status() == ZX_OK; }
    std::string FormatDescription() const {
      return message_.FormatDescription();
    }
    const char* lossy_description() const {
      return message_.lossy_description();
    }
    const ::fidl::Result& error() const { return message_.error(); }

    ::fidl::OutgoingMessage& GetOutgoingMessage() { return message_; }
#ifdef __Fuchsia__
    template <typename ChannelLike>
    void Write(ChannelLike&& client) {
      message_.Write(std::forward<ChannelLike>(client));
    }
#endif  // __Fuchsia__
   private:
    ::fidl::internal::IovecBuffer iovecs_;
    ::fidl::OutgoingMessage message_;
  };

  class OwnedEncodedMessage final {
   public:
    explicit OwnedEncodedMessage(::fidl::StringView s)
        : message_(1u, backing_buffer_.data(),
                   static_cast<uint32_t>(backing_buffer_.size()), s) {}
    // Internal constructor.
    explicit OwnedEncodedMessage(
        ::fidl::internal::AllowUnownedInputRef allow_unowned,
        ::fidl::StringView s)
        : message_(::fidl::internal::IovecBufferSize, backing_buffer_.data(),
                   static_cast<uint32_t>(backing_buffer_.size()), s) {}
    explicit OwnedEncodedMessage(WireRequest* request)
        : message_(1u, backing_buffer_.data(),
                   static_cast<uint32_t>(backing_buffer_.size()), request) {}
    // Internal constructor.
    explicit OwnedEncodedMessage(
        ::fidl::internal::AllowUnownedInputRef allow_unowned,
        WireRequest* request)
        : message_(::fidl::internal::IovecBufferSize, backing_buffer_.data(),
                   static_cast<uint32_t>(backing_buffer_.size()), request) {}
    OwnedEncodedMessage(const OwnedEncodedMessage&) = delete;
    OwnedEncodedMessage(OwnedEncodedMessage&&) = delete;
    OwnedEncodedMessage* operator=(const OwnedEncodedMessage&) = delete;
    OwnedEncodedMessage* operator=(OwnedEncodedMessage&&) = delete;

    zx_status_t status() const { return message_.status(); }
#ifdef __Fuchsia__
    const char* status_string() const { return message_.status_string(); }
#endif  // __Fuchsia__
    bool ok() const { return message_.ok(); }
    std::string FormatDescription() const {
      return message_.FormatDescription();
    }
    const char* lossy_description() const {
      return message_.lossy_description();
    }
    const ::fidl::Result& error() const { return message_.error(); }

    ::fidl::OutgoingMessage& GetOutgoingMessage() {
      return message_.GetOutgoingMessage();
    }
#ifdef __Fuchsia__
    template <typename ChannelLike>
    void Write(ChannelLike&& client) {
      message_.Write(std::forward<ChannelLike>(client));
    }
#endif  // __Fuchsia__
   private:
    ::fidl::internal::BoxedMessageBuffer<ZX_CHANNEL_MAX_MSG_BYTES>
        backing_buffer_;
    UnownedEncodedMessage message_;
  };

 public:
  class DecodedMessage final
      : public ::fidl::internal::DecodedMessageBase<
            ::fidl::WireRequest<::fidl_test_inheritance::Sub::Foo>> {
   public:
    using DecodedMessageBase<::fidl::WireRequest<
        ::fidl_test_inheritance::Sub::Foo>>::DecodedMessageBase;

    DecodedMessage(uint8_t* bytes, uint32_t byte_actual,
                   zx_handle_info_t* handles = nullptr,
                   uint32_t handle_actual = 0)
        : DecodedMessageBase(::fidl::IncomingMessage(bytes, byte_actual,
                                                     handles, handle_actual)) {}

    ::fidl::WireRequest<::fidl_test_inheritance::Sub::Foo>* PrimaryObject() {
      ZX_DEBUG_ASSERT(ok());
      return reinterpret_cast<
          ::fidl::WireRequest<::fidl_test_inheritance::Sub::Foo>*>(bytes());
    }

    // Release the ownership of the decoded message. That means that the handles
    // won't be closed When the object is destroyed. After calling this method,
    // the |DecodedMessage| object should not be used anymore.
    void ReleasePrimaryObject() { ResetBytes(); }
  };

 private:
  void _InitHeader();
};
template <>
struct ::fidl::WireResponse<::fidl_test_inheritance::Sub::Foo> final {
  FIDL_ALIGNDECL
  fidl_message_header_t _hdr;
  int64_t y;
  explicit WireResponse(int64_t y) : y(y) { _InitHeader(); }
  WireResponse() { _InitHeader(); }

  static constexpr const fidl_type_t* Type =
      &::fidl_test_inheritance::fidl_test_inheritance_subfooResponseTable;
  static constexpr uint32_t MaxNumHandles = 0;
  static constexpr uint32_t PrimarySize = 24;
  static constexpr uint32_t MaxOutOfLine = 0;
  static constexpr bool HasFlexibleEnvelope = false;
  static constexpr bool HasPointer = false;
  static constexpr ::fidl::internal::TransactionalMessageKind MessageKind =
      ::fidl::internal::TransactionalMessageKind::kResponse;

  class UnownedEncodedMessage final {
   public:
    UnownedEncodedMessage(uint8_t* _backing_buffer,
                          uint32_t _backing_buffer_size, int64_t y)
        : UnownedEncodedMessage(::fidl::internal::IovecBufferSize,
                                _backing_buffer, _backing_buffer_size, y) {}
    UnownedEncodedMessage(uint32_t _iovec_capacity, uint8_t* _backing_buffer,
                          uint32_t _backing_buffer_size, int64_t y)
        : message_(::fidl::OutgoingMessage::ConstructorArgs{
              .iovecs = iovecs_,
              .iovec_capacity = _iovec_capacity,
              .backing_buffer = _backing_buffer,
              .backing_buffer_capacity = _backing_buffer_size,
          }) {
      ZX_ASSERT(_iovec_capacity <= std::size(iovecs_));
      FIDL_ALIGNDECL WireResponse _response{y};
      message_.Encode<::fidl::WireResponse<::fidl_test_inheritance::Sub::Foo>>(
          &_response);
    }
    UnownedEncodedMessage(uint8_t* _backing_buffer,
                          uint32_t _backing_buffer_size, WireResponse* response)
        : UnownedEncodedMessage(::fidl::internal::IovecBufferSize,
                                _backing_buffer, _backing_buffer_size,
                                response) {}
    UnownedEncodedMessage(uint32_t _iovec_capacity, uint8_t* _backing_buffer,
                          uint32_t _backing_buffer_size, WireResponse* response)
        : message_(::fidl::OutgoingMessage::ConstructorArgs{
              .iovecs = iovecs_,
              .iovec_capacity = _iovec_capacity,
              .backing_buffer = _backing_buffer,
              .backing_buffer_capacity = _backing_buffer_size,
          }) {
      ZX_ASSERT(_iovec_capacity <= std::size(iovecs_));
      message_.Encode<::fidl::WireResponse<::fidl_test_inheritance::Sub::Foo>>(
          response);
    }
    UnownedEncodedMessage(const UnownedEncodedMessage&) = delete;
    UnownedEncodedMessage(UnownedEncodedMessage&&) = delete;
    UnownedEncodedMessage* operator=(const UnownedEncodedMessage&) = delete;
    UnownedEncodedMessage* operator=(UnownedEncodedMessage&&) = delete;

    zx_status_t status() const { return message_.status(); }
#ifdef __Fuchsia__
    const char* status_string() const { return message_.status_string(); }
#endif  // __Fuchsia__
    bool ok() const { return message_.status() == ZX_OK; }
    std::string FormatDescription() const {
      return message_.FormatDescription();
    }
    const char* lossy_description() const {
      return message_.lossy_description();
    }
    const ::fidl::Result& error() const { return message_.error(); }

    ::fidl::OutgoingMessage& GetOutgoingMessage() { return message_; }
#ifdef __Fuchsia__
    template <typename ChannelLike>
    void Write(ChannelLike&& client) {
      message_.Write(std::forward<ChannelLike>(client));
    }
#endif  // __Fuchsia__
   private:
    ::fidl::internal::IovecBuffer iovecs_;
    ::fidl::OutgoingMessage message_;
  };

  class OwnedEncodedMessage final {
   public:
    explicit OwnedEncodedMessage(int64_t y)
        : message_(1u, backing_buffer_.data(),
                   static_cast<uint32_t>(backing_buffer_.size()), y) {}
    // Internal constructor.
    explicit OwnedEncodedMessage(
        ::fidl::internal::AllowUnownedInputRef allow_unowned, int64_t y)
        : message_(::fidl::internal::IovecBufferSize, backing_buffer_.data(),
                   static_cast<uint32_t>(backing_buffer_.size()), y) {}
    explicit OwnedEncodedMessage(
        ::fidl::WireResponse<::fidl_test_inheritance::Sub::Foo>* response)
        : message_(1u, backing_buffer_.data(),
                   static_cast<uint32_t>(backing_buffer_.size()), response) {}
    // Internal constructor.
    explicit OwnedEncodedMessage(
        ::fidl::internal::AllowUnownedInputRef allow_unowned,
        ::fidl::WireResponse<::fidl_test_inheritance::Sub::Foo>* response)
        : message_(::fidl::internal::IovecBufferSize, backing_buffer_.data(),
                   static_cast<uint32_t>(backing_buffer_.size()), response) {}
    OwnedEncodedMessage(const OwnedEncodedMessage&) = delete;
    OwnedEncodedMessage(OwnedEncodedMessage&&) = delete;
    OwnedEncodedMessage* operator=(const OwnedEncodedMessage&) = delete;
    OwnedEncodedMessage* operator=(OwnedEncodedMessage&&) = delete;

    zx_status_t status() const { return message_.status(); }
#ifdef __Fuchsia__
    const char* status_string() const { return message_.status_string(); }
#endif  // __Fuchsia__
    bool ok() const { return message_.ok(); }
    std::string FormatDescription() const {
      return message_.FormatDescription();
    }
    const char* lossy_description() const {
      return message_.lossy_description();
    }
    const ::fidl::Result& error() const { return message_.error(); }

    ::fidl::OutgoingMessage& GetOutgoingMessage() {
      return message_.GetOutgoingMessage();
    }
#ifdef __Fuchsia__
    template <typename ChannelLike>
    void Write(ChannelLike&& client) {
      message_.Write(std::forward<ChannelLike>(client));
    }
#endif  // __Fuchsia__
   private:
    ::fidl::internal::InlineMessageBuffer<24> backing_buffer_;
    UnownedEncodedMessage message_;
  };

 public:
  class DecodedMessage final
      : public ::fidl::internal::DecodedMessageBase<
            ::fidl::WireResponse<::fidl_test_inheritance::Sub::Foo>> {
   public:
    using DecodedMessageBase<::fidl::WireResponse<
        ::fidl_test_inheritance::Sub::Foo>>::DecodedMessageBase;

    DecodedMessage(uint8_t* bytes, uint32_t byte_actual,
                   zx_handle_info_t* handles = nullptr,
                   uint32_t handle_actual = 0)
        : DecodedMessageBase(::fidl::IncomingMessage(bytes, byte_actual,
                                                     handles, handle_actual)) {}

    ::fidl::WireResponse<::fidl_test_inheritance::Sub::Foo>* PrimaryObject() {
      ZX_DEBUG_ASSERT(ok());
      return reinterpret_cast<
          ::fidl::WireResponse<::fidl_test_inheritance::Sub::Foo>*>(bytes());
    }

    // Release the ownership of the decoded message. That means that the handles
    // won't be closed When the object is destroyed. After calling this method,
    // the |DecodedMessage| object should not be used anymore.
    void ReleasePrimaryObject() { ResetBytes(); }
  };

 private:
  void _InitHeader();
};
#ifdef __Fuchsia__

template <>
class ::fidl::WireResult<::fidl_test_inheritance::Sub::Foo> final
    : public ::fidl::Result {
 public:
  explicit WireResult(
      ::fidl::UnownedClientEnd<::fidl_test_inheritance::Sub> _client,
      ::fidl::StringView s);
  WireResult(::fidl::UnownedClientEnd<::fidl_test_inheritance::Sub> _client,
             ::fidl::StringView s, zx_time_t _deadline);
  explicit WireResult(const ::fidl::Result& result) : ::fidl::Result(result) {}
  WireResult(WireResult&&) = delete;
  WireResult(const WireResult&) = delete;
  WireResult* operator=(WireResult&&) = delete;
  WireResult* operator=(const WireResult&) = delete;
  ~WireResult() = default;

  ::fidl::WireResponse<::fidl_test_inheritance::Sub::Foo>* Unwrap() {
    ZX_DEBUG_ASSERT(ok());
    return reinterpret_cast<
        ::fidl::WireResponse<::fidl_test_inheritance::Sub::Foo>*>(
        bytes_.data());
  }
  const ::fidl::WireResponse<::fidl_test_inheritance::Sub::Foo>* Unwrap()
      const {
    ZX_DEBUG_ASSERT(ok());
    return reinterpret_cast<
        const ::fidl::WireResponse<::fidl_test_inheritance::Sub::Foo>*>(
        bytes_.data());
  }

  ::fidl::WireResponse<::fidl_test_inheritance::Sub::Foo>& value() {
    return *Unwrap();
  }
  const ::fidl::WireResponse<::fidl_test_inheritance::Sub::Foo>& value() const {
    return *Unwrap();
  }

  ::fidl::WireResponse<::fidl_test_inheritance::Sub::Foo>* operator->() {
    return &value();
  }
  const ::fidl::WireResponse<::fidl_test_inheritance::Sub::Foo>* operator->()
      const {
    return &value();
  }

  ::fidl::WireResponse<::fidl_test_inheritance::Sub::Foo>& operator*() {
    return value();
  }
  const ::fidl::WireResponse<::fidl_test_inheritance::Sub::Foo>& operator*()
      const {
    return value();
  }

 private:
  ::fidl::internal::InlineMessageBuffer<24> bytes_;
};
template <>
class ::fidl::WireUnownedResult<::fidl_test_inheritance::Sub::Foo> final
    : public ::fidl::Result {
 public:
  explicit WireUnownedResult(
      ::fidl::UnownedClientEnd<::fidl_test_inheritance::Sub> _client,
      uint8_t* _request_bytes, uint32_t _request_byte_capacity,
      ::fidl::StringView s, uint8_t* _response_bytes,
      uint32_t _response_byte_capacity);
  explicit WireUnownedResult(
      ::fidl::WireResponse<::fidl_test_inheritance::Sub::Foo>* response)
      : bytes_(reinterpret_cast<uint8_t*>(response)) {}
  explicit WireUnownedResult(const ::fidl::Result& result)
      : ::fidl::Result(result) {}
  explicit WireUnownedResult(
      ::fidl::DecodedMessage<
          ::fidl::WireResponse<::fidl_test_inheritance::Sub::Foo>>&& decoded)
      : ::fidl::Result(decoded) {
    if (decoded.ok()) {
      bytes_ = reinterpret_cast<uint8_t*>(decoded.PrimaryObject());
    } else {
      bytes_ = nullptr;
    }
    decoded.ReleasePrimaryObject();
  }
  WireUnownedResult(WireUnownedResult&&) = delete;
  WireUnownedResult(const WireUnownedResult&) = delete;
  WireUnownedResult* operator=(WireUnownedResult&&) = delete;
  WireUnownedResult* operator=(const WireUnownedResult&) = delete;
  ~WireUnownedResult() = default;

  ::fidl::WireResponse<::fidl_test_inheritance::Sub::Foo>* Unwrap() {
    ZX_DEBUG_ASSERT(ok());
    return reinterpret_cast<
        ::fidl::WireResponse<::fidl_test_inheritance::Sub::Foo>*>(bytes_);
  }
  const ::fidl::WireResponse<::fidl_test_inheritance::Sub::Foo>* Unwrap()
      const {
    ZX_DEBUG_ASSERT(ok());
    return reinterpret_cast<
        const ::fidl::WireResponse<::fidl_test_inheritance::Sub::Foo>*>(bytes_);
  }

  ::fidl::WireResponse<::fidl_test_inheritance::Sub::Foo>& value() {
    return *Unwrap();
  }
  const ::fidl::WireResponse<::fidl_test_inheritance::Sub::Foo>& value() const {
    return *Unwrap();
  }

  ::fidl::WireResponse<::fidl_test_inheritance::Sub::Foo>* operator->() {
    return &value();
  }
  const ::fidl::WireResponse<::fidl_test_inheritance::Sub::Foo>* operator->()
      const {
    return &value();
  }

  ::fidl::WireResponse<::fidl_test_inheritance::Sub::Foo>& operator*() {
    return value();
  }
  const ::fidl::WireResponse<::fidl_test_inheritance::Sub::Foo>& operator*()
      const {
    return value();
  }

 private:
  uint8_t* bytes_;
};

// Methods to make a sync FIDL call directly on an unowned channel or a
// const reference to a |fidl::ClientEnd<::fidl_test_inheritance::Sub>|,
// avoiding setting up a client.
template <>
class ::fidl::internal::WireCaller<::fidl_test_inheritance::Sub> final {
 public:
  explicit WireCaller(
      ::fidl::UnownedClientEnd<::fidl_test_inheritance::Sub> client_end)
      : client_end_(client_end) {}

  // Allocates 24 bytes of response buffer on the stack. Request is
  // heap-allocated.
  static ::fidl::WireResult<::fidl_test_inheritance::Sub::Foo> Foo(
      ::fidl::UnownedClientEnd<::fidl_test_inheritance::Sub> _client_end,
      ::fidl::StringView s) {
    return ::fidl::WireResult<::fidl_test_inheritance::Sub::Foo>(_client_end,
                                                                 s);
  }

  // Allocates 24 bytes of response buffer on the stack. Request is
  // heap-allocated.
  ::fidl::WireResult<::fidl_test_inheritance::Sub::Foo> Foo(
      ::fidl::StringView s) && {
    return ::fidl::WireResult<::fidl_test_inheritance::Sub::Foo>(client_end_,
                                                                 s);
  }

  // Caller provides the backing storage for FIDL message via request and
  // response buffers.
  static ::fidl::WireUnownedResult<::fidl_test_inheritance::Sub::Foo> Foo(
      ::fidl::UnownedClientEnd<::fidl_test_inheritance::Sub> _client_end,
      ::fidl::BufferSpan _request_buffer, ::fidl::StringView s,
      ::fidl::BufferSpan _response_buffer) {
    return ::fidl::WireUnownedResult<::fidl_test_inheritance::Sub::Foo>(
        _client_end, _request_buffer.data, _request_buffer.capacity, s,
        _response_buffer.data, _response_buffer.capacity);
  }
  // Caller provides the backing storage for FIDL message via request and
  // response buffers.
  ::fidl::WireUnownedResult<::fidl_test_inheritance::Sub::Foo> Foo(
      ::fidl::BufferSpan _request_buffer, ::fidl::StringView s,
      ::fidl::BufferSpan _response_buffer) && {
    return ::fidl::WireUnownedResult<::fidl_test_inheritance::Sub::Foo>(
        client_end_, _request_buffer.data, _request_buffer.capacity, s,
        _response_buffer.data, _response_buffer.capacity);
  }

 private:
  ::fidl::UnownedClientEnd<::fidl_test_inheritance::Sub> client_end_;
};
template <>
class ::fidl::internal::WireEventHandlerInterface<
    ::fidl_test_inheritance::Sub> {
 public:
  WireEventHandlerInterface() = default;
  virtual ~WireEventHandlerInterface() = default;
};

template <>
class ::fidl::WireAsyncEventHandler<::fidl_test_inheritance::Sub>
    : public ::fidl::internal::WireEventHandlerInterface<
          ::fidl_test_inheritance::Sub>,
      public ::fidl::internal::AsyncEventHandler {
 public:
  WireAsyncEventHandler() = default;
};

template <>
class ::fidl::WireSyncEventHandler<::fidl_test_inheritance::Sub>
    : public ::fidl::internal::WireEventHandlerInterface<
          ::fidl_test_inheritance::Sub> {
 public:
  WireSyncEventHandler() = default;

  // Method called when an unknown event is found. This methods gives the status
  // which, in this case, is returned by HandleOneEvent.
  virtual zx_status_t Unknown() = 0;

  // Handle all possible events defined in this protocol.
  // Blocks to consume exactly one message from the channel, then call the
  // corresponding virtual method.
  ::fidl::Result HandleOneEvent(
      ::fidl::UnownedClientEnd<::fidl_test_inheritance::Sub> client_end);
};
template <>
class ::fidl::WireSyncClient<::fidl_test_inheritance::Sub> final {
 public:
  WireSyncClient() = default;

  explicit WireSyncClient(
      ::fidl::ClientEnd<::fidl_test_inheritance::Sub> client_end)
      : client_end_(std::move(client_end)) {}

  ~WireSyncClient() = default;
  WireSyncClient(WireSyncClient&&) = default;
  WireSyncClient& operator=(WireSyncClient&&) = default;

  const ::fidl::ClientEnd<::fidl_test_inheritance::Sub>& client_end() const {
    return client_end_;
  }
  ::fidl::ClientEnd<::fidl_test_inheritance::Sub>& client_end() {
    return client_end_;
  }

  const ::zx::channel& channel() const { return client_end_.channel(); }
  ::zx::channel* mutable_channel() { return &client_end_.channel(); }

  // Allocates 24 bytes of response buffer on the stack. Request is
  // heap-allocated.
  ::fidl::WireResult<::fidl_test_inheritance::Sub::Foo> Foo(
      ::fidl::StringView s) {
    return ::fidl::WireResult<::fidl_test_inheritance::Sub::Foo>(
        this->client_end(), s);
  }

  // Caller provides the backing storage for FIDL message via request and
  // response buffers.
  ::fidl::WireUnownedResult<::fidl_test_inheritance::Sub::Foo> Foo(
      ::fidl::BufferSpan _request_buffer, ::fidl::StringView s,
      ::fidl::BufferSpan _response_buffer) {
    return ::fidl::WireUnownedResult<::fidl_test_inheritance::Sub::Foo>(
        this->client_end(), _request_buffer.data, _request_buffer.capacity, s,
        _response_buffer.data, _response_buffer.capacity);
  }

 private:
  ::fidl::ClientEnd<::fidl_test_inheritance::Sub> client_end_;
};

template <>
class ::fidl::internal::WireCompleterBase<::fidl_test_inheritance::Sub::Foo>
    : public ::fidl::CompleterBase {
 public:
  // In the following methods, the return value indicates internal errors during
  // the reply, such as encoding or writing to the transport.
  // Note that any error will automatically lead to the destruction of the
  // binding, after which the |on_unbound| callback will be triggered with a
  // detailed reason.
  //
  // See //zircon/system/ulib/fidl/include/lib/fidl/llcpp/server.h.
  //
  // Because the reply status is identical to the unbinding status, it can be
  // safely ignored.
  ::fidl::Result Reply(int64_t y);
  ::fidl::Result Reply(::fidl::BufferSpan _buffer, int64_t y);

 protected:
  using ::fidl::CompleterBase::CompleterBase;
};

template <>
struct ::fidl::internal::WireMethodTypes<::fidl_test_inheritance::Sub::Foo> {
  using Completer = fidl::Completer<
      ::fidl::internal::WireCompleterBase<::fidl_test_inheritance::Sub::Foo>>;
};

// Pure-virtual interface to be implemented by a server.
// This interface uses typed channels (i.e. |fidl::ClientEnd<SomeProtocol>|
// and |fidl::ServerEnd<SomeProtocol>|).
template <>
class ::fidl::WireServer<::fidl_test_inheritance::Sub>
    : public ::fidl::internal::IncomingMessageDispatcher {
 public:
  WireServer() = default;
  virtual ~WireServer() = default;

  // The FIDL protocol type that is implemented by this server.
  using _EnclosingProtocol = ::fidl_test_inheritance::Sub;

  using FooCompleter =
      ::fidl::internal::WireCompleter<::fidl_test_inheritance::Sub::Foo>;
  using FooRequestView =
      ::fidl::internal::WireRequestView<::fidl_test_inheritance::Sub::Foo>;

  virtual void Foo(FooRequestView request, FooCompleter::Sync& _completer) = 0;

 private:
  ::fidl::DispatchResult dispatch_message(::fidl::IncomingMessage&& msg,
                                          ::fidl::Transaction* txn) final;
};
#endif  // __Fuchsia__

namespace fidl {

template <>
struct IsFidlType<::fidl::WireRequest<::fidl_test_inheritance::Super::Foo>>
    : public std::true_type {};
template <>
struct IsFidlMessage<::fidl::WireRequest<::fidl_test_inheritance::Super::Foo>>
    : public std::true_type {};
static_assert(
    sizeof(::fidl::WireRequest<::fidl_test_inheritance::Super::Foo>) ==
    ::fidl::WireRequest<::fidl_test_inheritance::Super::Foo>::PrimarySize);
static_assert(offsetof(::fidl::WireRequest<::fidl_test_inheritance::Super::Foo>,
                       s) == 16);

template <>
struct IsFidlType<::fidl::WireResponse<::fidl_test_inheritance::Super::Foo>>
    : public std::true_type {};
template <>
struct IsFidlMessage<::fidl::WireResponse<::fidl_test_inheritance::Super::Foo>>
    : public std::true_type {};
static_assert(
    sizeof(::fidl::WireResponse<::fidl_test_inheritance::Super::Foo>) ==
    ::fidl::WireResponse<::fidl_test_inheritance::Super::Foo>::PrimarySize);
static_assert(
    offsetof(::fidl::WireResponse<::fidl_test_inheritance::Super::Foo>, y) ==
    16);

template <>
struct IsFidlType<::fidl::WireRequest<::fidl_test_inheritance::Sub::Foo>>
    : public std::true_type {};
template <>
struct IsFidlMessage<::fidl::WireRequest<::fidl_test_inheritance::Sub::Foo>>
    : public std::true_type {};
static_assert(
    sizeof(::fidl::WireRequest<::fidl_test_inheritance::Sub::Foo>) ==
    ::fidl::WireRequest<::fidl_test_inheritance::Sub::Foo>::PrimarySize);
static_assert(offsetof(::fidl::WireRequest<::fidl_test_inheritance::Sub::Foo>,
                       s) == 16);

template <>
struct IsFidlType<::fidl::WireResponse<::fidl_test_inheritance::Sub::Foo>>
    : public std::true_type {};
template <>
struct IsFidlMessage<::fidl::WireResponse<::fidl_test_inheritance::Sub::Foo>>
    : public std::true_type {};
static_assert(
    sizeof(::fidl::WireResponse<::fidl_test_inheritance::Sub::Foo>) ==
    ::fidl::WireResponse<::fidl_test_inheritance::Sub::Foo>::PrimarySize);
static_assert(offsetof(::fidl::WireResponse<::fidl_test_inheritance::Sub::Foo>,
                       y) == 16);
}  // namespace fidl
#ifdef __Fuchsia__

template <>
class ::fidl::WireResponseContext<::fidl_test_inheritance::Super::Foo>
    : public ::fidl::internal::ResponseContext {
 public:
  WireResponseContext();

  virtual void OnResult(
      ::fidl::WireUnownedResult<::fidl_test_inheritance::Super::Foo>&
          result) = 0;

 private:
  ::cpp17::optional<::fidl::UnbindInfo> OnRawResult(
      ::fidl::IncomingMessage&& msg) override;
};
#endif  // __Fuchsia__

#ifdef __Fuchsia__

template <>
class ::fidl::internal::WireClientImpl<::fidl_test_inheritance::Super> final
    : public ::fidl::internal::ClientBase {
 public:
  // Asynchronous variant of |Super.Foo()|.
  // The request and callback are allocated on the heap.
  void Foo(::fidl::StringView s,
           ::fidl::WireClientCallback<::fidl_test_inheritance::Super::Foo> _cb);

  void Foo(
      ::fidl::StringView s,
      ::fit::callback<void(
          ::fidl::WireResponse<::fidl_test_inheritance::Super::Foo>* response)>
          _cb);
  void Foo(::fidl::StringView s,
           ::fit::callback<void(::fidl::WireUnownedResult<
                                ::fidl_test_inheritance::Super::Foo>&& result)>
               _cb);

  // Asynchronous variant of |Super.Foo()|.
  // Caller provides the backing storage for FIDL message via request buffer.
  // Ownership of |_context| is given unsafely to the binding until |OnError|
  // or |OnReply| are called on it.
  void Foo(::fidl::BufferSpan _request_buffer, ::fidl::StringView s,
           ::fidl::WireResponseContext<::fidl_test_inheritance::Super::Foo>*
               _context);

  // Synchronous variant of |Foo.Foo()|.
  // Allocates 24 bytes of response buffer on the stack. Request is
  // heap-allocated.
  ::fidl::WireResult<::fidl_test_inheritance::Super::Foo> Foo_Sync(
      ::fidl::StringView s);

  // Synchronous variant of |Foo.Foo()|.
  // Caller provides the backing storage for FIDL message via request and
  // response buffers.
  ::fidl::WireUnownedResult<::fidl_test_inheritance::Super::Foo> Foo_Sync(
      ::fidl::BufferSpan _request_buffer, ::fidl::StringView s,
      ::fidl::BufferSpan _response_buffer);
  WireClientImpl() = default;

 private:
  std::optional<::fidl::UnbindInfo> DispatchEvent(
      ::fidl::IncomingMessage& msg,
      ::fidl::internal::AsyncEventHandler* maybe_event_handler) override;
};
#endif  // __Fuchsia__

#ifdef __Fuchsia__
// |EventSender| owns a server endpoint of a channel speaking
// the Super protocol, and can send events in that protocol.
template <>
class ::fidl::WireEventSender<::fidl_test_inheritance::Super> {
 public:
  // Constructs an event sender with an invalid channel.
  WireEventSender() = default;

  explicit WireEventSender(
      ::fidl::ServerEnd<::fidl_test_inheritance::Super> server_end)
      : server_end_(std::move(server_end)) {}

  // The underlying server channel endpoint, which may be replaced at run-time.
  const ::fidl::ServerEnd<::fidl_test_inheritance::Super>& server_end() const {
    return server_end_;
  }
  ::fidl::ServerEnd<::fidl_test_inheritance::Super>& server_end() {
    return server_end_;
  }

  const ::zx::channel& channel() const { return server_end_.channel(); }
  ::zx::channel& channel() { return server_end_.channel(); }

  // Whether the underlying channel is valid.
  bool is_valid() const { return server_end_.is_valid(); }

 private:
  ::fidl::ServerEnd<::fidl_test_inheritance::Super> server_end_;
};

template <>
class ::fidl::internal::WireWeakEventSender<::fidl_test_inheritance::Super> {
 public:
 private:
  friend class ::fidl::ServerBindingRef<::fidl_test_inheritance::Super>;

  explicit WireWeakEventSender(
      std::weak_ptr<
          ::fidl::internal::AsyncServerBinding<::fidl_test_inheritance::Super>>
          binding)
      : binding_(std::move(binding)) {}

  std::weak_ptr<
      ::fidl::internal::AsyncServerBinding<::fidl_test_inheritance::Super>>
      binding_;
};
#endif  // __Fuchsia__

#ifdef __Fuchsia__

template <>
class ::fidl::WireResponseContext<::fidl_test_inheritance::Sub::Foo>
    : public ::fidl::internal::ResponseContext {
 public:
  WireResponseContext();

  virtual void OnResult(
      ::fidl::WireUnownedResult<::fidl_test_inheritance::Sub::Foo>& result) = 0;

 private:
  ::cpp17::optional<::fidl::UnbindInfo> OnRawResult(
      ::fidl::IncomingMessage&& msg) override;
};
#endif  // __Fuchsia__

#ifdef __Fuchsia__

template <>
class ::fidl::internal::WireClientImpl<::fidl_test_inheritance::Sub> final
    : public ::fidl::internal::ClientBase {
 public:
  // Asynchronous variant of |Sub.Foo()|.
  // The request and callback are allocated on the heap.
  void Foo(::fidl::StringView s,
           ::fidl::WireClientCallback<::fidl_test_inheritance::Sub::Foo> _cb);

  void Foo(
      ::fidl::StringView s,
      ::fit::callback<void(
          ::fidl::WireResponse<::fidl_test_inheritance::Sub::Foo>* response)>
          _cb);
  void Foo(::fidl::StringView s,
           ::fit::callback<void(::fidl::WireUnownedResult<
                                ::fidl_test_inheritance::Sub::Foo>&& result)>
               _cb);

  // Asynchronous variant of |Sub.Foo()|.
  // Caller provides the backing storage for FIDL message via request buffer.
  // Ownership of |_context| is given unsafely to the binding until |OnError|
  // or |OnReply| are called on it.
  void Foo(
      ::fidl::BufferSpan _request_buffer, ::fidl::StringView s,
      ::fidl::WireResponseContext<::fidl_test_inheritance::Sub::Foo>* _context);

  // Synchronous variant of |Foo.Foo()|.
  // Allocates 24 bytes of response buffer on the stack. Request is
  // heap-allocated.
  ::fidl::WireResult<::fidl_test_inheritance::Sub::Foo> Foo_Sync(
      ::fidl::StringView s);

  // Synchronous variant of |Foo.Foo()|.
  // Caller provides the backing storage for FIDL message via request and
  // response buffers.
  ::fidl::WireUnownedResult<::fidl_test_inheritance::Sub::Foo> Foo_Sync(
      ::fidl::BufferSpan _request_buffer, ::fidl::StringView s,
      ::fidl::BufferSpan _response_buffer);
  WireClientImpl() = default;

 private:
  std::optional<::fidl::UnbindInfo> DispatchEvent(
      ::fidl::IncomingMessage& msg,
      ::fidl::internal::AsyncEventHandler* maybe_event_handler) override;
};
#endif  // __Fuchsia__

#ifdef __Fuchsia__
// |EventSender| owns a server endpoint of a channel speaking
// the Sub protocol, and can send events in that protocol.
template <>
class ::fidl::WireEventSender<::fidl_test_inheritance::Sub> {
 public:
  // Constructs an event sender with an invalid channel.
  WireEventSender() = default;

  explicit WireEventSender(
      ::fidl::ServerEnd<::fidl_test_inheritance::Sub> server_end)
      : server_end_(std::move(server_end)) {}

  // The underlying server channel endpoint, which may be replaced at run-time.
  const ::fidl::ServerEnd<::fidl_test_inheritance::Sub>& server_end() const {
    return server_end_;
  }
  ::fidl::ServerEnd<::fidl_test_inheritance::Sub>& server_end() {
    return server_end_;
  }

  const ::zx::channel& channel() const { return server_end_.channel(); }
  ::zx::channel& channel() { return server_end_.channel(); }

  // Whether the underlying channel is valid.
  bool is_valid() const { return server_end_.is_valid(); }

 private:
  ::fidl::ServerEnd<::fidl_test_inheritance::Sub> server_end_;
};

template <>
class ::fidl::internal::WireWeakEventSender<::fidl_test_inheritance::Sub> {
 public:
 private:
  friend class ::fidl::ServerBindingRef<::fidl_test_inheritance::Sub>;

  explicit WireWeakEventSender(
      std::weak_ptr<
          ::fidl::internal::AsyncServerBinding<::fidl_test_inheritance::Sub>>
          binding)
      : binding_(std::move(binding)) {}

  std::weak_ptr<
      ::fidl::internal::AsyncServerBinding<::fidl_test_inheritance::Sub>>
      binding_;
};
#endif  // __Fuchsia__
