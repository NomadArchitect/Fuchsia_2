// WARNING: This file is machine generated by fidlgen.

#pragma once

#include <lib/fidl/llcpp/array.h>
#include <lib/fidl/llcpp/coding.h>
#include <lib/fidl/llcpp/envelope.h>
#include <lib/fidl/llcpp/message.h>
#include <lib/fidl/llcpp/message_storage.h>
#include <lib/fidl/llcpp/object_view.h>
#include <lib/fidl/llcpp/string_view.h>
#include <lib/fidl/llcpp/traits.h>
#include <lib/fidl/llcpp/wire_types.h>
#include <lib/stdcompat/optional.h>

#include <cinttypes>
#ifdef __Fuchsia__
#include <lib/zx/handle.h>

#endif  // __Fuchsia__

#include <fidl/fidl.test.encapsulatedstructs/cpp/markers.h>

namespace fidl_test_encapsulatedstructs {
namespace wire {
struct NonInlineStructTestStruct;

struct Int8Int32;

struct Int16Int8;

struct ArrayInt16Int8;

struct StructPaddingTestStruct;

struct TopLevelStruct;

extern "C" const fidl_type_t fidl_test_encapsulatedstructs_Int16Int8Table;

struct Int16Int8 {
  static constexpr const fidl_type_t* Type =
      &fidl_test_encapsulatedstructs_Int16Int8Table;
  static constexpr uint32_t MaxNumHandles = 0;
  static constexpr uint32_t PrimarySize = 4;
  static constexpr uint32_t PrimarySizeV1 = 4;
  [[maybe_unused]] static constexpr uint32_t MaxOutOfLine = 0;
  static constexpr uint32_t MaxOutOfLineV1 = 0;
  static constexpr bool HasPointer = false;

  int16_t a = {};

  int8_t b = {};

  class UnownedEncodedMessage;
  class OwnedEncodedMessage;
  class DecodedMessage;
};

#ifdef __Fuchsia__

extern "C" const fidl_type_t
    fidl_test_encapsulatedstructs_NonInlineStructTestStructTable;

struct NonInlineStructTestStruct {
  static constexpr const fidl_type_t* Type =
      &fidl_test_encapsulatedstructs_NonInlineStructTestStructTable;
  static constexpr uint32_t MaxNumHandles = 1;
  static constexpr uint32_t PrimarySize = 16;
  static constexpr uint32_t PrimarySizeV1 = 16;
  [[maybe_unused]] static constexpr uint32_t MaxOutOfLine = 8;
  static constexpr uint32_t MaxOutOfLineV1 = 8;
  static constexpr bool HasPointer = true;

  ::fidl::ObjectView<::fidl_test_encapsulatedstructs::wire::Int16Int8> element =
      {};

  ::zx::handle h = {};

  void _CloseHandles();

  class UnownedEncodedMessage;
  class OwnedEncodedMessage;
  class DecodedMessage;
};
#endif  // __Fuchsia__

extern "C" const fidl_type_t fidl_test_encapsulatedstructs_Int8Int32Table;

struct Int8Int32 {
  static constexpr const fidl_type_t* Type =
      &fidl_test_encapsulatedstructs_Int8Int32Table;
  static constexpr uint32_t MaxNumHandles = 0;
  static constexpr uint32_t PrimarySize = 8;
  static constexpr uint32_t PrimarySizeV1 = 8;
  [[maybe_unused]] static constexpr uint32_t MaxOutOfLine = 0;
  static constexpr uint32_t MaxOutOfLineV1 = 0;
  static constexpr bool HasPointer = false;

  int8_t a = {};

  int32_t b = {};

  class UnownedEncodedMessage;
  class OwnedEncodedMessage;
  class DecodedMessage;
};

extern "C" const fidl_type_t fidl_test_encapsulatedstructs_ArrayInt16Int8Table;

struct ArrayInt16Int8 {
  static constexpr const fidl_type_t* Type =
      &fidl_test_encapsulatedstructs_ArrayInt16Int8Table;
  static constexpr uint32_t MaxNumHandles = 0;
  static constexpr uint32_t PrimarySize = 12;
  static constexpr uint32_t PrimarySizeV1 = 12;
  [[maybe_unused]] static constexpr uint32_t MaxOutOfLine = 0;
  static constexpr uint32_t MaxOutOfLineV1 = 0;
  static constexpr bool HasPointer = false;

  ::fidl::Array<::fidl_test_encapsulatedstructs::wire::Int16Int8, 3> arr = {};

  class UnownedEncodedMessage;
  class OwnedEncodedMessage;
  class DecodedMessage;
};

extern "C" const fidl_type_t
    fidl_test_encapsulatedstructs_StructPaddingTestStructTable;

struct StructPaddingTestStruct {
  static constexpr const fidl_type_t* Type =
      &fidl_test_encapsulatedstructs_StructPaddingTestStructTable;
  static constexpr uint32_t MaxNumHandles = 0;
  static constexpr uint32_t PrimarySize = 24;
  static constexpr uint32_t PrimarySizeV1 = 24;
  [[maybe_unused]] static constexpr uint32_t MaxOutOfLine = 0;
  static constexpr uint32_t MaxOutOfLineV1 = 0;
  static constexpr bool HasPointer = false;

  ::fidl_test_encapsulatedstructs::wire::Int16Int8 trailing = {};

  ::fidl_test_encapsulatedstructs::wire::Int8Int32 inner = {};

  ::fidl_test_encapsulatedstructs::wire::ArrayInt16Int8 array = {};

  class UnownedEncodedMessage;
  class OwnedEncodedMessage;
  class DecodedMessage;
};

#ifdef __Fuchsia__

extern "C" const fidl_type_t fidl_test_encapsulatedstructs_TopLevelStructTable;

struct TopLevelStruct {
  static constexpr const fidl_type_t* Type =
      &fidl_test_encapsulatedstructs_TopLevelStructTable;
  static constexpr uint32_t MaxNumHandles = 1;
  static constexpr uint32_t PrimarySize = 40;
  static constexpr uint32_t PrimarySizeV1 = 40;
  [[maybe_unused]] static constexpr uint32_t MaxOutOfLine = 8;
  static constexpr uint32_t MaxOutOfLineV1 = 8;
  static constexpr bool HasPointer = true;

  ::fidl_test_encapsulatedstructs::wire::StructPaddingTestStruct a = {};

  ::fidl_test_encapsulatedstructs::wire::NonInlineStructTestStruct b = {};

  void _CloseHandles();

  class UnownedEncodedMessage;
  class OwnedEncodedMessage;
  class DecodedMessage;
};
#endif  // __Fuchsia__

}  // namespace wire
}  // namespace fidl_test_encapsulatedstructs
namespace fidl {

#ifdef __Fuchsia__
template <>
struct IsResource<
    ::fidl_test_encapsulatedstructs::wire::NonInlineStructTestStruct>
    : public std::true_type {};
template <>
struct IsFidlType<
    ::fidl_test_encapsulatedstructs::wire::NonInlineStructTestStruct>
    : public std::true_type {};
template <>
struct IsStruct<
    ::fidl_test_encapsulatedstructs::wire::NonInlineStructTestStruct>
    : public std::true_type {};
static_assert(
    std::is_standard_layout_v<
        ::fidl_test_encapsulatedstructs::wire::NonInlineStructTestStruct>);
static_assert(
    offsetof(::fidl_test_encapsulatedstructs::wire::NonInlineStructTestStruct,
             element) == 0);
static_assert(
    offsetof(::fidl_test_encapsulatedstructs::wire::NonInlineStructTestStruct,
             h) == 8);
static_assert(
    sizeof(::fidl_test_encapsulatedstructs::wire::NonInlineStructTestStruct) ==
    ::fidl_test_encapsulatedstructs::wire::NonInlineStructTestStruct::
        PrimarySize);
#endif  // __Fuchsia__

template <>
struct IsFidlType<::fidl_test_encapsulatedstructs::wire::Int8Int32>
    : public std::true_type {};
template <>
struct IsStruct<::fidl_test_encapsulatedstructs::wire::Int8Int32>
    : public std::true_type {};
static_assert(std::is_standard_layout_v<
              ::fidl_test_encapsulatedstructs::wire::Int8Int32>);
static_assert(offsetof(::fidl_test_encapsulatedstructs::wire::Int8Int32, a) ==
              0);
static_assert(offsetof(::fidl_test_encapsulatedstructs::wire::Int8Int32, b) ==
              4);
static_assert(sizeof(::fidl_test_encapsulatedstructs::wire::Int8Int32) ==
              ::fidl_test_encapsulatedstructs::wire::Int8Int32::PrimarySize);

template <>
struct IsFidlType<::fidl_test_encapsulatedstructs::wire::Int16Int8>
    : public std::true_type {};
template <>
struct IsStruct<::fidl_test_encapsulatedstructs::wire::Int16Int8>
    : public std::true_type {};
static_assert(std::is_standard_layout_v<
              ::fidl_test_encapsulatedstructs::wire::Int16Int8>);
static_assert(offsetof(::fidl_test_encapsulatedstructs::wire::Int16Int8, a) ==
              0);
static_assert(offsetof(::fidl_test_encapsulatedstructs::wire::Int16Int8, b) ==
              2);
static_assert(sizeof(::fidl_test_encapsulatedstructs::wire::Int16Int8) ==
              ::fidl_test_encapsulatedstructs::wire::Int16Int8::PrimarySize);

template <>
struct IsFidlType<::fidl_test_encapsulatedstructs::wire::ArrayInt16Int8>
    : public std::true_type {};
template <>
struct IsStruct<::fidl_test_encapsulatedstructs::wire::ArrayInt16Int8>
    : public std::true_type {};
static_assert(std::is_standard_layout_v<
              ::fidl_test_encapsulatedstructs::wire::ArrayInt16Int8>);
static_assert(offsetof(::fidl_test_encapsulatedstructs::wire::ArrayInt16Int8,
                       arr) == 0);
static_assert(
    sizeof(::fidl_test_encapsulatedstructs::wire::ArrayInt16Int8) ==
    ::fidl_test_encapsulatedstructs::wire::ArrayInt16Int8::PrimarySize);

template <>
struct IsFidlType<
    ::fidl_test_encapsulatedstructs::wire::StructPaddingTestStruct>
    : public std::true_type {};
template <>
struct IsStruct<::fidl_test_encapsulatedstructs::wire::StructPaddingTestStruct>
    : public std::true_type {};
static_assert(std::is_standard_layout_v<
              ::fidl_test_encapsulatedstructs::wire::StructPaddingTestStruct>);
static_assert(
    offsetof(::fidl_test_encapsulatedstructs::wire::StructPaddingTestStruct,
             trailing) == 0);
static_assert(
    offsetof(::fidl_test_encapsulatedstructs::wire::StructPaddingTestStruct,
             inner) == 4);
static_assert(
    offsetof(::fidl_test_encapsulatedstructs::wire::StructPaddingTestStruct,
             array) == 12);
static_assert(
    sizeof(::fidl_test_encapsulatedstructs::wire::StructPaddingTestStruct) ==
    ::fidl_test_encapsulatedstructs::wire::StructPaddingTestStruct::
        PrimarySize);

#ifdef __Fuchsia__
template <>
struct IsResource<::fidl_test_encapsulatedstructs::wire::TopLevelStruct>
    : public std::true_type {};
template <>
struct IsFidlType<::fidl_test_encapsulatedstructs::wire::TopLevelStruct>
    : public std::true_type {};
template <>
struct IsStruct<::fidl_test_encapsulatedstructs::wire::TopLevelStruct>
    : public std::true_type {};
static_assert(std::is_standard_layout_v<
              ::fidl_test_encapsulatedstructs::wire::TopLevelStruct>);
static_assert(offsetof(::fidl_test_encapsulatedstructs::wire::TopLevelStruct,
                       a) == 0);
static_assert(offsetof(::fidl_test_encapsulatedstructs::wire::TopLevelStruct,
                       b) == 24);
static_assert(
    sizeof(::fidl_test_encapsulatedstructs::wire::TopLevelStruct) ==
    ::fidl_test_encapsulatedstructs::wire::TopLevelStruct::PrimarySize);
#endif  // __Fuchsia__

}  // namespace fidl
