#include <fidl/test.drivertwoway/cpp/driver/natural_messaging.h>
namespace test_drivertwoway {
[[maybe_unused]] constexpr inline uint64_t kTwoWay_Add_Ordinal =
    989730524426044687lu;
#ifdef __Fuchsia__
}  // namespace test_drivertwoway
void fidl::internal::NaturalClientImpl<::test_drivertwoway::TwoWay>::Add(
    ::fidl::Request<::test_drivertwoway::TwoWay::Add> request,
    ::fidl::ClientCallback<::test_drivertwoway::TwoWay::Add>&& _callback)
    const {
  ::fidl::internal::NaturalMessageEncoder _encoder{
      &::fidl::internal::DriverTransport::VTable,
      ::test_drivertwoway::kTwoWay_Add_Ordinal};

  auto response_context =
      ::fidl::internal::MakeResponseContext<::test_drivertwoway::TwoWay::Add>(
          ::test_drivertwoway::kTwoWay_Add_Ordinal, std::move(_callback));

  auto _arena = fdf::Arena::Create(0, "");
  if (!_arena.is_ok()) {
    return messenger().TwoWay(
        ::fidl::OutgoingMessage(::fidl::Status::TransportError(
            _arena.status_value(),
            ::fdf::internal::kFailedToCreateDriverArena)),
        response_context);
  }

  ::fidl::WriteOptions _options = {
      .outgoing_transport_context =
          ::fidl::internal::OutgoingTransportContext::Create<
              ::fidl::internal::DriverTransport>(_arena->get()),
  };
  ::fidl::OutgoingMessage _msg = _encoder.EncodeTransactionalMessage(
      ::fidl::internal::NaturalMessageConverter<
          ::fidl::Request<::test_drivertwoway::TwoWay::Add>>::
          IntoDomainObject(std::move(request)));
  return messenger().TwoWay(::fdf::internal::MoveToArena(_msg, *_arena),
                            response_context, std::move(_options));
}

namespace test_drivertwoway {
#endif  // __Fuchsia__
}  // namespace test_drivertwoway
#ifdef __Fuchsia__

std::optional<::fidl::UnbindInfo> fidl::internal::
    NaturalEventDispatcher<::test_drivertwoway::TwoWay>::DispatchEvent(
        ::fidl::IncomingMessage& msg,
        ::fidl::internal::IncomingTransportContext transport_context) {
  return ::fidl::UnbindInfo::UnknownOrdinal();
}
#endif  // __Fuchsia__

void fidl::internal::NaturalCompleterBase<::test_drivertwoway::TwoWay::Add>::
    Reply(::fidl::Response<::test_drivertwoway::TwoWay::Add>&& response) {
  ::fidl::internal::NaturalServerMessenger _messenger{this};
  ::fidl::internal::NaturalMessageEncoder _encoder{
      &::fidl::internal::DriverTransport::VTable,
      ::test_drivertwoway::kTwoWay_Add_Ordinal};

  auto _arena = fdf::Arena::Create(0, "");
  if (!_arena.is_ok()) {
    _messenger.SendReply(::fidl::OutgoingMessage(::fidl::Status::TransportError(
                             _arena.status_value())),
                         {});
    return;
  }

  ::fidl::internal::OutgoingTransportContext _context =
      ::fidl::internal::OutgoingTransportContext::Create<
          ::fidl::internal::DriverTransport>(_arena->get());
  ::fidl::OutgoingMessage _msg = _encoder.EncodeTransactionalMessage(
      ::fidl::internal::NaturalMessageConverter<
          ::fidl::Response<::test_drivertwoway::TwoWay::Add>>::
          IntoDomainObject(std::move(response)));
  _messenger.SendReply(::fdf::internal::MoveToArena(_msg, *_arena),
                       std::move(_context));
}
#ifdef __Fuchsia__

constexpr ::fidl::internal::MethodEntry fidl::internal::NaturalServerDispatcher<
    ::test_drivertwoway::TwoWay>::entries_[] = {
    {
        ::test_drivertwoway::kTwoWay_Add_Ordinal,
        [](void* interface, ::fidl::IncomingMessage&& msg,
           internal::IncomingTransportContext transport_context,
           ::fidl::Transaction* txn) {
          ::fitx::result decoded = ::fidl::internal::DecodeTransactionalMessage<
              ::test_drivertwoway::TwoWayAddRequest>(std::move(msg));
          if (decoded.is_error()) {
            return decoded.error_value().status();
          }
          ::fidl::Request<::test_drivertwoway::TwoWay::Add> request =
              ::fidl::internal::NaturalMessageConverter<
                  ::fidl::Request<::test_drivertwoway::TwoWay::Add>>::
                  FromDomainObject(std::move(decoded.value()));
          ::fidl::internal::NaturalCompleter<
              ::test_drivertwoway::TwoWay::Add>::Sync completer(txn);
          static_cast<::fdf::Server<::test_drivertwoway::TwoWay>*>(interface)
              ->Add(request, completer);
          return ZX_OK;
        },
    },
};

const ::fidl::internal::MethodEntry* fidl::internal::NaturalServerDispatcher<
    ::test_drivertwoway::TwoWay>::entries_end_ = &entries_[1];

void fidl::internal::NaturalServerDispatcher<::test_drivertwoway::TwoWay>::
    Dispatch(::fdf::Server<::test_drivertwoway::TwoWay>* impl,
             ::fidl::IncomingMessage&& msg,
             internal::IncomingTransportContext transport_context,
             ::fidl::Transaction* txn) {
  ::fidl::internal::Dispatch(impl, msg, std::move(transport_context), txn,
                             entries_, entries_end_);
}
void fdf::Server<::test_drivertwoway::TwoWay>::dispatch_message(
    ::fidl::IncomingMessage&& msg, ::fidl::Transaction* txn,
    ::fidl::internal::IncomingTransportContext transport_context) {
  ::fidl::internal::NaturalServerDispatcher<
      ::test_drivertwoway::TwoWay>::Dispatch(this, std::move(msg),
                                             std::move(transport_context), txn);
}
#endif  // __Fuchsia__
