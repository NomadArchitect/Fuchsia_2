// WARNING: This file is machine generated by fidlgen.

#include <fidl/fidl.test.nullable/cpp/wire_messaging.h>

#include <memory>

namespace fidl_test_nullable {
[[maybe_unused]] constexpr uint64_t kSimpleProtocol_Add_Ordinal =
    1238508415331800925lu;

extern "C" const fidl_type_t fidl_test_nullable_SimpleProtocolAddRequestTable;

extern "C" const fidl_type_t fidl_test_nullable_SimpleProtocolAddResponseTable;
#ifdef __Fuchsia__
}  // namespace fidl_test_nullable
::fidl::WireResult<::fidl_test_nullable::SimpleProtocol::Add>::WireResult(
    ::fidl::UnownedClientEnd<::fidl_test_nullable::SimpleProtocol> client,
    ::fidl::WireRequest<::fidl_test_nullable::SimpleProtocol::Add>* request) {
  FIDL_INTERNAL_DISABLE_AUTO_VAR_INIT
  ::fidl::OwnedEncodedMessage<
      ::fidl::WireRequest<::fidl_test_nullable::SimpleProtocol::Add>>
      request_message(::fidl::internal::AllowUnownedInputRef{}, request);
  auto& outgoing = request_message.GetOutgoingMessage();
  outgoing
      .Call<::fidl::WireResponse<::fidl_test_nullable::SimpleProtocol::Add>>(
          client.channel(), bytes_.data(),
          static_cast<uint32_t>(bytes_.size()));
  SetResult(outgoing);
}

::fidl::WireResult<::fidl_test_nullable::SimpleProtocol::Add>::WireResult(
    ::fidl::UnownedClientEnd<::fidl_test_nullable::SimpleProtocol> client,
    ::fidl::WireRequest<::fidl_test_nullable::SimpleProtocol::Add>* request,
    zx_time_t deadline) {
  FIDL_INTERNAL_DISABLE_AUTO_VAR_INIT
  ::fidl::OwnedEncodedMessage<
      ::fidl::WireRequest<::fidl_test_nullable::SimpleProtocol::Add>>
      request_message(::fidl::internal::AllowUnownedInputRef{}, request);
  auto& outgoing = request_message.GetOutgoingMessage();
  outgoing
      .Call<::fidl::WireResponse<::fidl_test_nullable::SimpleProtocol::Add>>(
          client.channel(), bytes_.data(), static_cast<uint32_t>(bytes_.size()),
          deadline);
  SetResult(outgoing);
}
namespace fidl_test_nullable {
#endif  // __Fuchsia__

#ifdef __Fuchsia__
}  // namespace fidl_test_nullable
::fidl::WireUnownedResult<::fidl_test_nullable::SimpleProtocol::Add>::
    WireUnownedResult(
        ::fidl::UnownedClientEnd<::fidl_test_nullable::SimpleProtocol>
            client_end,
        ::fidl::internal::AnyBufferAllocator& allocator,
        ::fidl::WireRequest<::fidl_test_nullable::SimpleProtocol::Add>*
            request) {
  constexpr uint32_t buffer_size = ::fidl::SyncClientMethodBufferSizeInChannel<
      ::fidl_test_nullable::SimpleProtocol::Add>();
  uint8_t* buffer = allocator.Allocate(buffer_size);
  if (!buffer) {
    ::fidl::Result::operator=(::fidl::Result::EncodeError(
        ZX_ERR_BUFFER_TOO_SMALL,
        ::fidl::internal::kCallerAllocatedBufferTooSmall));
    return;
  }
  constexpr uint32_t request_byte_capacity = ::fidl::MaxSizeInChannel<
      ::fidl::WireRequest<::fidl_test_nullable::SimpleProtocol::Add>,
      ::fidl::MessageDirection::kSending>();
  uint8_t* request_bytes = buffer;
  static_assert(buffer_size > request_byte_capacity);
  uint32_t response_byte_capacity = buffer_size - request_byte_capacity;
  uint8_t* response_bytes = &buffer[request_byte_capacity];

  ::fidl::UnownedEncodedMessage<
      ::fidl::WireRequest<::fidl_test_nullable::SimpleProtocol::Add>>
      request_message(request_bytes, request_byte_capacity, request);
  auto& outgoing = request_message.GetOutgoingMessage();
  outgoing
      .Call<::fidl::WireResponse<::fidl_test_nullable::SimpleProtocol::Add>>(
          client_end.channel(), response_bytes, response_byte_capacity);
  bytes_ = response_bytes;
  ::fidl::Result::operator=(outgoing);
}
namespace fidl_test_nullable {
#endif  // __Fuchsia__

}  // namespace fidl_test_nullable
#ifdef __Fuchsia__

::fidl::WireResponseContext<
    ::fidl_test_nullable::SimpleProtocol::Add>::WireResponseContext()
    : ::fidl::internal::ResponseContext(
          ::fidl_test_nullable::kSimpleProtocol_Add_Ordinal) {}

::cpp17::optional<::fidl::UnbindInfo> fidl::
    WireResponseContext<::fidl_test_nullable::SimpleProtocol::Add>::OnRawResult(
        ::fidl::IncomingMessage&& msg) {
  if (unlikely(!msg.ok())) {
    ::fidl::WireUnownedResult<::fidl_test_nullable::SimpleProtocol::Add> result{
        msg.error()};
    OnResult(result);
    return cpp17::nullopt;
  }
  ::fidl::DecodedMessage<
      ::fidl::WireResponse<::fidl_test_nullable::SimpleProtocol::Add>>
      decoded{std::move(msg)};
  ::fidl::Result maybe_error = decoded;
  ::fidl::WireUnownedResult<::fidl_test_nullable::SimpleProtocol::Add> result{
      std::move(decoded)};
  OnResult(result);
  if (unlikely(!maybe_error.ok())) {
    return ::fidl::UnbindInfo(maybe_error);
  }
  return cpp17::nullopt;
}
#endif  // __Fuchsia__

#ifdef __Fuchsia__

void fidl::internal::WireClientImpl<::fidl_test_nullable::SimpleProtocol>::Add(
    int32_t a, int32_t b,
    ::fidl::WireClientCallback<::fidl_test_nullable::SimpleProtocol::Add> _cb) {
  using Callback = decltype(_cb);
  class ResponseContext final : public ::fidl::WireResponseContext<
                                    ::fidl_test_nullable::SimpleProtocol::Add> {
   public:
    ResponseContext(Callback cb) : cb_(std::move(cb)) {}

    void OnResult(
        ::fidl::WireUnownedResult<::fidl_test_nullable::SimpleProtocol::Add>&
            result) override {
      cb_(result);
      delete this;
    }

   private:
    Callback cb_;
  };

  auto* _context = new ResponseContext(std::move(_cb));
  ::fidl::WireRequest<::fidl_test_nullable::SimpleProtocol::Add> _request{a, b};
  FIDL_INTERNAL_DISABLE_AUTO_VAR_INIT
  ::fidl::WireRequest<::fidl_test_nullable::SimpleProtocol::Add>::
      OwnedEncodedMessage _request_message(
          ::fidl::internal::AllowUnownedInputRef{}, &_request);
  ::fidl::internal::ClientBase::SendTwoWay(
      _request_message.GetOutgoingMessage(), _context);
}

void fidl::internal::WireClientImpl<::fidl_test_nullable::SimpleProtocol>::Add(
    int32_t a, int32_t b,
    ::fit::callback<void(::fidl::WireResponse<
                         ::fidl_test_nullable::SimpleProtocol::Add>* response)>
        _cb) {
  using Callback = decltype(_cb);
  class ResponseContext final : public ::fidl::WireResponseContext<
                                    ::fidl_test_nullable::SimpleProtocol::Add> {
   public:
    ResponseContext(Callback cb) : cb_(std::move(cb)) {}

    void OnResult(
        ::fidl::WireUnownedResult<::fidl_test_nullable::SimpleProtocol::Add>&
            result) override {
      if (result.ok()) {
        ::fidl::WireResponse<::fidl_test_nullable::SimpleProtocol::Add>*
            response = result.Unwrap();
        cb_(response);
      }
      delete this;
    }

   private:
    Callback cb_;
  };

  auto* _context = new ResponseContext(std::move(_cb));
  ::fidl::WireRequest<::fidl_test_nullable::SimpleProtocol::Add> _request{a, b};
  FIDL_INTERNAL_DISABLE_AUTO_VAR_INIT
  ::fidl::WireRequest<::fidl_test_nullable::SimpleProtocol::Add>::
      OwnedEncodedMessage _request_message(
          ::fidl::internal::AllowUnownedInputRef{}, &_request);
  ::fidl::internal::ClientBase::SendTwoWay(
      _request_message.GetOutgoingMessage(), _context);
}
void fidl::internal::WireClientImpl<::fidl_test_nullable::SimpleProtocol>::Add(
    ::fidl::BufferSpan _request_buffer, int32_t a, int32_t b,
    ::fidl::WireResponseContext<::fidl_test_nullable::SimpleProtocol::Add>*
        _context) {
  ::fidl::WireRequest<::fidl_test_nullable::SimpleProtocol::Add> _request{a, b};

  ::fidl::WireRequest<::fidl_test_nullable::SimpleProtocol::Add>::
      UnownedEncodedMessage _request_message(
          _request_buffer.data, _request_buffer.capacity, &_request);
  ::fidl::internal::ClientBase::SendTwoWay(
      _request_message.GetOutgoingMessage(), _context);
}
::fidl::WireResult<::fidl_test_nullable::SimpleProtocol::Add>
fidl::internal::WireClientImpl<::fidl_test_nullable::SimpleProtocol>::Add_Sync(
    int32_t a, int32_t b) {
  return ::fidl::internal::ClientBase::MakeSyncCallWith(
      [&](std::shared_ptr<::fidl::internal::AnyTransport> _transport) {
        ::fidl::WireRequest<::fidl_test_nullable::SimpleProtocol::Add> _request{
            a, b};
        return ::fidl::WireResult<::fidl_test_nullable::SimpleProtocol::Add>(
            ::fidl::UnownedClientEnd<::fidl_test_nullable::SimpleProtocol>(
                _transport->get<fidl::internal::ChannelTransport>()),
            &_request);
      });
}
::fidl::WireUnownedResult<::fidl_test_nullable::SimpleProtocol::Add>
fidl::internal::WireClientImpl<::fidl_test_nullable::SimpleProtocol>::Add_Sync(
    ::fidl::BufferSpan _buffer_span, int32_t a, int32_t b) {
  auto _allocator = ::fidl::internal::MakeAnyBufferAllocator(_buffer_span);
  return ::fidl::internal::ClientBase::MakeSyncCallWith(
      [&](std::shared_ptr<::fidl::internal::AnyTransport> _transport) {
        ::fidl::WireRequest<::fidl_test_nullable::SimpleProtocol::Add> _request{
            a, b};
        return ::fidl::WireUnownedResult<
            ::fidl_test_nullable::SimpleProtocol::Add>(
            ::fidl::UnownedClientEnd<::fidl_test_nullable::SimpleProtocol>(
                _transport->get<fidl::internal::ChannelTransport>()),
            _allocator, &_request);
      });
}

std::optional<::fidl::UnbindInfo> fidl::internal::
    WireClientImpl<::fidl_test_nullable::SimpleProtocol>::DispatchEvent(
        fidl::IncomingMessage& msg,
        ::fidl::internal::AsyncEventHandler* maybe_event_handler) {
  return ::fidl::UnbindInfo::UnknownOrdinal();
}
#endif  // __Fuchsia__

#ifdef __Fuchsia__

constexpr ::fidl::internal::MethodEntry fidl::internal::WireServerDispatcher<
    ::fidl_test_nullable::SimpleProtocol>::entries_[] = {
    {
        ::fidl_test_nullable::kSimpleProtocol_Add_Ordinal,
        [](void* interface, ::fidl::IncomingMessage&& msg,
           ::fidl::Transaction* txn) {
          ::fidl::DecodedMessage<
              ::fidl::WireRequest<::fidl_test_nullable::SimpleProtocol::Add>>
              decoded{std::move(msg)};
          if (unlikely(!decoded.ok())) {
            return decoded.status();
          }
          auto* primary = decoded.PrimaryObject();
          ::fidl::internal::WireCompleter<
              ::fidl_test_nullable::SimpleProtocol::Add>::Sync completer(txn);
          reinterpret_cast<
              ::fidl::WireServer<::fidl_test_nullable::SimpleProtocol>*>(
              interface)
              ->Add(primary, completer);
          return ZX_OK;
        },
    },
};

const ::fidl::internal::MethodEntry* fidl::internal::WireServerDispatcher<
    ::fidl_test_nullable::SimpleProtocol>::entries_end_ = &entries_[1];

::fidl::DispatchResult fidl::internal::
    WireServerDispatcher<::fidl_test_nullable::SimpleProtocol>::TryDispatch(
        ::fidl::WireServer<::fidl_test_nullable::SimpleProtocol>* impl,
        ::fidl::IncomingMessage& msg, ::fidl::Transaction* txn) {
  return ::fidl::internal::TryDispatch(impl, msg, txn, entries_, entries_end_);
}

void fidl::internal::
    WireServerDispatcher<::fidl_test_nullable::SimpleProtocol>::Dispatch(
        ::fidl::WireServer<::fidl_test_nullable::SimpleProtocol>* impl,
        ::fidl::IncomingMessage&& msg, ::fidl::Transaction* txn) {
  ::fidl::internal::Dispatch(impl, msg, txn, entries_, entries_end_);
}
void fidl::WireServer<::fidl_test_nullable::SimpleProtocol>::dispatch_message(
    fidl::IncomingMessage&& msg, ::fidl::Transaction* txn) {
  ::fidl::internal::WireServerDispatcher<
      ::fidl_test_nullable::SimpleProtocol>::Dispatch(this, std::move(msg),
                                                      txn);
}
#endif  // __Fuchsia__

#ifdef __Fuchsia__
::fidl::Result fidl::internal::WireCompleterBase<
    ::fidl_test_nullable::SimpleProtocol::Add>::Reply(int32_t sum) {
  ::fidl::WireResponse<::fidl_test_nullable::SimpleProtocol::Add> _response{
      sum};
  FIDL_INTERNAL_DISABLE_AUTO_VAR_INIT
  ::fidl::OwnedEncodedMessage<
      ::fidl::WireResponse<::fidl_test_nullable::SimpleProtocol::Add>>
      _response_message{::fidl::internal::AllowUnownedInputRef{}, &_response};
  return ::fidl::internal::
      WireCompleterBase<::fidl_test_nullable::SimpleProtocol::Add>::SendReply(
          &_response_message.GetOutgoingMessage());
}

::fidl::Result fidl::internal::WireCompleterBase<
    ::fidl_test_nullable::SimpleProtocol::Add>::Reply(::fidl::BufferSpan
                                                          _buffer,
                                                      int32_t sum) {
  ::fidl::WireResponse<::fidl_test_nullable::SimpleProtocol::Add> _response{
      sum};
  ::fidl::WireResponse<::fidl_test_nullable::SimpleProtocol::Add>::
      UnownedEncodedMessage _response_message(_buffer.data, _buffer.capacity,
                                              &_response);
  return CompleterBase::SendReply(&_response_message.GetOutgoingMessage());
}
#endif  // __Fuchsia__

void ::fidl::WireRequest<
    ::fidl_test_nullable::SimpleProtocol::Add>::_InitHeader() {
  fidl_init_txn_header(&_hdr, 0,
                       ::fidl_test_nullable::kSimpleProtocol_Add_Ordinal);
}

void ::fidl::WireResponse<
    ::fidl_test_nullable::SimpleProtocol::Add>::_InitHeader() {
  fidl_init_txn_header(&_hdr, 0,
                       ::fidl_test_nullable::kSimpleProtocol_Add_Ordinal);
}

#ifdef __Fuchsia__

#endif  // __Fuchsia__
