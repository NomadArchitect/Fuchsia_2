// WARNING: This file is machine generated by fidlgen.

#pragma once

#include <lib/fidl/llcpp/array.h>
#include <lib/fidl/llcpp/coding.h>
#include <lib/fidl/llcpp/envelope.h>
#include <lib/fidl/llcpp/message.h>
#include <lib/fidl/llcpp/message_storage.h>
#include <lib/fidl/llcpp/object_view.h>
#include <lib/fidl/llcpp/string_view.h>
#include <lib/fidl/llcpp/traits.h>
#include <lib/fidl/llcpp/wire_types.h>
#include <lib/stdcompat/optional.h>

#include <cinttypes>
#ifdef __Fuchsia__

#endif  // __Fuchsia__

#include <fidl/dependent/cpp/wire_types.h>
#include <fidl/fidl.test.structdefaultvalueenumlibraryreference/cpp/markers.h>

namespace fidl_test_structdefaultvalueenumlibraryreference {
namespace wire {
struct Foo;

extern "C" const fidl_type_t
    fidl_test_structdefaultvalueenumlibraryreference_FooTable;

struct Foo {
  static constexpr const fidl_type_t* Type =
      &fidl_test_structdefaultvalueenumlibraryreference_FooTable;
  static constexpr uint32_t MaxNumHandles = 0;
  static constexpr uint32_t PrimarySize = 4;
  [[maybe_unused]] static constexpr uint32_t MaxOutOfLine = 0;
  static constexpr bool HasPointer = false;

  ::dependent::wire::MyEnum field = {};

  class UnownedEncodedMessage;
  class OwnedEncodedMessage;
  class DecodedMessage;
};

class Foo::UnownedEncodedMessage final {
 public:
  UnownedEncodedMessage(uint8_t* backing_buffer, uint32_t backing_buffer_size,
                        Foo* value)
      : UnownedEncodedMessage(::fidl::internal::IovecBufferSize, backing_buffer,
                              backing_buffer_size, value) {}
  UnownedEncodedMessage(uint32_t iovec_capacity, uint8_t* backing_buffer,
                        uint32_t backing_buffer_size, Foo* value)
      : message_(::fidl::OutgoingMessage::ConstructorArgs{
            .iovecs = iovecs_,
            .iovec_capacity = iovec_capacity,
            .backing_buffer = backing_buffer,
            .backing_buffer_capacity = backing_buffer_size,
        }) {
    ZX_ASSERT(iovec_capacity <= std::size(iovecs_));
    message_.Encode<Foo>(value);
  }
  UnownedEncodedMessage(const UnownedEncodedMessage&) = delete;
  UnownedEncodedMessage(UnownedEncodedMessage&&) = delete;
  UnownedEncodedMessage* operator=(const UnownedEncodedMessage&) = delete;
  UnownedEncodedMessage* operator=(UnownedEncodedMessage&&) = delete;

  zx_status_t status() const { return message_.status(); }
#ifdef __Fuchsia__
  const char* status_string() const { return message_.status_string(); }
#endif  // __Fuchsia__
  bool ok() const { return message_.status() == ZX_OK; }
  std::string FormatDescription() const { return message_.FormatDescription(); }
  const char* lossy_description() const { return message_.lossy_description(); }
  const ::fidl::Result& error() const { return message_.error(); }

  ::fidl::OutgoingMessage& GetOutgoingMessage() { return message_; }

 private:
  ::fidl::internal::IovecBuffer iovecs_;
  ::fidl::OutgoingMessage message_;
};

class Foo::OwnedEncodedMessage final {
 public:
  explicit OwnedEncodedMessage(Foo* value)
      : message_(1u, backing_buffer_.data(),
                 static_cast<uint32_t>(backing_buffer_.size()), value) {}
  // Internal constructor.
  explicit OwnedEncodedMessage(
      ::fidl::internal::AllowUnownedInputRef allow_unowned, Foo* value)
      : message_(::fidl::internal::IovecBufferSize, backing_buffer_.data(),
                 static_cast<uint32_t>(backing_buffer_.size()), value) {}
  OwnedEncodedMessage(const OwnedEncodedMessage&) = delete;
  OwnedEncodedMessage(OwnedEncodedMessage&&) = delete;
  OwnedEncodedMessage* operator=(const OwnedEncodedMessage&) = delete;
  OwnedEncodedMessage* operator=(OwnedEncodedMessage&&) = delete;

  zx_status_t status() const { return message_.status(); }
#ifdef __Fuchsia__
  const char* status_string() const { return message_.status_string(); }
#endif  // __Fuchsia__
  bool ok() const { return message_.ok(); }
  std::string FormatDescription() const { return message_.FormatDescription(); }
  const char* lossy_description() const { return message_.lossy_description(); }
  const ::fidl::Result& error() const { return message_.error(); }

  ::fidl::OutgoingMessage& GetOutgoingMessage() {
    return message_.GetOutgoingMessage();
  }

 private:
  ::fidl::internal::InlineMessageBuffer<8> backing_buffer_;
  UnownedEncodedMessage message_;
};

class Foo::DecodedMessage final
    : public ::fidl::internal::DecodedMessageBase<Foo> {
 public:
  using DecodedMessageBase<Foo>::DecodedMessageBase;

  DecodedMessage(
      uint8_t* bytes, uint32_t byte_actual, zx_handle_t* handles = nullptr,
      fidl_transport_type transport_type = FIDL_TRANSPORT_TYPE_INVALID,
      void* handle_metadata = nullptr, uint32_t handle_actual = 0)
      : DecodedMessageBase(
            ::fidl::internal::kLLCPPEncodedWireFormatVersion,
            ::fidl::IncomingMessage(
                bytes, byte_actual, handles, transport_type, handle_metadata,
                handle_actual,
                ::fidl::IncomingMessage::kSkipMessageHeaderValidation)) {}

  // Internal constructor for specifying a specific wire format version.
  DecodedMessage(
      ::fidl::internal::WireFormatVersion wire_format_version, uint8_t* bytes,
      uint32_t byte_actual, zx_handle_t* handles = nullptr,
      fidl_transport_type transport_type = FIDL_TRANSPORT_TYPE_INVALID,
      void* handle_metadata = nullptr, uint32_t handle_actual = 0)
      : DecodedMessageBase(
            wire_format_version,
            ::fidl::IncomingMessage(
                bytes, byte_actual, handles, transport_type, handle_metadata,
                handle_actual,
                ::fidl::IncomingMessage::kSkipMessageHeaderValidation)) {}

  DecodedMessage(const fidl_incoming_msg_t* c_msg)
      : DecodedMessage(reinterpret_cast<uint8_t*>(c_msg->bytes),
                       c_msg->num_bytes, c_msg->handles, c_msg->transport_type,
                       c_msg->handle_metadata, c_msg->num_handles) {}

  // Internal constructor for specifying a specific wire format version.
  DecodedMessage(::fidl::internal::WireFormatVersion wire_format_version,
                 const fidl_incoming_msg_t* c_msg)
      : DecodedMessage(wire_format_version,
                       reinterpret_cast<uint8_t*>(c_msg->bytes),
                       c_msg->num_bytes, c_msg->handles, c_msg->transport_type,
                       c_msg->handle_metadata, c_msg->num_handles) {}

  Foo* PrimaryObject() {
    ZX_DEBUG_ASSERT(ok());
    return reinterpret_cast<Foo*>(bytes());
  }

  // Release the ownership of the decoded message. That means that the handles
  // won't be closed When the object is destroyed. After calling this method,
  // the |DecodedMessage| object should not be used anymore.
  void ReleasePrimaryObject() { ResetBytes(); }
};

}  // namespace wire
}  // namespace fidl_test_structdefaultvalueenumlibraryreference
namespace fidl {

template <>
struct IsFidlType<::fidl_test_structdefaultvalueenumlibraryreference::wire::Foo>
    : public std::true_type {};
template <>
struct IsStruct<::fidl_test_structdefaultvalueenumlibraryreference::wire::Foo>
    : public std::true_type {};
static_assert(std::is_standard_layout_v<
              ::fidl_test_structdefaultvalueenumlibraryreference::wire::Foo>);
static_assert(
    offsetof(::fidl_test_structdefaultvalueenumlibraryreference::wire::Foo,
             field) == 0);
static_assert(
    sizeof(::fidl_test_structdefaultvalueenumlibraryreference::wire::Foo) ==
    ::fidl_test_structdefaultvalueenumlibraryreference::wire::Foo::PrimarySize);

}  // namespace fidl
