// WARNING: This file is machine generated by fidlgen.

#pragma once

#include <fidl/test.requestflexibleenvelope/cpp/common_types.h>
#include <fidl/test.requestflexibleenvelope/cpp/markers.h>
#include <lib/fidl/cpp/coding_traits.h>
#include <lib/fidl/cpp/internal/codable_base.h>
#include <lib/fidl/cpp/unified_messaging.h>

#include <cinttypes>
#include <string>

#ifdef __Fuchsia__

#include <lib/zx/channel.h>

#endif  // __Fuchsia__

namespace test_requestflexibleenvelope {
class ProtocolRequestStrictResponseFlexibleRequest;

class ProtocolRequestFlexibleResponseStrictTopResponse;

class ProtocolRequestStrictResponseFlexibleTopResponse;

class ProtocolRequestFlexibleResponseStrictRequest;

class StrictFoo;

class FlexibleFoo;

extern "C" const fidl_type_t test_requestflexibleenvelope_StrictFooTable;

class StrictFoo final {
 public:
  // TODO: share union tag types between wire & natural.
  enum class Tag : fidl_union_tag_t {
    kS = 1,  // 0x1
    kI = 2,  // 0x2
  };

 private:
  using Storage = cpp17::variant<cpp17::monostate, ::std::string, int32_t>;
  std::shared_ptr<Storage> storage_;
  std::shared_ptr<Storage> CloneStorage() const;
  friend struct ::fidl::internal::NaturalUnionCodingTraits<
      ::test_requestflexibleenvelope::StrictFoo>;
  static constexpr std::array<std::optional<::fidl::HandleInformation>, 3>
      Members = {std::nullopt, std::nullopt, std::nullopt};

  explicit StrictFoo(std::shared_ptr<Storage> storage)
      : storage_(std::move(storage)) {}

  static constexpr size_t TagToIndex(
      ::test_requestflexibleenvelope::StrictFoo::Tag tag) {
    switch (tag) {
      case ::test_requestflexibleenvelope::StrictFoo::Tag::kS:
        return 1;
      case ::test_requestflexibleenvelope::StrictFoo::Tag::kI:
        return 2;
    }
  }

  static constexpr ::test_requestflexibleenvelope::StrictFoo::Tag IndexToTag(
      size_t index) {
    switch (index) {
      case 1:
        return ::test_requestflexibleenvelope::StrictFoo::Tag::kS;
      case 2:
        return ::test_requestflexibleenvelope::StrictFoo::Tag::kI;
      // TODO: what's the right thing to do here?
      default:
        return ::test_requestflexibleenvelope::StrictFoo::Tag::kS;
    }
  }

 public:
  // Create an unknown value of this union.
  StrictFoo() : storage_(std::make_shared<Storage>()) {}

  StrictFoo(StrictFoo&&) noexcept = default;
  StrictFoo& operator=(StrictFoo&&) noexcept = default;
  StrictFoo(const StrictFoo& other) noexcept
      : StrictFoo(other.CloneStorage()) {}
  StrictFoo& operator=(const StrictFoo& other) noexcept {
    storage_ = other.CloneStorage();
    return *this;
  }

  constexpr ::test_requestflexibleenvelope::StrictFoo::Tag Which() const {
    return StrictFoo::IndexToTag(storage_->index());
  }
  static StrictFoo WithS(::std::string val) {
    return StrictFoo(std::make_shared<Storage>(
        std::in_place_index_t<TagToIndex(
            ::test_requestflexibleenvelope::StrictFoo::Tag::kS)>{},
        std::move(val)));
  }

  const ::fidl::internal::UnionMemberView<1, Storage> s() const {
    return ::fidl::internal::UnionMemberView<1, Storage>(storage_);
  }
  ::fidl::internal::UnionMemberView<1, Storage> s() {
    return ::fidl::internal::UnionMemberView<1, Storage>(storage_);
  }
  static StrictFoo WithI(int32_t val) {
    return StrictFoo(std::make_shared<Storage>(
        std::in_place_index_t<TagToIndex(
            ::test_requestflexibleenvelope::StrictFoo::Tag::kI)>{},
        std::move(val)));
  }

  const ::fidl::internal::UnionMemberView<2, Storage> i() const {
    return ::fidl::internal::UnionMemberView<2, Storage>(storage_);
  }
  ::fidl::internal::UnionMemberView<2, Storage> i() {
    return ::fidl::internal::UnionMemberView<2, Storage>(storage_);
  }
};

extern "C" const fidl_type_t
    test_requestflexibleenvelope_ProtocolRequestStrictResponseFlexibleRequestTable;

class ProtocolRequestStrictResponseFlexibleRequest final
    : public ::fidl::internal::CodableBase<
          ProtocolRequestStrictResponseFlexibleRequest> {
 private:
  friend ::fidl::internal::CodableBase<
      ProtocolRequestStrictResponseFlexibleRequest>;
  friend ::fidl::CodingTraits<ProtocolRequestStrictResponseFlexibleRequest>;
  ProtocolRequestStrictResponseFlexibleRequest(::fidl::Decoder& decoder);
  template <typename Payload>
  friend auto ::fidl::internal::EncodeTransactionalMessageWithoutValidating(
      ::fidl::Encoder& encoder, Payload&& payload)
      -> ::fidl::HLCPPOutgoingMessage;
  void EncodeWithoutValidating(::fidl::Encoder& encoder, size_t offset);

 public:
  struct Storage final {
    ::test_requestflexibleenvelope::StrictFoo s{};
  };

  ProtocolRequestStrictResponseFlexibleRequest(Storage storage) noexcept
      : storage_(std::move(storage)) {}
  ProtocolRequestStrictResponseFlexibleRequest(
      ::test_requestflexibleenvelope::StrictFoo s) noexcept
      : storage_({.s = std::move(s)}) {}
  ProtocolRequestStrictResponseFlexibleRequest()
      : ProtocolRequestStrictResponseFlexibleRequest(Storage{}) {}

  ProtocolRequestStrictResponseFlexibleRequest(
      ProtocolRequestStrictResponseFlexibleRequest&&) noexcept = default;
  ProtocolRequestStrictResponseFlexibleRequest& operator=(
      ProtocolRequestStrictResponseFlexibleRequest&&) noexcept = default;
  ProtocolRequestStrictResponseFlexibleRequest(
      const ProtocolRequestStrictResponseFlexibleRequest& other) noexcept
      : ProtocolRequestStrictResponseFlexibleRequest(other.CloneStorage()) {}
  ProtocolRequestStrictResponseFlexibleRequest& operator=(
      const ProtocolRequestStrictResponseFlexibleRequest& other) noexcept {
    storage_ = other.CloneStorage();
    return *this;
  }

  const ::test_requestflexibleenvelope::StrictFoo& s() const {
    return storage_.s;
  }

  ::test_requestflexibleenvelope::StrictFoo& s() { return storage_.s; }

 private:
  Storage storage_;
  Storage CloneStorage() const;
};

extern "C" const fidl_type_t
    test_requestflexibleenvelope_ProtocolRequestFlexibleResponseStrictTopResponseTable;

class ProtocolRequestFlexibleResponseStrictTopResponse final
    : public ::fidl::internal::CodableBase<
          ProtocolRequestFlexibleResponseStrictTopResponse> {
 private:
  friend ::fidl::internal::CodableBase<
      ProtocolRequestFlexibleResponseStrictTopResponse>;
  friend ::fidl::CodingTraits<ProtocolRequestFlexibleResponseStrictTopResponse>;
  ProtocolRequestFlexibleResponseStrictTopResponse(::fidl::Decoder& decoder);
  template <typename Payload>
  friend auto ::fidl::internal::EncodeTransactionalMessageWithoutValidating(
      ::fidl::Encoder& encoder, Payload&& payload)
      -> ::fidl::HLCPPOutgoingMessage;
  void EncodeWithoutValidating(::fidl::Encoder& encoder, size_t offset);

 public:
  struct Storage final {
    ::test_requestflexibleenvelope::StrictFoo f{};
  };

  ProtocolRequestFlexibleResponseStrictTopResponse(Storage storage) noexcept
      : storage_(std::move(storage)) {}
  ProtocolRequestFlexibleResponseStrictTopResponse(
      ::test_requestflexibleenvelope::StrictFoo f) noexcept
      : storage_({.f = std::move(f)}) {}
  ProtocolRequestFlexibleResponseStrictTopResponse()
      : ProtocolRequestFlexibleResponseStrictTopResponse(Storage{}) {}

  ProtocolRequestFlexibleResponseStrictTopResponse(
      ProtocolRequestFlexibleResponseStrictTopResponse&&) noexcept = default;
  ProtocolRequestFlexibleResponseStrictTopResponse& operator=(
      ProtocolRequestFlexibleResponseStrictTopResponse&&) noexcept = default;
  ProtocolRequestFlexibleResponseStrictTopResponse(
      const ProtocolRequestFlexibleResponseStrictTopResponse& other) noexcept
      : ProtocolRequestFlexibleResponseStrictTopResponse(other.CloneStorage()) {
  }
  ProtocolRequestFlexibleResponseStrictTopResponse& operator=(
      const ProtocolRequestFlexibleResponseStrictTopResponse& other) noexcept {
    storage_ = other.CloneStorage();
    return *this;
  }

  const ::test_requestflexibleenvelope::StrictFoo& f() const {
    return storage_.f;
  }

  ::test_requestflexibleenvelope::StrictFoo& f() { return storage_.f; }

 private:
  Storage storage_;
  Storage CloneStorage() const;
};

extern "C" const fidl_type_t test_requestflexibleenvelope_FlexibleFooTable;

class FlexibleFoo final {
 public:
  // TODO: share union tag types between wire & natural.
  enum class Tag : fidl_union_tag_t {
    kS = 1,  // 0x1
    kI = 2,  // 0x2
    kUnknown = ::std::numeric_limits<::fidl_union_tag_t>::max(),
  };

 private:
  using Storage = cpp17::variant<cpp17::monostate, ::std::string, int32_t>;
  std::shared_ptr<Storage> storage_;
  std::shared_ptr<Storage> CloneStorage() const;
  friend struct ::fidl::internal::NaturalUnionCodingTraits<
      ::test_requestflexibleenvelope::FlexibleFoo>;
  static constexpr std::array<std::optional<::fidl::HandleInformation>, 3>
      Members = {std::nullopt, std::nullopt, std::nullopt};

  explicit FlexibleFoo(std::shared_ptr<Storage> storage)
      : storage_(std::move(storage)) {}

  static constexpr size_t TagToIndex(
      ::test_requestflexibleenvelope::FlexibleFoo::Tag tag) {
    switch (tag) {
      case ::test_requestflexibleenvelope::FlexibleFoo::Tag::kS:
        return 1;
      case ::test_requestflexibleenvelope::FlexibleFoo::Tag::kI:
        return 2;
      case ::test_requestflexibleenvelope::FlexibleFoo::Tag::kUnknown:
        return 0;
    }
  }

  static constexpr ::test_requestflexibleenvelope::FlexibleFoo::Tag IndexToTag(
      size_t index) {
    switch (index) {
      case 1:
        return ::test_requestflexibleenvelope::FlexibleFoo::Tag::kS;
      case 2:
        return ::test_requestflexibleenvelope::FlexibleFoo::Tag::kI;
      default:
        return ::test_requestflexibleenvelope::FlexibleFoo::Tag::kUnknown;
    }
  }

 public:
  // Create an unknown value of this union.
  FlexibleFoo() : storage_(std::make_shared<Storage>()) {}

  FlexibleFoo(FlexibleFoo&&) noexcept = default;
  FlexibleFoo& operator=(FlexibleFoo&&) noexcept = default;
  FlexibleFoo(const FlexibleFoo& other) noexcept
      : FlexibleFoo(other.CloneStorage()) {}
  FlexibleFoo& operator=(const FlexibleFoo& other) noexcept {
    storage_ = other.CloneStorage();
    return *this;
  }

  constexpr ::test_requestflexibleenvelope::FlexibleFoo::Tag Which() const {
    return FlexibleFoo::IndexToTag(storage_->index());
  }
  static FlexibleFoo WithS(::std::string val) {
    return FlexibleFoo(std::make_shared<Storage>(
        std::in_place_index_t<TagToIndex(
            ::test_requestflexibleenvelope::FlexibleFoo::Tag::kS)>{},
        std::move(val)));
  }

  const ::fidl::internal::UnionMemberView<1, Storage> s() const {
    return ::fidl::internal::UnionMemberView<1, Storage>(storage_);
  }
  ::fidl::internal::UnionMemberView<1, Storage> s() {
    return ::fidl::internal::UnionMemberView<1, Storage>(storage_);
  }
  static FlexibleFoo WithI(int32_t val) {
    return FlexibleFoo(std::make_shared<Storage>(
        std::in_place_index_t<TagToIndex(
            ::test_requestflexibleenvelope::FlexibleFoo::Tag::kI)>{},
        std::move(val)));
  }

  const ::fidl::internal::UnionMemberView<2, Storage> i() const {
    return ::fidl::internal::UnionMemberView<2, Storage>(storage_);
  }
  ::fidl::internal::UnionMemberView<2, Storage> i() {
    return ::fidl::internal::UnionMemberView<2, Storage>(storage_);
  }
};

extern "C" const fidl_type_t
    test_requestflexibleenvelope_ProtocolRequestStrictResponseFlexibleTopResponseTable;

class ProtocolRequestStrictResponseFlexibleTopResponse final
    : public ::fidl::internal::CodableBase<
          ProtocolRequestStrictResponseFlexibleTopResponse> {
 private:
  friend ::fidl::internal::CodableBase<
      ProtocolRequestStrictResponseFlexibleTopResponse>;
  friend ::fidl::CodingTraits<ProtocolRequestStrictResponseFlexibleTopResponse>;
  ProtocolRequestStrictResponseFlexibleTopResponse(::fidl::Decoder& decoder);
  template <typename Payload>
  friend auto ::fidl::internal::EncodeTransactionalMessageWithoutValidating(
      ::fidl::Encoder& encoder, Payload&& payload)
      -> ::fidl::HLCPPOutgoingMessage;
  void EncodeWithoutValidating(::fidl::Encoder& encoder, size_t offset);

 public:
  struct Storage final {
    ::test_requestflexibleenvelope::FlexibleFoo f{};
  };

  ProtocolRequestStrictResponseFlexibleTopResponse(Storage storage) noexcept
      : storage_(std::move(storage)) {}
  ProtocolRequestStrictResponseFlexibleTopResponse(
      ::test_requestflexibleenvelope::FlexibleFoo f) noexcept
      : storage_({.f = std::move(f)}) {}
  ProtocolRequestStrictResponseFlexibleTopResponse()
      : ProtocolRequestStrictResponseFlexibleTopResponse(Storage{}) {}

  ProtocolRequestStrictResponseFlexibleTopResponse(
      ProtocolRequestStrictResponseFlexibleTopResponse&&) noexcept = default;
  ProtocolRequestStrictResponseFlexibleTopResponse& operator=(
      ProtocolRequestStrictResponseFlexibleTopResponse&&) noexcept = default;
  ProtocolRequestStrictResponseFlexibleTopResponse(
      const ProtocolRequestStrictResponseFlexibleTopResponse& other) noexcept
      : ProtocolRequestStrictResponseFlexibleTopResponse(other.CloneStorage()) {
  }
  ProtocolRequestStrictResponseFlexibleTopResponse& operator=(
      const ProtocolRequestStrictResponseFlexibleTopResponse& other) noexcept {
    storage_ = other.CloneStorage();
    return *this;
  }

  const ::test_requestflexibleenvelope::FlexibleFoo& f() const {
    return storage_.f;
  }

  ::test_requestflexibleenvelope::FlexibleFoo& f() { return storage_.f; }

 private:
  Storage storage_;
  Storage CloneStorage() const;
};

extern "C" const fidl_type_t
    test_requestflexibleenvelope_ProtocolRequestFlexibleResponseStrictRequestTable;

class ProtocolRequestFlexibleResponseStrictRequest final
    : public ::fidl::internal::CodableBase<
          ProtocolRequestFlexibleResponseStrictRequest> {
 private:
  friend ::fidl::internal::CodableBase<
      ProtocolRequestFlexibleResponseStrictRequest>;
  friend ::fidl::CodingTraits<ProtocolRequestFlexibleResponseStrictRequest>;
  ProtocolRequestFlexibleResponseStrictRequest(::fidl::Decoder& decoder);
  template <typename Payload>
  friend auto ::fidl::internal::EncodeTransactionalMessageWithoutValidating(
      ::fidl::Encoder& encoder, Payload&& payload)
      -> ::fidl::HLCPPOutgoingMessage;
  void EncodeWithoutValidating(::fidl::Encoder& encoder, size_t offset);

 public:
  struct Storage final {
    ::test_requestflexibleenvelope::FlexibleFoo s{};
  };

  ProtocolRequestFlexibleResponseStrictRequest(Storage storage) noexcept
      : storage_(std::move(storage)) {}
  ProtocolRequestFlexibleResponseStrictRequest(
      ::test_requestflexibleenvelope::FlexibleFoo s) noexcept
      : storage_({.s = std::move(s)}) {}
  ProtocolRequestFlexibleResponseStrictRequest()
      : ProtocolRequestFlexibleResponseStrictRequest(Storage{}) {}

  ProtocolRequestFlexibleResponseStrictRequest(
      ProtocolRequestFlexibleResponseStrictRequest&&) noexcept = default;
  ProtocolRequestFlexibleResponseStrictRequest& operator=(
      ProtocolRequestFlexibleResponseStrictRequest&&) noexcept = default;
  ProtocolRequestFlexibleResponseStrictRequest(
      const ProtocolRequestFlexibleResponseStrictRequest& other) noexcept
      : ProtocolRequestFlexibleResponseStrictRequest(other.CloneStorage()) {}
  ProtocolRequestFlexibleResponseStrictRequest& operator=(
      const ProtocolRequestFlexibleResponseStrictRequest& other) noexcept {
    storage_ = other.CloneStorage();
    return *this;
  }

  const ::test_requestflexibleenvelope::FlexibleFoo& s() const {
    return storage_.s;
  }

  ::test_requestflexibleenvelope::FlexibleFoo& s() { return storage_.s; }

 private:
  Storage storage_;
  Storage CloneStorage() const;
};

}  // namespace test_requestflexibleenvelope
namespace fidl {

#ifdef __Fuchsia__
extern "C" const fidl_type_t
    test_requestflexibleenvelope_ProtocolRequestStrictResponseFlexibleRequestTable;

template <>
struct IsFidlType<::test_requestflexibleenvelope::
                      ProtocolRequestStrictResponseFlexibleRequest>
    : public std::true_type {};

template <>
struct ::fidl::internal::TypeTraits<
    ::test_requestflexibleenvelope::
        ProtocolRequestStrictResponseFlexibleRequest>
    final {
 public:
  static constexpr const fidl_type_t* kCodingTable =
      &test_requestflexibleenvelope_ProtocolRequestStrictResponseFlexibleRequestTable;
};

template <>
struct CodingTraits<::test_requestflexibleenvelope::
                        ProtocolRequestStrictResponseFlexibleRequest> {
  static constexpr size_t inline_size_v1_no_ee = 24;
  static constexpr size_t inline_size_v2 = 16;

  template <class EncoderImpl>
  static void Encode(
      EncoderImpl* encoder,
      ::test_requestflexibleenvelope::
          ProtocolRequestStrictResponseFlexibleRequest* value,
      size_t offset,
      cpp17::optional<HandleInformation> maybe_handle_info = cpp17::nullopt) {
    [[maybe_unused]] uint32_t field_offset;
    field_offset =
        encoder->wire_format() == ::fidl::internal::WireFormatVersion::kV1 ? 0
                                                                           : 0;
    ::fidl::Encode(encoder, &value->storage_.s, offset + field_offset);
  }

  template <typename DecoderImpl>
  static void Decode(DecoderImpl* decoder,
                     ::test_requestflexibleenvelope::
                         ProtocolRequestStrictResponseFlexibleRequest* value,
                     size_t offset) {
    ::fidl::Decode(decoder, &value->storage_.s, offset + 0);
  }
};
#endif  // __Fuchsia__

#ifdef __Fuchsia__
extern "C" const fidl_type_t
    test_requestflexibleenvelope_ProtocolRequestFlexibleResponseStrictTopResponseTable;

template <>
struct IsFidlType<::test_requestflexibleenvelope::
                      ProtocolRequestFlexibleResponseStrictTopResponse>
    : public std::true_type {};

template <>
struct ::fidl::internal::TypeTraits<
    ::test_requestflexibleenvelope::
        ProtocolRequestFlexibleResponseStrictTopResponse>
    final {
 public:
  static constexpr const fidl_type_t* kCodingTable =
      &test_requestflexibleenvelope_ProtocolRequestFlexibleResponseStrictTopResponseTable;
};

template <>
struct CodingTraits<::test_requestflexibleenvelope::
                        ProtocolRequestFlexibleResponseStrictTopResponse> {
  static constexpr size_t inline_size_v1_no_ee = 24;
  static constexpr size_t inline_size_v2 = 16;

  template <class EncoderImpl>
  static void Encode(
      EncoderImpl* encoder,
      ::test_requestflexibleenvelope::
          ProtocolRequestFlexibleResponseStrictTopResponse* value,
      size_t offset,
      cpp17::optional<HandleInformation> maybe_handle_info = cpp17::nullopt) {
    [[maybe_unused]] uint32_t field_offset;
    field_offset =
        encoder->wire_format() == ::fidl::internal::WireFormatVersion::kV1 ? 0
                                                                           : 0;
    ::fidl::Encode(encoder, &value->storage_.f, offset + field_offset);
  }

  template <typename DecoderImpl>
  static void Decode(
      DecoderImpl* decoder,
      ::test_requestflexibleenvelope::
          ProtocolRequestFlexibleResponseStrictTopResponse* value,
      size_t offset) {
    ::fidl::Decode(decoder, &value->storage_.f, offset + 0);
  }
};
#endif  // __Fuchsia__

#ifdef __Fuchsia__
extern "C" const fidl_type_t
    test_requestflexibleenvelope_ProtocolRequestStrictResponseFlexibleTopResponseTable;

template <>
struct IsFidlType<::test_requestflexibleenvelope::
                      ProtocolRequestStrictResponseFlexibleTopResponse>
    : public std::true_type {};

template <>
struct ::fidl::internal::TypeTraits<
    ::test_requestflexibleenvelope::
        ProtocolRequestStrictResponseFlexibleTopResponse>
    final {
 public:
  static constexpr const fidl_type_t* kCodingTable =
      &test_requestflexibleenvelope_ProtocolRequestStrictResponseFlexibleTopResponseTable;
};

template <>
struct CodingTraits<::test_requestflexibleenvelope::
                        ProtocolRequestStrictResponseFlexibleTopResponse> {
  static constexpr size_t inline_size_v1_no_ee = 24;
  static constexpr size_t inline_size_v2 = 16;

  template <class EncoderImpl>
  static void Encode(
      EncoderImpl* encoder,
      ::test_requestflexibleenvelope::
          ProtocolRequestStrictResponseFlexibleTopResponse* value,
      size_t offset,
      cpp17::optional<HandleInformation> maybe_handle_info = cpp17::nullopt) {
    [[maybe_unused]] uint32_t field_offset;
    field_offset =
        encoder->wire_format() == ::fidl::internal::WireFormatVersion::kV1 ? 0
                                                                           : 0;
    ::fidl::Encode(encoder, &value->storage_.f, offset + field_offset);
  }

  template <typename DecoderImpl>
  static void Decode(
      DecoderImpl* decoder,
      ::test_requestflexibleenvelope::
          ProtocolRequestStrictResponseFlexibleTopResponse* value,
      size_t offset) {
    ::fidl::Decode(decoder, &value->storage_.f, offset + 0);
  }
};
#endif  // __Fuchsia__

#ifdef __Fuchsia__
extern "C" const fidl_type_t
    test_requestflexibleenvelope_ProtocolRequestFlexibleResponseStrictRequestTable;

template <>
struct IsFidlType<::test_requestflexibleenvelope::
                      ProtocolRequestFlexibleResponseStrictRequest>
    : public std::true_type {};

template <>
struct ::fidl::internal::TypeTraits<
    ::test_requestflexibleenvelope::
        ProtocolRequestFlexibleResponseStrictRequest>
    final {
 public:
  static constexpr const fidl_type_t* kCodingTable =
      &test_requestflexibleenvelope_ProtocolRequestFlexibleResponseStrictRequestTable;
};

template <>
struct CodingTraits<::test_requestflexibleenvelope::
                        ProtocolRequestFlexibleResponseStrictRequest> {
  static constexpr size_t inline_size_v1_no_ee = 24;
  static constexpr size_t inline_size_v2 = 16;

  template <class EncoderImpl>
  static void Encode(
      EncoderImpl* encoder,
      ::test_requestflexibleenvelope::
          ProtocolRequestFlexibleResponseStrictRequest* value,
      size_t offset,
      cpp17::optional<HandleInformation> maybe_handle_info = cpp17::nullopt) {
    [[maybe_unused]] uint32_t field_offset;
    field_offset =
        encoder->wire_format() == ::fidl::internal::WireFormatVersion::kV1 ? 0
                                                                           : 0;
    ::fidl::Encode(encoder, &value->storage_.s, offset + field_offset);
  }

  template <typename DecoderImpl>
  static void Decode(DecoderImpl* decoder,
                     ::test_requestflexibleenvelope::
                         ProtocolRequestFlexibleResponseStrictRequest* value,
                     size_t offset) {
    ::fidl::Decode(decoder, &value->storage_.s, offset + 0);
  }
};
#endif  // __Fuchsia__

template <>
struct IsFidlType<::test_requestflexibleenvelope::StrictFoo>
    : public std::true_type {};

template <>
struct CodingTraits<::test_requestflexibleenvelope::StrictFoo> final
    : public ::fidl::internal::NaturalUnionCodingTraits<
          ::test_requestflexibleenvelope::StrictFoo> {};

template <>
struct IsFidlType<::test_requestflexibleenvelope::FlexibleFoo>
    : public std::true_type {};

template <>
struct CodingTraits<::test_requestflexibleenvelope::FlexibleFoo> final
    : public ::fidl::internal::NaturalUnionCodingTraits<
          ::test_requestflexibleenvelope::FlexibleFoo> {};

}  // namespace fidl
