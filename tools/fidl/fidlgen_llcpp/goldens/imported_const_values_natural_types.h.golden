// WARNING: This file is machine generated by fidlgen.

#pragma once

#include <fidl/test.importedconstvalues/cpp/common_types.h>
#include <fidl/test.importedconstvalues/cpp/markers.h>
#include <lib/fidl/cpp/coding_traits.h>
#include <lib/fidl/cpp/internal/codable_base.h>
#include <lib/fidl/cpp/unified_messaging.h>

#include <cinttypes>
#include <string>

#ifdef __Fuchsia__

#endif  // __Fuchsia__

#include <fidl/test.dependent/cpp/natural_types.h>

namespace test_importedconstvalues {
class MyStruct;

extern "C" const fidl_type_t test_importedconstvalues_MyStructTable;

class MyStruct final : public ::fidl::internal::CodableBase<MyStruct> {
 private:
  friend ::fidl::internal::CodableBase<MyStruct>;
  friend ::fidl::CodingTraits<MyStruct>;
  MyStruct(::fidl::Decoder& decoder);
  template <typename Payload>
  friend auto ::fidl::internal::EncodeTransactionalMessageWithoutValidating(
      ::fidl::Encoder& encoder, Payload&& payload)
      -> ::fidl::HLCPPOutgoingMessage;
  void EncodeWithoutValidating(::fidl::Encoder& encoder, size_t offset);

 public:
  struct Storage final {
    uint8_t __reserved = 0u;
  };

  MyStruct(Storage storage) noexcept : storage_(std::move(storage)) {}
  MyStruct(uint8_t __reserved) noexcept
      : storage_({.__reserved = std::move(__reserved)}) {}
  MyStruct() : MyStruct(Storage{}) {}

  MyStruct(MyStruct&&) noexcept = default;
  MyStruct& operator=(MyStruct&&) noexcept = default;
  MyStruct(const MyStruct& other) noexcept : MyStruct(other.CloneStorage()) {}
  MyStruct& operator=(const MyStruct& other) noexcept {
    storage_ = other.CloneStorage();
    return *this;
  }

  uint8_t __reserved() const { return storage_.__reserved; }

  uint8_t& __reserved() { return storage_.__reserved; }

 private:
  Storage storage_;
  Storage CloneStorage() const;
};

}  // namespace test_importedconstvalues
namespace fidl {

#ifdef __Fuchsia__
extern "C" const fidl_type_t test_importedconstvalues_MyStructTable;

template <>
struct IsFidlType<::test_importedconstvalues::MyStruct>
    : public std::true_type {};

template <>
struct ::fidl::internal::TypeTraits<::test_importedconstvalues::MyStruct>
    final {
 public:
  static constexpr const fidl_type_t* kCodingTable =
      &test_importedconstvalues_MyStructTable;
};

template <>
struct CodingTraits<::test_importedconstvalues::MyStruct> {
  static constexpr size_t inline_size_v1_no_ee = 1;
  static constexpr size_t inline_size_v2 = 1;

  template <class EncoderImpl>
  static void Encode(
      EncoderImpl* encoder, ::test_importedconstvalues::MyStruct* value,
      size_t offset,
      cpp17::optional<HandleInformation> maybe_handle_info = cpp17::nullopt) {
    [[maybe_unused]] uint32_t field_offset;
    field_offset =
        encoder->wire_format() == ::fidl::internal::WireFormatVersion::kV1 ? 0
                                                                           : 0;
    ::fidl::Encode(encoder, &value->storage_.__reserved, offset + field_offset);
  }

  template <typename DecoderImpl>
  static void Decode(DecoderImpl* decoder,
                     ::test_importedconstvalues::MyStruct* value,
                     size_t offset) {
    ::fidl::Decode(decoder, &value->storage_.__reserved, offset + 0);
  }
};
#endif  // __Fuchsia__

}  // namespace fidl
