// WARNING: This file is machine generated by fidlgen.

#pragma once

#include <fidl/test.error/cpp/common_types.h>
#include <fidl/test.error/cpp/markers.h>
#include <lib/fidl/cpp/coding_traits.h>
#include <lib/fidl/cpp/internal/codable_base.h>
#include <lib/fidl/cpp/unified_messaging.h>

#include <cinttypes>
#include <string>

#ifdef __Fuchsia__

#include <lib/zx/channel.h>

#endif  // __Fuchsia__

namespace test_error {
class Example_foo_Response;

class ExampleFooTopResponse;

class ExampleFooRequest;

class Example_foo_Result;

extern "C" const fidl_type_t test_error_Example_foo_ResponseTable;

class Example_foo_Response final
    : public ::fidl::internal::CodableBase<Example_foo_Response> {
 private:
  struct Storage_;

 public:
  Example_foo_Response(Storage_ storage) noexcept
      : storage_(std::move(storage)) {}
  Example_foo_Response(int64_t y) noexcept : storage_({.y = std::move(y)}) {}
  Example_foo_Response() : Example_foo_Response(Storage_{}) {}

  Example_foo_Response(Example_foo_Response&&) noexcept = default;
  Example_foo_Response& operator=(Example_foo_Response&&) noexcept = default;
  Example_foo_Response(const Example_foo_Response& other) noexcept
      : Example_foo_Response(other.CloneStorage_()) {}
  Example_foo_Response& operator=(const Example_foo_Response& other) noexcept {
    storage_ = other.CloneStorage_();
    return *this;
  }

  int64_t y() const { return storage_.y; }

  int64_t& y() { return storage_.y; }

 private:
  friend ::fidl::internal::CodableBase<Example_foo_Response>;
  friend ::fidl::CodingTraits<Example_foo_Response>;
  Example_foo_Response(::fidl::Decoder& decoder);
  template <typename Payload>
  friend auto ::fidl::internal::EncodeTransactionalMessageWithoutValidating(
      ::fidl::Encoder& encoder, Payload&& payload)
      -> ::fidl::HLCPPOutgoingMessage;
  void EncodeWithoutValidating(::fidl::Encoder& encoder, size_t offset);

  struct Storage_ final {
    int64_t y{};
  };

  Storage_ storage_;
  Storage_ CloneStorage_() const;
};

extern "C" const fidl_type_t test_error_Example_foo_ResultTable;

class Example_foo_Result final {
 private:
  using Storage_ = cpp17::variant<cpp17::monostate,
                                  ::test_error::Example_foo_Response, uint32_t>;

 public:
  // TODO: share union tag types between wire & natural.
  enum class Tag : fidl_union_tag_t {
    kResponse = 1,  // 0x1
    kErr = 2,       // 0x2
  };

  // Create an unknown value of this union.
  Example_foo_Result() : storage_(std::make_shared<Storage_>()) {}

  Example_foo_Result(Example_foo_Result&&) noexcept = default;
  Example_foo_Result& operator=(Example_foo_Result&&) noexcept = default;
  Example_foo_Result(const Example_foo_Result& other) noexcept
      : Example_foo_Result(other.CloneStorage_()) {}
  Example_foo_Result& operator=(const Example_foo_Result& other) noexcept {
    storage_ = other.CloneStorage_();
    return *this;
  }

  constexpr ::test_error::Example_foo_Result::Tag Which() const {
    return Example_foo_Result::IndexToTag(storage_->index());
  }
  static Example_foo_Result WithResponse(
      ::test_error::Example_foo_Response val) {
    return Example_foo_Result(
        std::make_shared<Storage_>(std::in_place_index_t<1>{}, std::move(val)));
  }

  const ::fidl::internal::UnionMemberView<1, Storage_> response() const {
    return ::fidl::internal::UnionMemberView<1, Storage_>(storage_);
  }
  ::fidl::internal::UnionMemberView<1, Storage_> response() {
    return ::fidl::internal::UnionMemberView<1, Storage_>(storage_);
  }
  static Example_foo_Result WithErr(uint32_t val) {
    return Example_foo_Result(
        std::make_shared<Storage_>(std::in_place_index_t<2>{}, std::move(val)));
  }

  const ::fidl::internal::UnionMemberView<2, Storage_> err() const {
    return ::fidl::internal::UnionMemberView<2, Storage_>(storage_);
  }
  ::fidl::internal::UnionMemberView<2, Storage_> err() {
    return ::fidl::internal::UnionMemberView<2, Storage_>(storage_);
  }

 private:
  std::shared_ptr<Storage_> storage_;
  std::shared_ptr<Storage_> CloneStorage_() const;
  friend struct ::fidl::internal::NaturalUnionCodingTraits<
      ::test_error::Example_foo_Result>;
  static constexpr std::array<std::optional<::fidl::HandleInformation>, 3>
      Members = {std::nullopt, std::nullopt, std::nullopt};

  explicit Example_foo_Result(std::shared_ptr<Storage_> storage)
      : storage_(std::move(storage)) {}

  static constexpr size_t TagToIndex(
      ::test_error::Example_foo_Result::Tag tag) {
    switch (tag) {
      case ::test_error::Example_foo_Result::Tag::kResponse:
        return 1;
      case ::test_error::Example_foo_Result::Tag::kErr:
        return 2;
    }
  }

  static constexpr ::test_error::Example_foo_Result::Tag IndexToTag(
      size_t index) {
    switch (index) {
      case 1:
        return ::test_error::Example_foo_Result::Tag::kResponse;
      case 2:
        return ::test_error::Example_foo_Result::Tag::kErr;
      // TODO: what's the right thing to do here?
      default:
        return ::test_error::Example_foo_Result::Tag::kResponse;
    }
  }
};

extern "C" const fidl_type_t test_error_ExampleFooTopResponseTable;

class ExampleFooTopResponse final
    : public ::fidl::internal::CodableBase<ExampleFooTopResponse> {
 private:
  struct Storage_;

 public:
  ExampleFooTopResponse(Storage_ storage) noexcept
      : storage_(std::move(storage)) {}
  ExampleFooTopResponse(::test_error::Example_foo_Result result) noexcept
      : storage_({.result = std::move(result)}) {}
  ExampleFooTopResponse() : ExampleFooTopResponse(Storage_{}) {}

  ExampleFooTopResponse(ExampleFooTopResponse&&) noexcept = default;
  ExampleFooTopResponse& operator=(ExampleFooTopResponse&&) noexcept = default;
  ExampleFooTopResponse(const ExampleFooTopResponse& other) noexcept
      : ExampleFooTopResponse(other.CloneStorage_()) {}
  ExampleFooTopResponse& operator=(
      const ExampleFooTopResponse& other) noexcept {
    storage_ = other.CloneStorage_();
    return *this;
  }

  const ::test_error::Example_foo_Result& result() const {
    return storage_.result;
  }

  ::test_error::Example_foo_Result& result() { return storage_.result; }

 private:
  friend ::fidl::internal::CodableBase<ExampleFooTopResponse>;
  friend ::fidl::CodingTraits<ExampleFooTopResponse>;
  ExampleFooTopResponse(::fidl::Decoder& decoder);
  template <typename Payload>
  friend auto ::fidl::internal::EncodeTransactionalMessageWithoutValidating(
      ::fidl::Encoder& encoder, Payload&& payload)
      -> ::fidl::HLCPPOutgoingMessage;
  void EncodeWithoutValidating(::fidl::Encoder& encoder, size_t offset);

  struct Storage_ final {
    ::test_error::Example_foo_Result result{};
  };

  Storage_ storage_;
  Storage_ CloneStorage_() const;
};

extern "C" const fidl_type_t test_error_ExampleFooRequestTable;

class ExampleFooRequest final
    : public ::fidl::internal::CodableBase<ExampleFooRequest> {
 private:
  struct Storage_;

 public:
  ExampleFooRequest(Storage_ storage) noexcept : storage_(std::move(storage)) {}
  ExampleFooRequest(::std::string s) noexcept : storage_({.s = std::move(s)}) {}
  ExampleFooRequest() : ExampleFooRequest(Storage_{}) {}

  ExampleFooRequest(ExampleFooRequest&&) noexcept = default;
  ExampleFooRequest& operator=(ExampleFooRequest&&) noexcept = default;
  ExampleFooRequest(const ExampleFooRequest& other) noexcept
      : ExampleFooRequest(other.CloneStorage_()) {}
  ExampleFooRequest& operator=(const ExampleFooRequest& other) noexcept {
    storage_ = other.CloneStorage_();
    return *this;
  }

  const ::std::string& s() const { return storage_.s; }

  ::std::string& s() { return storage_.s; }

 private:
  friend ::fidl::internal::CodableBase<ExampleFooRequest>;
  friend ::fidl::CodingTraits<ExampleFooRequest>;
  ExampleFooRequest(::fidl::Decoder& decoder);
  template <typename Payload>
  friend auto ::fidl::internal::EncodeTransactionalMessageWithoutValidating(
      ::fidl::Encoder& encoder, Payload&& payload)
      -> ::fidl::HLCPPOutgoingMessage;
  void EncodeWithoutValidating(::fidl::Encoder& encoder, size_t offset);

  struct Storage_ final {
    ::std::string s{};
  };

  Storage_ storage_;
  Storage_ CloneStorage_() const;
};

}  // namespace test_error
namespace fidl {

#ifdef __Fuchsia__
extern "C" const fidl_type_t test_error_Example_foo_ResponseTable;

template <>
struct IsFidlType<::test_error::Example_foo_Response> : public std::true_type {
};

template <>
struct ::fidl::internal::TypeTraits<::test_error::Example_foo_Response> final {
 public:
  static constexpr const fidl_type_t* kCodingTable =
      &test_error_Example_foo_ResponseTable;
};

template <>
struct CodingTraits<::test_error::Example_foo_Response> {
  static constexpr size_t inline_size_v1_no_ee = 8;
  static constexpr size_t inline_size_v2 = 8;

  template <class EncoderImpl>
  static void Encode(
      EncoderImpl* encoder, ::test_error::Example_foo_Response* value,
      size_t offset,
      cpp17::optional<HandleInformation> maybe_handle_info = cpp17::nullopt) {
    [[maybe_unused]] uint32_t field_offset;
    field_offset =
        encoder->wire_format() == ::fidl::internal::WireFormatVersion::kV1 ? 0
                                                                           : 0;
    ::fidl::Encode(encoder, &value->storage_.y, offset + field_offset);
  }

  template <typename DecoderImpl>
  static void Decode(DecoderImpl* decoder,
                     ::test_error::Example_foo_Response* value, size_t offset) {
    ::fidl::Decode(decoder, &value->storage_.y, offset + 0);
  }
};
#endif  // __Fuchsia__

#ifdef __Fuchsia__
extern "C" const fidl_type_t test_error_ExampleFooTopResponseTable;

template <>
struct IsFidlType<::test_error::ExampleFooTopResponse> : public std::true_type {
};

template <>
struct ::fidl::internal::TypeTraits<::test_error::ExampleFooTopResponse> final {
 public:
  static constexpr const fidl_type_t* kCodingTable =
      &test_error_ExampleFooTopResponseTable;
};

template <>
struct CodingTraits<::test_error::ExampleFooTopResponse> {
  static constexpr size_t inline_size_v1_no_ee = 24;
  static constexpr size_t inline_size_v2 = 16;

  template <class EncoderImpl>
  static void Encode(
      EncoderImpl* encoder, ::test_error::ExampleFooTopResponse* value,
      size_t offset,
      cpp17::optional<HandleInformation> maybe_handle_info = cpp17::nullopt) {
    [[maybe_unused]] uint32_t field_offset;
    field_offset =
        encoder->wire_format() == ::fidl::internal::WireFormatVersion::kV1 ? 0
                                                                           : 0;
    ::fidl::Encode(encoder, &value->storage_.result, offset + field_offset);
  }

  template <typename DecoderImpl>
  static void Decode(DecoderImpl* decoder,
                     ::test_error::ExampleFooTopResponse* value,
                     size_t offset) {
    ::fidl::Decode(decoder, &value->storage_.result, offset + 0);
  }
};
#endif  // __Fuchsia__

#ifdef __Fuchsia__
extern "C" const fidl_type_t test_error_ExampleFooRequestTable;

template <>
struct IsFidlType<::test_error::ExampleFooRequest> : public std::true_type {};

template <>
struct ::fidl::internal::TypeTraits<::test_error::ExampleFooRequest> final {
 public:
  static constexpr const fidl_type_t* kCodingTable =
      &test_error_ExampleFooRequestTable;
};

template <>
struct CodingTraits<::test_error::ExampleFooRequest> {
  static constexpr size_t inline_size_v1_no_ee = 16;
  static constexpr size_t inline_size_v2 = 16;

  template <class EncoderImpl>
  static void Encode(
      EncoderImpl* encoder, ::test_error::ExampleFooRequest* value,
      size_t offset,
      cpp17::optional<HandleInformation> maybe_handle_info = cpp17::nullopt) {
    [[maybe_unused]] uint32_t field_offset;
    field_offset =
        encoder->wire_format() == ::fidl::internal::WireFormatVersion::kV1 ? 0
                                                                           : 0;
    ::fidl::Encode(encoder, &value->storage_.s, offset + field_offset);
  }

  template <typename DecoderImpl>
  static void Decode(DecoderImpl* decoder,
                     ::test_error::ExampleFooRequest* value, size_t offset) {
    ::fidl::Decode(decoder, &value->storage_.s, offset + 0);
  }
};
#endif  // __Fuchsia__

template <>
struct IsFidlType<::test_error::Example_foo_Result> : public std::true_type {};

template <>
struct CodingTraits<::test_error::Example_foo_Result> final
    : public ::fidl::internal::NaturalUnionCodingTraits<
          ::test_error::Example_foo_Result> {};

}  // namespace fidl
