// WARNING: This file is machine generated by fidlgen.

#include <fidl/test/protocolrequest/llcpp/fidl.h>

#include <memory>

namespace fidl_test_protocolrequest {

[[maybe_unused]] constexpr uint64_t kParent_GetChild_Ordinal =
    7929845654914578302lu;

extern "C" const fidl_type_t
    fidl_test_protocolrequest_ParentGetChildRequestTable;

extern "C" const fidl_type_t
    fidl_test_protocolrequest_ParentGetChildResponseTable;
[[maybe_unused]] constexpr uint64_t kParent_GetChildRequest_Ordinal =
    1819029190665166744lu;

extern "C" const fidl_type_t
    fidl_test_protocolrequest_ParentGetChildRequestRequestTable;

extern "C" const fidl_type_t
    fidl_test_protocolrequest_ParentGetChildRequestResponseTable;
[[maybe_unused]] constexpr uint64_t kParent_TakeChild_Ordinal =
    374110854839013230lu;

extern "C" const fidl_type_t
    fidl_test_protocolrequest_ParentTakeChildRequestTable;

extern "C" const fidl_type_t
    fidl_test_protocolrequest_ParentTakeChildResponseTable;
[[maybe_unused]] constexpr uint64_t kParent_TakeChildRequest_Ordinal =
    1574820689302890956lu;

extern "C" const fidl_type_t
    fidl_test_protocolrequest_ParentTakeChildRequestRequestTable;

extern "C" const fidl_type_t
    fidl_test_protocolrequest_ParentTakeChildRequestResponseTable;
#ifdef __Fuchsia__
::fidl_test_protocolrequest::Parent::ResultOf::GetChild::GetChild(
    ::fidl::UnownedClientEnd<::fidl_test_protocolrequest::Parent> _client) {
  ::fidl::OwnedEncodedMessage<
      ::fidl_test_protocolrequest::Parent::GetChildRequest>
      _request(zx_txid_t(0));
  _request.GetOutgoingMessage()
      .Call<::fidl_test_protocolrequest::Parent::GetChildResponse>(
          _client, bytes_.data(), bytes_.size());
  status_ = _request.status();
  error_ = _request.error();
}

::fidl_test_protocolrequest::Parent::ResultOf::GetChild::GetChild(
    ::fidl::UnownedClientEnd<::fidl_test_protocolrequest::Parent> _client,
    zx_time_t _deadline) {
  ::fidl::OwnedEncodedMessage<
      ::fidl_test_protocolrequest::Parent::GetChildRequest>
      _request(zx_txid_t(0));
  _request.GetOutgoingMessage()
      .Call<::fidl_test_protocolrequest::Parent::GetChildResponse>(
          _client, bytes_.data(), bytes_.size(), _deadline);
  status_ = _request.status();
  error_ = _request.error();
}
#endif

#ifdef __Fuchsia__
::fidl_test_protocolrequest::Parent::UnownedResultOf::GetChild::GetChild(
    ::fidl::UnownedClientEnd<::fidl_test_protocolrequest::Parent> _client,
    uint8_t* _response_bytes, uint32_t _response_byte_capacity)
    : bytes_(_response_bytes) {
  ::fidl::OwnedEncodedMessage<
      ::fidl_test_protocolrequest::Parent::GetChildRequest>
      _request(zx_txid_t(0));
  _request.GetOutgoingMessage()
      .Call<::fidl_test_protocolrequest::Parent::GetChildResponse>(
          _client, _response_bytes, _response_byte_capacity);
  status_ = _request.status();
  error_ = _request.error();
}
#endif

#ifdef __Fuchsia__
::fidl_test_protocolrequest::Parent::ResultOf::GetChildRequest::GetChildRequest(
    ::fidl::UnownedClientEnd<::fidl_test_protocolrequest::Parent> _client) {
  ::fidl::OwnedEncodedMessage<
      ::fidl_test_protocolrequest::Parent::GetChildRequestRequest>
      _request(zx_txid_t(0));
  _request.GetOutgoingMessage()
      .Call<::fidl_test_protocolrequest::Parent::GetChildRequestResponse>(
          _client, bytes_.data(), bytes_.size());
  status_ = _request.status();
  error_ = _request.error();
}

::fidl_test_protocolrequest::Parent::ResultOf::GetChildRequest::GetChildRequest(
    ::fidl::UnownedClientEnd<::fidl_test_protocolrequest::Parent> _client,
    zx_time_t _deadline) {
  ::fidl::OwnedEncodedMessage<
      ::fidl_test_protocolrequest::Parent::GetChildRequestRequest>
      _request(zx_txid_t(0));
  _request.GetOutgoingMessage()
      .Call<::fidl_test_protocolrequest::Parent::GetChildRequestResponse>(
          _client, bytes_.data(), bytes_.size(), _deadline);
  status_ = _request.status();
  error_ = _request.error();
}
#endif

#ifdef __Fuchsia__
::fidl_test_protocolrequest::Parent::UnownedResultOf::GetChildRequest::
    GetChildRequest(
        ::fidl::UnownedClientEnd<::fidl_test_protocolrequest::Parent> _client,
        uint8_t* _response_bytes, uint32_t _response_byte_capacity)
    : bytes_(_response_bytes) {
  ::fidl::OwnedEncodedMessage<
      ::fidl_test_protocolrequest::Parent::GetChildRequestRequest>
      _request(zx_txid_t(0));
  _request.GetOutgoingMessage()
      .Call<::fidl_test_protocolrequest::Parent::GetChildRequestResponse>(
          _client, _response_bytes, _response_byte_capacity);
  status_ = _request.status();
  error_ = _request.error();
}
#endif

#ifdef __Fuchsia__
::fidl_test_protocolrequest::Parent::ResultOf::TakeChild::TakeChild(
    ::fidl::UnownedClientEnd<::fidl_test_protocolrequest::Parent> _client,
    ::fidl::ClientEnd<::fidl_test_protocolrequest::Child>& c) {
  ::fidl::OwnedEncodedMessage<
      ::fidl_test_protocolrequest::Parent::TakeChildRequest>
      _request(zx_txid_t(0), c);
  _request.GetOutgoingMessage().Write(_client);
  status_ = _request.status();
  error_ = _request.error();
}
#endif

#ifdef __Fuchsia__
::fidl_test_protocolrequest::Parent::UnownedResultOf::TakeChild::TakeChild(
    ::fidl::UnownedClientEnd<::fidl_test_protocolrequest::Parent> _client,
    uint8_t* _request_bytes, uint32_t _request_byte_capacity,
    ::fidl::ClientEnd<::fidl_test_protocolrequest::Child>& c) {
  ::fidl::UnownedEncodedMessage<
      ::fidl_test_protocolrequest::Parent::TakeChildRequest>
      _request(_request_bytes, _request_byte_capacity, 0, c);
  _request.GetOutgoingMessage().Write(_client);
  status_ = _request.status();
  error_ = _request.error();
}
#endif

#ifdef __Fuchsia__
::fidl_test_protocolrequest::Parent::ResultOf::TakeChildRequest::
    TakeChildRequest(
        ::fidl::UnownedClientEnd<::fidl_test_protocolrequest::Parent> _client,
        ::fidl::ServerEnd<::fidl_test_protocolrequest::Child>& r) {
  ::fidl::OwnedEncodedMessage<
      ::fidl_test_protocolrequest::Parent::TakeChildRequestRequest>
      _request(zx_txid_t(0), r);
  _request.GetOutgoingMessage().Write(_client);
  status_ = _request.status();
  error_ = _request.error();
}
#endif

#ifdef __Fuchsia__
::fidl_test_protocolrequest::Parent::UnownedResultOf::TakeChildRequest::
    TakeChildRequest(
        ::fidl::UnownedClientEnd<::fidl_test_protocolrequest::Parent> _client,
        uint8_t* _request_bytes, uint32_t _request_byte_capacity,
        ::fidl::ServerEnd<::fidl_test_protocolrequest::Child>& r) {
  ::fidl::UnownedEncodedMessage<
      ::fidl_test_protocolrequest::Parent::TakeChildRequestRequest>
      _request(_request_bytes, _request_byte_capacity, 0, r);
  _request.GetOutgoingMessage().Write(_client);
  status_ = _request.status();
  error_ = _request.error();
}
#endif

}  // namespace fidl_test_protocolrequest
#ifdef __Fuchsia__
::fidl_test_protocolrequest::Parent::ResultOf::GetChild fidl::internal::
    WireClientImpl<::fidl_test_protocolrequest::Parent>::GetChild_Sync() {
  if (auto _channel = ::fidl::internal::ClientBase::GetChannel()) {
    return ::fidl_test_protocolrequest::Parent::ResultOf::GetChild(
        ::fidl::UnownedClientEnd<::fidl_test_protocolrequest::Parent>(
            _channel->handle()));
  }
  return ::fidl_test_protocolrequest::Parent::ResultOf::GetChild(
      ::fidl::Result(ZX_ERR_CANCELED, ::fidl::kErrorChannelUnbound));
}
#endif

#ifdef __Fuchsia__
::fidl_test_protocolrequest::Parent::UnownedResultOf::GetChild fidl::internal::
    WireClientImpl<::fidl_test_protocolrequest::Parent>::GetChild_Sync(
        ::fidl::BufferSpan _response_buffer) {
  if (auto _channel = ::fidl::internal::ClientBase::GetChannel()) {
    return ::fidl_test_protocolrequest::Parent::UnownedResultOf::GetChild(
        ::fidl::UnownedClientEnd<::fidl_test_protocolrequest::Parent>(
            _channel->handle()),
        _response_buffer.data, _response_buffer.capacity);
  }
  return ::fidl_test_protocolrequest::Parent::UnownedResultOf::GetChild(
      ::fidl::Result(ZX_ERR_CANCELED, ::fidl::kErrorChannelUnbound));
}
#endif

#ifdef __Fuchsia__
::fidl_test_protocolrequest::Parent::GetChildResponseContext::
    GetChildResponseContext()
    : ::fidl::internal::ResponseContext(
          ::fidl_test_protocolrequest::Parent::GetChildResponse::Type,
          kParent_GetChild_Ordinal) {}

void ::fidl_test_protocolrequest::Parent::GetChildResponseContext::OnReply(
    uint8_t* reply) {
  OnReply(
      reinterpret_cast<::fidl_test_protocolrequest::Parent::GetChildResponse*>(
          reply));
}

::fidl::Result
fidl::internal::WireClientImpl<::fidl_test_protocolrequest::Parent>::GetChild(
    ::fit::callback<
        void(::fidl_test_protocolrequest::Parent::GetChildResponse* response)>
        _cb) {
  class ResponseContext final
      : public ::fidl_test_protocolrequest::Parent::GetChildResponseContext {
   public:
    ResponseContext(
        ::fit::callback<void(
            ::fidl_test_protocolrequest::Parent::GetChildResponse* response)>
            cb)
        : cb_(std::move(cb)) {}

    void OnReply(::fidl_test_protocolrequest::Parent::GetChildResponse*
                     response) override {
      cb_(response);

      response->_CloseHandles();

      delete this;
    }

    void OnError() override { delete this; }

   private:
    ::fit::callback<void(
        ::fidl_test_protocolrequest::Parent::GetChildResponse* response)>
        cb_;
  };

  auto* _context = new ResponseContext(std::move(_cb));
  ::fidl::internal::ClientBase::PrepareAsyncTxn(_context);
  ::fidl_test_protocolrequest::Parent::GetChildRequest::OwnedEncodedMessage
      _request(_context->Txid());
  return _request.GetOutgoingMessage().Write(this, _context);
}

::fidl::Result
fidl::internal::WireClientImpl<::fidl_test_protocolrequest::Parent>::GetChild(
    ::fidl_test_protocolrequest::Parent::GetChildResponseContext* _context) {
  ::fidl::internal::ClientBase::PrepareAsyncTxn(_context);

  ::fidl_test_protocolrequest::Parent::GetChildRequest::OwnedEncodedMessage
      _request(_context->Txid());
  return _request.GetOutgoingMessage().Write(this, _context);
}
#endif

#ifdef __Fuchsia__
::fidl_test_protocolrequest::Parent::ResultOf::GetChildRequest
fidl::internal::WireClientImpl<
    ::fidl_test_protocolrequest::Parent>::GetChildRequest_Sync() {
  if (auto _channel = ::fidl::internal::ClientBase::GetChannel()) {
    return ::fidl_test_protocolrequest::Parent::ResultOf::GetChildRequest(
        ::fidl::UnownedClientEnd<::fidl_test_protocolrequest::Parent>(
            _channel->handle()));
  }
  return ::fidl_test_protocolrequest::Parent::ResultOf::GetChildRequest(
      ::fidl::Result(ZX_ERR_CANCELED, ::fidl::kErrorChannelUnbound));
}
#endif

#ifdef __Fuchsia__
::fidl_test_protocolrequest::Parent::UnownedResultOf::GetChildRequest
fidl::internal::WireClientImpl<::fidl_test_protocolrequest::Parent>::
    GetChildRequest_Sync(::fidl::BufferSpan _response_buffer) {
  if (auto _channel = ::fidl::internal::ClientBase::GetChannel()) {
    return ::fidl_test_protocolrequest::Parent::UnownedResultOf::
        GetChildRequest(
            ::fidl::UnownedClientEnd<::fidl_test_protocolrequest::Parent>(
                _channel->handle()),
            _response_buffer.data, _response_buffer.capacity);
  }
  return ::fidl_test_protocolrequest::Parent::UnownedResultOf::GetChildRequest(
      ::fidl::Result(ZX_ERR_CANCELED, ::fidl::kErrorChannelUnbound));
}
#endif

#ifdef __Fuchsia__
::fidl_test_protocolrequest::Parent::GetChildRequestResponseContext::
    GetChildRequestResponseContext()
    : ::fidl::internal::ResponseContext(
          ::fidl_test_protocolrequest::Parent::GetChildRequestResponse::Type,
          kParent_GetChildRequest_Ordinal) {}

void ::fidl_test_protocolrequest::Parent::GetChildRequestResponseContext::
    OnReply(uint8_t* reply) {
  OnReply(reinterpret_cast<
          ::fidl_test_protocolrequest::Parent::GetChildRequestResponse*>(
      reply));
}

::fidl::Result fidl::internal::
    WireClientImpl<::fidl_test_protocolrequest::Parent>::GetChildRequest(
        ::fit::callback<void(::fidl_test_protocolrequest::Parent::
                                 GetChildRequestResponse* response)>
            _cb) {
  class ResponseContext final : public ::fidl_test_protocolrequest::Parent::
                                    GetChildRequestResponseContext {
   public:
    ResponseContext(::fit::callback<void(::fidl_test_protocolrequest::Parent::
                                             GetChildRequestResponse* response)>
                        cb)
        : cb_(std::move(cb)) {}

    void OnReply(::fidl_test_protocolrequest::Parent::GetChildRequestResponse*
                     response) override {
      cb_(response);

      response->_CloseHandles();

      delete this;
    }

    void OnError() override { delete this; }

   private:
    ::fit::callback<void(
        ::fidl_test_protocolrequest::Parent::GetChildRequestResponse* response)>
        cb_;
  };

  auto* _context = new ResponseContext(std::move(_cb));
  ::fidl::internal::ClientBase::PrepareAsyncTxn(_context);
  ::fidl_test_protocolrequest::Parent::GetChildRequestRequest::
      OwnedEncodedMessage _request(_context->Txid());
  return _request.GetOutgoingMessage().Write(this, _context);
}

::fidl::Result fidl::internal::
    WireClientImpl<::fidl_test_protocolrequest::Parent>::GetChildRequest(
        ::fidl_test_protocolrequest::Parent::GetChildRequestResponseContext*
            _context) {
  ::fidl::internal::ClientBase::PrepareAsyncTxn(_context);

  ::fidl_test_protocolrequest::Parent::GetChildRequestRequest::
      OwnedEncodedMessage _request(_context->Txid());
  return _request.GetOutgoingMessage().Write(this, _context);
}
#endif

#ifdef __Fuchsia__
::fidl::Result
fidl::internal::WireClientImpl<::fidl_test_protocolrequest::Parent>::TakeChild(
    ::fidl::ClientEnd<::fidl_test_protocolrequest::Child> c) {
  if (auto _channel = ::fidl::internal::ClientBase::GetChannel()) {
    auto _res = ::fidl_test_protocolrequest::Parent::ResultOf::TakeChild(
        ::fidl::UnownedClientEnd<::fidl_test_protocolrequest::Parent>(
            _channel->handle()),
        c);
    return ::fidl::Result(_res.status(), _res.error());
  }
  return ::fidl::Result(ZX_ERR_CANCELED, ::fidl::kErrorChannelUnbound);
}
#endif

#ifdef __Fuchsia__
::fidl::Result
fidl::internal::WireClientImpl<::fidl_test_protocolrequest::Parent>::TakeChild(
    ::fidl::BufferSpan _request_buffer,
    ::fidl::ClientEnd<::fidl_test_protocolrequest::Child> c) {
  if (auto _channel = ::fidl::internal::ClientBase::GetChannel()) {
    auto _res = ::fidl_test_protocolrequest::Parent::UnownedResultOf::TakeChild(
        ::fidl::UnownedClientEnd<::fidl_test_protocolrequest::Parent>(
            _channel->handle()),
        _request_buffer.data, _request_buffer.capacity, c);
    return ::fidl::Result(_res.status(), _res.error());
  }
  return ::fidl::Result(ZX_ERR_CANCELED, ::fidl::kErrorChannelUnbound);
}
#endif

#ifdef __Fuchsia__
::fidl::Result fidl::internal::
    WireClientImpl<::fidl_test_protocolrequest::Parent>::TakeChildRequest(
        ::fidl::ServerEnd<::fidl_test_protocolrequest::Child> r) {
  if (auto _channel = ::fidl::internal::ClientBase::GetChannel()) {
    auto _res = ::fidl_test_protocolrequest::Parent::ResultOf::TakeChildRequest(
        ::fidl::UnownedClientEnd<::fidl_test_protocolrequest::Parent>(
            _channel->handle()),
        r);
    return ::fidl::Result(_res.status(), _res.error());
  }
  return ::fidl::Result(ZX_ERR_CANCELED, ::fidl::kErrorChannelUnbound);
}
#endif

#ifdef __Fuchsia__
::fidl::Result fidl::internal::
    WireClientImpl<::fidl_test_protocolrequest::Parent>::TakeChildRequest(
        ::fidl::BufferSpan _request_buffer,
        ::fidl::ServerEnd<::fidl_test_protocolrequest::Child> r) {
  if (auto _channel = ::fidl::internal::ClientBase::GetChannel()) {
    auto _res =
        ::fidl_test_protocolrequest::Parent::UnownedResultOf::TakeChildRequest(
            ::fidl::UnownedClientEnd<::fidl_test_protocolrequest::Parent>(
                _channel->handle()),
            _request_buffer.data, _request_buffer.capacity, r);
    return ::fidl::Result(_res.status(), _res.error());
  }
  return ::fidl::Result(ZX_ERR_CANCELED, ::fidl::kErrorChannelUnbound);
}
#endif

#ifdef __Fuchsia__
std::optional<::fidl::UnbindInfo> fidl::internal::WireClientImpl<
    ::fidl_test_protocolrequest::Parent>::DispatchEvent(fidl_incoming_msg_t*
                                                            msg) {
  FidlHandleInfoCloseMany(msg->handles, msg->num_handles);
  return ::fidl::UnbindInfo{::fidl::UnbindInfo::kUnexpectedMessage,
                            ZX_ERR_NOT_SUPPORTED};
}
#endif

namespace fidl_test_protocolrequest {
#ifdef __Fuchsia__
namespace methods {

void ParentDispatchGetChild(void* interface, void* bytes,
                            ::fidl::Transaction* txn) {
  ::fidl::WireInterface<::fidl_test_protocolrequest::Parent>::
      GetChildCompleter::Sync completer(txn);
  reinterpret_cast<::fidl_test_protocolrequest::Parent::Interface*>(interface)
      ->GetChild(completer);
}

void ParentDispatchGetChildRequest(void* interface, void* bytes,
                                   ::fidl::Transaction* txn) {
  ::fidl::WireInterface<::fidl_test_protocolrequest::Parent>::
      GetChildRequestCompleter::Sync completer(txn);
  reinterpret_cast<::fidl_test_protocolrequest::Parent::Interface*>(interface)
      ->GetChildRequest(completer);
}

void ParentDispatchTakeChild(void* interface, void* bytes,
                             ::fidl::Transaction* txn) {
  auto message =
      reinterpret_cast<::fidl_test_protocolrequest::Parent::TakeChildRequest*>(
          bytes);
  ::fidl::WireInterface<::fidl_test_protocolrequest::Parent>::
      TakeChildCompleter::Sync completer(txn);
  reinterpret_cast<::fidl_test_protocolrequest::Parent::Interface*>(interface)
      ->TakeChild(std::move(message->c), completer);
}

void ParentDispatchTakeChildRequest(void* interface, void* bytes,
                                    ::fidl::Transaction* txn) {
  auto message = reinterpret_cast<
      ::fidl_test_protocolrequest::Parent::TakeChildRequestRequest*>(bytes);
  ::fidl::WireInterface<::fidl_test_protocolrequest::Parent>::
      TakeChildRequestCompleter::Sync completer(txn);
  reinterpret_cast<::fidl_test_protocolrequest::Parent::Interface*>(interface)
      ->TakeChildRequest(std::move(message->r), completer);
}

}  // namespace methods

namespace entries {

::fidl::internal::MethodEntry Parent[] = {
    {::fidl_test_protocolrequest::kParent_GetChild_Ordinal,
     ::fidl_test_protocolrequest::Parent::GetChildRequest::Type,
     methods::ParentDispatchGetChild},
    {::fidl_test_protocolrequest::kParent_GetChildRequest_Ordinal,
     ::fidl_test_protocolrequest::Parent::GetChildRequestRequest::Type,
     methods::ParentDispatchGetChildRequest},
    {::fidl_test_protocolrequest::kParent_TakeChild_Ordinal,
     ::fidl_test_protocolrequest::Parent::TakeChildRequest::Type,
     methods::ParentDispatchTakeChild},
    {::fidl_test_protocolrequest::kParent_TakeChildRequest_Ordinal,
     ::fidl_test_protocolrequest::Parent::TakeChildRequestRequest::Type,
     methods::ParentDispatchTakeChildRequest},
};

}  // namespace entries

::fidl::DispatchResult Parent::TryDispatch(Interface* impl,
                                           fidl_incoming_msg_t* msg,
                                           ::fidl::Transaction* txn) {
  return ::fidl::internal::TryDispatch(
      impl, msg, txn, entries::Parent,
      entries::Parent +
          sizeof(entries::Parent) / sizeof(::fidl::internal::MethodEntry));
}
#endif
}  // namespace fidl_test_protocolrequest

namespace fidl_test_protocolrequest {
#ifdef __Fuchsia__
::fidl::DispatchResult Parent::Dispatch(Interface* impl,
                                        fidl_incoming_msg_t* msg,
                                        ::fidl::Transaction* txn) {
  ::fidl::DispatchResult dispatch_result = TryDispatch(impl, msg, txn);
  if (dispatch_result == ::fidl::DispatchResult::kNotFound) {
    FidlHandleInfoCloseMany(msg->handles, msg->num_handles);
    txn->InternalError(
        {::fidl::UnbindInfo::kUnexpectedMessage, ZX_ERR_NOT_SUPPORTED});
  }
  return dispatch_result;
}
}  // namespace fidl_test_protocolrequest
::fidl::DispatchResult
fidl::WireInterface<::fidl_test_protocolrequest::Parent>::dispatch_message(
    fidl_incoming_msg_t* msg, ::fidl::Transaction* txn) {
  return ::fidl_test_protocolrequest::Parent::Dispatch(this, msg, txn);
}
#endif

#ifdef __Fuchsia__
::fidl::Result fidl::WireInterface<::fidl_test_protocolrequest::Parent>::
    GetChildCompleterBase::Reply(
        ::fidl::ClientEnd<::fidl_test_protocolrequest::Child> c) {
  ::fidl::OwnedEncodedMessage<
      ::fidl_test_protocolrequest::Parent::GetChildResponse>
      _response{c};
  return ::fidl::WireInterface<::fidl_test_protocolrequest::Parent>::
      GetChildCompleterBase::SendReply(&_response.GetOutgoingMessage());
}
#endif

#ifdef __Fuchsia__
::fidl::Result fidl::WireInterface<::fidl_test_protocolrequest::Parent>::
    GetChildCompleterBase::Reply(
        ::fidl::BufferSpan _buffer,
        ::fidl::ClientEnd<::fidl_test_protocolrequest::Child> c) {
  ::fidl_test_protocolrequest::Parent::GetChildResponse::UnownedEncodedMessage
      _response(_buffer.data, _buffer.capacity, c);
  return CompleterBase::SendReply(&_response.GetOutgoingMessage());
}
#endif

#ifdef __Fuchsia__
::fidl::Result fidl::WireInterface<::fidl_test_protocolrequest::Parent>::
    GetChildRequestCompleterBase::Reply(
        ::fidl::ServerEnd<::fidl_test_protocolrequest::Child> r) {
  ::fidl::OwnedEncodedMessage<
      ::fidl_test_protocolrequest::Parent::GetChildRequestResponse>
      _response{r};
  return ::fidl::WireInterface<::fidl_test_protocolrequest::Parent>::
      GetChildRequestCompleterBase::SendReply(&_response.GetOutgoingMessage());
}
#endif

#ifdef __Fuchsia__
::fidl::Result fidl::WireInterface<::fidl_test_protocolrequest::Parent>::
    GetChildRequestCompleterBase::Reply(
        ::fidl::BufferSpan _buffer,
        ::fidl::ServerEnd<::fidl_test_protocolrequest::Child> r) {
  ::fidl_test_protocolrequest::Parent::GetChildRequestResponse::
      UnownedEncodedMessage _response(_buffer.data, _buffer.capacity, r);
  return CompleterBase::SendReply(&_response.GetOutgoingMessage());
}
#endif

void ::fidl_test_protocolrequest::Parent::GetChildRequest::_InitHeader(
    zx_txid_t _txid) {
  fidl_init_txn_header(&_hdr, _txid,
                       ::fidl_test_protocolrequest::kParent_GetChild_Ordinal);
}

void ::fidl_test_protocolrequest::Parent::GetChildResponse::_InitHeader() {
  fidl_init_txn_header(&_hdr, 0,
                       ::fidl_test_protocolrequest::kParent_GetChild_Ordinal);
}

void ::fidl_test_protocolrequest::Parent::GetChildResponse::_CloseHandles() {
  c.reset();
}

void ::fidl_test_protocolrequest::Parent::GetChildRequestRequest::_InitHeader(
    zx_txid_t _txid) {
  fidl_init_txn_header(
      &_hdr, _txid,
      ::fidl_test_protocolrequest::kParent_GetChildRequest_Ordinal);
}

void ::fidl_test_protocolrequest::Parent::GetChildRequestResponse::
    _InitHeader() {
  fidl_init_txn_header(
      &_hdr, 0, ::fidl_test_protocolrequest::kParent_GetChildRequest_Ordinal);
}

void ::fidl_test_protocolrequest::Parent::GetChildRequestResponse::
    _CloseHandles() {
  r.reset();
}

void ::fidl_test_protocolrequest::Parent::TakeChildRequest::_InitHeader(
    zx_txid_t _txid) {
  fidl_init_txn_header(&_hdr, _txid,
                       ::fidl_test_protocolrequest::kParent_TakeChild_Ordinal);
}

void ::fidl_test_protocolrequest::Parent::TakeChildRequest::_CloseHandles() {
  c.reset();
}

void ::fidl_test_protocolrequest::Parent::TakeChildRequestRequest::_InitHeader(
    zx_txid_t _txid) {
  fidl_init_txn_header(
      &_hdr, _txid,
      ::fidl_test_protocolrequest::kParent_TakeChildRequest_Ordinal);
}

void ::fidl_test_protocolrequest::Parent::TakeChildRequestRequest::
    _CloseHandles() {
  r.reset();
}

#ifdef __Fuchsia__
#endif

namespace fidl_test_protocolrequest {}  // namespace fidl_test_protocolrequest
#ifdef __Fuchsia__
std::optional<::fidl::UnbindInfo> fidl::internal::WireClientImpl<
    ::fidl_test_protocolrequest::Child>::DispatchEvent(fidl_incoming_msg_t*
                                                           msg) {
  FidlHandleInfoCloseMany(msg->handles, msg->num_handles);
  return ::fidl::UnbindInfo{::fidl::UnbindInfo::kUnexpectedMessage,
                            ZX_ERR_NOT_SUPPORTED};
}
#endif

namespace fidl_test_protocolrequest {
#ifdef __Fuchsia__
namespace methods {}  // namespace methods

namespace entries {

::fidl::internal::MethodEntry Child[] = {};

}  // namespace entries

::fidl::DispatchResult Child::TryDispatch(Interface* impl,
                                          fidl_incoming_msg_t* msg,
                                          ::fidl::Transaction* txn) {
  return ::fidl::DispatchResult::kNotFound;
}
#endif
}  // namespace fidl_test_protocolrequest

namespace fidl_test_protocolrequest {
#ifdef __Fuchsia__
::fidl::DispatchResult Child::Dispatch(Interface* impl,
                                       fidl_incoming_msg_t* msg,
                                       ::fidl::Transaction* txn) {
  FidlHandleInfoCloseMany(msg->handles, msg->num_handles);
  txn->InternalError(
      {::fidl::UnbindInfo::kUnexpectedMessage, ZX_ERR_NOT_SUPPORTED});
  return ::fidl::DispatchResult::kNotFound;
}
}  // namespace fidl_test_protocolrequest
::fidl::DispatchResult
fidl::WireInterface<::fidl_test_protocolrequest::Child>::dispatch_message(
    fidl_incoming_msg_t* msg, ::fidl::Transaction* txn) {
  return ::fidl_test_protocolrequest::Child::Dispatch(this, msg, txn);
}
#endif

#ifdef __Fuchsia__
#endif
