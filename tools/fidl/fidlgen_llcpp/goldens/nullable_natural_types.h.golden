// WARNING: This file is machine generated by fidlgen.

#pragma once

#include <fidl/test.nullable/cpp/common_types.h>
#include <fidl/test.nullable/cpp/markers.h>
#include <lib/fidl/cpp/coding_traits.h>
#include <lib/fidl/cpp/internal/codable_base.h>
#include <lib/fidl/cpp/unified_messaging.h>

#include <cinttypes>
#include <string>

#ifdef __Fuchsia__

#include <lib/zx/channel.h>
#include <lib/zx/vmo.h>

#endif  // __Fuchsia__

namespace test_nullable {
class StructWithNullableVector;

class StructWithNullableUnion;

class StructWithNullableStruct;

class StructWithNullableString;

class StructWithNullableRequest;

class StructWithNullableProtocol;

class StructWithNullableHandle;

class SimpleProtocolAddTopResponse;

class SimpleProtocolAddRequest;

class Int32Wrapper;

class SimpleUnion;

extern "C" const fidl_type_t test_nullable_StructWithNullableVectorTable;

class StructWithNullableVector final
    : public ::fidl::internal::CodableBase<StructWithNullableVector> {
 private:
  struct Storage_;

 public:
  StructWithNullableVector(Storage_ storage) noexcept
      : storage_(std::move(storage)) {}
  StructWithNullableVector(
      ::cpp17::optional<::std::vector<int32_t>> val) noexcept
      : storage_({.val = std::move(val)}) {}
  StructWithNullableVector() : StructWithNullableVector(Storage_{}) {}

  StructWithNullableVector(StructWithNullableVector&&) noexcept = default;
  StructWithNullableVector& operator=(StructWithNullableVector&&) noexcept =
      default;
  StructWithNullableVector(const StructWithNullableVector& other) noexcept
      : StructWithNullableVector(other.CloneStorage_()) {}
  StructWithNullableVector& operator=(
      const StructWithNullableVector& other) noexcept {
    storage_ = other.CloneStorage_();
    return *this;
  }

  const ::cpp17::optional<::std::vector<int32_t>>& val() const {
    return storage_.val;
  }

  ::cpp17::optional<::std::vector<int32_t>>& val() { return storage_.val; }

 private:
  friend ::fidl::internal::CodableBase<StructWithNullableVector>;
  friend ::fidl::CodingTraits<StructWithNullableVector>;
  StructWithNullableVector(::fidl::Decoder& decoder);
  template <typename Payload>
  friend auto ::fidl::internal::EncodeTransactionalMessageWithoutValidating(
      ::fidl::Encoder& encoder, Payload&& payload)
      -> ::fidl::HLCPPOutgoingMessage;
  void EncodeWithoutValidating(::fidl::Encoder& encoder, size_t offset);

  struct Storage_ final {
    ::cpp17::optional<::std::vector<int32_t>> val{};
  };

  Storage_ storage_;
  Storage_ CloneStorage_() const;
};

extern "C" const fidl_type_t test_nullable_StructWithNullableUnionTable;

class StructWithNullableUnion final
    : public ::fidl::internal::CodableBase<StructWithNullableUnion> {
 private:
  struct Storage_;

 public:
  StructWithNullableUnion(Storage_ storage) noexcept
      : storage_(std::move(storage)) {}
  StructWithNullableUnion(
      ::std::unique_ptr<::test_nullable::SimpleUnion> val) noexcept
      : storage_({.val = std::move(val)}) {}
  StructWithNullableUnion() : StructWithNullableUnion(Storage_{}) {}

  StructWithNullableUnion(StructWithNullableUnion&&) noexcept = default;
  StructWithNullableUnion& operator=(StructWithNullableUnion&&) noexcept =
      default;
  StructWithNullableUnion(const StructWithNullableUnion& other) noexcept
      : StructWithNullableUnion(other.CloneStorage_()) {}
  StructWithNullableUnion& operator=(
      const StructWithNullableUnion& other) noexcept {
    storage_ = other.CloneStorage_();
    return *this;
  }

  const ::std::unique_ptr<::test_nullable::SimpleUnion>& val() const {
    return storage_.val;
  }

  ::std::unique_ptr<::test_nullable::SimpleUnion>& val() {
    return storage_.val;
  }

 private:
  friend ::fidl::internal::CodableBase<StructWithNullableUnion>;
  friend ::fidl::CodingTraits<StructWithNullableUnion>;
  StructWithNullableUnion(::fidl::Decoder& decoder);
  template <typename Payload>
  friend auto ::fidl::internal::EncodeTransactionalMessageWithoutValidating(
      ::fidl::Encoder& encoder, Payload&& payload)
      -> ::fidl::HLCPPOutgoingMessage;
  void EncodeWithoutValidating(::fidl::Encoder& encoder, size_t offset);

  struct Storage_ final {
    ::std::unique_ptr<::test_nullable::SimpleUnion> val{};
  };

  Storage_ storage_;
  Storage_ CloneStorage_() const;
};

extern "C" const fidl_type_t test_nullable_StructWithNullableStructTable;

class StructWithNullableStruct final
    : public ::fidl::internal::CodableBase<StructWithNullableStruct> {
 private:
  struct Storage_;

 public:
  StructWithNullableStruct(Storage_ storage) noexcept
      : storage_(std::move(storage)) {}
  StructWithNullableStruct(
      ::std::unique_ptr<::test_nullable::Int32Wrapper> val) noexcept
      : storage_({.val = std::move(val)}) {}
  StructWithNullableStruct() : StructWithNullableStruct(Storage_{}) {}

  StructWithNullableStruct(StructWithNullableStruct&&) noexcept = default;
  StructWithNullableStruct& operator=(StructWithNullableStruct&&) noexcept =
      default;
  StructWithNullableStruct(const StructWithNullableStruct& other) noexcept
      : StructWithNullableStruct(other.CloneStorage_()) {}
  StructWithNullableStruct& operator=(
      const StructWithNullableStruct& other) noexcept {
    storage_ = other.CloneStorage_();
    return *this;
  }

  const ::std::unique_ptr<::test_nullable::Int32Wrapper>& val() const {
    return storage_.val;
  }

  ::std::unique_ptr<::test_nullable::Int32Wrapper>& val() {
    return storage_.val;
  }

 private:
  friend ::fidl::internal::CodableBase<StructWithNullableStruct>;
  friend ::fidl::CodingTraits<StructWithNullableStruct>;
  StructWithNullableStruct(::fidl::Decoder& decoder);
  template <typename Payload>
  friend auto ::fidl::internal::EncodeTransactionalMessageWithoutValidating(
      ::fidl::Encoder& encoder, Payload&& payload)
      -> ::fidl::HLCPPOutgoingMessage;
  void EncodeWithoutValidating(::fidl::Encoder& encoder, size_t offset);

  struct Storage_ final {
    ::std::unique_ptr<::test_nullable::Int32Wrapper> val{};
  };

  Storage_ storage_;
  Storage_ CloneStorage_() const;
};

extern "C" const fidl_type_t test_nullable_StructWithNullableStringTable;

class StructWithNullableString final
    : public ::fidl::internal::CodableBase<StructWithNullableString> {
 private:
  struct Storage_;

 public:
  StructWithNullableString(Storage_ storage) noexcept
      : storage_(std::move(storage)) {}
  StructWithNullableString(::cpp17::optional<::std::string> val) noexcept
      : storage_({.val = std::move(val)}) {}
  StructWithNullableString() : StructWithNullableString(Storage_{}) {}

  StructWithNullableString(StructWithNullableString&&) noexcept = default;
  StructWithNullableString& operator=(StructWithNullableString&&) noexcept =
      default;
  StructWithNullableString(const StructWithNullableString& other) noexcept
      : StructWithNullableString(other.CloneStorage_()) {}
  StructWithNullableString& operator=(
      const StructWithNullableString& other) noexcept {
    storage_ = other.CloneStorage_();
    return *this;
  }

  const ::cpp17::optional<::std::string>& val() const { return storage_.val; }

  ::cpp17::optional<::std::string>& val() { return storage_.val; }

 private:
  friend ::fidl::internal::CodableBase<StructWithNullableString>;
  friend ::fidl::CodingTraits<StructWithNullableString>;
  StructWithNullableString(::fidl::Decoder& decoder);
  template <typename Payload>
  friend auto ::fidl::internal::EncodeTransactionalMessageWithoutValidating(
      ::fidl::Encoder& encoder, Payload&& payload)
      -> ::fidl::HLCPPOutgoingMessage;
  void EncodeWithoutValidating(::fidl::Encoder& encoder, size_t offset);

  struct Storage_ final {
    ::cpp17::optional<::std::string> val{};
  };

  Storage_ storage_;
  Storage_ CloneStorage_() const;
};

#ifdef __Fuchsia__

extern "C" const fidl_type_t test_nullable_StructWithNullableRequestTable;

class StructWithNullableRequest final
    : public ::fidl::internal::CodableBase<StructWithNullableRequest> {
 private:
  struct Storage_;

 public:
  StructWithNullableRequest(Storage_ storage) noexcept
      : storage_(std::move(storage)) {}
  StructWithNullableRequest(
      ::fidl::ServerEnd<::test_nullable::SimpleProtocol> val) noexcept
      : storage_({.val = std::move(val)}) {}
  StructWithNullableRequest() : StructWithNullableRequest(Storage_{}) {}

  StructWithNullableRequest(StructWithNullableRequest&&) noexcept = default;
  StructWithNullableRequest& operator=(StructWithNullableRequest&&) noexcept =
      default;

  const ::fidl::ServerEnd<::test_nullable::SimpleProtocol>& val() const {
    return storage_.val;
  }

  ::fidl::ServerEnd<::test_nullable::SimpleProtocol>& val() {
    return storage_.val;
  }

 private:
  friend ::fidl::internal::CodableBase<StructWithNullableRequest>;
  friend ::fidl::CodingTraits<StructWithNullableRequest>;
  StructWithNullableRequest(::fidl::Decoder& decoder);
  template <typename Payload>
  friend auto ::fidl::internal::EncodeTransactionalMessageWithoutValidating(
      ::fidl::Encoder& encoder, Payload&& payload)
      -> ::fidl::HLCPPOutgoingMessage;
  void EncodeWithoutValidating(::fidl::Encoder& encoder, size_t offset);

  struct Storage_ final {
    ::fidl::ServerEnd<::test_nullable::SimpleProtocol> val{};
  };

  Storage_ storage_;
};

#endif  // __Fuchsia__

#ifdef __Fuchsia__

extern "C" const fidl_type_t test_nullable_StructWithNullableProtocolTable;

class StructWithNullableProtocol final
    : public ::fidl::internal::CodableBase<StructWithNullableProtocol> {
 private:
  struct Storage_;

 public:
  StructWithNullableProtocol(Storage_ storage) noexcept
      : storage_(std::move(storage)) {}
  StructWithNullableProtocol(
      ::fidl::ClientEnd<::test_nullable::SimpleProtocol> val) noexcept
      : storage_({.val = std::move(val)}) {}
  StructWithNullableProtocol() : StructWithNullableProtocol(Storage_{}) {}

  StructWithNullableProtocol(StructWithNullableProtocol&&) noexcept = default;
  StructWithNullableProtocol& operator=(StructWithNullableProtocol&&) noexcept =
      default;

  const ::fidl::ClientEnd<::test_nullable::SimpleProtocol>& val() const {
    return storage_.val;
  }

  ::fidl::ClientEnd<::test_nullable::SimpleProtocol>& val() {
    return storage_.val;
  }

 private:
  friend ::fidl::internal::CodableBase<StructWithNullableProtocol>;
  friend ::fidl::CodingTraits<StructWithNullableProtocol>;
  StructWithNullableProtocol(::fidl::Decoder& decoder);
  template <typename Payload>
  friend auto ::fidl::internal::EncodeTransactionalMessageWithoutValidating(
      ::fidl::Encoder& encoder, Payload&& payload)
      -> ::fidl::HLCPPOutgoingMessage;
  void EncodeWithoutValidating(::fidl::Encoder& encoder, size_t offset);

  struct Storage_ final {
    ::fidl::ClientEnd<::test_nullable::SimpleProtocol> val{};
  };

  Storage_ storage_;
};

#endif  // __Fuchsia__

#ifdef __Fuchsia__

extern "C" const fidl_type_t test_nullable_StructWithNullableHandleTable;

class StructWithNullableHandle final
    : public ::fidl::internal::CodableBase<StructWithNullableHandle> {
 private:
  struct Storage_;

 public:
  StructWithNullableHandle(Storage_ storage) noexcept
      : storage_(std::move(storage)) {}
  StructWithNullableHandle(::zx::vmo val) noexcept
      : storage_({.val = std::move(val)}) {}
  StructWithNullableHandle() : StructWithNullableHandle(Storage_{}) {}

  StructWithNullableHandle(StructWithNullableHandle&&) noexcept = default;
  StructWithNullableHandle& operator=(StructWithNullableHandle&&) noexcept =
      default;

  const ::zx::vmo& val() const { return storage_.val; }

  ::zx::vmo& val() { return storage_.val; }

 private:
  friend ::fidl::internal::CodableBase<StructWithNullableHandle>;
  friend ::fidl::CodingTraits<StructWithNullableHandle>;
  StructWithNullableHandle(::fidl::Decoder& decoder);
  template <typename Payload>
  friend auto ::fidl::internal::EncodeTransactionalMessageWithoutValidating(
      ::fidl::Encoder& encoder, Payload&& payload)
      -> ::fidl::HLCPPOutgoingMessage;
  void EncodeWithoutValidating(::fidl::Encoder& encoder, size_t offset);

  struct Storage_ final {
    ::zx::vmo val{};
  };

  Storage_ storage_;
};

#endif  // __Fuchsia__

extern "C" const fidl_type_t test_nullable_SimpleUnionTable;

class SimpleUnion final {
 private:
  using Storage_ = cpp17::variant<cpp17::monostate, int32_t, float>;

 public:
  // TODO: share union tag types between wire & natural.
  enum class Tag : fidl_union_tag_t {
    kA = 1,  // 0x1
    kB = 2,  // 0x2
  };

  // Create an unknown value of this union.
  SimpleUnion() : storage_(std::make_shared<Storage_>()) {}

  SimpleUnion(SimpleUnion&&) noexcept = default;
  SimpleUnion& operator=(SimpleUnion&&) noexcept = default;
  SimpleUnion(const SimpleUnion& other) noexcept
      : SimpleUnion(other.CloneStorage_()) {}
  SimpleUnion& operator=(const SimpleUnion& other) noexcept {
    storage_ = other.CloneStorage_();
    return *this;
  }

  constexpr ::test_nullable::SimpleUnion::Tag Which() const {
    return SimpleUnion::IndexToTag(storage_->index());
  }
  static SimpleUnion WithA(int32_t val) {
    return SimpleUnion(
        std::make_shared<Storage_>(std::in_place_index_t<1>{}, std::move(val)));
  }

  const ::fidl::internal::UnionMemberView<1, Storage_> a() const {
    return ::fidl::internal::UnionMemberView<1, Storage_>(storage_);
  }
  ::fidl::internal::UnionMemberView<1, Storage_> a() {
    return ::fidl::internal::UnionMemberView<1, Storage_>(storage_);
  }
  static SimpleUnion WithB(float val) {
    return SimpleUnion(
        std::make_shared<Storage_>(std::in_place_index_t<2>{}, std::move(val)));
  }

  const ::fidl::internal::UnionMemberView<2, Storage_> b() const {
    return ::fidl::internal::UnionMemberView<2, Storage_>(storage_);
  }
  ::fidl::internal::UnionMemberView<2, Storage_> b() {
    return ::fidl::internal::UnionMemberView<2, Storage_>(storage_);
  }

 private:
  std::shared_ptr<Storage_> storage_;
  std::shared_ptr<Storage_> CloneStorage_() const;
  friend struct ::fidl::internal::NaturalUnionCodingTraits<
      ::test_nullable::SimpleUnion>;
  static constexpr std::array<std::optional<::fidl::HandleInformation>, 3>
      Members = {std::nullopt, std::nullopt, std::nullopt};

  explicit SimpleUnion(std::shared_ptr<Storage_> storage)
      : storage_(std::move(storage)) {}

  static constexpr size_t TagToIndex(::test_nullable::SimpleUnion::Tag tag) {
    switch (tag) {
      case ::test_nullable::SimpleUnion::Tag::kA:
        return 1;
      case ::test_nullable::SimpleUnion::Tag::kB:
        return 2;
    }
  }

  static constexpr ::test_nullable::SimpleUnion::Tag IndexToTag(size_t index) {
    switch (index) {
      case 1:
        return ::test_nullable::SimpleUnion::Tag::kA;
      case 2:
        return ::test_nullable::SimpleUnion::Tag::kB;
      // TODO: what's the right thing to do here?
      default:
        return ::test_nullable::SimpleUnion::Tag::kA;
    }
  }
};

extern "C" const fidl_type_t test_nullable_SimpleProtocolAddTopResponseTable;

class SimpleProtocolAddTopResponse final
    : public ::fidl::internal::CodableBase<SimpleProtocolAddTopResponse> {
 private:
  struct Storage_;

 public:
  SimpleProtocolAddTopResponse(Storage_ storage) noexcept
      : storage_(std::move(storage)) {}
  SimpleProtocolAddTopResponse(int32_t sum) noexcept
      : storage_({.sum = std::move(sum)}) {}
  SimpleProtocolAddTopResponse() : SimpleProtocolAddTopResponse(Storage_{}) {}

  SimpleProtocolAddTopResponse(SimpleProtocolAddTopResponse&&) noexcept =
      default;
  SimpleProtocolAddTopResponse& operator=(
      SimpleProtocolAddTopResponse&&) noexcept = default;
  SimpleProtocolAddTopResponse(
      const SimpleProtocolAddTopResponse& other) noexcept
      : SimpleProtocolAddTopResponse(other.CloneStorage_()) {}
  SimpleProtocolAddTopResponse& operator=(
      const SimpleProtocolAddTopResponse& other) noexcept {
    storage_ = other.CloneStorage_();
    return *this;
  }

  int32_t sum() const { return storage_.sum; }

  int32_t& sum() { return storage_.sum; }

 private:
  friend ::fidl::internal::CodableBase<SimpleProtocolAddTopResponse>;
  friend ::fidl::CodingTraits<SimpleProtocolAddTopResponse>;
  SimpleProtocolAddTopResponse(::fidl::Decoder& decoder);
  template <typename Payload>
  friend auto ::fidl::internal::EncodeTransactionalMessageWithoutValidating(
      ::fidl::Encoder& encoder, Payload&& payload)
      -> ::fidl::HLCPPOutgoingMessage;
  void EncodeWithoutValidating(::fidl::Encoder& encoder, size_t offset);

  struct Storage_ final {
    int32_t sum{};
  };

  Storage_ storage_;
  Storage_ CloneStorage_() const;
};

extern "C" const fidl_type_t test_nullable_SimpleProtocolAddRequestTable;

class SimpleProtocolAddRequest final
    : public ::fidl::internal::CodableBase<SimpleProtocolAddRequest> {
 private:
  struct Storage_;

 public:
  SimpleProtocolAddRequest(Storage_ storage) noexcept
      : storage_(std::move(storage)) {}
  SimpleProtocolAddRequest(int32_t a, int32_t b) noexcept
      : storage_({.a = std::move(a), .b = std::move(b)}) {}
  SimpleProtocolAddRequest() : SimpleProtocolAddRequest(Storage_{}) {}

  SimpleProtocolAddRequest(SimpleProtocolAddRequest&&) noexcept = default;
  SimpleProtocolAddRequest& operator=(SimpleProtocolAddRequest&&) noexcept =
      default;
  SimpleProtocolAddRequest(const SimpleProtocolAddRequest& other) noexcept
      : SimpleProtocolAddRequest(other.CloneStorage_()) {}
  SimpleProtocolAddRequest& operator=(
      const SimpleProtocolAddRequest& other) noexcept {
    storage_ = other.CloneStorage_();
    return *this;
  }

  int32_t a() const { return storage_.a; }

  int32_t& a() { return storage_.a; }

  int32_t b() const { return storage_.b; }

  int32_t& b() { return storage_.b; }

 private:
  friend ::fidl::internal::CodableBase<SimpleProtocolAddRequest>;
  friend ::fidl::CodingTraits<SimpleProtocolAddRequest>;
  SimpleProtocolAddRequest(::fidl::Decoder& decoder);
  template <typename Payload>
  friend auto ::fidl::internal::EncodeTransactionalMessageWithoutValidating(
      ::fidl::Encoder& encoder, Payload&& payload)
      -> ::fidl::HLCPPOutgoingMessage;
  void EncodeWithoutValidating(::fidl::Encoder& encoder, size_t offset);

  struct Storage_ final {
    int32_t a{};
    int32_t b{};
  };

  Storage_ storage_;
  Storage_ CloneStorage_() const;
};

extern "C" const fidl_type_t test_nullable_Int32WrapperTable;

class Int32Wrapper final : public ::fidl::internal::CodableBase<Int32Wrapper> {
 private:
  struct Storage_;

 public:
  Int32Wrapper(Storage_ storage) noexcept : storage_(std::move(storage)) {}
  Int32Wrapper(int32_t val) noexcept : storage_({.val = std::move(val)}) {}
  Int32Wrapper() : Int32Wrapper(Storage_{}) {}

  Int32Wrapper(Int32Wrapper&&) noexcept = default;
  Int32Wrapper& operator=(Int32Wrapper&&) noexcept = default;
  Int32Wrapper(const Int32Wrapper& other) noexcept
      : Int32Wrapper(other.CloneStorage_()) {}
  Int32Wrapper& operator=(const Int32Wrapper& other) noexcept {
    storage_ = other.CloneStorage_();
    return *this;
  }

  int32_t val() const { return storage_.val; }

  int32_t& val() { return storage_.val; }

 private:
  friend ::fidl::internal::CodableBase<Int32Wrapper>;
  friend ::fidl::CodingTraits<Int32Wrapper>;
  Int32Wrapper(::fidl::Decoder& decoder);
  template <typename Payload>
  friend auto ::fidl::internal::EncodeTransactionalMessageWithoutValidating(
      ::fidl::Encoder& encoder, Payload&& payload)
      -> ::fidl::HLCPPOutgoingMessage;
  void EncodeWithoutValidating(::fidl::Encoder& encoder, size_t offset);

  struct Storage_ final {
    int32_t val{};
  };

  Storage_ storage_;
  Storage_ CloneStorage_() const;
};

}  // namespace test_nullable
namespace fidl {

#ifdef __Fuchsia__
extern "C" const fidl_type_t test_nullable_StructWithNullableVectorTable;

template <>
struct IsFidlType<::test_nullable::StructWithNullableVector>
    : public std::true_type {};

template <>
struct ::fidl::internal::TypeTraits<::test_nullable::StructWithNullableVector>
    final {
 public:
  static constexpr const fidl_type_t* kCodingTable =
      &test_nullable_StructWithNullableVectorTable;
};

template <>
struct CodingTraits<::test_nullable::StructWithNullableVector> {
  static constexpr size_t inline_size_v1_no_ee = 16;
  static constexpr size_t inline_size_v2 = 16;

  template <class EncoderImpl>
  static void Encode(
      EncoderImpl* encoder, ::test_nullable::StructWithNullableVector* value,
      size_t offset,
      cpp17::optional<HandleInformation> maybe_handle_info = cpp17::nullopt) {
    [[maybe_unused]] uint32_t field_offset;
    field_offset =
        encoder->wire_format() == ::fidl::internal::WireFormatVersion::kV1 ? 0
                                                                           : 0;
    ::fidl::Encode(encoder, &value->storage_.val, offset + field_offset);
  }

  template <typename DecoderImpl>
  static void Decode(DecoderImpl* decoder,
                     ::test_nullable::StructWithNullableVector* value,
                     size_t offset) {
    ::fidl::Decode(decoder, &value->storage_.val, offset + 0);
  }
};
#endif  // __Fuchsia__

#ifdef __Fuchsia__
extern "C" const fidl_type_t test_nullable_StructWithNullableUnionTable;

template <>
struct IsFidlType<::test_nullable::StructWithNullableUnion>
    : public std::true_type {};

template <>
struct ::fidl::internal::TypeTraits<::test_nullable::StructWithNullableUnion>
    final {
 public:
  static constexpr const fidl_type_t* kCodingTable =
      &test_nullable_StructWithNullableUnionTable;
};

template <>
struct CodingTraits<::test_nullable::StructWithNullableUnion> {
  static constexpr size_t inline_size_v1_no_ee = 24;
  static constexpr size_t inline_size_v2 = 16;

  template <class EncoderImpl>
  static void Encode(
      EncoderImpl* encoder, ::test_nullable::StructWithNullableUnion* value,
      size_t offset,
      cpp17::optional<HandleInformation> maybe_handle_info = cpp17::nullopt) {
    [[maybe_unused]] uint32_t field_offset;
    field_offset =
        encoder->wire_format() == ::fidl::internal::WireFormatVersion::kV1 ? 0
                                                                           : 0;
    ::fidl::Encode(encoder, &value->storage_.val, offset + field_offset);
  }

  template <typename DecoderImpl>
  static void Decode(DecoderImpl* decoder,
                     ::test_nullable::StructWithNullableUnion* value,
                     size_t offset) {
    ::fidl::Decode(decoder, &value->storage_.val, offset + 0);
  }
};
#endif  // __Fuchsia__

#ifdef __Fuchsia__
extern "C" const fidl_type_t test_nullable_StructWithNullableStructTable;

template <>
struct IsFidlType<::test_nullable::StructWithNullableStruct>
    : public std::true_type {};

template <>
struct ::fidl::internal::TypeTraits<::test_nullable::StructWithNullableStruct>
    final {
 public:
  static constexpr const fidl_type_t* kCodingTable =
      &test_nullable_StructWithNullableStructTable;
};

template <>
struct CodingTraits<::test_nullable::StructWithNullableStruct> {
  static constexpr size_t inline_size_v1_no_ee = 8;
  static constexpr size_t inline_size_v2 = 8;

  template <class EncoderImpl>
  static void Encode(
      EncoderImpl* encoder, ::test_nullable::StructWithNullableStruct* value,
      size_t offset,
      cpp17::optional<HandleInformation> maybe_handle_info = cpp17::nullopt) {
    [[maybe_unused]] uint32_t field_offset;
    field_offset =
        encoder->wire_format() == ::fidl::internal::WireFormatVersion::kV1 ? 0
                                                                           : 0;
    ::fidl::Encode(encoder, &value->storage_.val, offset + field_offset);
  }

  template <typename DecoderImpl>
  static void Decode(DecoderImpl* decoder,
                     ::test_nullable::StructWithNullableStruct* value,
                     size_t offset) {
    ::fidl::Decode(decoder, &value->storage_.val, offset + 0);
  }
};
#endif  // __Fuchsia__

#ifdef __Fuchsia__
extern "C" const fidl_type_t test_nullable_StructWithNullableStringTable;

template <>
struct IsFidlType<::test_nullable::StructWithNullableString>
    : public std::true_type {};

template <>
struct ::fidl::internal::TypeTraits<::test_nullable::StructWithNullableString>
    final {
 public:
  static constexpr const fidl_type_t* kCodingTable =
      &test_nullable_StructWithNullableStringTable;
};

template <>
struct CodingTraits<::test_nullable::StructWithNullableString> {
  static constexpr size_t inline_size_v1_no_ee = 16;
  static constexpr size_t inline_size_v2 = 16;

  template <class EncoderImpl>
  static void Encode(
      EncoderImpl* encoder, ::test_nullable::StructWithNullableString* value,
      size_t offset,
      cpp17::optional<HandleInformation> maybe_handle_info = cpp17::nullopt) {
    [[maybe_unused]] uint32_t field_offset;
    field_offset =
        encoder->wire_format() == ::fidl::internal::WireFormatVersion::kV1 ? 0
                                                                           : 0;
    ::fidl::Encode(encoder, &value->storage_.val, offset + field_offset);
  }

  template <typename DecoderImpl>
  static void Decode(DecoderImpl* decoder,
                     ::test_nullable::StructWithNullableString* value,
                     size_t offset) {
    ::fidl::Decode(decoder, &value->storage_.val, offset + 0);
  }
};
#endif  // __Fuchsia__

#ifdef __Fuchsia__
extern "C" const fidl_type_t test_nullable_StructWithNullableRequestTable;

template <>
struct IsResource<::test_nullable::StructWithNullableRequest>
    : public std::true_type {};
template <>
struct IsFidlType<::test_nullable::StructWithNullableRequest>
    : public std::true_type {};

template <>
struct ::fidl::internal::TypeTraits<::test_nullable::StructWithNullableRequest>
    final {
 public:
  static constexpr const fidl_type_t* kCodingTable =
      &test_nullable_StructWithNullableRequestTable;
};

template <>
struct CodingTraits<::test_nullable::StructWithNullableRequest> {
  static constexpr size_t inline_size_v1_no_ee = 4;
  static constexpr size_t inline_size_v2 = 4;

  template <class EncoderImpl>
  static void Encode(
      EncoderImpl* encoder, ::test_nullable::StructWithNullableRequest* value,
      size_t offset,
      cpp17::optional<HandleInformation> maybe_handle_info = cpp17::nullopt) {
    [[maybe_unused]] uint32_t field_offset;
    field_offset =
        encoder->wire_format() == ::fidl::internal::WireFormatVersion::kV1 ? 0
                                                                           : 0;
    ::fidl::Encode(encoder, &value->storage_.val, offset + field_offset,
                   ::fidl::HandleInformation{
                       .object_type = ZX_OBJ_TYPE_CHANNEL,
                       .rights = ZX_DEFAULT_CHANNEL_RIGHTS,
                   });
  }

  template <typename DecoderImpl>
  static void Decode(DecoderImpl* decoder,
                     ::test_nullable::StructWithNullableRequest* value,
                     size_t offset) {
    ::fidl::Decode(decoder, &value->storage_.val, offset + 0);
  }
};
#endif  // __Fuchsia__

#ifdef __Fuchsia__
extern "C" const fidl_type_t test_nullable_StructWithNullableProtocolTable;

template <>
struct IsResource<::test_nullable::StructWithNullableProtocol>
    : public std::true_type {};
template <>
struct IsFidlType<::test_nullable::StructWithNullableProtocol>
    : public std::true_type {};

template <>
struct ::fidl::internal::TypeTraits<::test_nullable::StructWithNullableProtocol>
    final {
 public:
  static constexpr const fidl_type_t* kCodingTable =
      &test_nullable_StructWithNullableProtocolTable;
};

template <>
struct CodingTraits<::test_nullable::StructWithNullableProtocol> {
  static constexpr size_t inline_size_v1_no_ee = 4;
  static constexpr size_t inline_size_v2 = 4;

  template <class EncoderImpl>
  static void Encode(
      EncoderImpl* encoder, ::test_nullable::StructWithNullableProtocol* value,
      size_t offset,
      cpp17::optional<HandleInformation> maybe_handle_info = cpp17::nullopt) {
    [[maybe_unused]] uint32_t field_offset;
    field_offset =
        encoder->wire_format() == ::fidl::internal::WireFormatVersion::kV1 ? 0
                                                                           : 0;
    ::fidl::Encode(encoder, &value->storage_.val, offset + field_offset,
                   ::fidl::HandleInformation{
                       .object_type = ZX_OBJ_TYPE_CHANNEL,
                       .rights = ZX_DEFAULT_CHANNEL_RIGHTS,
                   });
  }

  template <typename DecoderImpl>
  static void Decode(DecoderImpl* decoder,
                     ::test_nullable::StructWithNullableProtocol* value,
                     size_t offset) {
    ::fidl::Decode(decoder, &value->storage_.val, offset + 0);
  }
};
#endif  // __Fuchsia__

#ifdef __Fuchsia__
extern "C" const fidl_type_t test_nullable_StructWithNullableHandleTable;

template <>
struct IsResource<::test_nullable::StructWithNullableHandle>
    : public std::true_type {};
template <>
struct IsFidlType<::test_nullable::StructWithNullableHandle>
    : public std::true_type {};

template <>
struct ::fidl::internal::TypeTraits<::test_nullable::StructWithNullableHandle>
    final {
 public:
  static constexpr const fidl_type_t* kCodingTable =
      &test_nullable_StructWithNullableHandleTable;
};

template <>
struct CodingTraits<::test_nullable::StructWithNullableHandle> {
  static constexpr size_t inline_size_v1_no_ee = 4;
  static constexpr size_t inline_size_v2 = 4;

  template <class EncoderImpl>
  static void Encode(
      EncoderImpl* encoder, ::test_nullable::StructWithNullableHandle* value,
      size_t offset,
      cpp17::optional<HandleInformation> maybe_handle_info = cpp17::nullopt) {
    [[maybe_unused]] uint32_t field_offset;
    field_offset =
        encoder->wire_format() == ::fidl::internal::WireFormatVersion::kV1 ? 0
                                                                           : 0;
    ::fidl::Encode(encoder, &value->storage_.val, offset + field_offset,
                   ::fidl::HandleInformation{
                       .object_type = ZX_OBJ_TYPE_VMO,
                       .rights = 0x80000000,
                   });
  }

  template <typename DecoderImpl>
  static void Decode(DecoderImpl* decoder,
                     ::test_nullable::StructWithNullableHandle* value,
                     size_t offset) {
    ::fidl::Decode(decoder, &value->storage_.val, offset + 0);
  }
};
#endif  // __Fuchsia__

#ifdef __Fuchsia__
extern "C" const fidl_type_t test_nullable_SimpleProtocolAddTopResponseTable;

template <>
struct IsFidlType<::test_nullable::SimpleProtocolAddTopResponse>
    : public std::true_type {};

template <>
struct ::fidl::internal::TypeTraits<
    ::test_nullable::SimpleProtocolAddTopResponse>
    final {
 public:
  static constexpr const fidl_type_t* kCodingTable =
      &test_nullable_SimpleProtocolAddTopResponseTable;
};

template <>
struct CodingTraits<::test_nullable::SimpleProtocolAddTopResponse> {
  static constexpr size_t inline_size_v1_no_ee = 8;
  static constexpr size_t inline_size_v2 = 8;

  template <class EncoderImpl>
  static void Encode(
      EncoderImpl* encoder,
      ::test_nullable::SimpleProtocolAddTopResponse* value, size_t offset,
      cpp17::optional<HandleInformation> maybe_handle_info = cpp17::nullopt) {
    [[maybe_unused]] uint32_t field_offset;
    field_offset =
        encoder->wire_format() == ::fidl::internal::WireFormatVersion::kV1 ? 0
                                                                           : 0;
    ::fidl::Encode(encoder, &value->storage_.sum, offset + field_offset);
  }

  template <typename DecoderImpl>
  static void Decode(DecoderImpl* decoder,
                     ::test_nullable::SimpleProtocolAddTopResponse* value,
                     size_t offset) {
    ::fidl::Decode(decoder, &value->storage_.sum, offset + 0);
  }
};
#endif  // __Fuchsia__

#ifdef __Fuchsia__
extern "C" const fidl_type_t test_nullable_SimpleProtocolAddRequestTable;

template <>
struct IsFidlType<::test_nullable::SimpleProtocolAddRequest>
    : public std::true_type {};

template <>
struct ::fidl::internal::TypeTraits<::test_nullable::SimpleProtocolAddRequest>
    final {
 public:
  static constexpr const fidl_type_t* kCodingTable =
      &test_nullable_SimpleProtocolAddRequestTable;
};

template <>
struct CodingTraits<::test_nullable::SimpleProtocolAddRequest> {
  static constexpr size_t inline_size_v1_no_ee = 8;
  static constexpr size_t inline_size_v2 = 8;

  template <class EncoderImpl>
  static void Encode(
      EncoderImpl* encoder, ::test_nullable::SimpleProtocolAddRequest* value,
      size_t offset,
      cpp17::optional<HandleInformation> maybe_handle_info = cpp17::nullopt) {
    [[maybe_unused]] uint32_t field_offset;
    field_offset =
        encoder->wire_format() == ::fidl::internal::WireFormatVersion::kV1 ? 0
                                                                           : 0;
    ::fidl::Encode(encoder, &value->storage_.a, offset + field_offset);
    field_offset =
        encoder->wire_format() == ::fidl::internal::WireFormatVersion::kV1 ? 4
                                                                           : 4;
    ::fidl::Encode(encoder, &value->storage_.b, offset + field_offset);
  }

  template <typename DecoderImpl>
  static void Decode(DecoderImpl* decoder,
                     ::test_nullable::SimpleProtocolAddRequest* value,
                     size_t offset) {
    ::fidl::Decode(decoder, &value->storage_.a, offset + 0);
    ::fidl::Decode(decoder, &value->storage_.b, offset + 4);
  }
};
#endif  // __Fuchsia__

#ifdef __Fuchsia__
extern "C" const fidl_type_t test_nullable_Int32WrapperTable;

template <>
struct IsFidlType<::test_nullable::Int32Wrapper> : public std::true_type {};

template <>
struct ::fidl::internal::TypeTraits<::test_nullable::Int32Wrapper> final {
 public:
  static constexpr const fidl_type_t* kCodingTable =
      &test_nullable_Int32WrapperTable;
};

template <>
struct CodingTraits<::test_nullable::Int32Wrapper> {
  static constexpr size_t inline_size_v1_no_ee = 4;
  static constexpr size_t inline_size_v2 = 4;

  template <class EncoderImpl>
  static void Encode(
      EncoderImpl* encoder, ::test_nullable::Int32Wrapper* value, size_t offset,
      cpp17::optional<HandleInformation> maybe_handle_info = cpp17::nullopt) {
    [[maybe_unused]] uint32_t field_offset;
    field_offset =
        encoder->wire_format() == ::fidl::internal::WireFormatVersion::kV1 ? 0
                                                                           : 0;
    ::fidl::Encode(encoder, &value->storage_.val, offset + field_offset);
  }

  template <typename DecoderImpl>
  static void Decode(DecoderImpl* decoder, ::test_nullable::Int32Wrapper* value,
                     size_t offset) {
    ::fidl::Decode(decoder, &value->storage_.val, offset + 0);
  }
};
#endif  // __Fuchsia__

template <>
struct IsFidlType<::test_nullable::SimpleUnion> : public std::true_type {};

template <>
struct CodingTraits<::test_nullable::SimpleUnion> final
    : public ::fidl::internal::NaturalUnionCodingTraits<
          ::test_nullable::SimpleUnion> {};

}  // namespace fidl
