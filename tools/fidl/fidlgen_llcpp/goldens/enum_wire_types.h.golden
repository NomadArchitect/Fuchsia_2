// WARNING: This file is machine generated by fidlgen.

#pragma once

#include <lib/fidl/llcpp/array.h>
#include <lib/fidl/llcpp/coding.h>
#include <lib/fidl/llcpp/envelope.h>
#include <lib/fidl/llcpp/message.h>
#include <lib/fidl/llcpp/message_storage.h>
#include <lib/fidl/llcpp/object_view.h>
#include <lib/fidl/llcpp/string_view.h>
#include <lib/fidl/llcpp/traits.h>
#include <lib/fidl/llcpp/wire_types.h>
#include <lib/stdcompat/optional.h>

#include <cinttypes>
#ifdef __Fuchsia__

#endif  // __Fuchsia__

#include <fidl/fidl.test.enum/cpp/markers.h>

namespace fidl_test_enum {
namespace wire {

enum class MyStrictEnum : uint32_t {

  kFoo = 1u,

  kBar = 2u,
};

class MyFlexibleEnumWithCustomUnknown final {
 public:
  constexpr MyFlexibleEnumWithCustomUnknown() : value_(0) {}
  constexpr explicit MyFlexibleEnumWithCustomUnknown(uint32_t value)
      : value_(value) {}
  constexpr operator uint32_t() const { return value_; }

  constexpr bool IsUnknown() const {
    switch (value_) {
      case 1u:

      case 2u:

        return false;
    }
    return true;
  }

  constexpr static MyFlexibleEnumWithCustomUnknown Unknown() {
    return MyFlexibleEnumWithCustomUnknown(0x3);
  }

  static const MyFlexibleEnumWithCustomUnknown kFoo;

  static const MyFlexibleEnumWithCustomUnknown kBar;

  static const MyFlexibleEnumWithCustomUnknown kCustomUnknown;

 private:
  uint32_t value_;
};
constexpr const ::fidl_test_enum::wire::MyFlexibleEnumWithCustomUnknown
    MyFlexibleEnumWithCustomUnknown::kFoo =
        ::fidl_test_enum::wire::MyFlexibleEnumWithCustomUnknown(1u);
constexpr const ::fidl_test_enum::wire::MyFlexibleEnumWithCustomUnknown
    MyFlexibleEnumWithCustomUnknown::kBar =
        ::fidl_test_enum::wire::MyFlexibleEnumWithCustomUnknown(2u);
constexpr const ::fidl_test_enum::wire::MyFlexibleEnumWithCustomUnknown
    MyFlexibleEnumWithCustomUnknown::kCustomUnknown =
        ::fidl_test_enum::wire::MyFlexibleEnumWithCustomUnknown(3u);

class MyFlexibleEnum final {
 public:
  constexpr MyFlexibleEnum() : value_(0) {}
  constexpr explicit MyFlexibleEnum(uint32_t value) : value_(value) {}
  constexpr operator uint32_t() const { return value_; }

  constexpr bool IsUnknown() const {
    switch (value_) {
      case 1u:

      case 2u:

        return false;
    }
    return true;
  }

  constexpr static MyFlexibleEnum Unknown() {
    return MyFlexibleEnum(0xffffffff);
  }

  static const MyFlexibleEnum kFoo;

  static const MyFlexibleEnum kBar;

 private:
  uint32_t value_;
};
constexpr const ::fidl_test_enum::wire::MyFlexibleEnum MyFlexibleEnum::kFoo =
    ::fidl_test_enum::wire::MyFlexibleEnum(1u);
constexpr const ::fidl_test_enum::wire::MyFlexibleEnum MyFlexibleEnum::kBar =
    ::fidl_test_enum::wire::MyFlexibleEnum(2u);

class MyEmptyFlexibleEnum final {
 public:
  constexpr MyEmptyFlexibleEnum() : value_(0) {}
  constexpr explicit MyEmptyFlexibleEnum(uint32_t value) : value_(value) {}
  constexpr operator uint32_t() const { return value_; }

  constexpr bool IsUnknown() const { return true; }

  constexpr static MyEmptyFlexibleEnum Unknown() {
    return MyEmptyFlexibleEnum(0xffffffff);
  }

 private:
  uint32_t value_;
};

}  // namespace wire
}  // namespace fidl_test_enum
namespace fidl {

template <>
struct IsFidlType<::fidl_test_enum::wire::MyStrictEnum>
    : public std::true_type {};
template <>
struct ContainsHandle<::fidl_test_enum::wire::MyStrictEnum>
    : public std::false_type {};

template <>
struct IsFidlType<::fidl_test_enum::wire::MyFlexibleEnumWithCustomUnknown>
    : public std::true_type {};
template <>
struct ContainsHandle<::fidl_test_enum::wire::MyFlexibleEnumWithCustomUnknown>
    : public std::false_type {};

template <>
struct IsFidlType<::fidl_test_enum::wire::MyFlexibleEnum>
    : public std::true_type {};
template <>
struct ContainsHandle<::fidl_test_enum::wire::MyFlexibleEnum>
    : public std::false_type {};

template <>
struct IsFidlType<::fidl_test_enum::wire::MyEmptyFlexibleEnum>
    : public std::true_type {};
template <>
struct ContainsHandle<::fidl_test_enum::wire::MyEmptyFlexibleEnum>
    : public std::false_type {};

}  // namespace fidl
