// WARNING: This file is machine generated by fidlgen.

#include <fidl/test.inheritance/cpp/wire_messaging.h>

#include <memory>

namespace test_inheritance {
[[maybe_unused]] constexpr uint64_t ksuper_foo_Ordinal = 7540745593380780216lu;

extern "C" const fidl_type_t test_inheritance_superfooRequestMessageTable;

extern "C" const fidl_type_t test_inheritance_superfooResponseMessageTable;
#ifdef __Fuchsia__
}  // namespace test_inheritance
::fidl::WireResult<::test_inheritance::Super::Foo>::WireResult(
    ::fidl::UnownedClientEnd<::test_inheritance::Super> client,
    ::fidl::WireRequest<::test_inheritance::Super::Foo>* request) {
  FIDL_INTERNAL_DISABLE_AUTO_VAR_INIT
  ::fidl::OwnedEncodedMessage<
      ::fidl::WireRequest<::test_inheritance::Super::Foo>>
      request_message(::fidl::internal::AllowUnownedInputRef{}, request);
  auto& outgoing = request_message.GetOutgoingMessage();
  outgoing.Call<::fidl::WireResponse<::test_inheritance::Super::Foo>>(
      client.channel(), bytes_.data(), static_cast<uint32_t>(bytes_.size()));
  SetResult(outgoing);
}

::fidl::WireResult<::test_inheritance::Super::Foo>::WireResult(
    ::fidl::UnownedClientEnd<::test_inheritance::Super> client,
    ::fidl::WireRequest<::test_inheritance::Super::Foo>* request,
    zx_time_t deadline) {
  FIDL_INTERNAL_DISABLE_AUTO_VAR_INIT
  ::fidl::OwnedEncodedMessage<
      ::fidl::WireRequest<::test_inheritance::Super::Foo>>
      request_message(::fidl::internal::AllowUnownedInputRef{}, request);
  auto& outgoing = request_message.GetOutgoingMessage();
  outgoing.Call<::fidl::WireResponse<::test_inheritance::Super::Foo>>(
      client.channel(), bytes_.data(), static_cast<uint32_t>(bytes_.size()),
      fidl::CallOptions{.deadline = deadline});
  SetResult(outgoing);
}
namespace test_inheritance {
#endif  // __Fuchsia__

#ifdef __Fuchsia__
}  // namespace test_inheritance
::fidl::WireUnownedResult<::test_inheritance::Super::Foo>::WireUnownedResult(
    ::fidl::UnownedClientEnd<::test_inheritance::Super> client_end,
    ::fidl::internal::AnyBufferAllocator& allocator,
    ::fidl::WireRequest<::test_inheritance::Super::Foo>* request) {
  constexpr uint32_t buffer_size = ::fidl::SyncClientMethodBufferSizeInChannel<
      ::test_inheritance::Super::Foo>();
  ::fitx::result<::fidl::Error, ::fidl::BufferSpan> allocation =
      allocator.TryAllocate(buffer_size);
  if (!allocation.is_ok()) {
    ::fidl::Result::operator=(allocation.error_value());
    return;
  }
  uint8_t* buffer = allocation->data;
  constexpr uint32_t request_byte_capacity = ::fidl::MaxSizeInChannel<
      ::fidl::WireRequest<::test_inheritance::Super::Foo>,
      ::fidl::MessageDirection::kSending>();
  uint8_t* request_bytes = buffer;
  static_assert(buffer_size > request_byte_capacity);
  uint32_t response_byte_capacity = buffer_size - request_byte_capacity;
  uint8_t* response_bytes = &buffer[request_byte_capacity];

  ::fidl::UnownedEncodedMessage<
      ::fidl::WireRequest<::test_inheritance::Super::Foo>>
      request_message(request_bytes, request_byte_capacity, request);
  auto& outgoing = request_message.GetOutgoingMessage();
  outgoing.Call<::fidl::WireResponse<::test_inheritance::Super::Foo>>(
      client_end.channel(), response_bytes, response_byte_capacity);
  bytes_ = response_bytes;
  ::fidl::Result::operator=(outgoing);
}
namespace test_inheritance {
#endif  // __Fuchsia__

}  // namespace test_inheritance
#ifdef __Fuchsia__

void fidl::internal::WireClientImpl<::test_inheritance::Super>::Foo(
    ::fidl::StringView s,
    ::fidl::WireClientCallback<::test_inheritance::Super::Foo> _cb) {
  using Callback = decltype(_cb);
  class ResponseContext final
      : public ::fidl::WireResponseContext<::test_inheritance::Super::Foo> {
   public:
    ResponseContext(Callback cb) : cb_(std::move(cb)) {}

    void OnResult(::fidl::WireUnownedResult<::test_inheritance::Super::Foo>&
                      result) override {
      cb_(result);
      delete this;
    }

   private:
    Callback cb_;
  };

  auto* _context = new ResponseContext(std::move(_cb));
  ::fidl::WireRequest<::test_inheritance::Super::Foo> _request{s};
  FIDL_INTERNAL_DISABLE_AUTO_VAR_INIT
  ::fidl::OwnedEncodedMessage<
      ::fidl::WireRequest<::test_inheritance::Super::Foo>>
      _request_message(::fidl::internal::AllowUnownedInputRef{}, &_request);
  ::fidl::internal::ClientBase::SendTwoWay(
      _request_message.GetOutgoingMessage(), _context);
}

void fidl::internal::WireClientImpl<::test_inheritance::Super>::Foo(
    ::fidl::StringView s,
    ::fit::callback<
        void(::fidl::WireResponse<::test_inheritance::Super::Foo>* response)>
        _cb) {
  using Callback = decltype(_cb);
  class ResponseContext final
      : public ::fidl::WireResponseContext<::test_inheritance::Super::Foo> {
   public:
    ResponseContext(Callback cb) : cb_(std::move(cb)) {}

    void OnResult(::fidl::WireUnownedResult<::test_inheritance::Super::Foo>&
                      result) override {
      if (result.ok()) {
        ::fidl::WireResponse<::test_inheritance::Super::Foo>* response =
            result.Unwrap();
        cb_(response);
      }
      delete this;
    }

   private:
    Callback cb_;
  };

  auto* _context = new ResponseContext(std::move(_cb));
  ::fidl::WireRequest<::test_inheritance::Super::Foo> _request{s};
  FIDL_INTERNAL_DISABLE_AUTO_VAR_INIT
  ::fidl::OwnedEncodedMessage<
      ::fidl::WireRequest<::test_inheritance::Super::Foo>>
      _request_message(::fidl::internal::AllowUnownedInputRef{}, &_request);
  ::fidl::internal::ClientBase::SendTwoWay(
      _request_message.GetOutgoingMessage(), _context);
}
void fidl::internal::WireClientImpl<::test_inheritance::Super>::Foo(
    ::fidl::BufferSpan _request_buffer, ::fidl::StringView s,
    ::fidl::WireResponseContext<::test_inheritance::Super::Foo>* _context) {
  ::fidl::WireRequest<::test_inheritance::Super::Foo> _request{s};

  ::fidl::UnownedEncodedMessage<
      ::fidl::WireRequest<::test_inheritance::Super::Foo>>
      _request_message(_request_buffer.data, _request_buffer.capacity,
                       &_request);
  ::fidl::internal::ClientBase::SendTwoWay(
      _request_message.GetOutgoingMessage(), _context);
}
::fidl::WireResult<::test_inheritance::Super::Foo>
fidl::internal::WireClientImpl<::test_inheritance::Super>::Foo_Sync(
    ::fidl::StringView s) {
  return ::fidl::internal::ClientBase::MakeSyncCallWith(
      [&](std::shared_ptr<::fidl::internal::AnyTransport> _transport) {
        ::fidl::WireRequest<::test_inheritance::Super::Foo> _request{s};
        return ::fidl::WireResult<::test_inheritance::Super::Foo>(
            ::fidl::UnownedClientEnd<::test_inheritance::Super>(
                _transport->get<fidl::internal::ChannelTransport>()),
            &_request);
      });
}
::fidl::WireUnownedResult<::test_inheritance::Super::Foo>
fidl::internal::WireClientImpl<::test_inheritance::Super>::Foo_Sync(
    ::fidl::BufferSpan _buffer_span, ::fidl::StringView s) {
  auto _allocator = ::fidl::internal::MakeAnyBufferAllocator(_buffer_span);
  return ::fidl::internal::ClientBase::MakeSyncCallWith(
      [&](std::shared_ptr<::fidl::internal::AnyTransport> _transport) {
        ::fidl::WireRequest<::test_inheritance::Super::Foo> _request{s};
        return ::fidl::WireUnownedResult<::test_inheritance::Super::Foo>(
            ::fidl::UnownedClientEnd<::test_inheritance::Super>(
                _transport->get<fidl::internal::ChannelTransport>()),
            _allocator, &_request);
      });
}
void fidl::internal::WireWeakAsyncBufferClientImpl<::test_inheritance::Super>::
    Foo(::fidl::StringView s,
        ::fidl::WireResponseContext<::test_inheritance::Super::Foo>* _context) {
  constexpr uint32_t _buffer_size =
      ::fidl::AsyncClientMethodBufferSizeInChannel<
          ::test_inheritance::Super::Foo>();
  ::fitx::result<::fidl::Error, ::fidl::BufferSpan> _allocation =
      _allocator().TryAllocate(_buffer_size);
  if (!_allocation.is_ok()) {
    ::fidl::OutgoingMessage _failure{_allocation.error_value()};
    _client_base()->SendTwoWay(_failure, _context);
    return;
  }

  ::fidl::WireRequest<::test_inheritance::Super::Foo> _request{s};
  ::fidl::UnownedEncodedMessage<
      ::fidl::WireRequest<::test_inheritance::Super::Foo>>
      _request_message(_allocation->data, _buffer_size, &_request);
  _client_base()->SendTwoWay(_request_message.GetOutgoingMessage(), _context);
}
#endif  // __Fuchsia__

#ifdef __Fuchsia__

::fidl::Result
fidl::WireSyncEventHandler<::test_inheritance::Super>::HandleOneEvent(
    ::fidl::UnownedClientEnd<::test_inheritance::Super> client_end) {
  zx_status_t status = client_end.channel()->wait_one(
      ZX_CHANNEL_READABLE | ZX_CHANNEL_PEER_CLOSED, ::zx::time::infinite(),
      nullptr);
  if (status != ZX_OK) {
    return ::fidl::Result::TransportError(
        status, ::fidl::internal::kErrorWaitOneFailed);
  }
  auto callback = [this](::fidl::IncomingMessage msg,
                         ::fidl::internal::IncomingTransportContext
                             incoming_transport_context) -> ::fidl::Result {
    if (msg.status() == ZX_ERR_BUFFER_TOO_SMALL) {
      // Message size is unexpectedly larger than calculated.
      // This can only be due to a newer version of the protocol defining a new
      // event, whose size exceeds the maximum of known events in the current
      // protocol.
      return ::fidl::Result::UnexpectedMessage(Unknown());
    }
    if (!msg.ok()) {
      return msg;
    }
    fidl_message_header_t* hdr = msg.header();
    switch (hdr->ordinal) {
      default: {
        return ::fidl::Result::UnexpectedMessage(Unknown());
      }
    }
  };
  return ::fidl::MessageRead(zx::unowned_channel(client_end.handle()),
                             callback);
}

std::optional<::fidl::UnbindInfo>
fidl::internal::WireEventDispatcher<::test_inheritance::Super>::DispatchEvent(
    ::fidl::IncomingMessage& msg,
    ::fidl::internal::IncomingTransportContext transport_context) {
  switch (msg.header()->ordinal) {
    default:
      break;
  }
  return ::fidl::UnbindInfo::UnknownOrdinal();
}
#endif  // __Fuchsia__

#ifdef __Fuchsia__

constexpr ::fidl::internal::MethodEntry fidl::internal::WireServerDispatcher<
    ::test_inheritance::Super>::entries_[] = {
    {
        ::test_inheritance::ksuper_foo_Ordinal,
        [](void* interface, ::fidl::IncomingMessage&& msg,
           ::fidl::Transaction* txn) {
          ::fidl::DecodedMessage<
              ::fidl::WireRequest<::test_inheritance::Super::Foo>>
              decoded{std::move(msg)};
          if (unlikely(!decoded.ok())) {
            return decoded.status();
          }
          auto* primary = decoded.PrimaryObject();
          ::fidl::internal::WireCompleter<::test_inheritance::Super::Foo>::Sync
              completer(txn);
          reinterpret_cast<::fidl::WireServer<::test_inheritance::Super>*>(
              interface)
              ->Foo(primary, completer);
          return ZX_OK;
        },
    },
};

const ::fidl::internal::MethodEntry* fidl::internal::WireServerDispatcher<
    ::test_inheritance::Super>::entries_end_ = &entries_[1];

::fidl::DispatchResult
fidl::internal::WireServerDispatcher<::test_inheritance::Super>::TryDispatch(
    ::fidl::WireServer<::test_inheritance::Super>* impl,
    ::fidl::IncomingMessage& msg, ::fidl::Transaction* txn) {
  return ::fidl::internal::TryDispatch(impl, msg, txn, entries_, entries_end_);
}

void fidl::internal::WireServerDispatcher<::test_inheritance::Super>::Dispatch(
    ::fidl::WireServer<::test_inheritance::Super>* impl,
    ::fidl::IncomingMessage&& msg, ::fidl::Transaction* txn) {
  ::fidl::internal::Dispatch(impl, msg, txn, entries_, entries_end_);
}
void fidl::WireServer<::test_inheritance::Super>::dispatch_message(
    ::fidl::IncomingMessage&& msg, ::fidl::Transaction* txn,
    ::fidl::internal::IncomingTransportContext transport_context) {
  ::fidl::internal::WireServerDispatcher<::test_inheritance::Super>::Dispatch(
      this, std::move(msg), txn);
}
#endif  // __Fuchsia__

#ifdef __Fuchsia__
::fidl::Result fidl::internal::WireCompleterBase<
    ::test_inheritance::Super::Foo>::Reply(int64_t y) {
  ::fidl::WireResponse<::test_inheritance::Super::Foo> _response{y};
  FIDL_INTERNAL_DISABLE_AUTO_VAR_INIT
  ::fidl::OwnedEncodedMessage<
      ::fidl::WireResponse<::test_inheritance::Super::Foo>>
      _response_message{::fidl::internal::AllowUnownedInputRef{}, &_response};
  return ::fidl::internal::WireCompleterBase<::test_inheritance::Super::Foo>::
      SendReply(&_response_message.GetOutgoingMessage());
}

::fidl::Result
fidl::internal::WireCompleterBase<::test_inheritance::Super::Foo>::Reply(
    ::fidl::BufferSpan _buffer, int64_t y) {
  ::fidl::WireResponse<::test_inheritance::Super::Foo> _response{y};
  ::fidl::UnownedEncodedMessage<
      ::fidl::WireResponse<::test_inheritance::Super::Foo>>
      _response_message(_buffer.data, _buffer.capacity, &_response);
  return CompleterBase::SendReply(&_response_message.GetOutgoingMessage());
}
#endif  // __Fuchsia__

void ::fidl::WireRequest<::test_inheritance::Super::Foo>::_InitHeader() {
  fidl_init_txn_header(&_hdr, 0, ::test_inheritance::ksuper_foo_Ordinal);
}

void ::fidl::WireResponse<::test_inheritance::Super::Foo>::_InitHeader() {
  fidl_init_txn_header(&_hdr, 0, ::test_inheritance::ksuper_foo_Ordinal);
}

#ifdef __Fuchsia__

#endif  // __Fuchsia__

namespace test_inheritance {
[[maybe_unused]] constexpr uint64_t ksub_foo_Ordinal = 7540745593380780216lu;

extern "C" const fidl_type_t test_inheritance_subfooRequestMessageTable;

extern "C" const fidl_type_t test_inheritance_subfooResponseMessageTable;
#ifdef __Fuchsia__
}  // namespace test_inheritance
::fidl::WireResult<::test_inheritance::Sub::Foo>::WireResult(
    ::fidl::UnownedClientEnd<::test_inheritance::Sub> client,
    ::fidl::WireRequest<::test_inheritance::Sub::Foo>* request) {
  FIDL_INTERNAL_DISABLE_AUTO_VAR_INIT
  ::fidl::OwnedEncodedMessage<::fidl::WireRequest<::test_inheritance::Sub::Foo>>
      request_message(::fidl::internal::AllowUnownedInputRef{}, request);
  auto& outgoing = request_message.GetOutgoingMessage();
  outgoing.Call<::fidl::WireResponse<::test_inheritance::Sub::Foo>>(
      client.channel(), bytes_.data(), static_cast<uint32_t>(bytes_.size()));
  SetResult(outgoing);
}

::fidl::WireResult<::test_inheritance::Sub::Foo>::WireResult(
    ::fidl::UnownedClientEnd<::test_inheritance::Sub> client,
    ::fidl::WireRequest<::test_inheritance::Sub::Foo>* request,
    zx_time_t deadline) {
  FIDL_INTERNAL_DISABLE_AUTO_VAR_INIT
  ::fidl::OwnedEncodedMessage<::fidl::WireRequest<::test_inheritance::Sub::Foo>>
      request_message(::fidl::internal::AllowUnownedInputRef{}, request);
  auto& outgoing = request_message.GetOutgoingMessage();
  outgoing.Call<::fidl::WireResponse<::test_inheritance::Sub::Foo>>(
      client.channel(), bytes_.data(), static_cast<uint32_t>(bytes_.size()),
      fidl::CallOptions{.deadline = deadline});
  SetResult(outgoing);
}
namespace test_inheritance {
#endif  // __Fuchsia__

#ifdef __Fuchsia__
}  // namespace test_inheritance
::fidl::WireUnownedResult<::test_inheritance::Sub::Foo>::WireUnownedResult(
    ::fidl::UnownedClientEnd<::test_inheritance::Sub> client_end,
    ::fidl::internal::AnyBufferAllocator& allocator,
    ::fidl::WireRequest<::test_inheritance::Sub::Foo>* request) {
  constexpr uint32_t buffer_size = ::fidl::SyncClientMethodBufferSizeInChannel<
      ::test_inheritance::Sub::Foo>();
  ::fitx::result<::fidl::Error, ::fidl::BufferSpan> allocation =
      allocator.TryAllocate(buffer_size);
  if (!allocation.is_ok()) {
    ::fidl::Result::operator=(allocation.error_value());
    return;
  }
  uint8_t* buffer = allocation->data;
  constexpr uint32_t request_byte_capacity = ::fidl::MaxSizeInChannel<
      ::fidl::WireRequest<::test_inheritance::Sub::Foo>,
      ::fidl::MessageDirection::kSending>();
  uint8_t* request_bytes = buffer;
  static_assert(buffer_size > request_byte_capacity);
  uint32_t response_byte_capacity = buffer_size - request_byte_capacity;
  uint8_t* response_bytes = &buffer[request_byte_capacity];

  ::fidl::UnownedEncodedMessage<
      ::fidl::WireRequest<::test_inheritance::Sub::Foo>>
      request_message(request_bytes, request_byte_capacity, request);
  auto& outgoing = request_message.GetOutgoingMessage();
  outgoing.Call<::fidl::WireResponse<::test_inheritance::Sub::Foo>>(
      client_end.channel(), response_bytes, response_byte_capacity);
  bytes_ = response_bytes;
  ::fidl::Result::operator=(outgoing);
}
namespace test_inheritance {
#endif  // __Fuchsia__

}  // namespace test_inheritance
#ifdef __Fuchsia__

void fidl::internal::WireClientImpl<::test_inheritance::Sub>::Foo(
    ::fidl::StringView s,
    ::fidl::WireClientCallback<::test_inheritance::Sub::Foo> _cb) {
  using Callback = decltype(_cb);
  class ResponseContext final
      : public ::fidl::WireResponseContext<::test_inheritance::Sub::Foo> {
   public:
    ResponseContext(Callback cb) : cb_(std::move(cb)) {}

    void OnResult(::fidl::WireUnownedResult<::test_inheritance::Sub::Foo>&
                      result) override {
      cb_(result);
      delete this;
    }

   private:
    Callback cb_;
  };

  auto* _context = new ResponseContext(std::move(_cb));
  ::fidl::WireRequest<::test_inheritance::Sub::Foo> _request{s};
  FIDL_INTERNAL_DISABLE_AUTO_VAR_INIT
  ::fidl::OwnedEncodedMessage<::fidl::WireRequest<::test_inheritance::Sub::Foo>>
      _request_message(::fidl::internal::AllowUnownedInputRef{}, &_request);
  ::fidl::internal::ClientBase::SendTwoWay(
      _request_message.GetOutgoingMessage(), _context);
}

void fidl::internal::WireClientImpl<::test_inheritance::Sub>::Foo(
    ::fidl::StringView s,
    ::fit::callback<
        void(::fidl::WireResponse<::test_inheritance::Sub::Foo>* response)>
        _cb) {
  using Callback = decltype(_cb);
  class ResponseContext final
      : public ::fidl::WireResponseContext<::test_inheritance::Sub::Foo> {
   public:
    ResponseContext(Callback cb) : cb_(std::move(cb)) {}

    void OnResult(::fidl::WireUnownedResult<::test_inheritance::Sub::Foo>&
                      result) override {
      if (result.ok()) {
        ::fidl::WireResponse<::test_inheritance::Sub::Foo>* response =
            result.Unwrap();
        cb_(response);
      }
      delete this;
    }

   private:
    Callback cb_;
  };

  auto* _context = new ResponseContext(std::move(_cb));
  ::fidl::WireRequest<::test_inheritance::Sub::Foo> _request{s};
  FIDL_INTERNAL_DISABLE_AUTO_VAR_INIT
  ::fidl::OwnedEncodedMessage<::fidl::WireRequest<::test_inheritance::Sub::Foo>>
      _request_message(::fidl::internal::AllowUnownedInputRef{}, &_request);
  ::fidl::internal::ClientBase::SendTwoWay(
      _request_message.GetOutgoingMessage(), _context);
}
void fidl::internal::WireClientImpl<::test_inheritance::Sub>::Foo(
    ::fidl::BufferSpan _request_buffer, ::fidl::StringView s,
    ::fidl::WireResponseContext<::test_inheritance::Sub::Foo>* _context) {
  ::fidl::WireRequest<::test_inheritance::Sub::Foo> _request{s};

  ::fidl::UnownedEncodedMessage<
      ::fidl::WireRequest<::test_inheritance::Sub::Foo>>
      _request_message(_request_buffer.data, _request_buffer.capacity,
                       &_request);
  ::fidl::internal::ClientBase::SendTwoWay(
      _request_message.GetOutgoingMessage(), _context);
}
::fidl::WireResult<::test_inheritance::Sub::Foo> fidl::internal::WireClientImpl<
    ::test_inheritance::Sub>::Foo_Sync(::fidl::StringView s) {
  return ::fidl::internal::ClientBase::MakeSyncCallWith(
      [&](std::shared_ptr<::fidl::internal::AnyTransport> _transport) {
        ::fidl::WireRequest<::test_inheritance::Sub::Foo> _request{s};
        return ::fidl::WireResult<::test_inheritance::Sub::Foo>(
            ::fidl::UnownedClientEnd<::test_inheritance::Sub>(
                _transport->get<fidl::internal::ChannelTransport>()),
            &_request);
      });
}
::fidl::WireUnownedResult<::test_inheritance::Sub::Foo>
fidl::internal::WireClientImpl<::test_inheritance::Sub>::Foo_Sync(
    ::fidl::BufferSpan _buffer_span, ::fidl::StringView s) {
  auto _allocator = ::fidl::internal::MakeAnyBufferAllocator(_buffer_span);
  return ::fidl::internal::ClientBase::MakeSyncCallWith(
      [&](std::shared_ptr<::fidl::internal::AnyTransport> _transport) {
        ::fidl::WireRequest<::test_inheritance::Sub::Foo> _request{s};
        return ::fidl::WireUnownedResult<::test_inheritance::Sub::Foo>(
            ::fidl::UnownedClientEnd<::test_inheritance::Sub>(
                _transport->get<fidl::internal::ChannelTransport>()),
            _allocator, &_request);
      });
}
void fidl::internal::WireWeakAsyncBufferClientImpl<::test_inheritance::Sub>::
    Foo(::fidl::StringView s,
        ::fidl::WireResponseContext<::test_inheritance::Sub::Foo>* _context) {
  constexpr uint32_t _buffer_size =
      ::fidl::AsyncClientMethodBufferSizeInChannel<
          ::test_inheritance::Sub::Foo>();
  ::fitx::result<::fidl::Error, ::fidl::BufferSpan> _allocation =
      _allocator().TryAllocate(_buffer_size);
  if (!_allocation.is_ok()) {
    ::fidl::OutgoingMessage _failure{_allocation.error_value()};
    _client_base()->SendTwoWay(_failure, _context);
    return;
  }

  ::fidl::WireRequest<::test_inheritance::Sub::Foo> _request{s};
  ::fidl::UnownedEncodedMessage<
      ::fidl::WireRequest<::test_inheritance::Sub::Foo>>
      _request_message(_allocation->data, _buffer_size, &_request);
  _client_base()->SendTwoWay(_request_message.GetOutgoingMessage(), _context);
}
#endif  // __Fuchsia__

#ifdef __Fuchsia__

::fidl::Result
fidl::WireSyncEventHandler<::test_inheritance::Sub>::HandleOneEvent(
    ::fidl::UnownedClientEnd<::test_inheritance::Sub> client_end) {
  zx_status_t status = client_end.channel()->wait_one(
      ZX_CHANNEL_READABLE | ZX_CHANNEL_PEER_CLOSED, ::zx::time::infinite(),
      nullptr);
  if (status != ZX_OK) {
    return ::fidl::Result::TransportError(
        status, ::fidl::internal::kErrorWaitOneFailed);
  }
  auto callback = [this](::fidl::IncomingMessage msg,
                         ::fidl::internal::IncomingTransportContext
                             incoming_transport_context) -> ::fidl::Result {
    if (msg.status() == ZX_ERR_BUFFER_TOO_SMALL) {
      // Message size is unexpectedly larger than calculated.
      // This can only be due to a newer version of the protocol defining a new
      // event, whose size exceeds the maximum of known events in the current
      // protocol.
      return ::fidl::Result::UnexpectedMessage(Unknown());
    }
    if (!msg.ok()) {
      return msg;
    }
    fidl_message_header_t* hdr = msg.header();
    switch (hdr->ordinal) {
      default: {
        return ::fidl::Result::UnexpectedMessage(Unknown());
      }
    }
  };
  return ::fidl::MessageRead(zx::unowned_channel(client_end.handle()),
                             callback);
}

std::optional<::fidl::UnbindInfo>
fidl::internal::WireEventDispatcher<::test_inheritance::Sub>::DispatchEvent(
    ::fidl::IncomingMessage& msg,
    ::fidl::internal::IncomingTransportContext transport_context) {
  switch (msg.header()->ordinal) {
    default:
      break;
  }
  return ::fidl::UnbindInfo::UnknownOrdinal();
}
#endif  // __Fuchsia__

#ifdef __Fuchsia__

constexpr ::fidl::internal::MethodEntry fidl::internal::WireServerDispatcher<
    ::test_inheritance::Sub>::entries_[] = {
    {
        ::test_inheritance::ksub_foo_Ordinal,
        [](void* interface, ::fidl::IncomingMessage&& msg,
           ::fidl::Transaction* txn) {
          ::fidl::DecodedMessage<
              ::fidl::WireRequest<::test_inheritance::Sub::Foo>>
              decoded{std::move(msg)};
          if (unlikely(!decoded.ok())) {
            return decoded.status();
          }
          auto* primary = decoded.PrimaryObject();
          ::fidl::internal::WireCompleter<::test_inheritance::Sub::Foo>::Sync
              completer(txn);
          reinterpret_cast<::fidl::WireServer<::test_inheritance::Sub>*>(
              interface)
              ->Foo(primary, completer);
          return ZX_OK;
        },
    },
};

const ::fidl::internal::MethodEntry* fidl::internal::WireServerDispatcher<
    ::test_inheritance::Sub>::entries_end_ = &entries_[1];

::fidl::DispatchResult
fidl::internal::WireServerDispatcher<::test_inheritance::Sub>::TryDispatch(
    ::fidl::WireServer<::test_inheritance::Sub>* impl,
    ::fidl::IncomingMessage& msg, ::fidl::Transaction* txn) {
  return ::fidl::internal::TryDispatch(impl, msg, txn, entries_, entries_end_);
}

void fidl::internal::WireServerDispatcher<::test_inheritance::Sub>::Dispatch(
    ::fidl::WireServer<::test_inheritance::Sub>* impl,
    ::fidl::IncomingMessage&& msg, ::fidl::Transaction* txn) {
  ::fidl::internal::Dispatch(impl, msg, txn, entries_, entries_end_);
}
void fidl::WireServer<::test_inheritance::Sub>::dispatch_message(
    ::fidl::IncomingMessage&& msg, ::fidl::Transaction* txn,
    ::fidl::internal::IncomingTransportContext transport_context) {
  ::fidl::internal::WireServerDispatcher<::test_inheritance::Sub>::Dispatch(
      this, std::move(msg), txn);
}
#endif  // __Fuchsia__

#ifdef __Fuchsia__
::fidl::Result fidl::internal::WireCompleterBase<
    ::test_inheritance::Sub::Foo>::Reply(int64_t y) {
  ::fidl::WireResponse<::test_inheritance::Sub::Foo> _response{y};
  FIDL_INTERNAL_DISABLE_AUTO_VAR_INIT
  ::fidl::OwnedEncodedMessage<
      ::fidl::WireResponse<::test_inheritance::Sub::Foo>>
      _response_message{::fidl::internal::AllowUnownedInputRef{}, &_response};
  return ::fidl::internal::WireCompleterBase<::test_inheritance::Sub::Foo>::
      SendReply(&_response_message.GetOutgoingMessage());
}

::fidl::Result
fidl::internal::WireCompleterBase<::test_inheritance::Sub::Foo>::Reply(
    ::fidl::BufferSpan _buffer, int64_t y) {
  ::fidl::WireResponse<::test_inheritance::Sub::Foo> _response{y};
  ::fidl::UnownedEncodedMessage<
      ::fidl::WireResponse<::test_inheritance::Sub::Foo>>
      _response_message(_buffer.data, _buffer.capacity, &_response);
  return CompleterBase::SendReply(&_response_message.GetOutgoingMessage());
}
#endif  // __Fuchsia__

void ::fidl::WireRequest<::test_inheritance::Sub::Foo>::_InitHeader() {
  fidl_init_txn_header(&_hdr, 0, ::test_inheritance::ksub_foo_Ordinal);
}

void ::fidl::WireResponse<::test_inheritance::Sub::Foo>::_InitHeader() {
  fidl_init_txn_header(&_hdr, 0, ::test_inheritance::ksub_foo_Ordinal);
}

#ifdef __Fuchsia__

#endif  // __Fuchsia__
