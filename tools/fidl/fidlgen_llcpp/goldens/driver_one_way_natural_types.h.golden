// WARNING: This file is machine generated by fidlgen.

#pragma once

#include <fidl/test.driveroneway/cpp/common_types.h>
#include <fidl/test.driveroneway/cpp/markers.h>
#include <lib/fidl/cpp/coding_traits.h>
#include <lib/fidl/cpp/internal/codable_base.h>
#include <lib/fidl/cpp/unified_messaging.h>

#include <cinttypes>
#include <string>

#ifdef __Fuchsia__

#include <lib/zx/channel.h>

#endif  // __Fuchsia__

namespace test_driveroneway {
class Payload;

class OneWaySendRequest;

extern "C" const fidl_type_t test_driveroneway_PayloadTable;

class Payload final : public ::fidl::internal::CodableBase<Payload> {
 private:
  struct Storage_;

 public:
  Payload(Storage_ storage) noexcept : storage_(std::move(storage)) {}
  Payload(uint32_t value) noexcept : storage_({.value = std::move(value)}) {}
  Payload() : Payload(Storage_{}) {}

  Payload(Payload&&) noexcept = default;
  Payload& operator=(Payload&&) noexcept = default;
  Payload(const Payload& other) noexcept : Payload(other.CloneStorage_()) {}
  Payload& operator=(const Payload& other) noexcept {
    storage_ = other.CloneStorage_();
    return *this;
  }

  uint32_t value() const { return storage_.value; }

  uint32_t& value() { return storage_.value; }

 private:
  friend ::fidl::internal::CodableBase<Payload>;
  friend ::fidl::CodingTraits<Payload>;
  Payload(::fidl::Decoder& decoder);
  template <typename Payload>
  friend auto ::fidl::internal::EncodeTransactionalMessageWithoutValidating(
      ::fidl::Encoder& encoder, Payload&& payload)
      -> ::fidl::HLCPPOutgoingMessage;
  void EncodeWithoutValidating(::fidl::Encoder& encoder, size_t offset);

  struct Storage_ final {
    uint32_t value{};
  };

  Storage_ storage_;
  Storage_ CloneStorage_() const;
};

extern "C" const fidl_type_t test_driveroneway_OneWaySendRequestTable;

class OneWaySendRequest final
    : public ::fidl::internal::CodableBase<OneWaySendRequest> {
 private:
  struct Storage_;

 public:
  OneWaySendRequest(Storage_ storage) noexcept : storage_(std::move(storage)) {}
  OneWaySendRequest(::test_driveroneway::Payload payload) noexcept
      : storage_({.payload = std::move(payload)}) {}
  OneWaySendRequest() : OneWaySendRequest(Storage_{}) {}

  OneWaySendRequest(OneWaySendRequest&&) noexcept = default;
  OneWaySendRequest& operator=(OneWaySendRequest&&) noexcept = default;
  OneWaySendRequest(const OneWaySendRequest& other) noexcept
      : OneWaySendRequest(other.CloneStorage_()) {}
  OneWaySendRequest& operator=(const OneWaySendRequest& other) noexcept {
    storage_ = other.CloneStorage_();
    return *this;
  }

  const ::test_driveroneway::Payload& payload() const {
    return storage_.payload;
  }

  ::test_driveroneway::Payload& payload() { return storage_.payload; }

 private:
  friend ::fidl::internal::CodableBase<OneWaySendRequest>;
  friend ::fidl::CodingTraits<OneWaySendRequest>;
  OneWaySendRequest(::fidl::Decoder& decoder);
  template <typename Payload>
  friend auto ::fidl::internal::EncodeTransactionalMessageWithoutValidating(
      ::fidl::Encoder& encoder, Payload&& payload)
      -> ::fidl::HLCPPOutgoingMessage;
  void EncodeWithoutValidating(::fidl::Encoder& encoder, size_t offset);

  struct Storage_ final {
    ::test_driveroneway::Payload payload{};
  };

  Storage_ storage_;
  Storage_ CloneStorage_() const;
};

}  // namespace test_driveroneway
namespace fidl {

#ifdef __Fuchsia__
extern "C" const fidl_type_t test_driveroneway_PayloadTable;

template <>
struct IsFidlType<::test_driveroneway::Payload> : public std::true_type {};

template <>
struct ::fidl::internal::TypeTraits<::test_driveroneway::Payload> final {
 public:
  static constexpr const fidl_type_t* kCodingTable =
      &test_driveroneway_PayloadTable;
};

template <>
struct CodingTraits<::test_driveroneway::Payload> {
  static constexpr size_t inline_size_v1_no_ee = 4;
  static constexpr size_t inline_size_v2 = 4;

  template <class EncoderImpl>
  static void Encode(
      EncoderImpl* encoder, ::test_driveroneway::Payload* value, size_t offset,
      cpp17::optional<HandleInformation> maybe_handle_info = cpp17::nullopt) {
    [[maybe_unused]] uint32_t field_offset;
    field_offset =
        encoder->wire_format() == ::fidl::internal::WireFormatVersion::kV1 ? 0
                                                                           : 0;
    ::fidl::Encode(encoder, &value->storage_.value, offset + field_offset);
  }

  template <typename DecoderImpl>
  static void Decode(DecoderImpl* decoder, ::test_driveroneway::Payload* value,
                     size_t offset) {
    ::fidl::Decode(decoder, &value->storage_.value, offset + 0);
  }
};
#endif  // __Fuchsia__

#ifdef __Fuchsia__
extern "C" const fidl_type_t test_driveroneway_OneWaySendRequestTable;

template <>
struct IsFidlType<::test_driveroneway::OneWaySendRequest>
    : public std::true_type {};

template <>
struct ::fidl::internal::TypeTraits<::test_driveroneway::OneWaySendRequest>
    final {
 public:
  static constexpr const fidl_type_t* kCodingTable =
      &test_driveroneway_OneWaySendRequestTable;
};

template <>
struct CodingTraits<::test_driveroneway::OneWaySendRequest> {
  static constexpr size_t inline_size_v1_no_ee = 8;
  static constexpr size_t inline_size_v2 = 8;

  template <class EncoderImpl>
  static void Encode(
      EncoderImpl* encoder, ::test_driveroneway::OneWaySendRequest* value,
      size_t offset,
      cpp17::optional<HandleInformation> maybe_handle_info = cpp17::nullopt) {
    [[maybe_unused]] uint32_t field_offset;
    field_offset =
        encoder->wire_format() == ::fidl::internal::WireFormatVersion::kV1 ? 0
                                                                           : 0;
    ::fidl::Encode(encoder, &value->storage_.payload, offset + field_offset);
  }

  template <typename DecoderImpl>
  static void Decode(DecoderImpl* decoder,
                     ::test_driveroneway::OneWaySendRequest* value,
                     size_t offset) {
    ::fidl::Decode(decoder, &value->storage_.payload, offset + 0);
  }
};
#endif  // __Fuchsia__

}  // namespace fidl
