// WARNING: This file is machine generated by fidlgen.

#pragma once

#include <fidl/test.driverhandle/cpp/common_types.h>
#include <fidl/test.driverhandle/cpp/markers.h>
#include <lib/fidl/cpp/coding_traits.h>
#include <lib/fidl/cpp/internal/codable_base.h>
#include <lib/fidl/cpp/unified_messaging.h>

#include <cinttypes>
#include <string>

#ifdef __Fuchsia__

#include <lib/fidl_driver/cpp/natural_types.h>
#include <lib/zx/channel.h>

#endif  // __Fuchsia__

namespace test_driverhandle {
class ServerEndWrapper;

class ClientEndWrapper;

#ifdef __Fuchsia__

extern "C" const fidl_type_t test_driverhandle_ServerEndWrapperTable;

class ServerEndWrapper final
    : public ::fidl::internal::CodableBase<ServerEndWrapper> {
 private:
  friend ::fidl::internal::CodableBase<ServerEndWrapper>;
  friend ::fidl::CodingTraits<ServerEndWrapper>;
  ServerEndWrapper(::fidl::Decoder& decoder);
  template <typename Payload>
  friend auto ::fidl::internal::EncodeTransactionalMessageWithoutValidating(
      ::fidl::Encoder& encoder, Payload&& payload)
      -> ::fidl::HLCPPOutgoingMessage;
  void EncodeWithoutValidating(::fidl::Encoder& encoder, size_t offset);

 public:
  struct Storage final {
    ::fdf::ServerEnd<::test_driverhandle::DriverProtocol> value{};
  };

  ServerEndWrapper(Storage storage) noexcept : storage_(std::move(storage)) {}
  ServerEndWrapper(
      ::fdf::ServerEnd<::test_driverhandle::DriverProtocol> value) noexcept
      : storage_({.value = std::move(value)}) {}
  ServerEndWrapper() : ServerEndWrapper(Storage{}) {}

  ServerEndWrapper(ServerEndWrapper&&) noexcept = default;
  ServerEndWrapper& operator=(ServerEndWrapper&&) noexcept = default;

  const ::fdf::ServerEnd<::test_driverhandle::DriverProtocol>& value() const {
    return storage_.value;
  }

  ::fdf::ServerEnd<::test_driverhandle::DriverProtocol>& value() {
    return storage_.value;
  }

 private:
  Storage storage_;
};

#endif  // __Fuchsia__

#ifdef __Fuchsia__

extern "C" const fidl_type_t test_driverhandle_ClientEndWrapperTable;

class ClientEndWrapper final
    : public ::fidl::internal::CodableBase<ClientEndWrapper> {
 private:
  friend ::fidl::internal::CodableBase<ClientEndWrapper>;
  friend ::fidl::CodingTraits<ClientEndWrapper>;
  ClientEndWrapper(::fidl::Decoder& decoder);
  template <typename Payload>
  friend auto ::fidl::internal::EncodeTransactionalMessageWithoutValidating(
      ::fidl::Encoder& encoder, Payload&& payload)
      -> ::fidl::HLCPPOutgoingMessage;
  void EncodeWithoutValidating(::fidl::Encoder& encoder, size_t offset);

 public:
  struct Storage final {
    ::fdf::ClientEnd<::test_driverhandle::DriverProtocol> value{};
  };

  ClientEndWrapper(Storage storage) noexcept : storage_(std::move(storage)) {}
  ClientEndWrapper(
      ::fdf::ClientEnd<::test_driverhandle::DriverProtocol> value) noexcept
      : storage_({.value = std::move(value)}) {}
  ClientEndWrapper() : ClientEndWrapper(Storage{}) {}

  ClientEndWrapper(ClientEndWrapper&&) noexcept = default;
  ClientEndWrapper& operator=(ClientEndWrapper&&) noexcept = default;

  const ::fdf::ClientEnd<::test_driverhandle::DriverProtocol>& value() const {
    return storage_.value;
  }

  ::fdf::ClientEnd<::test_driverhandle::DriverProtocol>& value() {
    return storage_.value;
  }

 private:
  Storage storage_;
};

#endif  // __Fuchsia__

}  // namespace test_driverhandle
namespace fidl {

#ifdef __Fuchsia__
extern "C" const fidl_type_t test_driverhandle_ServerEndWrapperTable;

template <>
struct IsResource<::test_driverhandle::ServerEndWrapper>
    : public std::true_type {};
template <>
struct IsFidlType<::test_driverhandle::ServerEndWrapper>
    : public std::true_type {};

template <>
struct ::fidl::internal::TypeTraits<::test_driverhandle::ServerEndWrapper>
    final {
 public:
  static constexpr const fidl_type_t* kCodingTable =
      &test_driverhandle_ServerEndWrapperTable;
};

template <>
struct CodingTraits<::test_driverhandle::ServerEndWrapper> {
  static constexpr size_t inline_size_v1_no_ee = 4;
  static constexpr size_t inline_size_v2 = 4;

  template <class EncoderImpl>
  static void Encode(
      EncoderImpl* encoder, ::test_driverhandle::ServerEndWrapper* value,
      size_t offset,
      cpp17::optional<HandleInformation> maybe_handle_info = cpp17::nullopt) {
    [[maybe_unused]] uint32_t field_offset;
    field_offset =
        encoder->wire_format() == ::fidl::internal::WireFormatVersion::kV1 ? 0
                                                                           : 0;
    ::fidl::Encode(encoder, &value->storage_.value, offset + field_offset,
                   ::fidl::HandleInformation{
                       .object_type = ZX_OBJ_TYPE_CHANNEL,
                       .rights = ZX_DEFAULT_CHANNEL_RIGHTS,
                   });
  }

  template <typename DecoderImpl>
  static void Decode(DecoderImpl* decoder,
                     ::test_driverhandle::ServerEndWrapper* value,
                     size_t offset) {
    ::fidl::Decode(decoder, &value->storage_.value, offset + 0);
  }
};
#endif  // __Fuchsia__

#ifdef __Fuchsia__
extern "C" const fidl_type_t test_driverhandle_ClientEndWrapperTable;

template <>
struct IsResource<::test_driverhandle::ClientEndWrapper>
    : public std::true_type {};
template <>
struct IsFidlType<::test_driverhandle::ClientEndWrapper>
    : public std::true_type {};

template <>
struct ::fidl::internal::TypeTraits<::test_driverhandle::ClientEndWrapper>
    final {
 public:
  static constexpr const fidl_type_t* kCodingTable =
      &test_driverhandle_ClientEndWrapperTable;
};

template <>
struct CodingTraits<::test_driverhandle::ClientEndWrapper> {
  static constexpr size_t inline_size_v1_no_ee = 4;
  static constexpr size_t inline_size_v2 = 4;

  template <class EncoderImpl>
  static void Encode(
      EncoderImpl* encoder, ::test_driverhandle::ClientEndWrapper* value,
      size_t offset,
      cpp17::optional<HandleInformation> maybe_handle_info = cpp17::nullopt) {
    [[maybe_unused]] uint32_t field_offset;
    field_offset =
        encoder->wire_format() == ::fidl::internal::WireFormatVersion::kV1 ? 0
                                                                           : 0;
    ::fidl::Encode(encoder, &value->storage_.value, offset + field_offset,
                   ::fidl::HandleInformation{
                       .object_type = ZX_OBJ_TYPE_CHANNEL,
                       .rights = ZX_DEFAULT_CHANNEL_RIGHTS,
                   });
  }

  template <typename DecoderImpl>
  static void Decode(DecoderImpl* decoder,
                     ::test_driverhandle::ClientEndWrapper* value,
                     size_t offset) {
    ::fidl::Decode(decoder, &value->storage_.value, offset + 0);
  }
};
#endif  // __Fuchsia__

}  // namespace fidl
