// WARNING: This file is machine generated by fidlgen.

#pragma once

#include <lib/fidl/llcpp/array.h>
#include <lib/fidl/llcpp/coding.h>
#include <lib/fidl/llcpp/envelope.h>
#include <lib/fidl/llcpp/message.h>
#include <lib/fidl/llcpp/message_storage.h>
#include <lib/fidl/llcpp/object_view.h>
#include <lib/fidl/llcpp/string_view.h>
#include <lib/fidl/llcpp/traits.h>
#include <lib/fidl/llcpp/wire_types.h>
#include <lib/stdcompat/optional.h>

#include <cinttypes>
#ifdef __Fuchsia__
#include <lib/zx/channel.h>

#endif  // __Fuchsia__

#include <fidl/test.bindingsdenylist/cpp/markers.h>

namespace test_bindingsdenylist {
namespace wire {
class OnlyLlcpp;

extern "C" const fidl_type_t test_bindingsdenylist_OnlyLlcppTable;

class OnlyLlcpp {
 public:
  OnlyLlcpp()
      : ordinal_(::test_bindingsdenylist::wire::OnlyLlcpp::Ordinal::Invalid),
        envelope_ {}
  {}

  OnlyLlcpp(const OnlyLlcpp&) = default;
  OnlyLlcpp& operator=(const OnlyLlcpp&) = default;
  OnlyLlcpp(OnlyLlcpp&&) = default;
  OnlyLlcpp& operator=(OnlyLlcpp&&) = default;

  enum class Tag : fidl_xunion_tag_t {
    kX = 1,  // 0x1
  };

  bool has_invalid_tag() const {
    return ordinal_ ==
           ::test_bindingsdenylist::wire::OnlyLlcpp::Ordinal::Invalid;
  }

  bool is_x() const {
    return ordinal_ == ::test_bindingsdenylist::wire::OnlyLlcpp::Ordinal::kX;
  }
  static OnlyLlcpp WithX(uint32_t val) {
    OnlyLlcpp result;
    result.set_x(std::move(val));
    return result;
  }

  void set_x(uint32_t elem) {
    ordinal_ = ::test_bindingsdenylist::wire::OnlyLlcpp::Ordinal::kX;
    envelope_.As<uint32_t>().set_data(std::move(elem));
  }

  uint32_t& mutable_x() {
    ZX_ASSERT(ordinal_ ==
              ::test_bindingsdenylist::wire::OnlyLlcpp::Ordinal::kX);
    return envelope_.As<uint32_t>().get_data();
  }
  const uint32_t& x() const {
    ZX_ASSERT(ordinal_ ==
              ::test_bindingsdenylist::wire::OnlyLlcpp::Ordinal::kX);
    return envelope_.As<uint32_t>().get_data();
  }
  ::test_bindingsdenylist::wire::OnlyLlcpp::Tag which() const {
    ZX_ASSERT(!has_invalid_tag());
    return static_cast<::test_bindingsdenylist::wire::OnlyLlcpp::Tag>(ordinal_);
  }

  static constexpr const fidl_type_t* Type =
      &test_bindingsdenylist_OnlyLlcppTable;
  static constexpr uint32_t MaxNumHandles = 0;
  static constexpr uint32_t PrimarySize = 16;
  static constexpr uint32_t PrimarySizeV1 = 24;
  [[maybe_unused]] static constexpr uint32_t MaxOutOfLine = 0;
  static constexpr uint32_t MaxOutOfLineV1 = 8;
  static constexpr bool HasPointer = true;

  class UnownedEncodedMessage;
  class OwnedEncodedMessage;
  class DecodedMessage;

 private:
  enum class Ordinal : fidl_xunion_tag_t {
    Invalid = 0,
    kX = 1,  // 0x1
  };

  static void SizeAndOffsetAssertionHelper();
  ::test_bindingsdenylist::wire::OnlyLlcpp::Ordinal ordinal_;
  FIDL_ALIGNDECL
  ::fidl::UntypedEnvelope envelope_;
};

constexpr uint32_t kAllBindings = 0u;

}  // namespace wire
}  // namespace test_bindingsdenylist
namespace fidl {

template <>
struct IsFidlType<::test_bindingsdenylist::wire::OnlyLlcpp>
    : public std::true_type {};
template <>
struct IsUnion<::test_bindingsdenylist::wire::OnlyLlcpp>
    : public std::true_type {};
static_assert(
    std::is_standard_layout_v<::test_bindingsdenylist::wire::OnlyLlcpp>);

}  // namespace fidl
