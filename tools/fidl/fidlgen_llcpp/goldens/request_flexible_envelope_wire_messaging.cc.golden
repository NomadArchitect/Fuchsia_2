// WARNING: This file is machine generated by fidlgen.

#include <fidl/fidl.test.requestflexibleenvelope/cpp/wire_messaging.h>

#include <memory>

namespace fidl_test_requestflexibleenvelope {
[[maybe_unused]] constexpr uint64_t
    kProtocol_RequestStrictResponseFlexible_Ordinal = 4346871690266280218lu;

extern "C" const fidl_type_t
    fidl_test_requestflexibleenvelope_ProtocolRequestStrictResponseFlexibleRequestTable;

extern "C" const fidl_type_t
    fidl_test_requestflexibleenvelope_ProtocolRequestStrictResponseFlexibleResponseTable;

[[maybe_unused]] constexpr uint64_t
    kProtocol_RequestFlexibleResponseStrict_Ordinal = 4374294377437089654lu;

extern "C" const fidl_type_t
    fidl_test_requestflexibleenvelope_ProtocolRequestFlexibleResponseStrictRequestTable;

extern "C" const fidl_type_t
    fidl_test_requestflexibleenvelope_ProtocolRequestFlexibleResponseStrictResponseTable;
#ifdef __Fuchsia__
}  // namespace fidl_test_requestflexibleenvelope
::fidl::WireResult<::fidl_test_requestflexibleenvelope::Protocol::
                       RequestStrictResponseFlexible>::
    WireResult(
        ::fidl::UnownedClientEnd<::fidl_test_requestflexibleenvelope::Protocol>
            client,
        ::fidl::WireRequest<::fidl_test_requestflexibleenvelope::Protocol::
                                RequestStrictResponseFlexible>* request) {
  FIDL_INTERNAL_DISABLE_AUTO_VAR_INIT
  ::fidl::OwnedEncodedMessage<
      ::fidl::WireRequest<::fidl_test_requestflexibleenvelope::Protocol::
                              RequestStrictResponseFlexible>>
      request_message(::fidl::internal::AllowUnownedInputRef{}, request);
  auto& outgoing = request_message.GetOutgoingMessage();
  outgoing
      .Call<::fidl::WireResponse<::fidl_test_requestflexibleenvelope::Protocol::
                                     RequestStrictResponseFlexible>>(
          client.channel(), bytes_.data(),
          static_cast<uint32_t>(bytes_.size()));
  SetResult(outgoing);
}

::fidl::WireResult<::fidl_test_requestflexibleenvelope::Protocol::
                       RequestStrictResponseFlexible>::
    WireResult(
        ::fidl::UnownedClientEnd<::fidl_test_requestflexibleenvelope::Protocol>
            client,
        ::fidl::WireRequest<::fidl_test_requestflexibleenvelope::Protocol::
                                RequestStrictResponseFlexible>* request,
        zx_time_t deadline) {
  FIDL_INTERNAL_DISABLE_AUTO_VAR_INIT
  ::fidl::OwnedEncodedMessage<
      ::fidl::WireRequest<::fidl_test_requestflexibleenvelope::Protocol::
                              RequestStrictResponseFlexible>>
      request_message(::fidl::internal::AllowUnownedInputRef{}, request);
  auto& outgoing = request_message.GetOutgoingMessage();
  outgoing
      .Call<::fidl::WireResponse<::fidl_test_requestflexibleenvelope::Protocol::
                                     RequestStrictResponseFlexible>>(
          client.channel(), bytes_.data(), static_cast<uint32_t>(bytes_.size()),
          fidl::CallOptions{.deadline = deadline});
  SetResult(outgoing);
}
namespace fidl_test_requestflexibleenvelope {
#endif  // __Fuchsia__

#ifdef __Fuchsia__
}  // namespace fidl_test_requestflexibleenvelope
::fidl::WireUnownedResult<::fidl_test_requestflexibleenvelope::Protocol::
                              RequestStrictResponseFlexible>::
    WireUnownedResult(
        ::fidl::UnownedClientEnd<::fidl_test_requestflexibleenvelope::Protocol>
            client_end,
        ::fidl::internal::AnyBufferAllocator& allocator,
        ::fidl::WireRequest<::fidl_test_requestflexibleenvelope::Protocol::
                                RequestStrictResponseFlexible>* request) {
  constexpr uint32_t buffer_size = ::fidl::SyncClientMethodBufferSizeInChannel<
      ::fidl_test_requestflexibleenvelope::Protocol::
          RequestStrictResponseFlexible>();
  uint8_t* buffer = allocator.Allocate(buffer_size);
  if (!buffer) {
    ::fidl::Result::operator=(::fidl::Result::EncodeError(
        ZX_ERR_BUFFER_TOO_SMALL,
        ::fidl::internal::kCallerAllocatedBufferTooSmall));
    return;
  }
  constexpr uint32_t request_byte_capacity = ::fidl::MaxSizeInChannel<
      ::fidl::WireRequest<::fidl_test_requestflexibleenvelope::Protocol::
                              RequestStrictResponseFlexible>,
      ::fidl::MessageDirection::kSending>();
  uint8_t* request_bytes = buffer;
  static_assert(buffer_size > request_byte_capacity);
  uint32_t response_byte_capacity = buffer_size - request_byte_capacity;
  uint8_t* response_bytes = &buffer[request_byte_capacity];

  ::fidl::UnownedEncodedMessage<
      ::fidl::WireRequest<::fidl_test_requestflexibleenvelope::Protocol::
                              RequestStrictResponseFlexible>>
      request_message(request_bytes, request_byte_capacity, request);
  auto& outgoing = request_message.GetOutgoingMessage();
  outgoing
      .Call<::fidl::WireResponse<::fidl_test_requestflexibleenvelope::Protocol::
                                     RequestStrictResponseFlexible>>(
          client_end.channel(), response_bytes, response_byte_capacity);
  bytes_ = response_bytes;
  ::fidl::Result::operator=(outgoing);
}
namespace fidl_test_requestflexibleenvelope {
#endif  // __Fuchsia__

#ifdef __Fuchsia__
}  // namespace fidl_test_requestflexibleenvelope
::fidl::WireResult<::fidl_test_requestflexibleenvelope::Protocol::
                       RequestFlexibleResponseStrict>::
    WireResult(
        ::fidl::UnownedClientEnd<::fidl_test_requestflexibleenvelope::Protocol>
            client,
        ::fidl::WireRequest<::fidl_test_requestflexibleenvelope::Protocol::
                                RequestFlexibleResponseStrict>* request) {
  FIDL_INTERNAL_DISABLE_AUTO_VAR_INIT
  ::fidl::OwnedEncodedMessage<
      ::fidl::WireRequest<::fidl_test_requestflexibleenvelope::Protocol::
                              RequestFlexibleResponseStrict>>
      request_message(::fidl::internal::AllowUnownedInputRef{}, request);
  auto& outgoing = request_message.GetOutgoingMessage();
  outgoing
      .Call<::fidl::WireResponse<::fidl_test_requestflexibleenvelope::Protocol::
                                     RequestFlexibleResponseStrict>>(
          client.channel(), bytes_.data(),
          static_cast<uint32_t>(bytes_.size()));
  SetResult(outgoing);
}

::fidl::WireResult<::fidl_test_requestflexibleenvelope::Protocol::
                       RequestFlexibleResponseStrict>::
    WireResult(
        ::fidl::UnownedClientEnd<::fidl_test_requestflexibleenvelope::Protocol>
            client,
        ::fidl::WireRequest<::fidl_test_requestflexibleenvelope::Protocol::
                                RequestFlexibleResponseStrict>* request,
        zx_time_t deadline) {
  FIDL_INTERNAL_DISABLE_AUTO_VAR_INIT
  ::fidl::OwnedEncodedMessage<
      ::fidl::WireRequest<::fidl_test_requestflexibleenvelope::Protocol::
                              RequestFlexibleResponseStrict>>
      request_message(::fidl::internal::AllowUnownedInputRef{}, request);
  auto& outgoing = request_message.GetOutgoingMessage();
  outgoing
      .Call<::fidl::WireResponse<::fidl_test_requestflexibleenvelope::Protocol::
                                     RequestFlexibleResponseStrict>>(
          client.channel(), bytes_.data(), static_cast<uint32_t>(bytes_.size()),
          fidl::CallOptions{.deadline = deadline});
  SetResult(outgoing);
}
namespace fidl_test_requestflexibleenvelope {
#endif  // __Fuchsia__

#ifdef __Fuchsia__
}  // namespace fidl_test_requestflexibleenvelope
::fidl::WireUnownedResult<::fidl_test_requestflexibleenvelope::Protocol::
                              RequestFlexibleResponseStrict>::
    WireUnownedResult(
        ::fidl::UnownedClientEnd<::fidl_test_requestflexibleenvelope::Protocol>
            client_end,
        ::fidl::internal::AnyBufferAllocator& allocator,
        ::fidl::WireRequest<::fidl_test_requestflexibleenvelope::Protocol::
                                RequestFlexibleResponseStrict>* request) {
  constexpr uint32_t buffer_size = ::fidl::SyncClientMethodBufferSizeInChannel<
      ::fidl_test_requestflexibleenvelope::Protocol::
          RequestFlexibleResponseStrict>();
  uint8_t* buffer = allocator.Allocate(buffer_size);
  if (!buffer) {
    ::fidl::Result::operator=(::fidl::Result::EncodeError(
        ZX_ERR_BUFFER_TOO_SMALL,
        ::fidl::internal::kCallerAllocatedBufferTooSmall));
    return;
  }
  constexpr uint32_t request_byte_capacity = ::fidl::MaxSizeInChannel<
      ::fidl::WireRequest<::fidl_test_requestflexibleenvelope::Protocol::
                              RequestFlexibleResponseStrict>,
      ::fidl::MessageDirection::kSending>();
  uint8_t* request_bytes = buffer;
  static_assert(buffer_size > request_byte_capacity);
  uint32_t response_byte_capacity = buffer_size - request_byte_capacity;
  uint8_t* response_bytes = &buffer[request_byte_capacity];

  ::fidl::UnownedEncodedMessage<
      ::fidl::WireRequest<::fidl_test_requestflexibleenvelope::Protocol::
                              RequestFlexibleResponseStrict>>
      request_message(request_bytes, request_byte_capacity, request);
  auto& outgoing = request_message.GetOutgoingMessage();
  outgoing
      .Call<::fidl::WireResponse<::fidl_test_requestflexibleenvelope::Protocol::
                                     RequestFlexibleResponseStrict>>(
          client_end.channel(), response_bytes, response_byte_capacity);
  bytes_ = response_bytes;
  ::fidl::Result::operator=(outgoing);
}
namespace fidl_test_requestflexibleenvelope {
#endif  // __Fuchsia__

}  // namespace fidl_test_requestflexibleenvelope
#ifdef __Fuchsia__

::fidl::WireResponseContext<
    ::fidl_test_requestflexibleenvelope::Protocol::
        RequestStrictResponseFlexible>::WireResponseContext()
    : ::fidl::internal::ResponseContext(
          ::fidl_test_requestflexibleenvelope::
              kProtocol_RequestStrictResponseFlexible_Ordinal) {}

::cpp17::optional<::fidl::UnbindInfo>
fidl::WireResponseContext<::fidl_test_requestflexibleenvelope::Protocol::
                              RequestStrictResponseFlexible>::
    OnRawResult(::fidl::IncomingMessage&& msg,
                const internal::IncomingTransportContext* transport_context) {
  if (unlikely(!msg.ok())) {
    ::fidl::WireUnownedResult<::fidl_test_requestflexibleenvelope::Protocol::
                                  RequestStrictResponseFlexible>
        result{msg.error()};
    OnResult(result);
    return cpp17::nullopt;
  }
  ::fidl::DecodedMessage<
      ::fidl::WireResponse<::fidl_test_requestflexibleenvelope::Protocol::
                               RequestStrictResponseFlexible>>
      decoded{std::move(msg)};
  ::fidl::Result maybe_error = decoded;
  ::fidl::WireUnownedResult<::fidl_test_requestflexibleenvelope::Protocol::
                                RequestStrictResponseFlexible>
      result{std::move(decoded)};
  OnResult(result);
  if (unlikely(!maybe_error.ok())) {
    return ::fidl::UnbindInfo(maybe_error);
  }
  return cpp17::nullopt;
}
#endif  // __Fuchsia__

#ifdef __Fuchsia__

::fidl::WireResponseContext<
    ::fidl_test_requestflexibleenvelope::Protocol::
        RequestFlexibleResponseStrict>::WireResponseContext()
    : ::fidl::internal::ResponseContext(
          ::fidl_test_requestflexibleenvelope::
              kProtocol_RequestFlexibleResponseStrict_Ordinal) {}

::cpp17::optional<::fidl::UnbindInfo>
fidl::WireResponseContext<::fidl_test_requestflexibleenvelope::Protocol::
                              RequestFlexibleResponseStrict>::
    OnRawResult(::fidl::IncomingMessage&& msg,
                const internal::IncomingTransportContext* transport_context) {
  if (unlikely(!msg.ok())) {
    ::fidl::WireUnownedResult<::fidl_test_requestflexibleenvelope::Protocol::
                                  RequestFlexibleResponseStrict>
        result{msg.error()};
    OnResult(result);
    return cpp17::nullopt;
  }
  ::fidl::DecodedMessage<
      ::fidl::WireResponse<::fidl_test_requestflexibleenvelope::Protocol::
                               RequestFlexibleResponseStrict>>
      decoded{std::move(msg)};
  ::fidl::Result maybe_error = decoded;
  ::fidl::WireUnownedResult<::fidl_test_requestflexibleenvelope::Protocol::
                                RequestFlexibleResponseStrict>
      result{std::move(decoded)};
  OnResult(result);
  if (unlikely(!maybe_error.ok())) {
    return ::fidl::UnbindInfo(maybe_error);
  }
  return cpp17::nullopt;
}
#endif  // __Fuchsia__

#ifdef __Fuchsia__

void fidl::internal::WireClientImpl<
    ::fidl_test_requestflexibleenvelope::Protocol>::
    RequestStrictResponseFlexible(
        ::fidl_test_requestflexibleenvelope::wire::StrictFoo s,
        ::fidl::WireClientCallback<::fidl_test_requestflexibleenvelope::
                                       Protocol::RequestStrictResponseFlexible>
            _cb) {
  using Callback = decltype(_cb);
  class ResponseContext final
      : public ::fidl::WireResponseContext<
            ::fidl_test_requestflexibleenvelope::Protocol::
                RequestStrictResponseFlexible> {
   public:
    ResponseContext(Callback cb) : cb_(std::move(cb)) {}

    void OnResult(::fidl::WireUnownedResult<
                  ::fidl_test_requestflexibleenvelope::Protocol::
                      RequestStrictResponseFlexible>& result) override {
      cb_(result);
      delete this;
    }

   private:
    Callback cb_;
  };

  auto* _context = new ResponseContext(std::move(_cb));
  ::fidl::WireRequest<::fidl_test_requestflexibleenvelope::Protocol::
                          RequestStrictResponseFlexible>
      _request{s};
  FIDL_INTERNAL_DISABLE_AUTO_VAR_INIT
  ::fidl::WireRequest<::fidl_test_requestflexibleenvelope::Protocol::
                          RequestStrictResponseFlexible>::OwnedEncodedMessage
      _request_message(::fidl::internal::AllowUnownedInputRef{}, &_request);
  ::fidl::internal::ClientBase::SendTwoWay(
      _request_message.GetOutgoingMessage(), _context);
}

void fidl::internal::WireClientImpl<
    ::fidl_test_requestflexibleenvelope::Protocol>::
    RequestStrictResponseFlexible(
        ::fidl_test_requestflexibleenvelope::wire::StrictFoo s,
        ::fit::callback<void(
            ::fidl::WireResponse<::fidl_test_requestflexibleenvelope::Protocol::
                                     RequestStrictResponseFlexible>* response)>
            _cb) {
  using Callback = decltype(_cb);
  class ResponseContext final
      : public ::fidl::WireResponseContext<
            ::fidl_test_requestflexibleenvelope::Protocol::
                RequestStrictResponseFlexible> {
   public:
    ResponseContext(Callback cb) : cb_(std::move(cb)) {}

    void OnResult(::fidl::WireUnownedResult<
                  ::fidl_test_requestflexibleenvelope::Protocol::
                      RequestStrictResponseFlexible>& result) override {
      if (result.ok()) {
        ::fidl::WireResponse<::fidl_test_requestflexibleenvelope::Protocol::
                                 RequestStrictResponseFlexible>* response =
            result.Unwrap();
        cb_(response);
      }
      delete this;
    }

   private:
    Callback cb_;
  };

  auto* _context = new ResponseContext(std::move(_cb));
  ::fidl::WireRequest<::fidl_test_requestflexibleenvelope::Protocol::
                          RequestStrictResponseFlexible>
      _request{s};
  FIDL_INTERNAL_DISABLE_AUTO_VAR_INIT
  ::fidl::WireRequest<::fidl_test_requestflexibleenvelope::Protocol::
                          RequestStrictResponseFlexible>::OwnedEncodedMessage
      _request_message(::fidl::internal::AllowUnownedInputRef{}, &_request);
  ::fidl::internal::ClientBase::SendTwoWay(
      _request_message.GetOutgoingMessage(), _context);
}
void fidl::internal::WireClientImpl<
    ::fidl_test_requestflexibleenvelope::Protocol>::
    RequestStrictResponseFlexible(
        ::fidl::BufferSpan _request_buffer,
        ::fidl_test_requestflexibleenvelope::wire::StrictFoo s,
        ::fidl::WireResponseContext<
            ::fidl_test_requestflexibleenvelope::Protocol::
                RequestStrictResponseFlexible>* _context) {
  ::fidl::WireRequest<::fidl_test_requestflexibleenvelope::Protocol::
                          RequestStrictResponseFlexible>
      _request{s};

  ::fidl::WireRequest<::fidl_test_requestflexibleenvelope::Protocol::
                          RequestStrictResponseFlexible>::UnownedEncodedMessage
      _request_message(_request_buffer.data, _request_buffer.capacity,
                       &_request);
  ::fidl::internal::ClientBase::SendTwoWay(
      _request_message.GetOutgoingMessage(), _context);
}
::fidl::WireResult<::fidl_test_requestflexibleenvelope::Protocol::
                       RequestStrictResponseFlexible>
fidl::internal::WireClientImpl<::fidl_test_requestflexibleenvelope::Protocol>::
    RequestStrictResponseFlexible_Sync(
        ::fidl_test_requestflexibleenvelope::wire::StrictFoo s) {
  return ::fidl::internal::ClientBase::MakeSyncCallWith(
      [&](std::shared_ptr<::fidl::internal::AnyTransport> _transport) {
        ::fidl::WireRequest<::fidl_test_requestflexibleenvelope::Protocol::
                                RequestStrictResponseFlexible>
            _request{s};
        return ::fidl::WireResult<::fidl_test_requestflexibleenvelope::
                                      Protocol::RequestStrictResponseFlexible>(
            ::fidl::UnownedClientEnd<
                ::fidl_test_requestflexibleenvelope::Protocol>(
                _transport->get<fidl::internal::ChannelTransport>()),
            &_request);
      });
}
::fidl::WireUnownedResult<::fidl_test_requestflexibleenvelope::Protocol::
                              RequestStrictResponseFlexible>
fidl::internal::WireClientImpl<::fidl_test_requestflexibleenvelope::Protocol>::
    RequestStrictResponseFlexible_Sync(
        ::fidl::BufferSpan _buffer_span,
        ::fidl_test_requestflexibleenvelope::wire::StrictFoo s) {
  auto _allocator = ::fidl::internal::MakeAnyBufferAllocator(_buffer_span);
  return ::fidl::internal::ClientBase::MakeSyncCallWith(
      [&](std::shared_ptr<::fidl::internal::AnyTransport> _transport) {
        ::fidl::WireRequest<::fidl_test_requestflexibleenvelope::Protocol::
                                RequestStrictResponseFlexible>
            _request{s};
        return ::fidl::WireUnownedResult<
            ::fidl_test_requestflexibleenvelope::Protocol::
                RequestStrictResponseFlexible>(
            ::fidl::UnownedClientEnd<
                ::fidl_test_requestflexibleenvelope::Protocol>(
                _transport->get<fidl::internal::ChannelTransport>()),
            _allocator, &_request);
      });
}
void fidl::internal::WireClientImpl<
    ::fidl_test_requestflexibleenvelope::Protocol>::
    RequestFlexibleResponseStrict(
        ::fidl_test_requestflexibleenvelope::wire::FlexibleFoo s,
        ::fidl::WireClientCallback<::fidl_test_requestflexibleenvelope::
                                       Protocol::RequestFlexibleResponseStrict>
            _cb) {
  using Callback = decltype(_cb);
  class ResponseContext final
      : public ::fidl::WireResponseContext<
            ::fidl_test_requestflexibleenvelope::Protocol::
                RequestFlexibleResponseStrict> {
   public:
    ResponseContext(Callback cb) : cb_(std::move(cb)) {}

    void OnResult(::fidl::WireUnownedResult<
                  ::fidl_test_requestflexibleenvelope::Protocol::
                      RequestFlexibleResponseStrict>& result) override {
      cb_(result);
      delete this;
    }

   private:
    Callback cb_;
  };

  auto* _context = new ResponseContext(std::move(_cb));
  ::fidl::WireRequest<::fidl_test_requestflexibleenvelope::Protocol::
                          RequestFlexibleResponseStrict>
      _request{s};
  FIDL_INTERNAL_DISABLE_AUTO_VAR_INIT
  ::fidl::WireRequest<::fidl_test_requestflexibleenvelope::Protocol::
                          RequestFlexibleResponseStrict>::OwnedEncodedMessage
      _request_message(::fidl::internal::AllowUnownedInputRef{}, &_request);
  ::fidl::internal::ClientBase::SendTwoWay(
      _request_message.GetOutgoingMessage(), _context);
}

void fidl::internal::WireClientImpl<
    ::fidl_test_requestflexibleenvelope::Protocol>::
    RequestFlexibleResponseStrict(
        ::fidl_test_requestflexibleenvelope::wire::FlexibleFoo s,
        ::fit::callback<void(
            ::fidl::WireResponse<::fidl_test_requestflexibleenvelope::Protocol::
                                     RequestFlexibleResponseStrict>* response)>
            _cb) {
  using Callback = decltype(_cb);
  class ResponseContext final
      : public ::fidl::WireResponseContext<
            ::fidl_test_requestflexibleenvelope::Protocol::
                RequestFlexibleResponseStrict> {
   public:
    ResponseContext(Callback cb) : cb_(std::move(cb)) {}

    void OnResult(::fidl::WireUnownedResult<
                  ::fidl_test_requestflexibleenvelope::Protocol::
                      RequestFlexibleResponseStrict>& result) override {
      if (result.ok()) {
        ::fidl::WireResponse<::fidl_test_requestflexibleenvelope::Protocol::
                                 RequestFlexibleResponseStrict>* response =
            result.Unwrap();
        cb_(response);
      }
      delete this;
    }

   private:
    Callback cb_;
  };

  auto* _context = new ResponseContext(std::move(_cb));
  ::fidl::WireRequest<::fidl_test_requestflexibleenvelope::Protocol::
                          RequestFlexibleResponseStrict>
      _request{s};
  FIDL_INTERNAL_DISABLE_AUTO_VAR_INIT
  ::fidl::WireRequest<::fidl_test_requestflexibleenvelope::Protocol::
                          RequestFlexibleResponseStrict>::OwnedEncodedMessage
      _request_message(::fidl::internal::AllowUnownedInputRef{}, &_request);
  ::fidl::internal::ClientBase::SendTwoWay(
      _request_message.GetOutgoingMessage(), _context);
}
void fidl::internal::WireClientImpl<
    ::fidl_test_requestflexibleenvelope::Protocol>::
    RequestFlexibleResponseStrict(
        ::fidl::BufferSpan _request_buffer,
        ::fidl_test_requestflexibleenvelope::wire::FlexibleFoo s,
        ::fidl::WireResponseContext<
            ::fidl_test_requestflexibleenvelope::Protocol::
                RequestFlexibleResponseStrict>* _context) {
  ::fidl::WireRequest<::fidl_test_requestflexibleenvelope::Protocol::
                          RequestFlexibleResponseStrict>
      _request{s};

  ::fidl::WireRequest<::fidl_test_requestflexibleenvelope::Protocol::
                          RequestFlexibleResponseStrict>::UnownedEncodedMessage
      _request_message(_request_buffer.data, _request_buffer.capacity,
                       &_request);
  ::fidl::internal::ClientBase::SendTwoWay(
      _request_message.GetOutgoingMessage(), _context);
}
::fidl::WireResult<::fidl_test_requestflexibleenvelope::Protocol::
                       RequestFlexibleResponseStrict>
fidl::internal::WireClientImpl<::fidl_test_requestflexibleenvelope::Protocol>::
    RequestFlexibleResponseStrict_Sync(
        ::fidl_test_requestflexibleenvelope::wire::FlexibleFoo s) {
  return ::fidl::internal::ClientBase::MakeSyncCallWith(
      [&](std::shared_ptr<::fidl::internal::AnyTransport> _transport) {
        ::fidl::WireRequest<::fidl_test_requestflexibleenvelope::Protocol::
                                RequestFlexibleResponseStrict>
            _request{s};
        return ::fidl::WireResult<::fidl_test_requestflexibleenvelope::
                                      Protocol::RequestFlexibleResponseStrict>(
            ::fidl::UnownedClientEnd<
                ::fidl_test_requestflexibleenvelope::Protocol>(
                _transport->get<fidl::internal::ChannelTransport>()),
            &_request);
      });
}
::fidl::WireUnownedResult<::fidl_test_requestflexibleenvelope::Protocol::
                              RequestFlexibleResponseStrict>
fidl::internal::WireClientImpl<::fidl_test_requestflexibleenvelope::Protocol>::
    RequestFlexibleResponseStrict_Sync(
        ::fidl::BufferSpan _buffer_span,
        ::fidl_test_requestflexibleenvelope::wire::FlexibleFoo s) {
  auto _allocator = ::fidl::internal::MakeAnyBufferAllocator(_buffer_span);
  return ::fidl::internal::ClientBase::MakeSyncCallWith(
      [&](std::shared_ptr<::fidl::internal::AnyTransport> _transport) {
        ::fidl::WireRequest<::fidl_test_requestflexibleenvelope::Protocol::
                                RequestFlexibleResponseStrict>
            _request{s};
        return ::fidl::WireUnownedResult<
            ::fidl_test_requestflexibleenvelope::Protocol::
                RequestFlexibleResponseStrict>(
            ::fidl::UnownedClientEnd<
                ::fidl_test_requestflexibleenvelope::Protocol>(
                _transport->get<fidl::internal::ChannelTransport>()),
            _allocator, &_request);
      });
}

std::optional<::fidl::UnbindInfo>
fidl::internal::WireClientImpl<::fidl_test_requestflexibleenvelope::Protocol>::
    DispatchEvent(fidl::IncomingMessage& msg,
                  ::fidl::internal::AsyncEventHandler* maybe_event_handler,
                  const internal::IncomingTransportContext* transport_context) {
  return ::fidl::UnbindInfo::UnknownOrdinal();
}
#endif  // __Fuchsia__

#ifdef __Fuchsia__

constexpr ::fidl::internal::MethodEntry fidl::internal::WireServerDispatcher<
    ::fidl_test_requestflexibleenvelope::Protocol>::entries_[] = {
    {
        ::fidl_test_requestflexibleenvelope::
            kProtocol_RequestStrictResponseFlexible_Ordinal,
        [](void* interface, ::fidl::IncomingMessage&& msg,
           ::fidl::Transaction* txn) {
          ::fidl::DecodedMessage<
              ::fidl::WireRequest<::fidl_test_requestflexibleenvelope::
                                      Protocol::RequestStrictResponseFlexible>>
              decoded{std::move(msg)};
          if (unlikely(!decoded.ok())) {
            return decoded.status();
          }
          auto* primary = decoded.PrimaryObject();
          ::fidl::internal::WireCompleter<
              ::fidl_test_requestflexibleenvelope::Protocol::
                  RequestStrictResponseFlexible>::Sync completer(txn);
          reinterpret_cast<::fidl::WireServer<
              ::fidl_test_requestflexibleenvelope::Protocol>*>(interface)
              ->RequestStrictResponseFlexible(primary, completer);
          return ZX_OK;
        },
    },
    {
        ::fidl_test_requestflexibleenvelope::
            kProtocol_RequestFlexibleResponseStrict_Ordinal,
        [](void* interface, ::fidl::IncomingMessage&& msg,
           ::fidl::Transaction* txn) {
          ::fidl::DecodedMessage<
              ::fidl::WireRequest<::fidl_test_requestflexibleenvelope::
                                      Protocol::RequestFlexibleResponseStrict>>
              decoded{std::move(msg)};
          if (unlikely(!decoded.ok())) {
            return decoded.status();
          }
          auto* primary = decoded.PrimaryObject();
          ::fidl::internal::WireCompleter<
              ::fidl_test_requestflexibleenvelope::Protocol::
                  RequestFlexibleResponseStrict>::Sync completer(txn);
          reinterpret_cast<::fidl::WireServer<
              ::fidl_test_requestflexibleenvelope::Protocol>*>(interface)
              ->RequestFlexibleResponseStrict(primary, completer);
          return ZX_OK;
        },
    },
};

const ::fidl::internal::MethodEntry* fidl::internal::WireServerDispatcher<
    ::fidl_test_requestflexibleenvelope::Protocol>::entries_end_ = &entries_[2];

::fidl::DispatchResult fidl::internal::WireServerDispatcher<
    ::fidl_test_requestflexibleenvelope::Protocol>::
    TryDispatch(
        ::fidl::WireServer<::fidl_test_requestflexibleenvelope::Protocol>* impl,
        ::fidl::IncomingMessage& msg, ::fidl::Transaction* txn) {
  return ::fidl::internal::TryDispatch(impl, msg, txn, entries_, entries_end_);
}

void fidl::internal::WireServerDispatcher<
    ::fidl_test_requestflexibleenvelope::Protocol>::
    Dispatch(
        ::fidl::WireServer<::fidl_test_requestflexibleenvelope::Protocol>* impl,
        ::fidl::IncomingMessage&& msg, ::fidl::Transaction* txn) {
  ::fidl::internal::Dispatch(impl, msg, txn, entries_, entries_end_);
}
void fidl::WireServer<::fidl_test_requestflexibleenvelope::Protocol>::
    dispatch_message(
        ::fidl::IncomingMessage&& msg, ::fidl::Transaction* txn,
        const ::fidl::internal::IncomingTransportContext* transport_context) {
  ::fidl::internal::WireServerDispatcher<
      ::fidl_test_requestflexibleenvelope::Protocol>::Dispatch(this,
                                                               std::move(msg),
                                                               txn);
}
#endif  // __Fuchsia__

#ifdef __Fuchsia__
::fidl::Result
fidl::internal::WireCompleterBase<::fidl_test_requestflexibleenvelope::
                                      Protocol::RequestStrictResponseFlexible>::
    Reply(::fidl_test_requestflexibleenvelope::wire::FlexibleFoo f) {
  ::fidl::WireResponse<::fidl_test_requestflexibleenvelope::Protocol::
                           RequestStrictResponseFlexible>
      _response{f};
  FIDL_INTERNAL_DISABLE_AUTO_VAR_INIT
  ::fidl::OwnedEncodedMessage<
      ::fidl::WireResponse<::fidl_test_requestflexibleenvelope::Protocol::
                               RequestStrictResponseFlexible>>
      _response_message{::fidl::internal::AllowUnownedInputRef{}, &_response};
  return ::fidl::internal::WireCompleterBase<
      ::fidl_test_requestflexibleenvelope::Protocol::
          RequestStrictResponseFlexible>::SendReply(&_response_message
                                                         .GetOutgoingMessage());
}

::fidl::Result
fidl::internal::WireCompleterBase<::fidl_test_requestflexibleenvelope::
                                      Protocol::RequestStrictResponseFlexible>::
    Reply(::fidl::BufferSpan _buffer,
          ::fidl_test_requestflexibleenvelope::wire::FlexibleFoo f) {
  ::fidl::WireResponse<::fidl_test_requestflexibleenvelope::Protocol::
                           RequestStrictResponseFlexible>
      _response{f};
  ::fidl::WireResponse<::fidl_test_requestflexibleenvelope::Protocol::
                           RequestStrictResponseFlexible>::UnownedEncodedMessage
      _response_message(_buffer.data, _buffer.capacity, &_response);
  return CompleterBase::SendReply(&_response_message.GetOutgoingMessage());
}
#endif  // __Fuchsia__

#ifdef __Fuchsia__
::fidl::Result
fidl::internal::WireCompleterBase<::fidl_test_requestflexibleenvelope::
                                      Protocol::RequestFlexibleResponseStrict>::
    Reply(::fidl_test_requestflexibleenvelope::wire::StrictFoo f) {
  ::fidl::WireResponse<::fidl_test_requestflexibleenvelope::Protocol::
                           RequestFlexibleResponseStrict>
      _response{f};
  FIDL_INTERNAL_DISABLE_AUTO_VAR_INIT
  ::fidl::OwnedEncodedMessage<
      ::fidl::WireResponse<::fidl_test_requestflexibleenvelope::Protocol::
                               RequestFlexibleResponseStrict>>
      _response_message{::fidl::internal::AllowUnownedInputRef{}, &_response};
  return ::fidl::internal::WireCompleterBase<
      ::fidl_test_requestflexibleenvelope::Protocol::
          RequestFlexibleResponseStrict>::SendReply(&_response_message
                                                         .GetOutgoingMessage());
}

::fidl::Result
fidl::internal::WireCompleterBase<::fidl_test_requestflexibleenvelope::
                                      Protocol::RequestFlexibleResponseStrict>::
    Reply(::fidl::BufferSpan _buffer,
          ::fidl_test_requestflexibleenvelope::wire::StrictFoo f) {
  ::fidl::WireResponse<::fidl_test_requestflexibleenvelope::Protocol::
                           RequestFlexibleResponseStrict>
      _response{f};
  ::fidl::WireResponse<::fidl_test_requestflexibleenvelope::Protocol::
                           RequestFlexibleResponseStrict>::UnownedEncodedMessage
      _response_message(_buffer.data, _buffer.capacity, &_response);
  return CompleterBase::SendReply(&_response_message.GetOutgoingMessage());
}
#endif  // __Fuchsia__

void ::fidl::WireRequest<::fidl_test_requestflexibleenvelope::Protocol::
                             RequestStrictResponseFlexible>::_InitHeader() {
  fidl_init_txn_header(&_hdr, 0,
                       ::fidl_test_requestflexibleenvelope::
                           kProtocol_RequestStrictResponseFlexible_Ordinal);
}

void ::fidl::WireResponse<::fidl_test_requestflexibleenvelope::Protocol::
                              RequestStrictResponseFlexible>::_InitHeader() {
  fidl_init_txn_header(&_hdr, 0,
                       ::fidl_test_requestflexibleenvelope::
                           kProtocol_RequestStrictResponseFlexible_Ordinal);
}

void ::fidl::WireRequest<::fidl_test_requestflexibleenvelope::Protocol::
                             RequestFlexibleResponseStrict>::_InitHeader() {
  fidl_init_txn_header(&_hdr, 0,
                       ::fidl_test_requestflexibleenvelope::
                           kProtocol_RequestFlexibleResponseStrict_Ordinal);
}

void ::fidl::WireResponse<::fidl_test_requestflexibleenvelope::Protocol::
                              RequestFlexibleResponseStrict>::_InitHeader() {
  fidl_init_txn_header(&_hdr, 0,
                       ::fidl_test_requestflexibleenvelope::
                           kProtocol_RequestFlexibleResponseStrict_Ordinal);
}

#ifdef __Fuchsia__

#endif  // __Fuchsia__
