// WARNING: This file is machine generated by fidlgen.

#include <fidl/test.arrays/cpp/natural_types.h>

#ifdef __Fuchsia__

void ::test_arrays::StructSmallArray::EncodeWithoutValidating(
    ::fidl::Encoder& encoder, size_t offset) {
  encoder.Alloc(::fidl::EncodingInlineSize<::test_arrays::StructSmallArray,
                                           ::fidl::Encoder>(&encoder));
  ::fidl::CodingTraits<::test_arrays::StructSmallArray>::Encode(&encoder, this,
                                                                offset);
}

::test_arrays::StructSmallArray::StructSmallArray(::fidl::Decoder& decoder)
    : storage_({::fidl::DecodeAs<::std::array<uint32_t, 2>>(&decoder, 0)}) {}
#endif  // __Fuchsia__

::test_arrays::StructSmallArray::Storage
test_arrays::StructSmallArray::CloneStorage() const {
  return Storage{::fidl::internal::NaturalClone(storage_.a)};
}
#ifdef __Fuchsia__

void ::test_arrays::StructLargeArray::EncodeWithoutValidating(
    ::fidl::Encoder& encoder, size_t offset) {
  encoder.Alloc(::fidl::EncodingInlineSize<::test_arrays::StructLargeArray,
                                           ::fidl::Encoder>(&encoder));
  ::fidl::CodingTraits<::test_arrays::StructLargeArray>::Encode(&encoder, this,
                                                                offset);
}

::test_arrays::StructLargeArray::StructLargeArray(::fidl::Decoder& decoder)
    : storage_({::fidl::DecodeAs<::std::array<uint32_t, 100>>(&decoder, 0)}) {}
#endif  // __Fuchsia__

::test_arrays::StructLargeArray::Storage
test_arrays::StructLargeArray::CloneStorage() const {
  return Storage{::fidl::internal::NaturalClone(storage_.a)};
}

::test_arrays::TableSmallArray::Storage
test_arrays::TableSmallArray::CloneStorage() const {
  return Storage{::fidl::internal::NaturalClone(storage_.a)};
}

::test_arrays::TableLargeArray::Storage
test_arrays::TableLargeArray::CloneStorage() const {
  return Storage{::fidl::internal::NaturalClone(storage_.a)};
}

std::shared_ptr<::test_arrays::UnionSmallArray::Storage>
test_arrays::UnionSmallArray::CloneStorage() const {
  const Storage& storage = *storage_;
  switch (storage_->index()) {
    case 1:
      return std::make_shared<Storage>(
          std::in_place_index<1>,
          ::fidl::internal::NaturalClone(std::get<1>(storage)));
    default:
      return std::make_shared<Storage>();
  }
}

std::shared_ptr<::test_arrays::UnionLargeArray::Storage>
test_arrays::UnionLargeArray::CloneStorage() const {
  const Storage& storage = *storage_;
  switch (storage_->index()) {
    case 1:
      return std::make_shared<Storage>(
          std::in_place_index<1>,
          ::fidl::internal::NaturalClone(std::get<1>(storage)));
    default:
      return std::make_shared<Storage>();
  }
}
