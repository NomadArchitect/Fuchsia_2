// WARNING: This file is machine generated by fidlgen.

#pragma once

#include <lib/fidl/llcpp/array.h>
#include <lib/fidl/llcpp/coding.h>
#include <lib/fidl/llcpp/envelope.h>
#include <lib/fidl/llcpp/message.h>
#include <lib/fidl/llcpp/message_storage.h>
#include <lib/fidl/llcpp/object_view.h>
#include <lib/fidl/llcpp/string_view.h>
#include <lib/fidl/llcpp/traits.h>
#include <lib/fidl/llcpp/wire_types.h>
#include <lib/stdcompat/optional.h>

#include <cinttypes>
#ifdef __Fuchsia__
#include <lib/zx/channel.h>
#include <lib/zx/vmo.h>

#endif  // __Fuchsia__

#include <fidl/fidl.test.nullable/cpp/markers.h>

namespace fidl_test_nullable {
namespace wire {
struct StructWithNullableVector;

struct StructWithNullableUnion;

struct StructWithNullableStruct;

struct StructWithNullableString;

struct StructWithNullableRequest;

struct StructWithNullableProtocol;

struct StructWithNullableHandle;

struct Int32Wrapper;

class SimpleUnion;

#ifdef __Fuchsia__

extern "C" const fidl_type_t fidl_test_nullable_StructWithNullableRequestTable;

struct StructWithNullableRequest {
  static constexpr const fidl_type_t* Type =
      &fidl_test_nullable_StructWithNullableRequestTable;
  static constexpr uint32_t MaxNumHandles = 1;
  static constexpr uint32_t PrimarySize = 4;
  static constexpr uint32_t PrimarySizeV1 = 4;
  [[maybe_unused]] static constexpr uint32_t MaxOutOfLine = 0;
  static constexpr uint32_t MaxOutOfLineV1 = 0;
  static constexpr bool HasPointer = false;

  ::fidl::ServerEnd<::fidl_test_nullable::SimpleProtocol> val = {};

  void _CloseHandles();

  class UnownedEncodedMessage;
  class OwnedEncodedMessage;
  class DecodedMessage;
};
#endif  // __Fuchsia__

#ifdef __Fuchsia__

extern "C" const fidl_type_t fidl_test_nullable_StructWithNullableProtocolTable;

struct StructWithNullableProtocol {
  static constexpr const fidl_type_t* Type =
      &fidl_test_nullable_StructWithNullableProtocolTable;
  static constexpr uint32_t MaxNumHandles = 1;
  static constexpr uint32_t PrimarySize = 4;
  static constexpr uint32_t PrimarySizeV1 = 4;
  [[maybe_unused]] static constexpr uint32_t MaxOutOfLine = 0;
  static constexpr uint32_t MaxOutOfLineV1 = 0;
  static constexpr bool HasPointer = false;

  ::fidl::ClientEnd<::fidl_test_nullable::SimpleProtocol> val = {};

  void _CloseHandles();

  class UnownedEncodedMessage;
  class OwnedEncodedMessage;
  class DecodedMessage;
};
#endif  // __Fuchsia__

#ifdef __Fuchsia__

extern "C" const fidl_type_t fidl_test_nullable_StructWithNullableHandleTable;

struct StructWithNullableHandle {
  static constexpr const fidl_type_t* Type =
      &fidl_test_nullable_StructWithNullableHandleTable;
  static constexpr uint32_t MaxNumHandles = 1;
  static constexpr uint32_t PrimarySize = 4;
  static constexpr uint32_t PrimarySizeV1 = 4;
  [[maybe_unused]] static constexpr uint32_t MaxOutOfLine = 0;
  static constexpr uint32_t MaxOutOfLineV1 = 0;
  static constexpr bool HasPointer = false;

  ::zx::vmo val = {};

  void _CloseHandles();

  class UnownedEncodedMessage;
  class OwnedEncodedMessage;
  class DecodedMessage;
};
#endif  // __Fuchsia__

extern "C" const fidl_type_t fidl_test_nullable_Int32WrapperTable;

struct Int32Wrapper {
  static constexpr const fidl_type_t* Type =
      &fidl_test_nullable_Int32WrapperTable;
  static constexpr uint32_t MaxNumHandles = 0;
  static constexpr uint32_t PrimarySize = 4;
  static constexpr uint32_t PrimarySizeV1 = 4;
  [[maybe_unused]] static constexpr uint32_t MaxOutOfLine = 0;
  static constexpr uint32_t MaxOutOfLineV1 = 0;
  static constexpr bool HasPointer = false;

  int32_t val = {};

  class UnownedEncodedMessage;
  class OwnedEncodedMessage;
  class DecodedMessage;
};

extern "C" const fidl_type_t fidl_test_nullable_SimpleUnionTable;

class SimpleUnion {
 public:
  SimpleUnion()
      : ordinal_(::fidl_test_nullable::wire::SimpleUnion::Ordinal::Invalid),
        envelope_{} {}

  SimpleUnion(const SimpleUnion&) = default;
  SimpleUnion& operator=(const SimpleUnion&) = default;
  SimpleUnion(SimpleUnion&&) = default;
  SimpleUnion& operator=(SimpleUnion&&) = default;

  enum class Tag : fidl_xunion_tag_t {
    kA = 1,  // 0x1
    kB = 2,  // 0x2
  };

  bool has_invalid_tag() const {
    return ordinal_ ==
           ::fidl_test_nullable::wire::SimpleUnion::Ordinal::Invalid;
  }

  bool is_a() const {
    return ordinal_ == ::fidl_test_nullable::wire::SimpleUnion::Ordinal::kA;
  }
  static SimpleUnion WithA(int32_t val) {
    SimpleUnion result;
    result.set_a(std::move(val));
    return result;
  }

  void set_a(int32_t elem) {
    ordinal_ = ::fidl_test_nullable::wire::SimpleUnion::Ordinal::kA;
    envelope_.As<int32_t>().set_data(std::move(elem));
  }

  int32_t& mutable_a() {
    ZX_ASSERT(ordinal_ == ::fidl_test_nullable::wire::SimpleUnion::Ordinal::kA);
    return envelope_.As<int32_t>().get_data();
  }
  const int32_t& a() const {
    ZX_ASSERT(ordinal_ == ::fidl_test_nullable::wire::SimpleUnion::Ordinal::kA);
    return envelope_.As<int32_t>().get_data();
  }

  bool is_b() const {
    return ordinal_ == ::fidl_test_nullable::wire::SimpleUnion::Ordinal::kB;
  }
  static SimpleUnion WithB(float val) {
    SimpleUnion result;
    result.set_b(std::move(val));
    return result;
  }

  void set_b(float elem) {
    ordinal_ = ::fidl_test_nullable::wire::SimpleUnion::Ordinal::kB;
    envelope_.As<float>().set_data(std::move(elem));
  }

  float& mutable_b() {
    ZX_ASSERT(ordinal_ == ::fidl_test_nullable::wire::SimpleUnion::Ordinal::kB);
    return envelope_.As<float>().get_data();
  }
  const float& b() const {
    ZX_ASSERT(ordinal_ == ::fidl_test_nullable::wire::SimpleUnion::Ordinal::kB);
    return envelope_.As<float>().get_data();
  }
  ::fidl_test_nullable::wire::SimpleUnion::Tag which() const {
    ZX_ASSERT(!has_invalid_tag());
    return static_cast<::fidl_test_nullable::wire::SimpleUnion::Tag>(ordinal_);
  }

  static constexpr const fidl_type_t* Type =
      &fidl_test_nullable_SimpleUnionTable;
  static constexpr uint32_t MaxNumHandles = 0;
  static constexpr uint32_t PrimarySize = 16;
  static constexpr uint32_t PrimarySizeV1 = 24;
  [[maybe_unused]] static constexpr uint32_t MaxOutOfLine = 0;
  static constexpr uint32_t MaxOutOfLineV1 = 8;
  static constexpr bool HasPointer = true;

  class UnownedEncodedMessage;
  class OwnedEncodedMessage;
  class DecodedMessage;

 private:
  enum class Ordinal : fidl_xunion_tag_t {
    Invalid = 0,
    kA = 1,  // 0x1
    kB = 2,  // 0x2
  };

  static void SizeAndOffsetAssertionHelper();
  ::fidl_test_nullable::wire::SimpleUnion::Ordinal ordinal_;
  FIDL_ALIGNDECL
  ::fidl::UntypedEnvelope envelope_;
};

extern "C" const fidl_type_t fidl_test_nullable_StructWithNullableVectorTable;

struct StructWithNullableVector {
  static constexpr const fidl_type_t* Type =
      &fidl_test_nullable_StructWithNullableVectorTable;
  static constexpr uint32_t MaxNumHandles = 0;
  static constexpr uint32_t PrimarySize = 16;
  static constexpr uint32_t PrimarySizeV1 = 16;
  [[maybe_unused]] static constexpr uint32_t MaxOutOfLine = 4294967295;
  static constexpr uint32_t MaxOutOfLineV1 = 4294967295;
  static constexpr bool HasPointer = true;

  ::fidl::VectorView<int32_t> val = {};

  class UnownedEncodedMessage;
  class OwnedEncodedMessage;
  class DecodedMessage;
};

extern "C" const fidl_type_t fidl_test_nullable_StructWithNullableUnionTable;

struct StructWithNullableUnion {
  static constexpr const fidl_type_t* Type =
      &fidl_test_nullable_StructWithNullableUnionTable;
  static constexpr uint32_t MaxNumHandles = 0;
  static constexpr uint32_t PrimarySize = 16;
  static constexpr uint32_t PrimarySizeV1 = 24;
  [[maybe_unused]] static constexpr uint32_t MaxOutOfLine = 0;
  static constexpr uint32_t MaxOutOfLineV1 = 8;
  static constexpr bool HasPointer = true;

  ::fidl_test_nullable::wire::SimpleUnion val = {};

  class UnownedEncodedMessage;
  class OwnedEncodedMessage;
  class DecodedMessage;
};

extern "C" const fidl_type_t fidl_test_nullable_StructWithNullableStructTable;

struct StructWithNullableStruct {
  static constexpr const fidl_type_t* Type =
      &fidl_test_nullable_StructWithNullableStructTable;
  static constexpr uint32_t MaxNumHandles = 0;
  static constexpr uint32_t PrimarySize = 8;
  static constexpr uint32_t PrimarySizeV1 = 8;
  [[maybe_unused]] static constexpr uint32_t MaxOutOfLine = 8;
  static constexpr uint32_t MaxOutOfLineV1 = 8;
  static constexpr bool HasPointer = true;

  ::fidl::ObjectView<::fidl_test_nullable::wire::Int32Wrapper> val = {};

  class UnownedEncodedMessage;
  class OwnedEncodedMessage;
  class DecodedMessage;
};

extern "C" const fidl_type_t fidl_test_nullable_StructWithNullableStringTable;

struct StructWithNullableString {
  static constexpr const fidl_type_t* Type =
      &fidl_test_nullable_StructWithNullableStringTable;
  static constexpr uint32_t MaxNumHandles = 0;
  static constexpr uint32_t PrimarySize = 16;
  static constexpr uint32_t PrimarySizeV1 = 16;
  [[maybe_unused]] static constexpr uint32_t MaxOutOfLine = 4294967295;
  static constexpr uint32_t MaxOutOfLineV1 = 4294967295;
  static constexpr bool HasPointer = true;

  ::fidl::StringView val = {};

  class UnownedEncodedMessage;
  class OwnedEncodedMessage;
  class DecodedMessage;
};

}  // namespace wire
}  // namespace fidl_test_nullable
namespace fidl {

template <>
struct IsFidlType<::fidl_test_nullable::wire::StructWithNullableVector>
    : public std::true_type {};
template <>
struct IsStruct<::fidl_test_nullable::wire::StructWithNullableVector>
    : public std::true_type {};
static_assert(std::is_standard_layout_v<
              ::fidl_test_nullable::wire::StructWithNullableVector>);
static_assert(offsetof(::fidl_test_nullable::wire::StructWithNullableVector,
                       val) == 0);
static_assert(
    sizeof(::fidl_test_nullable::wire::StructWithNullableVector) ==
    ::fidl_test_nullable::wire::StructWithNullableVector::PrimarySize);

template <>
struct IsFidlType<::fidl_test_nullable::wire::StructWithNullableUnion>
    : public std::true_type {};
template <>
struct IsStruct<::fidl_test_nullable::wire::StructWithNullableUnion>
    : public std::true_type {};
static_assert(std::is_standard_layout_v<
              ::fidl_test_nullable::wire::StructWithNullableUnion>);
static_assert(offsetof(::fidl_test_nullable::wire::StructWithNullableUnion,
                       val) == 0);
static_assert(sizeof(::fidl_test_nullable::wire::StructWithNullableUnion) ==
              ::fidl_test_nullable::wire::StructWithNullableUnion::PrimarySize);

template <>
struct IsFidlType<::fidl_test_nullable::wire::StructWithNullableStruct>
    : public std::true_type {};
template <>
struct IsStruct<::fidl_test_nullable::wire::StructWithNullableStruct>
    : public std::true_type {};
static_assert(std::is_standard_layout_v<
              ::fidl_test_nullable::wire::StructWithNullableStruct>);
static_assert(offsetof(::fidl_test_nullable::wire::StructWithNullableStruct,
                       val) == 0);
static_assert(
    sizeof(::fidl_test_nullable::wire::StructWithNullableStruct) ==
    ::fidl_test_nullable::wire::StructWithNullableStruct::PrimarySize);

template <>
struct IsFidlType<::fidl_test_nullable::wire::StructWithNullableString>
    : public std::true_type {};
template <>
struct IsStruct<::fidl_test_nullable::wire::StructWithNullableString>
    : public std::true_type {};
static_assert(std::is_standard_layout_v<
              ::fidl_test_nullable::wire::StructWithNullableString>);
static_assert(offsetof(::fidl_test_nullable::wire::StructWithNullableString,
                       val) == 0);
static_assert(
    sizeof(::fidl_test_nullable::wire::StructWithNullableString) ==
    ::fidl_test_nullable::wire::StructWithNullableString::PrimarySize);

#ifdef __Fuchsia__
template <>
struct IsResource<::fidl_test_nullable::wire::StructWithNullableRequest>
    : public std::true_type {};
template <>
struct IsFidlType<::fidl_test_nullable::wire::StructWithNullableRequest>
    : public std::true_type {};
template <>
struct IsStruct<::fidl_test_nullable::wire::StructWithNullableRequest>
    : public std::true_type {};
static_assert(std::is_standard_layout_v<
              ::fidl_test_nullable::wire::StructWithNullableRequest>);
static_assert(offsetof(::fidl_test_nullable::wire::StructWithNullableRequest,
                       val) == 0);
static_assert(
    sizeof(::fidl_test_nullable::wire::StructWithNullableRequest) ==
    ::fidl_test_nullable::wire::StructWithNullableRequest::PrimarySize);
#endif  // __Fuchsia__

#ifdef __Fuchsia__
template <>
struct IsResource<::fidl_test_nullable::wire::StructWithNullableProtocol>
    : public std::true_type {};
template <>
struct IsFidlType<::fidl_test_nullable::wire::StructWithNullableProtocol>
    : public std::true_type {};
template <>
struct IsStruct<::fidl_test_nullable::wire::StructWithNullableProtocol>
    : public std::true_type {};
static_assert(std::is_standard_layout_v<
              ::fidl_test_nullable::wire::StructWithNullableProtocol>);
static_assert(offsetof(::fidl_test_nullable::wire::StructWithNullableProtocol,
                       val) == 0);
static_assert(
    sizeof(::fidl_test_nullable::wire::StructWithNullableProtocol) ==
    ::fidl_test_nullable::wire::StructWithNullableProtocol::PrimarySize);
#endif  // __Fuchsia__

#ifdef __Fuchsia__
template <>
struct IsResource<::fidl_test_nullable::wire::StructWithNullableHandle>
    : public std::true_type {};
template <>
struct IsFidlType<::fidl_test_nullable::wire::StructWithNullableHandle>
    : public std::true_type {};
template <>
struct IsStruct<::fidl_test_nullable::wire::StructWithNullableHandle>
    : public std::true_type {};
static_assert(std::is_standard_layout_v<
              ::fidl_test_nullable::wire::StructWithNullableHandle>);
static_assert(offsetof(::fidl_test_nullable::wire::StructWithNullableHandle,
                       val) == 0);
static_assert(
    sizeof(::fidl_test_nullable::wire::StructWithNullableHandle) ==
    ::fidl_test_nullable::wire::StructWithNullableHandle::PrimarySize);
#endif  // __Fuchsia__

template <>
struct IsFidlType<::fidl_test_nullable::wire::Int32Wrapper>
    : public std::true_type {};
template <>
struct IsStruct<::fidl_test_nullable::wire::Int32Wrapper>
    : public std::true_type {};
static_assert(
    std::is_standard_layout_v<::fidl_test_nullable::wire::Int32Wrapper>);
static_assert(offsetof(::fidl_test_nullable::wire::Int32Wrapper, val) == 0);
static_assert(sizeof(::fidl_test_nullable::wire::Int32Wrapper) ==
              ::fidl_test_nullable::wire::Int32Wrapper::PrimarySize);

template <>
struct IsFidlType<::fidl_test_nullable::wire::SimpleUnion>
    : public std::true_type {};
template <>
struct IsUnion<::fidl_test_nullable::wire::SimpleUnion>
    : public std::true_type {};
static_assert(
    std::is_standard_layout_v<::fidl_test_nullable::wire::SimpleUnion>);

}  // namespace fidl
