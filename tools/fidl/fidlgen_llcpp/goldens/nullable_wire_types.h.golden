// WARNING: This file is machine generated by fidlgen.

#pragma once

#include <lib/fidl/llcpp/array.h>
#include <lib/fidl/llcpp/coding.h>
#include <lib/fidl/llcpp/envelope.h>
#include <lib/fidl/llcpp/message.h>
#include <lib/fidl/llcpp/message_storage.h>
#include <lib/fidl/llcpp/object_view.h>
#include <lib/fidl/llcpp/string_view.h>
#include <lib/fidl/llcpp/traits.h>
#include <lib/fidl/llcpp/wire_types.h>
#include <lib/stdcompat/optional.h>

#include <cinttypes>
#ifdef __Fuchsia__
#include <lib/zx/channel.h>
#include <lib/zx/vmo.h>

#endif  // __Fuchsia__

#include <fidl/fidl.test.nullable/cpp/markers.h>
#include <fidl/zx/cpp/wire_types.h>

namespace fidl_test_nullable {
namespace wire {
struct StructWithNullableVector;

struct StructWithNullableUnion;

struct StructWithNullableStruct;

struct StructWithNullableString;

struct StructWithNullableRequest;

struct StructWithNullableProtocol;

struct StructWithNullableHandle;

struct Int32Wrapper;

class SimpleUnion;

#ifdef __Fuchsia__

extern "C" const fidl_type_t fidl_test_nullable_StructWithNullableRequestTable;

struct StructWithNullableRequest {
  static constexpr const fidl_type_t* Type =
      &fidl_test_nullable_StructWithNullableRequestTable;
  static constexpr uint32_t MaxNumHandles = 1;
  static constexpr uint32_t PrimarySize = 4;
  [[maybe_unused]] static constexpr uint32_t MaxOutOfLine = 0;
  static constexpr bool HasPointer = false;

  ::fidl::ServerEnd<::fidl_test_nullable::SimpleProtocol> val = {};

  void _CloseHandles();

  class UnownedEncodedMessage;
  class OwnedEncodedMessage;
  class DecodedMessage;
};

class StructWithNullableRequest::UnownedEncodedMessage final {
 public:
  UnownedEncodedMessage(uint8_t* backing_buffer, uint32_t backing_buffer_size,
                        StructWithNullableRequest* value)
      : UnownedEncodedMessage(::fidl::internal::IovecBufferSize, backing_buffer,
                              backing_buffer_size, value) {}
  UnownedEncodedMessage(uint32_t iovec_capacity, uint8_t* backing_buffer,
                        uint32_t backing_buffer_size,
                        StructWithNullableRequest* value)
      : message_(::fidl::OutgoingMessage::CreateInternal(
            ::fidl::OutgoingMessage::ConstructorArgs{
                .transport_vtable = &::fidl::internal::ChannelTransport::VTable,
                .iovecs = iovecs_,
                .iovec_capacity = iovec_capacity,
                .handles = handles_,
                .handle_metadata = handle_metadata_,
                .handle_capacity = kHandleCapacity,
                .backing_buffer = backing_buffer,
                .backing_buffer_capacity = backing_buffer_size,
            })) {
    ZX_ASSERT(iovec_capacity <= std::size(iovecs_));
    message_.Encode<StructWithNullableRequest>(value);
  }
  UnownedEncodedMessage(const UnownedEncodedMessage&) = delete;
  UnownedEncodedMessage(UnownedEncodedMessage&&) = delete;
  UnownedEncodedMessage* operator=(const UnownedEncodedMessage&) = delete;
  UnownedEncodedMessage* operator=(UnownedEncodedMessage&&) = delete;

  zx_status_t status() const { return message_.status(); }
  const char* status_string() const { return message_.status_string(); }
  bool ok() const { return message_.status() == ZX_OK; }
  std::string FormatDescription() const { return message_.FormatDescription(); }
  const char* lossy_description() const { return message_.lossy_description(); }
  const ::fidl::Result& error() const { return message_.error(); }

  ::fidl::OutgoingMessage& GetOutgoingMessage() { return message_; }

 private:
  ::fidl::internal::IovecBuffer iovecs_;
  static constexpr size_t kHandleCapacity =
      std::min(ZX_CHANNEL_MAX_MSG_HANDLES, MaxNumHandles);
  zx_handle_t handles_[kHandleCapacity];
  fidl_channel_handle_metadata_t handle_metadata_[kHandleCapacity];
  ::fidl::OutgoingMessage message_;
};

class StructWithNullableRequest::OwnedEncodedMessage final {
 public:
  explicit OwnedEncodedMessage(StructWithNullableRequest* value)
      : message_(1u, backing_buffer_.data(),
                 static_cast<uint32_t>(backing_buffer_.size()), value) {}
  // Internal constructor.
  explicit OwnedEncodedMessage(
      ::fidl::internal::AllowUnownedInputRef allow_unowned,
      StructWithNullableRequest* value)
      : message_(::fidl::internal::IovecBufferSize, backing_buffer_.data(),
                 static_cast<uint32_t>(backing_buffer_.size()), value) {}
  OwnedEncodedMessage(const OwnedEncodedMessage&) = delete;
  OwnedEncodedMessage(OwnedEncodedMessage&&) = delete;
  OwnedEncodedMessage* operator=(const OwnedEncodedMessage&) = delete;
  OwnedEncodedMessage* operator=(OwnedEncodedMessage&&) = delete;

  zx_status_t status() const { return message_.status(); }
  const char* status_string() const { return message_.status_string(); }
  bool ok() const { return message_.ok(); }
  std::string FormatDescription() const { return message_.FormatDescription(); }
  const char* lossy_description() const { return message_.lossy_description(); }
  const ::fidl::Result& error() const { return message_.error(); }

  ::fidl::OutgoingMessage& GetOutgoingMessage() {
    return message_.GetOutgoingMessage();
  }

 private:
  ::fidl::internal::InlineMessageBuffer<8> backing_buffer_;
  UnownedEncodedMessage message_;
};

class StructWithNullableRequest::DecodedMessage final
    : public ::fidl::internal::DecodedMessageBase<StructWithNullableRequest> {
 public:
  using DecodedMessageBase<StructWithNullableRequest>::DecodedMessageBase;

  DecodedMessage(uint8_t* bytes, uint32_t byte_actual,
                 zx_handle_t* handles = nullptr,
                 fidl_channel_handle_metadata_t* handle_metadata = nullptr,
                 uint32_t handle_actual = 0)
      : DecodedMessageBase(
            ::fidl::internal::kLLCPPEncodedWireFormatVersion,
            ::fidl::IncomingMessage::Create(
                bytes, byte_actual, handles, handle_metadata, handle_actual,
                ::fidl::IncomingMessage::kSkipMessageHeaderValidation)) {}

  // Internal constructor for specifying a specific wire format version.
  DecodedMessage(::fidl::internal::WireFormatVersion wire_format_version,
                 uint8_t* bytes, uint32_t byte_actual,
                 zx_handle_t* handles = nullptr,
                 fidl_channel_handle_metadata_t* handle_metadata = nullptr,
                 uint32_t handle_actual = 0)
      : DecodedMessageBase(
            wire_format_version,
            ::fidl::IncomingMessage::Create(
                bytes, byte_actual, handles, handle_metadata, handle_actual,
                ::fidl::IncomingMessage::kSkipMessageHeaderValidation)) {}

  DecodedMessage(const fidl_incoming_msg_t* c_msg)
      : DecodedMessage(reinterpret_cast<uint8_t*>(c_msg->bytes),
                       c_msg->num_bytes, c_msg->handles,
                       static_cast<fidl_channel_handle_metadata_t*>(
                           c_msg->handle_metadata),
                       c_msg->num_handles) {}

  // Internal constructor for specifying a specific wire format version.
  DecodedMessage(::fidl::internal::WireFormatVersion wire_format_version,
                 const fidl_incoming_msg_t* c_msg)
      : DecodedMessage(wire_format_version,
                       reinterpret_cast<uint8_t*>(c_msg->bytes),
                       c_msg->num_bytes, c_msg->handles,
                       static_cast<fidl_channel_handle_metadata_t*>(
                           c_msg->handle_metadata),
                       c_msg->num_handles) {}
  ~DecodedMessage() {
    if (ok() && (PrimaryObject() != nullptr)) {
      PrimaryObject()->_CloseHandles();
    }
  }

  StructWithNullableRequest* PrimaryObject() {
    ZX_DEBUG_ASSERT(ok());
    return reinterpret_cast<StructWithNullableRequest*>(bytes());
  }

  // Release the ownership of the decoded message. That means that the handles
  // won't be closed When the object is destroyed. After calling this method,
  // the |DecodedMessage| object should not be used anymore.
  void ReleasePrimaryObject() { ResetBytes(); }
};
#endif  // __Fuchsia__

#ifdef __Fuchsia__

extern "C" const fidl_type_t fidl_test_nullable_StructWithNullableProtocolTable;

struct StructWithNullableProtocol {
  static constexpr const fidl_type_t* Type =
      &fidl_test_nullable_StructWithNullableProtocolTable;
  static constexpr uint32_t MaxNumHandles = 1;
  static constexpr uint32_t PrimarySize = 4;
  [[maybe_unused]] static constexpr uint32_t MaxOutOfLine = 0;
  static constexpr bool HasPointer = false;

  ::fidl::ClientEnd<::fidl_test_nullable::SimpleProtocol> val = {};

  void _CloseHandles();

  class UnownedEncodedMessage;
  class OwnedEncodedMessage;
  class DecodedMessage;
};

class StructWithNullableProtocol::UnownedEncodedMessage final {
 public:
  UnownedEncodedMessage(uint8_t* backing_buffer, uint32_t backing_buffer_size,
                        StructWithNullableProtocol* value)
      : UnownedEncodedMessage(::fidl::internal::IovecBufferSize, backing_buffer,
                              backing_buffer_size, value) {}
  UnownedEncodedMessage(uint32_t iovec_capacity, uint8_t* backing_buffer,
                        uint32_t backing_buffer_size,
                        StructWithNullableProtocol* value)
      : message_(::fidl::OutgoingMessage::CreateInternal(
            ::fidl::OutgoingMessage::ConstructorArgs{
                .transport_vtable = &::fidl::internal::ChannelTransport::VTable,
                .iovecs = iovecs_,
                .iovec_capacity = iovec_capacity,
                .handles = handles_,
                .handle_metadata = handle_metadata_,
                .handle_capacity = kHandleCapacity,
                .backing_buffer = backing_buffer,
                .backing_buffer_capacity = backing_buffer_size,
            })) {
    ZX_ASSERT(iovec_capacity <= std::size(iovecs_));
    message_.Encode<StructWithNullableProtocol>(value);
  }
  UnownedEncodedMessage(const UnownedEncodedMessage&) = delete;
  UnownedEncodedMessage(UnownedEncodedMessage&&) = delete;
  UnownedEncodedMessage* operator=(const UnownedEncodedMessage&) = delete;
  UnownedEncodedMessage* operator=(UnownedEncodedMessage&&) = delete;

  zx_status_t status() const { return message_.status(); }
  const char* status_string() const { return message_.status_string(); }
  bool ok() const { return message_.status() == ZX_OK; }
  std::string FormatDescription() const { return message_.FormatDescription(); }
  const char* lossy_description() const { return message_.lossy_description(); }
  const ::fidl::Result& error() const { return message_.error(); }

  ::fidl::OutgoingMessage& GetOutgoingMessage() { return message_; }

 private:
  ::fidl::internal::IovecBuffer iovecs_;
  static constexpr size_t kHandleCapacity =
      std::min(ZX_CHANNEL_MAX_MSG_HANDLES, MaxNumHandles);
  zx_handle_t handles_[kHandleCapacity];
  fidl_channel_handle_metadata_t handle_metadata_[kHandleCapacity];
  ::fidl::OutgoingMessage message_;
};

class StructWithNullableProtocol::OwnedEncodedMessage final {
 public:
  explicit OwnedEncodedMessage(StructWithNullableProtocol* value)
      : message_(1u, backing_buffer_.data(),
                 static_cast<uint32_t>(backing_buffer_.size()), value) {}
  // Internal constructor.
  explicit OwnedEncodedMessage(
      ::fidl::internal::AllowUnownedInputRef allow_unowned,
      StructWithNullableProtocol* value)
      : message_(::fidl::internal::IovecBufferSize, backing_buffer_.data(),
                 static_cast<uint32_t>(backing_buffer_.size()), value) {}
  OwnedEncodedMessage(const OwnedEncodedMessage&) = delete;
  OwnedEncodedMessage(OwnedEncodedMessage&&) = delete;
  OwnedEncodedMessage* operator=(const OwnedEncodedMessage&) = delete;
  OwnedEncodedMessage* operator=(OwnedEncodedMessage&&) = delete;

  zx_status_t status() const { return message_.status(); }
  const char* status_string() const { return message_.status_string(); }
  bool ok() const { return message_.ok(); }
  std::string FormatDescription() const { return message_.FormatDescription(); }
  const char* lossy_description() const { return message_.lossy_description(); }
  const ::fidl::Result& error() const { return message_.error(); }

  ::fidl::OutgoingMessage& GetOutgoingMessage() {
    return message_.GetOutgoingMessage();
  }

 private:
  ::fidl::internal::InlineMessageBuffer<8> backing_buffer_;
  UnownedEncodedMessage message_;
};

class StructWithNullableProtocol::DecodedMessage final
    : public ::fidl::internal::DecodedMessageBase<StructWithNullableProtocol> {
 public:
  using DecodedMessageBase<StructWithNullableProtocol>::DecodedMessageBase;

  DecodedMessage(uint8_t* bytes, uint32_t byte_actual,
                 zx_handle_t* handles = nullptr,
                 fidl_channel_handle_metadata_t* handle_metadata = nullptr,
                 uint32_t handle_actual = 0)
      : DecodedMessageBase(
            ::fidl::internal::kLLCPPEncodedWireFormatVersion,
            ::fidl::IncomingMessage::Create(
                bytes, byte_actual, handles, handle_metadata, handle_actual,
                ::fidl::IncomingMessage::kSkipMessageHeaderValidation)) {}

  // Internal constructor for specifying a specific wire format version.
  DecodedMessage(::fidl::internal::WireFormatVersion wire_format_version,
                 uint8_t* bytes, uint32_t byte_actual,
                 zx_handle_t* handles = nullptr,
                 fidl_channel_handle_metadata_t* handle_metadata = nullptr,
                 uint32_t handle_actual = 0)
      : DecodedMessageBase(
            wire_format_version,
            ::fidl::IncomingMessage::Create(
                bytes, byte_actual, handles, handle_metadata, handle_actual,
                ::fidl::IncomingMessage::kSkipMessageHeaderValidation)) {}

  DecodedMessage(const fidl_incoming_msg_t* c_msg)
      : DecodedMessage(reinterpret_cast<uint8_t*>(c_msg->bytes),
                       c_msg->num_bytes, c_msg->handles,
                       static_cast<fidl_channel_handle_metadata_t*>(
                           c_msg->handle_metadata),
                       c_msg->num_handles) {}

  // Internal constructor for specifying a specific wire format version.
  DecodedMessage(::fidl::internal::WireFormatVersion wire_format_version,
                 const fidl_incoming_msg_t* c_msg)
      : DecodedMessage(wire_format_version,
                       reinterpret_cast<uint8_t*>(c_msg->bytes),
                       c_msg->num_bytes, c_msg->handles,
                       static_cast<fidl_channel_handle_metadata_t*>(
                           c_msg->handle_metadata),
                       c_msg->num_handles) {}
  ~DecodedMessage() {
    if (ok() && (PrimaryObject() != nullptr)) {
      PrimaryObject()->_CloseHandles();
    }
  }

  StructWithNullableProtocol* PrimaryObject() {
    ZX_DEBUG_ASSERT(ok());
    return reinterpret_cast<StructWithNullableProtocol*>(bytes());
  }

  // Release the ownership of the decoded message. That means that the handles
  // won't be closed When the object is destroyed. After calling this method,
  // the |DecodedMessage| object should not be used anymore.
  void ReleasePrimaryObject() { ResetBytes(); }
};
#endif  // __Fuchsia__

#ifdef __Fuchsia__

extern "C" const fidl_type_t fidl_test_nullable_StructWithNullableHandleTable;

struct StructWithNullableHandle {
  static constexpr const fidl_type_t* Type =
      &fidl_test_nullable_StructWithNullableHandleTable;
  static constexpr uint32_t MaxNumHandles = 1;
  static constexpr uint32_t PrimarySize = 4;
  [[maybe_unused]] static constexpr uint32_t MaxOutOfLine = 0;
  static constexpr bool HasPointer = false;

  ::zx::vmo val = {};

  void _CloseHandles();

  class UnownedEncodedMessage;
  class OwnedEncodedMessage;
  class DecodedMessage;
};

class StructWithNullableHandle::UnownedEncodedMessage final {
 public:
  UnownedEncodedMessage(uint8_t* backing_buffer, uint32_t backing_buffer_size,
                        StructWithNullableHandle* value)
      : UnownedEncodedMessage(::fidl::internal::IovecBufferSize, backing_buffer,
                              backing_buffer_size, value) {}
  UnownedEncodedMessage(uint32_t iovec_capacity, uint8_t* backing_buffer,
                        uint32_t backing_buffer_size,
                        StructWithNullableHandle* value)
      : message_(::fidl::OutgoingMessage::CreateInternal(
            ::fidl::OutgoingMessage::ConstructorArgs{
                .transport_vtable = &::fidl::internal::ChannelTransport::VTable,
                .iovecs = iovecs_,
                .iovec_capacity = iovec_capacity,
                .handles = handles_,
                .handle_metadata = handle_metadata_,
                .handle_capacity = kHandleCapacity,
                .backing_buffer = backing_buffer,
                .backing_buffer_capacity = backing_buffer_size,
            })) {
    ZX_ASSERT(iovec_capacity <= std::size(iovecs_));
    message_.Encode<StructWithNullableHandle>(value);
  }
  UnownedEncodedMessage(const UnownedEncodedMessage&) = delete;
  UnownedEncodedMessage(UnownedEncodedMessage&&) = delete;
  UnownedEncodedMessage* operator=(const UnownedEncodedMessage&) = delete;
  UnownedEncodedMessage* operator=(UnownedEncodedMessage&&) = delete;

  zx_status_t status() const { return message_.status(); }
  const char* status_string() const { return message_.status_string(); }
  bool ok() const { return message_.status() == ZX_OK; }
  std::string FormatDescription() const { return message_.FormatDescription(); }
  const char* lossy_description() const { return message_.lossy_description(); }
  const ::fidl::Result& error() const { return message_.error(); }

  ::fidl::OutgoingMessage& GetOutgoingMessage() { return message_; }

 private:
  ::fidl::internal::IovecBuffer iovecs_;
  static constexpr size_t kHandleCapacity =
      std::min(ZX_CHANNEL_MAX_MSG_HANDLES, MaxNumHandles);
  zx_handle_t handles_[kHandleCapacity];
  fidl_channel_handle_metadata_t handle_metadata_[kHandleCapacity];
  ::fidl::OutgoingMessage message_;
};

class StructWithNullableHandle::OwnedEncodedMessage final {
 public:
  explicit OwnedEncodedMessage(StructWithNullableHandle* value)
      : message_(1u, backing_buffer_.data(),
                 static_cast<uint32_t>(backing_buffer_.size()), value) {}
  // Internal constructor.
  explicit OwnedEncodedMessage(
      ::fidl::internal::AllowUnownedInputRef allow_unowned,
      StructWithNullableHandle* value)
      : message_(::fidl::internal::IovecBufferSize, backing_buffer_.data(),
                 static_cast<uint32_t>(backing_buffer_.size()), value) {}
  OwnedEncodedMessage(const OwnedEncodedMessage&) = delete;
  OwnedEncodedMessage(OwnedEncodedMessage&&) = delete;
  OwnedEncodedMessage* operator=(const OwnedEncodedMessage&) = delete;
  OwnedEncodedMessage* operator=(OwnedEncodedMessage&&) = delete;

  zx_status_t status() const { return message_.status(); }
  const char* status_string() const { return message_.status_string(); }
  bool ok() const { return message_.ok(); }
  std::string FormatDescription() const { return message_.FormatDescription(); }
  const char* lossy_description() const { return message_.lossy_description(); }
  const ::fidl::Result& error() const { return message_.error(); }

  ::fidl::OutgoingMessage& GetOutgoingMessage() {
    return message_.GetOutgoingMessage();
  }

 private:
  ::fidl::internal::InlineMessageBuffer<8> backing_buffer_;
  UnownedEncodedMessage message_;
};

class StructWithNullableHandle::DecodedMessage final
    : public ::fidl::internal::DecodedMessageBase<StructWithNullableHandle> {
 public:
  using DecodedMessageBase<StructWithNullableHandle>::DecodedMessageBase;

  DecodedMessage(uint8_t* bytes, uint32_t byte_actual,
                 zx_handle_t* handles = nullptr,
                 fidl_channel_handle_metadata_t* handle_metadata = nullptr,
                 uint32_t handle_actual = 0)
      : DecodedMessageBase(
            ::fidl::internal::kLLCPPEncodedWireFormatVersion,
            ::fidl::IncomingMessage::Create(
                bytes, byte_actual, handles, handle_metadata, handle_actual,
                ::fidl::IncomingMessage::kSkipMessageHeaderValidation)) {}

  // Internal constructor for specifying a specific wire format version.
  DecodedMessage(::fidl::internal::WireFormatVersion wire_format_version,
                 uint8_t* bytes, uint32_t byte_actual,
                 zx_handle_t* handles = nullptr,
                 fidl_channel_handle_metadata_t* handle_metadata = nullptr,
                 uint32_t handle_actual = 0)
      : DecodedMessageBase(
            wire_format_version,
            ::fidl::IncomingMessage::Create(
                bytes, byte_actual, handles, handle_metadata, handle_actual,
                ::fidl::IncomingMessage::kSkipMessageHeaderValidation)) {}

  DecodedMessage(const fidl_incoming_msg_t* c_msg)
      : DecodedMessage(reinterpret_cast<uint8_t*>(c_msg->bytes),
                       c_msg->num_bytes, c_msg->handles,
                       static_cast<fidl_channel_handle_metadata_t*>(
                           c_msg->handle_metadata),
                       c_msg->num_handles) {}

  // Internal constructor for specifying a specific wire format version.
  DecodedMessage(::fidl::internal::WireFormatVersion wire_format_version,
                 const fidl_incoming_msg_t* c_msg)
      : DecodedMessage(wire_format_version,
                       reinterpret_cast<uint8_t*>(c_msg->bytes),
                       c_msg->num_bytes, c_msg->handles,
                       static_cast<fidl_channel_handle_metadata_t*>(
                           c_msg->handle_metadata),
                       c_msg->num_handles) {}
  ~DecodedMessage() {
    if (ok() && (PrimaryObject() != nullptr)) {
      PrimaryObject()->_CloseHandles();
    }
  }

  StructWithNullableHandle* PrimaryObject() {
    ZX_DEBUG_ASSERT(ok());
    return reinterpret_cast<StructWithNullableHandle*>(bytes());
  }

  // Release the ownership of the decoded message. That means that the handles
  // won't be closed When the object is destroyed. After calling this method,
  // the |DecodedMessage| object should not be used anymore.
  void ReleasePrimaryObject() { ResetBytes(); }
};
#endif  // __Fuchsia__

extern "C" const fidl_type_t fidl_test_nullable_Int32WrapperTable;

struct Int32Wrapper {
  static constexpr const fidl_type_t* Type =
      &fidl_test_nullable_Int32WrapperTable;
  static constexpr uint32_t MaxNumHandles = 0;
  static constexpr uint32_t PrimarySize = 4;
  [[maybe_unused]] static constexpr uint32_t MaxOutOfLine = 0;
  static constexpr bool HasPointer = false;

  int32_t val = {};

  class UnownedEncodedMessage;
  class OwnedEncodedMessage;
  class DecodedMessage;
};

class Int32Wrapper::UnownedEncodedMessage final {
 public:
  UnownedEncodedMessage(uint8_t* backing_buffer, uint32_t backing_buffer_size,
                        Int32Wrapper* value)
      : UnownedEncodedMessage(::fidl::internal::IovecBufferSize, backing_buffer,
                              backing_buffer_size, value) {}
  UnownedEncodedMessage(uint32_t iovec_capacity, uint8_t* backing_buffer,
                        uint32_t backing_buffer_size, Int32Wrapper* value)
      : message_(::fidl::OutgoingMessage::CreateInternal(
            ::fidl::OutgoingMessage::ConstructorArgs{
                .transport_vtable = &::fidl::internal::ChannelTransport::VTable,
                .iovecs = iovecs_,
                .iovec_capacity = iovec_capacity,
                .backing_buffer = backing_buffer,
                .backing_buffer_capacity = backing_buffer_size,
            })) {
    ZX_ASSERT(iovec_capacity <= std::size(iovecs_));
    message_.Encode<Int32Wrapper>(value);
  }
  UnownedEncodedMessage(const UnownedEncodedMessage&) = delete;
  UnownedEncodedMessage(UnownedEncodedMessage&&) = delete;
  UnownedEncodedMessage* operator=(const UnownedEncodedMessage&) = delete;
  UnownedEncodedMessage* operator=(UnownedEncodedMessage&&) = delete;

  zx_status_t status() const { return message_.status(); }
#ifdef __Fuchsia__
  const char* status_string() const { return message_.status_string(); }
#endif  // __Fuchsia__
  bool ok() const { return message_.status() == ZX_OK; }
  std::string FormatDescription() const { return message_.FormatDescription(); }
  const char* lossy_description() const { return message_.lossy_description(); }
  const ::fidl::Result& error() const { return message_.error(); }

  ::fidl::OutgoingMessage& GetOutgoingMessage() { return message_; }

 private:
  ::fidl::internal::IovecBuffer iovecs_;
  ::fidl::OutgoingMessage message_;
};

class Int32Wrapper::OwnedEncodedMessage final {
 public:
  explicit OwnedEncodedMessage(Int32Wrapper* value)
      : message_(1u, backing_buffer_.data(),
                 static_cast<uint32_t>(backing_buffer_.size()), value) {}
  // Internal constructor.
  explicit OwnedEncodedMessage(
      ::fidl::internal::AllowUnownedInputRef allow_unowned, Int32Wrapper* value)
      : message_(::fidl::internal::IovecBufferSize, backing_buffer_.data(),
                 static_cast<uint32_t>(backing_buffer_.size()), value) {}
  OwnedEncodedMessage(const OwnedEncodedMessage&) = delete;
  OwnedEncodedMessage(OwnedEncodedMessage&&) = delete;
  OwnedEncodedMessage* operator=(const OwnedEncodedMessage&) = delete;
  OwnedEncodedMessage* operator=(OwnedEncodedMessage&&) = delete;

  zx_status_t status() const { return message_.status(); }
#ifdef __Fuchsia__
  const char* status_string() const { return message_.status_string(); }
#endif  // __Fuchsia__
  bool ok() const { return message_.ok(); }
  std::string FormatDescription() const { return message_.FormatDescription(); }
  const char* lossy_description() const { return message_.lossy_description(); }
  const ::fidl::Result& error() const { return message_.error(); }

  ::fidl::OutgoingMessage& GetOutgoingMessage() {
    return message_.GetOutgoingMessage();
  }

 private:
  ::fidl::internal::InlineMessageBuffer<8> backing_buffer_;
  UnownedEncodedMessage message_;
};

class Int32Wrapper::DecodedMessage final
    : public ::fidl::internal::DecodedMessageBase<Int32Wrapper> {
 public:
  using DecodedMessageBase<Int32Wrapper>::DecodedMessageBase;

  DecodedMessage(uint8_t* bytes, uint32_t byte_actual,
                 zx_handle_t* handles = nullptr,
                 fidl_channel_handle_metadata_t* handle_metadata = nullptr,
                 uint32_t handle_actual = 0)
      : DecodedMessageBase(
            ::fidl::internal::kLLCPPEncodedWireFormatVersion,
            ::fidl::IncomingMessage::Create(
                bytes, byte_actual, handles, handle_metadata, handle_actual,
                ::fidl::IncomingMessage::kSkipMessageHeaderValidation)) {}

  // Internal constructor for specifying a specific wire format version.
  DecodedMessage(::fidl::internal::WireFormatVersion wire_format_version,
                 uint8_t* bytes, uint32_t byte_actual,
                 zx_handle_t* handles = nullptr,
                 fidl_channel_handle_metadata_t* handle_metadata = nullptr,
                 uint32_t handle_actual = 0)
      : DecodedMessageBase(
            wire_format_version,
            ::fidl::IncomingMessage::Create(
                bytes, byte_actual, handles, handle_metadata, handle_actual,
                ::fidl::IncomingMessage::kSkipMessageHeaderValidation)) {}

  DecodedMessage(const fidl_incoming_msg_t* c_msg)
      : DecodedMessage(reinterpret_cast<uint8_t*>(c_msg->bytes),
                       c_msg->num_bytes, c_msg->handles,
                       static_cast<fidl_channel_handle_metadata_t*>(
                           c_msg->handle_metadata),
                       c_msg->num_handles) {}

  // Internal constructor for specifying a specific wire format version.
  DecodedMessage(::fidl::internal::WireFormatVersion wire_format_version,
                 const fidl_incoming_msg_t* c_msg)
      : DecodedMessage(wire_format_version,
                       reinterpret_cast<uint8_t*>(c_msg->bytes),
                       c_msg->num_bytes, c_msg->handles,
                       static_cast<fidl_channel_handle_metadata_t*>(
                           c_msg->handle_metadata),
                       c_msg->num_handles) {}

  Int32Wrapper* PrimaryObject() {
    ZX_DEBUG_ASSERT(ok());
    return reinterpret_cast<Int32Wrapper*>(bytes());
  }

  // Release the ownership of the decoded message. That means that the handles
  // won't be closed When the object is destroyed. After calling this method,
  // the |DecodedMessage| object should not be used anymore.
  void ReleasePrimaryObject() { ResetBytes(); }
};

extern "C" const fidl_type_t fidl_test_nullable_SimpleUnionTable;

class SimpleUnion {
 public:
  SimpleUnion()
      : ordinal_(::fidl_test_nullable::wire::SimpleUnion::Ordinal::Invalid),
        envelope_{} {}

  SimpleUnion(const SimpleUnion&) = default;
  SimpleUnion& operator=(const SimpleUnion&) = default;
  SimpleUnion(SimpleUnion&&) = default;
  SimpleUnion& operator=(SimpleUnion&&) = default;

  enum class Tag : fidl_xunion_tag_t {
    kA = 1,  // 0x1
    kB = 2,  // 0x2
  };

  bool has_invalid_tag() const {
    return ordinal_ ==
           ::fidl_test_nullable::wire::SimpleUnion::Ordinal::Invalid;
  }

  bool is_a() const {
    return ordinal_ == ::fidl_test_nullable::wire::SimpleUnion::Ordinal::kA;
  }
  static SimpleUnion WithA(int32_t val) {
    SimpleUnion result;
    result.set_a(std::move(val));
    return result;
  }

  void set_a(int32_t elem) {
    ordinal_ = ::fidl_test_nullable::wire::SimpleUnion::Ordinal::kA;
    envelope_.As<int32_t>().set_data(std::move(elem));
  }

  int32_t& mutable_a() {
    ZX_ASSERT(ordinal_ == ::fidl_test_nullable::wire::SimpleUnion::Ordinal::kA);
    return envelope_.As<int32_t>().get_data();
  }
  const int32_t& a() const {
    ZX_ASSERT(ordinal_ == ::fidl_test_nullable::wire::SimpleUnion::Ordinal::kA);
    return envelope_.As<int32_t>().get_data();
  }

  bool is_b() const {
    return ordinal_ == ::fidl_test_nullable::wire::SimpleUnion::Ordinal::kB;
  }
  static SimpleUnion WithB(float val) {
    SimpleUnion result;
    result.set_b(std::move(val));
    return result;
  }

  void set_b(float elem) {
    ordinal_ = ::fidl_test_nullable::wire::SimpleUnion::Ordinal::kB;
    envelope_.As<float>().set_data(std::move(elem));
  }

  float& mutable_b() {
    ZX_ASSERT(ordinal_ == ::fidl_test_nullable::wire::SimpleUnion::Ordinal::kB);
    return envelope_.As<float>().get_data();
  }
  const float& b() const {
    ZX_ASSERT(ordinal_ == ::fidl_test_nullable::wire::SimpleUnion::Ordinal::kB);
    return envelope_.As<float>().get_data();
  }
  ::fidl_test_nullable::wire::SimpleUnion::Tag which() const {
    ZX_ASSERT(!has_invalid_tag());
    return static_cast<::fidl_test_nullable::wire::SimpleUnion::Tag>(ordinal_);
  }

  static constexpr const fidl_type_t* Type =
      &fidl_test_nullable_SimpleUnionTable;
  static constexpr uint32_t MaxNumHandles = 0;
  static constexpr uint32_t PrimarySize = 16;
  [[maybe_unused]] static constexpr uint32_t MaxOutOfLine = 0;
  static constexpr bool HasPointer = true;

  class UnownedEncodedMessage;
  class OwnedEncodedMessage;
  class DecodedMessage;

 private:
  enum class Ordinal : fidl_xunion_tag_t {
    Invalid = 0,
    kA = 1,  // 0x1
    kB = 2,  // 0x2
  };

  static void SizeAndOffsetAssertionHelper();
  ::fidl_test_nullable::wire::SimpleUnion::Ordinal ordinal_;
  FIDL_ALIGNDECL
  ::fidl::UntypedEnvelope envelope_;
};

class SimpleUnion::UnownedEncodedMessage final {
 public:
  UnownedEncodedMessage(uint8_t* backing_buffer, uint32_t backing_buffer_size,
                        SimpleUnion* value)
      : UnownedEncodedMessage(::fidl::internal::IovecBufferSize, backing_buffer,
                              backing_buffer_size, value) {}
  UnownedEncodedMessage(uint32_t iovec_capacity, uint8_t* backing_buffer,
                        uint32_t backing_buffer_size, SimpleUnion* value)
      : message_(::fidl::OutgoingMessage::CreateInternal(
            ::fidl::OutgoingMessage::ConstructorArgs{
                .transport_vtable = &::fidl::internal::ChannelTransport::VTable,
                .iovecs = iovecs_,
                .iovec_capacity = iovec_capacity,
                .backing_buffer = backing_buffer,
                .backing_buffer_capacity = backing_buffer_size,
            })) {
    ZX_ASSERT(iovec_capacity <= std::size(iovecs_));
    message_.Encode<SimpleUnion>(value);
  }
  UnownedEncodedMessage(const UnownedEncodedMessage&) = delete;
  UnownedEncodedMessage(UnownedEncodedMessage&&) = delete;
  UnownedEncodedMessage* operator=(const UnownedEncodedMessage&) = delete;
  UnownedEncodedMessage* operator=(UnownedEncodedMessage&&) = delete;

  zx_status_t status() const { return message_.status(); }
#ifdef __Fuchsia__
  const char* status_string() const { return message_.status_string(); }
#endif  // __Fuchsia__
  bool ok() const { return message_.status() == ZX_OK; }
  std::string FormatDescription() const { return message_.FormatDescription(); }
  const char* lossy_description() const { return message_.lossy_description(); }
  const ::fidl::Result& error() const { return message_.error(); }

  ::fidl::OutgoingMessage& GetOutgoingMessage() { return message_; }

 private:
  ::fidl::internal::IovecBuffer iovecs_;
  ::fidl::OutgoingMessage message_;
};

class SimpleUnion::OwnedEncodedMessage final {
 public:
  explicit OwnedEncodedMessage(SimpleUnion* value)
      : message_(1u, backing_buffer_.data(),
                 static_cast<uint32_t>(backing_buffer_.size()), value) {}
  // Construct a message using owned buffers.
  // If |iovec_capacity>1|, then the message in OwnedEncodedMessage may point
  // the input FIDL object, which is not owned by it.
  explicit OwnedEncodedMessage(
      ::fidl::internal::AllowUnownedInputRef allow_unowned, SimpleUnion* value)
      : message_(::fidl::internal::IovecBufferSize, backing_buffer_.data(),
                 static_cast<uint32_t>(backing_buffer_.size()), value) {}
  OwnedEncodedMessage(const OwnedEncodedMessage&) = delete;
  OwnedEncodedMessage(OwnedEncodedMessage&&) = delete;
  OwnedEncodedMessage* operator=(const OwnedEncodedMessage&) = delete;
  OwnedEncodedMessage* operator=(OwnedEncodedMessage&&) = delete;

  zx_status_t status() const { return message_.status(); }
#ifdef __Fuchsia__
  const char* status_string() const { return message_.status_string(); }
#endif  // __Fuchsia__
  bool ok() const { return message_.ok(); }
  std::string FormatDescription() const { return message_.FormatDescription(); }
  const char* lossy_description() const { return message_.lossy_description(); }
  const ::fidl::Result& error() const { return message_.error(); }

  ::fidl::OutgoingMessage& GetOutgoingMessage() {
    return message_.GetOutgoingMessage();
  }

 private:
  ::fidl::internal::InlineMessageBuffer<32> backing_buffer_;
  UnownedEncodedMessage message_;
};

class SimpleUnion::DecodedMessage final
    : public ::fidl::internal::DecodedMessageBase<SimpleUnion> {
 public:
  using DecodedMessageBase<SimpleUnion>::DecodedMessageBase;

  DecodedMessage(uint8_t* bytes, uint32_t byte_actual,
                 zx_handle_t* handles = nullptr,
                 fidl_channel_handle_metadata_t* handle_metadata = nullptr,
                 uint32_t handle_actual = 0)
      : DecodedMessageBase(
            ::fidl::internal::kLLCPPEncodedWireFormatVersion,
            ::fidl::IncomingMessage::Create(
                bytes, byte_actual, handles, handle_metadata, handle_actual,
                ::fidl::IncomingMessage::kSkipMessageHeaderValidation)) {}

  // Internal constructor for specifying a specific wire format version.
  DecodedMessage(::fidl::internal::WireFormatVersion wire_format_version,
                 uint8_t* bytes, uint32_t byte_actual,
                 zx_handle_t* handles = nullptr,
                 fidl_channel_handle_metadata_t* handle_metadata = nullptr,
                 uint32_t handle_actual = 0)
      : DecodedMessageBase(
            wire_format_version,
            ::fidl::IncomingMessage::Create(
                bytes, byte_actual, handles, handle_metadata, handle_actual,
                ::fidl::IncomingMessage::kSkipMessageHeaderValidation)) {}

  DecodedMessage(const fidl_incoming_msg_t* c_msg)
      : DecodedMessage(reinterpret_cast<uint8_t*>(c_msg->bytes),
                       c_msg->num_bytes, c_msg->handles,
                       static_cast<fidl_channel_handle_metadata_t*>(
                           c_msg->handle_metadata),
                       c_msg->num_handles) {}

  // Internal constructor for specifying a specific wire format version.
  DecodedMessage(::fidl::internal::WireFormatVersion wire_format_version,
                 const fidl_incoming_msg_t* c_msg)
      : DecodedMessage(wire_format_version,
                       reinterpret_cast<uint8_t*>(c_msg->bytes),
                       c_msg->num_bytes, c_msg->handles,
                       static_cast<fidl_channel_handle_metadata_t*>(
                           c_msg->handle_metadata),
                       c_msg->num_handles) {}

  SimpleUnion* PrimaryObject() {
    ZX_DEBUG_ASSERT(ok());
    return reinterpret_cast<SimpleUnion*>(bytes());
  }

  // Release the ownership of the decoded message. That means that the handles
  // won't be closed When the object is destroyed. After calling this method,
  // the |DecodedMessage| object should not be used anymore.
  void ReleasePrimaryObject() { ResetBytes(); }
};

extern "C" const fidl_type_t fidl_test_nullable_StructWithNullableVectorTable;

struct StructWithNullableVector {
  static constexpr const fidl_type_t* Type =
      &fidl_test_nullable_StructWithNullableVectorTable;
  static constexpr uint32_t MaxNumHandles = 0;
  static constexpr uint32_t PrimarySize = 16;
  [[maybe_unused]] static constexpr uint32_t MaxOutOfLine = 4294967295;
  static constexpr bool HasPointer = true;

  ::fidl::VectorView<int32_t> val = {};

  class UnownedEncodedMessage;
  class OwnedEncodedMessage;
  class DecodedMessage;
};

class StructWithNullableVector::UnownedEncodedMessage final {
 public:
  UnownedEncodedMessage(uint8_t* backing_buffer, uint32_t backing_buffer_size,
                        StructWithNullableVector* value)
      : UnownedEncodedMessage(::fidl::internal::IovecBufferSize, backing_buffer,
                              backing_buffer_size, value) {}
  UnownedEncodedMessage(uint32_t iovec_capacity, uint8_t* backing_buffer,
                        uint32_t backing_buffer_size,
                        StructWithNullableVector* value)
      : message_(::fidl::OutgoingMessage::CreateInternal(
            ::fidl::OutgoingMessage::ConstructorArgs{
                .transport_vtable = &::fidl::internal::ChannelTransport::VTable,
                .iovecs = iovecs_,
                .iovec_capacity = iovec_capacity,
                .backing_buffer = backing_buffer,
                .backing_buffer_capacity = backing_buffer_size,
            })) {
    ZX_ASSERT(iovec_capacity <= std::size(iovecs_));
    message_.Encode<StructWithNullableVector>(value);
  }
  UnownedEncodedMessage(const UnownedEncodedMessage&) = delete;
  UnownedEncodedMessage(UnownedEncodedMessage&&) = delete;
  UnownedEncodedMessage* operator=(const UnownedEncodedMessage&) = delete;
  UnownedEncodedMessage* operator=(UnownedEncodedMessage&&) = delete;

  zx_status_t status() const { return message_.status(); }
#ifdef __Fuchsia__
  const char* status_string() const { return message_.status_string(); }
#endif  // __Fuchsia__
  bool ok() const { return message_.status() == ZX_OK; }
  std::string FormatDescription() const { return message_.FormatDescription(); }
  const char* lossy_description() const { return message_.lossy_description(); }
  const ::fidl::Result& error() const { return message_.error(); }

  ::fidl::OutgoingMessage& GetOutgoingMessage() { return message_; }

 private:
  ::fidl::internal::IovecBuffer iovecs_;
  ::fidl::OutgoingMessage message_;
};

class StructWithNullableVector::OwnedEncodedMessage final {
 public:
  explicit OwnedEncodedMessage(StructWithNullableVector* value)
      : message_(1u, backing_buffer_.data(),
                 static_cast<uint32_t>(backing_buffer_.size()), value) {}
  // Internal constructor.
  explicit OwnedEncodedMessage(
      ::fidl::internal::AllowUnownedInputRef allow_unowned,
      StructWithNullableVector* value)
      : message_(::fidl::internal::IovecBufferSize, backing_buffer_.data(),
                 static_cast<uint32_t>(backing_buffer_.size()), value) {}
  OwnedEncodedMessage(const OwnedEncodedMessage&) = delete;
  OwnedEncodedMessage(OwnedEncodedMessage&&) = delete;
  OwnedEncodedMessage* operator=(const OwnedEncodedMessage&) = delete;
  OwnedEncodedMessage* operator=(OwnedEncodedMessage&&) = delete;

  zx_status_t status() const { return message_.status(); }
#ifdef __Fuchsia__
  const char* status_string() const { return message_.status_string(); }
#endif  // __Fuchsia__
  bool ok() const { return message_.ok(); }
  std::string FormatDescription() const { return message_.FormatDescription(); }
  const char* lossy_description() const { return message_.lossy_description(); }
  const ::fidl::Result& error() const { return message_.error(); }

  ::fidl::OutgoingMessage& GetOutgoingMessage() {
    return message_.GetOutgoingMessage();
  }

 private:
  ::fidl::internal::BoxedMessageBuffer<ZX_CHANNEL_MAX_MSG_BYTES>
      backing_buffer_;
  UnownedEncodedMessage message_;
};

class StructWithNullableVector::DecodedMessage final
    : public ::fidl::internal::DecodedMessageBase<StructWithNullableVector> {
 public:
  using DecodedMessageBase<StructWithNullableVector>::DecodedMessageBase;

  DecodedMessage(uint8_t* bytes, uint32_t byte_actual,
                 zx_handle_t* handles = nullptr,
                 fidl_channel_handle_metadata_t* handle_metadata = nullptr,
                 uint32_t handle_actual = 0)
      : DecodedMessageBase(
            ::fidl::internal::kLLCPPEncodedWireFormatVersion,
            ::fidl::IncomingMessage::Create(
                bytes, byte_actual, handles, handle_metadata, handle_actual,
                ::fidl::IncomingMessage::kSkipMessageHeaderValidation)) {}

  // Internal constructor for specifying a specific wire format version.
  DecodedMessage(::fidl::internal::WireFormatVersion wire_format_version,
                 uint8_t* bytes, uint32_t byte_actual,
                 zx_handle_t* handles = nullptr,
                 fidl_channel_handle_metadata_t* handle_metadata = nullptr,
                 uint32_t handle_actual = 0)
      : DecodedMessageBase(
            wire_format_version,
            ::fidl::IncomingMessage::Create(
                bytes, byte_actual, handles, handle_metadata, handle_actual,
                ::fidl::IncomingMessage::kSkipMessageHeaderValidation)) {}

  DecodedMessage(const fidl_incoming_msg_t* c_msg)
      : DecodedMessage(reinterpret_cast<uint8_t*>(c_msg->bytes),
                       c_msg->num_bytes, c_msg->handles,
                       static_cast<fidl_channel_handle_metadata_t*>(
                           c_msg->handle_metadata),
                       c_msg->num_handles) {}

  // Internal constructor for specifying a specific wire format version.
  DecodedMessage(::fidl::internal::WireFormatVersion wire_format_version,
                 const fidl_incoming_msg_t* c_msg)
      : DecodedMessage(wire_format_version,
                       reinterpret_cast<uint8_t*>(c_msg->bytes),
                       c_msg->num_bytes, c_msg->handles,
                       static_cast<fidl_channel_handle_metadata_t*>(
                           c_msg->handle_metadata),
                       c_msg->num_handles) {}

  StructWithNullableVector* PrimaryObject() {
    ZX_DEBUG_ASSERT(ok());
    return reinterpret_cast<StructWithNullableVector*>(bytes());
  }

  // Release the ownership of the decoded message. That means that the handles
  // won't be closed When the object is destroyed. After calling this method,
  // the |DecodedMessage| object should not be used anymore.
  void ReleasePrimaryObject() { ResetBytes(); }
};

extern "C" const fidl_type_t fidl_test_nullable_StructWithNullableUnionTable;

struct StructWithNullableUnion {
  static constexpr const fidl_type_t* Type =
      &fidl_test_nullable_StructWithNullableUnionTable;
  static constexpr uint32_t MaxNumHandles = 0;
  static constexpr uint32_t PrimarySize = 16;
  [[maybe_unused]] static constexpr uint32_t MaxOutOfLine = 0;
  static constexpr bool HasPointer = true;

  ::fidl_test_nullable::wire::SimpleUnion val = {};

  class UnownedEncodedMessage;
  class OwnedEncodedMessage;
  class DecodedMessage;
};

class StructWithNullableUnion::UnownedEncodedMessage final {
 public:
  UnownedEncodedMessage(uint8_t* backing_buffer, uint32_t backing_buffer_size,
                        StructWithNullableUnion* value)
      : UnownedEncodedMessage(::fidl::internal::IovecBufferSize, backing_buffer,
                              backing_buffer_size, value) {}
  UnownedEncodedMessage(uint32_t iovec_capacity, uint8_t* backing_buffer,
                        uint32_t backing_buffer_size,
                        StructWithNullableUnion* value)
      : message_(::fidl::OutgoingMessage::CreateInternal(
            ::fidl::OutgoingMessage::ConstructorArgs{
                .transport_vtable = &::fidl::internal::ChannelTransport::VTable,
                .iovecs = iovecs_,
                .iovec_capacity = iovec_capacity,
                .backing_buffer = backing_buffer,
                .backing_buffer_capacity = backing_buffer_size,
            })) {
    ZX_ASSERT(iovec_capacity <= std::size(iovecs_));
    message_.Encode<StructWithNullableUnion>(value);
  }
  UnownedEncodedMessage(const UnownedEncodedMessage&) = delete;
  UnownedEncodedMessage(UnownedEncodedMessage&&) = delete;
  UnownedEncodedMessage* operator=(const UnownedEncodedMessage&) = delete;
  UnownedEncodedMessage* operator=(UnownedEncodedMessage&&) = delete;

  zx_status_t status() const { return message_.status(); }
#ifdef __Fuchsia__
  const char* status_string() const { return message_.status_string(); }
#endif  // __Fuchsia__
  bool ok() const { return message_.status() == ZX_OK; }
  std::string FormatDescription() const { return message_.FormatDescription(); }
  const char* lossy_description() const { return message_.lossy_description(); }
  const ::fidl::Result& error() const { return message_.error(); }

  ::fidl::OutgoingMessage& GetOutgoingMessage() { return message_; }

 private:
  ::fidl::internal::IovecBuffer iovecs_;
  ::fidl::OutgoingMessage message_;
};

class StructWithNullableUnion::OwnedEncodedMessage final {
 public:
  explicit OwnedEncodedMessage(StructWithNullableUnion* value)
      : message_(1u, backing_buffer_.data(),
                 static_cast<uint32_t>(backing_buffer_.size()), value) {}
  // Internal constructor.
  explicit OwnedEncodedMessage(
      ::fidl::internal::AllowUnownedInputRef allow_unowned,
      StructWithNullableUnion* value)
      : message_(::fidl::internal::IovecBufferSize, backing_buffer_.data(),
                 static_cast<uint32_t>(backing_buffer_.size()), value) {}
  OwnedEncodedMessage(const OwnedEncodedMessage&) = delete;
  OwnedEncodedMessage(OwnedEncodedMessage&&) = delete;
  OwnedEncodedMessage* operator=(const OwnedEncodedMessage&) = delete;
  OwnedEncodedMessage* operator=(OwnedEncodedMessage&&) = delete;

  zx_status_t status() const { return message_.status(); }
#ifdef __Fuchsia__
  const char* status_string() const { return message_.status_string(); }
#endif  // __Fuchsia__
  bool ok() const { return message_.ok(); }
  std::string FormatDescription() const { return message_.FormatDescription(); }
  const char* lossy_description() const { return message_.lossy_description(); }
  const ::fidl::Result& error() const { return message_.error(); }

  ::fidl::OutgoingMessage& GetOutgoingMessage() {
    return message_.GetOutgoingMessage();
  }

 private:
  ::fidl::internal::InlineMessageBuffer<32> backing_buffer_;
  UnownedEncodedMessage message_;
};

class StructWithNullableUnion::DecodedMessage final
    : public ::fidl::internal::DecodedMessageBase<StructWithNullableUnion> {
 public:
  using DecodedMessageBase<StructWithNullableUnion>::DecodedMessageBase;

  DecodedMessage(uint8_t* bytes, uint32_t byte_actual,
                 zx_handle_t* handles = nullptr,
                 fidl_channel_handle_metadata_t* handle_metadata = nullptr,
                 uint32_t handle_actual = 0)
      : DecodedMessageBase(
            ::fidl::internal::kLLCPPEncodedWireFormatVersion,
            ::fidl::IncomingMessage::Create(
                bytes, byte_actual, handles, handle_metadata, handle_actual,
                ::fidl::IncomingMessage::kSkipMessageHeaderValidation)) {}

  // Internal constructor for specifying a specific wire format version.
  DecodedMessage(::fidl::internal::WireFormatVersion wire_format_version,
                 uint8_t* bytes, uint32_t byte_actual,
                 zx_handle_t* handles = nullptr,
                 fidl_channel_handle_metadata_t* handle_metadata = nullptr,
                 uint32_t handle_actual = 0)
      : DecodedMessageBase(
            wire_format_version,
            ::fidl::IncomingMessage::Create(
                bytes, byte_actual, handles, handle_metadata, handle_actual,
                ::fidl::IncomingMessage::kSkipMessageHeaderValidation)) {}

  DecodedMessage(const fidl_incoming_msg_t* c_msg)
      : DecodedMessage(reinterpret_cast<uint8_t*>(c_msg->bytes),
                       c_msg->num_bytes, c_msg->handles,
                       static_cast<fidl_channel_handle_metadata_t*>(
                           c_msg->handle_metadata),
                       c_msg->num_handles) {}

  // Internal constructor for specifying a specific wire format version.
  DecodedMessage(::fidl::internal::WireFormatVersion wire_format_version,
                 const fidl_incoming_msg_t* c_msg)
      : DecodedMessage(wire_format_version,
                       reinterpret_cast<uint8_t*>(c_msg->bytes),
                       c_msg->num_bytes, c_msg->handles,
                       static_cast<fidl_channel_handle_metadata_t*>(
                           c_msg->handle_metadata),
                       c_msg->num_handles) {}

  StructWithNullableUnion* PrimaryObject() {
    ZX_DEBUG_ASSERT(ok());
    return reinterpret_cast<StructWithNullableUnion*>(bytes());
  }

  // Release the ownership of the decoded message. That means that the handles
  // won't be closed When the object is destroyed. After calling this method,
  // the |DecodedMessage| object should not be used anymore.
  void ReleasePrimaryObject() { ResetBytes(); }
};

extern "C" const fidl_type_t fidl_test_nullable_StructWithNullableStructTable;

struct StructWithNullableStruct {
  static constexpr const fidl_type_t* Type =
      &fidl_test_nullable_StructWithNullableStructTable;
  static constexpr uint32_t MaxNumHandles = 0;
  static constexpr uint32_t PrimarySize = 8;
  [[maybe_unused]] static constexpr uint32_t MaxOutOfLine = 8;
  static constexpr bool HasPointer = true;

  ::fidl::ObjectView<::fidl_test_nullable::wire::Int32Wrapper> val = {};

  class UnownedEncodedMessage;
  class OwnedEncodedMessage;
  class DecodedMessage;
};

class StructWithNullableStruct::UnownedEncodedMessage final {
 public:
  UnownedEncodedMessage(uint8_t* backing_buffer, uint32_t backing_buffer_size,
                        StructWithNullableStruct* value)
      : UnownedEncodedMessage(::fidl::internal::IovecBufferSize, backing_buffer,
                              backing_buffer_size, value) {}
  UnownedEncodedMessage(uint32_t iovec_capacity, uint8_t* backing_buffer,
                        uint32_t backing_buffer_size,
                        StructWithNullableStruct* value)
      : message_(::fidl::OutgoingMessage::CreateInternal(
            ::fidl::OutgoingMessage::ConstructorArgs{
                .transport_vtable = &::fidl::internal::ChannelTransport::VTable,
                .iovecs = iovecs_,
                .iovec_capacity = iovec_capacity,
                .backing_buffer = backing_buffer,
                .backing_buffer_capacity = backing_buffer_size,
            })) {
    ZX_ASSERT(iovec_capacity <= std::size(iovecs_));
    message_.Encode<StructWithNullableStruct>(value);
  }
  UnownedEncodedMessage(const UnownedEncodedMessage&) = delete;
  UnownedEncodedMessage(UnownedEncodedMessage&&) = delete;
  UnownedEncodedMessage* operator=(const UnownedEncodedMessage&) = delete;
  UnownedEncodedMessage* operator=(UnownedEncodedMessage&&) = delete;

  zx_status_t status() const { return message_.status(); }
#ifdef __Fuchsia__
  const char* status_string() const { return message_.status_string(); }
#endif  // __Fuchsia__
  bool ok() const { return message_.status() == ZX_OK; }
  std::string FormatDescription() const { return message_.FormatDescription(); }
  const char* lossy_description() const { return message_.lossy_description(); }
  const ::fidl::Result& error() const { return message_.error(); }

  ::fidl::OutgoingMessage& GetOutgoingMessage() { return message_; }

 private:
  ::fidl::internal::IovecBuffer iovecs_;
  ::fidl::OutgoingMessage message_;
};

class StructWithNullableStruct::OwnedEncodedMessage final {
 public:
  explicit OwnedEncodedMessage(StructWithNullableStruct* value)
      : message_(1u, backing_buffer_.data(),
                 static_cast<uint32_t>(backing_buffer_.size()), value) {}
  // Internal constructor.
  explicit OwnedEncodedMessage(
      ::fidl::internal::AllowUnownedInputRef allow_unowned,
      StructWithNullableStruct* value)
      : message_(::fidl::internal::IovecBufferSize, backing_buffer_.data(),
                 static_cast<uint32_t>(backing_buffer_.size()), value) {}
  OwnedEncodedMessage(const OwnedEncodedMessage&) = delete;
  OwnedEncodedMessage(OwnedEncodedMessage&&) = delete;
  OwnedEncodedMessage* operator=(const OwnedEncodedMessage&) = delete;
  OwnedEncodedMessage* operator=(OwnedEncodedMessage&&) = delete;

  zx_status_t status() const { return message_.status(); }
#ifdef __Fuchsia__
  const char* status_string() const { return message_.status_string(); }
#endif  // __Fuchsia__
  bool ok() const { return message_.ok(); }
  std::string FormatDescription() const { return message_.FormatDescription(); }
  const char* lossy_description() const { return message_.lossy_description(); }
  const ::fidl::Result& error() const { return message_.error(); }

  ::fidl::OutgoingMessage& GetOutgoingMessage() {
    return message_.GetOutgoingMessage();
  }

 private:
  ::fidl::internal::InlineMessageBuffer<16> backing_buffer_;
  UnownedEncodedMessage message_;
};

class StructWithNullableStruct::DecodedMessage final
    : public ::fidl::internal::DecodedMessageBase<StructWithNullableStruct> {
 public:
  using DecodedMessageBase<StructWithNullableStruct>::DecodedMessageBase;

  DecodedMessage(uint8_t* bytes, uint32_t byte_actual,
                 zx_handle_t* handles = nullptr,
                 fidl_channel_handle_metadata_t* handle_metadata = nullptr,
                 uint32_t handle_actual = 0)
      : DecodedMessageBase(
            ::fidl::internal::kLLCPPEncodedWireFormatVersion,
            ::fidl::IncomingMessage::Create(
                bytes, byte_actual, handles, handle_metadata, handle_actual,
                ::fidl::IncomingMessage::kSkipMessageHeaderValidation)) {}

  // Internal constructor for specifying a specific wire format version.
  DecodedMessage(::fidl::internal::WireFormatVersion wire_format_version,
                 uint8_t* bytes, uint32_t byte_actual,
                 zx_handle_t* handles = nullptr,
                 fidl_channel_handle_metadata_t* handle_metadata = nullptr,
                 uint32_t handle_actual = 0)
      : DecodedMessageBase(
            wire_format_version,
            ::fidl::IncomingMessage::Create(
                bytes, byte_actual, handles, handle_metadata, handle_actual,
                ::fidl::IncomingMessage::kSkipMessageHeaderValidation)) {}

  DecodedMessage(const fidl_incoming_msg_t* c_msg)
      : DecodedMessage(reinterpret_cast<uint8_t*>(c_msg->bytes),
                       c_msg->num_bytes, c_msg->handles,
                       static_cast<fidl_channel_handle_metadata_t*>(
                           c_msg->handle_metadata),
                       c_msg->num_handles) {}

  // Internal constructor for specifying a specific wire format version.
  DecodedMessage(::fidl::internal::WireFormatVersion wire_format_version,
                 const fidl_incoming_msg_t* c_msg)
      : DecodedMessage(wire_format_version,
                       reinterpret_cast<uint8_t*>(c_msg->bytes),
                       c_msg->num_bytes, c_msg->handles,
                       static_cast<fidl_channel_handle_metadata_t*>(
                           c_msg->handle_metadata),
                       c_msg->num_handles) {}

  StructWithNullableStruct* PrimaryObject() {
    ZX_DEBUG_ASSERT(ok());
    return reinterpret_cast<StructWithNullableStruct*>(bytes());
  }

  // Release the ownership of the decoded message. That means that the handles
  // won't be closed When the object is destroyed. After calling this method,
  // the |DecodedMessage| object should not be used anymore.
  void ReleasePrimaryObject() { ResetBytes(); }
};

extern "C" const fidl_type_t fidl_test_nullable_StructWithNullableStringTable;

struct StructWithNullableString {
  static constexpr const fidl_type_t* Type =
      &fidl_test_nullable_StructWithNullableStringTable;
  static constexpr uint32_t MaxNumHandles = 0;
  static constexpr uint32_t PrimarySize = 16;
  [[maybe_unused]] static constexpr uint32_t MaxOutOfLine = 4294967295;
  static constexpr bool HasPointer = true;

  ::fidl::StringView val = {};

  class UnownedEncodedMessage;
  class OwnedEncodedMessage;
  class DecodedMessage;
};

class StructWithNullableString::UnownedEncodedMessage final {
 public:
  UnownedEncodedMessage(uint8_t* backing_buffer, uint32_t backing_buffer_size,
                        StructWithNullableString* value)
      : UnownedEncodedMessage(::fidl::internal::IovecBufferSize, backing_buffer,
                              backing_buffer_size, value) {}
  UnownedEncodedMessage(uint32_t iovec_capacity, uint8_t* backing_buffer,
                        uint32_t backing_buffer_size,
                        StructWithNullableString* value)
      : message_(::fidl::OutgoingMessage::CreateInternal(
            ::fidl::OutgoingMessage::ConstructorArgs{
                .transport_vtable = &::fidl::internal::ChannelTransport::VTable,
                .iovecs = iovecs_,
                .iovec_capacity = iovec_capacity,
                .backing_buffer = backing_buffer,
                .backing_buffer_capacity = backing_buffer_size,
            })) {
    ZX_ASSERT(iovec_capacity <= std::size(iovecs_));
    message_.Encode<StructWithNullableString>(value);
  }
  UnownedEncodedMessage(const UnownedEncodedMessage&) = delete;
  UnownedEncodedMessage(UnownedEncodedMessage&&) = delete;
  UnownedEncodedMessage* operator=(const UnownedEncodedMessage&) = delete;
  UnownedEncodedMessage* operator=(UnownedEncodedMessage&&) = delete;

  zx_status_t status() const { return message_.status(); }
#ifdef __Fuchsia__
  const char* status_string() const { return message_.status_string(); }
#endif  // __Fuchsia__
  bool ok() const { return message_.status() == ZX_OK; }
  std::string FormatDescription() const { return message_.FormatDescription(); }
  const char* lossy_description() const { return message_.lossy_description(); }
  const ::fidl::Result& error() const { return message_.error(); }

  ::fidl::OutgoingMessage& GetOutgoingMessage() { return message_; }

 private:
  ::fidl::internal::IovecBuffer iovecs_;
  ::fidl::OutgoingMessage message_;
};

class StructWithNullableString::OwnedEncodedMessage final {
 public:
  explicit OwnedEncodedMessage(StructWithNullableString* value)
      : message_(1u, backing_buffer_.data(),
                 static_cast<uint32_t>(backing_buffer_.size()), value) {}
  // Internal constructor.
  explicit OwnedEncodedMessage(
      ::fidl::internal::AllowUnownedInputRef allow_unowned,
      StructWithNullableString* value)
      : message_(::fidl::internal::IovecBufferSize, backing_buffer_.data(),
                 static_cast<uint32_t>(backing_buffer_.size()), value) {}
  OwnedEncodedMessage(const OwnedEncodedMessage&) = delete;
  OwnedEncodedMessage(OwnedEncodedMessage&&) = delete;
  OwnedEncodedMessage* operator=(const OwnedEncodedMessage&) = delete;
  OwnedEncodedMessage* operator=(OwnedEncodedMessage&&) = delete;

  zx_status_t status() const { return message_.status(); }
#ifdef __Fuchsia__
  const char* status_string() const { return message_.status_string(); }
#endif  // __Fuchsia__
  bool ok() const { return message_.ok(); }
  std::string FormatDescription() const { return message_.FormatDescription(); }
  const char* lossy_description() const { return message_.lossy_description(); }
  const ::fidl::Result& error() const { return message_.error(); }

  ::fidl::OutgoingMessage& GetOutgoingMessage() {
    return message_.GetOutgoingMessage();
  }

 private:
  ::fidl::internal::BoxedMessageBuffer<ZX_CHANNEL_MAX_MSG_BYTES>
      backing_buffer_;
  UnownedEncodedMessage message_;
};

class StructWithNullableString::DecodedMessage final
    : public ::fidl::internal::DecodedMessageBase<StructWithNullableString> {
 public:
  using DecodedMessageBase<StructWithNullableString>::DecodedMessageBase;

  DecodedMessage(uint8_t* bytes, uint32_t byte_actual,
                 zx_handle_t* handles = nullptr,
                 fidl_channel_handle_metadata_t* handle_metadata = nullptr,
                 uint32_t handle_actual = 0)
      : DecodedMessageBase(
            ::fidl::internal::kLLCPPEncodedWireFormatVersion,
            ::fidl::IncomingMessage::Create(
                bytes, byte_actual, handles, handle_metadata, handle_actual,
                ::fidl::IncomingMessage::kSkipMessageHeaderValidation)) {}

  // Internal constructor for specifying a specific wire format version.
  DecodedMessage(::fidl::internal::WireFormatVersion wire_format_version,
                 uint8_t* bytes, uint32_t byte_actual,
                 zx_handle_t* handles = nullptr,
                 fidl_channel_handle_metadata_t* handle_metadata = nullptr,
                 uint32_t handle_actual = 0)
      : DecodedMessageBase(
            wire_format_version,
            ::fidl::IncomingMessage::Create(
                bytes, byte_actual, handles, handle_metadata, handle_actual,
                ::fidl::IncomingMessage::kSkipMessageHeaderValidation)) {}

  DecodedMessage(const fidl_incoming_msg_t* c_msg)
      : DecodedMessage(reinterpret_cast<uint8_t*>(c_msg->bytes),
                       c_msg->num_bytes, c_msg->handles,
                       static_cast<fidl_channel_handle_metadata_t*>(
                           c_msg->handle_metadata),
                       c_msg->num_handles) {}

  // Internal constructor for specifying a specific wire format version.
  DecodedMessage(::fidl::internal::WireFormatVersion wire_format_version,
                 const fidl_incoming_msg_t* c_msg)
      : DecodedMessage(wire_format_version,
                       reinterpret_cast<uint8_t*>(c_msg->bytes),
                       c_msg->num_bytes, c_msg->handles,
                       static_cast<fidl_channel_handle_metadata_t*>(
                           c_msg->handle_metadata),
                       c_msg->num_handles) {}

  StructWithNullableString* PrimaryObject() {
    ZX_DEBUG_ASSERT(ok());
    return reinterpret_cast<StructWithNullableString*>(bytes());
  }

  // Release the ownership of the decoded message. That means that the handles
  // won't be closed When the object is destroyed. After calling this method,
  // the |DecodedMessage| object should not be used anymore.
  void ReleasePrimaryObject() { ResetBytes(); }
};

}  // namespace wire
}  // namespace fidl_test_nullable
namespace fidl {

template <>
struct IsFidlType<::fidl_test_nullable::wire::StructWithNullableVector>
    : public std::true_type {};
template <>
struct IsStruct<::fidl_test_nullable::wire::StructWithNullableVector>
    : public std::true_type {};
static_assert(std::is_standard_layout_v<
              ::fidl_test_nullable::wire::StructWithNullableVector>);
static_assert(offsetof(::fidl_test_nullable::wire::StructWithNullableVector,
                       val) == 0);
static_assert(
    sizeof(::fidl_test_nullable::wire::StructWithNullableVector) ==
    ::fidl_test_nullable::wire::StructWithNullableVector::PrimarySize);

template <>
struct IsFidlType<::fidl_test_nullable::wire::StructWithNullableUnion>
    : public std::true_type {};
template <>
struct IsStruct<::fidl_test_nullable::wire::StructWithNullableUnion>
    : public std::true_type {};
static_assert(std::is_standard_layout_v<
              ::fidl_test_nullable::wire::StructWithNullableUnion>);
static_assert(offsetof(::fidl_test_nullable::wire::StructWithNullableUnion,
                       val) == 0);
static_assert(sizeof(::fidl_test_nullable::wire::StructWithNullableUnion) ==
              ::fidl_test_nullable::wire::StructWithNullableUnion::PrimarySize);

template <>
struct IsFidlType<::fidl_test_nullable::wire::StructWithNullableStruct>
    : public std::true_type {};
template <>
struct IsStruct<::fidl_test_nullable::wire::StructWithNullableStruct>
    : public std::true_type {};
static_assert(std::is_standard_layout_v<
              ::fidl_test_nullable::wire::StructWithNullableStruct>);
static_assert(offsetof(::fidl_test_nullable::wire::StructWithNullableStruct,
                       val) == 0);
static_assert(
    sizeof(::fidl_test_nullable::wire::StructWithNullableStruct) ==
    ::fidl_test_nullable::wire::StructWithNullableStruct::PrimarySize);

template <>
struct IsFidlType<::fidl_test_nullable::wire::StructWithNullableString>
    : public std::true_type {};
template <>
struct IsStruct<::fidl_test_nullable::wire::StructWithNullableString>
    : public std::true_type {};
static_assert(std::is_standard_layout_v<
              ::fidl_test_nullable::wire::StructWithNullableString>);
static_assert(offsetof(::fidl_test_nullable::wire::StructWithNullableString,
                       val) == 0);
static_assert(
    sizeof(::fidl_test_nullable::wire::StructWithNullableString) ==
    ::fidl_test_nullable::wire::StructWithNullableString::PrimarySize);

#ifdef __Fuchsia__
template <>
struct IsResource<::fidl_test_nullable::wire::StructWithNullableRequest>
    : public std::true_type {};
template <>
struct IsFidlType<::fidl_test_nullable::wire::StructWithNullableRequest>
    : public std::true_type {};
template <>
struct IsStruct<::fidl_test_nullable::wire::StructWithNullableRequest>
    : public std::true_type {};
static_assert(std::is_standard_layout_v<
              ::fidl_test_nullable::wire::StructWithNullableRequest>);
static_assert(offsetof(::fidl_test_nullable::wire::StructWithNullableRequest,
                       val) == 0);
static_assert(
    sizeof(::fidl_test_nullable::wire::StructWithNullableRequest) ==
    ::fidl_test_nullable::wire::StructWithNullableRequest::PrimarySize);
#endif  // __Fuchsia__

#ifdef __Fuchsia__
template <>
struct IsResource<::fidl_test_nullable::wire::StructWithNullableProtocol>
    : public std::true_type {};
template <>
struct IsFidlType<::fidl_test_nullable::wire::StructWithNullableProtocol>
    : public std::true_type {};
template <>
struct IsStruct<::fidl_test_nullable::wire::StructWithNullableProtocol>
    : public std::true_type {};
static_assert(std::is_standard_layout_v<
              ::fidl_test_nullable::wire::StructWithNullableProtocol>);
static_assert(offsetof(::fidl_test_nullable::wire::StructWithNullableProtocol,
                       val) == 0);
static_assert(
    sizeof(::fidl_test_nullable::wire::StructWithNullableProtocol) ==
    ::fidl_test_nullable::wire::StructWithNullableProtocol::PrimarySize);
#endif  // __Fuchsia__

#ifdef __Fuchsia__
template <>
struct IsResource<::fidl_test_nullable::wire::StructWithNullableHandle>
    : public std::true_type {};
template <>
struct IsFidlType<::fidl_test_nullable::wire::StructWithNullableHandle>
    : public std::true_type {};
template <>
struct IsStruct<::fidl_test_nullable::wire::StructWithNullableHandle>
    : public std::true_type {};
static_assert(std::is_standard_layout_v<
              ::fidl_test_nullable::wire::StructWithNullableHandle>);
static_assert(offsetof(::fidl_test_nullable::wire::StructWithNullableHandle,
                       val) == 0);
static_assert(
    sizeof(::fidl_test_nullable::wire::StructWithNullableHandle) ==
    ::fidl_test_nullable::wire::StructWithNullableHandle::PrimarySize);
#endif  // __Fuchsia__

template <>
struct IsFidlType<::fidl_test_nullable::wire::Int32Wrapper>
    : public std::true_type {};
template <>
struct IsStruct<::fidl_test_nullable::wire::Int32Wrapper>
    : public std::true_type {};
static_assert(
    std::is_standard_layout_v<::fidl_test_nullable::wire::Int32Wrapper>);
static_assert(offsetof(::fidl_test_nullable::wire::Int32Wrapper, val) == 0);
static_assert(sizeof(::fidl_test_nullable::wire::Int32Wrapper) ==
              ::fidl_test_nullable::wire::Int32Wrapper::PrimarySize);

template <>
struct IsFidlType<::fidl_test_nullable::wire::SimpleUnion>
    : public std::true_type {};
template <>
struct IsUnion<::fidl_test_nullable::wire::SimpleUnion>
    : public std::true_type {};
static_assert(
    std::is_standard_layout_v<::fidl_test_nullable::wire::SimpleUnion>);

}  // namespace fidl
