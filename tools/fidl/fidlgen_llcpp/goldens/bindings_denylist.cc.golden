// WARNING: This file is machine generated by fidlgen.

#include <fidl/test/bindingsdenylist/llcpp/fidl.h>

#include <memory>

namespace fidl_test_bindingsdenylist {
[[maybe_unused]] constexpr uint64_t
    kOnlyLibfuzzerAndDeps_LibfuzzerNeedsNonemptyProtocol_Ordinal =
        2054945783954685224lu;

extern "C" const fidl_type_t
    fidl_test_bindingsdenylist_OnlyLibfuzzerAndDepsLibfuzzerNeedsNonemptyProtocolRequestTable;

extern "C" const fidl_type_t
    fidl_test_bindingsdenylist_OnlyLibfuzzerAndDepsLibfuzzerNeedsNonemptyProtocolResponseTable;
#ifdef __Fuchsia__
::fidl_test_bindingsdenylist::OnlyLibfuzzerAndDeps::ResultOf::
    LibfuzzerNeedsNonemptyProtocol::LibfuzzerNeedsNonemptyProtocol(
        ::fidl::UnownedClientEnd<
            ::fidl_test_bindingsdenylist::OnlyLibfuzzerAndDeps>
            _client) {
  ::fidl::OwnedEncodedMessage<
      ::fidl_test_bindingsdenylist::OnlyLibfuzzerAndDeps::
          LibfuzzerNeedsNonemptyProtocolRequest>
      _request(zx_txid_t(0));
  _request.GetOutgoingMessage()
      .Call<::fidl_test_bindingsdenylist::OnlyLibfuzzerAndDeps::
                LibfuzzerNeedsNonemptyProtocolResponse>(_client, bytes_.data(),
                                                        bytes_.size());
  status_ = _request.status();
  error_ = _request.error();
}

::fidl_test_bindingsdenylist::OnlyLibfuzzerAndDeps::ResultOf::
    LibfuzzerNeedsNonemptyProtocol::LibfuzzerNeedsNonemptyProtocol(
        ::fidl::UnownedClientEnd<
            ::fidl_test_bindingsdenylist::OnlyLibfuzzerAndDeps>
            _client,
        zx_time_t _deadline) {
  ::fidl::OwnedEncodedMessage<
      ::fidl_test_bindingsdenylist::OnlyLibfuzzerAndDeps::
          LibfuzzerNeedsNonemptyProtocolRequest>
      _request(zx_txid_t(0));
  _request.GetOutgoingMessage()
      .Call<::fidl_test_bindingsdenylist::OnlyLibfuzzerAndDeps::
                LibfuzzerNeedsNonemptyProtocolResponse>(
          _client, bytes_.data(), bytes_.size(), _deadline);
  status_ = _request.status();
  error_ = _request.error();
}
#endif

}  // namespace fidl_test_bindingsdenylist
#ifdef __Fuchsia__
::fidl_test_bindingsdenylist::OnlyLibfuzzerAndDeps::ResultOf::
    LibfuzzerNeedsNonemptyProtocol
    fidl::internal::WireClientImpl<
        ::fidl_test_bindingsdenylist::OnlyLibfuzzerAndDeps>::
        LibfuzzerNeedsNonemptyProtocol_Sync() {
  if (auto _channel = ::fidl::internal::ClientBase::GetChannel()) {
    return ::fidl_test_bindingsdenylist::OnlyLibfuzzerAndDeps::ResultOf::
        LibfuzzerNeedsNonemptyProtocol(
            ::fidl::UnownedClientEnd<
                ::fidl_test_bindingsdenylist::OnlyLibfuzzerAndDeps>(
                _channel->handle()));
  }
  return ::fidl_test_bindingsdenylist::OnlyLibfuzzerAndDeps::ResultOf::
      LibfuzzerNeedsNonemptyProtocol(
          ::fidl::Result(ZX_ERR_CANCELED, ::fidl::kErrorChannelUnbound));
}
#endif

#ifdef __Fuchsia__
::fidl_test_bindingsdenylist::OnlyLibfuzzerAndDeps::
    LibfuzzerNeedsNonemptyProtocolResponseContext::
        LibfuzzerNeedsNonemptyProtocolResponseContext()
    : ::fidl::internal::ResponseContext(
          ::fidl_test_bindingsdenylist::OnlyLibfuzzerAndDeps::
              LibfuzzerNeedsNonemptyProtocolResponse::Type,
          ::fidl_test_bindingsdenylist::
              kOnlyLibfuzzerAndDeps_LibfuzzerNeedsNonemptyProtocol_Ordinal) {}

void ::fidl_test_bindingsdenylist::OnlyLibfuzzerAndDeps::
    LibfuzzerNeedsNonemptyProtocolResponseContext::OnReply(uint8_t* reply) {
  OnReply(reinterpret_cast<::fidl_test_bindingsdenylist::OnlyLibfuzzerAndDeps::
                               LibfuzzerNeedsNonemptyProtocolResponse*>(reply));
}

::fidl::Result fidl::internal::WireClientImpl<
    ::fidl_test_bindingsdenylist::OnlyLibfuzzerAndDeps>::
    LibfuzzerNeedsNonemptyProtocol(
        ::fit::callback<
            void(::fidl_test_bindingsdenylist::OnlyLibfuzzerAndDeps::
                     LibfuzzerNeedsNonemptyProtocolResponse* response)>
            _cb) {
  class ResponseContext final
      : public ::fidl_test_bindingsdenylist::OnlyLibfuzzerAndDeps::
            LibfuzzerNeedsNonemptyProtocolResponseContext {
   public:
    ResponseContext(::fit::callback<
                    void(::fidl_test_bindingsdenylist::OnlyLibfuzzerAndDeps::
                             LibfuzzerNeedsNonemptyProtocolResponse* response)>
                        cb)
        : cb_(std::move(cb)) {}

    void OnReply(
        ::fidl_test_bindingsdenylist::OnlyLibfuzzerAndDeps::
            LibfuzzerNeedsNonemptyProtocolResponse* response) override {
      cb_(response);

      delete this;
    }

    void OnError() override { delete this; }

   private:
    ::fit::callback<void(::fidl_test_bindingsdenylist::OnlyLibfuzzerAndDeps::
                             LibfuzzerNeedsNonemptyProtocolResponse* response)>
        cb_;
  };

  auto* _context = new ResponseContext(std::move(_cb));
  ::fidl::internal::ClientBase::PrepareAsyncTxn(_context);
  ::fidl_test_bindingsdenylist::OnlyLibfuzzerAndDeps::
      LibfuzzerNeedsNonemptyProtocolRequest::OwnedEncodedMessage _request(
          _context->Txid());
  return _request.GetOutgoingMessage().Write(this, _context);
}

::fidl::Result fidl::internal::WireClientImpl<
    ::fidl_test_bindingsdenylist::OnlyLibfuzzerAndDeps>::
    LibfuzzerNeedsNonemptyProtocol(
        ::fidl_test_bindingsdenylist::OnlyLibfuzzerAndDeps::
            LibfuzzerNeedsNonemptyProtocolResponseContext* _context) {
  ::fidl::internal::ClientBase::PrepareAsyncTxn(_context);

  ::fidl_test_bindingsdenylist::OnlyLibfuzzerAndDeps::
      LibfuzzerNeedsNonemptyProtocolRequest::OwnedEncodedMessage _request(
          _context->Txid());
  return _request.GetOutgoingMessage().Write(this, _context);
}
#endif

#ifdef __Fuchsia__
std::optional<::fidl::UnbindInfo> fidl::internal::WireClientImpl<
    ::fidl_test_bindingsdenylist::OnlyLibfuzzerAndDeps>::
    DispatchEvent(fidl_incoming_msg_t* msg) {
  FidlHandleInfoCloseMany(msg->handles, msg->num_handles);
  return ::fidl::UnbindInfo{::fidl::UnbindInfo::kUnexpectedMessage,
                            ZX_ERR_NOT_SUPPORTED};
}
#endif

namespace fidl_test_bindingsdenylist {
#ifdef __Fuchsia__
namespace methods {

void OnlyLibfuzzerAndDepsDispatchLibfuzzerNeedsNonemptyProtocol(
    void* interface, void* bytes, ::fidl::Transaction* txn) {
  ::fidl::WireInterface<::fidl_test_bindingsdenylist::OnlyLibfuzzerAndDeps>::
      LibfuzzerNeedsNonemptyProtocolCompleter::Sync completer(txn);
  reinterpret_cast<
      ::fidl_test_bindingsdenylist::OnlyLibfuzzerAndDeps::Interface*>(interface)
      ->LibfuzzerNeedsNonemptyProtocol(completer);
}

}  // namespace methods

namespace entries {

::fidl::internal::MethodEntry OnlyLibfuzzerAndDeps[] = {
    {::fidl_test_bindingsdenylist::
         kOnlyLibfuzzerAndDeps_LibfuzzerNeedsNonemptyProtocol_Ordinal,
     ::fidl_test_bindingsdenylist::OnlyLibfuzzerAndDeps::
         LibfuzzerNeedsNonemptyProtocolRequest::Type,
     methods::OnlyLibfuzzerAndDepsDispatchLibfuzzerNeedsNonemptyProtocol},
};

}  // namespace entries

::fidl::DispatchResult OnlyLibfuzzerAndDeps::TryDispatch(
    Interface* impl, fidl_incoming_msg_t* msg, ::fidl::Transaction* txn) {
  return ::fidl::internal::TryDispatch(
      impl, msg, txn, entries::OnlyLibfuzzerAndDeps,
      entries::OnlyLibfuzzerAndDeps +
          sizeof(entries::OnlyLibfuzzerAndDeps) /
              sizeof(::fidl::internal::MethodEntry));
}
#endif
}  // namespace fidl_test_bindingsdenylist

namespace fidl_test_bindingsdenylist {
#ifdef __Fuchsia__
::fidl::DispatchResult OnlyLibfuzzerAndDeps::Dispatch(
    Interface* impl, fidl_incoming_msg_t* msg, ::fidl::Transaction* txn) {
  ::fidl::DispatchResult dispatch_result = TryDispatch(impl, msg, txn);
  if (dispatch_result == ::fidl::DispatchResult::kNotFound) {
    FidlHandleInfoCloseMany(msg->handles, msg->num_handles);
    txn->InternalError(
        {::fidl::UnbindInfo::kUnexpectedMessage, ZX_ERR_NOT_SUPPORTED});
  }
  return dispatch_result;
}
}  // namespace fidl_test_bindingsdenylist
::fidl::DispatchResult
fidl::WireInterface<::fidl_test_bindingsdenylist::OnlyLibfuzzerAndDeps>::
    dispatch_message(fidl_incoming_msg_t* msg, ::fidl::Transaction* txn) {
  return ::fidl_test_bindingsdenylist::OnlyLibfuzzerAndDeps::Dispatch(this, msg,
                                                                      txn);
}
#endif

#ifdef __Fuchsia__
::fidl::Result
fidl::WireInterface<::fidl_test_bindingsdenylist::OnlyLibfuzzerAndDeps>::
    LibfuzzerNeedsNonemptyProtocolCompleterBase::Reply() {
  ::fidl::OwnedEncodedMessage<
      ::fidl_test_bindingsdenylist::OnlyLibfuzzerAndDeps::
          LibfuzzerNeedsNonemptyProtocolResponse>
      _response{};
  return ::fidl::WireInterface<
      ::fidl_test_bindingsdenylist::OnlyLibfuzzerAndDeps>::
      LibfuzzerNeedsNonemptyProtocolCompleterBase::SendReply(
          &_response.GetOutgoingMessage());
}
#endif

void ::fidl_test_bindingsdenylist::OnlyLibfuzzerAndDeps::
    LibfuzzerNeedsNonemptyProtocolRequest::_InitHeader(zx_txid_t _txid) {
  fidl_init_txn_header(
      &_hdr, _txid,
      ::fidl_test_bindingsdenylist::
          kOnlyLibfuzzerAndDeps_LibfuzzerNeedsNonemptyProtocol_Ordinal);
}

void ::fidl_test_bindingsdenylist::OnlyLibfuzzerAndDeps::
    LibfuzzerNeedsNonemptyProtocolResponse::_InitHeader() {
  fidl_init_txn_header(
      &_hdr, 0,
      ::fidl_test_bindingsdenylist::
          kOnlyLibfuzzerAndDeps_LibfuzzerNeedsNonemptyProtocol_Ordinal);
}

#ifdef __Fuchsia__
#endif

void ::fidl_test_bindingsdenylist::wire::OnlyLlcpp::
    SizeAndOffsetAssertionHelper() {
  static_assert(sizeof(OnlyLlcpp) == sizeof(fidl_xunion_t));
  static_assert(offsetof(OnlyLlcpp, ordinal_) == offsetof(fidl_xunion_t, tag));
  static_assert(offsetof(OnlyLlcpp, envelope_) ==
                offsetof(fidl_xunion_t, envelope));
}

#ifdef __Fuchsia__
std::optional<::fidl::UnbindInfo> fidl::internal::
    WireClientImpl<::fidl_test_bindingsdenylist::OnlyCppAndDeps>::DispatchEvent(
        fidl_incoming_msg_t* msg) {
  FidlHandleInfoCloseMany(msg->handles, msg->num_handles);
  return ::fidl::UnbindInfo{::fidl::UnbindInfo::kUnexpectedMessage,
                            ZX_ERR_NOT_SUPPORTED};
}
#endif

namespace fidl_test_bindingsdenylist {
#ifdef __Fuchsia__
namespace methods {}  // namespace methods

namespace entries {

::fidl::internal::MethodEntry OnlyCppAndDeps[] = {};

}  // namespace entries

::fidl::DispatchResult OnlyCppAndDeps::TryDispatch(Interface* impl,
                                                   fidl_incoming_msg_t* msg,
                                                   ::fidl::Transaction* txn) {
  return ::fidl::DispatchResult::kNotFound;
}
#endif
}  // namespace fidl_test_bindingsdenylist

namespace fidl_test_bindingsdenylist {
#ifdef __Fuchsia__
::fidl::DispatchResult OnlyCppAndDeps::Dispatch(Interface* impl,
                                                fidl_incoming_msg_t* msg,
                                                ::fidl::Transaction* txn) {
  FidlHandleInfoCloseMany(msg->handles, msg->num_handles);
  txn->InternalError(
      {::fidl::UnbindInfo::kUnexpectedMessage, ZX_ERR_NOT_SUPPORTED});
  return ::fidl::DispatchResult::kNotFound;
}
}  // namespace fidl_test_bindingsdenylist
::fidl::DispatchResult
fidl::WireInterface<::fidl_test_bindingsdenylist::OnlyCppAndDeps>::
    dispatch_message(fidl_incoming_msg_t* msg, ::fidl::Transaction* txn) {
  return ::fidl_test_bindingsdenylist::OnlyCppAndDeps::Dispatch(this, msg, txn);
}
#endif

#ifdef __Fuchsia__
#endif
