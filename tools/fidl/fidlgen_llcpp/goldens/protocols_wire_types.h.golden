// WARNING: This file is machine generated by fidlgen.

#pragma once

#include <lib/fidl/llcpp/array.h>
#include <lib/fidl/llcpp/coding.h>
#include <lib/fidl/llcpp/envelope.h>
#include <lib/fidl/llcpp/message.h>
#include <lib/fidl/llcpp/message_storage.h>
#include <lib/fidl/llcpp/object_view.h>
#include <lib/fidl/llcpp/string_view.h>
#include <lib/fidl/llcpp/traits.h>
#include <lib/fidl/llcpp/wire_types.h>
#include <lib/stdcompat/optional.h>

#include <cinttypes>
#ifdef __Fuchsia__
#include <lib/zx/channel.h>
#include <lib/zx/handle.h>
#include <lib/zx/socket.h>

#endif  // __Fuchsia__

#include <fidl/fidl.test.protocols/cpp/markers.h>

namespace fidl_test_protocols {
namespace wire {
// |Rights| is strict, hence is guaranteed to only contain
// members defined in the FIDL schema when receiving it in a message.
// Sending unknown members will fail at runtime.
class Rights final {
 public:
  constexpr Rights() = default;

  // Constructs an instance of |Rights| from an underlying primitive value,
  // preserving any bit member not defined in the FIDL schema.
  explicit constexpr Rights(uint32_t value) : value_(value) {}
  const static Rights kTransfer;
  const static Rights kDuplicate;
  const static Rights kMask;

  explicit constexpr inline operator uint32_t() const { return value_; }
  explicit constexpr inline operator bool() const {
    return static_cast<bool>(value_);
  }
  constexpr inline bool operator==(const Rights& other) const {
    return value_ == other.value_;
  }
  constexpr inline bool operator!=(const Rights& other) const {
    return value_ != other.value_;
  }
  constexpr inline Rights operator~() const;
  constexpr inline Rights operator|(const Rights& other) const;
  constexpr inline Rights operator&(const Rights& other) const;
  constexpr inline Rights operator^(const Rights& other) const;
  constexpr inline void operator|=(const Rights& other);
  constexpr inline void operator&=(const Rights& other);
  constexpr inline void operator^=(const Rights& other);

  // Constructs an instance of |Rights| from an underlying primitive value
  // if the primitive does not contain any unknown members not defined in the
  // FIDL schema. Otherwise, returns |cpp17::nullopt|.
  constexpr inline static cpp17::optional<Rights> TryFrom(uint32_t value) {
    if (value & ~kMask.value_) {
      return cpp17::nullopt;
    }
    return Rights(value & Rights::kMask.value_);
  }

  // Constructs an instance of |Rights| from an underlying primitive value,
  // clearing any bit member not defined in the FIDL schema.
  constexpr inline static Rights TruncatingUnknown(uint32_t value) {
    return Rights(value & Rights::kMask.value_);
  }

 private:
  uint32_t value_ = 0;
};
constexpr const ::fidl_test_protocols::wire::Rights Rights::kTransfer =
    ::fidl_test_protocols::wire::Rights(1u);
constexpr const ::fidl_test_protocols::wire::Rights Rights::kDuplicate =
    ::fidl_test_protocols::wire::Rights(2u);
constexpr const ::fidl_test_protocols::wire::Rights Rights::kMask =
    ::fidl_test_protocols::wire::Rights(3u);

constexpr inline ::fidl_test_protocols::wire::Rights Rights::operator~() const {
  return ::fidl_test_protocols::wire::Rights(
      static_cast<uint32_t>(~this->value_ & kMask.value_));
}

constexpr inline ::fidl_test_protocols::wire::Rights Rights::operator|(
    const ::fidl_test_protocols::wire::Rights& other) const {
  return ::fidl_test_protocols::wire::Rights(
      static_cast<uint32_t>(this->value_ | other.value_));
}

constexpr inline ::fidl_test_protocols::wire::Rights Rights::operator&(
    const ::fidl_test_protocols::wire::Rights& other) const {
  return ::fidl_test_protocols::wire::Rights(
      static_cast<uint32_t>(this->value_ & other.value_));
}

constexpr inline ::fidl_test_protocols::wire::Rights Rights::operator^(
    const ::fidl_test_protocols::wire::Rights& other) const {
  return ::fidl_test_protocols::wire::Rights(
      static_cast<uint32_t>(this->value_ ^ other.value_));
}

constexpr inline void Rights::operator|=(
    const ::fidl_test_protocols::wire::Rights& other) {
  this->value_ |= other.value_;
}

constexpr inline void Rights::operator&=(
    const ::fidl_test_protocols::wire::Rights& other) {
  this->value_ &= other.value_;
}

constexpr inline void Rights::operator^=(
    const ::fidl_test_protocols::wire::Rights& other) {
  this->value_ ^= other.value_;
}

enum class ObjType : uint32_t {

  kNone = 0u,

  kSocket = 14u,
};

enum class ErrorEnum : uint32_t {

  kErrFoo = 1u,

  kErrBar = 2u,
};

struct WithErrorSyntaxHandleInResultResponse;

struct WithErrorSyntaxResponseAsStructResponse;

struct WithErrorSyntaxErrorAsPrimitiveResponse;

struct WithErrorSyntaxErrorAsEnumResponse;

struct ProtocolEnds;

class WithErrorSyntaxHandleInResultResult;

class WithErrorSyntaxResponseAsStructResult;

class WithErrorSyntaxErrorAsPrimitiveResult;

class TheUnion;

class WithErrorSyntaxErrorAsEnumResult;

#ifdef __Fuchsia__

extern "C" const fidl_type_t
    fidl_test_protocols_WithErrorSyntax_HandleInResult_ResponseTable;

struct WithErrorSyntaxHandleInResultResponse {
  static constexpr const fidl_type_t* Type =
      &fidl_test_protocols_WithErrorSyntax_HandleInResult_ResponseTable;
  static constexpr uint32_t MaxNumHandles = 1;
  static constexpr uint32_t PrimarySize = 4;
  [[maybe_unused]] static constexpr uint32_t MaxOutOfLine = 0;
  static constexpr bool HasPointer = false;

  ::zx::handle h = {};

  void _CloseHandles();

  class UnownedEncodedMessage;
  class OwnedEncodedMessage;
  class DecodedMessage;
};

class WithErrorSyntaxHandleInResultResponse::UnownedEncodedMessage final {
 public:
  UnownedEncodedMessage(uint8_t* backing_buffer, uint32_t backing_buffer_size,
                        WithErrorSyntaxHandleInResultResponse* value)
      : UnownedEncodedMessage(::fidl::internal::IovecBufferSize, backing_buffer,
                              backing_buffer_size, value) {}
  UnownedEncodedMessage(uint32_t iovec_capacity, uint8_t* backing_buffer,
                        uint32_t backing_buffer_size,
                        WithErrorSyntaxHandleInResultResponse* value)
      : message_(::fidl::OutgoingMessage::ConstructorArgs{
            .transport_type = FIDL_TRANSPORT_TYPE_CHANNEL,
            .iovecs = iovecs_,
            .iovec_capacity = iovec_capacity,
            .handles = handles_,
            .handle_metadata = handle_metadata_,
            .handle_capacity = kHandleCapacity,
            .backing_buffer = backing_buffer,
            .backing_buffer_capacity = backing_buffer_size,
        }) {
    ZX_ASSERT(iovec_capacity <= std::size(iovecs_));
    message_.Encode<WithErrorSyntaxHandleInResultResponse>(value);
  }
  UnownedEncodedMessage(const UnownedEncodedMessage&) = delete;
  UnownedEncodedMessage(UnownedEncodedMessage&&) = delete;
  UnownedEncodedMessage* operator=(const UnownedEncodedMessage&) = delete;
  UnownedEncodedMessage* operator=(UnownedEncodedMessage&&) = delete;

  zx_status_t status() const { return message_.status(); }
  const char* status_string() const { return message_.status_string(); }
  bool ok() const { return message_.status() == ZX_OK; }
  std::string FormatDescription() const { return message_.FormatDescription(); }
  const char* lossy_description() const { return message_.lossy_description(); }
  const ::fidl::Result& error() const { return message_.error(); }

  ::fidl::OutgoingMessage& GetOutgoingMessage() { return message_; }

 private:
  ::fidl::internal::IovecBuffer iovecs_;
  static constexpr size_t kHandleCapacity =
      std::min(ZX_CHANNEL_MAX_MSG_HANDLES, MaxNumHandles);
  zx_handle_t handles_[kHandleCapacity];
  fidl_channel_handle_metadata_t handle_metadata_[kHandleCapacity];
  ::fidl::OutgoingMessage message_;
};

class WithErrorSyntaxHandleInResultResponse::OwnedEncodedMessage final {
 public:
  explicit OwnedEncodedMessage(WithErrorSyntaxHandleInResultResponse* value)
      : message_(1u, backing_buffer_.data(),
                 static_cast<uint32_t>(backing_buffer_.size()), value) {}
  // Internal constructor.
  explicit OwnedEncodedMessage(
      ::fidl::internal::AllowUnownedInputRef allow_unowned,
      WithErrorSyntaxHandleInResultResponse* value)
      : message_(::fidl::internal::IovecBufferSize, backing_buffer_.data(),
                 static_cast<uint32_t>(backing_buffer_.size()), value) {}
  OwnedEncodedMessage(const OwnedEncodedMessage&) = delete;
  OwnedEncodedMessage(OwnedEncodedMessage&&) = delete;
  OwnedEncodedMessage* operator=(const OwnedEncodedMessage&) = delete;
  OwnedEncodedMessage* operator=(OwnedEncodedMessage&&) = delete;

  zx_status_t status() const { return message_.status(); }
  const char* status_string() const { return message_.status_string(); }
  bool ok() const { return message_.ok(); }
  std::string FormatDescription() const { return message_.FormatDescription(); }
  const char* lossy_description() const { return message_.lossy_description(); }
  const ::fidl::Result& error() const { return message_.error(); }

  ::fidl::OutgoingMessage& GetOutgoingMessage() {
    return message_.GetOutgoingMessage();
  }

 private:
  ::fidl::internal::InlineMessageBuffer<8> backing_buffer_;
  UnownedEncodedMessage message_;
};

class WithErrorSyntaxHandleInResultResponse::DecodedMessage final
    : public ::fidl::internal::DecodedMessageBase<
          WithErrorSyntaxHandleInResultResponse> {
 public:
  using DecodedMessageBase<
      WithErrorSyntaxHandleInResultResponse>::DecodedMessageBase;

  DecodedMessage(
      uint8_t* bytes, uint32_t byte_actual, zx_handle_t* handles = nullptr,
      void* handle_metadata = nullptr, uint32_t handle_actual = 0,
      fidl_transport_type transport_type = FIDL_TRANSPORT_TYPE_CHANNEL)
      : DecodedMessageBase(
            ::fidl::internal::kLLCPPEncodedWireFormatVersion,
            ::fidl::IncomingMessage(
                transport_type, bytes, byte_actual, handles, handle_metadata,
                handle_actual,
                ::fidl::IncomingMessage::kSkipMessageHeaderValidation)) {}

  // Internal constructor for specifying a specific wire format version.
  DecodedMessage(
      ::fidl::internal::WireFormatVersion wire_format_version, uint8_t* bytes,
      uint32_t byte_actual, zx_handle_t* handles = nullptr,
      void* handle_metadata = nullptr, uint32_t handle_actual = 0,
      fidl_transport_type transport_type = FIDL_TRANSPORT_TYPE_CHANNEL)
      : DecodedMessageBase(
            wire_format_version,
            ::fidl::IncomingMessage(
                transport_type, bytes, byte_actual, handles, handle_metadata,
                handle_actual,
                ::fidl::IncomingMessage::kSkipMessageHeaderValidation)) {}

  DecodedMessage(const fidl_incoming_msg_t* c_msg)
      : DecodedMessage(reinterpret_cast<uint8_t*>(c_msg->bytes),
                       c_msg->num_bytes, c_msg->handles, c_msg->handle_metadata,
                       c_msg->num_handles) {}

  // Internal constructor for specifying a specific wire format version.
  DecodedMessage(::fidl::internal::WireFormatVersion wire_format_version,
                 const fidl_incoming_msg_t* c_msg)
      : DecodedMessage(wire_format_version,
                       reinterpret_cast<uint8_t*>(c_msg->bytes),
                       c_msg->num_bytes, c_msg->handles, c_msg->handle_metadata,
                       c_msg->num_handles) {}
  ~DecodedMessage() {
    if (ok() && (PrimaryObject() != nullptr)) {
      PrimaryObject()->_CloseHandles();
    }
  }

  WithErrorSyntaxHandleInResultResponse* PrimaryObject() {
    ZX_DEBUG_ASSERT(ok());
    return reinterpret_cast<WithErrorSyntaxHandleInResultResponse*>(bytes());
  }

  // Release the ownership of the decoded message. That means that the handles
  // won't be closed When the object is destroyed. After calling this method,
  // the |DecodedMessage| object should not be used anymore.
  void ReleasePrimaryObject() { ResetBytes(); }
};
#endif  // __Fuchsia__

extern "C" const fidl_type_t
    fidl_test_protocols_WithErrorSyntax_ErrorAsPrimitive_ResponseTable;

struct WithErrorSyntaxErrorAsPrimitiveResponse {
  static constexpr const fidl_type_t* Type =
      &fidl_test_protocols_WithErrorSyntax_ErrorAsPrimitive_ResponseTable;
  static constexpr uint32_t MaxNumHandles = 0;
  static constexpr uint32_t PrimarySize = 1;
  [[maybe_unused]] static constexpr uint32_t MaxOutOfLine = 0;
  static constexpr bool HasPointer = false;

  uint8_t __reserved = {};

  class UnownedEncodedMessage;
  class OwnedEncodedMessage;
  class DecodedMessage;
};

class WithErrorSyntaxErrorAsPrimitiveResponse::UnownedEncodedMessage final {
 public:
  UnownedEncodedMessage(uint8_t* backing_buffer, uint32_t backing_buffer_size,
                        WithErrorSyntaxErrorAsPrimitiveResponse* value)
      : UnownedEncodedMessage(::fidl::internal::IovecBufferSize, backing_buffer,
                              backing_buffer_size, value) {}
  UnownedEncodedMessage(uint32_t iovec_capacity, uint8_t* backing_buffer,
                        uint32_t backing_buffer_size,
                        WithErrorSyntaxErrorAsPrimitiveResponse* value)
      : message_(::fidl::OutgoingMessage::ConstructorArgs{
            .transport_type = FIDL_TRANSPORT_TYPE_CHANNEL,
            .iovecs = iovecs_,
            .iovec_capacity = iovec_capacity,
            .backing_buffer = backing_buffer,
            .backing_buffer_capacity = backing_buffer_size,
        }) {
    ZX_ASSERT(iovec_capacity <= std::size(iovecs_));
    message_.Encode<WithErrorSyntaxErrorAsPrimitiveResponse>(value);
  }
  UnownedEncodedMessage(const UnownedEncodedMessage&) = delete;
  UnownedEncodedMessage(UnownedEncodedMessage&&) = delete;
  UnownedEncodedMessage* operator=(const UnownedEncodedMessage&) = delete;
  UnownedEncodedMessage* operator=(UnownedEncodedMessage&&) = delete;

  zx_status_t status() const { return message_.status(); }
#ifdef __Fuchsia__
  const char* status_string() const { return message_.status_string(); }
#endif  // __Fuchsia__
  bool ok() const { return message_.status() == ZX_OK; }
  std::string FormatDescription() const { return message_.FormatDescription(); }
  const char* lossy_description() const { return message_.lossy_description(); }
  const ::fidl::Result& error() const { return message_.error(); }

  ::fidl::OutgoingMessage& GetOutgoingMessage() { return message_; }

 private:
  ::fidl::internal::IovecBuffer iovecs_;
  ::fidl::OutgoingMessage message_;
};

class WithErrorSyntaxErrorAsPrimitiveResponse::OwnedEncodedMessage final {
 public:
  explicit OwnedEncodedMessage(WithErrorSyntaxErrorAsPrimitiveResponse* value)
      : message_(1u, backing_buffer_.data(),
                 static_cast<uint32_t>(backing_buffer_.size()), value) {}
  // Internal constructor.
  explicit OwnedEncodedMessage(
      ::fidl::internal::AllowUnownedInputRef allow_unowned,
      WithErrorSyntaxErrorAsPrimitiveResponse* value)
      : message_(::fidl::internal::IovecBufferSize, backing_buffer_.data(),
                 static_cast<uint32_t>(backing_buffer_.size()), value) {}
  OwnedEncodedMessage(const OwnedEncodedMessage&) = delete;
  OwnedEncodedMessage(OwnedEncodedMessage&&) = delete;
  OwnedEncodedMessage* operator=(const OwnedEncodedMessage&) = delete;
  OwnedEncodedMessage* operator=(OwnedEncodedMessage&&) = delete;

  zx_status_t status() const { return message_.status(); }
#ifdef __Fuchsia__
  const char* status_string() const { return message_.status_string(); }
#endif  // __Fuchsia__
  bool ok() const { return message_.ok(); }
  std::string FormatDescription() const { return message_.FormatDescription(); }
  const char* lossy_description() const { return message_.lossy_description(); }
  const ::fidl::Result& error() const { return message_.error(); }

  ::fidl::OutgoingMessage& GetOutgoingMessage() {
    return message_.GetOutgoingMessage();
  }

 private:
  ::fidl::internal::InlineMessageBuffer<8> backing_buffer_;
  UnownedEncodedMessage message_;
};

class WithErrorSyntaxErrorAsPrimitiveResponse::DecodedMessage final
    : public ::fidl::internal::DecodedMessageBase<
          WithErrorSyntaxErrorAsPrimitiveResponse> {
 public:
  using DecodedMessageBase<
      WithErrorSyntaxErrorAsPrimitiveResponse>::DecodedMessageBase;

  DecodedMessage(
      uint8_t* bytes, uint32_t byte_actual, zx_handle_t* handles = nullptr,
      void* handle_metadata = nullptr, uint32_t handle_actual = 0,
      fidl_transport_type transport_type = FIDL_TRANSPORT_TYPE_CHANNEL)
      : DecodedMessageBase(
            ::fidl::internal::kLLCPPEncodedWireFormatVersion,
            ::fidl::IncomingMessage(
                transport_type, bytes, byte_actual, handles, handle_metadata,
                handle_actual,
                ::fidl::IncomingMessage::kSkipMessageHeaderValidation)) {}

  // Internal constructor for specifying a specific wire format version.
  DecodedMessage(
      ::fidl::internal::WireFormatVersion wire_format_version, uint8_t* bytes,
      uint32_t byte_actual, zx_handle_t* handles = nullptr,
      void* handle_metadata = nullptr, uint32_t handle_actual = 0,
      fidl_transport_type transport_type = FIDL_TRANSPORT_TYPE_CHANNEL)
      : DecodedMessageBase(
            wire_format_version,
            ::fidl::IncomingMessage(
                transport_type, bytes, byte_actual, handles, handle_metadata,
                handle_actual,
                ::fidl::IncomingMessage::kSkipMessageHeaderValidation)) {}

  DecodedMessage(const fidl_incoming_msg_t* c_msg)
      : DecodedMessage(reinterpret_cast<uint8_t*>(c_msg->bytes),
                       c_msg->num_bytes, c_msg->handles, c_msg->handle_metadata,
                       c_msg->num_handles) {}

  // Internal constructor for specifying a specific wire format version.
  DecodedMessage(::fidl::internal::WireFormatVersion wire_format_version,
                 const fidl_incoming_msg_t* c_msg)
      : DecodedMessage(wire_format_version,
                       reinterpret_cast<uint8_t*>(c_msg->bytes),
                       c_msg->num_bytes, c_msg->handles, c_msg->handle_metadata,
                       c_msg->num_handles) {}

  WithErrorSyntaxErrorAsPrimitiveResponse* PrimaryObject() {
    ZX_DEBUG_ASSERT(ok());
    return reinterpret_cast<WithErrorSyntaxErrorAsPrimitiveResponse*>(bytes());
  }

  // Release the ownership of the decoded message. That means that the handles
  // won't be closed When the object is destroyed. After calling this method,
  // the |DecodedMessage| object should not be used anymore.
  void ReleasePrimaryObject() { ResetBytes(); }
};

extern "C" const fidl_type_t
    fidl_test_protocols_WithErrorSyntax_ErrorAsEnum_ResponseTable;

struct WithErrorSyntaxErrorAsEnumResponse {
  static constexpr const fidl_type_t* Type =
      &fidl_test_protocols_WithErrorSyntax_ErrorAsEnum_ResponseTable;
  static constexpr uint32_t MaxNumHandles = 0;
  static constexpr uint32_t PrimarySize = 1;
  [[maybe_unused]] static constexpr uint32_t MaxOutOfLine = 0;
  static constexpr bool HasPointer = false;

  uint8_t __reserved = {};

  class UnownedEncodedMessage;
  class OwnedEncodedMessage;
  class DecodedMessage;
};

class WithErrorSyntaxErrorAsEnumResponse::UnownedEncodedMessage final {
 public:
  UnownedEncodedMessage(uint8_t* backing_buffer, uint32_t backing_buffer_size,
                        WithErrorSyntaxErrorAsEnumResponse* value)
      : UnownedEncodedMessage(::fidl::internal::IovecBufferSize, backing_buffer,
                              backing_buffer_size, value) {}
  UnownedEncodedMessage(uint32_t iovec_capacity, uint8_t* backing_buffer,
                        uint32_t backing_buffer_size,
                        WithErrorSyntaxErrorAsEnumResponse* value)
      : message_(::fidl::OutgoingMessage::ConstructorArgs{
            .transport_type = FIDL_TRANSPORT_TYPE_CHANNEL,
            .iovecs = iovecs_,
            .iovec_capacity = iovec_capacity,
            .backing_buffer = backing_buffer,
            .backing_buffer_capacity = backing_buffer_size,
        }) {
    ZX_ASSERT(iovec_capacity <= std::size(iovecs_));
    message_.Encode<WithErrorSyntaxErrorAsEnumResponse>(value);
  }
  UnownedEncodedMessage(const UnownedEncodedMessage&) = delete;
  UnownedEncodedMessage(UnownedEncodedMessage&&) = delete;
  UnownedEncodedMessage* operator=(const UnownedEncodedMessage&) = delete;
  UnownedEncodedMessage* operator=(UnownedEncodedMessage&&) = delete;

  zx_status_t status() const { return message_.status(); }
#ifdef __Fuchsia__
  const char* status_string() const { return message_.status_string(); }
#endif  // __Fuchsia__
  bool ok() const { return message_.status() == ZX_OK; }
  std::string FormatDescription() const { return message_.FormatDescription(); }
  const char* lossy_description() const { return message_.lossy_description(); }
  const ::fidl::Result& error() const { return message_.error(); }

  ::fidl::OutgoingMessage& GetOutgoingMessage() { return message_; }

 private:
  ::fidl::internal::IovecBuffer iovecs_;
  ::fidl::OutgoingMessage message_;
};

class WithErrorSyntaxErrorAsEnumResponse::OwnedEncodedMessage final {
 public:
  explicit OwnedEncodedMessage(WithErrorSyntaxErrorAsEnumResponse* value)
      : message_(1u, backing_buffer_.data(),
                 static_cast<uint32_t>(backing_buffer_.size()), value) {}
  // Internal constructor.
  explicit OwnedEncodedMessage(
      ::fidl::internal::AllowUnownedInputRef allow_unowned,
      WithErrorSyntaxErrorAsEnumResponse* value)
      : message_(::fidl::internal::IovecBufferSize, backing_buffer_.data(),
                 static_cast<uint32_t>(backing_buffer_.size()), value) {}
  OwnedEncodedMessage(const OwnedEncodedMessage&) = delete;
  OwnedEncodedMessage(OwnedEncodedMessage&&) = delete;
  OwnedEncodedMessage* operator=(const OwnedEncodedMessage&) = delete;
  OwnedEncodedMessage* operator=(OwnedEncodedMessage&&) = delete;

  zx_status_t status() const { return message_.status(); }
#ifdef __Fuchsia__
  const char* status_string() const { return message_.status_string(); }
#endif  // __Fuchsia__
  bool ok() const { return message_.ok(); }
  std::string FormatDescription() const { return message_.FormatDescription(); }
  const char* lossy_description() const { return message_.lossy_description(); }
  const ::fidl::Result& error() const { return message_.error(); }

  ::fidl::OutgoingMessage& GetOutgoingMessage() {
    return message_.GetOutgoingMessage();
  }

 private:
  ::fidl::internal::InlineMessageBuffer<8> backing_buffer_;
  UnownedEncodedMessage message_;
};

class WithErrorSyntaxErrorAsEnumResponse::DecodedMessage final
    : public ::fidl::internal::DecodedMessageBase<
          WithErrorSyntaxErrorAsEnumResponse> {
 public:
  using DecodedMessageBase<
      WithErrorSyntaxErrorAsEnumResponse>::DecodedMessageBase;

  DecodedMessage(
      uint8_t* bytes, uint32_t byte_actual, zx_handle_t* handles = nullptr,
      void* handle_metadata = nullptr, uint32_t handle_actual = 0,
      fidl_transport_type transport_type = FIDL_TRANSPORT_TYPE_CHANNEL)
      : DecodedMessageBase(
            ::fidl::internal::kLLCPPEncodedWireFormatVersion,
            ::fidl::IncomingMessage(
                transport_type, bytes, byte_actual, handles, handle_metadata,
                handle_actual,
                ::fidl::IncomingMessage::kSkipMessageHeaderValidation)) {}

  // Internal constructor for specifying a specific wire format version.
  DecodedMessage(
      ::fidl::internal::WireFormatVersion wire_format_version, uint8_t* bytes,
      uint32_t byte_actual, zx_handle_t* handles = nullptr,
      void* handle_metadata = nullptr, uint32_t handle_actual = 0,
      fidl_transport_type transport_type = FIDL_TRANSPORT_TYPE_CHANNEL)
      : DecodedMessageBase(
            wire_format_version,
            ::fidl::IncomingMessage(
                transport_type, bytes, byte_actual, handles, handle_metadata,
                handle_actual,
                ::fidl::IncomingMessage::kSkipMessageHeaderValidation)) {}

  DecodedMessage(const fidl_incoming_msg_t* c_msg)
      : DecodedMessage(reinterpret_cast<uint8_t*>(c_msg->bytes),
                       c_msg->num_bytes, c_msg->handles, c_msg->handle_metadata,
                       c_msg->num_handles) {}

  // Internal constructor for specifying a specific wire format version.
  DecodedMessage(::fidl::internal::WireFormatVersion wire_format_version,
                 const fidl_incoming_msg_t* c_msg)
      : DecodedMessage(wire_format_version,
                       reinterpret_cast<uint8_t*>(c_msg->bytes),
                       c_msg->num_bytes, c_msg->handles, c_msg->handle_metadata,
                       c_msg->num_handles) {}

  WithErrorSyntaxErrorAsEnumResponse* PrimaryObject() {
    ZX_DEBUG_ASSERT(ok());
    return reinterpret_cast<WithErrorSyntaxErrorAsEnumResponse*>(bytes());
  }

  // Release the ownership of the decoded message. That means that the handles
  // won't be closed When the object is destroyed. After calling this method,
  // the |DecodedMessage| object should not be used anymore.
  void ReleasePrimaryObject() { ResetBytes(); }
};

#ifdef __Fuchsia__

extern "C" const fidl_type_t
    fidl_test_protocols_WithErrorSyntax_HandleInResult_ResultTable;

class WithErrorSyntaxHandleInResultResult {
 public:
  using Response =
      fidl_test_protocols::wire::WithErrorSyntaxHandleInResultResponse;

  WithErrorSyntaxHandleInResultResult()
      : ordinal_(::fidl_test_protocols::wire::
                     WithErrorSyntaxHandleInResultResult::Ordinal::Invalid),
        envelope_{} {}

  ~WithErrorSyntaxHandleInResultResult();
  WithErrorSyntaxHandleInResultResult(
      WithErrorSyntaxHandleInResultResult&& other) {
    _Move(std::move(other));
  }
  WithErrorSyntaxHandleInResultResult& operator=(
      WithErrorSyntaxHandleInResultResult&& other) {
    if (this != &other) {
      _Move(std::move(other));
    }
    return *this;
  }

  enum class Tag : fidl_xunion_tag_t {
    kResponse = 1,  // 0x1
    kErr = 2,       // 0x2
  };

  bool has_invalid_tag() const {
    return ordinal_ ==
           ::fidl_test_protocols::wire::WithErrorSyntaxHandleInResultResult::
               Ordinal::Invalid;
  }

  bool is_response() const {
    return ordinal_ ==
           ::fidl_test_protocols::wire::WithErrorSyntaxHandleInResultResult::
               Ordinal::kResponse;
  }
  static WithErrorSyntaxHandleInResultResult WithResponse(
      ::fidl_test_protocols::wire::WithErrorSyntaxHandleInResultResponse val) {
    WithErrorSyntaxHandleInResultResult result;
    result.set_response(std::move(val));
    return result;
  }

  void set_response(
      ::fidl_test_protocols::wire::WithErrorSyntaxHandleInResultResponse elem) {
    ordinal_ = ::fidl_test_protocols::wire::
        WithErrorSyntaxHandleInResultResult::Ordinal::kResponse;
    envelope_
        .As<::fidl_test_protocols::wire::
                WithErrorSyntaxHandleInResultResponse>()
        .set_data(std::move(elem));
  }

  ::fidl_test_protocols::wire::WithErrorSyntaxHandleInResultResponse&
  mutable_response() {
    ZX_ASSERT(ordinal_ ==
              ::fidl_test_protocols::wire::WithErrorSyntaxHandleInResultResult::
                  Ordinal::kResponse);
    return envelope_
        .As<::fidl_test_protocols::wire::
                WithErrorSyntaxHandleInResultResponse>()
        .get_data();
  }
  const ::fidl_test_protocols::wire::WithErrorSyntaxHandleInResultResponse&
  response() const {
    ZX_ASSERT(ordinal_ ==
              ::fidl_test_protocols::wire::WithErrorSyntaxHandleInResultResult::
                  Ordinal::kResponse);
    return envelope_
        .As<::fidl_test_protocols::wire::
                WithErrorSyntaxHandleInResultResponse>()
        .get_data();
  }

  bool is_err() const {
    return ordinal_ == ::fidl_test_protocols::wire::
                           WithErrorSyntaxHandleInResultResult::Ordinal::kErr;
  }
  static WithErrorSyntaxHandleInResultResult WithErr(uint32_t val) {
    WithErrorSyntaxHandleInResultResult result;
    result.set_err(std::move(val));
    return result;
  }

  void set_err(uint32_t elem) {
    ordinal_ = ::fidl_test_protocols::wire::
        WithErrorSyntaxHandleInResultResult::Ordinal::kErr;
    envelope_.As<uint32_t>().set_data(std::move(elem));
  }

  uint32_t& mutable_err() {
    ZX_ASSERT(ordinal_ ==
              ::fidl_test_protocols::wire::WithErrorSyntaxHandleInResultResult::
                  Ordinal::kErr);
    return envelope_.As<uint32_t>().get_data();
  }
  const uint32_t& err() const {
    ZX_ASSERT(ordinal_ ==
              ::fidl_test_protocols::wire::WithErrorSyntaxHandleInResultResult::
                  Ordinal::kErr);
    return envelope_.As<uint32_t>().get_data();
  }
  ::fidl_test_protocols::wire::WithErrorSyntaxHandleInResultResult::Tag which()
      const {
    ZX_ASSERT(!has_invalid_tag());
    return static_cast<
        ::fidl_test_protocols::wire::WithErrorSyntaxHandleInResultResult::Tag>(
        ordinal_);
  }

  static constexpr const fidl_type_t* Type =
      &fidl_test_protocols_WithErrorSyntax_HandleInResult_ResultTable;
  static constexpr uint32_t MaxNumHandles = 1;
  static constexpr uint32_t PrimarySize = 16;
  [[maybe_unused]] static constexpr uint32_t MaxOutOfLine = 0;
  static constexpr bool HasPointer = true;
  void _CloseHandles();

  class UnownedEncodedMessage;
  class OwnedEncodedMessage;
  class DecodedMessage;

 private:
  enum class Ordinal : fidl_xunion_tag_t {
    Invalid = 0,
    kResponse = 1,  // 0x1
    kErr = 2,       // 0x2
  };
  void _Move(WithErrorSyntaxHandleInResultResult&& other);

  static void SizeAndOffsetAssertionHelper();
  ::fidl_test_protocols::wire::WithErrorSyntaxHandleInResultResult::Ordinal
      ordinal_;
  FIDL_ALIGNDECL
  ::fidl::UntypedEnvelope envelope_;
};

class WithErrorSyntaxHandleInResultResult::UnownedEncodedMessage final {
 public:
  UnownedEncodedMessage(uint8_t* backing_buffer, uint32_t backing_buffer_size,
                        WithErrorSyntaxHandleInResultResult* value)
      : UnownedEncodedMessage(::fidl::internal::IovecBufferSize, backing_buffer,
                              backing_buffer_size, value) {}
  UnownedEncodedMessage(uint32_t iovec_capacity, uint8_t* backing_buffer,
                        uint32_t backing_buffer_size,
                        WithErrorSyntaxHandleInResultResult* value)
      : message_(::fidl::OutgoingMessage::ConstructorArgs{
            .transport_type = FIDL_TRANSPORT_TYPE_CHANNEL,
            .iovecs = iovecs_,
            .iovec_capacity = iovec_capacity,
            .handles = handles_,
            .handle_metadata = handle_metadata_,
            .handle_capacity = kHandleCapacity,
            .backing_buffer = backing_buffer,
            .backing_buffer_capacity = backing_buffer_size,
        }) {
    ZX_ASSERT(iovec_capacity <= std::size(iovecs_));
    message_.Encode<WithErrorSyntaxHandleInResultResult>(value);
  }
  UnownedEncodedMessage(const UnownedEncodedMessage&) = delete;
  UnownedEncodedMessage(UnownedEncodedMessage&&) = delete;
  UnownedEncodedMessage* operator=(const UnownedEncodedMessage&) = delete;
  UnownedEncodedMessage* operator=(UnownedEncodedMessage&&) = delete;

  zx_status_t status() const { return message_.status(); }
  const char* status_string() const { return message_.status_string(); }
  bool ok() const { return message_.status() == ZX_OK; }
  std::string FormatDescription() const { return message_.FormatDescription(); }
  const char* lossy_description() const { return message_.lossy_description(); }
  const ::fidl::Result& error() const { return message_.error(); }

  ::fidl::OutgoingMessage& GetOutgoingMessage() { return message_; }

 private:
  ::fidl::internal::IovecBuffer iovecs_;
  static constexpr size_t kHandleCapacity =
      std::min(ZX_CHANNEL_MAX_MSG_HANDLES, MaxNumHandles);
  zx_handle_t handles_[kHandleCapacity];
  fidl_channel_handle_metadata_t handle_metadata_[kHandleCapacity];
  ::fidl::OutgoingMessage message_;
};

class WithErrorSyntaxHandleInResultResult::OwnedEncodedMessage final {
 public:
  explicit OwnedEncodedMessage(WithErrorSyntaxHandleInResultResult* value)
      : message_(1u, backing_buffer_.data(),
                 static_cast<uint32_t>(backing_buffer_.size()), value) {}
  // Construct a message using owned buffers.
  // If |iovec_capacity>1|, then the message in OwnedEncodedMessage may point
  // the input FIDL object, which is not owned by it.
  explicit OwnedEncodedMessage(
      ::fidl::internal::AllowUnownedInputRef allow_unowned,
      WithErrorSyntaxHandleInResultResult* value)
      : message_(::fidl::internal::IovecBufferSize, backing_buffer_.data(),
                 static_cast<uint32_t>(backing_buffer_.size()), value) {}
  OwnedEncodedMessage(const OwnedEncodedMessage&) = delete;
  OwnedEncodedMessage(OwnedEncodedMessage&&) = delete;
  OwnedEncodedMessage* operator=(const OwnedEncodedMessage&) = delete;
  OwnedEncodedMessage* operator=(OwnedEncodedMessage&&) = delete;

  zx_status_t status() const { return message_.status(); }
  const char* status_string() const { return message_.status_string(); }
  bool ok() const { return message_.ok(); }
  std::string FormatDescription() const { return message_.FormatDescription(); }
  const char* lossy_description() const { return message_.lossy_description(); }
  const ::fidl::Result& error() const { return message_.error(); }

  ::fidl::OutgoingMessage& GetOutgoingMessage() {
    return message_.GetOutgoingMessage();
  }

 private:
  ::fidl::internal::InlineMessageBuffer<32> backing_buffer_;
  UnownedEncodedMessage message_;
};

class WithErrorSyntaxHandleInResultResult::DecodedMessage final
    : public ::fidl::internal::DecodedMessageBase<
          WithErrorSyntaxHandleInResultResult> {
 public:
  using DecodedMessageBase<
      WithErrorSyntaxHandleInResultResult>::DecodedMessageBase;

  DecodedMessage(
      uint8_t* bytes, uint32_t byte_actual, zx_handle_t* handles = nullptr,
      void* handle_metadata = nullptr, uint32_t handle_actual = 0,
      fidl_transport_type transport_type = FIDL_TRANSPORT_TYPE_CHANNEL)
      : DecodedMessageBase(
            ::fidl::internal::kLLCPPEncodedWireFormatVersion,
            ::fidl::IncomingMessage(
                transport_type, bytes, byte_actual, handles, handle_metadata,
                handle_actual,
                ::fidl::IncomingMessage::kSkipMessageHeaderValidation)) {}

  // Internal constructor for specifying a specific wire format version.
  DecodedMessage(
      ::fidl::internal::WireFormatVersion wire_format_version, uint8_t* bytes,
      uint32_t byte_actual, zx_handle_t* handles = nullptr,
      void* handle_metadata = nullptr, uint32_t handle_actual = 0,
      fidl_transport_type transport_type = FIDL_TRANSPORT_TYPE_CHANNEL)
      : DecodedMessageBase(
            wire_format_version,
            ::fidl::IncomingMessage(
                transport_type, bytes, byte_actual, handles, handle_metadata,
                handle_actual,
                ::fidl::IncomingMessage::kSkipMessageHeaderValidation)) {}

  DecodedMessage(const fidl_incoming_msg_t* c_msg)
      : DecodedMessage(reinterpret_cast<uint8_t*>(c_msg->bytes),
                       c_msg->num_bytes, c_msg->handles, c_msg->handle_metadata,
                       c_msg->num_handles) {}

  // Internal constructor for specifying a specific wire format version.
  DecodedMessage(::fidl::internal::WireFormatVersion wire_format_version,
                 const fidl_incoming_msg_t* c_msg)
      : DecodedMessage(wire_format_version,
                       reinterpret_cast<uint8_t*>(c_msg->bytes),
                       c_msg->num_bytes, c_msg->handles, c_msg->handle_metadata,
                       c_msg->num_handles) {}
  ~DecodedMessage() {
    if (ok() && (PrimaryObject() != nullptr)) {
      PrimaryObject()->_CloseHandles();
    }
  }

  WithErrorSyntaxHandleInResultResult* PrimaryObject() {
    ZX_DEBUG_ASSERT(ok());
    return reinterpret_cast<WithErrorSyntaxHandleInResultResult*>(bytes());
  }

  // Release the ownership of the decoded message. That means that the handles
  // won't be closed When the object is destroyed. After calling this method,
  // the |DecodedMessage| object should not be used anymore.
  void ReleasePrimaryObject() { ResetBytes(); }
};
#endif  // __Fuchsia__

extern "C" const fidl_type_t
    fidl_test_protocols_WithErrorSyntax_ResponseAsStruct_ResultTable;

class WithErrorSyntaxResponseAsStructResult {
 public:
  using Response =
      fidl_test_protocols::wire::WithErrorSyntaxResponseAsStructResponse;

  WithErrorSyntaxResponseAsStructResult()
      : ordinal_(::fidl_test_protocols::wire::
                     WithErrorSyntaxResponseAsStructResult::Ordinal::Invalid),
        envelope_{} {}

  WithErrorSyntaxResponseAsStructResult(
      const WithErrorSyntaxResponseAsStructResult&) = default;
  WithErrorSyntaxResponseAsStructResult& operator=(
      const WithErrorSyntaxResponseAsStructResult&) = default;
  WithErrorSyntaxResponseAsStructResult(
      WithErrorSyntaxResponseAsStructResult&&) = default;
  WithErrorSyntaxResponseAsStructResult& operator=(
      WithErrorSyntaxResponseAsStructResult&&) = default;

  enum class Tag : fidl_xunion_tag_t {
    kResponse = 1,  // 0x1
    kErr = 2,       // 0x2
  };

  bool has_invalid_tag() const {
    return ordinal_ ==
           ::fidl_test_protocols::wire::WithErrorSyntaxResponseAsStructResult::
               Ordinal::Invalid;
  }

  bool is_response() const {
    return ordinal_ ==
           ::fidl_test_protocols::wire::WithErrorSyntaxResponseAsStructResult::
               Ordinal::kResponse;
  }
  static WithErrorSyntaxResponseAsStructResult WithResponse(
      ::fidl::ObjectView<
          ::fidl_test_protocols::wire::WithErrorSyntaxResponseAsStructResponse>
          val) {
    WithErrorSyntaxResponseAsStructResult result;
    result.set_response(val);
    return result;
  }

  template <typename... Args>
  static WithErrorSyntaxResponseAsStructResult WithResponse(
      ::fidl::AnyArena& allocator, Args&&... args) {
    WithErrorSyntaxResponseAsStructResult result;
    result.set_response(
        ::fidl::ObjectView<::fidl_test_protocols::wire::
                               WithErrorSyntaxResponseAsStructResponse>(
            allocator, std::forward<Args>(args)...));
    return result;
  }

  void set_response(
      ::fidl::ObjectView<
          ::fidl_test_protocols::wire::WithErrorSyntaxResponseAsStructResponse>
          elem) {
    ordinal_ = ::fidl_test_protocols::wire::
        WithErrorSyntaxResponseAsStructResult::Ordinal::kResponse;
    envelope_
        .As<::fidl_test_protocols::wire::
                WithErrorSyntaxResponseAsStructResponse>()
        .set_data(std::move(elem));
  }

  template <typename... Args>
  void set_response(::fidl::AnyArena& allocator, Args&&... args) {
    ordinal_ = ::fidl_test_protocols::wire::
        WithErrorSyntaxResponseAsStructResult::Ordinal::kResponse;
    set_response(
        ::fidl::ObjectView<::fidl_test_protocols::wire::
                               WithErrorSyntaxResponseAsStructResponse>(
            allocator, std::forward<Args>(args)...));
  }

  ::fidl_test_protocols::wire::WithErrorSyntaxResponseAsStructResponse&
  mutable_response() {
    ZX_ASSERT(ordinal_ ==
              ::fidl_test_protocols::wire::
                  WithErrorSyntaxResponseAsStructResult::Ordinal::kResponse);
    return envelope_
        .As<::fidl_test_protocols::wire::
                WithErrorSyntaxResponseAsStructResponse>()
        .get_data();
  }
  const ::fidl_test_protocols::wire::WithErrorSyntaxResponseAsStructResponse&
  response() const {
    ZX_ASSERT(ordinal_ ==
              ::fidl_test_protocols::wire::
                  WithErrorSyntaxResponseAsStructResult::Ordinal::kResponse);
    return envelope_
        .As<::fidl_test_protocols::wire::
                WithErrorSyntaxResponseAsStructResponse>()
        .get_data();
  }

  bool is_err() const {
    return ordinal_ == ::fidl_test_protocols::wire::
                           WithErrorSyntaxResponseAsStructResult::Ordinal::kErr;
  }
  static WithErrorSyntaxResponseAsStructResult WithErr(uint32_t val) {
    WithErrorSyntaxResponseAsStructResult result;
    result.set_err(std::move(val));
    return result;
  }

  void set_err(uint32_t elem) {
    ordinal_ = ::fidl_test_protocols::wire::
        WithErrorSyntaxResponseAsStructResult::Ordinal::kErr;
    envelope_.As<uint32_t>().set_data(std::move(elem));
  }

  uint32_t& mutable_err() {
    ZX_ASSERT(ordinal_ ==
              ::fidl_test_protocols::wire::
                  WithErrorSyntaxResponseAsStructResult::Ordinal::kErr);
    return envelope_.As<uint32_t>().get_data();
  }
  const uint32_t& err() const {
    ZX_ASSERT(ordinal_ ==
              ::fidl_test_protocols::wire::
                  WithErrorSyntaxResponseAsStructResult::Ordinal::kErr);
    return envelope_.As<uint32_t>().get_data();
  }
  ::fidl_test_protocols::wire::WithErrorSyntaxResponseAsStructResult::Tag
  which() const {
    ZX_ASSERT(!has_invalid_tag());
    return static_cast<::fidl_test_protocols::wire::
                           WithErrorSyntaxResponseAsStructResult::Tag>(
        ordinal_);
  }

  static constexpr const fidl_type_t* Type =
      &fidl_test_protocols_WithErrorSyntax_ResponseAsStruct_ResultTable;
  static constexpr uint32_t MaxNumHandles = 0;
  static constexpr uint32_t PrimarySize = 16;
  [[maybe_unused]] static constexpr uint32_t MaxOutOfLine = 24;
  static constexpr bool HasPointer = true;

  class UnownedEncodedMessage;
  class OwnedEncodedMessage;
  class DecodedMessage;

 private:
  enum class Ordinal : fidl_xunion_tag_t {
    Invalid = 0,
    kResponse = 1,  // 0x1
    kErr = 2,       // 0x2
  };

  static void SizeAndOffsetAssertionHelper();
  ::fidl_test_protocols::wire::WithErrorSyntaxResponseAsStructResult::Ordinal
      ordinal_;
  FIDL_ALIGNDECL
  ::fidl::UntypedEnvelope envelope_;
};

class WithErrorSyntaxResponseAsStructResult::UnownedEncodedMessage final {
 public:
  UnownedEncodedMessage(uint8_t* backing_buffer, uint32_t backing_buffer_size,
                        WithErrorSyntaxResponseAsStructResult* value)
      : UnownedEncodedMessage(::fidl::internal::IovecBufferSize, backing_buffer,
                              backing_buffer_size, value) {}
  UnownedEncodedMessage(uint32_t iovec_capacity, uint8_t* backing_buffer,
                        uint32_t backing_buffer_size,
                        WithErrorSyntaxResponseAsStructResult* value)
      : message_(::fidl::OutgoingMessage::ConstructorArgs{
            .transport_type = FIDL_TRANSPORT_TYPE_CHANNEL,
            .iovecs = iovecs_,
            .iovec_capacity = iovec_capacity,
            .backing_buffer = backing_buffer,
            .backing_buffer_capacity = backing_buffer_size,
        }) {
    ZX_ASSERT(iovec_capacity <= std::size(iovecs_));
    message_.Encode<WithErrorSyntaxResponseAsStructResult>(value);
  }
  UnownedEncodedMessage(const UnownedEncodedMessage&) = delete;
  UnownedEncodedMessage(UnownedEncodedMessage&&) = delete;
  UnownedEncodedMessage* operator=(const UnownedEncodedMessage&) = delete;
  UnownedEncodedMessage* operator=(UnownedEncodedMessage&&) = delete;

  zx_status_t status() const { return message_.status(); }
#ifdef __Fuchsia__
  const char* status_string() const { return message_.status_string(); }
#endif  // __Fuchsia__
  bool ok() const { return message_.status() == ZX_OK; }
  std::string FormatDescription() const { return message_.FormatDescription(); }
  const char* lossy_description() const { return message_.lossy_description(); }
  const ::fidl::Result& error() const { return message_.error(); }

  ::fidl::OutgoingMessage& GetOutgoingMessage() { return message_; }

 private:
  ::fidl::internal::IovecBuffer iovecs_;
  ::fidl::OutgoingMessage message_;
};

class WithErrorSyntaxResponseAsStructResult::OwnedEncodedMessage final {
 public:
  explicit OwnedEncodedMessage(WithErrorSyntaxResponseAsStructResult* value)
      : message_(1u, backing_buffer_.data(),
                 static_cast<uint32_t>(backing_buffer_.size()), value) {}
  // Construct a message using owned buffers.
  // If |iovec_capacity>1|, then the message in OwnedEncodedMessage may point
  // the input FIDL object, which is not owned by it.
  explicit OwnedEncodedMessage(
      ::fidl::internal::AllowUnownedInputRef allow_unowned,
      WithErrorSyntaxResponseAsStructResult* value)
      : message_(::fidl::internal::IovecBufferSize, backing_buffer_.data(),
                 static_cast<uint32_t>(backing_buffer_.size()), value) {}
  OwnedEncodedMessage(const OwnedEncodedMessage&) = delete;
  OwnedEncodedMessage(OwnedEncodedMessage&&) = delete;
  OwnedEncodedMessage* operator=(const OwnedEncodedMessage&) = delete;
  OwnedEncodedMessage* operator=(OwnedEncodedMessage&&) = delete;

  zx_status_t status() const { return message_.status(); }
#ifdef __Fuchsia__
  const char* status_string() const { return message_.status_string(); }
#endif  // __Fuchsia__
  bool ok() const { return message_.ok(); }
  std::string FormatDescription() const { return message_.FormatDescription(); }
  const char* lossy_description() const { return message_.lossy_description(); }
  const ::fidl::Result& error() const { return message_.error(); }

  ::fidl::OutgoingMessage& GetOutgoingMessage() {
    return message_.GetOutgoingMessage();
  }

 private:
  ::fidl::internal::InlineMessageBuffer<48> backing_buffer_;
  UnownedEncodedMessage message_;
};

class WithErrorSyntaxResponseAsStructResult::DecodedMessage final
    : public ::fidl::internal::DecodedMessageBase<
          WithErrorSyntaxResponseAsStructResult> {
 public:
  using DecodedMessageBase<
      WithErrorSyntaxResponseAsStructResult>::DecodedMessageBase;

  DecodedMessage(
      uint8_t* bytes, uint32_t byte_actual, zx_handle_t* handles = nullptr,
      void* handle_metadata = nullptr, uint32_t handle_actual = 0,
      fidl_transport_type transport_type = FIDL_TRANSPORT_TYPE_CHANNEL)
      : DecodedMessageBase(
            ::fidl::internal::kLLCPPEncodedWireFormatVersion,
            ::fidl::IncomingMessage(
                transport_type, bytes, byte_actual, handles, handle_metadata,
                handle_actual,
                ::fidl::IncomingMessage::kSkipMessageHeaderValidation)) {}

  // Internal constructor for specifying a specific wire format version.
  DecodedMessage(
      ::fidl::internal::WireFormatVersion wire_format_version, uint8_t* bytes,
      uint32_t byte_actual, zx_handle_t* handles = nullptr,
      void* handle_metadata = nullptr, uint32_t handle_actual = 0,
      fidl_transport_type transport_type = FIDL_TRANSPORT_TYPE_CHANNEL)
      : DecodedMessageBase(
            wire_format_version,
            ::fidl::IncomingMessage(
                transport_type, bytes, byte_actual, handles, handle_metadata,
                handle_actual,
                ::fidl::IncomingMessage::kSkipMessageHeaderValidation)) {}

  DecodedMessage(const fidl_incoming_msg_t* c_msg)
      : DecodedMessage(reinterpret_cast<uint8_t*>(c_msg->bytes),
                       c_msg->num_bytes, c_msg->handles, c_msg->handle_metadata,
                       c_msg->num_handles) {}

  // Internal constructor for specifying a specific wire format version.
  DecodedMessage(::fidl::internal::WireFormatVersion wire_format_version,
                 const fidl_incoming_msg_t* c_msg)
      : DecodedMessage(wire_format_version,
                       reinterpret_cast<uint8_t*>(c_msg->bytes),
                       c_msg->num_bytes, c_msg->handles, c_msg->handle_metadata,
                       c_msg->num_handles) {}

  WithErrorSyntaxResponseAsStructResult* PrimaryObject() {
    ZX_DEBUG_ASSERT(ok());
    return reinterpret_cast<WithErrorSyntaxResponseAsStructResult*>(bytes());
  }

  // Release the ownership of the decoded message. That means that the handles
  // won't be closed When the object is destroyed. After calling this method,
  // the |DecodedMessage| object should not be used anymore.
  void ReleasePrimaryObject() { ResetBytes(); }
};

extern "C" const fidl_type_t
    fidl_test_protocols_WithErrorSyntax_ErrorAsPrimitive_ResultTable;

class WithErrorSyntaxErrorAsPrimitiveResult {
 public:
  using Response =
      fidl_test_protocols::wire::WithErrorSyntaxErrorAsPrimitiveResponse;

  WithErrorSyntaxErrorAsPrimitiveResult()
      : ordinal_(::fidl_test_protocols::wire::
                     WithErrorSyntaxErrorAsPrimitiveResult::Ordinal::Invalid),
        envelope_{} {}

  WithErrorSyntaxErrorAsPrimitiveResult(
      const WithErrorSyntaxErrorAsPrimitiveResult&) = default;
  WithErrorSyntaxErrorAsPrimitiveResult& operator=(
      const WithErrorSyntaxErrorAsPrimitiveResult&) = default;
  WithErrorSyntaxErrorAsPrimitiveResult(
      WithErrorSyntaxErrorAsPrimitiveResult&&) = default;
  WithErrorSyntaxErrorAsPrimitiveResult& operator=(
      WithErrorSyntaxErrorAsPrimitiveResult&&) = default;

  enum class Tag : fidl_xunion_tag_t {
    kResponse = 1,  // 0x1
    kErr = 2,       // 0x2
  };

  bool has_invalid_tag() const {
    return ordinal_ ==
           ::fidl_test_protocols::wire::WithErrorSyntaxErrorAsPrimitiveResult::
               Ordinal::Invalid;
  }

  bool is_response() const {
    return ordinal_ ==
           ::fidl_test_protocols::wire::WithErrorSyntaxErrorAsPrimitiveResult::
               Ordinal::kResponse;
  }
  static WithErrorSyntaxErrorAsPrimitiveResult WithResponse(
      ::fidl_test_protocols::wire::WithErrorSyntaxErrorAsPrimitiveResponse
          val) {
    WithErrorSyntaxErrorAsPrimitiveResult result;
    result.set_response(std::move(val));
    return result;
  }

  void set_response(
      ::fidl_test_protocols::wire::WithErrorSyntaxErrorAsPrimitiveResponse
          elem) {
    ordinal_ = ::fidl_test_protocols::wire::
        WithErrorSyntaxErrorAsPrimitiveResult::Ordinal::kResponse;
    envelope_
        .As<::fidl_test_protocols::wire::
                WithErrorSyntaxErrorAsPrimitiveResponse>()
        .set_data(std::move(elem));
  }

  ::fidl_test_protocols::wire::WithErrorSyntaxErrorAsPrimitiveResponse&
  mutable_response() {
    ZX_ASSERT(ordinal_ ==
              ::fidl_test_protocols::wire::
                  WithErrorSyntaxErrorAsPrimitiveResult::Ordinal::kResponse);
    return envelope_
        .As<::fidl_test_protocols::wire::
                WithErrorSyntaxErrorAsPrimitiveResponse>()
        .get_data();
  }
  const ::fidl_test_protocols::wire::WithErrorSyntaxErrorAsPrimitiveResponse&
  response() const {
    ZX_ASSERT(ordinal_ ==
              ::fidl_test_protocols::wire::
                  WithErrorSyntaxErrorAsPrimitiveResult::Ordinal::kResponse);
    return envelope_
        .As<::fidl_test_protocols::wire::
                WithErrorSyntaxErrorAsPrimitiveResponse>()
        .get_data();
  }

  bool is_err() const {
    return ordinal_ == ::fidl_test_protocols::wire::
                           WithErrorSyntaxErrorAsPrimitiveResult::Ordinal::kErr;
  }
  static WithErrorSyntaxErrorAsPrimitiveResult WithErr(uint32_t val) {
    WithErrorSyntaxErrorAsPrimitiveResult result;
    result.set_err(std::move(val));
    return result;
  }

  void set_err(uint32_t elem) {
    ordinal_ = ::fidl_test_protocols::wire::
        WithErrorSyntaxErrorAsPrimitiveResult::Ordinal::kErr;
    envelope_.As<uint32_t>().set_data(std::move(elem));
  }

  uint32_t& mutable_err() {
    ZX_ASSERT(ordinal_ ==
              ::fidl_test_protocols::wire::
                  WithErrorSyntaxErrorAsPrimitiveResult::Ordinal::kErr);
    return envelope_.As<uint32_t>().get_data();
  }
  const uint32_t& err() const {
    ZX_ASSERT(ordinal_ ==
              ::fidl_test_protocols::wire::
                  WithErrorSyntaxErrorAsPrimitiveResult::Ordinal::kErr);
    return envelope_.As<uint32_t>().get_data();
  }
  ::fidl_test_protocols::wire::WithErrorSyntaxErrorAsPrimitiveResult::Tag
  which() const {
    ZX_ASSERT(!has_invalid_tag());
    return static_cast<::fidl_test_protocols::wire::
                           WithErrorSyntaxErrorAsPrimitiveResult::Tag>(
        ordinal_);
  }

  static constexpr const fidl_type_t* Type =
      &fidl_test_protocols_WithErrorSyntax_ErrorAsPrimitive_ResultTable;
  static constexpr uint32_t MaxNumHandles = 0;
  static constexpr uint32_t PrimarySize = 16;
  [[maybe_unused]] static constexpr uint32_t MaxOutOfLine = 0;
  static constexpr bool HasPointer = true;

  class UnownedEncodedMessage;
  class OwnedEncodedMessage;
  class DecodedMessage;

 private:
  enum class Ordinal : fidl_xunion_tag_t {
    Invalid = 0,
    kResponse = 1,  // 0x1
    kErr = 2,       // 0x2
  };

  static void SizeAndOffsetAssertionHelper();
  ::fidl_test_protocols::wire::WithErrorSyntaxErrorAsPrimitiveResult::Ordinal
      ordinal_;
  FIDL_ALIGNDECL
  ::fidl::UntypedEnvelope envelope_;
};

class WithErrorSyntaxErrorAsPrimitiveResult::UnownedEncodedMessage final {
 public:
  UnownedEncodedMessage(uint8_t* backing_buffer, uint32_t backing_buffer_size,
                        WithErrorSyntaxErrorAsPrimitiveResult* value)
      : UnownedEncodedMessage(::fidl::internal::IovecBufferSize, backing_buffer,
                              backing_buffer_size, value) {}
  UnownedEncodedMessage(uint32_t iovec_capacity, uint8_t* backing_buffer,
                        uint32_t backing_buffer_size,
                        WithErrorSyntaxErrorAsPrimitiveResult* value)
      : message_(::fidl::OutgoingMessage::ConstructorArgs{
            .transport_type = FIDL_TRANSPORT_TYPE_CHANNEL,
            .iovecs = iovecs_,
            .iovec_capacity = iovec_capacity,
            .backing_buffer = backing_buffer,
            .backing_buffer_capacity = backing_buffer_size,
        }) {
    ZX_ASSERT(iovec_capacity <= std::size(iovecs_));
    message_.Encode<WithErrorSyntaxErrorAsPrimitiveResult>(value);
  }
  UnownedEncodedMessage(const UnownedEncodedMessage&) = delete;
  UnownedEncodedMessage(UnownedEncodedMessage&&) = delete;
  UnownedEncodedMessage* operator=(const UnownedEncodedMessage&) = delete;
  UnownedEncodedMessage* operator=(UnownedEncodedMessage&&) = delete;

  zx_status_t status() const { return message_.status(); }
#ifdef __Fuchsia__
  const char* status_string() const { return message_.status_string(); }
#endif  // __Fuchsia__
  bool ok() const { return message_.status() == ZX_OK; }
  std::string FormatDescription() const { return message_.FormatDescription(); }
  const char* lossy_description() const { return message_.lossy_description(); }
  const ::fidl::Result& error() const { return message_.error(); }

  ::fidl::OutgoingMessage& GetOutgoingMessage() { return message_; }

 private:
  ::fidl::internal::IovecBuffer iovecs_;
  ::fidl::OutgoingMessage message_;
};

class WithErrorSyntaxErrorAsPrimitiveResult::OwnedEncodedMessage final {
 public:
  explicit OwnedEncodedMessage(WithErrorSyntaxErrorAsPrimitiveResult* value)
      : message_(1u, backing_buffer_.data(),
                 static_cast<uint32_t>(backing_buffer_.size()), value) {}
  // Construct a message using owned buffers.
  // If |iovec_capacity>1|, then the message in OwnedEncodedMessage may point
  // the input FIDL object, which is not owned by it.
  explicit OwnedEncodedMessage(
      ::fidl::internal::AllowUnownedInputRef allow_unowned,
      WithErrorSyntaxErrorAsPrimitiveResult* value)
      : message_(::fidl::internal::IovecBufferSize, backing_buffer_.data(),
                 static_cast<uint32_t>(backing_buffer_.size()), value) {}
  OwnedEncodedMessage(const OwnedEncodedMessage&) = delete;
  OwnedEncodedMessage(OwnedEncodedMessage&&) = delete;
  OwnedEncodedMessage* operator=(const OwnedEncodedMessage&) = delete;
  OwnedEncodedMessage* operator=(OwnedEncodedMessage&&) = delete;

  zx_status_t status() const { return message_.status(); }
#ifdef __Fuchsia__
  const char* status_string() const { return message_.status_string(); }
#endif  // __Fuchsia__
  bool ok() const { return message_.ok(); }
  std::string FormatDescription() const { return message_.FormatDescription(); }
  const char* lossy_description() const { return message_.lossy_description(); }
  const ::fidl::Result& error() const { return message_.error(); }

  ::fidl::OutgoingMessage& GetOutgoingMessage() {
    return message_.GetOutgoingMessage();
  }

 private:
  ::fidl::internal::InlineMessageBuffer<32> backing_buffer_;
  UnownedEncodedMessage message_;
};

class WithErrorSyntaxErrorAsPrimitiveResult::DecodedMessage final
    : public ::fidl::internal::DecodedMessageBase<
          WithErrorSyntaxErrorAsPrimitiveResult> {
 public:
  using DecodedMessageBase<
      WithErrorSyntaxErrorAsPrimitiveResult>::DecodedMessageBase;

  DecodedMessage(
      uint8_t* bytes, uint32_t byte_actual, zx_handle_t* handles = nullptr,
      void* handle_metadata = nullptr, uint32_t handle_actual = 0,
      fidl_transport_type transport_type = FIDL_TRANSPORT_TYPE_CHANNEL)
      : DecodedMessageBase(
            ::fidl::internal::kLLCPPEncodedWireFormatVersion,
            ::fidl::IncomingMessage(
                transport_type, bytes, byte_actual, handles, handle_metadata,
                handle_actual,
                ::fidl::IncomingMessage::kSkipMessageHeaderValidation)) {}

  // Internal constructor for specifying a specific wire format version.
  DecodedMessage(
      ::fidl::internal::WireFormatVersion wire_format_version, uint8_t* bytes,
      uint32_t byte_actual, zx_handle_t* handles = nullptr,
      void* handle_metadata = nullptr, uint32_t handle_actual = 0,
      fidl_transport_type transport_type = FIDL_TRANSPORT_TYPE_CHANNEL)
      : DecodedMessageBase(
            wire_format_version,
            ::fidl::IncomingMessage(
                transport_type, bytes, byte_actual, handles, handle_metadata,
                handle_actual,
                ::fidl::IncomingMessage::kSkipMessageHeaderValidation)) {}

  DecodedMessage(const fidl_incoming_msg_t* c_msg)
      : DecodedMessage(reinterpret_cast<uint8_t*>(c_msg->bytes),
                       c_msg->num_bytes, c_msg->handles, c_msg->handle_metadata,
                       c_msg->num_handles) {}

  // Internal constructor for specifying a specific wire format version.
  DecodedMessage(::fidl::internal::WireFormatVersion wire_format_version,
                 const fidl_incoming_msg_t* c_msg)
      : DecodedMessage(wire_format_version,
                       reinterpret_cast<uint8_t*>(c_msg->bytes),
                       c_msg->num_bytes, c_msg->handles, c_msg->handle_metadata,
                       c_msg->num_handles) {}

  WithErrorSyntaxErrorAsPrimitiveResult* PrimaryObject() {
    ZX_DEBUG_ASSERT(ok());
    return reinterpret_cast<WithErrorSyntaxErrorAsPrimitiveResult*>(bytes());
  }

  // Release the ownership of the decoded message. That means that the handles
  // won't be closed When the object is destroyed. After calling this method,
  // the |DecodedMessage| object should not be used anymore.
  void ReleasePrimaryObject() { ResetBytes(); }
};

extern "C" const fidl_type_t fidl_test_protocols_TheUnionTable;

class TheUnion {
 public:
  TheUnion()
      : ordinal_(::fidl_test_protocols::wire::TheUnion::Ordinal::Invalid),
        envelope_{} {}

  TheUnion(const TheUnion&) = default;
  TheUnion& operator=(const TheUnion&) = default;
  TheUnion(TheUnion&&) = default;
  TheUnion& operator=(TheUnion&&) = default;

  enum class Tag : fidl_xunion_tag_t {
    kV = 1,  // 0x1
    kUnknown = ::std::numeric_limits<::fidl_union_tag_t>::max(),
  };

  bool has_invalid_tag() const {
    return ordinal_ == ::fidl_test_protocols::wire::TheUnion::Ordinal::Invalid;
  }

  bool is_v() const {
    return ordinal_ == ::fidl_test_protocols::wire::TheUnion::Ordinal::kV;
  }
  static TheUnion WithV(uint32_t val) {
    TheUnion result;
    result.set_v(std::move(val));
    return result;
  }

  void set_v(uint32_t elem) {
    ordinal_ = ::fidl_test_protocols::wire::TheUnion::Ordinal::kV;
    envelope_.As<uint32_t>().set_data(std::move(elem));
  }

  uint32_t& mutable_v() {
    ZX_ASSERT(ordinal_ == ::fidl_test_protocols::wire::TheUnion::Ordinal::kV);
    return envelope_.As<uint32_t>().get_data();
  }
  const uint32_t& v() const {
    ZX_ASSERT(ordinal_ == ::fidl_test_protocols::wire::TheUnion::Ordinal::kV);
    return envelope_.As<uint32_t>().get_data();
  }
  ::fidl_test_protocols::wire::TheUnion::Tag which() const;

  static constexpr const fidl_type_t* Type = &fidl_test_protocols_TheUnionTable;
  static constexpr uint32_t MaxNumHandles = 0;
  static constexpr uint32_t PrimarySize = 16;
  [[maybe_unused]] static constexpr uint32_t MaxOutOfLine = 0;
  static constexpr bool HasPointer = true;

  class UnownedEncodedMessage;
  class OwnedEncodedMessage;
  class DecodedMessage;

 private:
  enum class Ordinal : fidl_xunion_tag_t {
    Invalid = 0,
    kV = 1,  // 0x1
  };

  static void SizeAndOffsetAssertionHelper();
  ::fidl_test_protocols::wire::TheUnion::Ordinal ordinal_;
  FIDL_ALIGNDECL
  ::fidl::UntypedEnvelope envelope_;
};

class TheUnion::UnownedEncodedMessage final {
 public:
  UnownedEncodedMessage(uint8_t* backing_buffer, uint32_t backing_buffer_size,
                        TheUnion* value)
      : UnownedEncodedMessage(::fidl::internal::IovecBufferSize, backing_buffer,
                              backing_buffer_size, value) {}
  UnownedEncodedMessage(uint32_t iovec_capacity, uint8_t* backing_buffer,
                        uint32_t backing_buffer_size, TheUnion* value)
      : message_(::fidl::OutgoingMessage::ConstructorArgs{
            .transport_type = FIDL_TRANSPORT_TYPE_CHANNEL,
            .iovecs = iovecs_,
            .iovec_capacity = iovec_capacity,
            .backing_buffer = backing_buffer,
            .backing_buffer_capacity = backing_buffer_size,
        }) {
    ZX_ASSERT(iovec_capacity <= std::size(iovecs_));
    message_.Encode<TheUnion>(value);
  }
  UnownedEncodedMessage(const UnownedEncodedMessage&) = delete;
  UnownedEncodedMessage(UnownedEncodedMessage&&) = delete;
  UnownedEncodedMessage* operator=(const UnownedEncodedMessage&) = delete;
  UnownedEncodedMessage* operator=(UnownedEncodedMessage&&) = delete;

  zx_status_t status() const { return message_.status(); }
#ifdef __Fuchsia__
  const char* status_string() const { return message_.status_string(); }
#endif  // __Fuchsia__
  bool ok() const { return message_.status() == ZX_OK; }
  std::string FormatDescription() const { return message_.FormatDescription(); }
  const char* lossy_description() const { return message_.lossy_description(); }
  const ::fidl::Result& error() const { return message_.error(); }

  ::fidl::OutgoingMessage& GetOutgoingMessage() { return message_; }

 private:
  ::fidl::internal::IovecBuffer iovecs_;
  ::fidl::OutgoingMessage message_;
};

class TheUnion::OwnedEncodedMessage final {
 public:
  explicit OwnedEncodedMessage(TheUnion* value)
      : message_(1u, backing_buffer_.data(),
                 static_cast<uint32_t>(backing_buffer_.size()), value) {}
  // Construct a message using owned buffers.
  // If |iovec_capacity>1|, then the message in OwnedEncodedMessage may point
  // the input FIDL object, which is not owned by it.
  explicit OwnedEncodedMessage(
      ::fidl::internal::AllowUnownedInputRef allow_unowned, TheUnion* value)
      : message_(::fidl::internal::IovecBufferSize, backing_buffer_.data(),
                 static_cast<uint32_t>(backing_buffer_.size()), value) {}
  OwnedEncodedMessage(const OwnedEncodedMessage&) = delete;
  OwnedEncodedMessage(OwnedEncodedMessage&&) = delete;
  OwnedEncodedMessage* operator=(const OwnedEncodedMessage&) = delete;
  OwnedEncodedMessage* operator=(OwnedEncodedMessage&&) = delete;

  zx_status_t status() const { return message_.status(); }
#ifdef __Fuchsia__
  const char* status_string() const { return message_.status_string(); }
#endif  // __Fuchsia__
  bool ok() const { return message_.ok(); }
  std::string FormatDescription() const { return message_.FormatDescription(); }
  const char* lossy_description() const { return message_.lossy_description(); }
  const ::fidl::Result& error() const { return message_.error(); }

  ::fidl::OutgoingMessage& GetOutgoingMessage() {
    return message_.GetOutgoingMessage();
  }

 private:
  ::fidl::internal::InlineMessageBuffer<32> backing_buffer_;
  UnownedEncodedMessage message_;
};

class TheUnion::DecodedMessage final
    : public ::fidl::internal::DecodedMessageBase<TheUnion> {
 public:
  using DecodedMessageBase<TheUnion>::DecodedMessageBase;

  DecodedMessage(
      uint8_t* bytes, uint32_t byte_actual, zx_handle_t* handles = nullptr,
      void* handle_metadata = nullptr, uint32_t handle_actual = 0,
      fidl_transport_type transport_type = FIDL_TRANSPORT_TYPE_CHANNEL)
      : DecodedMessageBase(
            ::fidl::internal::kLLCPPEncodedWireFormatVersion,
            ::fidl::IncomingMessage(
                transport_type, bytes, byte_actual, handles, handle_metadata,
                handle_actual,
                ::fidl::IncomingMessage::kSkipMessageHeaderValidation)) {}

  // Internal constructor for specifying a specific wire format version.
  DecodedMessage(
      ::fidl::internal::WireFormatVersion wire_format_version, uint8_t* bytes,
      uint32_t byte_actual, zx_handle_t* handles = nullptr,
      void* handle_metadata = nullptr, uint32_t handle_actual = 0,
      fidl_transport_type transport_type = FIDL_TRANSPORT_TYPE_CHANNEL)
      : DecodedMessageBase(
            wire_format_version,
            ::fidl::IncomingMessage(
                transport_type, bytes, byte_actual, handles, handle_metadata,
                handle_actual,
                ::fidl::IncomingMessage::kSkipMessageHeaderValidation)) {}

  DecodedMessage(const fidl_incoming_msg_t* c_msg)
      : DecodedMessage(reinterpret_cast<uint8_t*>(c_msg->bytes),
                       c_msg->num_bytes, c_msg->handles, c_msg->handle_metadata,
                       c_msg->num_handles) {}

  // Internal constructor for specifying a specific wire format version.
  DecodedMessage(::fidl::internal::WireFormatVersion wire_format_version,
                 const fidl_incoming_msg_t* c_msg)
      : DecodedMessage(wire_format_version,
                       reinterpret_cast<uint8_t*>(c_msg->bytes),
                       c_msg->num_bytes, c_msg->handles, c_msg->handle_metadata,
                       c_msg->num_handles) {}

  TheUnion* PrimaryObject() {
    ZX_DEBUG_ASSERT(ok());
    return reinterpret_cast<TheUnion*>(bytes());
  }

  // Release the ownership of the decoded message. That means that the handles
  // won't be closed When the object is destroyed. After calling this method,
  // the |DecodedMessage| object should not be used anymore.
  void ReleasePrimaryObject() { ResetBytes(); }
};

extern "C" const fidl_type_t
    fidl_test_protocols_WithErrorSyntax_ErrorAsEnum_ResultTable;

class WithErrorSyntaxErrorAsEnumResult {
 public:
  using Response =
      fidl_test_protocols::wire::WithErrorSyntaxErrorAsEnumResponse;

  WithErrorSyntaxErrorAsEnumResult()
      : ordinal_(::fidl_test_protocols::wire::WithErrorSyntaxErrorAsEnumResult::
                     Ordinal::Invalid),
        envelope_{} {}

  WithErrorSyntaxErrorAsEnumResult(const WithErrorSyntaxErrorAsEnumResult&) =
      default;
  WithErrorSyntaxErrorAsEnumResult& operator=(
      const WithErrorSyntaxErrorAsEnumResult&) = default;
  WithErrorSyntaxErrorAsEnumResult(WithErrorSyntaxErrorAsEnumResult&&) =
      default;
  WithErrorSyntaxErrorAsEnumResult& operator=(
      WithErrorSyntaxErrorAsEnumResult&&) = default;

  enum class Tag : fidl_xunion_tag_t {
    kResponse = 1,  // 0x1
    kErr = 2,       // 0x2
  };

  bool has_invalid_tag() const {
    return ordinal_ == ::fidl_test_protocols::wire::
                           WithErrorSyntaxErrorAsEnumResult::Ordinal::Invalid;
  }

  bool is_response() const {
    return ordinal_ == ::fidl_test_protocols::wire::
                           WithErrorSyntaxErrorAsEnumResult::Ordinal::kResponse;
  }
  static WithErrorSyntaxErrorAsEnumResult WithResponse(
      ::fidl_test_protocols::wire::WithErrorSyntaxErrorAsEnumResponse val) {
    WithErrorSyntaxErrorAsEnumResult result;
    result.set_response(std::move(val));
    return result;
  }

  void set_response(
      ::fidl_test_protocols::wire::WithErrorSyntaxErrorAsEnumResponse elem) {
    ordinal_ = ::fidl_test_protocols::wire::WithErrorSyntaxErrorAsEnumResult::
        Ordinal::kResponse;
    envelope_
        .As<::fidl_test_protocols::wire::WithErrorSyntaxErrorAsEnumResponse>()
        .set_data(std::move(elem));
  }

  ::fidl_test_protocols::wire::WithErrorSyntaxErrorAsEnumResponse&
  mutable_response() {
    ZX_ASSERT(ordinal_ ==
              ::fidl_test_protocols::wire::WithErrorSyntaxErrorAsEnumResult::
                  Ordinal::kResponse);
    return envelope_
        .As<::fidl_test_protocols::wire::WithErrorSyntaxErrorAsEnumResponse>()
        .get_data();
  }
  const ::fidl_test_protocols::wire::WithErrorSyntaxErrorAsEnumResponse&
  response() const {
    ZX_ASSERT(ordinal_ ==
              ::fidl_test_protocols::wire::WithErrorSyntaxErrorAsEnumResult::
                  Ordinal::kResponse);
    return envelope_
        .As<::fidl_test_protocols::wire::WithErrorSyntaxErrorAsEnumResponse>()
        .get_data();
  }

  bool is_err() const {
    return ordinal_ == ::fidl_test_protocols::wire::
                           WithErrorSyntaxErrorAsEnumResult::Ordinal::kErr;
  }
  static WithErrorSyntaxErrorAsEnumResult WithErr(
      ::fidl_test_protocols::wire::ErrorEnum val) {
    WithErrorSyntaxErrorAsEnumResult result;
    result.set_err(std::move(val));
    return result;
  }

  void set_err(::fidl_test_protocols::wire::ErrorEnum elem) {
    ordinal_ = ::fidl_test_protocols::wire::WithErrorSyntaxErrorAsEnumResult::
        Ordinal::kErr;
    envelope_.As<::fidl_test_protocols::wire::ErrorEnum>().set_data(
        std::move(elem));
  }

  ::fidl_test_protocols::wire::ErrorEnum& mutable_err() {
    ZX_ASSERT(ordinal_ == ::fidl_test_protocols::wire::
                              WithErrorSyntaxErrorAsEnumResult::Ordinal::kErr);
    return envelope_.As<::fidl_test_protocols::wire::ErrorEnum>().get_data();
  }
  const ::fidl_test_protocols::wire::ErrorEnum& err() const {
    ZX_ASSERT(ordinal_ == ::fidl_test_protocols::wire::
                              WithErrorSyntaxErrorAsEnumResult::Ordinal::kErr);
    return envelope_.As<::fidl_test_protocols::wire::ErrorEnum>().get_data();
  }
  ::fidl_test_protocols::wire::WithErrorSyntaxErrorAsEnumResult::Tag which()
      const {
    ZX_ASSERT(!has_invalid_tag());
    return static_cast<
        ::fidl_test_protocols::wire::WithErrorSyntaxErrorAsEnumResult::Tag>(
        ordinal_);
  }

  static constexpr const fidl_type_t* Type =
      &fidl_test_protocols_WithErrorSyntax_ErrorAsEnum_ResultTable;
  static constexpr uint32_t MaxNumHandles = 0;
  static constexpr uint32_t PrimarySize = 16;
  [[maybe_unused]] static constexpr uint32_t MaxOutOfLine = 0;
  static constexpr bool HasPointer = true;

  class UnownedEncodedMessage;
  class OwnedEncodedMessage;
  class DecodedMessage;

 private:
  enum class Ordinal : fidl_xunion_tag_t {
    Invalid = 0,
    kResponse = 1,  // 0x1
    kErr = 2,       // 0x2
  };

  static void SizeAndOffsetAssertionHelper();
  ::fidl_test_protocols::wire::WithErrorSyntaxErrorAsEnumResult::Ordinal
      ordinal_;
  FIDL_ALIGNDECL
  ::fidl::UntypedEnvelope envelope_;
};

class WithErrorSyntaxErrorAsEnumResult::UnownedEncodedMessage final {
 public:
  UnownedEncodedMessage(uint8_t* backing_buffer, uint32_t backing_buffer_size,
                        WithErrorSyntaxErrorAsEnumResult* value)
      : UnownedEncodedMessage(::fidl::internal::IovecBufferSize, backing_buffer,
                              backing_buffer_size, value) {}
  UnownedEncodedMessage(uint32_t iovec_capacity, uint8_t* backing_buffer,
                        uint32_t backing_buffer_size,
                        WithErrorSyntaxErrorAsEnumResult* value)
      : message_(::fidl::OutgoingMessage::ConstructorArgs{
            .transport_type = FIDL_TRANSPORT_TYPE_CHANNEL,
            .iovecs = iovecs_,
            .iovec_capacity = iovec_capacity,
            .backing_buffer = backing_buffer,
            .backing_buffer_capacity = backing_buffer_size,
        }) {
    ZX_ASSERT(iovec_capacity <= std::size(iovecs_));
    message_.Encode<WithErrorSyntaxErrorAsEnumResult>(value);
  }
  UnownedEncodedMessage(const UnownedEncodedMessage&) = delete;
  UnownedEncodedMessage(UnownedEncodedMessage&&) = delete;
  UnownedEncodedMessage* operator=(const UnownedEncodedMessage&) = delete;
  UnownedEncodedMessage* operator=(UnownedEncodedMessage&&) = delete;

  zx_status_t status() const { return message_.status(); }
#ifdef __Fuchsia__
  const char* status_string() const { return message_.status_string(); }
#endif  // __Fuchsia__
  bool ok() const { return message_.status() == ZX_OK; }
  std::string FormatDescription() const { return message_.FormatDescription(); }
  const char* lossy_description() const { return message_.lossy_description(); }
  const ::fidl::Result& error() const { return message_.error(); }

  ::fidl::OutgoingMessage& GetOutgoingMessage() { return message_; }

 private:
  ::fidl::internal::IovecBuffer iovecs_;
  ::fidl::OutgoingMessage message_;
};

class WithErrorSyntaxErrorAsEnumResult::OwnedEncodedMessage final {
 public:
  explicit OwnedEncodedMessage(WithErrorSyntaxErrorAsEnumResult* value)
      : message_(1u, backing_buffer_.data(),
                 static_cast<uint32_t>(backing_buffer_.size()), value) {}
  // Construct a message using owned buffers.
  // If |iovec_capacity>1|, then the message in OwnedEncodedMessage may point
  // the input FIDL object, which is not owned by it.
  explicit OwnedEncodedMessage(
      ::fidl::internal::AllowUnownedInputRef allow_unowned,
      WithErrorSyntaxErrorAsEnumResult* value)
      : message_(::fidl::internal::IovecBufferSize, backing_buffer_.data(),
                 static_cast<uint32_t>(backing_buffer_.size()), value) {}
  OwnedEncodedMessage(const OwnedEncodedMessage&) = delete;
  OwnedEncodedMessage(OwnedEncodedMessage&&) = delete;
  OwnedEncodedMessage* operator=(const OwnedEncodedMessage&) = delete;
  OwnedEncodedMessage* operator=(OwnedEncodedMessage&&) = delete;

  zx_status_t status() const { return message_.status(); }
#ifdef __Fuchsia__
  const char* status_string() const { return message_.status_string(); }
#endif  // __Fuchsia__
  bool ok() const { return message_.ok(); }
  std::string FormatDescription() const { return message_.FormatDescription(); }
  const char* lossy_description() const { return message_.lossy_description(); }
  const ::fidl::Result& error() const { return message_.error(); }

  ::fidl::OutgoingMessage& GetOutgoingMessage() {
    return message_.GetOutgoingMessage();
  }

 private:
  ::fidl::internal::InlineMessageBuffer<32> backing_buffer_;
  UnownedEncodedMessage message_;
};

class WithErrorSyntaxErrorAsEnumResult::DecodedMessage final
    : public ::fidl::internal::DecodedMessageBase<
          WithErrorSyntaxErrorAsEnumResult> {
 public:
  using DecodedMessageBase<
      WithErrorSyntaxErrorAsEnumResult>::DecodedMessageBase;

  DecodedMessage(
      uint8_t* bytes, uint32_t byte_actual, zx_handle_t* handles = nullptr,
      void* handle_metadata = nullptr, uint32_t handle_actual = 0,
      fidl_transport_type transport_type = FIDL_TRANSPORT_TYPE_CHANNEL)
      : DecodedMessageBase(
            ::fidl::internal::kLLCPPEncodedWireFormatVersion,
            ::fidl::IncomingMessage(
                transport_type, bytes, byte_actual, handles, handle_metadata,
                handle_actual,
                ::fidl::IncomingMessage::kSkipMessageHeaderValidation)) {}

  // Internal constructor for specifying a specific wire format version.
  DecodedMessage(
      ::fidl::internal::WireFormatVersion wire_format_version, uint8_t* bytes,
      uint32_t byte_actual, zx_handle_t* handles = nullptr,
      void* handle_metadata = nullptr, uint32_t handle_actual = 0,
      fidl_transport_type transport_type = FIDL_TRANSPORT_TYPE_CHANNEL)
      : DecodedMessageBase(
            wire_format_version,
            ::fidl::IncomingMessage(
                transport_type, bytes, byte_actual, handles, handle_metadata,
                handle_actual,
                ::fidl::IncomingMessage::kSkipMessageHeaderValidation)) {}

  DecodedMessage(const fidl_incoming_msg_t* c_msg)
      : DecodedMessage(reinterpret_cast<uint8_t*>(c_msg->bytes),
                       c_msg->num_bytes, c_msg->handles, c_msg->handle_metadata,
                       c_msg->num_handles) {}

  // Internal constructor for specifying a specific wire format version.
  DecodedMessage(::fidl::internal::WireFormatVersion wire_format_version,
                 const fidl_incoming_msg_t* c_msg)
      : DecodedMessage(wire_format_version,
                       reinterpret_cast<uint8_t*>(c_msg->bytes),
                       c_msg->num_bytes, c_msg->handles, c_msg->handle_metadata,
                       c_msg->num_handles) {}

  WithErrorSyntaxErrorAsEnumResult* PrimaryObject() {
    ZX_DEBUG_ASSERT(ok());
    return reinterpret_cast<WithErrorSyntaxErrorAsEnumResult*>(bytes());
  }

  // Release the ownership of the decoded message. That means that the handles
  // won't be closed When the object is destroyed. After calling this method,
  // the |DecodedMessage| object should not be used anymore.
  void ReleasePrimaryObject() { ResetBytes(); }
};

extern "C" const fidl_type_t
    fidl_test_protocols_WithErrorSyntax_ResponseAsStruct_ResponseTable;

struct WithErrorSyntaxResponseAsStructResponse {
  static constexpr const fidl_type_t* Type =
      &fidl_test_protocols_WithErrorSyntax_ResponseAsStruct_ResponseTable;
  static constexpr uint32_t MaxNumHandles = 0;
  static constexpr uint32_t PrimarySize = 24;
  [[maybe_unused]] static constexpr uint32_t MaxOutOfLine = 0;
  static constexpr bool HasPointer = false;

  int64_t a = {};

  int64_t b = {};

  int64_t c = {};

  class UnownedEncodedMessage;
  class OwnedEncodedMessage;
  class DecodedMessage;
};

class WithErrorSyntaxResponseAsStructResponse::UnownedEncodedMessage final {
 public:
  UnownedEncodedMessage(uint8_t* backing_buffer, uint32_t backing_buffer_size,
                        WithErrorSyntaxResponseAsStructResponse* value)
      : UnownedEncodedMessage(::fidl::internal::IovecBufferSize, backing_buffer,
                              backing_buffer_size, value) {}
  UnownedEncodedMessage(uint32_t iovec_capacity, uint8_t* backing_buffer,
                        uint32_t backing_buffer_size,
                        WithErrorSyntaxResponseAsStructResponse* value)
      : message_(::fidl::OutgoingMessage::ConstructorArgs{
            .transport_type = FIDL_TRANSPORT_TYPE_CHANNEL,
            .iovecs = iovecs_,
            .iovec_capacity = iovec_capacity,
            .backing_buffer = backing_buffer,
            .backing_buffer_capacity = backing_buffer_size,
        }) {
    ZX_ASSERT(iovec_capacity <= std::size(iovecs_));
    message_.Encode<WithErrorSyntaxResponseAsStructResponse>(value);
  }
  UnownedEncodedMessage(const UnownedEncodedMessage&) = delete;
  UnownedEncodedMessage(UnownedEncodedMessage&&) = delete;
  UnownedEncodedMessage* operator=(const UnownedEncodedMessage&) = delete;
  UnownedEncodedMessage* operator=(UnownedEncodedMessage&&) = delete;

  zx_status_t status() const { return message_.status(); }
#ifdef __Fuchsia__
  const char* status_string() const { return message_.status_string(); }
#endif  // __Fuchsia__
  bool ok() const { return message_.status() == ZX_OK; }
  std::string FormatDescription() const { return message_.FormatDescription(); }
  const char* lossy_description() const { return message_.lossy_description(); }
  const ::fidl::Result& error() const { return message_.error(); }

  ::fidl::OutgoingMessage& GetOutgoingMessage() { return message_; }

 private:
  ::fidl::internal::IovecBuffer iovecs_;
  ::fidl::OutgoingMessage message_;
};

class WithErrorSyntaxResponseAsStructResponse::OwnedEncodedMessage final {
 public:
  explicit OwnedEncodedMessage(WithErrorSyntaxResponseAsStructResponse* value)
      : message_(1u, backing_buffer_.data(),
                 static_cast<uint32_t>(backing_buffer_.size()), value) {}
  // Internal constructor.
  explicit OwnedEncodedMessage(
      ::fidl::internal::AllowUnownedInputRef allow_unowned,
      WithErrorSyntaxResponseAsStructResponse* value)
      : message_(::fidl::internal::IovecBufferSize, backing_buffer_.data(),
                 static_cast<uint32_t>(backing_buffer_.size()), value) {}
  OwnedEncodedMessage(const OwnedEncodedMessage&) = delete;
  OwnedEncodedMessage(OwnedEncodedMessage&&) = delete;
  OwnedEncodedMessage* operator=(const OwnedEncodedMessage&) = delete;
  OwnedEncodedMessage* operator=(OwnedEncodedMessage&&) = delete;

  zx_status_t status() const { return message_.status(); }
#ifdef __Fuchsia__
  const char* status_string() const { return message_.status_string(); }
#endif  // __Fuchsia__
  bool ok() const { return message_.ok(); }
  std::string FormatDescription() const { return message_.FormatDescription(); }
  const char* lossy_description() const { return message_.lossy_description(); }
  const ::fidl::Result& error() const { return message_.error(); }

  ::fidl::OutgoingMessage& GetOutgoingMessage() {
    return message_.GetOutgoingMessage();
  }

 private:
  ::fidl::internal::InlineMessageBuffer<24> backing_buffer_;
  UnownedEncodedMessage message_;
};

class WithErrorSyntaxResponseAsStructResponse::DecodedMessage final
    : public ::fidl::internal::DecodedMessageBase<
          WithErrorSyntaxResponseAsStructResponse> {
 public:
  using DecodedMessageBase<
      WithErrorSyntaxResponseAsStructResponse>::DecodedMessageBase;

  DecodedMessage(
      uint8_t* bytes, uint32_t byte_actual, zx_handle_t* handles = nullptr,
      void* handle_metadata = nullptr, uint32_t handle_actual = 0,
      fidl_transport_type transport_type = FIDL_TRANSPORT_TYPE_CHANNEL)
      : DecodedMessageBase(
            ::fidl::internal::kLLCPPEncodedWireFormatVersion,
            ::fidl::IncomingMessage(
                transport_type, bytes, byte_actual, handles, handle_metadata,
                handle_actual,
                ::fidl::IncomingMessage::kSkipMessageHeaderValidation)) {}

  // Internal constructor for specifying a specific wire format version.
  DecodedMessage(
      ::fidl::internal::WireFormatVersion wire_format_version, uint8_t* bytes,
      uint32_t byte_actual, zx_handle_t* handles = nullptr,
      void* handle_metadata = nullptr, uint32_t handle_actual = 0,
      fidl_transport_type transport_type = FIDL_TRANSPORT_TYPE_CHANNEL)
      : DecodedMessageBase(
            wire_format_version,
            ::fidl::IncomingMessage(
                transport_type, bytes, byte_actual, handles, handle_metadata,
                handle_actual,
                ::fidl::IncomingMessage::kSkipMessageHeaderValidation)) {}

  DecodedMessage(const fidl_incoming_msg_t* c_msg)
      : DecodedMessage(reinterpret_cast<uint8_t*>(c_msg->bytes),
                       c_msg->num_bytes, c_msg->handles, c_msg->handle_metadata,
                       c_msg->num_handles) {}

  // Internal constructor for specifying a specific wire format version.
  DecodedMessage(::fidl::internal::WireFormatVersion wire_format_version,
                 const fidl_incoming_msg_t* c_msg)
      : DecodedMessage(wire_format_version,
                       reinterpret_cast<uint8_t*>(c_msg->bytes),
                       c_msg->num_bytes, c_msg->handles, c_msg->handle_metadata,
                       c_msg->num_handles) {}

  WithErrorSyntaxResponseAsStructResponse* PrimaryObject() {
    ZX_DEBUG_ASSERT(ok());
    return reinterpret_cast<WithErrorSyntaxResponseAsStructResponse*>(bytes());
  }

  // Release the ownership of the decoded message. That means that the handles
  // won't be closed When the object is destroyed. After calling this method,
  // the |DecodedMessage| object should not be used anymore.
  void ReleasePrimaryObject() { ResetBytes(); }
};

#ifdef __Fuchsia__

extern "C" const fidl_type_t fidl_test_protocols_ProtocolEndsTable;

struct ProtocolEnds {
  static constexpr const fidl_type_t* Type =
      &fidl_test_protocols_ProtocolEndsTable;
  static constexpr uint32_t MaxNumHandles = 4;
  static constexpr uint32_t PrimarySize = 16;
  [[maybe_unused]] static constexpr uint32_t MaxOutOfLine = 0;
  static constexpr bool HasPointer = false;

  ::fidl::ClientEnd<::fidl_test_protocols::DiscoverableProtocol> client = {};

  ::fidl::ServerEnd<::fidl_test_protocols::DiscoverableProtocol> server = {};

  ::fidl::ClientEnd<::fidl_test_protocols::DiscoverableProtocol> client_opt =
      {};

  ::fidl::ServerEnd<::fidl_test_protocols::DiscoverableProtocol> server_opt =
      {};

  void _CloseHandles();

  class UnownedEncodedMessage;
  class OwnedEncodedMessage;
  class DecodedMessage;
};

class ProtocolEnds::UnownedEncodedMessage final {
 public:
  UnownedEncodedMessage(uint8_t* backing_buffer, uint32_t backing_buffer_size,
                        ProtocolEnds* value)
      : UnownedEncodedMessage(::fidl::internal::IovecBufferSize, backing_buffer,
                              backing_buffer_size, value) {}
  UnownedEncodedMessage(uint32_t iovec_capacity, uint8_t* backing_buffer,
                        uint32_t backing_buffer_size, ProtocolEnds* value)
      : message_(::fidl::OutgoingMessage::ConstructorArgs{
            .transport_type = FIDL_TRANSPORT_TYPE_CHANNEL,
            .iovecs = iovecs_,
            .iovec_capacity = iovec_capacity,
            .handles = handles_,
            .handle_metadata = handle_metadata_,
            .handle_capacity = kHandleCapacity,
            .backing_buffer = backing_buffer,
            .backing_buffer_capacity = backing_buffer_size,
        }) {
    ZX_ASSERT(iovec_capacity <= std::size(iovecs_));
    message_.Encode<ProtocolEnds>(value);
  }
  UnownedEncodedMessage(const UnownedEncodedMessage&) = delete;
  UnownedEncodedMessage(UnownedEncodedMessage&&) = delete;
  UnownedEncodedMessage* operator=(const UnownedEncodedMessage&) = delete;
  UnownedEncodedMessage* operator=(UnownedEncodedMessage&&) = delete;

  zx_status_t status() const { return message_.status(); }
  const char* status_string() const { return message_.status_string(); }
  bool ok() const { return message_.status() == ZX_OK; }
  std::string FormatDescription() const { return message_.FormatDescription(); }
  const char* lossy_description() const { return message_.lossy_description(); }
  const ::fidl::Result& error() const { return message_.error(); }

  ::fidl::OutgoingMessage& GetOutgoingMessage() { return message_; }

 private:
  ::fidl::internal::IovecBuffer iovecs_;
  static constexpr size_t kHandleCapacity =
      std::min(ZX_CHANNEL_MAX_MSG_HANDLES, MaxNumHandles);
  zx_handle_t handles_[kHandleCapacity];
  fidl_channel_handle_metadata_t handle_metadata_[kHandleCapacity];
  ::fidl::OutgoingMessage message_;
};

class ProtocolEnds::OwnedEncodedMessage final {
 public:
  explicit OwnedEncodedMessage(ProtocolEnds* value)
      : message_(1u, backing_buffer_.data(),
                 static_cast<uint32_t>(backing_buffer_.size()), value) {}
  // Internal constructor.
  explicit OwnedEncodedMessage(
      ::fidl::internal::AllowUnownedInputRef allow_unowned, ProtocolEnds* value)
      : message_(::fidl::internal::IovecBufferSize, backing_buffer_.data(),
                 static_cast<uint32_t>(backing_buffer_.size()), value) {}
  OwnedEncodedMessage(const OwnedEncodedMessage&) = delete;
  OwnedEncodedMessage(OwnedEncodedMessage&&) = delete;
  OwnedEncodedMessage* operator=(const OwnedEncodedMessage&) = delete;
  OwnedEncodedMessage* operator=(OwnedEncodedMessage&&) = delete;

  zx_status_t status() const { return message_.status(); }
  const char* status_string() const { return message_.status_string(); }
  bool ok() const { return message_.ok(); }
  std::string FormatDescription() const { return message_.FormatDescription(); }
  const char* lossy_description() const { return message_.lossy_description(); }
  const ::fidl::Result& error() const { return message_.error(); }

  ::fidl::OutgoingMessage& GetOutgoingMessage() {
    return message_.GetOutgoingMessage();
  }

 private:
  ::fidl::internal::InlineMessageBuffer<16> backing_buffer_;
  UnownedEncodedMessage message_;
};

class ProtocolEnds::DecodedMessage final
    : public ::fidl::internal::DecodedMessageBase<ProtocolEnds> {
 public:
  using DecodedMessageBase<ProtocolEnds>::DecodedMessageBase;

  DecodedMessage(
      uint8_t* bytes, uint32_t byte_actual, zx_handle_t* handles = nullptr,
      void* handle_metadata = nullptr, uint32_t handle_actual = 0,
      fidl_transport_type transport_type = FIDL_TRANSPORT_TYPE_CHANNEL)
      : DecodedMessageBase(
            ::fidl::internal::kLLCPPEncodedWireFormatVersion,
            ::fidl::IncomingMessage(
                transport_type, bytes, byte_actual, handles, handle_metadata,
                handle_actual,
                ::fidl::IncomingMessage::kSkipMessageHeaderValidation)) {}

  // Internal constructor for specifying a specific wire format version.
  DecodedMessage(
      ::fidl::internal::WireFormatVersion wire_format_version, uint8_t* bytes,
      uint32_t byte_actual, zx_handle_t* handles = nullptr,
      void* handle_metadata = nullptr, uint32_t handle_actual = 0,
      fidl_transport_type transport_type = FIDL_TRANSPORT_TYPE_CHANNEL)
      : DecodedMessageBase(
            wire_format_version,
            ::fidl::IncomingMessage(
                transport_type, bytes, byte_actual, handles, handle_metadata,
                handle_actual,
                ::fidl::IncomingMessage::kSkipMessageHeaderValidation)) {}

  DecodedMessage(const fidl_incoming_msg_t* c_msg)
      : DecodedMessage(reinterpret_cast<uint8_t*>(c_msg->bytes),
                       c_msg->num_bytes, c_msg->handles, c_msg->handle_metadata,
                       c_msg->num_handles) {}

  // Internal constructor for specifying a specific wire format version.
  DecodedMessage(::fidl::internal::WireFormatVersion wire_format_version,
                 const fidl_incoming_msg_t* c_msg)
      : DecodedMessage(wire_format_version,
                       reinterpret_cast<uint8_t*>(c_msg->bytes),
                       c_msg->num_bytes, c_msg->handles, c_msg->handle_metadata,
                       c_msg->num_handles) {}
  ~DecodedMessage() {
    if (ok() && (PrimaryObject() != nullptr)) {
      PrimaryObject()->_CloseHandles();
    }
  }

  ProtocolEnds* PrimaryObject() {
    ZX_DEBUG_ASSERT(ok());
    return reinterpret_cast<ProtocolEnds*>(bytes());
  }

  // Release the ownership of the decoded message. That means that the handles
  // won't be closed When the object is destroyed. After calling this method,
  // the |DecodedMessage| object should not be used anymore.
  void ReleasePrimaryObject() { ResetBytes(); }
};
#endif  // __Fuchsia__

}  // namespace wire
}  // namespace fidl_test_protocols
namespace fidl {

template <>
struct IsFidlType<::fidl_test_protocols::wire::Rights> : public std::true_type {
};
template <>
struct ContainsHandle<::fidl_test_protocols::wire::Rights>
    : public std::false_type {};
static_assert(std::is_standard_layout_v<::fidl_test_protocols::wire::Rights>);
static_assert(sizeof(::fidl_test_protocols::wire::Rights) == sizeof(uint32_t));

#ifdef __Fuchsia__
template <>
struct IsResource<
    ::fidl_test_protocols::wire::WithErrorSyntaxHandleInResultResponse>
    : public std::true_type {};
template <>
struct IsFidlType<
    ::fidl_test_protocols::wire::WithErrorSyntaxHandleInResultResponse>
    : public std::true_type {};
template <>
struct IsStruct<
    ::fidl_test_protocols::wire::WithErrorSyntaxHandleInResultResponse>
    : public std::true_type {};
static_assert(
    std::is_standard_layout_v<
        ::fidl_test_protocols::wire::WithErrorSyntaxHandleInResultResponse>);
static_assert(
    offsetof(::fidl_test_protocols::wire::WithErrorSyntaxHandleInResultResponse,
             h) == 0);
static_assert(
    sizeof(
        ::fidl_test_protocols::wire::WithErrorSyntaxHandleInResultResponse) ==
    ::fidl_test_protocols::wire::WithErrorSyntaxHandleInResultResponse::
        PrimarySize);
#endif  // __Fuchsia__

template <>
struct IsFidlType<
    ::fidl_test_protocols::wire::WithErrorSyntaxResponseAsStructResponse>
    : public std::true_type {};
template <>
struct IsStruct<
    ::fidl_test_protocols::wire::WithErrorSyntaxResponseAsStructResponse>
    : public std::true_type {};
static_assert(
    std::is_standard_layout_v<
        ::fidl_test_protocols::wire::WithErrorSyntaxResponseAsStructResponse>);
static_assert(
    offsetof(
        ::fidl_test_protocols::wire::WithErrorSyntaxResponseAsStructResponse,
        a) == 0);
static_assert(
    offsetof(
        ::fidl_test_protocols::wire::WithErrorSyntaxResponseAsStructResponse,
        b) == 8);
static_assert(
    offsetof(
        ::fidl_test_protocols::wire::WithErrorSyntaxResponseAsStructResponse,
        c) == 16);
static_assert(
    sizeof(
        ::fidl_test_protocols::wire::WithErrorSyntaxResponseAsStructResponse) ==
    ::fidl_test_protocols::wire::WithErrorSyntaxResponseAsStructResponse::
        PrimarySize);

template <>
struct IsFidlType<
    ::fidl_test_protocols::wire::WithErrorSyntaxErrorAsPrimitiveResponse>
    : public std::true_type {};
template <>
struct IsStruct<
    ::fidl_test_protocols::wire::WithErrorSyntaxErrorAsPrimitiveResponse>
    : public std::true_type {};
static_assert(
    std::is_standard_layout_v<
        ::fidl_test_protocols::wire::WithErrorSyntaxErrorAsPrimitiveResponse>);
static_assert(
    offsetof(
        ::fidl_test_protocols::wire::WithErrorSyntaxErrorAsPrimitiveResponse,
        __reserved) == 0);
static_assert(
    sizeof(
        ::fidl_test_protocols::wire::WithErrorSyntaxErrorAsPrimitiveResponse) ==
    ::fidl_test_protocols::wire::WithErrorSyntaxErrorAsPrimitiveResponse::
        PrimarySize);

template <>
struct IsFidlType<
    ::fidl_test_protocols::wire::WithErrorSyntaxErrorAsEnumResponse>
    : public std::true_type {};
template <>
struct IsStruct<::fidl_test_protocols::wire::WithErrorSyntaxErrorAsEnumResponse>
    : public std::true_type {};
static_assert(std::is_standard_layout_v<
              ::fidl_test_protocols::wire::WithErrorSyntaxErrorAsEnumResponse>);
static_assert(
    offsetof(::fidl_test_protocols::wire::WithErrorSyntaxErrorAsEnumResponse,
             __reserved) == 0);
static_assert(
    sizeof(::fidl_test_protocols::wire::WithErrorSyntaxErrorAsEnumResponse) ==
    ::fidl_test_protocols::wire::WithErrorSyntaxErrorAsEnumResponse::
        PrimarySize);

#ifdef __Fuchsia__
template <>
struct IsResource<::fidl_test_protocols::wire::ProtocolEnds>
    : public std::true_type {};
template <>
struct IsFidlType<::fidl_test_protocols::wire::ProtocolEnds>
    : public std::true_type {};
template <>
struct IsStruct<::fidl_test_protocols::wire::ProtocolEnds>
    : public std::true_type {};
static_assert(
    std::is_standard_layout_v<::fidl_test_protocols::wire::ProtocolEnds>);
static_assert(offsetof(::fidl_test_protocols::wire::ProtocolEnds, client) == 0);
static_assert(offsetof(::fidl_test_protocols::wire::ProtocolEnds, server) == 4);
static_assert(offsetof(::fidl_test_protocols::wire::ProtocolEnds, client_opt) ==
              8);
static_assert(offsetof(::fidl_test_protocols::wire::ProtocolEnds, server_opt) ==
              12);
static_assert(sizeof(::fidl_test_protocols::wire::ProtocolEnds) ==
              ::fidl_test_protocols::wire::ProtocolEnds::PrimarySize);
#endif  // __Fuchsia__

#ifdef __Fuchsia__
template <>
struct IsResource<
    ::fidl_test_protocols::wire::WithErrorSyntaxHandleInResultResult>
    : public std::true_type {};
template <>
struct IsFidlType<
    ::fidl_test_protocols::wire::WithErrorSyntaxHandleInResultResult>
    : public std::true_type {};
template <>
struct IsUnion<::fidl_test_protocols::wire::WithErrorSyntaxHandleInResultResult>
    : public std::true_type {};
static_assert(
    std::is_standard_layout_v<
        ::fidl_test_protocols::wire::WithErrorSyntaxHandleInResultResult>);
#endif  // __Fuchsia__

template <>
struct IsFidlType<
    ::fidl_test_protocols::wire::WithErrorSyntaxResponseAsStructResult>
    : public std::true_type {};
template <>
struct IsUnion<
    ::fidl_test_protocols::wire::WithErrorSyntaxResponseAsStructResult>
    : public std::true_type {};
static_assert(
    std::is_standard_layout_v<
        ::fidl_test_protocols::wire::WithErrorSyntaxResponseAsStructResult>);

template <>
struct IsFidlType<
    ::fidl_test_protocols::wire::WithErrorSyntaxErrorAsPrimitiveResult>
    : public std::true_type {};
template <>
struct IsUnion<
    ::fidl_test_protocols::wire::WithErrorSyntaxErrorAsPrimitiveResult>
    : public std::true_type {};
static_assert(
    std::is_standard_layout_v<
        ::fidl_test_protocols::wire::WithErrorSyntaxErrorAsPrimitiveResult>);

template <>
struct IsFidlType<::fidl_test_protocols::wire::TheUnion>
    : public std::true_type {};
template <>
struct IsUnion<::fidl_test_protocols::wire::TheUnion> : public std::true_type {
};
static_assert(std::is_standard_layout_v<::fidl_test_protocols::wire::TheUnion>);

template <>
struct IsFidlType<::fidl_test_protocols::wire::WithErrorSyntaxErrorAsEnumResult>
    : public std::true_type {};
template <>
struct IsUnion<::fidl_test_protocols::wire::WithErrorSyntaxErrorAsEnumResult>
    : public std::true_type {};
static_assert(std::is_standard_layout_v<
              ::fidl_test_protocols::wire::WithErrorSyntaxErrorAsEnumResult>);

template <>
struct IsFidlType<::fidl_test_protocols::wire::ObjType>
    : public std::true_type {};
template <>
struct ContainsHandle<::fidl_test_protocols::wire::ObjType>
    : public std::false_type {};

template <>
struct IsFidlType<::fidl_test_protocols::wire::ErrorEnum>
    : public std::true_type {};
template <>
struct ContainsHandle<::fidl_test_protocols::wire::ErrorEnum>
    : public std::false_type {};

}  // namespace fidl
