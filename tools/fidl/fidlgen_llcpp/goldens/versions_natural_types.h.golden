// WARNING: This file is machine generated by fidlgen.

#pragma once

#include <fidl/test.versions/cpp/common_types.h>
#include <fidl/test.versions/cpp/markers.h>
#include <lib/fidl/cpp/coding_traits.h>
#include <lib/fidl/cpp/internal/codable_base.h>
#include <lib/fidl/cpp/unified_messaging.h>

#include <cinttypes>
#include <string>

#ifdef __Fuchsia__

#include <lib/zx/channel.h>

#endif  // __Fuchsia__

namespace test_versions {
class Struct;

class Table;

class Union;

extern "C" const fidl_type_t test_versions_UnionTable;

class Union final {
 private:
  using Storage_ = cpp17::variant<cpp17::monostate, uint32_t>;

 public:
  // TODO: share union tag types between wire & natural.
  enum class Tag : fidl_union_tag_t {
    kX = 1,  // 0x1
    kUnknown = ::std::numeric_limits<::fidl_union_tag_t>::max(),
  };

  // Create an unknown value of this union.
  Union() : storage_(std::make_shared<Storage_>()) {}

  Union(Union&&) noexcept = default;
  Union& operator=(Union&&) noexcept = default;
  Union(const Union& other) noexcept : Union(other.CloneStorage_()) {}
  Union& operator=(const Union& other) noexcept {
    storage_ = other.CloneStorage_();
    return *this;
  }

  constexpr ::test_versions::Union::Tag Which() const {
    return Union::IndexToTag(storage_->index());
  }
  static Union WithX(uint32_t val) {
    return Union(
        std::make_shared<Storage_>(std::in_place_index_t<1>{}, std::move(val)));
  }

  const ::fidl::internal::UnionMemberView<1, Storage_> x() const {
    return ::fidl::internal::UnionMemberView<1, Storage_>(storage_);
  }
  ::fidl::internal::UnionMemberView<1, Storage_> x() {
    return ::fidl::internal::UnionMemberView<1, Storage_>(storage_);
  }

 private:
  std::shared_ptr<Storage_> storage_;
  std::shared_ptr<Storage_> CloneStorage_() const;
  friend struct ::fidl::internal::NaturalUnionCodingTraits<
      ::test_versions::Union>;
  static constexpr std::array<std::optional<::fidl::HandleInformation>, 2>
      kMembers = {std::nullopt, std::nullopt};

  explicit Union(std::shared_ptr<Storage_> storage)
      : storage_(std::move(storage)) {}

  static constexpr size_t TagToIndex(::test_versions::Union::Tag tag) {
    switch (tag) {
      case ::test_versions::Union::Tag::kX:
        return 1;
      case ::test_versions::Union::Tag::kUnknown:
        return 0;
    }
  }

  static constexpr ::test_versions::Union::Tag IndexToTag(size_t index) {
    switch (index) {
      case 1:
        return ::test_versions::Union::Tag::kX;
      default:
        return ::test_versions::Union::Tag::kUnknown;
    }
  }
};

extern "C" const fidl_type_t test_versions_TableTable;

class Table final {
 private:
  struct Storage_;

 public:
  Table(Storage_ storage) noexcept : storage_(std::move(storage)) {}
  Table() noexcept = default;
  Table(Table&&) noexcept = default;
  Table& operator=(Table&&) noexcept = default;
  Table(const Table& other) noexcept : Table(other.CloneStorage_()) {}
  Table& operator=(const Table& other) noexcept {
    storage_ = other.CloneStorage_();
    return *this;
  }

  bool IsEmpty() const { return !(storage_.x.has_value()); }

  const cpp17::optional<uint32_t>& x() const { return storage_.x; }
  ::cpp17::optional<uint32_t>& x() { return storage_.x; }

 private:
  struct Storage_ final {
    ::cpp17::optional<uint32_t> x{};
  };

  // TODO(https://fxbug.dev/91252): Box the storage.
  Storage_ storage_;
  Storage_ CloneStorage_() const;
  friend struct ::fidl::internal::NaturalTableCodingTraits<
      ::test_versions::Table>;
  static constexpr auto kMembers =
      std::make_tuple(::fidl::internal::NaturalTableMember<Storage_, uint32_t>{
          1, &Storage_::x});
};

extern "C" const fidl_type_t test_versions_StructTable;

class Struct final : public ::fidl::internal::CodableBase<Struct> {
 private:
  struct Storage_;

 public:
  Struct(Storage_ storage) noexcept : storage_(std::move(storage)) {}
  Struct(uint32_t x) noexcept : storage_({.x = std::move(x)}) {}
  Struct() : Struct(Storage_{}) {}

  Struct(Struct&&) noexcept = default;
  Struct& operator=(Struct&&) noexcept = default;
  Struct(const Struct& other) noexcept : Struct(other.CloneStorage_()) {}
  Struct& operator=(const Struct& other) noexcept {
    storage_ = other.CloneStorage_();
    return *this;
  }

  uint32_t x() const { return storage_.x; }

  uint32_t& x() { return storage_.x; }

 private:
  friend ::fidl::internal::CodableBase<Struct>;
  friend ::fidl::CodingTraits<Struct>;
  Struct(::fidl::Decoder& decoder);
  template <typename Payload>
  friend auto ::fidl::internal::EncodeTransactionalMessageWithoutValidating(
      ::fidl::Encoder& encoder, Payload&& payload)
      -> ::fidl::HLCPPOutgoingMessage;
  void EncodeWithoutValidating(::fidl::Encoder& encoder, size_t offset);

  struct Storage_ final {
    uint32_t x{};
  };

  Storage_ storage_;
  Storage_ CloneStorage_() const;
};

constexpr uint32_t Const = 0u;

}  // namespace test_versions
namespace fidl {

#ifdef __Fuchsia__
extern "C" const fidl_type_t test_versions_StructTable;

template <>
struct IsFidlType<::test_versions::Struct> : public std::true_type {};

template <>
struct ::fidl::internal::TypeTraits<::test_versions::Struct> final {
 public:
  static constexpr const fidl_type_t* kCodingTable = &test_versions_StructTable;
};

template <>
struct CodingTraits<::test_versions::Struct> {
  static constexpr size_t inline_size_v1_no_ee = 4;
  static constexpr size_t inline_size_v2 = 4;

  template <class EncoderImpl>
  static void Encode(
      EncoderImpl* encoder, ::test_versions::Struct* value, size_t offset,
      cpp17::optional<HandleInformation> maybe_handle_info = cpp17::nullopt) {
    [[maybe_unused]] uint32_t field_offset;
    field_offset =
        encoder->wire_format() == ::fidl::internal::WireFormatVersion::kV1 ? 0
                                                                           : 0;
    ::fidl::Encode(encoder, &value->storage_.x, offset + field_offset);
  }

  template <typename DecoderImpl>
  static void Decode(DecoderImpl* decoder, ::test_versions::Struct* value,
                     size_t offset) {
    ::fidl::Decode(decoder, &value->storage_.x, offset + 0);
  }
};
#endif  // __Fuchsia__

template <>
struct IsFidlType<::test_versions::Table> : public std::true_type {};

template <>
struct CodingTraits<::test_versions::Table>
    : public ::fidl::internal::NaturalTableCodingTraits<
          ::test_versions::Table> {};

template <>
struct IsFidlType<::test_versions::Union> : public std::true_type {};

template <>
struct CodingTraits<::test_versions::Union> final
    : public ::fidl::internal::NaturalUnionCodingTraits<
          ::test_versions::Union> {};

template <>
struct CodingTraits<::test_versions::Bits> {
  static constexpr size_t inline_size_v1_no_ee = sizeof(uint32_t);
  static constexpr size_t inline_size_v2 = sizeof(uint32_t);

  template <class EncoderImpl>
  static void Encode(
      EncoderImpl* encoder, ::test_versions::Bits* value, size_t offset,
      cpp17::optional<HandleInformation> maybe_handle_info = cpp17::nullopt) {
    // TODO: encode
  }
  template <typename DecoderImpl>
  static void Decode(DecoderImpl* decoder, ::test_versions::Bits* value,
                     size_t offset) {
    // TODO: decode
  }
};

template <>
struct CodingTraits<::test_versions::Enum> {
  static constexpr size_t inline_size_v1_no_ee = sizeof(uint32_t);
  static constexpr size_t inline_size_v2 = sizeof(uint32_t);

  template <class EncoderImpl>
  static void Encode(
      EncoderImpl* encoder, ::test_versions::Enum* value, size_t offset,
      cpp17::optional<HandleInformation> maybe_handle_info = cpp17::nullopt) {
    // TODO: encode
  }
  template <typename DecoderImpl>
  static void Decode(DecoderImpl* decoder, ::test_versions::Enum* value,
                     size_t offset) {
    // TODO: decode
  }
};

}  // namespace fidl
