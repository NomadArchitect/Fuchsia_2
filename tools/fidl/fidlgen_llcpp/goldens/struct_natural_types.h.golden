// WARNING: This file is machine generated by fidlgen.

#pragma once

#include <fidl/test.struct/cpp/common_types.h>
#include <fidl/test.struct/cpp/markers.h>
#include <lib/fidl/cpp/coding_traits.h>
#include <lib/fidl/cpp/internal/codable_base.h>
#include <lib/fidl/cpp/unified_messaging.h>

#include <cinttypes>
#include <string>

#ifdef __Fuchsia__

#endif  // __Fuchsia__

namespace test_struct {
class Simple;

class BasicStruct;

extern "C" const fidl_type_t test_struct_SimpleTable;

class Simple final : public ::fidl::internal::CodableBase<Simple> {
 private:
  friend ::fidl::internal::CodableBase<Simple>;
  friend ::fidl::CodingTraits<Simple>;
  Simple(::fidl::Decoder& decoder);
  template <typename Payload>
  friend auto ::fidl::internal::EncodeTransactionalMessageWithoutValidating(
      ::fidl::Encoder& encoder, Payload&& payload)
      -> ::fidl::HLCPPOutgoingMessage;
  void EncodeWithoutValidating(::fidl::Encoder& encoder, size_t offset);

 public:
  struct Storage final {
    uint8_t f1{};
    bool f2{};
  };

  Simple(Storage storage) noexcept : storage_(std::move(storage)) {}
  Simple(uint8_t f1, bool f2) noexcept
      : storage_({.f1 = std::move(f1), .f2 = std::move(f2)}) {}
  Simple() : Simple(Storage{}) {}

  Simple(Simple&&) noexcept = default;
  Simple& operator=(Simple&&) noexcept = default;
  Simple(const Simple& other) noexcept : Simple(other.CloneStorage()) {}
  Simple& operator=(const Simple& other) noexcept {
    storage_ = other.CloneStorage();
    return *this;
  }

  uint8_t f1() const { return storage_.f1; }

  uint8_t& f1() { return storage_.f1; }

  bool f2() const { return storage_.f2; }

  bool& f2() { return storage_.f2; }

 private:
  Storage storage_;
  Storage CloneStorage() const;
};

extern "C" const fidl_type_t test_struct_BasicStructTable;

class BasicStruct final : public ::fidl::internal::CodableBase<BasicStruct> {
 private:
  friend ::fidl::internal::CodableBase<BasicStruct>;
  friend ::fidl::CodingTraits<BasicStruct>;
  BasicStruct(::fidl::Decoder& decoder);
  template <typename Payload>
  friend auto ::fidl::internal::EncodeTransactionalMessageWithoutValidating(
      ::fidl::Encoder& encoder, Payload&& payload)
      -> ::fidl::HLCPPOutgoingMessage;
  void EncodeWithoutValidating(::fidl::Encoder& encoder, size_t offset);

 public:
  struct Storage final {
    uint32_t x{};
    ::std::string y{};
  };

  BasicStruct(Storage storage) noexcept : storage_(std::move(storage)) {}
  BasicStruct(uint32_t x, ::std::string y) noexcept
      : storage_({.x = std::move(x), .y = std::move(y)}) {}
  BasicStruct() : BasicStruct(Storage{}) {}

  BasicStruct(BasicStruct&&) noexcept = default;
  BasicStruct& operator=(BasicStruct&&) noexcept = default;
  BasicStruct(const BasicStruct& other) noexcept
      : BasicStruct(other.CloneStorage()) {}
  BasicStruct& operator=(const BasicStruct& other) noexcept {
    storage_ = other.CloneStorage();
    return *this;
  }

  uint32_t x() const { return storage_.x; }

  uint32_t& x() { return storage_.x; }

  const ::std::string& y() const { return storage_.y; }

  ::std::string& y() { return storage_.y; }

 private:
  Storage storage_;
  Storage CloneStorage() const;
};

}  // namespace test_struct
namespace fidl {

#ifdef __Fuchsia__
extern "C" const fidl_type_t test_struct_SimpleTable;

template <>
struct IsFidlType<::test_struct::Simple> : public std::true_type {};

template <>
struct ::fidl::internal::TypeTraits<::test_struct::Simple> final {
 public:
  static constexpr const fidl_type_t* kCodingTable = &test_struct_SimpleTable;
};

template <>
struct CodingTraits<::test_struct::Simple> {
  static constexpr size_t inline_size_v1_no_ee = 2;
  static constexpr size_t inline_size_v2 = 2;

  template <class EncoderImpl>
  static void Encode(
      EncoderImpl* encoder, ::test_struct::Simple* value, size_t offset,
      cpp17::optional<HandleInformation> maybe_handle_info = cpp17::nullopt) {
    [[maybe_unused]] uint32_t field_offset;
    field_offset =
        encoder->wire_format() == ::fidl::internal::WireFormatVersion::kV1 ? 0
                                                                           : 0;
    ::fidl::Encode(encoder, &value->storage_.f1, offset + field_offset);
    field_offset =
        encoder->wire_format() == ::fidl::internal::WireFormatVersion::kV1 ? 1
                                                                           : 1;
    ::fidl::Encode(encoder, &value->storage_.f2, offset + field_offset);
  }

  template <typename DecoderImpl>
  static void Decode(DecoderImpl* decoder, ::test_struct::Simple* value,
                     size_t offset) {
    ::fidl::Decode(decoder, &value->storage_.f1, offset + 0);
    ::fidl::Decode(decoder, &value->storage_.f2, offset + 1);
  }
};
#endif  // __Fuchsia__

#ifdef __Fuchsia__
extern "C" const fidl_type_t test_struct_BasicStructTable;

template <>
struct IsFidlType<::test_struct::BasicStruct> : public std::true_type {};

template <>
struct ::fidl::internal::TypeTraits<::test_struct::BasicStruct> final {
 public:
  static constexpr const fidl_type_t* kCodingTable =
      &test_struct_BasicStructTable;
};

template <>
struct CodingTraits<::test_struct::BasicStruct> {
  static constexpr size_t inline_size_v1_no_ee = 24;
  static constexpr size_t inline_size_v2 = 24;

  template <class EncoderImpl>
  static void Encode(
      EncoderImpl* encoder, ::test_struct::BasicStruct* value, size_t offset,
      cpp17::optional<HandleInformation> maybe_handle_info = cpp17::nullopt) {
    [[maybe_unused]] uint32_t field_offset;
    field_offset =
        encoder->wire_format() == ::fidl::internal::WireFormatVersion::kV1 ? 0
                                                                           : 0;
    ::fidl::Encode(encoder, &value->storage_.x, offset + field_offset);
    field_offset =
        encoder->wire_format() == ::fidl::internal::WireFormatVersion::kV1 ? 8
                                                                           : 8;
    ::fidl::Encode(encoder, &value->storage_.y, offset + field_offset);
  }

  template <typename DecoderImpl>
  static void Decode(DecoderImpl* decoder, ::test_struct::BasicStruct* value,
                     size_t offset) {
    ::fidl::Decode(decoder, &value->storage_.x, offset + 0);
    ::fidl::Decode(decoder, &value->storage_.y, offset + 8);
  }
};
#endif  // __Fuchsia__

}  // namespace fidl
