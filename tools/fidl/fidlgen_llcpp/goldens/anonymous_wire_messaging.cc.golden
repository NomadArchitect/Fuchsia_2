// WARNING: This file is machine generated by fidlgen.

#include <fidl/fidl.test.anonymous/cpp/wire_messaging.h>

#include <memory>

namespace fidl_test_anonymous {
[[maybe_unused]] constexpr uint64_t kSomeProtocol_SomeMethod_Ordinal =
    8941579241812366574lu;

extern "C" const fidl_type_t
    fidl_test_anonymous_SomeProtocolSomeMethodRequestTable;

extern "C" const fidl_type_t
    fidl_test_anonymous_SomeProtocolSomeMethodResponseTable;
#ifdef __Fuchsia__
}  // namespace fidl_test_anonymous
::fidl::WireResult<::fidl_test_anonymous::SomeProtocol::SomeMethod>::WireResult(
    ::fidl::UnownedClientEnd<::fidl_test_anonymous::SomeProtocol> client,
    ::fidl::WireRequest<::fidl_test_anonymous::SomeProtocol::SomeMethod>*
        request) {
  FIDL_INTERNAL_DISABLE_AUTO_VAR_INIT
  ::fidl::OwnedEncodedMessage<
      ::fidl::WireRequest<::fidl_test_anonymous::SomeProtocol::SomeMethod>>
      request_message(::fidl::internal::AllowUnownedInputRef{}, request);
  auto& outgoing = request_message.GetOutgoingMessage();
  outgoing.Call<
      ::fidl::WireResponse<::fidl_test_anonymous::SomeProtocol::SomeMethod>>(
      client.channel(), bytes_.data(), static_cast<uint32_t>(bytes_.size()));
  SetResult(outgoing);
}

::fidl::WireResult<::fidl_test_anonymous::SomeProtocol::SomeMethod>::WireResult(
    ::fidl::UnownedClientEnd<::fidl_test_anonymous::SomeProtocol> client,
    ::fidl::WireRequest<::fidl_test_anonymous::SomeProtocol::SomeMethod>*
        request,
    zx_time_t deadline) {
  FIDL_INTERNAL_DISABLE_AUTO_VAR_INIT
  ::fidl::OwnedEncodedMessage<
      ::fidl::WireRequest<::fidl_test_anonymous::SomeProtocol::SomeMethod>>
      request_message(::fidl::internal::AllowUnownedInputRef{}, request);
  auto& outgoing = request_message.GetOutgoingMessage();
  outgoing.Call<
      ::fidl::WireResponse<::fidl_test_anonymous::SomeProtocol::SomeMethod>>(
      client.channel(), bytes_.data(), static_cast<uint32_t>(bytes_.size()),
      fidl::CallOptions{.deadline = deadline});
  SetResult(outgoing);
}
namespace fidl_test_anonymous {
#endif  // __Fuchsia__

#ifdef __Fuchsia__
}  // namespace fidl_test_anonymous
::fidl::WireUnownedResult<::fidl_test_anonymous::SomeProtocol::SomeMethod>::
    WireUnownedResult(
        ::fidl::UnownedClientEnd<::fidl_test_anonymous::SomeProtocol>
            client_end,
        ::fidl::internal::AnyBufferAllocator& allocator,
        ::fidl::WireRequest<::fidl_test_anonymous::SomeProtocol::SomeMethod>*
            request) {
  constexpr uint32_t buffer_size = ::fidl::SyncClientMethodBufferSizeInChannel<
      ::fidl_test_anonymous::SomeProtocol::SomeMethod>();
  uint8_t* buffer = allocator.Allocate(buffer_size);
  if (!buffer) {
    ::fidl::Result::operator=(::fidl::Result::EncodeError(
        ZX_ERR_BUFFER_TOO_SMALL,
        ::fidl::internal::kCallerAllocatedBufferTooSmall));
    return;
  }
  constexpr uint32_t request_byte_capacity = ::fidl::MaxSizeInChannel<
      ::fidl::WireRequest<::fidl_test_anonymous::SomeProtocol::SomeMethod>,
      ::fidl::MessageDirection::kSending>();
  uint8_t* request_bytes = buffer;
  static_assert(buffer_size > request_byte_capacity);
  uint32_t response_byte_capacity = buffer_size - request_byte_capacity;
  uint8_t* response_bytes = &buffer[request_byte_capacity];

  ::fidl::UnownedEncodedMessage<
      ::fidl::WireRequest<::fidl_test_anonymous::SomeProtocol::SomeMethod>>
      request_message(request_bytes, request_byte_capacity, request);
  auto& outgoing = request_message.GetOutgoingMessage();
  outgoing.Call<
      ::fidl::WireResponse<::fidl_test_anonymous::SomeProtocol::SomeMethod>>(
      client_end.channel(), response_bytes, response_byte_capacity);
  bytes_ = response_bytes;
  ::fidl::Result::operator=(outgoing);
}
namespace fidl_test_anonymous {
#endif  // __Fuchsia__

}  // namespace fidl_test_anonymous
#ifdef __Fuchsia__

::fidl::WireResponseContext<
    ::fidl_test_anonymous::SomeProtocol::SomeMethod>::WireResponseContext()
    : ::fidl::internal::ResponseContext(
          ::fidl_test_anonymous::kSomeProtocol_SomeMethod_Ordinal) {}

::cpp17::optional<::fidl::UnbindInfo>
fidl::WireResponseContext<::fidl_test_anonymous::SomeProtocol::SomeMethod>::
    OnRawResult(::fidl::IncomingMessage&& msg,
                const internal::IncomingTransportContext* transport_context) {
  if (unlikely(!msg.ok())) {
    ::fidl::WireUnownedResult<::fidl_test_anonymous::SomeProtocol::SomeMethod>
        result{msg.error()};
    OnResult(result);
    return cpp17::nullopt;
  }
  ::fidl::DecodedMessage<
      ::fidl::WireResponse<::fidl_test_anonymous::SomeProtocol::SomeMethod>>
      decoded{std::move(msg)};
  ::fidl::Result maybe_error = decoded;
  ::fidl::WireUnownedResult<::fidl_test_anonymous::SomeProtocol::SomeMethod>
      result{std::move(decoded)};
  OnResult(result);
  if (unlikely(!maybe_error.ok())) {
    return ::fidl::UnbindInfo(maybe_error);
  }
  return cpp17::nullopt;
}
#endif  // __Fuchsia__

#ifdef __Fuchsia__

void fidl::internal::WireClientImpl<::fidl_test_anonymous::SomeProtocol>::
    SomeMethod(::fidl_test_anonymous::wire::UnionMember union_member,
               ::fidl_test_anonymous::wire::TableMember table_member,
               ::fidl::WireClientCallback<
                   ::fidl_test_anonymous::SomeProtocol::SomeMethod>
                   _cb) {
  using Callback = decltype(_cb);
  class ResponseContext final
      : public ::fidl::WireResponseContext<
            ::fidl_test_anonymous::SomeProtocol::SomeMethod> {
   public:
    ResponseContext(Callback cb) : cb_(std::move(cb)) {}

    void OnResult(
        ::fidl::WireUnownedResult<
            ::fidl_test_anonymous::SomeProtocol::SomeMethod>& result) override {
      cb_(result);
      delete this;
    }

   private:
    Callback cb_;
  };

  auto* _context = new ResponseContext(std::move(_cb));
  ::fidl::WireRequest<::fidl_test_anonymous::SomeProtocol::SomeMethod> _request{
      union_member, table_member};
  FIDL_INTERNAL_DISABLE_AUTO_VAR_INIT
  ::fidl::WireRequest<::fidl_test_anonymous::SomeProtocol::SomeMethod>::
      OwnedEncodedMessage _request_message(
          ::fidl::internal::AllowUnownedInputRef{}, &_request);
  ::fidl::internal::ClientBase::SendTwoWay(
      _request_message.GetOutgoingMessage(), _context);
}

void fidl::internal::WireClientImpl<::fidl_test_anonymous::SomeProtocol>::
    SomeMethod(
        ::fidl_test_anonymous::wire::UnionMember union_member,
        ::fidl_test_anonymous::wire::TableMember table_member,
        ::fit::callback<
            void(::fidl::WireResponse<
                 ::fidl_test_anonymous::SomeProtocol::SomeMethod>* response)>
            _cb) {
  using Callback = decltype(_cb);
  class ResponseContext final
      : public ::fidl::WireResponseContext<
            ::fidl_test_anonymous::SomeProtocol::SomeMethod> {
   public:
    ResponseContext(Callback cb) : cb_(std::move(cb)) {}

    void OnResult(
        ::fidl::WireUnownedResult<
            ::fidl_test_anonymous::SomeProtocol::SomeMethod>& result) override {
      if (result.ok()) {
        ::fidl::WireResponse<::fidl_test_anonymous::SomeProtocol::SomeMethod>*
            response = result.Unwrap();
        cb_(response);
      }
      delete this;
    }

   private:
    Callback cb_;
  };

  auto* _context = new ResponseContext(std::move(_cb));
  ::fidl::WireRequest<::fidl_test_anonymous::SomeProtocol::SomeMethod> _request{
      union_member, table_member};
  FIDL_INTERNAL_DISABLE_AUTO_VAR_INIT
  ::fidl::WireRequest<::fidl_test_anonymous::SomeProtocol::SomeMethod>::
      OwnedEncodedMessage _request_message(
          ::fidl::internal::AllowUnownedInputRef{}, &_request);
  ::fidl::internal::ClientBase::SendTwoWay(
      _request_message.GetOutgoingMessage(), _context);
}
void fidl::internal::WireClientImpl<::fidl_test_anonymous::SomeProtocol>::
    SomeMethod(::fidl::BufferSpan _request_buffer,
               ::fidl_test_anonymous::wire::UnionMember union_member,
               ::fidl_test_anonymous::wire::TableMember table_member,
               ::fidl::WireResponseContext<
                   ::fidl_test_anonymous::SomeProtocol::SomeMethod>* _context) {
  ::fidl::WireRequest<::fidl_test_anonymous::SomeProtocol::SomeMethod> _request{
      union_member, table_member};

  ::fidl::WireRequest<::fidl_test_anonymous::SomeProtocol::SomeMethod>::
      UnownedEncodedMessage _request_message(
          _request_buffer.data, _request_buffer.capacity, &_request);
  ::fidl::internal::ClientBase::SendTwoWay(
      _request_message.GetOutgoingMessage(), _context);
}
::fidl::WireResult<::fidl_test_anonymous::SomeProtocol::SomeMethod>
fidl::internal::WireClientImpl<::fidl_test_anonymous::SomeProtocol>::
    SomeMethod_Sync(::fidl_test_anonymous::wire::UnionMember union_member,
                    ::fidl_test_anonymous::wire::TableMember table_member) {
  return ::fidl::internal::ClientBase::MakeSyncCallWith(
      [&](std::shared_ptr<::fidl::internal::AnyTransport> _transport) {
        ::fidl::WireRequest<::fidl_test_anonymous::SomeProtocol::SomeMethod>
            _request{union_member, table_member};
        return ::fidl::WireResult<
            ::fidl_test_anonymous::SomeProtocol::SomeMethod>(
            ::fidl::UnownedClientEnd<::fidl_test_anonymous::SomeProtocol>(
                _transport->get<fidl::internal::ChannelTransport>()),
            &_request);
      });
}
::fidl::WireUnownedResult<::fidl_test_anonymous::SomeProtocol::SomeMethod>
fidl::internal::WireClientImpl<::fidl_test_anonymous::SomeProtocol>::
    SomeMethod_Sync(::fidl::BufferSpan _buffer_span,
                    ::fidl_test_anonymous::wire::UnionMember union_member,
                    ::fidl_test_anonymous::wire::TableMember table_member) {
  auto _allocator = ::fidl::internal::MakeAnyBufferAllocator(_buffer_span);
  return ::fidl::internal::ClientBase::MakeSyncCallWith(
      [&](std::shared_ptr<::fidl::internal::AnyTransport> _transport) {
        ::fidl::WireRequest<::fidl_test_anonymous::SomeProtocol::SomeMethod>
            _request{union_member, table_member};
        return ::fidl::WireUnownedResult<
            ::fidl_test_anonymous::SomeProtocol::SomeMethod>(
            ::fidl::UnownedClientEnd<::fidl_test_anonymous::SomeProtocol>(
                _transport->get<fidl::internal::ChannelTransport>()),
            _allocator, &_request);
      });
}

std::optional<::fidl::UnbindInfo> fidl::internal::
    WireClientImpl<::fidl_test_anonymous::SomeProtocol>::DispatchEvent(
        fidl::IncomingMessage& msg,
        ::fidl::internal::AsyncEventHandler* maybe_event_handler,
        const internal::IncomingTransportContext* transport_context) {
  return ::fidl::UnbindInfo::UnknownOrdinal();
}
#endif  // __Fuchsia__

#ifdef __Fuchsia__

constexpr ::fidl::internal::MethodEntry fidl::internal::WireServerDispatcher<
    ::fidl_test_anonymous::SomeProtocol>::entries_[] = {
    {
        ::fidl_test_anonymous::kSomeProtocol_SomeMethod_Ordinal,
        [](void* interface, ::fidl::IncomingMessage&& msg,
           ::fidl::Transaction* txn) {
          ::fidl::DecodedMessage<::fidl::WireRequest<
              ::fidl_test_anonymous::SomeProtocol::SomeMethod>>
              decoded{std::move(msg)};
          if (unlikely(!decoded.ok())) {
            return decoded.status();
          }
          auto* primary = decoded.PrimaryObject();
          ::fidl::internal::WireCompleter<
              ::fidl_test_anonymous::SomeProtocol::SomeMethod>::Sync
              completer(txn);
          reinterpret_cast<
              ::fidl::WireServer<::fidl_test_anonymous::SomeProtocol>*>(
              interface)
              ->SomeMethod(primary, completer);
          return ZX_OK;
        },
    },
};

const ::fidl::internal::MethodEntry* fidl::internal::WireServerDispatcher<
    ::fidl_test_anonymous::SomeProtocol>::entries_end_ = &entries_[1];

::fidl::DispatchResult fidl::internal::
    WireServerDispatcher<::fidl_test_anonymous::SomeProtocol>::TryDispatch(
        ::fidl::WireServer<::fidl_test_anonymous::SomeProtocol>* impl,
        ::fidl::IncomingMessage& msg, ::fidl::Transaction* txn) {
  return ::fidl::internal::TryDispatch(impl, msg, txn, entries_, entries_end_);
}

void fidl::internal::WireServerDispatcher<::fidl_test_anonymous::SomeProtocol>::
    Dispatch(::fidl::WireServer<::fidl_test_anonymous::SomeProtocol>* impl,
             ::fidl::IncomingMessage&& msg, ::fidl::Transaction* txn) {
  ::fidl::internal::Dispatch(impl, msg, txn, entries_, entries_end_);
}
void fidl::WireServer<::fidl_test_anonymous::SomeProtocol>::dispatch_message(
    ::fidl::IncomingMessage&& msg, ::fidl::Transaction* txn,
    const ::fidl::internal::IncomingTransportContext* transport_context) {
  ::fidl::internal::WireServerDispatcher<
      ::fidl_test_anonymous::SomeProtocol>::Dispatch(this, std::move(msg), txn);
}
#endif  // __Fuchsia__

#ifdef __Fuchsia__
::fidl::Result fidl::internal::
    WireCompleterBase<::fidl_test_anonymous::SomeProtocol::SomeMethod>::Reply(
        ::fidl_test_anonymous::wire::SomeProtocolSomeMethodResult result) {
  ::fidl::WireResponse<::fidl_test_anonymous::SomeProtocol::SomeMethod>
      _response{result};
  FIDL_INTERNAL_DISABLE_AUTO_VAR_INIT
  ::fidl::OwnedEncodedMessage<
      ::fidl::WireResponse<::fidl_test_anonymous::SomeProtocol::SomeMethod>>
      _response_message{::fidl::internal::AllowUnownedInputRef{}, &_response};
  return ::fidl::internal::WireCompleterBase<
      ::fidl_test_anonymous::SomeProtocol::SomeMethod>::
      SendReply(&_response_message.GetOutgoingMessage());
}
::fidl::Result fidl::internal::WireCompleterBase<
    ::fidl_test_anonymous::SomeProtocol::SomeMethod>::
    ReplySuccess(::fidl_test_anonymous::wire::BitsMember bits_member) {
  ::fidl_test_anonymous::wire::SomeProtocolSomeMethodResponse _response;
  _response.bits_member = std::move(bits_member);
  return Reply(
      ::fidl_test_anonymous::wire::SomeProtocolSomeMethodResult::WithResponse(
          std::move(_response)));
}

::fidl::Result fidl::internal::WireCompleterBase<
    ::fidl_test_anonymous::SomeProtocol::SomeMethod>::
    ReplyError(::fidl_test_anonymous::wire::SomeProtocolSomeMethodError error) {
  return Reply(
      ::fidl_test_anonymous::wire::SomeProtocolSomeMethodResult::WithErr(
          std::move(error)));
}

::fidl::Result fidl::internal::
    WireCompleterBase<::fidl_test_anonymous::SomeProtocol::SomeMethod>::Reply(
        ::fidl::BufferSpan _buffer,
        ::fidl_test_anonymous::wire::SomeProtocolSomeMethodResult result) {
  ::fidl::WireResponse<::fidl_test_anonymous::SomeProtocol::SomeMethod>
      _response{result};
  ::fidl::WireResponse<::fidl_test_anonymous::SomeProtocol::SomeMethod>::
      UnownedEncodedMessage _response_message(_buffer.data, _buffer.capacity,
                                              &_response);
  return CompleterBase::SendReply(&_response_message.GetOutgoingMessage());
}
::fidl::Result fidl::internal::WireCompleterBase<
    ::fidl_test_anonymous::SomeProtocol::SomeMethod>::
    ReplySuccess(::fidl::BufferSpan _buffer,
                 ::fidl_test_anonymous::wire::BitsMember bits_member) {
  ::fidl_test_anonymous::wire::SomeProtocolSomeMethodResponse response;
  response.bits_member = std::move(bits_member);
  return Reply(
      std::move(_buffer),
      ::fidl_test_anonymous::wire::SomeProtocolSomeMethodResult::WithResponse(
          std::move(response)));
}
#endif  // __Fuchsia__

void ::fidl::WireRequest<
    ::fidl_test_anonymous::SomeProtocol::SomeMethod>::_InitHeader() {
  fidl_init_txn_header(&_hdr, 0,
                       ::fidl_test_anonymous::kSomeProtocol_SomeMethod_Ordinal);
}

void ::fidl::WireResponse<
    ::fidl_test_anonymous::SomeProtocol::SomeMethod>::_InitHeader() {
  fidl_init_txn_header(&_hdr, 0,
                       ::fidl_test_anonymous::kSomeProtocol_SomeMethod_Ordinal);
}

#ifdef __Fuchsia__

#endif  // __Fuchsia__
