// WARNING: This file is machine generated by fidlgen.

#pragma once

#include <lib/fidl/llcpp/array.h>
#include <lib/fidl/llcpp/coding.h>
#include <lib/fidl/llcpp/envelope.h>
#include <lib/fidl/llcpp/message.h>
#include <lib/fidl/llcpp/message_storage.h>
#include <lib/fidl/llcpp/object_view.h>
#include <lib/fidl/llcpp/string_view.h>
#include <lib/fidl/llcpp/traits.h>
#include <lib/fidl/llcpp/wire_types.h>
#include <lib/stdcompat/optional.h>

#include <cinttypes>
#ifdef __Fuchsia__

#endif  // __Fuchsia__

#include <fidl/test.byteandbytes/cpp/common_types.h>
#include <fidl/test.byteandbytes/cpp/markers.h>

namespace test_byteandbytes {
namespace wire {
struct ByteAndBytes;

extern "C" const fidl_type_t test_byteandbytes_ByteAndBytesTable;

struct ByteAndBytes {
  static constexpr const fidl_type_t* Type =
      &test_byteandbytes_ByteAndBytesTable;
  static constexpr uint32_t MaxNumHandles = 0;
  static constexpr uint32_t PrimarySize = 56;
  static constexpr uint32_t PrimarySizeV1 = 56;
  [[maybe_unused]] static constexpr uint32_t MaxOutOfLine = 4294967295;
  static constexpr uint32_t MaxOutOfLineV1 = 4294967295;
  static constexpr bool HasPointer = true;

  uint8_t single_byte = {};

  ::fidl::VectorView<uint8_t> many_bytes = {};

  ::fidl::VectorView<uint8_t> only_one_k_bytes = {};

  ::fidl::VectorView<uint8_t> opt_only_one_k_bytes = {};

  class UnownedEncodedMessage;
  class OwnedEncodedMessage;
  class DecodedMessage;
};

}  // namespace wire
}  // namespace test_byteandbytes
namespace fidl {

template <>
struct IsFidlType<::test_byteandbytes::wire::ByteAndBytes>
    : public std::true_type {};
template <>
struct IsStruct<::test_byteandbytes::wire::ByteAndBytes>
    : public std::true_type {};
static_assert(
    std::is_standard_layout_v<::test_byteandbytes::wire::ByteAndBytes>);
static_assert(offsetof(::test_byteandbytes::wire::ByteAndBytes, single_byte) ==
              0);
static_assert(offsetof(::test_byteandbytes::wire::ByteAndBytes, many_bytes) ==
              8);
static_assert(offsetof(::test_byteandbytes::wire::ByteAndBytes,
                       only_one_k_bytes) == 24);
static_assert(offsetof(::test_byteandbytes::wire::ByteAndBytes,
                       opt_only_one_k_bytes) == 40);
static_assert(sizeof(::test_byteandbytes::wire::ByteAndBytes) ==
              ::test_byteandbytes::wire::ByteAndBytes::PrimarySize);

}  // namespace fidl
