// WARNING: This file is machine generated by fidlgen.

#include <fidl/fidl.test.driveroneway/cpp/driver/wire_messaging.h>

#include <memory>

namespace fidl_test_driveroneway {
[[maybe_unused]] constexpr uint64_t kOneWay_Send_Ordinal =
    4532960833911862287lu;

extern "C" const fidl_type_t
    fidl_test_driveroneway_OneWaySendRequestMessageTable;

extern "C" const fidl_type_t
    fidl_test_driveroneway_OneWaySendResponseMessageTable;
#ifdef __Fuchsia__
}  // namespace fidl_test_driveroneway
::fidl::WireResult<::fidl_test_driveroneway::OneWay::Send>::WireResult(
    ::fidl::UnownedClientEnd<::fidl_test_driveroneway::OneWay> client,
    ::fidl::WireRequest<::fidl_test_driveroneway::OneWay::Send>* request) {
  FIDL_INTERNAL_DISABLE_AUTO_VAR_INIT
  ::fidl::OwnedEncodedMessage<
      ::fidl::WireRequest<::fidl_test_driveroneway::OneWay::Send>>
      request_message(::fidl::internal::AllowUnownedInputRef{}, request);
  auto& outgoing = request_message.GetOutgoingMessage();
  outgoing.Write(client.channel());
  SetResult(outgoing);
}
namespace fidl_test_driveroneway {
#endif  // __Fuchsia__

#ifdef __Fuchsia__
}  // namespace fidl_test_driveroneway
::fidl::WireUnownedResult<::fidl_test_driveroneway::OneWay::Send>::
    WireUnownedResult(
        ::fidl::UnownedClientEnd<::fidl_test_driveroneway::OneWay> client_end,
        ::fidl::internal::AnyBufferAllocator& allocator,
        ::fidl::WireRequest<::fidl_test_driveroneway::OneWay::Send>* request) {
  constexpr uint32_t buffer_size = ::fidl::SyncClientMethodBufferSizeInChannel<
      ::fidl_test_driveroneway::OneWay::Send>();
  uint8_t* buffer = allocator.Allocate(buffer_size);
  if (!buffer) {
    ::fidl::Result::operator=(::fidl::Result::EncodeError(
        ZX_ERR_BUFFER_TOO_SMALL,
        ::fidl::internal::kCallerAllocatedBufferTooSmall));
    return;
  }
  uint32_t request_byte_capacity = buffer_size;
  uint8_t* request_bytes = buffer;

  ::fidl::UnownedEncodedMessage<
      ::fidl::WireRequest<::fidl_test_driveroneway::OneWay::Send>>
      request_message(request_bytes, request_byte_capacity, request);
  auto& outgoing = request_message.GetOutgoingMessage();
  outgoing.Write(client_end.channel());
  ::fidl::Result::operator=(outgoing);
}
namespace fidl_test_driveroneway {
#endif  // __Fuchsia__

}  // namespace fidl_test_driveroneway
#ifdef __Fuchsia__

::fidl::Result
fidl::internal::WireClientImpl<::fidl_test_driveroneway::OneWay>::Send(
    const ::fidl_test_driveroneway::wire::Payload& payload) {
  FIDL_INTERNAL_DISABLE_AUTO_VAR_INIT
  ::fidl::WireRequest<::fidl_test_driveroneway::OneWay::Send> _request_object{
      payload};
  ::fidl::OwnedEncodedMessage<
      ::fidl::WireRequest<::fidl_test_driveroneway::OneWay::Send>>
      _request_message(::fidl::internal::AllowUnownedInputRef{},
                       &_request_object);
  return ::fidl::internal::ClientBase::SendOneWay(
      _request_message.GetOutgoingMessage());
}
::fidl::Result
fidl::internal::WireClientImpl<::fidl_test_driveroneway::OneWay>::Send(
    ::fidl::BufferSpan _buffer_span,
    const ::fidl_test_driveroneway::wire::Payload& payload) {
  ::fidl::WireRequest<::fidl_test_driveroneway::OneWay::Send> _request_object{
      payload};
  ::fidl::UnownedEncodedMessage<
      ::fidl::WireRequest<::fidl_test_driveroneway::OneWay::Send>>
      _request_message(_buffer_span.data, _buffer_span.capacity,
                       &_request_object);
  return ::fidl::internal::ClientBase::SendOneWay(
      _request_message.GetOutgoingMessage());
}
#endif  // __Fuchsia__

#ifdef __Fuchsia__

::fidl::Result
fidl::WireSyncEventHandler<::fidl_test_driveroneway::OneWay>::HandleOneEvent(
    ::fidl::UnownedClientEnd<::fidl_test_driveroneway::OneWay> client_end) {
  zx_status_t status = client_end.channel()->wait_one(
      ZX_CHANNEL_READABLE | ZX_CHANNEL_PEER_CLOSED, ::zx::time::infinite(),
      nullptr);
  if (status != ZX_OK) {
    return ::fidl::Result::TransportError(
        status, ::fidl::internal::kErrorWaitOneFailed);
  }
  constexpr uint32_t kHandleAllocSize = ([]() constexpr {
    uint32_t x = 0;
    if (x > ZX_CHANNEL_MAX_MSG_HANDLES) {
      x = ZX_CHANNEL_MAX_MSG_HANDLES;
    }
    return x;
  })();
  static_assert(kHandleAllocSize <= ZX_CHANNEL_MAX_MSG_HANDLES);
  ::fidl::internal::InlineMessageBuffer<0> read_storage;
  std::array<zx_handle_t, kHandleAllocSize> read_handles;
  // TODO(fxbug.dev/85734) Remove this channel-specific allocation.
  std::array<fidl_channel_handle_metadata_t, kHandleAllocSize>
      read_handle_metadata;
  ::fidl::IncomingMessage msg = ::fidl::MessageRead(
      zx::unowned_channel(client_end.handle()), read_storage.view(),
      read_handles.data(), read_handle_metadata.data(), kHandleAllocSize,
      ReadOptions{.discardable = true});
  if (msg.status() == ZX_ERR_BUFFER_TOO_SMALL) {
    // Message size is unexpectedly larger than calculated.
    // This can only be due to a newer version of the protocol defining a new
    // event, whose size exceeds the maximum of known events in the current
    // protocol.
    return ::fidl::Result::UnexpectedMessage(Unknown());
  }
  if (!msg.ok()) {
    return msg;
  }
  fidl_message_header_t* hdr = msg.header();
  switch (hdr->ordinal) {
    default: {
      return ::fidl::Result::UnexpectedMessage(Unknown());
    }
  }
}

std::optional<::fidl::UnbindInfo> fidl::internal::
    WireEventDispatcher<::fidl_test_driveroneway::OneWay>::DispatchEvent(
        fidl::IncomingMessage& msg,
        internal::IncomingTransportContext* transport_context) {
  switch (msg.header()->ordinal) {
    default:
      break;
  }
  return ::fidl::UnbindInfo::UnknownOrdinal();
}
#endif  // __Fuchsia__

#ifdef __Fuchsia__

constexpr ::fidl::internal::MethodEntry fidl::internal::WireServerDispatcher<
    ::fidl_test_driveroneway::OneWay>::entries_[] = {
    {
        ::fidl_test_driveroneway::kOneWay_Send_Ordinal,
        [](void* interface, ::fidl::IncomingMessage&& msg,
           ::fidl::Transaction* txn) {
          ::fidl::DecodedMessage<
              ::fidl::WireRequest<::fidl_test_driveroneway::OneWay::Send>>
              decoded{std::move(msg)};
          if (unlikely(!decoded.ok())) {
            return decoded.status();
          }
          auto* primary = decoded.PrimaryObject();
          ::fidl::internal::WireCompleter<
              ::fidl_test_driveroneway::OneWay::Send>::Sync completer(txn);
          reinterpret_cast<
              ::fidl::WireServer<::fidl_test_driveroneway::OneWay>*>(interface)
              ->Send(primary, completer);
          return ZX_OK;
        },
    },
};

const ::fidl::internal::MethodEntry* fidl::internal::WireServerDispatcher<
    ::fidl_test_driveroneway::OneWay>::entries_end_ = &entries_[1];

::fidl::DispatchResult fidl::internal::
    WireServerDispatcher<::fidl_test_driveroneway::OneWay>::TryDispatch(
        ::fidl::WireServer<::fidl_test_driveroneway::OneWay>* impl,
        ::fidl::IncomingMessage& msg, ::fidl::Transaction* txn) {
  return ::fidl::internal::TryDispatch(impl, msg, txn, entries_, entries_end_);
}

void fidl::internal::WireServerDispatcher<::fidl_test_driveroneway::OneWay>::
    Dispatch(::fidl::WireServer<::fidl_test_driveroneway::OneWay>* impl,
             ::fidl::IncomingMessage&& msg, ::fidl::Transaction* txn) {
  ::fidl::internal::Dispatch(impl, msg, txn, entries_, entries_end_);
}
void fidl::WireServer<::fidl_test_driveroneway::OneWay>::dispatch_message(
    ::fidl::IncomingMessage&& msg, ::fidl::Transaction* txn,
    ::fidl::internal::IncomingTransportContext* transport_context) {
  ::fidl::internal::WireServerDispatcher<
      ::fidl_test_driveroneway::OneWay>::Dispatch(this, std::move(msg), txn);
}
#endif  // __Fuchsia__

void ::fidl::WireRequest<
    ::fidl_test_driveroneway::OneWay::Send>::_InitHeader() {
  fidl_init_txn_header(&_hdr, 0,
                       ::fidl_test_driveroneway::kOneWay_Send_Ordinal);
}

#ifdef __Fuchsia__

#endif  // __Fuchsia__
