// WARNING: This file is machine generated by fidlgen.

#include <fidl/fidl.test.inheritancewithrecursivedecl/cpp/wire_messaging.h>

#include <memory>

namespace fidl_test_inheritancewithrecursivedecl {
[[maybe_unused]] constexpr uint64_t kParent_First_Ordinal =
    3051519745671742363lu;

extern "C" const fidl_type_t
    fidl_test_inheritancewithrecursivedecl_ParentFirstRequestMessageTable;

extern "C" const fidl_type_t
    fidl_test_inheritancewithrecursivedecl_ParentFirstResponseMessageTable;
#ifdef __Fuchsia__
}  // namespace fidl_test_inheritancewithrecursivedecl
::fidl::WireResult<::fidl_test_inheritancewithrecursivedecl::Parent::First>::
    WireResult(
        ::fidl::UnownedClientEnd<
            ::fidl_test_inheritancewithrecursivedecl::Parent>
            client,
        ::fidl::WireRequest<
            ::fidl_test_inheritancewithrecursivedecl::Parent::First>* request) {
  FIDL_INTERNAL_DISABLE_AUTO_VAR_INIT
  ::fidl::OwnedEncodedMessage<::fidl::WireRequest<
      ::fidl_test_inheritancewithrecursivedecl::Parent::First>>
      request_message(::fidl::internal::AllowUnownedInputRef{}, request);
  auto& outgoing = request_message.GetOutgoingMessage();
  outgoing.Write(client.channel());
  SetResult(outgoing);
}
namespace fidl_test_inheritancewithrecursivedecl {
#endif  // __Fuchsia__

#ifdef __Fuchsia__
}  // namespace fidl_test_inheritancewithrecursivedecl
::fidl::WireUnownedResult<
    ::fidl_test_inheritancewithrecursivedecl::Parent::First>::
    WireUnownedResult(
        ::fidl::UnownedClientEnd<
            ::fidl_test_inheritancewithrecursivedecl::Parent>
            client_end,
        ::fidl::internal::AnyBufferAllocator& allocator,
        ::fidl::WireRequest<
            ::fidl_test_inheritancewithrecursivedecl::Parent::First>* request) {
  constexpr uint32_t buffer_size = ::fidl::SyncClientMethodBufferSizeInChannel<
      ::fidl_test_inheritancewithrecursivedecl::Parent::First>();
  uint8_t* buffer = allocator.Allocate(buffer_size);
  if (!buffer) {
    ::fidl::Result::operator=(::fidl::Result::EncodeError(
        ZX_ERR_BUFFER_TOO_SMALL,
        ::fidl::internal::kCallerAllocatedBufferTooSmall));
    return;
  }
  uint32_t request_byte_capacity = buffer_size;
  uint8_t* request_bytes = buffer;

  ::fidl::UnownedEncodedMessage<::fidl::WireRequest<
      ::fidl_test_inheritancewithrecursivedecl::Parent::First>>
      request_message(request_bytes, request_byte_capacity, request);
  auto& outgoing = request_message.GetOutgoingMessage();
  outgoing.Write(client_end.channel());
  ::fidl::Result::operator=(outgoing);
}
namespace fidl_test_inheritancewithrecursivedecl {
#endif  // __Fuchsia__

}  // namespace fidl_test_inheritancewithrecursivedecl
#ifdef __Fuchsia__

::fidl::Result fidl::internal::
    WireClientImpl<::fidl_test_inheritancewithrecursivedecl::Parent>::First(
        ::fidl::ServerEnd<::fidl_test_inheritancewithrecursivedecl::Parent>&&
            request) {
  FIDL_INTERNAL_DISABLE_AUTO_VAR_INIT
  ::fidl::WireRequest<::fidl_test_inheritancewithrecursivedecl::Parent::First>
      _request_object{std::move(request)};
  ::fidl::OwnedEncodedMessage<::fidl::WireRequest<
      ::fidl_test_inheritancewithrecursivedecl::Parent::First>>
      _request_message(::fidl::internal::AllowUnownedInputRef{},
                       &_request_object);
  return ::fidl::internal::ClientBase::SendOneWay(
      _request_message.GetOutgoingMessage());
}
::fidl::Result fidl::internal::
    WireClientImpl<::fidl_test_inheritancewithrecursivedecl::Parent>::First(
        ::fidl::BufferSpan _buffer_span,
        ::fidl::ServerEnd<::fidl_test_inheritancewithrecursivedecl::Parent>&&
            request) {
  ::fidl::WireRequest<::fidl_test_inheritancewithrecursivedecl::Parent::First>
      _request_object{std::move(request)};
  ::fidl::UnownedEncodedMessage<::fidl::WireRequest<
      ::fidl_test_inheritancewithrecursivedecl::Parent::First>>
      _request_message(_buffer_span.data, _buffer_span.capacity,
                       &_request_object);
  return ::fidl::internal::ClientBase::SendOneWay(
      _request_message.GetOutgoingMessage());
}

std::optional<::fidl::UnbindInfo> fidl::internal::WireClientImpl<
    ::fidl_test_inheritancewithrecursivedecl::Parent>::
    DispatchEvent(fidl::IncomingMessage& msg,
                  ::fidl::internal::AsyncEventHandler* maybe_event_handler) {
  return ::fidl::UnbindInfo::UnknownOrdinal();
}
#endif  // __Fuchsia__

#ifdef __Fuchsia__

constexpr ::fidl::internal::MethodEntry fidl::internal::WireServerDispatcher<
    ::fidl_test_inheritancewithrecursivedecl::Parent>::entries_[] = {
    {
        ::fidl_test_inheritancewithrecursivedecl::kParent_First_Ordinal,
        [](void* interface, ::fidl::IncomingMessage&& msg,
           ::fidl::Transaction* txn) {
          ::fidl::DecodedMessage<::fidl::WireRequest<
              ::fidl_test_inheritancewithrecursivedecl::Parent::First>>
              decoded{std::move(msg)};
          if (unlikely(!decoded.ok())) {
            return decoded.status();
          }
          auto* primary = decoded.PrimaryObject();
          ::fidl::internal::WireCompleter<
              ::fidl_test_inheritancewithrecursivedecl::Parent::First>::Sync
              completer(txn);
          reinterpret_cast<::fidl::WireServer<
              ::fidl_test_inheritancewithrecursivedecl::Parent>*>(interface)
              ->First(primary, completer);
          return ZX_OK;
        },
    },
};

const ::fidl::internal::MethodEntry* fidl::internal::WireServerDispatcher<
    ::fidl_test_inheritancewithrecursivedecl::Parent>::entries_end_ =
    &entries_[1];

::fidl::DispatchResult fidl::internal::WireServerDispatcher<
    ::fidl_test_inheritancewithrecursivedecl::Parent>::
    TryDispatch(::fidl::WireServer<
                    ::fidl_test_inheritancewithrecursivedecl::Parent>* impl,
                ::fidl::IncomingMessage& msg, ::fidl::Transaction* txn) {
  return ::fidl::internal::TryDispatch(impl, msg, txn, entries_, entries_end_);
}

void fidl::internal::WireServerDispatcher<
    ::fidl_test_inheritancewithrecursivedecl::Parent>::
    Dispatch(::fidl::WireServer<
                 ::fidl_test_inheritancewithrecursivedecl::Parent>* impl,
             ::fidl::IncomingMessage&& msg, ::fidl::Transaction* txn) {
  ::fidl::internal::Dispatch(impl, msg, txn, entries_, entries_end_);
}
void fidl::WireServer<::fidl_test_inheritancewithrecursivedecl::Parent>::
    dispatch_message(fidl::IncomingMessage&& msg, ::fidl::Transaction* txn) {
  ::fidl::internal::WireServerDispatcher<
      ::fidl_test_inheritancewithrecursivedecl::Parent>::Dispatch(this,
                                                                  std::move(
                                                                      msg),
                                                                  txn);
}
#endif  // __Fuchsia__

#ifdef __Fuchsia__

void ::fidl::WireRequest<
    ::fidl_test_inheritancewithrecursivedecl::Parent::First>::_InitHeader() {
  fidl_init_txn_header(
      &_hdr, 0,
      ::fidl_test_inheritancewithrecursivedecl::kParent_First_Ordinal);
}

void ::fidl::WireRequest<
    ::fidl_test_inheritancewithrecursivedecl::Parent::First>::_CloseHandles() {
  request.reset();
}
#endif  // __Fuchsia__

#ifdef __Fuchsia__

#endif  // __Fuchsia__

namespace fidl_test_inheritancewithrecursivedecl {
[[maybe_unused]] constexpr uint64_t kChild_First_Ordinal =
    3051519745671742363lu;

extern "C" const fidl_type_t
    fidl_test_inheritancewithrecursivedecl_ChildFirstRequestMessageTable;

extern "C" const fidl_type_t
    fidl_test_inheritancewithrecursivedecl_ChildFirstResponseMessageTable;

[[maybe_unused]] constexpr uint64_t kChild_Second_Ordinal =
    489667253787160198lu;

extern "C" const fidl_type_t
    fidl_test_inheritancewithrecursivedecl_ChildSecondRequestMessageTable;

extern "C" const fidl_type_t
    fidl_test_inheritancewithrecursivedecl_ChildSecondResponseMessageTable;
#ifdef __Fuchsia__
}  // namespace fidl_test_inheritancewithrecursivedecl
::fidl::WireResult<::fidl_test_inheritancewithrecursivedecl::Child::First>::
    WireResult(
        ::fidl::UnownedClientEnd<
            ::fidl_test_inheritancewithrecursivedecl::Child>
            client,
        ::fidl::WireRequest<
            ::fidl_test_inheritancewithrecursivedecl::Child::First>* request) {
  FIDL_INTERNAL_DISABLE_AUTO_VAR_INIT
  ::fidl::OwnedEncodedMessage<::fidl::WireRequest<
      ::fidl_test_inheritancewithrecursivedecl::Child::First>>
      request_message(::fidl::internal::AllowUnownedInputRef{}, request);
  auto& outgoing = request_message.GetOutgoingMessage();
  outgoing.Write(client.channel());
  SetResult(outgoing);
}
namespace fidl_test_inheritancewithrecursivedecl {
#endif  // __Fuchsia__

#ifdef __Fuchsia__
}  // namespace fidl_test_inheritancewithrecursivedecl
::fidl::WireUnownedResult<
    ::fidl_test_inheritancewithrecursivedecl::Child::First>::
    WireUnownedResult(
        ::fidl::UnownedClientEnd<
            ::fidl_test_inheritancewithrecursivedecl::Child>
            client_end,
        ::fidl::internal::AnyBufferAllocator& allocator,
        ::fidl::WireRequest<
            ::fidl_test_inheritancewithrecursivedecl::Child::First>* request) {
  constexpr uint32_t buffer_size = ::fidl::SyncClientMethodBufferSizeInChannel<
      ::fidl_test_inheritancewithrecursivedecl::Child::First>();
  uint8_t* buffer = allocator.Allocate(buffer_size);
  if (!buffer) {
    ::fidl::Result::operator=(::fidl::Result::EncodeError(
        ZX_ERR_BUFFER_TOO_SMALL,
        ::fidl::internal::kCallerAllocatedBufferTooSmall));
    return;
  }
  uint32_t request_byte_capacity = buffer_size;
  uint8_t* request_bytes = buffer;

  ::fidl::UnownedEncodedMessage<::fidl::WireRequest<
      ::fidl_test_inheritancewithrecursivedecl::Child::First>>
      request_message(request_bytes, request_byte_capacity, request);
  auto& outgoing = request_message.GetOutgoingMessage();
  outgoing.Write(client_end.channel());
  ::fidl::Result::operator=(outgoing);
}
namespace fidl_test_inheritancewithrecursivedecl {
#endif  // __Fuchsia__

#ifdef __Fuchsia__
}  // namespace fidl_test_inheritancewithrecursivedecl
::fidl::WireResult<::fidl_test_inheritancewithrecursivedecl::Child::Second>::
    WireResult(
        ::fidl::UnownedClientEnd<
            ::fidl_test_inheritancewithrecursivedecl::Child>
            client,
        ::fidl::WireRequest<
            ::fidl_test_inheritancewithrecursivedecl::Child::Second>* request) {
  FIDL_INTERNAL_DISABLE_AUTO_VAR_INIT
  ::fidl::OwnedEncodedMessage<::fidl::WireRequest<
      ::fidl_test_inheritancewithrecursivedecl::Child::Second>>
      request_message(::fidl::internal::AllowUnownedInputRef{}, request);
  auto& outgoing = request_message.GetOutgoingMessage();
  outgoing.Write(client.channel());
  SetResult(outgoing);
}
namespace fidl_test_inheritancewithrecursivedecl {
#endif  // __Fuchsia__

#ifdef __Fuchsia__
}  // namespace fidl_test_inheritancewithrecursivedecl
::fidl::WireUnownedResult<
    ::fidl_test_inheritancewithrecursivedecl::Child::Second>::
    WireUnownedResult(
        ::fidl::UnownedClientEnd<
            ::fidl_test_inheritancewithrecursivedecl::Child>
            client_end,
        ::fidl::internal::AnyBufferAllocator& allocator,
        ::fidl::WireRequest<
            ::fidl_test_inheritancewithrecursivedecl::Child::Second>* request) {
  constexpr uint32_t buffer_size = ::fidl::SyncClientMethodBufferSizeInChannel<
      ::fidl_test_inheritancewithrecursivedecl::Child::Second>();
  uint8_t* buffer = allocator.Allocate(buffer_size);
  if (!buffer) {
    ::fidl::Result::operator=(::fidl::Result::EncodeError(
        ZX_ERR_BUFFER_TOO_SMALL,
        ::fidl::internal::kCallerAllocatedBufferTooSmall));
    return;
  }
  uint32_t request_byte_capacity = buffer_size;
  uint8_t* request_bytes = buffer;

  ::fidl::UnownedEncodedMessage<::fidl::WireRequest<
      ::fidl_test_inheritancewithrecursivedecl::Child::Second>>
      request_message(request_bytes, request_byte_capacity, request);
  auto& outgoing = request_message.GetOutgoingMessage();
  outgoing.Write(client_end.channel());
  ::fidl::Result::operator=(outgoing);
}
namespace fidl_test_inheritancewithrecursivedecl {
#endif  // __Fuchsia__

}  // namespace fidl_test_inheritancewithrecursivedecl
#ifdef __Fuchsia__

::fidl::Result fidl::internal::
    WireClientImpl<::fidl_test_inheritancewithrecursivedecl::Child>::First(
        ::fidl::ServerEnd<::fidl_test_inheritancewithrecursivedecl::Parent>&&
            request) {
  FIDL_INTERNAL_DISABLE_AUTO_VAR_INIT
  ::fidl::WireRequest<::fidl_test_inheritancewithrecursivedecl::Child::First>
      _request_object{std::move(request)};
  ::fidl::OwnedEncodedMessage<::fidl::WireRequest<
      ::fidl_test_inheritancewithrecursivedecl::Child::First>>
      _request_message(::fidl::internal::AllowUnownedInputRef{},
                       &_request_object);
  return ::fidl::internal::ClientBase::SendOneWay(
      _request_message.GetOutgoingMessage());
}
::fidl::Result fidl::internal::
    WireClientImpl<::fidl_test_inheritancewithrecursivedecl::Child>::First(
        ::fidl::BufferSpan _buffer_span,
        ::fidl::ServerEnd<::fidl_test_inheritancewithrecursivedecl::Parent>&&
            request) {
  ::fidl::WireRequest<::fidl_test_inheritancewithrecursivedecl::Child::First>
      _request_object{std::move(request)};
  ::fidl::UnownedEncodedMessage<::fidl::WireRequest<
      ::fidl_test_inheritancewithrecursivedecl::Child::First>>
      _request_message(_buffer_span.data, _buffer_span.capacity,
                       &_request_object);
  return ::fidl::internal::ClientBase::SendOneWay(
      _request_message.GetOutgoingMessage());
}
::fidl::Result fidl::internal::
    WireClientImpl<::fidl_test_inheritancewithrecursivedecl::Child>::Second(
        ::fidl::ServerEnd<::fidl_test_inheritancewithrecursivedecl::Parent>&&
            request) {
  FIDL_INTERNAL_DISABLE_AUTO_VAR_INIT
  ::fidl::WireRequest<::fidl_test_inheritancewithrecursivedecl::Child::Second>
      _request_object{std::move(request)};
  ::fidl::OwnedEncodedMessage<::fidl::WireRequest<
      ::fidl_test_inheritancewithrecursivedecl::Child::Second>>
      _request_message(::fidl::internal::AllowUnownedInputRef{},
                       &_request_object);
  return ::fidl::internal::ClientBase::SendOneWay(
      _request_message.GetOutgoingMessage());
}
::fidl::Result fidl::internal::
    WireClientImpl<::fidl_test_inheritancewithrecursivedecl::Child>::Second(
        ::fidl::BufferSpan _buffer_span,
        ::fidl::ServerEnd<::fidl_test_inheritancewithrecursivedecl::Parent>&&
            request) {
  ::fidl::WireRequest<::fidl_test_inheritancewithrecursivedecl::Child::Second>
      _request_object{std::move(request)};
  ::fidl::UnownedEncodedMessage<::fidl::WireRequest<
      ::fidl_test_inheritancewithrecursivedecl::Child::Second>>
      _request_message(_buffer_span.data, _buffer_span.capacity,
                       &_request_object);
  return ::fidl::internal::ClientBase::SendOneWay(
      _request_message.GetOutgoingMessage());
}

std::optional<::fidl::UnbindInfo> fidl::internal::WireClientImpl<
    ::fidl_test_inheritancewithrecursivedecl::Child>::
    DispatchEvent(fidl::IncomingMessage& msg,
                  ::fidl::internal::AsyncEventHandler* maybe_event_handler) {
  return ::fidl::UnbindInfo::UnknownOrdinal();
}
#endif  // __Fuchsia__

#ifdef __Fuchsia__

constexpr ::fidl::internal::MethodEntry fidl::internal::WireServerDispatcher<
    ::fidl_test_inheritancewithrecursivedecl::Child>::entries_[] = {
    {
        ::fidl_test_inheritancewithrecursivedecl::kChild_First_Ordinal,
        [](void* interface, ::fidl::IncomingMessage&& msg,
           ::fidl::Transaction* txn) {
          ::fidl::DecodedMessage<::fidl::WireRequest<
              ::fidl_test_inheritancewithrecursivedecl::Child::First>>
              decoded{std::move(msg)};
          if (unlikely(!decoded.ok())) {
            return decoded.status();
          }
          auto* primary = decoded.PrimaryObject();
          ::fidl::internal::WireCompleter<
              ::fidl_test_inheritancewithrecursivedecl::Child::First>::Sync
              completer(txn);
          reinterpret_cast<::fidl::WireServer<
              ::fidl_test_inheritancewithrecursivedecl::Child>*>(interface)
              ->First(primary, completer);
          return ZX_OK;
        },
    },
    {
        ::fidl_test_inheritancewithrecursivedecl::kChild_Second_Ordinal,
        [](void* interface, ::fidl::IncomingMessage&& msg,
           ::fidl::Transaction* txn) {
          ::fidl::DecodedMessage<::fidl::WireRequest<
              ::fidl_test_inheritancewithrecursivedecl::Child::Second>>
              decoded{std::move(msg)};
          if (unlikely(!decoded.ok())) {
            return decoded.status();
          }
          auto* primary = decoded.PrimaryObject();
          ::fidl::internal::WireCompleter<
              ::fidl_test_inheritancewithrecursivedecl::Child::Second>::Sync
              completer(txn);
          reinterpret_cast<::fidl::WireServer<
              ::fidl_test_inheritancewithrecursivedecl::Child>*>(interface)
              ->Second(primary, completer);
          return ZX_OK;
        },
    },
};

const ::fidl::internal::MethodEntry* fidl::internal::WireServerDispatcher<
    ::fidl_test_inheritancewithrecursivedecl::Child>::entries_end_ =
    &entries_[2];

::fidl::DispatchResult fidl::internal::WireServerDispatcher<
    ::fidl_test_inheritancewithrecursivedecl::Child>::
    TryDispatch(::fidl::WireServer<
                    ::fidl_test_inheritancewithrecursivedecl::Child>* impl,
                ::fidl::IncomingMessage& msg, ::fidl::Transaction* txn) {
  return ::fidl::internal::TryDispatch(impl, msg, txn, entries_, entries_end_);
}

void fidl::internal::WireServerDispatcher<
    ::fidl_test_inheritancewithrecursivedecl::Child>::
    Dispatch(::fidl::WireServer<
                 ::fidl_test_inheritancewithrecursivedecl::Child>* impl,
             ::fidl::IncomingMessage&& msg, ::fidl::Transaction* txn) {
  ::fidl::internal::Dispatch(impl, msg, txn, entries_, entries_end_);
}
void fidl::WireServer<::fidl_test_inheritancewithrecursivedecl::Child>::
    dispatch_message(fidl::IncomingMessage&& msg, ::fidl::Transaction* txn) {
  ::fidl::internal::WireServerDispatcher<
      ::fidl_test_inheritancewithrecursivedecl::Child>::Dispatch(this,
                                                                 std::move(msg),
                                                                 txn);
}
#endif  // __Fuchsia__

#ifdef __Fuchsia__

void ::fidl::WireRequest<
    ::fidl_test_inheritancewithrecursivedecl::Child::First>::_InitHeader() {
  fidl_init_txn_header(
      &_hdr, 0, ::fidl_test_inheritancewithrecursivedecl::kChild_First_Ordinal);
}

void ::fidl::WireRequest<
    ::fidl_test_inheritancewithrecursivedecl::Child::First>::_CloseHandles() {
  request.reset();
}
#endif  // __Fuchsia__

#ifdef __Fuchsia__

void ::fidl::WireRequest<
    ::fidl_test_inheritancewithrecursivedecl::Child::Second>::_InitHeader() {
  fidl_init_txn_header(
      &_hdr, 0,
      ::fidl_test_inheritancewithrecursivedecl::kChild_Second_Ordinal);
}

void ::fidl::WireRequest<
    ::fidl_test_inheritancewithrecursivedecl::Child::Second>::_CloseHandles() {
  request.reset();
}
#endif  // __Fuchsia__

#ifdef __Fuchsia__

#endif  // __Fuchsia__
