library test.bindingsdenylist;

// This file tests that all the bindings respect BindingsDenylist, and that the
// attribute works on all declaration kinds. Each binding should include the
// AllBindings constant and one other declaration. The associations are chosen
// to make this work (e.g. libfuzzer needs to have a protocol, only certain
// bindings emit anything for an empty service, etc.).
@bindings_deny_list("there_are_no_bindings_with_this_name")
const AllBindings uint32 = 0;

@bindings_denylist("cpp, dart, go, hlcpp, libfuzzer, llcpp, rust")
type OnlySyzkaller = strict bits {
    A = 1;
};

@bindings_denylist("cpp, go, hlcpp, libfuzzer, llcpp, rust, syzkaller")
type OnlyDart = strict enum {
    A = 1;
};

@bindings_denylist("cpp, dart, hlcpp, libfuzzer, llcpp, rust, syzkaller")
type OnlyGo = struct {};

@bindings_denylist("cpp, dart, go, hlcpp, libfuzzer, llcpp, syzkaller")
type OnlyRust = table {};

@bindings_denylist("cpp, dart, go, hlcpp, libfuzzer, rust, syzkaller")
type OnlyLlcpp = strict union {
    1: x uint32;
};

// TODO(fxbug.dev/72247): Libfuzzer depends on hlcpp and llcpp. A decision needs to be made on how
// to manage these dependencies. For now, this test does not denylist the dependencies.
@bindings_denylist("cpp, dart, go, rust, syzkaller")
protocol OnlyLibfuzzerAndDeps {
    LibfuzzerNeedsNonemptyProtocol() -> ();
};

// TODO(fxbug.dev/72247): Unified C++ bindings depends on hlcpp and llcpp. A decision needs to be
// made on how to manage these dependencies. For now, this test does not denylist the dependencies.
@bindings_denylist("dart, go, libfuzzer, rust, syzkaller")
protocol OnlyCppAndDeps {};

@bindings_denylist("cpp, dart, go, libfuzzer, llcpp, rust, syzkaller")
service OnlyHlcpp {};
