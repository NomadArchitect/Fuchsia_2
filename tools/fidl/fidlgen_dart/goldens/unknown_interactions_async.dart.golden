// WARNING: This file is machine generated by fidlgen_dart.
// @dart = 2.12

library fidl_test_unknowninteractions_async;

import 'dart:async' as $async;
import 'dart:core' hide Set;
import 'dart:developer';
import 'dart:typed_data';

import 'package:fidl/fidl.dart' as $fidl;
import 'package:meta/meta.dart';
import 'package:zircon/zircon.dart' as $zircon;

// ignore_for_file: always_specify_types
// ignore_for_file: avoid_positional_boolean_parameters
// ignore_for_file: avoid_returning_null
// ignore_for_file: cascade_invocations
// ignore_for_file: constant_identifier_names
// ignore_for_file: directives_ordering
// ignore_for_file: one_member_abstracts
// ignore_for_file: prefer_constructors_over_static_methods
// ignore_for_file: prefer_single_quotes
// ignore_for_file: public_member_api_docs
// ignore_for_file: unused_import
// ignore_for_file: unused_local_variable
// ignore_for_file: non_constant_identifier_names
// ignore_for_file: library_prefixes
// ignore_for_file: prefer_typing_uninitialized_variables
// ignore_for_file: avoid_js_rounded_ints
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: always_put_required_named_parameters_first
// ignore_for_file: prefer_generic_function_type_aliases
// ignore_for_file: prefer_equal_for_default_values
// ignore_for_file: avoid_catches_without_on_clauses
// ignore_for_file: unused_shown_name
// ignore_for_file: unnecessary_lambdas
// ignore_for_file: comment_references
// ignore_for_file: avoid_unused_constructor_parameters
// ignore_for_file: prefer_interpolation_to_compose_strings

enum ExampleFlexibleTwoWayResultTag {
  response, // 0x1
  transportErr, // 0x3
}

const Map<int, ExampleFlexibleTwoWayResultTag>
    _ExampleFlexibleTwoWayResultTag_map = {
  1: ExampleFlexibleTwoWayResultTag.response,
  3: ExampleFlexibleTwoWayResultTag.transportErr,
};

class ExampleFlexibleTwoWayResult extends $fidl.Union {
  const ExampleFlexibleTwoWayResult.withResponse(
      ExampleFlexibleTwoWayResponse value)
      : _ordinal = 1,
        _data = value;

  const ExampleFlexibleTwoWayResult.withTransportErr(int value)
      : _ordinal = 3,
        _data = value;

  ExampleFlexibleTwoWayResult._(int ordinal, Object data)
      : _ordinal = ordinal,
        _data = data;

  final int _ordinal;
  final _data;

  ExampleFlexibleTwoWayResultTag get $tag =>
      _ExampleFlexibleTwoWayResultTag_map[_ordinal]!;

  ExampleFlexibleTwoWayResponse? get response {
    if (_ordinal != 1) {
      return null;
    }
    return _data;
  }

  int? get transportErr {
    if (_ordinal != 3) {
      return null;
    }
    return _data;
  }

  $fidl.UnknownRawData? get $unknownData {
    switch (_ordinal) {
      case 1:
      case 3:
        return null;
      default:
        return _data;
    }
  }

  @override
  int get $ordinal => _ordinal;

  @override
  Object get $data => _data;

  static ExampleFlexibleTwoWayResult _ctor(int ordinal, Object data) {
    return ExampleFlexibleTwoWayResult._(ordinal, data);
  }
}

// See fxbug.dev/7644:
// ignore: recursive_compile_time_constant
const $fidl.UnionType<ExampleFlexibleTwoWayResult>
    kExample_FlexibleTwoWay_Result_Type =
    $fidl.UnionType<ExampleFlexibleTwoWayResult>(
  members: <int, $fidl.FidlType>{
    1: kExample_FlexibleTwoWay_Response_Type,
    3: $fidl.Int32Type(),
  },
  ctor: ExampleFlexibleTwoWayResult._ctor,
  flexible: false,
  resource: false,
);
// See fxbug.dev/7644:
// ignore: recursive_compile_time_constant
const $fidl.NullableUnionType<ExampleFlexibleTwoWayResult>
    kExample_FlexibleTwoWay_Result_OptType =
    $fidl.NullableUnionType<ExampleFlexibleTwoWayResult>(
  members: <int, $fidl.FidlType>{
    1: kExample_FlexibleTwoWay_Response_Type,
    3: $fidl.Int32Type(),
  },
  ctor: ExampleFlexibleTwoWayResult._ctor,
  flexible: false,
  resource: false,
);

class ExampleFlexibleTwoWayResponse extends $fidl.Struct {
  const ExampleFlexibleTwoWayResponse({
    this.reserved: 0x0,
  });
  ExampleFlexibleTwoWayResponse.clone(
    ExampleFlexibleTwoWayResponse $orig, {
    int? reserved,
  }) : this(
          reserved: reserved ?? $orig.reserved,
        );

  ExampleFlexibleTwoWayResponse $cloneWith({
    int? reserved,
  }) {
    return ExampleFlexibleTwoWayResponse(
      reserved: reserved ?? this.reserved,
    );
  }

  final int reserved;

  @override
  List<Object?> get $fields {
    return <Object?>[
      reserved,
    ];
  }

  static const $fieldType0 = $fidl.Uint8Type();

  @override
  void $encode($fidl.Encoder $encoder, int $offset, int $depth) {
    $fieldType0.encode($encoder, reserved, $offset + 0, $depth);
  }

  static ExampleFlexibleTwoWayResponse _structDecode(
      $fidl.Decoder $decoder, int $offset, int $depth) {
    switch ($decoder.wireFormat) {
      case $fidl.WireFormat.v1:
      case $fidl.WireFormat.v2:
        $decoder.checkPadding($offset + 0, 1);
        return ExampleFlexibleTwoWayResponse(
            reserved: $fieldType0.decode($decoder, $offset + 0, $depth));
      default:
        throw $fidl.FidlError('unknown wire format');
    }
  }
}

// See fxbug.dev/7644:
// ignore: recursive_compile_time_constant
const $fidl.StructType<ExampleFlexibleTwoWayResponse>
    kExample_FlexibleTwoWay_Response_Type =
    $fidl.StructType<ExampleFlexibleTwoWayResponse>(
        inlineSize: 1,
        structDecode: ExampleFlexibleTwoWayResponse._structDecode);

// strictOneWay: ()
const int _kExample_StrictOneWay_Ordinal = 0x1f9937f425c8491a;
const $fidl.MethodType _kExample_StrictOneWay_Type = $fidl.MethodType(
  request: [],
  response: [],
  name: r"Example.StrictOneWay",
  requestInlineSizeV2: 0,
  responseInlineSizeV2: 0,
);
// flexibleOneWay: ()
const int _kExample_FlexibleOneWay_Ordinal = 0x200d2009e52a95b8;
const $fidl.MethodType _kExample_FlexibleOneWay_Type = $fidl.MethodType(
  request: [],
  response: [],
  name: r"Example.FlexibleOneWay",
  requestInlineSizeV2: 0,
  responseInlineSizeV2: 0,
);
// strictTwoWay: () -> ()
const int _kExample_StrictTwoWay_Ordinal = 0x3ee105dfeda54985;
const $fidl.MethodType _kExample_StrictTwoWay_Type = $fidl.MethodType(
  request: [],
  response: [],
  name: r"Example.StrictTwoWay",
  requestInlineSizeV2: 0,
  responseInlineSizeV2: 0,
);
// flexibleTwoWay: () -> ()
const int _kExample_FlexibleTwoWay_Ordinal = 0x7ddf3a4404acfa2c;
const $fidl.MethodType _kExample_FlexibleTwoWay_Type = $fidl.MethodType(
  request: [],
  response: <$fidl.MemberType>[
    $fidl.MemberType<ExampleFlexibleTwoWayResult>(
        type: kExample_FlexibleTwoWay_Result_Type, offset: 0),
  ],
  name: r"Example.FlexibleTwoWay",
  requestInlineSizeV2: 0,
  responseInlineSizeV2: 16,
);
// strictEvent:  -> ()
const int _kExample_StrictEvent_Ordinal = 0x28d6af569779dfe5;
const $fidl.MethodType _kExample_StrictEvent_Type = $fidl.MethodType(
  request: [],
  response: [],
  name: r"Example.StrictEvent",
  requestInlineSizeV2: 0,
  responseInlineSizeV2: 0,
);
// flexibleEvent:  -> ()
const int _kExample_FlexibleEvent_Ordinal = 0x1ca93992b923103a;
const $fidl.MethodType _kExample_FlexibleEvent_Type = $fidl.MethodType(
  request: [],
  response: [],
  name: r"Example.FlexibleEvent",
  requestInlineSizeV2: 0,
  responseInlineSizeV2: 0,
);

abstract class Example {
  $fidl.ServiceData? get $serviceData => ExampleData();
  $async.Future<void> strictOneWay();
  $async.Future<void> flexibleOneWay();
  $async.Future<void> strictTwoWay();
  $async.Future<void> flexibleTwoWay();
  $async.Stream<void>? get strictEvent;
  $async.Stream<void>? get flexibleEvent;
}

abstract class ExampleServer extends Example {
  $async.Future<void> $unknownOneWay(int ordinal);
  $async.Future<void> $unknownTwoWay(int ordinal);
}

// TODO: Remove ServiceData for non-service
class ExampleData implements $fidl.ServiceData<Example> {
  const ExampleData();

  @override
  String getName() {
    return "";
  }

  @override
  $fidl.AsyncBinding getBinding() {
    return ExampleBinding();
  }
}

class ExampleProxy extends $fidl.AsyncProxy<Example> implements Example {
  ExampleProxy()
      : super($fidl.AsyncProxyController<Example>($interfaceName: r'Example')) {
    ctrl.onResponse = _handleResponse;
    ctrl.whenClosed.then((_) {
      _strictEventEventStreamController.close();
      _flexibleEventEventStreamController.close();
      _$unknownEventStreamController.close();
    }, onError: (_) {});
  }
  @override
  Null get $serviceData => null;

  void _handleEvent($fidl.IncomingMessage $message) {
    switch ($message.ordinal) {
      case _kExample_StrictEvent_Ordinal:
        final String _name = _kExample_StrictEvent_Type.name;
        $fidl.performCtrlWithExceptionHandling(
            _name, ctrl, 'event', _strictEventEventStreamController.addError,
            () {
          final List<$fidl.MemberType> $types =
              _kExample_StrictEvent_Type.response!;
          // ignore: prefer_const_declarations
          final $response = null;

          _strictEventEventStreamController.add($response);
        });
        break;
      case _kExample_FlexibleEvent_Ordinal:
        final String _name = _kExample_FlexibleEvent_Type.name;
        $fidl.performCtrlWithExceptionHandling(
            _name, ctrl, 'event', _flexibleEventEventStreamController.addError,
            () {
          final List<$fidl.MemberType> $types =
              _kExample_FlexibleEvent_Type.response!;
          // ignore: prefer_const_declarations
          final $response = null;

          _flexibleEventEventStreamController.add($response);
        });
        break;
      default:
        switch ($message.strictness) {
          case $fidl.CallStrictness.flexible:
            const String _name = "Example [UnknownEvent]";
            $fidl.performCtrlWithExceptionHandling(
                _name, ctrl, 'event', _$unknownEventStreamController.addError,
                () {
              _$unknownEventStreamController
                  .add($fidl.UnknownEvent($message.ordinal));
            });
            break;
          case $fidl.CallStrictness.strict:
            ctrl.proxyError($fidl.FidlError(
                'Unexpected message ordinal: ${$message.ordinal}'));
            break;
        }
        break;
    }
  }

  void _handleResponse($fidl.IncomingMessage $message) {
    final int $txid = $message.txid;
    if ($txid == 0) {
      _handleEvent($message);
      return;
    }
    final $async.Completer? $completer = ctrl.getCompleter($txid);
    if ($completer == null) {
      $message.closeHandles();
      return;
    }
    switch ($message.ordinal) {
      case _kExample_StrictTwoWay_Ordinal:
        final String _name = _kExample_StrictTwoWay_Type.name;
        $fidl.performCtrlWithExceptionHandling(
            _name, ctrl, 'method response', $completer.completeError, () {
          final List<$fidl.MemberType> $types =
              _kExample_StrictTwoWay_Type.response!;
          // ignore: prefer_const_declarations
          final $response = null;

          $completer.complete($response);
        });
        break;
      case _kExample_FlexibleTwoWay_Ordinal:
        final String _name = _kExample_FlexibleTwoWay_Type.name;
        $fidl.performCtrlWithExceptionHandling(
            _name, ctrl, 'method response', $completer.completeError, () {
          final List<$fidl.MemberType> $types =
              _kExample_FlexibleTwoWay_Type.response!;
          // ignore: prefer_const_declarations
          final ExampleFlexibleTwoWayResult $response = $fidl.decodeMessage(
              $message,
              _kExample_FlexibleTwoWay_Type
                  .responseInlineSize($message.wireFormat),
              $types[0]);

          if ($response.$tag == ExampleFlexibleTwoWayResultTag.response) {
            $completer.complete(null);
          } else if ($response.transportErr == $zircon.ZX.ERR_NOT_SUPPORTED) {
            $completer.completeError(const $fidl.UnknownMethodException());
          } else {
            $completer.completeError($fidl.FidlUnrecognizedTransportErrorError(
                $response.transportErr!));
          }
        });
        break;
      default:
        ctrl.proxyError(
            $fidl.FidlError('Unexpected message ordinal: ${$message.ordinal}'));
        break;
    }
  }

  @override
  $async.Future<void> strictOneWay() {
    if (!ctrl.isBound) {
      return $async.Future.error(
          $fidl.FidlStateException('Proxy<${ctrl.$interfaceName}> is closed.'),
          StackTrace.current);
    }

    final $fidl.Encoder $encoder = $fidl.Encoder($fidl.kWireFormatDefault);
    $encoder.encodeMessageHeader(
        _kExample_StrictOneWay_Ordinal, 0, $fidl.CallStrictness.strict);
    return $async.Future.sync(() {
      ctrl.sendMessage($encoder.message);
    });
  }

  @override
  $async.Future<void> flexibleOneWay() {
    if (!ctrl.isBound) {
      return $async.Future.error(
          $fidl.FidlStateException('Proxy<${ctrl.$interfaceName}> is closed.'),
          StackTrace.current);
    }

    final $fidl.Encoder $encoder = $fidl.Encoder($fidl.kWireFormatDefault);
    $encoder.encodeMessageHeader(
        _kExample_FlexibleOneWay_Ordinal, 0, $fidl.CallStrictness.flexible);
    return $async.Future.sync(() {
      ctrl.sendMessage($encoder.message);
    });
  }

  @override
  $async.Future<void> strictTwoWay() {
    if (!ctrl.isBound) {
      return $async.Future.error(
          $fidl.FidlStateException('Proxy<${ctrl.$interfaceName}> is closed.'),
          StackTrace.current);
    }

    final $fidl.Encoder $encoder = $fidl.Encoder($fidl.kWireFormatDefault);
    $encoder.encodeMessageHeader(
        _kExample_StrictTwoWay_Ordinal, 0, $fidl.CallStrictness.strict);
    final $completer = $async.Completer<void>();
    ctrl.sendMessageWithResponse($encoder.message, $completer);
    return $completer.future;
  }

  @override
  $async.Future<void> flexibleTwoWay() {
    if (!ctrl.isBound) {
      return $async.Future.error(
          $fidl.FidlStateException('Proxy<${ctrl.$interfaceName}> is closed.'),
          StackTrace.current);
    }

    final $fidl.Encoder $encoder = $fidl.Encoder($fidl.kWireFormatDefault);
    $encoder.encodeMessageHeader(
        _kExample_FlexibleTwoWay_Ordinal, 0, $fidl.CallStrictness.flexible);
    final $completer = $async.Completer<void>();
    ctrl.sendMessageWithResponse($encoder.message, $completer);
    return $completer.future;
  }

  final _strictEventEventStreamController =
      $async.StreamController<void>.broadcast();
  @override
  $async.Stream<void> get strictEvent =>
      _strictEventEventStreamController.stream;

  final _flexibleEventEventStreamController =
      $async.StreamController<void>.broadcast();
  @override
  $async.Stream<void> get flexibleEvent =>
      _flexibleEventEventStreamController.stream;

  final _$unknownEventStreamController =
      $async.StreamController<$fidl.UnknownEvent>.broadcast();
  @override
  $async.Stream<$fidl.UnknownEvent> get $unknownEvents =>
      _$unknownEventStreamController.stream;
}

class ExampleBinding extends $fidl.AsyncBinding<ExampleServer> {
  ExampleBinding() : super(r"Example") {
    final List<$async.StreamSubscription<dynamic>> $subscriptions = [];
    void $unsubscribe() {
      for (final $sub in $subscriptions) {
        $sub.cancel();
      }
      $subscriptions.clear();
    }

    whenBound.then((_) {
      final impl = this.impl;
      if (impl != null) {
        final _strictEvent_stream = impl.strictEvent;
        if (_strictEvent_stream != null) {
          $subscriptions.add(_strictEvent_stream.listen(($response) {
            final $fidl.Encoder $encoder =
                $fidl.Encoder($fidl.kWireFormatDefault);
            $encoder.encodeMessageHeader(
                _kExample_StrictEvent_Ordinal, 0, $fidl.CallStrictness.strict);
            final List<$fidl.MemberType> $types =
                _kExample_StrictEvent_Type.response!;

            sendMessage($encoder.message);
          },
              // TODO: was ignoring errors intentional here? For methods, the
              // channel gets closed on error.
              onError: (_e) {
            $fidl.handleException(_kExample_StrictEvent_Type.name, _e, close);
          }));
        }
        final _flexibleEvent_stream = impl.flexibleEvent;
        if (_flexibleEvent_stream != null) {
          $subscriptions.add(_flexibleEvent_stream.listen(($response) {
            final $fidl.Encoder $encoder =
                $fidl.Encoder($fidl.kWireFormatDefault);
            $encoder.encodeMessageHeader(_kExample_FlexibleEvent_Ordinal, 0,
                $fidl.CallStrictness.flexible);
            final List<$fidl.MemberType> $types =
                _kExample_FlexibleEvent_Type.response!;

            sendMessage($encoder.message);
          },
              // TODO: was ignoring errors intentional here? For methods, the
              // channel gets closed on error.
              onError: (_e) {
            $fidl.handleException(_kExample_FlexibleEvent_Type.name, _e, close);
          }));
        }
      }
    });
    whenClosed.then((_) => $unsubscribe());
  }

  @override
  void handleMessage(
      $fidl.IncomingMessage $message, $fidl.OutgoingMessageSink $respond) {
    switch ($message.ordinal) {
      case _kExample_StrictOneWay_Ordinal:
        final String _name = _kExample_StrictOneWay_Type.name;
        $fidl.performWithExceptionHandling(_name, () {
          final List<$fidl.MemberType> $types =
              _kExample_StrictOneWay_Type.request!;
          // ignore: prefer_const_declarations
          final _impl = impl!;
          final $async.Future<void> $future = $fidl
              .decodeMessageWithCallback<$async.Future<void>>(
                  $message,
                  _kExample_StrictOneWay_Type.requestInlineSize(
                      $message.wireFormat), ($fidl.Decoder decoder) {
            return _impl.strictOneWay();
          });
        }, close);
        break;
      case _kExample_FlexibleOneWay_Ordinal:
        final String _name = _kExample_FlexibleOneWay_Type.name;
        $fidl.performWithExceptionHandling(_name, () {
          final List<$fidl.MemberType> $types =
              _kExample_FlexibleOneWay_Type.request!;
          // ignore: prefer_const_declarations
          final _impl = impl!;
          final $async.Future<void> $future = $fidl
              .decodeMessageWithCallback<$async.Future<void>>(
                  $message,
                  _kExample_FlexibleOneWay_Type.requestInlineSize(
                      $message.wireFormat), ($fidl.Decoder decoder) {
            return _impl.flexibleOneWay();
          });
        }, close);
        break;
      case _kExample_StrictTwoWay_Ordinal:
        final String _name = _kExample_StrictTwoWay_Type.name;
        $fidl.performWithExceptionHandling(_name, () {
          final List<$fidl.MemberType> $types =
              _kExample_StrictTwoWay_Type.request!;
          // ignore: prefer_const_declarations
          final _impl = impl!;
          final $async.Future<void> $future = $fidl
              .decodeMessageWithCallback<$async.Future<void>>(
                  $message,
                  _kExample_StrictTwoWay_Type.requestInlineSize(
                      $message.wireFormat), ($fidl.Decoder decoder) {
            return _impl.strictTwoWay();
          });
          $future.then(($response) {
            final $fidl.Encoder $encoder =
                $fidl.Encoder($fidl.kWireFormatDefault);
            $encoder.encodeMessageHeader(_kExample_StrictTwoWay_Ordinal,
                $message.txid, $fidl.CallStrictness.strict);
            $respond($encoder.message);
          }, onError: (_e) {
            $fidl.handleException(_name, _e, close);
          });
        }, close);
        break;
      case _kExample_FlexibleTwoWay_Ordinal:
        final String _name = _kExample_FlexibleTwoWay_Type.name;
        $fidl.performWithExceptionHandling(_name, () {
          final List<$fidl.MemberType> $types =
              _kExample_FlexibleTwoWay_Type.request!;
          // ignore: prefer_const_declarations
          final _impl = impl!;
          final $async.Future<void> $future = $fidl
              .decodeMessageWithCallback<$async.Future<void>>(
                  $message,
                  _kExample_FlexibleTwoWay_Type.requestInlineSize(
                      $message.wireFormat), ($fidl.Decoder decoder) {
            return _impl.flexibleTwoWay();
          });
          $future.then(($responseValue) {
            return ExampleFlexibleTwoWayResult.withResponse(
                ExampleFlexibleTwoWayResponse());
          }).then(($response) {
            final $fidl.Encoder $encoder =
                $fidl.Encoder($fidl.kWireFormatDefault);
            $encoder.encodeMessageHeader(_kExample_FlexibleTwoWay_Ordinal,
                $message.txid, $fidl.CallStrictness.flexible);
            final List<$fidl.MemberType> $types =
                _kExample_FlexibleTwoWay_Type.response!;
            $fidl.encodeMessage(
                $encoder,
                _kExample_FlexibleTwoWay_Type
                    .responseInlineSize($encoder.wireFormat),
                $types[0],
                $response);
            $respond($encoder.message);
          }, onError: (_e) {
            $fidl.handleException(_name, _e, close);
          });
        }, close);
        break;
      default:
        switch ($message.strictness) {
          case $fidl.CallStrictness.flexible:
            if ($message.txid == 0) {
              impl!.$unknownOneWay($message.ordinal).catchError((_e) {
                $fidl.handleException("unknown one-way", _e, close);
              });
            } else {
              final $fidl.Encoder $encoder =
                  $fidl.Encoder($fidl.kWireFormatDefault);
              $encoder.encodeUnknownMethodResponse(
                  $message.ordinal, $message.txid);
              $respond($encoder.message);
              impl!.$unknownTwoWay($message.ordinal).catchError((_e) {
                $fidl.handleException("unknown one-way", _e, close);
              });
            }
            break;
          case $fidl.CallStrictness.strict:
            throw $fidl.FidlError(
                r'Unexpected message name for ExampleBinding');
        }
        break;
    }
  }
}
