// WARNING: This file is machine generated by fidlgen_dart.
// @dart = 2.12

library fidl_test_unknowninteractions_test;

import 'dart:async' as $async;
import 'dart:core' hide Error, Future, Match, Set, Stream, Type;
import 'dart:typed_data';

import 'package:fidl/fidl.dart' as $fidl;
import 'package:meta/meta.dart';
import 'package:zircon/zircon.dart' as $zircon;

import './fidl_async.dart';

// ignore_for_file: always_specify_types
// ignore_for_file: constant_identifier_names
// ignore_for_file: directives_ordering
// ignore_for_file: one_member_abstracts
// ignore_for_file: public_member_api_docs
// ignore_for_file: unused_import
// ignore_for_file: library_prefixes
// ignore_for_file: unused_shown_name

class UnknownInteractionsAjarProtocol$TestBase
    extends UnknownInteractionsAjarProtocolServer {
  @override
  $async.Future<void> strictOneWay() {
    return $async.Future.error(
        UnimplementedError(
            r'strictOneWay not implemented on UnknownInteractionsAjarProtocol test base. Please implement.'),
        StackTrace.current);
  }

  @override
  $async.Future<void> flexibleOneWay() {
    return $async.Future.error(
        UnimplementedError(
            r'flexibleOneWay not implemented on UnknownInteractionsAjarProtocol test base. Please implement.'),
        StackTrace.current);
  }

  @override
  $async.Future<void> strictTwoWay() {
    return $async.Future.error(
        UnimplementedError(
            r'strictTwoWay not implemented on UnknownInteractionsAjarProtocol test base. Please implement.'),
        StackTrace.current);
  }

  @override
  $async.Future<void> strictTwoWayErr() {
    return $async.Future.error(
        UnimplementedError(
            r'strictTwoWayErr not implemented on UnknownInteractionsAjarProtocol test base. Please implement.'),
        StackTrace.current);
  }

  @override
  $async.Stream<void> get strictEvent {
    return $async.Stream.fromFuture($async.Future.error(
        UnimplementedError(
            r'strictEvent not implemented on UnknownInteractionsAjarProtocol test base. Please implement.'),
        StackTrace.current));
  }

  @override
  $async.Stream<void> get strictEventErr {
    return $async.Stream.fromFuture($async.Future.error(
        UnimplementedError(
            r'strictEventErr not implemented on UnknownInteractionsAjarProtocol test base. Please implement.'),
        StackTrace.current));
  }

  @override
  $async.Stream<void> get flexibleEvent {
    return $async.Stream.fromFuture($async.Future.error(
        UnimplementedError(
            r'flexibleEvent not implemented on UnknownInteractionsAjarProtocol test base. Please implement.'),
        StackTrace.current));
  }

  @override
  $async.Stream<void> get flexibleEventErr {
    return $async.Stream.fromFuture($async.Future.error(
        UnimplementedError(
            r'flexibleEventErr not implemented on UnknownInteractionsAjarProtocol test base. Please implement.'),
        StackTrace.current));
  }

  $async.Future<void> $unknownOneWay(int ordinal) {
    return $async.Future.error(
        UnimplementedError(
            r'$unknownOneWay not implemented on UnknownInteractionsAjarProtocol test base. Please implement.'),
        StackTrace.current);
  }
}

class UnknownInteractionsClosedProtocol$TestBase
    extends UnknownInteractionsClosedProtocol {
  @override
  $async.Future<void> strictOneWay() {
    return $async.Future.error(
        UnimplementedError(
            r'strictOneWay not implemented on UnknownInteractionsClosedProtocol test base. Please implement.'),
        StackTrace.current);
  }

  @override
  $async.Future<void> strictTwoWay() {
    return $async.Future.error(
        UnimplementedError(
            r'strictTwoWay not implemented on UnknownInteractionsClosedProtocol test base. Please implement.'),
        StackTrace.current);
  }

  @override
  $async.Future<void> strictTwoWayErr() {
    return $async.Future.error(
        UnimplementedError(
            r'strictTwoWayErr not implemented on UnknownInteractionsClosedProtocol test base. Please implement.'),
        StackTrace.current);
  }

  @override
  $async.Stream<void> get strictEvent {
    return $async.Stream.fromFuture($async.Future.error(
        UnimplementedError(
            r'strictEvent not implemented on UnknownInteractionsClosedProtocol test base. Please implement.'),
        StackTrace.current));
  }

  @override
  $async.Stream<void> get strictEventErr {
    return $async.Stream.fromFuture($async.Future.error(
        UnimplementedError(
            r'strictEventErr not implemented on UnknownInteractionsClosedProtocol test base. Please implement.'),
        StackTrace.current));
  }
}

class UnknownInteractionsProtocol$TestBase
    extends UnknownInteractionsProtocolServer {
  @override
  $async.Future<void> strictOneWay() {
    return $async.Future.error(
        UnimplementedError(
            r'strictOneWay not implemented on UnknownInteractionsProtocol test base. Please implement.'),
        StackTrace.current);
  }

  @override
  $async.Future<void> flexibleOneWay() {
    return $async.Future.error(
        UnimplementedError(
            r'flexibleOneWay not implemented on UnknownInteractionsProtocol test base. Please implement.'),
        StackTrace.current);
  }

  @override
  $async.Future<void> strictTwoWay() {
    return $async.Future.error(
        UnimplementedError(
            r'strictTwoWay not implemented on UnknownInteractionsProtocol test base. Please implement.'),
        StackTrace.current);
  }

  @override
  $async.Future<void> strictTwoWayErr() {
    return $async.Future.error(
        UnimplementedError(
            r'strictTwoWayErr not implemented on UnknownInteractionsProtocol test base. Please implement.'),
        StackTrace.current);
  }

  @override
  $async.Future<void> flexibleTwoWay() {
    return $async.Future.error(
        UnimplementedError(
            r'flexibleTwoWay not implemented on UnknownInteractionsProtocol test base. Please implement.'),
        StackTrace.current);
  }

  @override
  $async.Future<void> flexibleTwoWayErr() {
    return $async.Future.error(
        UnimplementedError(
            r'flexibleTwoWayErr not implemented on UnknownInteractionsProtocol test base. Please implement.'),
        StackTrace.current);
  }

  @override
  $async.Stream<void> get strictEvent {
    return $async.Stream.fromFuture($async.Future.error(
        UnimplementedError(
            r'strictEvent not implemented on UnknownInteractionsProtocol test base. Please implement.'),
        StackTrace.current));
  }

  @override
  $async.Stream<void> get strictEventErr {
    return $async.Stream.fromFuture($async.Future.error(
        UnimplementedError(
            r'strictEventErr not implemented on UnknownInteractionsProtocol test base. Please implement.'),
        StackTrace.current));
  }

  @override
  $async.Stream<void> get flexibleEvent {
    return $async.Stream.fromFuture($async.Future.error(
        UnimplementedError(
            r'flexibleEvent not implemented on UnknownInteractionsProtocol test base. Please implement.'),
        StackTrace.current));
  }

  @override
  $async.Stream<void> get flexibleEventErr {
    return $async.Stream.fromFuture($async.Future.error(
        UnimplementedError(
            r'flexibleEventErr not implemented on UnknownInteractionsProtocol test base. Please implement.'),
        StackTrace.current));
  }

  $async.Future<void> $unknownOneWay(int ordinal) {
    return $async.Future.error(
        UnimplementedError(
            r'$unknownOneWay not implemented on UnknownInteractionsProtocol test base. Please implement.'),
        StackTrace.current);
  }

  $async.Future<void> $unknownTwoWay(int ordinal) {
    return $async.Future.error(
        UnimplementedError(
            r'$unknownTwoWay not implemented on UnknownInteractionsProtocol test base. Please implement.'),
        StackTrace.current);
  }
}
