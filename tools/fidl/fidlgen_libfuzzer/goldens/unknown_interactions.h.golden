// WARNING: This file is machine generated by fidlgen.

#pragma once

#include <test/unknowninteractions/cpp/fidl.h>

#include "lib/fidl/cpp/fuzzing/traits.h"
#include "lib/fidl/cpp/internal/header.h"
// For ::std::max_element().
#include <algorithm>
// For uint64_t.
#include <stdint.h>

namespace fuzzing {

using Example_FlexibleTwoWay_Response = ::test::unknowninteractions::Example_FlexibleTwoWay_Response;
using Example_FlexibleTwoWay_Result = ::test::unknowninteractions::Example_FlexibleTwoWay_Result;
using ExampleFlexibleTwoWayTopResponse = ::test::unknowninteractions::ExampleFlexibleTwoWayTopResponse;

template <>
struct MinSize<Example_FlexibleTwoWay_Response> {
  operator size_t() {
    return MinSize<uint8_t>();
  }
};
template <>
struct Allocate<Example_FlexibleTwoWay_Response> {
  Example_FlexibleTwoWay_Response operator()(FuzzInput* src, size_t* size) {
    ZX_ASSERT(*size >= MinSize<Example_FlexibleTwoWay_Response>());
    Example_FlexibleTwoWay_Response out;
    const size_t slack_per_member = (*size - MinSize<Example_FlexibleTwoWay_Response>()) / 1;
    size_t out_size;
    out_size = MinSize<uint8_t>() + slack_per_member;
    out.__reserved = Allocate<uint8_t>{}(src, &out_size);
    return out;
  }
};
template <>
struct MinSize<Example_FlexibleTwoWay_Result> {
  operator size_t() {
    size_t sizes[] = {0, MinSize<::test::unknowninteractions::Example_FlexibleTwoWay_Response>(), MinSize<int32_t>()};
    return 1 + *std::max_element(sizes, sizes + 2 + 1);
  }
};
template <>
struct Allocate<Example_FlexibleTwoWay_Result> {
  static_assert(2 > 0, "xunion must have at least one member");

  Example_FlexibleTwoWay_Result operator()(FuzzInput* src, size_t* size) {
    ZX_ASSERT(*size >= MinSize<Example_FlexibleTwoWay_Result>());

    uint8_t selector;
    ZX_ASSERT(src->CopyBytes(&selector, 1));
    (*size)++;

    Example_FlexibleTwoWay_Result out;
    switch (selector % 2) {
      case 0: {
        out.set_response(Allocate<::test::unknowninteractions::Example_FlexibleTwoWay_Response>{}(src, size));
        break;
      }
      case 1: {
        out.set_transport_err(Allocate<int32_t>{}(src, size));
        break;
      }
    }

    return out;
  }
};
template <>
struct MinSize<ExampleFlexibleTwoWayTopResponse> {
  operator size_t() {
    return MinSize<::test::unknowninteractions::Example_FlexibleTwoWay_Result>();
  }
};
template <>
struct Allocate<ExampleFlexibleTwoWayTopResponse> {
  ExampleFlexibleTwoWayTopResponse operator()(FuzzInput* src, size_t* size) {
    ZX_ASSERT(*size >= MinSize<ExampleFlexibleTwoWayTopResponse>());
    ExampleFlexibleTwoWayTopResponse out;
    const size_t slack_per_member = (*size - MinSize<ExampleFlexibleTwoWayTopResponse>()) / 1;
    size_t out_size;
    out_size = MinSize<::test::unknowninteractions::Example_FlexibleTwoWay_Result>() + slack_per_member;
    out.result = Allocate<::test::unknowninteractions::Example_FlexibleTwoWay_Result>{}(src, &out_size);
    return out;
  }
};

}  // namespace fuzzing
