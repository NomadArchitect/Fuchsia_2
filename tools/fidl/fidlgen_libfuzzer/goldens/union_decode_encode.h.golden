// WARNING: This file is machine generated by fidlgen.

#pragma once

#include <fidl/test/union/llcpp/fidl.h>

// For ::fidl::fuzzing::DecoderEncoder.
#include <lib/fidl/cpp/fuzzing/decoder_encoder.h>
// For ::std::array.
#include <array>
// For ::std::pair.
#include <utility>
// For uint*_t.
#include <stdint.h>
// For ZX_ERR_INTERNAL.
#include <zircon/errors.h>
// For zx_handle_info_t and zx_status_t.
#include <zircon/types.h>
// For fidl_outgoing_msg_t.
#include <zircon/fidl.h>

namespace fuzzing {

inline constexpr ::std::array<::fidl::fuzzing::DecoderEncoder, 9>
    fidl_test_union__decoder_encoders = {
        [](uint8_t* bytes, uint32_t num_bytes, zx_handle_info_t* handles,
           uint32_t num_handles) -> ::std::pair<zx_status_t, zx_status_t> {
          ::fidl_test_union::wire::StructWithNullableXUnion::DecodedMessage
              decoded(bytes, num_bytes);  // decoder_encoder.

          if (decoded.status() != ZX_OK) {
            return ::std::make_pair<zx_status_t, zx_status_t>(decoded.status(),
                                                              ZX_ERR_INTERNAL);
          }

          ::fidl_test_union::wire::StructWithNullableXUnion* value =
              decoded.PrimaryObject();
          ::fidl_test_union::wire::StructWithNullableXUnion::OwnedEncodedMessage
              encoded(value);

          if (encoded.status() != ZX_OK) {
            return ::std::make_pair<zx_status_t, zx_status_t>(decoded.status(),
                                                              encoded.status());
          }

          [[maybe_unused]] fidl_outgoing_msg_t* message =
              encoded.GetOutgoingMessage().message();
          // TODO: Verify re-encoded message matches initial message.
          return ::std::make_pair<zx_status_t, zx_status_t>(decoded.status(),
                                                            encoded.status());
        },
        [](uint8_t* bytes, uint32_t num_bytes, zx_handle_info_t* handles,
           uint32_t num_handles) -> ::std::pair<zx_status_t, zx_status_t> {
          ::fidl_test_union::wire::Pizza::DecodedMessage decoded(
              bytes, num_bytes);  // decoder_encoder.

          if (decoded.status() != ZX_OK) {
            return ::std::make_pair<zx_status_t, zx_status_t>(decoded.status(),
                                                              ZX_ERR_INTERNAL);
          }

          ::fidl_test_union::wire::Pizza* value = decoded.PrimaryObject();
          ::fidl_test_union::wire::Pizza::OwnedEncodedMessage encoded(value);

          if (encoded.status() != ZX_OK) {
            return ::std::make_pair<zx_status_t, zx_status_t>(decoded.status(),
                                                              encoded.status());
          }

          [[maybe_unused]] fidl_outgoing_msg_t* message =
              encoded.GetOutgoingMessage().message();
          // TODO: Verify re-encoded message matches initial message.
          return ::std::make_pair<zx_status_t, zx_status_t>(decoded.status(),
                                                            encoded.status());
        },
        [](uint8_t* bytes, uint32_t num_bytes, zx_handle_info_t* handles,
           uint32_t num_handles) -> ::std::pair<zx_status_t, zx_status_t> {
          ::fidl_test_union::wire::Pasta::DecodedMessage decoded(
              bytes, num_bytes);  // decoder_encoder.

          if (decoded.status() != ZX_OK) {
            return ::std::make_pair<zx_status_t, zx_status_t>(decoded.status(),
                                                              ZX_ERR_INTERNAL);
          }

          ::fidl_test_union::wire::Pasta* value = decoded.PrimaryObject();
          ::fidl_test_union::wire::Pasta::OwnedEncodedMessage encoded(value);

          if (encoded.status() != ZX_OK) {
            return ::std::make_pair<zx_status_t, zx_status_t>(decoded.status(),
                                                              encoded.status());
          }

          [[maybe_unused]] fidl_outgoing_msg_t* message =
              encoded.GetOutgoingMessage().message();
          // TODO: Verify re-encoded message matches initial message.
          return ::std::make_pair<zx_status_t, zx_status_t>(decoded.status(),
                                                            encoded.status());
        },
        [](uint8_t* bytes, uint32_t num_bytes, zx_handle_info_t* handles,
           uint32_t num_handles) -> ::std::pair<zx_status_t, zx_status_t> {
          // Decode/re-encode protocol request.
          ::fidl_test_union::TestProtocol::
              StrictXUnionHenceResponseMayBeStackAllocatedRequest::
                  DecodedMessage decoded(
                      bytes, num_bytes);  // protocol_decoder_encoder (1).
          if (decoded.status()) {
            ::fidl_test_union::TestProtocol::
                StrictXUnionHenceResponseMayBeStackAllocatedRequest* value =
                    decoded.PrimaryObject();
            ::fidl_test_union::TestProtocol::
                StrictXUnionHenceResponseMayBeStackAllocatedRequest::
                    OwnedEncodedMessage encoded(value);
            if (!encoded.status()) {
              return ::std::make_pair<zx_status_t, zx_status_t>(
                  decoded.status(), encoded.status());
            }
            [[maybe_unused]] fidl_outgoing_msg_t* message =
                encoded.GetOutgoingMessage().message();
            // TODO: Verify re-encoded message matches initial message.
            return ::std::make_pair<zx_status_t, zx_status_t>(decoded.status(),
                                                              encoded.status());
          }
          return ::std::make_pair<zx_status_t, zx_status_t>(decoded.status(),
                                                            ZX_ERR_INTERNAL);
        },
        [](uint8_t* bytes, uint32_t num_bytes, zx_handle_info_t* handles,
           uint32_t num_handles) -> ::std::pair<zx_status_t, zx_status_t> {
          // Decode/re-encode protocol response.
          ::fidl_test_union::TestProtocol::
              StrictXUnionHenceResponseMayBeStackAllocatedResponse::
                  DecodedMessage decoded(bytes, num_bytes);
          if (decoded.status()) {
            ::fidl_test_union::TestProtocol::
                StrictXUnionHenceResponseMayBeStackAllocatedResponse* value =
                    decoded.PrimaryObject();
            ::fidl_test_union::TestProtocol::
                StrictXUnionHenceResponseMayBeStackAllocatedResponse::
                    OwnedEncodedMessage encoded(value);
            if (!encoded.status()) {
              return ::std::make_pair<zx_status_t, zx_status_t>(
                  decoded.status(), encoded.status());
            }
            [[maybe_unused]] fidl_outgoing_msg_t* message =
                encoded.GetOutgoingMessage().message();
            // TODO: Verify re-encoded message matches initial message.
            return ::std::make_pair<zx_status_t, zx_status_t>(decoded.status(),
                                                              encoded.status());
          }
          return ::std::make_pair<zx_status_t, zx_status_t>(decoded.status(),
                                                            ZX_ERR_INTERNAL);
        },
        [](uint8_t* bytes, uint32_t num_bytes, zx_handle_info_t* handles,
           uint32_t num_handles) -> ::std::pair<zx_status_t, zx_status_t> {
          // Decode/re-encode protocol request.
          ::fidl_test_union::TestProtocol::
              FlexibleXUnionHenceResponseMustBeHeapAllocatedRequest::
                  DecodedMessage decoded(
                      bytes, num_bytes);  // protocol_decoder_encoder (1).
          if (decoded.status()) {
            ::fidl_test_union::TestProtocol::
                FlexibleXUnionHenceResponseMustBeHeapAllocatedRequest* value =
                    decoded.PrimaryObject();
            ::fidl_test_union::TestProtocol::
                FlexibleXUnionHenceResponseMustBeHeapAllocatedRequest::
                    OwnedEncodedMessage encoded(value);
            if (!encoded.status()) {
              return ::std::make_pair<zx_status_t, zx_status_t>(
                  decoded.status(), encoded.status());
            }
            [[maybe_unused]] fidl_outgoing_msg_t* message =
                encoded.GetOutgoingMessage().message();
            // TODO: Verify re-encoded message matches initial message.
            return ::std::make_pair<zx_status_t, zx_status_t>(decoded.status(),
                                                              encoded.status());
          }
          return ::std::make_pair<zx_status_t, zx_status_t>(decoded.status(),
                                                            ZX_ERR_INTERNAL);
        },
        [](uint8_t* bytes, uint32_t num_bytes, zx_handle_info_t* handles,
           uint32_t num_handles) -> ::std::pair<zx_status_t, zx_status_t> {
          // Decode/re-encode protocol response.
          ::fidl_test_union::TestProtocol::
              FlexibleXUnionHenceResponseMustBeHeapAllocatedResponse::
                  DecodedMessage decoded(bytes, num_bytes);
          if (decoded.status()) {
            ::fidl_test_union::TestProtocol::
                FlexibleXUnionHenceResponseMustBeHeapAllocatedResponse* value =
                    decoded.PrimaryObject();
            ::fidl_test_union::TestProtocol::
                FlexibleXUnionHenceResponseMustBeHeapAllocatedResponse::
                    OwnedEncodedMessage encoded(value);
            if (!encoded.status()) {
              return ::std::make_pair<zx_status_t, zx_status_t>(
                  decoded.status(), encoded.status());
            }
            [[maybe_unused]] fidl_outgoing_msg_t* message =
                encoded.GetOutgoingMessage().message();
            // TODO: Verify re-encoded message matches initial message.
            return ::std::make_pair<zx_status_t, zx_status_t>(decoded.status(),
                                                              encoded.status());
          }
          return ::std::make_pair<zx_status_t, zx_status_t>(decoded.status(),
                                                            ZX_ERR_INTERNAL);
        },
        [](uint8_t* bytes, uint32_t num_bytes, zx_handle_info_t* handles,
           uint32_t num_handles) -> ::std::pair<zx_status_t, zx_status_t> {
          ::fidl_test_union::wire::NullableUnionStruct::DecodedMessage decoded(
              bytes, num_bytes);  // decoder_encoder.

          if (decoded.status() != ZX_OK) {
            return ::std::make_pair<zx_status_t, zx_status_t>(decoded.status(),
                                                              ZX_ERR_INTERNAL);
          }

          ::fidl_test_union::wire::NullableUnionStruct* value =
              decoded.PrimaryObject();
          ::fidl_test_union::wire::NullableUnionStruct::OwnedEncodedMessage
              encoded(value);

          if (encoded.status() != ZX_OK) {
            return ::std::make_pair<zx_status_t, zx_status_t>(decoded.status(),
                                                              encoded.status());
          }

          [[maybe_unused]] fidl_outgoing_msg_t* message =
              encoded.GetOutgoingMessage().message();
          // TODO: Verify re-encoded message matches initial message.
          return ::std::make_pair<zx_status_t, zx_status_t>(decoded.status(),
                                                            encoded.status());
        },
        [](uint8_t* bytes, uint32_t num_bytes, zx_handle_info_t* handles,
           uint32_t num_handles) -> ::std::pair<zx_status_t, zx_status_t> {
          ::fidl_test_union::wire::Empty::DecodedMessage decoded(
              bytes, num_bytes);  // decoder_encoder.

          if (decoded.status() != ZX_OK) {
            return ::std::make_pair<zx_status_t, zx_status_t>(decoded.status(),
                                                              ZX_ERR_INTERNAL);
          }

          ::fidl_test_union::wire::Empty* value = decoded.PrimaryObject();
          ::fidl_test_union::wire::Empty::OwnedEncodedMessage encoded(value);

          if (encoded.status() != ZX_OK) {
            return ::std::make_pair<zx_status_t, zx_status_t>(decoded.status(),
                                                              encoded.status());
          }

          [[maybe_unused]] fidl_outgoing_msg_t* message =
              encoded.GetOutgoingMessage().message();
          // TODO: Verify re-encoded message matches initial message.
          return ::std::make_pair<zx_status_t, zx_status_t>(decoded.status(),
                                                            encoded.status());
        },
};

}  // namespace fuzzing
