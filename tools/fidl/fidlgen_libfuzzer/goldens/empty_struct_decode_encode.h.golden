// WARNING: This file is machine generated by fidlgen.

#pragma once

#include <fidl/test/emptystruct/llcpp/fidl.h>

// For ::fidl::fuzzing::DecoderEncoder.
#include <lib/fidl/cpp/fuzzing/decoder_encoder.h>
// For ::std::array.
#include <array>
// For ::std::pair.
#include <utility>
// For uint*_t.
#include <stdint.h>
// For ZX_ERR_INTERNAL.
#include <zircon/errors.h>
// For zx_handle_info_t and zx_status_t.
#include <zircon/types.h>
// For fidl_outgoing_msg_t.
#include <zircon/fidl.h>

namespace fuzzing {

inline constexpr ::std::array<::fidl::fuzzing::DecoderEncoder, 5>
    fidl_test_emptystruct_decoder_encoders = {
        [](uint8_t* bytes, uint32_t num_bytes, zx_handle_info_t* handles,
           uint32_t num_handles) -> ::std::pair<zx_status_t, zx_status_t> {
          ::fidl_test_emptystruct::wire::Empty::DecodedMessage decoded(
              bytes, num_bytes);  // decoder_encoder.

          if (decoded.status() != ZX_OK) {
            return ::std::make_pair<zx_status_t, zx_status_t>(decoded.status(),
                                                              ZX_ERR_INTERNAL);
          }

          ::fidl_test_emptystruct::wire::Empty* value = decoded.PrimaryObject();
          ::fidl_test_emptystruct::wire::Empty::OwnedEncodedMessage encoded(
              value);

          if (encoded.status() != ZX_OK) {
            return ::std::make_pair<zx_status_t, zx_status_t>(decoded.status(),
                                                              encoded.status());
          }

          [[maybe_unused]] fidl_outgoing_msg_t* message =
              encoded.GetOutgoingMessage().message();
          // TODO: Verify re-encoded message matches initial message.
          return ::std::make_pair<zx_status_t, zx_status_t>(decoded.status(),
                                                            encoded.status());
        },
        [](uint8_t* bytes, uint32_t num_bytes, zx_handle_info_t* handles,
           uint32_t num_handles) -> ::std::pair<zx_status_t, zx_status_t> {
          // Decode/re-encode protocol request.
          ::fidl_test_emptystruct::EmptyProtocol::SendRequest::DecodedMessage
              decoded(bytes, num_bytes);  // protocol_decoder_encoder (1).
          if (decoded.status()) {
            ::fidl_test_emptystruct::EmptyProtocol::SendRequest* value =
                decoded.PrimaryObject();
            ::fidl_test_emptystruct::EmptyProtocol::SendRequest::
                OwnedEncodedMessage encoded(value);
            if (!encoded.status()) {
              return ::std::make_pair<zx_status_t, zx_status_t>(
                  decoded.status(), encoded.status());
            }
            [[maybe_unused]] fidl_outgoing_msg_t* message =
                encoded.GetOutgoingMessage().message();
            // TODO: Verify re-encoded message matches initial message.
            return ::std::make_pair<zx_status_t, zx_status_t>(decoded.status(),
                                                              encoded.status());
          }
          return ::std::make_pair<zx_status_t, zx_status_t>(decoded.status(),
                                                            ZX_ERR_INTERNAL);
        },
        [](uint8_t* bytes, uint32_t num_bytes, zx_handle_info_t* handles,
           uint32_t num_handles) -> ::std::pair<zx_status_t, zx_status_t> {
          // Decode/re-encode protocol response.
          ::fidl_test_emptystruct::EmptyProtocol::ReceiveResponse::
              DecodedMessage decoded(bytes, num_bytes);
          if (decoded.status()) {
            ::fidl_test_emptystruct::EmptyProtocol::ReceiveResponse* value =
                decoded.PrimaryObject();
            ::fidl_test_emptystruct::EmptyProtocol::ReceiveResponse::
                OwnedEncodedMessage encoded(value);
            if (!encoded.status()) {
              return ::std::make_pair<zx_status_t, zx_status_t>(
                  decoded.status(), encoded.status());
            }
            [[maybe_unused]] fidl_outgoing_msg_t* message =
                encoded.GetOutgoingMessage().message();
            // TODO: Verify re-encoded message matches initial message.
            return ::std::make_pair<zx_status_t, zx_status_t>(decoded.status(),
                                                              encoded.status());
          }
          return ::std::make_pair<zx_status_t, zx_status_t>(decoded.status(),
                                                            ZX_ERR_INTERNAL);
        },
        [](uint8_t* bytes, uint32_t num_bytes, zx_handle_info_t* handles,
           uint32_t num_handles) -> ::std::pair<zx_status_t, zx_status_t> {
          // Decode/re-encode protocol request.
          ::fidl_test_emptystruct::EmptyProtocol::SendAndReceiveRequest::
              DecodedMessage decoded(
                  bytes, num_bytes);  // protocol_decoder_encoder (1).
          if (decoded.status()) {
            ::fidl_test_emptystruct::EmptyProtocol::SendAndReceiveRequest*
                value = decoded.PrimaryObject();
            ::fidl_test_emptystruct::EmptyProtocol::SendAndReceiveRequest::
                OwnedEncodedMessage encoded(value);
            if (!encoded.status()) {
              return ::std::make_pair<zx_status_t, zx_status_t>(
                  decoded.status(), encoded.status());
            }
            [[maybe_unused]] fidl_outgoing_msg_t* message =
                encoded.GetOutgoingMessage().message();
            // TODO: Verify re-encoded message matches initial message.
            return ::std::make_pair<zx_status_t, zx_status_t>(decoded.status(),
                                                              encoded.status());
          }
          return ::std::make_pair<zx_status_t, zx_status_t>(decoded.status(),
                                                            ZX_ERR_INTERNAL);
        },
        [](uint8_t* bytes, uint32_t num_bytes, zx_handle_info_t* handles,
           uint32_t num_handles) -> ::std::pair<zx_status_t, zx_status_t> {
          // Decode/re-encode protocol response.
          ::fidl_test_emptystruct::EmptyProtocol::SendAndReceiveResponse::
              DecodedMessage decoded(bytes, num_bytes);
          if (decoded.status()) {
            ::fidl_test_emptystruct::EmptyProtocol::SendAndReceiveResponse*
                value = decoded.PrimaryObject();
            ::fidl_test_emptystruct::EmptyProtocol::SendAndReceiveResponse::
                OwnedEncodedMessage encoded(value);
            if (!encoded.status()) {
              return ::std::make_pair<zx_status_t, zx_status_t>(
                  decoded.status(), encoded.status());
            }
            [[maybe_unused]] fidl_outgoing_msg_t* message =
                encoded.GetOutgoingMessage().message();
            // TODO: Verify re-encoded message matches initial message.
            return ::std::make_pair<zx_status_t, zx_status_t>(decoded.status(),
                                                              encoded.status());
          }
          return ::std::make_pair<zx_status_t, zx_status_t>(decoded.status(),
                                                            ZX_ERR_INTERNAL);
        },
};

}  // namespace fuzzing
