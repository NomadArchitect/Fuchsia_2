// WARNING: This file is machine generated by fidlgen.

#pragma once

#include <fidl/test/nullable/llcpp/fidl.h>

// For ::fidl::fuzzing::DecoderEncoder.
#include <lib/fidl/cpp/fuzzing/decoder_encoder.h>
// For ::std::array.
#include <array>
// For ::std::pair.
#include <utility>
// For uint*_t.
#include <stdint.h>
// For ZX_ERR_INTERNAL.
#include <zircon/errors.h>
// For zx_handle_info_t and zx_status_t.
#include <zircon/types.h>
// For fidl_outgoing_msg_t.
#include <zircon/fidl.h>

namespace fuzzing {

inline constexpr ::std::array<::fidl::fuzzing::DecoderEncoder, 10>
    fidl_test_nullable_decoder_encoders = {
        [](uint8_t* bytes, uint32_t num_bytes, zx_handle_info_t* handles,
           uint32_t num_handles) -> ::std::pair<zx_status_t, zx_status_t> {
          ::fidl_test_nullable::wire::StructWithNullableVector::DecodedMessage
              decoded(bytes, num_bytes);  // decoder_encoder.

          if (decoded.status() != ZX_OK) {
            return ::std::make_pair<zx_status_t, zx_status_t>(decoded.status(),
                                                              ZX_ERR_INTERNAL);
          }

          ::fidl_test_nullable::wire::StructWithNullableVector* value =
              decoded.PrimaryObject();
          ::fidl_test_nullable::wire::StructWithNullableVector::
              OwnedEncodedMessage encoded(value);

          if (encoded.status() != ZX_OK) {
            return ::std::make_pair<zx_status_t, zx_status_t>(decoded.status(),
                                                              encoded.status());
          }

          [[maybe_unused]] fidl_outgoing_msg_t* message =
              encoded.GetOutgoingMessage().message();
          // TODO: Verify re-encoded message matches initial message.
          return ::std::make_pair<zx_status_t, zx_status_t>(decoded.status(),
                                                            encoded.status());
        },
        [](uint8_t* bytes, uint32_t num_bytes, zx_handle_info_t* handles,
           uint32_t num_handles) -> ::std::pair<zx_status_t, zx_status_t> {
          ::fidl_test_nullable::wire::StructWithNullableUnion::DecodedMessage
              decoded(bytes, num_bytes);  // decoder_encoder.

          if (decoded.status() != ZX_OK) {
            return ::std::make_pair<zx_status_t, zx_status_t>(decoded.status(),
                                                              ZX_ERR_INTERNAL);
          }

          ::fidl_test_nullable::wire::StructWithNullableUnion* value =
              decoded.PrimaryObject();
          ::fidl_test_nullable::wire::StructWithNullableUnion::
              OwnedEncodedMessage encoded(value);

          if (encoded.status() != ZX_OK) {
            return ::std::make_pair<zx_status_t, zx_status_t>(decoded.status(),
                                                              encoded.status());
          }

          [[maybe_unused]] fidl_outgoing_msg_t* message =
              encoded.GetOutgoingMessage().message();
          // TODO: Verify re-encoded message matches initial message.
          return ::std::make_pair<zx_status_t, zx_status_t>(decoded.status(),
                                                            encoded.status());
        },
        [](uint8_t* bytes, uint32_t num_bytes, zx_handle_info_t* handles,
           uint32_t num_handles) -> ::std::pair<zx_status_t, zx_status_t> {
          ::fidl_test_nullable::wire::StructWithNullableStruct::DecodedMessage
              decoded(bytes, num_bytes);  // decoder_encoder.

          if (decoded.status() != ZX_OK) {
            return ::std::make_pair<zx_status_t, zx_status_t>(decoded.status(),
                                                              ZX_ERR_INTERNAL);
          }

          ::fidl_test_nullable::wire::StructWithNullableStruct* value =
              decoded.PrimaryObject();
          ::fidl_test_nullable::wire::StructWithNullableStruct::
              OwnedEncodedMessage encoded(value);

          if (encoded.status() != ZX_OK) {
            return ::std::make_pair<zx_status_t, zx_status_t>(decoded.status(),
                                                              encoded.status());
          }

          [[maybe_unused]] fidl_outgoing_msg_t* message =
              encoded.GetOutgoingMessage().message();
          // TODO: Verify re-encoded message matches initial message.
          return ::std::make_pair<zx_status_t, zx_status_t>(decoded.status(),
                                                            encoded.status());
        },
        [](uint8_t* bytes, uint32_t num_bytes, zx_handle_info_t* handles,
           uint32_t num_handles) -> ::std::pair<zx_status_t, zx_status_t> {
          ::fidl_test_nullable::wire::StructWithNullableString::DecodedMessage
              decoded(bytes, num_bytes);  // decoder_encoder.

          if (decoded.status() != ZX_OK) {
            return ::std::make_pair<zx_status_t, zx_status_t>(decoded.status(),
                                                              ZX_ERR_INTERNAL);
          }

          ::fidl_test_nullable::wire::StructWithNullableString* value =
              decoded.PrimaryObject();
          ::fidl_test_nullable::wire::StructWithNullableString::
              OwnedEncodedMessage encoded(value);

          if (encoded.status() != ZX_OK) {
            return ::std::make_pair<zx_status_t, zx_status_t>(decoded.status(),
                                                              encoded.status());
          }

          [[maybe_unused]] fidl_outgoing_msg_t* message =
              encoded.GetOutgoingMessage().message();
          // TODO: Verify re-encoded message matches initial message.
          return ::std::make_pair<zx_status_t, zx_status_t>(decoded.status(),
                                                            encoded.status());
        },
        [](uint8_t* bytes, uint32_t num_bytes, zx_handle_info_t* handles,
           uint32_t num_handles) -> ::std::pair<zx_status_t, zx_status_t> {
          ::fidl_test_nullable::wire::StructWithNullableRequest::DecodedMessage
              decoded(bytes, num_bytes);  // decoder_encoder.

          if (decoded.status() != ZX_OK) {
            return ::std::make_pair<zx_status_t, zx_status_t>(decoded.status(),
                                                              ZX_ERR_INTERNAL);
          }

          ::fidl_test_nullable::wire::StructWithNullableRequest* value =
              decoded.PrimaryObject();
          ::fidl_test_nullable::wire::StructWithNullableRequest::
              OwnedEncodedMessage encoded(value);

          if (encoded.status() != ZX_OK) {
            return ::std::make_pair<zx_status_t, zx_status_t>(decoded.status(),
                                                              encoded.status());
          }

          [[maybe_unused]] fidl_outgoing_msg_t* message =
              encoded.GetOutgoingMessage().message();
          // TODO: Verify re-encoded message matches initial message.
          return ::std::make_pair<zx_status_t, zx_status_t>(decoded.status(),
                                                            encoded.status());
        },
        [](uint8_t* bytes, uint32_t num_bytes, zx_handle_info_t* handles,
           uint32_t num_handles) -> ::std::pair<zx_status_t, zx_status_t> {
          ::fidl_test_nullable::wire::StructWithNullableProtocol::DecodedMessage
              decoded(bytes, num_bytes);  // decoder_encoder.

          if (decoded.status() != ZX_OK) {
            return ::std::make_pair<zx_status_t, zx_status_t>(decoded.status(),
                                                              ZX_ERR_INTERNAL);
          }

          ::fidl_test_nullable::wire::StructWithNullableProtocol* value =
              decoded.PrimaryObject();
          ::fidl_test_nullable::wire::StructWithNullableProtocol::
              OwnedEncodedMessage encoded(value);

          if (encoded.status() != ZX_OK) {
            return ::std::make_pair<zx_status_t, zx_status_t>(decoded.status(),
                                                              encoded.status());
          }

          [[maybe_unused]] fidl_outgoing_msg_t* message =
              encoded.GetOutgoingMessage().message();
          // TODO: Verify re-encoded message matches initial message.
          return ::std::make_pair<zx_status_t, zx_status_t>(decoded.status(),
                                                            encoded.status());
        },
        [](uint8_t* bytes, uint32_t num_bytes, zx_handle_info_t* handles,
           uint32_t num_handles) -> ::std::pair<zx_status_t, zx_status_t> {
          ::fidl_test_nullable::wire::StructWithNullableHandle::DecodedMessage
              decoded(bytes, num_bytes);  // decoder_encoder.

          if (decoded.status() != ZX_OK) {
            return ::std::make_pair<zx_status_t, zx_status_t>(decoded.status(),
                                                              ZX_ERR_INTERNAL);
          }

          ::fidl_test_nullable::wire::StructWithNullableHandle* value =
              decoded.PrimaryObject();
          ::fidl_test_nullable::wire::StructWithNullableHandle::
              OwnedEncodedMessage encoded(value);

          if (encoded.status() != ZX_OK) {
            return ::std::make_pair<zx_status_t, zx_status_t>(decoded.status(),
                                                              encoded.status());
          }

          [[maybe_unused]] fidl_outgoing_msg_t* message =
              encoded.GetOutgoingMessage().message();
          // TODO: Verify re-encoded message matches initial message.
          return ::std::make_pair<zx_status_t, zx_status_t>(decoded.status(),
                                                            encoded.status());
        },
        [](uint8_t* bytes, uint32_t num_bytes, zx_handle_info_t* handles,
           uint32_t num_handles) -> ::std::pair<zx_status_t, zx_status_t> {
          // Decode/re-encode protocol request.
          ::fidl_test_nullable::SimpleProtocol::AddRequest::DecodedMessage
              decoded(bytes, num_bytes);  // protocol_decoder_encoder (1).
          if (decoded.status()) {
            ::fidl_test_nullable::SimpleProtocol::AddRequest* value =
                decoded.PrimaryObject();
            ::fidl_test_nullable::SimpleProtocol::AddRequest::
                OwnedEncodedMessage encoded(value);
            if (!encoded.status()) {
              return ::std::make_pair<zx_status_t, zx_status_t>(
                  decoded.status(), encoded.status());
            }
            [[maybe_unused]] fidl_outgoing_msg_t* message =
                encoded.GetOutgoingMessage().message();
            // TODO: Verify re-encoded message matches initial message.
            return ::std::make_pair<zx_status_t, zx_status_t>(decoded.status(),
                                                              encoded.status());
          }
          return ::std::make_pair<zx_status_t, zx_status_t>(decoded.status(),
                                                            ZX_ERR_INTERNAL);
        },
        [](uint8_t* bytes, uint32_t num_bytes, zx_handle_info_t* handles,
           uint32_t num_handles) -> ::std::pair<zx_status_t, zx_status_t> {
          // Decode/re-encode protocol response.
          ::fidl_test_nullable::SimpleProtocol::AddResponse::DecodedMessage
              decoded(bytes, num_bytes);
          if (decoded.status()) {
            ::fidl_test_nullable::SimpleProtocol::AddResponse* value =
                decoded.PrimaryObject();
            ::fidl_test_nullable::SimpleProtocol::AddResponse::
                OwnedEncodedMessage encoded(value);
            if (!encoded.status()) {
              return ::std::make_pair<zx_status_t, zx_status_t>(
                  decoded.status(), encoded.status());
            }
            [[maybe_unused]] fidl_outgoing_msg_t* message =
                encoded.GetOutgoingMessage().message();
            // TODO: Verify re-encoded message matches initial message.
            return ::std::make_pair<zx_status_t, zx_status_t>(decoded.status(),
                                                              encoded.status());
          }
          return ::std::make_pair<zx_status_t, zx_status_t>(decoded.status(),
                                                            ZX_ERR_INTERNAL);
        },
        [](uint8_t* bytes, uint32_t num_bytes, zx_handle_info_t* handles,
           uint32_t num_handles) -> ::std::pair<zx_status_t, zx_status_t> {
          ::fidl_test_nullable::wire::Int32Wrapper::DecodedMessage decoded(
              bytes, num_bytes);  // decoder_encoder.

          if (decoded.status() != ZX_OK) {
            return ::std::make_pair<zx_status_t, zx_status_t>(decoded.status(),
                                                              ZX_ERR_INTERNAL);
          }

          ::fidl_test_nullable::wire::Int32Wrapper* value =
              decoded.PrimaryObject();
          ::fidl_test_nullable::wire::Int32Wrapper::OwnedEncodedMessage encoded(
              value);

          if (encoded.status() != ZX_OK) {
            return ::std::make_pair<zx_status_t, zx_status_t>(decoded.status(),
                                                              encoded.status());
          }

          [[maybe_unused]] fidl_outgoing_msg_t* message =
              encoded.GetOutgoingMessage().message();
          // TODO: Verify re-encoded message matches initial message.
          return ::std::make_pair<zx_status_t, zx_status_t>(decoded.status(),
                                                            encoded.status());
        },
};

}  // namespace fuzzing
