void Config::RecordInspect(inspect::Node* node) {
  {{#each fields}}
    {{#if (is_string_vector type_)}}
      auto {{ident}}_array_ = node->CreateStringArray("{{ident}}", this->{{ident}}().size());
      for (size_t i = 0; i < this->{{ident}}().size(); i++) {
        auto ref = std::string_view(this->{{ident}}()[i].data());
        {{ident}}_array_.Set(i, ref);
      }
      node->Record(std::move({{ident}}_array_));
    {{else}}
      {{#if (is_vector type_)}}
        auto {{ident}}_array_ =
          node->Create{{(inspect_type type_)}}Array("{{ident}}", this->{{ident}}().size());
        for (size_t i = 0; i < this->{{ident}}().size(); i++) {
            {{ident}}_array_.Set(i, this->{{ident}}()[i]);
        }
        node->Record(std::move({{ident}}_array_));
      {{else}}
        node->Record{{(inspect_type type_)}}("{{ident}}", this->{{ident}}());
      {{/if}}
    {{/if}}
  {{/each}}
}

std::ostream& operator<<(std::ostream& os, const Config& c) {
  {{#each fields}}
    {{#if (is_vector type_)}}
      os << "{{ident}}: [";
      for (auto iter = c.{{ident}}().begin(); iter != c.{{ident}}().end(); iter++) {
        if (iter != c.{{ident}}().begin()) os << ", ";
        os << *iter;
      }
      os << "]";
    {{else}}
      {{#if (is_bool type_)}}
        if (c.{{ident}}()) {
          os << "{{ident}}; ";
        }
      {{else}}
        os << "{{ident}}=" << c.{{ident}}() << "; ";
      {{/if}}
    {{/if}}
  {{~/each~}}
  return os;
}
