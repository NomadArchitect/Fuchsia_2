# Copyright 2019 The Fuchsia Authors. All rights reserved.
# Use of this source code is governed by a BSD-style license that can be
# found in the LICENSE file.

import("//build/test.gni")
import("//build/testing/bootfs_test.gni")

group("sanitizer") {
  testonly = true
  deps = [
    ":lsan-bootfs-test",
    ":sanitizer-utils-bootfs-test",
  ]
}

test("sanitizer-utils-test") {
  if (is_fuchsia) {
    fdio_config = [ "//build/config/fuchsia:fdio_config" ]
    if (configs + fdio_config - fdio_config != configs) {
      configs -= fdio_config
    }
  }
  sources = [ "sanitizer-utils.cc" ]
  deps = [
    ":memory-snapshot-test",
    "//sdk/lib/fdio",
    "//zircon/system/ulib/async",
    "//zircon/system/ulib/async-default",
    "//zircon/system/ulib/async-loop",
    "//zircon/system/ulib/async-loop:async-loop-default",
    "//zircon/system/ulib/ldmsg",
    "//zircon/system/ulib/zxtest",
  ]
  data_deps = [ ":sanitizer-exit-hook-test-helper" ]
}

executable("sanitizer-exit-hook-test-helper") {
  visibility = [ ":*" ]
  sources = [ "exit-hook-test-helper.cc" ]
  configs -= [ "//build/config/fuchsia:fdio_config" ]
  exclude_toolchain_tags = [ "instrumentation-runtime" ]
}

source_set("memory-snapshot-test") {
  visibility = [ ":*" ]
  sources = [ "memory-snapshot-test.cc" ]
  deps = [
    ":sanitizer-memory-snapshot-test-needed-dso",
    "//zircon/system/ulib/zx",
    "//zircon/system/ulib/zxtest",
    "//zircon/third_party/ulib/musl:musl_internal",
  ]
  data_deps = [ ":sanitizer-memory-snapshot-test-dlopen-dso" ]

  if (current_cpu == "arm64") {
    cflags = [ "-ffixed-x28" ]
  }

  # This test needs to verify how stack allocations come out, which is
  # incompatible with ASan fake-stack allocations.
  deps += [ "//build/config/sanitizers:suppress-asan-stack-use-after-return" ]
}

shared_library("sanitizer-memory-snapshot-test-needed-dso") {
  visibility = [ ":*" ]
  sources = [ "sanitizer-memory-snapshot-test-needed-dso.cc" ]
}

shared_library("sanitizer-memory-snapshot-test-dlopen-dso") {
  visibility = [ ":*" ]
  sources = [ "sanitizer-memory-snapshot-test-dlopen-dso.cc" ]
}

test("lsan-test") {
  sources = [ "lsan-test.cc" ]
  deps = [
    ":lsan-thread-race-test",
    "//zircon/system/ulib/zxtest",
  ]

  # Add the lsan config whether or not the current variant already includes it.
  lsan_config = [ "//build/config/sanitizers:lsan" ]
  configs += lsan_config
  configs -= lsan_config
  configs += lsan_config

  # LSan requires frame pointers.  First make sure that none of the related
  # configs is in the list, then add the one enabling frame pointers.
  fp_configs = [
    "//build/config:default_frame_pointers",
    "//build/config:frame_pointers",
    "//build/config:no_frame_pointers",
  ]
  configs += fp_configs
  configs -= fp_configs
  configs += [ "//build/config:frame_pointers" ]
}

executable("lsan-thread-race-test") {
  sources = [ "lsan-thread-race-test.cc" ]

  # Add the lsan config whether or not the current variant already includes it.
  lsan_config = [ "//build/config/sanitizers:lsan" ]
  configs += lsan_config
  configs -= lsan_config
  configs += lsan_config

  # LSan requires frame pointers.  First make sure that none of the related
  # configs is in the list, then add the one enabling frame pointers.
  fp_configs = [
    "//build/config:default_frame_pointers",
    "//build/config:frame_pointers",
    "//build/config:no_frame_pointers",
  ]
  configs += fp_configs
  configs -= fp_configs
  configs += [ "//build/config:frame_pointers" ]
}

bootfs_test("sanitizer-utils-bootfs-test") {
  name = "sanitizer-utils-test"
  deps = [ ":sanitizer-utils-test" ]
}

bootfs_test("lsan-bootfs-test") {
  name = "lsan-test"
  deps = [ ":lsan-test" ]
}
