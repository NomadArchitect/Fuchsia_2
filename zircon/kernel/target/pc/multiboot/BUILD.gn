# Copyright 2020 The Fuchsia Authors
#
# Use of this source code is governed by a MIT-style
# license that can be found in the LICENSE file or at
# https://opensource.org/licenses/MIT

import("//build/images/args.gni")
import("//build/zircon/migrated_targets.gni")
multiboot_toolchain = "zircon_multiboot"

# The Multiboot trampoline gets its own toolchain to build x86-32 code.
if (current_toolchain == default_toolchain) {
  import("//build/toolchain/zircon/zircon_toolchain_suite.gni")

  # Define the special toolchain itself only in the default toolchain.
  zircon_toolchain_suite(multiboot_toolchain) {
    os = "fuchsia"
    cpu = "x64"
    environment = "multiboot"
    strip = "--strip-sections"
    toolchain_tags = [ "kernel" ]
    with_shared = false
    exclude_variant_tags = [ "instrumented" ]
    configs = [ "//zircon/kernel/target/pc/multiboot:multiboot_config" ]
  }
}

if (zircon_toolchain != false && zircon_toolchain.environment == "multiboot") {
  # This is the top config for all code in the multiboot_toolchain.
  config("multiboot_config") {
    configs = [
      "//zircon/kernel:headers",
      "//zircon/kernel:standalone",
      "//zircon/kernel:warnings",
      "//zircon/kernel/arch/x86:abi",
      "//zircon/kernel/arch/x86:kernel",
    ]
    configs += [ "//build/config/zircon:no_sanitizers" ]
    compiler_flags = [
      "-m32",
      "-mregparm=3",
      "-fno-pic",
    ]
    asmflags = compiler_flags
    cflags = compiler_flags
    ldflags = compiler_flags
    if (is_gcc) {
      ldflags += [ "-no-pie" ]
    } else {
      ldflags += [ "-Wl,--no-pie" ]
    }
  }

  group("multiboot_config_deps") {
  }

  # We could make a Multiboot image meant to be loaded without ELF headers
  # and do `objcopy -O binary` here.  But there's no reason to, and having
  # an ELF binary to look at is nicer.  To remove the ELF headers instead,
  # the linker script would need to remove `+ SIZEOF_HEADERS` and then the
  # multiboot header would be first thing in the raw binary.  The toolchain
  # implicitly strips executables, so `multiboot.bin` is a lean, fully
  # stripped ELF/Multiboot image.

  executable("multiboot") {
    output_extension = "bin"
    if (toolchain_variant.name == "") {
      output_dir = root_build_dir
    }

    sources = [
      "multiboot-main.c",
      "multiboot-start.S",
      "paging.c",
      "trampoline.c",
      "util.c",
    ]
    deps = [
      "//zircon/kernel/arch/x86/page_tables:headers",
      "//zircon/kernel/platform/pc:headers",
      "//zircon/system/ulib/zbi",
    ]
    ldflags = [ "-Wl,-T," + rebase_path("multiboot.ld", root_build_dir) ]
    inputs = [ "multiboot.ld" ]

    metadata = {
      # Used to add an entry to the "images.json" build API file.
      images = [
        {
          archive = add_qemu_to_build_archives
          label = get_label_info(":$target_name", "label_with_toolchain")
          name = "qemu-kernel"
          path = "multiboot.bin"
          type = "kernel"
          cpu = current_cpu
        },
      ]
    }
  }

  not_needed([ "multiboot_toolchain" ])
} else {
  group("multiboot") {
    public_deps = [
      ":$target_name(//zircon/kernel/target/pc/multiboot:$multiboot_toolchain)",
    ]
  }
}
