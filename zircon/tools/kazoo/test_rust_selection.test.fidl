// Copyright 2019 The Fuchsia Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
library zx;

alias MutableVectorVoid = vector<byte>;

@transport("Syscall")
protocol Rust {
    // Simple out ptr.
    SimpleCase() -> (struct {
        time time;
    });

    MultipleInHandles(resource struct {
        handles vector<handle>;
    }) -> (struct {}) error status;

    // noreturn handled properly.
    @noreturn
    ANoRetFunc();

    // Function withot return handled properly too.
    NoReturnValue(struct {
        x uint32;
    });

    // |buffer| treated mutable.
    InoutArgs(resource struct {
        handle handle:VMO;
        op uint32;
        offset uint64;
        size uint64;
        buffer MutableVectorVoid;
    }) -> (struct {}) error status;

    // |input| treated const
    ConstInput(struct {
        input vector<byte>;
    }) -> (struct {}) error status;

    VariousBasicTypeNames(struct {
        a bool;
        b byte;
        d int32;
        e int64;
        f uint16;
        g uint32;
        h uint64;
        i usize;
        j uintptr;
        @voidptr
        k experimental_pointer<byte>;
        l time;
        m ticks;
    });
};
