// Copyright 2019 The Fuchsia Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
library zx;

// This file is copies of some syscalls that were interesting for the kernel
// header generator.
@transport("Syscall")
protocol KernelCases {
    // Output vector to out_ptr, and vector<paddr> staying zx_paddr_t (not
    // turning into uint64).
    BtiPin(resource struct {
        handle handle:BTI;
        options uint32;
        vmo handle:VMO;
        offset uint64;
        size uint64;
    }) -> (resource struct {
        @embedded_alias("zx/paddr")
        addrs vector<paddr>;
        pmt handle:PMT;
    }) error status;

    // Still have NORETURN markup for kernel (but only this one).
    @noreturn
    ThreadExit();

    // inout_ptr.
    MtraceControl(resource struct {
        handle handle:RESOURCE;
        kind uint32;
        action uint32;
        options uint32;
        @inout
        @voidptr
        ptr vector<byte>;
    }) -> (struct {}) error status;

    // vector of handles isn't turned into user_out_handle*, rather stays as
    // user_out_ptr<zx_handle_t>, because it's not just one.
    Read(resource struct {
        handle handle:CHANNEL;
        options uint32;
    }) -> (resource struct {
        @voidptr
        @size32
        bytes vector<byte>;
        @size32
        handles vector<handle>;
        actual_bytes uint32;
        actual_handles uint32;
    }) error status;

    @testonly
    CompiledOutInNonTest(struct {
        a int32;
        b int32;
    }) -> (struct {}) error status;
};
