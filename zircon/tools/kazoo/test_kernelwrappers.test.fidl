// Copyright 2019 The Fuchsia Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
library zx;

@transport("Syscall")
protocol Kwrap {
    // Simple out ptr.
    SimpleCase() -> (struct {
        time time;
    });

    MultipleInHandles(resource struct {
        handles vector<handle>;
    }) -> (struct {}) error status;

    // vdsocall excluded.
    @vdsocall
    TicksGet() -> (struct {
        ticks ticks;
    });

    // noreturn handled properly.
    @noreturn
    ANoRetFunc();

    // |buffer| treated as inout parameter.
    InoutArgs(resource struct {
        handle handle:VMO;
        op uint32;
        offset uint64;
        size uint64;
        @inout
        @voidptr
        buffer vector<byte>;
    }) -> (struct {}) error status;

    // Output handle copied properly.
    OutputHandle() -> (resource struct {
        event handle:EVENT;
    }) error status;

    // When two output handles, status and copy are verified before any bytes
    // returned.
    TwoOutputHandle() -> (resource struct {
        out0 handle:EVENT;
        out1 handle:EVENT;
    }) error status;

    @testonly
    CompiledOut() -> (struct {}) error status;
};
