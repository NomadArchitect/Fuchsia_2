// Copyright 2019 The Fuchsia Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
library zx;

// This file is copies of some syscalls that cover more unusual features (see
// annotations at the method).

alias ConstFutexPtr = int32;
alias Futex = int32;
alias MutableUint32 = uint32;
alias MutableVectorVoid = vector<byte>;
alias VectorVoidU32Size = vector<byte>;
type Clock = strict enum : uint32 {
    MONOTONIC = 0;
    UTC = 1;
    THREAD = 2;
};


@transport("Syscall")
protocol Selection {
    // Special futex handling.
    FutexRequeue(resource struct {
        value_ptr ConstFutexPtr;
        wake_count uint32;
        current_value Futex;
        requeue_ptr ConstFutexPtr;
        requeue_count uint32;
        new_requeue_owner handle;
    }) -> (struct {}) error status;

    ObjectWaitOne(resource struct {
        handle handle;
        signals signals;
        deadline time;
    }) -> (struct {
        observed signals;
    }) error status;

    // Argument reordering.
    @arg_reorder("handle,data,offset,data_size,actual")
    KtraceRead(resource struct {
        handle handle:RESOURCE;
        data MutableVectorVoid;
        offset uint32;
    }) -> (struct {
        actual Usize;
    }) error status;

    // Mutable uint32 in the middle of input parameters (rather than as an
    // output).
    PciCfgPioRw(resource struct {
        handle handle:RESOURCE;
        bus uint8;
        dev uint8;
        func uint8;
        offset uint8;
        val MutableUint32;
        width Usize;
        write bool;
    }) -> (struct {}) error status;

    // uint32_t for size of a "vector".
    JobSetPolicy(resource struct {
        handle handle:JOB;
        options uint32;
        topic uint32;
        policy VectorVoidU32Size;
    }) -> (struct {}) error status;

    // Handling of enums.
    ClockGet(struct {
        clock_id Clock;
    }) -> (struct {
        out time;
    }) error status;
};
