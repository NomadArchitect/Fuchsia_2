# Copyright 2020 The Fuchsia Authors. All rights reserved.
# Use of this source code is governed by a BSD-style license that can be
# found in the LICENSE file.

import("//build/testing/golden_files.gni")
import("//build/zircon/migrated_targets.gni")
import("vdso.gni")

group("vdso") {
  public_deps = [ ":zx" ]
}

# The system calls are defined as if they were a FIDL library, because
# kazoo consumes the FIDL JSON IR (generated below). This generates the
# file by invoking fidlc directly.
zx_host_tool_action("zx") {
  visibility = [
    ":*",
    "//src/lib/zircon/rust:*",
  ]
  tool = "//tools/fidl/fidlc:fidlc"
  outputs = [ "$target_gen_dir/$target_name.fidl.json" ]
  inputs = []
  args = [
    "--name",
    target_name,
    "--json",
    rebase_path(outputs[0], root_build_dir),
    "--files",
  ]
  foreach(src, all_syscall_fidl_files) {
    inputs += [ "$src" ]
    args += [ rebase_path("$src", root_build_dir) ]
  }

  metadata = {
    generated_sources = rebase_path(outputs, root_build_dir)
  }
}

# The generated stuff is identical regardless of how it gets compiled.
# Dependents must use "//zircon/vdso:public($default_toolchain)" or
# "//zircon/vdso:private($default_toolchain)".
assert(current_toolchain == default_toolchain)

# This provides the public headers that go with the vDSO API, which are
# seen as <zircon/...>.
group("public") {
  visibility = [
    "//src/zircon/lib/zircon/*",
    "//zircon/public/sysroot/*",
  ]
  public_configs = [ ":public.config" ]
  public_deps = [ ":generate" ]
}

syscall_public_gen_dir = "$root_gen_dir/include/zircon/syscalls"
config("public.config") {
  visibility = [
    ":public",
    "//src/zircon/lib/zircon/*",
    "//zircon/kernel/lib/syscalls/*",
    "//zircon/kernel/lib/userabi/vdso/*",
  ]
  include_dirs = [ "$root_gen_dir/include" ]
}

# This provides the private headers used by the kernel and vDSO
# implementation, which are seen as <lib/syscalls/...>.
group("private") {
  visibility = [
    "//zircon/kernel/lib/syscalls/*",
    "//zircon/kernel/lib/userabi/*",
    "//zircon/system/ulib/syscalls-headers/*",
  ]
  public_configs = [ ":private.config" ]
  public_deps = [ ":generate" ]
}

syscall_private_gen_dir = "$target_gen_dir/include/lib/syscalls"
config("private.config") {
  visibility = [
    ":private",
    "//zircon/kernel/lib/syscalls/*",
  ]
  include_dirs = [ "$target_gen_dir/include" ]
}

# The kazoo compiler translates FIDL's IR into syscall-oriented outputs.
# These are logically distinct things that are used by different modules in
# the kernel or in public library code.  But they all depend on the same
# inputs, the front-end work is the same for each one, and the back-end
# work is not very costly.  So doing a single kazoo run to generate them
# all together is faster than parallelizing the independent generation
# steps that duplicate redundant process overhead and front-end work.

# NOTE: Rust bindings are now generated by the GN build, see
# src/lib/zircon/BUILD.gn.

public_generated = [
  {
    arg = "--json"
    output = "definitions.json"
  },
  {
    arg = "--public-header"
    output = "internal/cdecls.inc"
  },
  {
    arg = "--next-public-header"
    output = "internal/cdecls-next.inc"
  },
]

testonly_generated = [
  {
    arg = "--testonly-public-header"
    output = "internal/testonly-cdecls.inc"
  },
]

private_generated = [
  {
    arg = "--category"
    output = "category.inc"
  },
  {
    arg = "--syscall-numbers"
    output = "zx-syscall-numbers.h"
  },
  {
    arg = "--kernel-header"
    output = "kernel.inc"
  },
  {
    arg = "--kernel-wrappers"
    output = "kernel-wrappers.inc"
  },
  {
    arg = "--private-header"
    output = "syscalls.inc"
  },
]

go_generated = [
  {
    arg = "--go-syscall-stubs"
    output = "src/syscall/zx/syscalls_fuchsia.go"
  },
  {
    arg = "--go-syscall-arm64-asm"
    output = "src/syscall/zx/syscalls_fuchsia_arm64.s"
  },
  {
    arg = "--go-syscall-x86-asm"
    output = "src/syscall/zx/syscalls_fuchsia_amd64.s"
  },
  {
    arg = "--go-vdso-keys"
    output = "src/runtime/vdso_keys_fuchsia.go"
  },
  {
    arg = "--go-vdso-arm64-calls"
    output = "src/runtime/vdsocalls_fuchsia_arm64.s"
  },
  {
    arg = "--go-vdso-x86-calls"
    output = "src/runtime/vdsocalls_fuchsia_amd64.s"
  },
]

# Helper template to invokes Kazoo.
#
# Parameters
#
#  * public_gen_dir
#    - Required: The directory under which the public source will be
#      generated.
#    - Type: path
#
#  * private_gen_dir
#    - Required: The directory under which the private source will be
#      generated.
#    - Type: path
#
#  * go_gen_dir
#    - Optional: The directory under which the source specific to the go
#      runtime will be generated.
#    - Type: path
#
#  * exclude_testonly
#    - Optional: Whether to exclude generating test-only syscalls.
#    - Type: bool
#    - Default: true
#
#  * testonly
#    - Optional: Usual GN meaning.
#
template("kazoo") {
  zx_host_tool_action(target_name) {
    forward_variables_from(invoker,
                           [
                             "testonly",
                             "public_gen_dir",
                             "private_gen_dir",
                             "go_gen_dir",
                             "exclude_testonly",
                           ])

    if (!defined(exclude_testonly)) {
      exclude_testonly = true
    }

    visibility = [ ":*" ]

    tool = "//zircon/tools/kazoo"

    args = []
    categories = [
      {
        gen_dir = public_gen_dir
        generated = public_generated
      },
      {
        gen_dir = private_gen_dir
        generated = private_generated
      },
    ]
    if (defined(go_gen_dir)) {
      categories += [
        {
          gen_dir = go_gen_dir
          generated = go_generated
        },
      ]
    }
    if (exclude_testonly) {
      args += [ "--exclude=testonly" ]
    } else {
      categories += [
        {
          gen_dir = public_gen_dir
          generated = testonly_generated
        },
      ]
    }

    outputs = []
    foreach(category, categories) {
      foreach(gen, category.generated) {
        output = category.gen_dir + "/" + gen.output
        args += [
          gen.arg,
          rebase_path(output, root_build_dir),
        ]
        outputs += [ output ]
      }
    }

    deps = [ ":zx" ]
    sources = get_target_outputs(deps[0])
    assert(sources == [ sources[0] ])  # There can be only one.
    args += [ rebase_path(sources[0], root_build_dir) ]

    metadata = {
      generated_sources = rebase_path(outputs, root_build_dir)
    }
  }
}

kazoo("generate") {
  public_gen_dir = syscall_public_gen_dir
  private_gen_dir = syscall_private_gen_dir
  exclude_testonly = exclude_testonly_syscalls
}

#
# Golden testing.
#

golden_candidate_dir = "$target_gen_dir/golden-candidates"
public_golden_candidate_dir = "$golden_candidate_dir/public"
private_golden_candidate_dir = "$golden_candidate_dir/private"
go_golden_candidate_dir = "$golden_candidate_dir/go"

kazoo("all_outputs") {
  testonly = true
  public_gen_dir = public_golden_candidate_dir
  private_gen_dir = private_golden_candidate_dir
  go_gen_dir = go_golden_candidate_dir
  exclude_testonly = false
}

golden_files("tests") {
  testonly = true

  categories = [
    {
      gen_dir = public_golden_candidate_dir
      generated = public_generated + testonly_generated
      golden_subdir = "public"
    },
    {
      gen_dir = private_golden_candidate_dir
      generated = private_generated
      golden_subdir = "private"
    },
    {
      gen_dir = go_golden_candidate_dir
      generated = go_generated
      golden_subdir = "go"
    },
  ]

  comparisons = []
  foreach(category, categories) {
    foreach(gen, category.generated) {
      comparisons += [
        {
          golden =
              "//zircon/vdso/goldens/${category.golden_subdir}/" + gen.output
          candidate = category.gen_dir + "/" + gen.output
        },
      ]
    }
  }
  deps = [ ":all_outputs" ]
}
