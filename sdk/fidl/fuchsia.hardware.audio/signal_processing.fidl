// Copyright 2021 The Fuchsia Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
library fuchsia.hardware.audio;

using zx;

// TODO(fxbug.dev/64877): Complete parameters and types for processing elements.

const MAX_COUNT_PROCESSING_ELEMENTS uint32 = 64;
const MAX_COUNT_TOPOLOGIES uint32 = 64;
const MAX_COUNT_PROCESSING_ELEMENTS_EDGE_PAIRS uint32 = 64;
const MAX_STRING_SIZE uint32 = 256;

type ProcessingElementType = flexible enum {
    /// Vendor Specific. A type of processing element not covered by any subsequent type definition.
    VENDOR_SPECIFIC = 1;

    /// Define pipelines start/end.
    END_POINT = 2;

    /// Controls pipelines channel mixing and routing.
    CONNECTION_POINT = 3;

    /// Gain control, a.k.a. Volume control.
    GAIN = 4;

    /// Automatic Gain Control.
    /// Automatically maintains a suitable signal level regardless of variation of its input.
    AUTOMATIC_GAIN_CONTROL = 5;

    /// Automatic Gain Limiter.
    /// Automatically maintains a signal level below a level specified.
    /// Input below the level is unaffected, and peaks above the level are attenuated.
    AUTOMATIC_GAIN_LIMITER = 6;

    /// Dynamic Range Compression.
    /// Reduces the dynamic range by lowering higher signal levels and increasing lower signal
    /// levels.
    DYNAMIC_RANGE_COMPRESSION = 7;

    /// Mute.
    MUTE = 8;

    /// Delay.
    DELAY = 9;

    /// Equalizer.
    EQUALIZER = 10;

    /// Sample Rate Conversion.
    SAMPLE_RATE_CONVERSION = 11;
};

/// Parameters for a `ProcessingElement` with `type` equal to `VENDOR_SPECIFIC`.
type VendorSpecificParameters = table {};

type ProcessingElementParameters = flexible union {
    1: vendor_specific_parameters VendorSpecificParameters;
};

type Latency = flexible union {
    /// Latency added to the pipeline as a zx.duration.
    1: latency_time zx.duration;

    /// Latency added to the pipeline as a number of frames.
    2: latency_frames uint32;
};

type ProcessingElement = table {
    /// Unique ID for this element. The scope of this id is only within the `SignalProcessing`
    /// protocol lifespan, i.e. until the channel associated with the protocol is closed.
    /// Required.
    1: id uint64;

    /// Processing element type. Required.
    2: type ProcessingElementType;

    /// If included, parameters for the processing element.
    3: parameters ProcessingElementParameters;

    /// If included and true, the processing element is enabled.
    /// If not included or false, the processing element is disabled.
    4: is_enabled bool;

    /// If included and true, the processing element can be disabled via `ProcessingElementControl`.
    /// If not included or false, the processing element is always enabled.
    5: can_disable bool;

    /// If included, how much latency is added to the pipeline.
    6: latency Latency;

    /// If included, a textual description of the processing element.
    7: description string:MAX_STRING_SIZE;
};

/// Control for a `ProcessingElement` with `type` equal to `VENDOR_SPECIFIC`.
type VendorSpecificControl = table {};

/// Processing element control parameters.
/// The type of processing element control is defined by the type of parameters provided in this
/// union. Must match the type returned in the corresponding `ProcessingElementType` entry in the
/// corresponding `ProcessingElement`.
type ProcessingElementControlParameters = flexible union {
    1: vendor_specific_control VendorSpecificControl;
};

type ProcessingElementControl = table {
    /// Control for the processing element. Required.
    1: control ProcessingElementControlParameters;

    /// Enable/disable the process element. If the corresponding `ProcessingElement` returned
    /// `can_disable` equals to `false`, then this field has to be `true`.
    /// Required.
    2: enabled bool;
};

/// Edge pairs between processing elements used to define ordering in processing elements
/// arrangements.
type EdgePair = struct {
    processing_element_id_from uint64;
    processing_element_id_to uint64;
};

/// A `Topology` specifies one way processing elements are arranged within the hardware.
type Topology = table {
    /// Unique ID for this topology. The scope of this id is only within the `SignalProcessing`
    /// protocol lifespan, i.e. until the channel associated with the protocol is closed.
    /// Required.
    1: id uint64;

    /// Vector of processing elements edge pairs in this order.
    /// The ordering of processing elements with edge pairs form pipelines.
    /// To define multiple possible pipelines, return more `Topology` entries in `GetTopologies`.
    /// Required.
    2: processing_elements_edge_pairs vector<EdgePair>:MAX_COUNT_PROCESSING_ELEMENTS_EDGE_PAIRS;
};

/// For an overview see
/// [[Signal Processing Interface]](https://fuchsia.dev/fuchsia-src/concepts/drivers/driver_architectures/audio_drivers/audio_signal_processing).
protocol SignalProcessing {
    /// Returns a vector of supported processing elements.
    /// Must return one or more processing elements, or ZX_ERR_NOT_SUPORTED.
    GetProcessingElements() -> (struct {
        processing_elements vector<ProcessingElement>:MAX_COUNT_PROCESSING_ELEMENTS;
    }) error zx.status;

    /// Controls a processing element using a unique id returned by `GetProcessingElements`.
    /// Returns `ZX_ERR_INVALID_ARGS` if the `processing_element_id` does not match an id returned
    /// by `GetProcessingElements` or the type of `ProcessingElementControlParameters` does not
    /// match the `ProcessingElementType` of the processing element returned by
    /// `GetProcessingElements` for this id.
    ///
    /// `SetProcessingElement` may be called before or after non-`SignalProcessing` protocol calls.
    /// If called after non-`SignalProcessing` protocol calls then `SetProcessingElement` may or
    /// may not require renegotiation of the driver state as reached with calls of the protocol
    /// composing `SignalProcessing`, e.g. `Dai`.
    /// For instance, `SetProcessingElement` changing an `AGL` processing element's parameters
    /// may not require renegotiation of the `Dai` state because changing a gain parameter usually
    /// does not change the set of supported audio formats.
    /// By contrast, if `SetProcessingElement` changes the parameters of a `CONNECTION_POINT`
    /// element, the change may require renegotiation becuase it may invalidate the set of
    /// supported formats returned in a previous `GetDaiFormats` `Dai` protocol call.
    ///
    /// It is the driver's job to determine when renegotiation is required. If renegotiation is
    /// required, then `SetProcessingElement` must return ZX_ERR_BAD_STATE and the client must
    /// close the protocol channel such that the protocol negotiations are started over.
    /// The client then must make the `SetProcessingElement` call that returned ZX_ERR_BAD_STATE
    //// before any non-`SignalProcessing` protocol calls.
    SetProcessingElement(struct {
        processing_element_id uint64;
        control ProcessingElementControl;
    }) -> (struct {}) error zx.status;

    /// Returns a vector of supported topologies.
    /// Must return one or more topologies, or ZX_ERR_NOT_SUPORTED.
    /// If more than one topology is returned, then the client may choose any of the topologies from
    /// the list with `SetTopology`.
    /// If only one topology is returned, then the topology definition is informational only since
    /// the one and only topology used can't be changed with `SetTopology`.
    /// If `GetProcessingElements` returns one or more elements, `GetTopologies` must return one or
    /// more topologies.
    GetTopologies() -> (struct {
        topologies vector<Topology>:MAX_COUNT_TOPOLOGIES;
    }) error zx.status;

    /// Sets the topology to be used using an id to the vector returned by `GetTopologies`.
    /// If `GetTopologies` returns more than one `Topology`, `SetTopology` must be called to put the
    /// driver in an initialized state. If `GetTopologies` returns only one `Topology`,
    /// `SetTopology` is optional and has no effect.
    ///
    /// `SetTopology` may be called before or after non-`SignalProcessing` protocol calls.
    /// If called after non-`SignalProcessing` protocol calls, then `SetTopology` may return
    /// ZX_ERR_BAD_STATE to indicate that the operation can not proceed without renegotiation of the
    /// driver state. See `SetProcessingElement` for further discussion.
    SetTopology(struct {
        topology_id uint64;
    }) -> (struct {}) error zx.status;
};
