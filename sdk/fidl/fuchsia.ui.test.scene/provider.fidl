// Copyright 2022 The Fuchsia Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

library fuchsia.ui.test.scene;

using fuchsia.ui.app;
using fuchsia.ui.observation.geometry;
using zx;

/// A tool to set up the scene, and add instrumentation, in a uniform way.
@discoverable
protocol Provider {

    /// Elicits the server to request a view using the
    /// `fuchsia.ui.app.ViewProvider` handle provided, and attach it to the scene.
    ///
    /// RETURN VALUE
    ///
    /// This method returns the KOID for the client view's `ViewRef`.
    ///
    /// SYNCHRONIZATION
    ///
    /// This call returns as soon as the client `ViewRef` is available. Note that this
    /// signal does NOT necessarily indicate that the view has been attached to the
    /// scene.
    ///
    /// LIFE CYCLE
    ///
    /// Clients can safely drop the `Provider` connection once `AttachClientView` has
    /// returned.
    AttachClientView(resource table {
        1: view_provider client_end:fuchsia.ui.app.ViewProvider;
    }) -> (struct {
        view_ref_koid zx.koid;
    });

    /// Registers a geometry observer on the client's behalf.
    ///
    /// The geometry observer registered on behalf of the client will currently be
    /// scoped globally; we intend to restrict the scope to the client view's subtree
    /// as soon as it's feasible to do so.
    ///
    /// For more information on geometry observation, see the documentation
    /// in //sdk/fidl/fuchsia.ui.observation.geometry/provider.fidl.
    RegisterGeometryObserver(resource struct {
        geometry_observer server_end:fuchsia.ui.observation.geometry.Provider;
    }) -> ();
};
