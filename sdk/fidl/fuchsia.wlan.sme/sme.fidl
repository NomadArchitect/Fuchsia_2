// Copyright 2018 The Fuchsia Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
library fuchsia.wlan.sme;

using fuchsia.wlan.common;
using fuchsia.wlan.ieee80211 as ieee80211;
using fuchsia.wlan.internal;
using fuchsia.wlan.mesh;

/// Security protection which should mirror the Protection enum defined in wlan lib common
type Protection = strict enum {
    UNKNOWN = 0;
    OPEN = 1;
    WEP = 2;
    WPA1 = 3;
    WPA1_WPA2_PERSONAL_TKIP_ONLY = 4;
    WPA2_PERSONAL_TKIP_ONLY = 5;
    WPA1_WPA2_PERSONAL = 6;
    WPA2_PERSONAL = 7;
    WPA2_WPA3_PERSONAL = 8;
    WPA3_PERSONAL = 9;
    WPA2_ENTERPRISE = 10;
    WPA3_ENTERPRISE = 11;
};

type UserDisconnectReason = strict enum {
    UNKNOWN = 0;
    FAILED_TO_CONNECT = 1;
    FIDL_CONNECT_REQUEST = 2;
    FIDL_STOP_CLIENT_CONNECTIONS_REQUEST = 3;
    PROACTIVE_NETWORK_SWITCH = 4;
    DISCONNECT_DETECTED_FROM_SME = 5;
    REGULATORY_REGION_CHANGE = 6;
    STARTUP = 7;
    NETWORK_UNSAVED = 8;
    NETWORK_CONFIG_UPDATED = 9;

    // The following reasons should only be used for development and testing.
    WLANSTACK_UNIT_TESTING = 124;
    WLAN_SME_UNIT_TESTING = 125;
    WLAN_SERVICE_UTIL_TESTING = 126;
    WLAN_DEV_TOOL = 127;
};

type BssInfo = struct {
    bssid array<uint8, 6>;
    ssid vector<uint8>:ieee80211.MAX_SSID_BYTE_LEN;
    rssi_dbm int8;
    snr_db int8;
    channel fuchsia.wlan.common.WlanChan;
    protection Protection;
    compatible bool;
    bss_desc fuchsia.wlan.internal.BssDescription;
};

type ScanErrorCode = strict enum {
    NOT_SUPPORTED = 1;
    INTERNAL_ERROR = 2;
    SHOULD_WAIT = 3;
    CANCELED_BY_DRIVER_OR_FIRMWARE = 4;
};

type ScanError = struct {
    code ScanErrorCode;
    message string;
};

protocol ScanTransaction {
    // Can be called several times to deliver incremental scan results
    -> OnResult(struct {
        aps vector<BssInfo>;
    });
    -> OnFinished();
    -> OnError(struct {
        error ScanError;
    });
};

type ScanRequest = strict union {
    1: active ActiveScanRequest;
    2: passive PassiveScanRequest;
};

type PassiveScanRequest = struct {};

type ActiveScanRequest = struct {
    // The SSIDs to scan for. Leave empty for a wildcard active scan.
    ssids vector<vector<uint8>:ieee80211.MAX_SSID_BYTE_LEN>:16;
    // Channels to scan on. Leave empty for all supported channels.
    channels vector<uint8>:500;
};

type ConnectResultCode = strict enum {
    // Connected successfully
    SUCCESS = 0;
    // The request was superseded by another connect or disconnect command
    CANCELED = 1;
    // Failed to join for some reason
    FAILED = 2;
    // Failed to join because the authenticator rejected the credentials.
    CREDENTIAL_REJECTED = 3;
};

protocol ConnectTransaction {
    // Could add more events here to notify the client of the progress
    -> OnFinished(struct {
        code ConnectResultCode;
    });
};

type RadioConfig = struct {
    override_phy bool;
    phy fuchsia.wlan.common.PHY;
    override_cbw bool;
    cbw fuchsia.wlan.common.CBW;
    override_primary_chan bool;
    primary_chan uint8;
};

/// Empty struct used as credential value for open networks.
type Empty = struct {};

/// Information required to connect to a protected network.
type Credential = flexible union {
    /// The network does not use credentials (open networks).
    1: none Empty;

    /// Plaintext password (handled as binary data).
    2: password bytes;

    /// Hash representation of the network passphrase (handled as binary data).
    3: psk bytes;
};

type ConnectRequest = struct {
    ssid vector<uint8>:ieee80211.MAX_SSID_BYTE_LEN;
    bss_desc fuchsia.wlan.internal.BssDescription;
    /// Informs SME whether multiple candidates were available, for metrics.
    multiple_bss_candidates bool;
    credential Credential;

    radio_cfg RadioConfig;
    /// Deprecated. SME makes internal decision on whether to perform a passive or active
    /// scan during connect. Setting this field will not affect anything for FullMAC, but
    /// currently SoftMAC still honor this argument.
    deprecated_scan_type fuchsia.wlan.common.ScanType;
};

type ClientStatusResponse = struct {
    connected_to box<BssInfo>;
    // If non-empty, this is the SSID we are currently trying to connect to
    connecting_to_ssid vector<uint8>:ieee80211.MAX_SSID_BYTE_LEN;
};

protocol ClientSme {
    Scan(resource struct {
        req ScanRequest;
        txn server_end:ScanTransaction;
    });
    Connect(resource struct {
        req ConnectRequest;
        txn server_end:<ConnectTransaction, optional>;
    });
    Disconnect(struct {
        reason UserDisconnectReason;
    }) -> ();
    Status() -> (struct {
        resp ClientStatusResponse;
    });
    WmmStatus() -> (struct {
        resp fuchsia.wlan.internal.WmmStatusResponse;
    }) error int32;
};

type ApConfig = struct {
    ssid vector<uint8>:ieee80211.MAX_SSID_BYTE_LEN;
    password vector<uint8>:64;
    radio_cfg RadioConfig;
};

type StartApResultCode = strict enum {
    // TODO(porce): Fix naming style.
    SUCCESS = 0;
    ALREADY_STARTED = 1;
    INTERNAL_ERROR = 2;
    CANCELED = 3;
    TIMED_OUT = 4;
    PREVIOUS_START_IN_PROGRESS = 5;
    INVALID_ARGUMENTS = 6;
    DFS_UNSUPPORTED = 7;
};

type StopApResultCode = strict enum {
    SUCCESS = 0;
    INTERNAL_ERROR = 1;
    TIMED_OUT = 2;
};

type Ap = struct {
    ssid vector<uint8>:ieee80211.MAX_SSID_BYTE_LEN;
    channel uint8;
    num_clients uint16;
};

type ApStatusResponse = struct {
    running_ap box<Ap>;
};

protocol ApSme {
    Start(struct {
        config ApConfig;
    }) -> (struct {
        code StartApResultCode;
    });
    Stop() -> (struct {
        code StopApResultCode;
    });
    Status() -> (struct {
        resp ApStatusResponse;
    });
};

type MeshConfig = struct {
    mesh_id vector<uint8>:32;
    channel uint8;
};

type JoinMeshResultCode = strict enum {
    SUCCESS = 0;
    CANCELED = 1;
    INTERNAL_ERROR = 2;
    INVALID_ARGUMENTS = 3;
    DFS_UNSUPPORTED = 4;
};

type LeaveMeshResultCode = strict enum {
    SUCCESS = 0;
    INTERNAL_ERROR = 1;
};

type GetMeshPathTableResultCode = strict enum {
    SUCCESS = 0;
    INTERNAL_ERROR = 1;
};

protocol MeshSme {
    Join(struct {
        config MeshConfig;
    }) -> (struct {
        code JoinMeshResultCode;
    });
    Leave() -> (struct {
        code LeaveMeshResultCode;
    });
    GetMeshPathTable() -> (struct {
        code GetMeshPathTableResultCode;
        path fuchsia.wlan.mesh.MeshPathTable;
    });
};
