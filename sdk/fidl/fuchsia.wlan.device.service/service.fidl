// Copyright 2018 The Fuchsia Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
library fuchsia.wlan.device.service;

using fuchsia.wlan.common;
using fuchsia.wlan.device;
using fuchsia.wlan.minstrel;
using fuchsia.wlan.sme;
using fuchsia.wlan.stats;

type PhyListItem = struct {
    phy_id uint16;
    path string;
};

type ListPhysResponse = struct {
    phys vector<PhyListItem>;
};

type QueryPhyRequest = struct {
    phy_id uint16;
};

type QueryPhyResponse = struct {
    info fuchsia.wlan.device.PhyInfo;
};

type IfaceListItem = struct {
    iface_id uint16;
};

type QueryIfaceResponse = struct {
    /// The role the iface is currently operating in, e.g., client role.
    role fuchsia.wlan.device.MacRole;
    /// The iface's global ID.
    id uint16;
    /// Iface's PHY ID.
    phy_id uint16;
    /// Local ID assigned by this iface's PHY.
    phy_assigned_id uint16;
    /// The iface's MAC.
    mac_addr array<uint8, 6>;
    /// The driver features supported on this iface.
    driver_features vector<fuchsia.wlan.common.DriverFeature>:32;
};

type ListIfacesResponse = struct {
    ifaces vector<IfaceListItem>;
};

type CreateIfaceRequest = struct {
    phy_id uint16;
    role fuchsia.wlan.device.MacRole;
    mac_addr bytes:<6, optional>;
};

type CreateIfaceResponse = struct {
    iface_id uint16;
};

type DestroyIfaceRequest = struct {
    iface_id uint16;
};

type GetCountryResponse = struct {
    alpha2 array<byte, 2>;
};

type SetCountryRequest = struct {
    phy_id uint16;
    alpha2 array<byte, 2>;
};

type ClearCountryRequest = struct {
    phy_id uint16;
};

protocol DeviceWatcher {
    -> OnPhyAdded(struct {
        phy_id uint16;
    });
    -> OnPhyRemoved(struct {
        phy_id uint16;
    });
    -> OnIfaceAdded(struct {
        iface_id uint16;
    });
    -> OnIfaceRemoved(struct {
        iface_id uint16;
    });
};

@discoverable
protocol DeviceService {
    // Phy methods
    ListPhys() -> (struct {
        resp ListPhysResponse;
    });
    QueryPhy(struct {
        req QueryPhyRequest;
    }) -> (struct {
        status int32;
        resp box<QueryPhyResponse>;
    });
    // 3-15: reserved

    // Iface methods
    ListIfaces() -> (struct {
        resp ListIfacesResponse;
    });
    QueryIface(struct {
        iface_id uint16;
    }) -> (struct {
        status int32;
        resp box<QueryIfaceResponse>;
    });
    CreateIface(struct {
        req CreateIfaceRequest;
    }) -> (struct {
        status int32;
        resp box<CreateIfaceResponse>;
    });
    // 19: reserved for StartIface
    // 20: reserved for StopIface
    DestroyIface(struct {
        req DestroyIfaceRequest;
    }) -> (struct {
        status int32;
    });
    GetClientSme(resource struct {
        iface_id uint16;
        sme server_end:fuchsia.wlan.sme.ClientSme;
    }) -> (struct {
        status int32;
    });
    GetApSme(resource struct {
        iface_id uint16;
        sme server_end:fuchsia.wlan.sme.ApSme;
    }) -> (struct {
        status int32;
    });
    GetMeshSme(resource struct {
        iface_id uint16;
        sme server_end:fuchsia.wlan.sme.MeshSme;
    }) -> (struct {
        status int32;
    });
    GetIfaceStats(struct {
        iface_id uint16;
    }) -> (struct {
        status int32;
        stats box<fuchsia.wlan.stats.IfaceStats>;
    });
    GetMinstrelList(struct {
        iface_id uint16;
    }) -> (struct {
        status int32;
        peers fuchsia.wlan.minstrel.Peers;
    });
    GetMinstrelStats(struct {
        iface_id uint16;
        peer_addr array<uint8, 6>;
    }) -> (struct {
        status int32;
        peer box<fuchsia.wlan.minstrel.Peer>;
    });

    WatchDevices(resource struct {
        watcher server_end:DeviceWatcher;
    });
    GetCountry(struct {
        phy_id uint16;
    }) -> (struct {
        resp GetCountryResponse;
    }) error int32;
    SetCountry(struct {
        req SetCountryRequest;
    }) -> (struct {
        status int32;
    });
    ClearCountry(struct {
        req ClearCountryRequest;
    }) -> (struct {
        status int32;
    });
};

@discoverable
protocol DeviceMonitor {
    // Phy methods
    ListPhys() -> (struct {
        phy_list vector<uint16>;
    });
    GetDevPath(struct {
        phy_id uint16;
    }) -> (struct {
        dev_path string:optional;
    });
    GetSupportedMacRoles(struct {
        phy_id uint16;
    }) -> (struct {
        supported_mac_roles vector<fuchsia.wlan.device.MacRole>:<8, optional>;
    });
    WatchDevices(resource struct {
        watcher server_end:DeviceWatcher;
    });
    GetCountry(struct {
        phy_id uint16;
    }) -> (struct {
        resp GetCountryResponse;
    }) error int32;
    SetCountry(struct {
        req SetCountryRequest;
    }) -> (struct {
        status int32;
    });
    ClearCountry(struct {
        req ClearCountryRequest;
    }) -> (struct {
        status int32;
    });

    // Iface methods
    CreateIface(struct {
        req CreateIfaceRequest;
    }) -> (struct {
        status int32;
        resp box<CreateIfaceResponse>;
    });
    DestroyIface(struct {
        req DestroyIfaceRequest;
    }) -> (struct {
        status int32;
    });
};
