// Copyright 2019 The Fuchsia Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
library fuchsia.developer.remotecontrol;

using fuchsia.diagnostics as diagnostics;
using fuchsia.io as io;
using zx;

const MAX_NUM_MATCHES uint16 = 250;
const MAX_CONNECT_MATCHES uint16 = 5;

type RebootType = strict enum {
    // Standard reboot.
    REBOOT = 1;
    // Reboots into recovery mode.
    RECOVERY = 2;
    // Reboots into the bootloader.
    BOOTLOADER = 3;
};

@discoverable
protocol RemoteControl {
    // Connects to the Hub root directory. The server side will be connected to
    // a fuchsia.io.Directory handle, which can then be connected to on the
    // client side via a Directory proxy.
    //
    // This is, currently, a read-only view into the hub.
    OpenHub(resource struct {
        server server_end:io.Directory;
    }) -> (struct {}) error zx.status;

    IdentifyHost() -> (struct {
        response IdentifyHostResponse;
    }) error IdentifyHostError;

    // Connects a channel to a service, given a selector and a channel iff the selector
    // matches exactly one service on the system.
    // If successful, returns information about the service connected to.
    Connect(resource struct {
        selector diagnostics.Selector;
        service_chan zx.handle:CHANNEL;
    }) -> (struct {
        match ServiceMatch;
    }) error ConnectError;

    Select(struct {
        selector diagnostics.Selector;
    }) -> (struct {
        matches vector<ServiceMatch>:MAX_NUM_MATCHES;
    }) error SelectError;

    // AddId adds an identifier that can be recovered from IdentifyHost in order
    // to match this peer against a list of possible source peers. Callers are
    // expected to pick IDs randomly across the ID space, and only to add new
    // IDs to help identify transport or physical layer topologies. ffx uses
    // this API to pair an RCS instance discovered on Overnet to a device that
    // was discovered over mdns, for example.
    AddId(struct {
        id uint64;
    }) -> ();
};
