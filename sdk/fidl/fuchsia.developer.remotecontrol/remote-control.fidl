// Copyright 2019 The Fuchsia Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
library fuchsia.developer.remotecontrol;

using fuchsia.diagnostics as diagnostics;
using fuchsia.net as net;
using fuchsia.sys2 as sys2;
using fuchsia.kernel as kernel;
using fuchsia.boot as boot;
using zx;

const MAX_NUM_MATCHES uint16 = 250;
const MAX_CONNECT_MATCHES uint16 = 5;

type RebootType = strict enum {
    // Standard reboot.
    REBOOT = 1;
    // Reboots into recovery mode.
    RECOVERY = 2;
    // Reboots into the bootloader.
    BOOTLOADER = 3;
};

type TunnelError = strict enum {
    // Couldn't connect to the address to forward.
    CONNECT_FAILED = 1;
    // Something was wrong with the socket which was being tunneled to.
    SOCKET_FAILED = 2;
    // Something was wrong with the ForwardCallback which was passed.
    CALLBACK_ERROR = 3;
};

type ConnectError = strict enum : uint32 {
    // The selector provided to the Connect method is invalid.
    BAD_SELECTOR = 1;
    // The component instance was not found in the topology.
    INSTANCE_NOT_FOUND = 2;
    // The component instance could not be resolved.
    INSTANCE_CANNOT_RESOLVE = 3;
    // The component instance does not expose the specified protocol.
    PROTOCOL_NOT_EXPOSED = 4;
    // An internal error occurred when invoking Connect.
    INTERNAL = 5;
};

@discoverable
protocol RemoteControl {
    /// Returns the input.
    EchoString(struct {
        value string:255;
    }) -> (struct {
        response string:255;
    });

    /// Connects to the root [`fuchsia.sys2/RealmExplorer`] protocol.
    RootRealmExplorer(resource struct {
        server server_end:sys2.RealmExplorer;
    }) -> (struct {}) error zx.status;

    /// Connects to the root [`fuchsia.sys2/RealmQuery`] protocol.
    RootRealmQuery(resource struct {
        server server_end:sys2.RealmQuery;
    }) -> (struct {}) error zx.status;

    /// Connects to the root [`fuchsia.sys2/LifecycleController`] protocol.
    RootLifecycleController(resource struct {
        server server_end:sys2.LifecycleController;
    }) -> (struct {}) error zx.status;

    /// Connects to the root [`fuchsia.sys2/RouteValidator`] protocol.
    RootRouteValidator(resource struct {
        server server_end:sys2.RouteValidator;
    }) -> (struct {}) error zx.status;

    // Connects to the [`fuchsia.kernel/Stats`] protocol
    KernelStats(resource struct {
        server server_end:kernel.Stats;
    }) -> (struct {}) error zx.status;

    // Connects to the [`fuchsia.boot/Arguments`] protocol
    BootArguments(resource struct {
        server server_end:boot.Arguments;
    }) -> (struct {}) error zx.status;

    IdentifyHost() -> (struct {
        response IdentifyHostResponse;
    }) error IdentifyHostError;

    // Connects a channel to a protocol capability exposed by a component instance.
    // The selector cannot use wildcards and must connect to the `expose` namespace.
    Connect(resource struct {
        selector diagnostics.Selector;
        service_chan zx.handle:CHANNEL;
    }) -> (struct {}) error ConnectError;

    // AddId adds an identifier that can be recovered from IdentifyHost in order
    // to match this peer against a list of possible source peers. Callers are
    // expected to pick IDs randomly across the ID space, and only to add new
    // IDs to help identify transport or physical layer topologies. ffx uses
    // this API to pair an RCS instance discovered on Overnet to a device that
    // was discovered over mdns, for example.
    AddId(struct {
        id uint64;
    }) -> ();

    // Establishes a TCP connection to the given address and forwards traffic through the given
    // socket.
    ForwardTcp(resource struct {
        addr net.SocketAddress;
        socket zx.handle:SOCKET;
    }) -> (struct {}) error TunnelError;

    // Listens on a TCP port and forwards any incoming connections to newly-created sockets which
    // are passed back via the callback.
    ReverseTcp(resource struct {
        addr net.SocketAddress;
        client client_end:ForwardCallback;
    }) -> (struct {}) error TunnelError;
};

protocol ForwardCallback {
    Forward(resource struct {
        socket zx.handle:SOCKET;
        addr net.SocketAddress;
    });
};
