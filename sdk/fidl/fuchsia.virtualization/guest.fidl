// Copyright 2018 The Fuchsia Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
library fuchsia.virtualization;

using zx;

type GuestError = strict enum {
    /// Catch all VMM error.
    INTERNAL_ERROR = 1;

    /// Devices that expose endpoints via the guest client API must be enabled via the config to
    /// be used.
    VSOCK_NOT_PRESENT = 2;
    BALLOON_NOT_PRESENT = 3;

    /// Stop was called by the guest manager, forcing the guest to exit.
    SHUTDOWN_FORCED = 4;

    /// Run was called on an already running guest.
    ALREADY_RUNNING = 5;

    /// Run was called before a guest was created.
    NOT_CREATED = 6;
};

/// The guest control plane allowing for creating, starting, and stopping the guest.
@discoverable
protocol GuestLifecycle {
    /// Create a VMM configured with the provided config. This instantiates all devices and loads
    /// the kernel without starting the VCPU or device dispatch loops.
    Create(resource struct {
        guest_config GuestConfig;
    }) -> (struct {}) error GuestError;

    /// Start the VCPU and device dispatch loops. This will not return until the dispatch loops
    /// exit. On a clean shutdown (either guest or client initiated) this will return success.
    ///
    /// If forced to stop by the guest manager calling stop, a SHUTDOWN_FORCED error will be
    /// returned. This will also return any runtime error that forces the guest to stop.
    Run() -> (struct {}) error GuestError;

    /// Stop a running VMM. Returns once the dispatch loops have stopped. After Stop returns,
    /// Create and then Run can be called again.
    Stop() -> ();
};

/// The guest client API providing high level access to guest features.
@discoverable
protocol Guest {
    /// Get a guest console.
    ///
    /// The details regarding what output is produced and what input is accepted
    /// are determined by each guest, but will typically be a read/write socket
    /// with a shell.
    ///
    /// Returns ZX_ERR_UNAVAILABLE if the guest has no configured console.
    GetConsole() -> (resource struct {
        socket zx.handle:SOCKET;
    }) error zx.status;

    /// Get the socket for low-level guest debug logs.
    ///
    /// The details regarding what output is produced and what input is accepted
    /// are determined by each guest, but will typically be a read-only socket
    /// with the guest kernel's serial logs.
    GetSerial() -> (resource struct {
        socket zx.handle:SOCKET;
    }) error zx.status;

    /// Get the vsock endpoint for the guest.
    ///
    /// This endpoint can be used to register listeners for guest initiated connections, and
    /// to initiate connections from a client. If listeners need to be registered before the guest
    /// starts so that they are immediately available, set them via the guest config instead of
    /// using this endpoint.
    ///
    /// Returns error VSOCK_NOT_PRESENT if the guest was started without a vsock device.
    GetHostVsockEndpoint(resource struct {
        endpoint server_end:HostVsockEndpoint;
    }) -> (struct {}) error GuestError;

    /// Get the balloon controller endpoint for the guest.
    ///
    /// Returns error BALLOON_NOT_PRESENT if the guest was started without a balloon device.
    GetBalloonController(resource struct {
        controller server_end:BalloonController;
    }) -> (struct {}) error GuestError;
};
