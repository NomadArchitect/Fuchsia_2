// Copyright 2022 The Fuchsia Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
library fuchsia.virtualization;

using zx;

type GuestManagerError = strict enum {
    /// The guest manager failed to parse the configuration from the guest package, or it was
    /// otherwise invalid.
    BAD_CONFIG = 1;

    /// The guest is already running. Stop the guest before attempting to launch again.
    ALREADY_RUNNING = 2;

    /// Attempted to connect to a non-running guest.
    NOT_RUNNING = 3;

    /// Failed to start the guest. See VMM component logs for a more detailed reason.
    START_FAILURE = 4;
};

type GuestStatus = strict enum {
    /// Initial state when the guest manager is created but before the guest has ever been run.
    NOT_STARTED = 1;

    /// A client has instructed the guest manager to begin launching the guest.
    STARTING = 2;

    /// The guest's dispatch loops are running. This is the expected steady state.
    RUNNING = 3;

    /// A client has instructed the guest manager to begin stopping the guest. If a non-zero
    /// has been provided, the guest manager may attempt to gracefully shutdown the guest.
    STOPPING = 4;

    /// The guest is no longer running. A stop reason may be present if the guest stopped due to
    /// an error.
    STOPPED = 5;

    /// The VMM component terminated unexpectedly. Attempting to launch the guest again will
    /// restart the component.
    VMM_UNEXPECTED_TERMINATION = 6;
};

/// An informational only subset of the GuestConfig. If adding new non-handle entries to the
/// GuestConfig, consider also adding them here.
type GuestDescriptor = table {
    /// Number of guest VCPUs.
    1: num_cpus uint8;

    /// Guest memory in bytes.
    2: guest_memory uint64;

    /// Whether the guest was started with the given virtual device.
    3: wayland bool;
    4: magma bool;
    5: network bool;
    6: balloon bool;
    7: console bool;
    8: gpu bool;
    9: rng bool;
   10: vsock bool;
   11: sound bool;
};

type GuestInfo = table {
    /// The current state of the guest.
    1: guest_status GuestStatus;

    /// Current uptime of the guest.
    2: uptime zx.duration;

    /// A subset of the config used to start the guest.
    3: guest_descriptor GuestDescriptor;

    /// Contains the last value reported to the guest manager if stopped due to an error.
    4: stop_error GuestError;
};

@discoverable
protocol GuestManager {
    /// Launch a new guest instance.
    ///
    /// Possible errors:
    ///     - BAD_CONFIG: Failed to parse the config from the guest package, or other config
    ///         problems detected by the guest manager.
    ///     - ALREADY_RUNNING: The guest is already running. Stop the guest before launching again.
    ///     - START_FAILURE: Failed to initialize the VMM and devices, and start the guest. See
    ///         component logs for a more specific failure.
    LaunchGuest(resource struct {
        guest_config GuestConfig;
        controller server_end:Guest;
    }) -> (struct {}) error GuestManagerError;

    /// Forcibly shuts down a running guest. After ForceShutdownGuest returns, LaunchGuest can be
    /// used to launch another guest.
    ForceShutdownGuest() -> ();

    /// Connect to a currently running guest.
    ///
    /// Possible errors:
    ///     - NOT_RUNNING: Attempted to connect to a guest in a non-running state. Ensure the guest
    ///         has launched before attempting to reconnect.
    ConnectToGuest(resource struct {
        controller server_end:Guest;
    }) -> (struct {}) error GuestManagerError;

    /// Query guest info
    GetGuestInfo() -> (resource struct {
        guest_info GuestInfo;
    });
};

// TODO(fxbug.dev/100515): Reconsider the use of composition here
@discoverable
protocol ZirconGuestManager {
    compose GuestManager;
};

@discoverable
protocol DebianGuestManager {
    compose GuestManager;
};

@discoverable
protocol TerminaGuestManager {
    compose GuestManager;
};
