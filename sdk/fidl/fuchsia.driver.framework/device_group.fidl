// Copyright 2022 The Fuchsia Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
library fuchsia.driver.framework;

/// Represents the conditions for evaluating the device
/// group properties.
type Condition = strict enum {
    ACCEPT = 0;
    REJECT = 1;
};

/// Represents a device group node property.
type DeviceGroupProperty = struct {
    /// Property key.
    key NodePropertyKey;

    /// Condition for evaluating the property values in
    /// the matching process. The values are accepted or
    /// rejected based on the condition.
    condition Condition;

    /// A list of property values. Must not be empty. The property
    /// values must be the same type.
    values vector<NodePropertyValue>:MAX_PROPERTY_COUNT;
};

/// A struct that represents a node in device group transformation.
type TransformNode = table {
    /// The node properties used for matching the nodes in a composite
    /// driver.
    1: properties vector<NodeProperty>:MAX_PROPERTY_COUNT;
};

/// Struct that represents a node in a device group.
type DeviceGroupNode = struct {
    name string:MAX_NODE_NAME_LENGTH;

    /// Properties of the node. Keys must be unique.
    properties vector<DeviceGroupProperty>:MAX_PROPERTY_COUNT;
};

/// Struct that represents a device group.
type DeviceGroup = table {
    /// The device group's topological path.
    1: topological_path string:MAX;

    /// The nodes in the device group. The driver index matches bind properties
    /// to these nodes. Must not be empty. The first node is the primary node.
    2: nodes vector<DeviceGroupNode>:MAX;

    /// The list of nodes that the device group transforms into. The driver index
    /// matches a composite driver to the transformation. Must not be empty.
    /// The first node is the primary node.
    3: transformation vector<TransformNode>:MAX;
};
