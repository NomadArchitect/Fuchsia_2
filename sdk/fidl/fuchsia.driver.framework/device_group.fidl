// Copyright 2022 The Fuchsia Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
library fuchsia.driver.framework;

/// Represents a bind rule condition.
type Condition = strict enum {
    ACCEPT = 0;
    REJECT = 1;
};

/// Represents a bind rule in a device group node.
type BindRule = struct {
    /// Property key.
    key NodePropertyKey;

    /// Condition for evaluating the property values in
    /// the matching process. The values are accepted or
    /// rejected based on the condition.
    condition Condition;

    /// A list of property values. Must not be empty. The property
    /// values must be the same type.
    values vector<NodePropertyValue>:MAX_PROPERTY_COUNT;
};

/// Represents a device group node.
type DeviceGroupNode = struct {
    /// Node's bind rules. Property keys must be unique. Must not be empty.
    bind_rules vector<BindRule>:MAX_PROPERTY_COUNT;

    /// Bind properties for matching against a composite driver's bind rules.
    /// Keys must be unique.
    bind_properties vector<NodeProperty>:MAX_PROPERTY_COUNT;
};

/// Struct that represents a device group.
type DeviceGroup = table {
    /// The device group's topological path.
    1: topological_path string:MAX;

    /// The nodes in the device group. Must not be empty. The first node is
    /// the primary node.
    2: nodes vector<DeviceGroupNode>:MAX;
};

/// Error codes for the DeviceGroupManager protocol.
type DeviceGroupError = strict enum {
    /// An argument of the device group was not provided.
    MISSING_ARGS = 1;
    /// The given device group's `nodes` is empty.
    EMPTY_NODES = 2;
    /// The `topological_path` in the given device group is a duplicate
    /// of an already created device group.
    ALREADY_EXISTS = 3;
};

/// Protocol through which board drivers can create device groups.
///
/// Device groups are created at runtime to dynamically bridge the
/// static bind rules of a composite driver with the dynamic bind properties
/// of nodes in the system so that the driver bind rules are more generic and reusable.
@discoverable
protocol DeviceGroupManager {
    /// Creates the given device group in the driver framework.
    CreateDeviceGroup(DeviceGroup) -> (struct {}) error DeviceGroupError;
};
