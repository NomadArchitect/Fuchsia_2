// Copyright 2022 The Fuchsia Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

library fuchsia.hardware.adb;

using zx;

/// ADB USB interface status flags.
type StatusFlags = flexible bits : uint32 {
    ONLINE = 0x1;
};

/// USB ADB implementation protocol. The USB ADB driver would start serving this interface on the
/// server endpoint passed to a driver during Device::Start.
protocol UsbAdbImpl {
    /// Request transmission of the packet in |data|.
    ///
    /// Return status indicates queue state:
    ///   ZX_OK: Packet has been enqueued.
    ///   Other: Packet could not be enqueued.
    /// Upon a return of ZX_OK, the packet has been enqueued, but no information is returned as to
    /// the completion state of the transmission itself.
    QueueTx(struct {
        data vector<uint8>:MAX;
    }) -> (struct {}) error zx.status;

    /// Request to receive data. This method ensures flow control by allowing the client to queue
    /// |Receive| requests proactively. The driver will complete the requests only when data is
    /// available.
    ///
    /// Return data or error.
    ///    ZX_OK: Success. data is valid.
    ///    ZX_ERR_BAD_STATE: Subsequent requests will not succeed as well.
    /// Other error codes are from underlying subsystem and the caller should retry |Receive| in
    /// that case.
    Receive() -> (struct {
        data vector<uint8>:MAX;
    }) error zx.status;

    /// Event triggered when USB ADB interface status changes.
    -> OnStatusChanged(struct {
        status StatusFlags;
    });
};

/// Device interface for USB ADB. The device manages the USB endpoints needed for ADB.
@discoverable
protocol Device {
    /// Start USB ADB protocol with |interface|.
    Start(resource struct {
        interface server_end:UsbAdbImpl;
    }) -> (struct {}) error zx.status;
};
