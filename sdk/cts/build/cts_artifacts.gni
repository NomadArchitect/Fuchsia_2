# Copyright 2021 The Fuchsia Authors. All rights reserved.
# Use of this source code is governed by a BSD-style license that can be
# found in the LICENSE file.

import("//build/sdk/sdk_molecule.gni")

import("//sdk/cts/build/cts_copy_to_sdk.gni")

# Collects build outputs for inclusion in the CTS SDK.
#
# This is a helper template that copies fuchsia test package archives
# and stores them in the proper place in the resulting CTS SDK.
#
# To support execution in Fuchsia infrastructure, all prebuilt .far files
# must live in the same location. This template saves the resulting artifacts
# in the root directory of the resulting SDK.
#
# Parameters
#
#  targets (optional)
#    A list of targets declared earlier in the same file which generate
#    output files that should be included in the CTS SDK, (for example, Fuchsia
#    package archives). If data is not provided, targets is required.
#    Type: list(label)
#
#  data (optional)
#    A list of metadata files to include. Filepaths are relative to the
#    target directory. This should not be used for source files: the directory
#    structure is not preserved in the output. If targets is not
#    provided, data is required.
#    Type: list(string)
#
#  dest (optional)
#    The location to store the data or targets' output files in the resulting
#    CTS archive. If not provided, all targets' output files will default to
#    <cts root>
#    Type: string
#
#  testonly
template("cts_artifacts") {
  assert(defined(invoker.targets) || defined(invoker.data),
         "At least one parameter of 'targets' or 'data' must be provided.")

  group_deps = []
  dest = ""

  if (defined(invoker.targets)) {
    foreach(t, invoker.targets) {
      foreach(o, get_target_outputs(t)) {
        copy_target_name = "${target_name}_" + get_path_info(o, "name")

        cts_copy_to_sdk(copy_target_name) {
          forward_variables_from(invoker,
                                 [
                                   "testonly",
                                   "dest",
                                 ])
          sources = [ o ]
          non_sdk_deps = [ t ]
        }

        group_deps += [ ":${copy_target_name}_sdk" ]
      }
    }
  }

  if (defined(invoker.data)) {
    foreach(d, invoker.data) {
      copy_data_name = "${target_name}_" + get_path_info(d, "name")

      cts_copy_to_sdk(copy_data_name) {
        forward_variables_from(invoker,
                               [
                                 "testonly",
                                 "dest",
                               ])
        sources = [ d ]
      }
      group_deps += [ ":${copy_data_name}_sdk" ]
    }
  }

  sdk_molecule(target_name) {
    forward_variables_from(invoker, [ "testonly" ])
    deps = group_deps
  }
}
