# Copyright 2021 The Fuchsia Authors. All rights reserved.
# Use of this source code is governed by a BSD-style license that can be
# found in the LICENSE file.
import("//build/sdk/sdk_atom.gni")

# Copies specific sources to an SDK.
#
# This template should only be used directly to copy BUILD.gn files
# to the CTS SDK. All other uses should be through specific CTS build templates.
#
# Example:
#  ```
#  # This will create :build_sdk, which should be added to an sdk_molecule in the
#  # same file.
#  cts_copy_to_sdk("build") {
#    testonly = true
#    sources = [ "BUILD.gn" ]
#  }
#  ```
#
# Parameters
#
#   sources (required)
#     A list of sources to include in the atom.
#     Type: list(labels)
#
#   dest (optional)
#     Location to copy this target to in the CTS archive.
#     Dest should only be specified if the target is not in //sdk/cts. If the
#     target is in //sdk/cts, it will be placed in the same path in the CTS
#     archive.
#     Type: string
template("cts_copy_to_sdk") {
  assert(defined(invoker.sources), "Sources must be defined.")

  if (defined(invoker.dest)) {
    file_base = invoker.dest
  } else {
    path = get_label_info(":${target_name}", "dir")
    if (string_replace(path, "//sdk/cts", "") == path) {
      assert(defined(invoker.dest),
             "dest must be defined if the source file is not in //sdk/cts")
    }

    file_base = ""
    if (path != "//sdk/cts") {
      file_base = string_replace(path, "//sdk/cts/", "")
    }
  }

  main_target_name = target_name
  sdk_target_name = "${target_name}_sdk"

  foreach(src, invoker.sources) {
    sdk_files = [
      {
        source = src
        dest = "${file_base}/${src}"
      },
    ]
  }

  sdk_atom(sdk_target_name) {
    forward_variables_from(invoker, [ "testonly" ])
    category = "cts"
    if (file_base != "") {
      id = "sdk://${file_base}/${main_target_name}"
    } else {
      id = "sdk://${main_target_name}"
    }
    files = sdk_files

    meta = {
      schema = "cts_resource"
      dest = "${file_base}/json/${main_target_name}/meta.json"
      value = {
        type = "resource"
        name = main_target_name
        resources = invoker.sources
      }
    }
  }
}
