# Copyright 2020 The Fuchsia Authors. All rights reserved.
# Use of this source code is governed by a BSD-style license that can be
# found in the LICENSE file.

import("//build/components.gni")
import("//sdk/cts/build/cts_copy_to_sdk.gni")
import("//sdk/cts/build/cts_element.gni")
import("//sdk/cts/build/write_cts_file.gni")

# A Fuchsia component that can be used in CTS.
#
# An equivalent to fuchsia_component, but ensures dependencies are allowed in CTS.
# Creates an SDK atom so that this target can be released in the CTS SDK.
#
# Example:
# ```
# cts_fuchsia_component("my-test-component") {
#   deps = [ ":my-test" ]
#   manifest = "meta/my-test.cmx"
#   testonly = true
# }
# ```
#
# Parameters
#   dest (optional)
#     Location to copy this target to in the CTS archive.
#     Dest should only be specified if the target is not in //sdk/cts. If the
#     target is in //sdk/cts, it will be placed in the same path in the CTS
#     archive.
#     Type: string
template("cts_fuchsia_component") {
  if (!defined(invoker.deps)) {
    invoker.deps = []
  }

  if (invoker.deps != []) {
    verify_target = target_name + "_verify_deps"
  }
  write_file_target = target_name + "_cts_file"

  if (defined(verify_target)) {
    cts_element(verify_target) {
      deps = invoker.deps
      invoker_label = get_label_info(invoker.target_name, "label_no_toolchain")
    }
  }

  write_cts_file(write_file_target) {
  }

  fuchsia_component(target_name) {
    forward_variables_from(invoker, "*", [ "dest" ])

    if (defined(verify_target)) {
      deps += [ ":$verify_target" ]
    }
    deps += [ ":$write_file_target" ]
  }

  cts_copy_to_sdk(target_name) {
    forward_variables_from(invoker,
                           [
                             "dest",
                             "manifest",
                             "testonly",
                           ])
    sources = [ manifest ]
  }
}
