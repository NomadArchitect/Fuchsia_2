// Copyright 2018 The Fuchsia Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
library fuchsia.hardware.acpi;

using zx;

type AcpiMmio = resource struct {
    /// Offset from beginning of VMO where the mmio region begins.
    offset zx.off;
    /// Size of mmio region.
    size uint64;
    vmo zx.handle:VMO;
};

@transport("Banjo")
@banjo_layout("ddk-protocol")
protocol Acpi {
    /// Tells the ACPI driver to start listening for fuchsia.hardware.acpi
    /// messages on server.
    /// See //sdk/fidl/fuchsia.hardware.acpi/device.fidl.
    ConnectServer(resource struct {
        server zx.handle:CHANNEL;
    }) -> ();
    GetPio(struct {
        index uint32;
    }) -> (resource struct {
        s zx.status;
        pio zx.handle:RESOURCE;
    });
    GetMmio(struct {
        index uint32;
    }) -> (resource struct {
        s zx.status;
        mmio AcpiMmio;
    });
    GetBti(struct {
        bdf uint32;
        index uint32;
    }) -> (resource struct {
        s zx.status;
        bti zx.handle:BTI;
    });
    ConnectSysmem(resource struct {
        connection zx.handle:CHANNEL;
    }) -> (struct {
        s zx.status;
    });
    RegisterSysmemHeap(resource struct {
        heap uint64;
        connection zx.handle:CHANNEL;
    }) -> (struct {
        s zx.status;
    });
};

/// A generic ACPI device. This will allow devices to query information directly
/// from ACPI, removing the need for them to be implemented directly in the
/// board driver.
@transport("Banjo")
@banjo_layout("ddk-protocol")
protocol AcpiDevice {
    /// For now, this has a single stub method, since banjo protocols require
    /// at least one method, but we will add methods as the requirements become
    /// clearer.
    Stub() -> ();
};
