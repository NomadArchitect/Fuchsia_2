// Copyright 2019 The Fuchsia Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
library fuchsia.hardware.wlan.phyinfo;

type WlanInfoDriverFeature = strict enum : uint32 {
    /// Device or driver implements scanning.
    SCAN_OFFLOAD = 0x00000001;

    /// Device or driver implements rate selection.
    RATE_SELECTION = 0x00000002;

    /// Device is not a physical device.
    SYNTH = 0x00000004;

    /// Driver supports transmission reports, and will use the
    /// wlan_softmac_ifc.report_tx_status() callback to report the status of each queued
    /// transmission.
    TX_STATUS_REPORT = 0x00000008;

    /// Set this flag to indicate whether SME should trust this device or driver to
    /// handle DFS channels correctly in an active scan (e.g. it makes sure DFS
    /// channel is safe to transmit before doing so).
    DFS = 0x00000010;

    /// Driver responds to probe requests in hardware.
    PROBE_RESP_OFFLOAD = 0x00000020;

    /// Driver supports running the SAE handshake in SME.
    SAE_SME_AUTH = 0x00000040;

    /// Driver implements the SAE handshake.
    SAE_DRIVER_AUTH = 0x00000080;

    /// Driver supports management frame protection and IGTK installation.
    MFP = 0x00000100;

    // Driver implements a separate data plane and will not respond to or implement the Ethernet
    // fidl protocol functionality in the wlanif protocol (specifically WlanifImpl::DataQueueTx and
    // WlanifImplIfc::DataRecv).
    SEPARATE_DATA_PLANE = 0x00000200;
};

/// IEEE Std 802.11-206 Section 9.4.1.4 Capability Information Field
type WlanInfoHardwareCapability = strict enum : uint32 {
    /// Short packet preamble.
    SHORT_PREAMBLE = 0x0020;

    /// Spectrum management.
    SPECTRUM_MGMT = 0x0100;

    // QoS capable.
    QOS = 0x0200;

    /// Short slot times after packet collision.
    SHORT_SLOT_TIME = 0x0400;

    /// Radio measurement.
    RADIO_MSMT = 0x1000;

    // Supports simutaneous client-ap use
    // TODO(fxbug.dev/54923): Move SIMULTANEOUS_CLIENT_AP to a different Fuchsia specific capability enum.
    // This enum should only be used for IEEE 802.11 fields. This type should also be reduced
    // to uint16_t once this is done.
    SIMULTANEOUS_CLIENT_AP = 0x10000;
};

/// This is a simplified expression of channel starting frequencies. Expand this
/// list as Fuchsia evolves.
type WlanInfoBand = strict enum {
    /// Channel starting frequency: 2.407 GHz.
    TWO_GHZ = 0;

    /// Channel starting frequency: 5.000 GHz.
    FIVE_GHZ = 1;

    /// The number of defined bands.
    COUNT = 2;
};

/// The maximum number of supported channels in a WlanInfoChannelList.
const WLAN_INFO_CHANNEL_LIST_MAX_CHANNELS uint32 = 64;

/// A list of channels in a band. Channels are numbered as in IEEE Std 802.11-2016,
/// 17.3.8.4.2, where each channel is defined as:
///
///   (base_freq + 5 * n) MHz
///
/// where n is between 1 and 200 (inclusive). Here n represents the channel number.
///
/// Example:
///   Standard 2.4GHz channels:
///     base_freq = 2407 MHz
///     n = 1-14
type WlanInfoChannelList = struct {
    /// The base frequency in this band.
    base_freq uint16;

    /// A list of channel center frequencies, as multiples of 5 MHz above base_freq.
    channels array<uint8, WLAN_INFO_CHANNEL_LIST_MAX_CHANNELS>;
};

/// The maximum number of rates in WlanInfoBandInfo.
// IEEE Std 802.11-2016 defines 12 values in dot11SupportedDataRatesRxTable
const WLAN_INFO_BAND_INFO_MAX_RATES uint32 = 12;

/// The maximum number of bands supported in a WlanInfo struct. For now this is 2
/// to keep the struct a small, fixed size.
const WLAN_INFO_MAX_BANDS uint32 = 2;
