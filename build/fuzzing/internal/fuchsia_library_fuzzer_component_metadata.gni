# Copyright 2022 The Fuchsia Authors. All rights reserved.
# Use of this source code is governed by a BSD-style license that can be
# found in the LICENSE file.

import("//build/dist/resource.gni")

# Generates metadata corresponding to a libfuzzer component manifest file.
#
# This internal template assembles the contents of a component manifest for either a library fuzzer
# or fuzzer test, depending on whether or not it is built in a fuzzer toolchain variant. It should
# be invoked by a fuzzer binary target, since that target performs variant selection. The fuzzer
# component target can use the `fuchsia_library_fuzzer_component_manifest` template to generate the
# actual component manifest file.
#
# Parameters:
#   program_binary (required)
#     [path] Package relative path to the fuzzer binary.
#
#   corpus, dictionary, options (optional)
#     Same as for `fuchsia_library_fuzzer`.
#
# TODO(fxbug.dev/105707): Make the fuzzers more build system agnostic by adding explicitly manifests
# and deprecating this logic.
#
template("fuchsia_library_fuzzer_component_metadata") {
  assert(defined(invoker.program_binary),
         "`program_binary` must be specified when calling " +
             "fuchsia_library_fuzzer_component_metadata($target_name)")
  fuzzer_args = [ invoker.program_binary ]
  group_deps = []

  if (defined(invoker.corpus)) {
    corpus = rebase_path(get_label_info(invoker.corpus, "dir"), "//")
    fuzzer_args += [ "data/${corpus}" ]
    group_deps += [ invoker.corpus ]
  }

  if (defined(invoker.dictionary)) {
    dictionary_target = "${target_name}_dictionary"
    resource(dictionary_target) {
      sources = [ invoker.dictionary ]
      outputs = [ "data/{{source_file_part}}" ]
    }
    dictionary = get_path_info(invoker.dictionary, "file")
    fuzzer_args += [ "data/$dictionary" ]
    group_deps += [ ":$dictionary_target" ]
  }

  if (defined(invoker.options)) {
    foreach(option, invoker.options) {
      fuzzer_args += [ "-$option" ]
    }
  }

  group(target_name) {
    testonly = true
    visibility = [ ":*" ]
    deps = group_deps
    metadata = {
      fuchsia_fuzzer_component_manifest = [
        {
          include = [ "//src/sys/fuzzing/libfuzzer/default.shard.cml" ]
          program = {
            args = fuzzer_args
          }
        },
      ]
      fuchsia_fuzzer_component_manifest_barrier = []
    }
  }
}
