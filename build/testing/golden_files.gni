# Copyright 2020 The Fuchsia Authors. All rights reserved.
# Use of this source code is governed by a BSD-style license that can be
# found in the LICENSE file.

import("//build/testing/config.gni")

# Defines a set of golden file comparisons to be executed during the build.
# Fails if one of the provided `golden`'s contents is not equal to the
# associated `candidate`'s.
#
# If the `bless_goldens` build arg is true, the goldens will be updated with
# the candidate files rather than failing the action.
#
# For more complex golden testing, see //build/testing/golden_test.gni.
#
# Parameters:
#
#  * comparisons
#    - Required: The list of golden file comparisons to perform.
#    - Type: list(scope)
#
#    Each scope contains:
#      * golden
#        - Required: The golden file against which to check.
#        - Type: path
#
#      * candidate
#        - Required: The file under test.
#        - Type: path
#
#  * formatter
#    - Optional: A formatting specification. This may be used to format the
#      goldens before comparing with the candidates, making the diffs less
#      sensitive to such changes.
#    - Type: scope
#
#    The scope contains:
#
#      * script
#        - Required: The path to the formatting executable. (Called "script"
#          because of the `action()` precedent and the fact that "executable"
#          is a GN keyword)
#        - Type: path
#
#      * args
#        - Optional: The list of arguments to pass to the formatter. Any
#          contained paths must be given relative to `root_build_dir`.
#        - Type: list(string)
#
#      * inputs
#        - Optional: Any additional files that serve as inputs to the
#          formatting invocation. The formatter itself need not be listed here.
#        - Type: list(string)
#
#  * warn_on_changes
#    - Optional: If true, mismatches are treated as warnings rather than errors.
#    - Type: bool
#    - Default: false
#
#  * visibility, testonly, deps, public_deps
#    - Optional: Usual GN meanings.
#
template("golden_files") {
  assert_context = "golden_files(\"$target_name\")"
  assert(defined(invoker.comparisons) && invoker.comparisons != [],
         "$assert_context: `comparisons` is required")

  action(target_name) {
    forward_variables_from(invoker,
                           [
                             "visibility",
                             "testonly",
                             "deps",
                             "public_deps",
                             "formatter",
                           ])

    script = "//build/testing/verify_golden_files.py"

    stamp_file = "$target_gen_dir/$target_name.verified"
    depfile = "${stamp_file}.d"

    # We purposefully do not register the golden and candidate files as
    # action() inputs; instead we record them within a depfile. Further the
    # script will proactively create a blank golden file if the supplied one
    # does not yet exist. These two measures allow (1) a user to not have to
    # tediously create the files themselves when adding a new `golden_files()`
    # target, and (2) ninja to execute this action without complaint before the
    # files exist.
    inputs = []

    outputs = [ stamp_file ]

    args = [
      "--depfile",
      rebase_path(depfile, root_build_dir),
      "--stamp-file",
      rebase_path(stamp_file, root_build_dir),
      "--label",
      get_label_info(":${target_name}", "label_no_toolchain"),
      "--comparisons",
    ]

    golden_file_metadata = {
      name = target_name
      label = get_label_info(":$target_name", "label_with_toolchain")
      stamp = rebase_path(stamp_file, root_build_dir)
      files = []
    }

    foreach(comparison, invoker.comparisons) {
      assert(defined(comparison.golden),
             "$assert_context: no `golden` given in comparison: $comparison")
      assert(defined(comparison.candidate),
             "$assert_context: no `candidate` given in comparison: $comparison")

      # Forward the rest to ensure that nothing else was defined, in which case
      # GN will provide an "unused" error.
      forward_variables_from(comparison,
                             "*",
                             [
                               "golden",
                               "candidate",
                             ])

      golden = rebase_path(comparison.golden, root_build_dir)
      candidate = rebase_path(comparison.candidate, root_build_dir)

      args += [ candidate + ":" + golden ]

      golden_file_metadata.files += [
        {
          golden = rebase_path(comparison.golden, "//")
          candidate = candidate
        },
      ]
    }

    if (defined(formatter)) {
      assert(
          defined(formatter.script),
          "$assert_context: `formatter.script` is required if `formatter` is supplied")
      args += [
        "--format-command",
        rebase_path(formatter.script, root_build_dir),
      ]
      if (defined(formatter.args)) {
        args += formatter.args
      }
      inputs += [ formatter.script ]
      if (defined(formatter.inputs)) {
        inputs += formatter.inputs
      }
    }

    if (bless_goldens) {
      args += [ "--bless" ]
    }

    warn_on_changes =
        defined(invoker.warn_on_changes) && invoker.warn_on_changes
    if (warn_on_changes) {
      args += [ "--warn" ]
    }

    metadata = {
      # Metadata for //:golden_files.
      golden_files = [ golden_file_metadata ]
    }
  }
}
