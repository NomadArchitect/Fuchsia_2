# Copyright 2021 The Fuchsia Authors. All rights reserved.
# Use of this source code is governed by a BSD-style license that can be
# found in the LICENSE file.

import("//build/rust/config.gni")

declare_args() {
  # Controls whether the rust compiler uses v0 symbol mangling scheme
  # (see https://github.com/rust-lang/rfcs/blob/HEAD/text/2603-rust-symbol-name-mangling-v0.md).
  # The v0 symbol mangling scheme requires upstream LLVM support when demangling,
  # so it is not on by default.
  # TODO(fxbug.dev/57302): Enable v0 mangling by default.
  rust_v0_symbol_mangling = false

  # Enable incremental rust compilation. Takes a path to the directory to use
  # as the cache.
  rust_incremental = ""
}

# Defines a Rust cfg flag with the value of the rust_panic build arg.
# Useful for changing behavior of code based on panic behavior.
config("panic_cfg") {
  rustflags = [ "--cfg=rust_panic=\"${rust_panic}\"" ]
}

# Turns on the rust compilation analysis generator. This will produce a
# directory $OUT/save-analysis-temp, which will dump all the source analysis
# that the compiler collected while analyzing the source.  This config is
# included conditionally, see //build/config/BUILDCONFIG.gn for details.
config("analysis") {
  rustflags = [ "-Zsave-analysis" ]
}

config("edition_2018") {
  rustflags = [ "--edition=2018" ]
}

config("edition_2015") {
  rustflags = [ "--edition=2015" ]
}

config("no_features") {
  rustflags = [ "-Zallow-features=" ]
}

# TODO(fxbug.dev/86602): Disable once this is properly supported by coverage.
config("no_new_pass_manager") {
  rustflags = [ "-Znew-llvm-pass-manager=no" ]
}

config("incremental") {
  if (rust_incremental != "") {
    rustflags = [ "-Cincremental=" + rust_incremental ]
  }
}

config("one_codegen_unit") {
  # Disable codegen parallelism.
  # Trades incremental rebuild speed for smaller code size.
  # See: fxbug.dev/74435, fxbug.dev/80514
  rustflags = [ "-Ccodegen-units=1" ]
}

# Best practices for Rust binaries that go into size-constrained bootfs.
config("bootfs") {
  # Optimize for size.
  # TODO(fxbug.dev/63313): use "z" when resolved.
  rustflags = [ "-Copt-level=s" ]

  if (is_debug) {  # Debug builds produce very large Rust binaries
    # Force ThinLTO to squeeze Rust binaries further so the ZBI doesn't overflow
    # under any of the extraneous circumstances defined above.
    # See: fxbug.dev/80514
    configs = [ "//build/config/lto:thinlto" ]
  }

  # Can't dynamically link libstd and libtest for ZBI binaries.
  # TODO(fxbug.dev/83081): reconsider this.
  # TODO(fxbug.dev/83131): re-enable the below, remove subtraction of
  # dynamic_rust_standard_library config from targets that use bootfs.
  # See: https://fuchsia-review.googlesource.com/c/fuchsia/+/570385/comments/2fb50a51_c8fef636
  #rustflags += [ "-Cprefer-dynamic=no" ]
}

config("netstack3_only_specialization_feature") {
  rustflags = [
    "-Zallow-features=min_specialization,specialization",
    "-Aincomplete-features",
  ]
}

config("2018_idioms") {
  rustflags = [ "-Wrust-2018-idioms" ]
}

config("target") {
  rustflags = [
    "--target",
    rust_target,
    "--cap-lints=$rust_cap_lints",
  ]
}

config("panic_abort") {
  rustflags = [
    "-Cpanic=abort",
    "-Cforce-unwind-tables=yes",
    "-Zpanic_abort_tests",
  ]
}

config("v0_symbol_mangling") {
  if (rust_v0_symbol_mangling) {
    rustflags = [ "-Zsymbol-mangling-version=v0" ]
  }
}

# TODO(fxbug.dev/76297) Remove this to re-enable mutable-noalias.
config("no_mutable_noalias") {
  rustflags = [ "-Zmutable-noalias=off" ]
}

config("allow_unknown_lints") {
  rustflags = [ "-Aunknown-lints" ]
}

# TODO(fxbug.dev/67118) remove this allowance
config("allow_redundant_semicolons") {
  rustflags = [ "-Aredundant-semicolons" ]
}

# TODO(fxbug.dev/68148) remove this allowance
config("allow_unused_extern_crates") {
  rustflags = [ "-Aunused-extern-crates" ]
}

# TODO(fxbug.dev/69442) remove this allowance
config("allow_legacy_derive_helpers") {
  rustflags = [ "-Alegacy-derive-helpers" ]
}

config("deny_unused_results") {
  rustflags = [ "-Dunused_results" ]
}

config("allow_unused_results") {
  rustflags = [ "-Aunused_results" ]

  # This visibility list allows for targets to opt out of allowing unused results.
  #
  # There is currently no platform mandate to adopt the unused_results lint and it's opt-in for
  # developers that want to use it. See https://fxbug.dev/73468 for more context.
  #
  # To adopt the lint, add the following to your rust target:
  #   configs -= ["//build/config/rust:allow_unused_results"]
  # The visibility list below can be used to enforce the list on certain areas of the tree while
  # we evaluate wider adoption.
  #
  # To update this list run:
  # $ scripts/gn/gen_visibility_globs.py \
  #    --all=//build/config/rust:deny_unused_results \
  #    --allow=//build/config/rust:allow_unused_results \
  #    --ignore-suffix=-rustc,_banjo_rust
  visibility = [
    "//build/*",
    "//examples/*",
    "//garnet/*",
    "//sdk/*",
    "//src/bringup/*",
    "//src/camera/*",
    "//src/cobalt/*",
    "//src/connectivity/bluetooth/core/*",
    "//src/connectivity/bluetooth/examples/*",
    "//src/connectivity/bluetooth/lib/*",
    "//src/connectivity/bluetooth/testing/*",
    "//src/connectivity/bluetooth/tools/*",
    "//src/connectivity/lib/at-commands/*",
    "//src/connectivity/location/*",
    "//src/connectivity/lowpan/*",
    "//src/connectivity/network/net-cli/ffx:*",
    "//src/connectivity/network/netstack:networking_metrics_rustlib",
    "//src/connectivity/openthread/*",
    "//src/connectivity/overnet/*",
    "//src/connectivity/ppp/*",
    "//src/connectivity/telephony/*",
    "//src/connectivity/weave/*",
    "//src/connectivity/wlan/*",
    "//src/developer/*",
    "//src/devices/*",
    "//src/diagnostics/*",
    "//src/experiences/*",
    "//src/factory/*",
    "//src/fonts/*",
    "//src/graphics/*",
    "//src/hwinfo/*",
    "//src/identity/*",
    "//src/intl/*",
    "//src/lib/*",
    "//src/media/*",
    "//src/modular/*",
    "//src/power/*",
    "//src/proc/*",
    "//src/recovery/*",
    "//src/security/*",
    "//src/session/*",
    "//src/storage/*",
    "//src/sys/*",
    "//src/testing/*",
    "//src/tests/*",
    "//src/ui/*",
    "//src/virtualization/*",
    "//third_party/*",
    "//tools/*",
    "//vendor/*",
    "//zircon/*",
  ]
}

# TODO(fxbug.dev/87730) remove this after rolling the toolchain
#
# This configuration hacks our way out of a migration trap:
#
# When breaking changes are submitted upstream, we're usually able to change our
# code or build configuration so that everything will compile with both the
# current and next roll of the toolchain. Sometimes, we're not able to do this
# for unfortunate reasons. At the time of writing, this occurred because a
# previously-stable lint became gated behind a feature. This is a migration
# trap.
#
# The only real way we can work our way out of a migration trap is to change
# build behavior based on whether we're building the current or next roll of the
# toolchain. This code does that by comparing the rustc_version_string variable
# against the version strings for the current rust toolchains.
#
# After rolling the toolchain, this configuration should be disabled. Please
# exercise caution before taking this approach.
#
# How to get the rustc_version_string for the current toolchain version:
#
# 1. Go to the prebuilts manifest [1] and look at the "version" field for the
#    "fuchsia/third_party/rust/${platform}" package. It should start with
#    "git_revision:".
# 2. Run `cipd search fuchsia/third_party/rust/${platform} -tag <VERSION>` for
#    each of the platforms listed in the "platforms" field.
# 3. The output should list one instance and the segment after the colon will be
#    the value of rustc_version_string.
#
# [1] https://fuchsia.googlesource.com/integration/+/refs/heads/main/prebuilts
#
# Strings are checked in order of linux-amd64, linux-arm64, mac-amd64
#
# Current version is git_revision:4e0d3973fafdfb1c51011bc74e44257b5e3863f1
config("escape_migration_trap") {
  if (rustc_version_string == "OZaOVXP21h__FDoOH26fDhPjbNH9i9Is96DF22U9cMUC" ||
      rustc_version_string == "9a17Ug4ehxsdk_8ZFqn4jn9t_kLe0fHJ_aVF2LVZpX8C" ||
      rustc_version_string == "BSYYExmv7l84GMhUUwsrY8y2kay8Heak_eeagX-5QI0C") {
    rustflags = [ "-Amust_not_suspend" ]
  }
}
