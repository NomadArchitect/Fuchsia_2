# Copyright 2016 The Fuchsia Authors. All rights reserved.
# Use of this source code is governed by a BSD-style license that can be
# found in the LICENSE file.

import("//build/config/clang/clang_cpu.gni")
import("//build/config/current_target_tuple.gni")

default_clang_prefix = "//prebuilt/third_party/clang/${host_platform}/bin"

declare_args() {
  # The default clang toolchain provided by the prebuilt. This variable is
  # additionally consumed by the Go toolchain.
  clang_prefix = default_clang_prefix

  # Embed LLVM bitcode as .llvmbc section in ELF files. This is intended
  # primarily for external tools that use bitcode for analysis.
  clang_embed_bitcode = false

  # Controls if we enable relative-vtables for C++ targets.
  use_cxx_relative_vtables = true
}

# The value of clang_prefix relative to root_build_dir, useful
# when expanding it in command arguments.
rebased_clang_prefix = rebase_path(clang_prefix, root_build_dir)

# TODO(phosek): this is inefficient, rather this should come from a JSON file.
# Relative path makes command-lines remote-portable.
clang_resource_dir = rebase_path(exec_script("$clang_prefix/clang",
                                             [
                                               "--target=$current_target_tuple",
                                               "-print-resource-dir",
                                             ],
                                             "trim string",
                                             []),
                                 root_build_dir)

# We only provide dynamic runtime libs on Fuchsia.
if (is_fuchsia) {
  # TODO(fxbug.dev/57729): Get this information from runtime.json instead.
  clang_libunwind = exec_script("$clang_prefix/clang++",
                                [
                                  "--target=$current_target_tuple",
                                  "-print-file-name=libunwind.so",
                                ],
                                "trim string",
                                [])
}

# TODO(fxbug.dev/79232): Remove this after migration completes.
# This is a string identifying the particular toolchain version in use.  Its
# only purpose is to be unique enough that it changes when switching to a new
# toolchain, so that recompilations with the new compiler can be triggered.
#
# When using the prebuilt, the CIPD instance ID of the prebuilt is perfect.
# When not using the prebuilt, there isn't a quick way to extract the compiler
# version.  But at least changing the setting to a different compiler will
# change the string.
clang_version_string = ""
if (clang_prefix == default_clang_prefix) {
  _prebuilt_clang_dir = "//prebuilt/third_party/clang/$host_platform"
  clang_tool_dir = "${_prebuilt_clang_dir}/bin"
  _prebuilt_cipd_version =
      read_file("$_prebuilt_clang_dir/.versions/clang.cipd_version", "json")
  clang_version_string = _prebuilt_cipd_version.instance_id
}

clang_has_llvm_ifs = false
if (clang_version_string != "aUPvom0rfD2jLssugLimJkywf60eqgg9CG0Vk6-ASuUC" &&
    clang_version_string != "duSz1BCClOVUA8LxhlJaouzmvGqe9rU61OhnAE_UG5oC" &&
    clang_version_string != "rm-r5Uy50UmkWHJNZYzaS8cy_Q5S53cCwGw4BplIgecC" &&
    clang_version_string != "d9nnr4pVXG3B0JL8TTt0ZjWSs4xet-6Yc8438AXPWIUC" &&
    clang_version_string != "qrYJhq3WHgPd8qyip_1FhuyfoX5w0PKayUDZsbII1sAC" &&
    clang_version_string != "AA9aCrWNrXs7g4G7wq4Cyv1ICLD9eHJ65008O3q-tNgC" &&
    clang_version_string != "Lwq5cThR2BvFSjddIVmzF2-LHzOr-ZXdeXf4bw5tyigC" &&
    clang_version_string != "eDzL2utDIub9b8u_zmphLvcLIvA5H4IH31T4VG0f9kQC" &&
    clang_version_string != "ON1yKdqDlcTmDj9XpJrI0NBCmVUDNS8iG65NoucTyYoC" &&
    clang_version_string != "GUxdhOlaKw1Xbg8SVnYiK3kDkTOQYAr-xInC_WKtsNUC" &&
    clang_version_string != "B05Qdyd1KtFQSprZP0S3beRMzTeiKW8l12GssdHShncC") {
  clang_has_llvm_ifs = true
}
