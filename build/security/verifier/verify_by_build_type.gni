# Copyright 2022 The Fuchsia Authors. All rights reserved.
# Use of this source code is governed by a BSD-style license that can be
# found in the LICENSE file.

# Verify an artifact against golden files. Separate goldens may be provided for
# non-eng and eng build types.
#
# Parameters
#
#
#   product_assembly_config_file (required)
#     [string] The path to the product assembly configuration tha designates the
#     build type.
#
#   input (required)
#     [string] The path to the file to be verified.
#
#   non_eng_golden (required)
#     [string] The path to the golden for verifying non-eng builds.
#
#   eng_golden (optional)
#     [string] The path to the golden for verifying eng builds. If not
#     specified, then verification is skipped on eng builds.
#
#   deps (optional)
#     Usual GN meaning.
template("verify_file_by_build_type") {
  assert(
      defined(invoker.product_assembly_config_file),
      "verify_file_by_build_type() must specify product_assembly_config_file")
  assert(defined(invoker.input),
         "verify_file_by_build_type() must specify input")
  assert(defined(invoker.non_eng_golden),
         "verify_file_by_build_type() must specify non_eng_golden")

  action(target_name) {
    forward_variables_from(invoker,
                           [
                             "testonly",
                             "visibility",
                           ])
    _output = "${target_out_dir}/${target_name}.verified"

    script = "//src/security/policy/build/verify_golden_by_build_type.py"
    args = [
      "--non-eng-golden",
      rebase_path(invoker.non_eng_golden, root_out_dir),

      "--product-config",
      rebase_path(invoker.product_assembly_config_file, root_out_dir),

      "--input",
      rebase_path(invoker.input, root_out_dir),

      "--output",
      rebase_path(_output, root_out_dir),
    ]
    if (defined(invoker.eng_golden)) {
      args += [
        "--eng-golden",
        rebase_path(invoker.eng_golden, root_out_dir),
      ]
    }

    inputs = [
      invoker.non_eng_golden,
      invoker.product_assembly_config_file,
      invoker.input,
    ]
    if (defined(invoker.eng_golden)) {
      inputs += [ invoker.eng_golden ]
    }
    outputs = [ _output ]

    deps = []
    if (defined(invoker.deps)) {
      deps += invoker.deps
    }
  }
}

# Verify the single `.cvf` file generated via a
# `fuchsia_structured_config_values()` gn template instantiation against golden
# files. Separate goldens may be provided for non-eng and eng build types.
#
# Parameters
#
#
#   product_assembly_config_file (required)
#     [string] The path to the product assembly configuration tha designates the
#     build type.
#
#   structured_config_target (required)
#     [string] The structured configuration gn target that produces the file to
#     be verified.
#
#   structured_config_output_name (required)
#     [string] The custom output name provided in the structured configuration
#     gn target, if any. If not specified, then the "name" part of the
#     structured configuration gn target is used.
#
#   non_eng_golden (required)
#     [string] The path to the golden for verifying non-eng builds.
#
#   eng_golden (optional)
#     [string] The path to the golden for verifying eng builds. If not
#     specified, then verification is skipped on eng builds.
#
#   deps (optional)
#     Usual GN meaning.
template("verify_structured_config_by_build_type") {
  assert(
      defined(invoker.product_assembly_config_file),
      "verify_structured_config_by_build_type() must specify product_assembly_config_file")
  assert(
      defined(invoker.structured_config_target),
      "verify_structured_config_by_build_type() must specify structured_config_target")
  assert(defined(invoker.non_eng_golden),
         "verify_structured_config_by_build_type() must specify non_eng_golden")

  # Follow output conventions defined by cvf template in
  # //tools/configc/build/config.gni.
  if (defined(invoker.structured_config_output_name)) {
    _structured_config_output_name = invoker.structured_config_output_name
  } else {
    _structured_config_output_name =
        get_label_info(invoker.structured_config_target, "name")
  }
  _structured_config_out_dir =
      get_label_info(invoker.structured_config_target, "target_out_dir")
  _structured_config_output =
      "${_structured_config_out_dir}/${_structured_config_output_name}.cvf"

  verify_file_by_build_type(target_name) {
    forward_variables_from(invoker,
                           [
                             "eng_golden",
                             "non_eng_golden",
                             "product_assembly_config_file",
                             "testonly",
                             "visibility",
                           ])

    input = _structured_config_output

    deps = [ invoker.structured_config_target ]
    if (defined(invoker.deps)) {
      deps += invoker.deps
    }
  }
}

# Verify that non-eng build types have a structured configuration policy specified.
#
# Parameters
#
#
#   product_assembly_config_file (required)
#     [path] The path to the product assembly configuration tha designates the
#     build type.
#
#   structured_config_policy (required)
#     [path] The path to the structured config policy for the product. Allowed to be
#     empty for eng build types.
#
#   deps (optional)
#     Usual GN meaning.
template("verify_structured_config_policy_by_build_type") {
  assert(
      defined(invoker.product_assembly_config_file),
      "verify_structured_config_policy_by_build_type() must specify product_assembly_config_file")
  assert(
      defined(invoker.structured_config_policy),
      "verify_structured_config_policy_by_build_type() must specify structured_config_policy")

  action(target_name) {
    forward_variables_from(invoker,
                           [
                             "testonly",
                             "visibility",
                           ])
    _output = "${target_out_dir}/${target_name}.verified"

    script = "//src/security/policy/build/verify_sc_policy_by_build_type.py"
    args = [
      "--product-config",
      rebase_path(invoker.product_assembly_config_file, root_out_dir),
      "--output",
      rebase_path(_output, root_out_dir),
    ]

    inputs = [ invoker.product_assembly_config_file ]
    if (invoker.structured_config_policy != "") {
      args += [
        "--structured-config-policy",
        rebase_path(invoker.structured_config_policy, root_out_dir),
      ]
      inputs += [ invoker.structured_config_policy ]
    }

    outputs = [ _output ]

    deps = []
    if (defined(invoker.deps)) {
      deps += invoker.deps
    }
  }
}
