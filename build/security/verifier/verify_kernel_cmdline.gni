# Copyright 2021 The Fuchsia Authors. All rights reserved.
# Use of this source code is governed by a BSD-style license that can be
# found in the LICENSE file.

import("//build/dev.gni")
import("//src/developer/ffx/build/ffx_action.gni")

# Check the kernel cmdline extracted from ZBI against a golden file.
#
# Parameters
#
#   zbi (required)
#     [path] Path to a ZBI file that contains the kernel cmdline.
#
#   goldens (required)
#     [list of strings] Path to a list of golden files that contain golden
#     kernel cmdline in the format of one cmdline entry per line. The actual
#     cmdline must match either one of the goldens. There should be only one
#     golden file in this list for normal case and two golden files, one for the
#     old golden file, one for the new golden file during a soft transition.
#
#   deps, public_deps, data_deps (optional)
#     Usual GN meaning.

template("verify_kernel_cmdline") {
  assert(defined(invoker.zbi), "verify_kernel_cmdline() must specify zbi")
  assert(defined(invoker.goldens),
         "verify_kernel_cmdline() must specify goldens")

  ffx_action(target_name) {
    forward_variables_from(invoker,
                           [
                             "testonly",
                             "deps",
                             "public_deps",
                             "data_deps",
                             "visibility",
                           ])

    stamp_file = "$target_gen_dir/$target_name.verified"
    depfile = "$target_gen_dir/$target_name.d"
    tmp_dir = "$target_out_dir/$target_name/tmp"

    hermetic_action_ignored_prefixes = [ tmp_dir ]

    inputs = [ invoker.zbi ] + invoker.goldens
    outputs = [ stamp_file ]

    args = [
      "scrutiny",
      "verify",
      "--depfile",
      rebase_path(depfile, root_build_dir),
      "--stamp",
      rebase_path(stamp_file, root_build_dir),
      "--tmp-dir",
      rebase_path(tmp_dir, root_build_dir),
      "kernel-cmdline",
      "--zbi",
      rebase_path(invoker.zbi, root_build_dir),
    ]
    foreach(golden, invoker.goldens) {
      args += [
        "--golden",
        rebase_path(golden, root_build_dir),
      ]
    }
  }
}
