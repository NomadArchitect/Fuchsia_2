# Copyright 2022 The Fuchsia Authors. All rights reserved.
# Use of this source code is governed by a BSD-style license that can be
# found in the LICENSE file.

import("//build/dev.gni")
import("//src/developer/ffx/build/ffx_action.gni")

# Extract the structured configuration values in a system image.
#
# Parameters
#
#   update_package_target (required)
#     [string] The target that builds the update package, including the update
#     package blobfs archive file.
#
#   image_assembler_target (required)
#     [string] The target that assembles system images, including the system
#     blobfs archive file.
#
#   assembly_image_name (required)
#     [string] The image_name designated in the system assembly associated with
#     image_assembler_target.
#
#   output (required)
#     [path] The JSON file to which to write the extracted values.
#
#   deps, public_deps, data_deps (optional)
#     Usual GN meaning.
template("extract_assembled_structured_config") {
  assert(
      defined(invoker.update_package_target),
      "extract_assembled_structured_config() must specify update_package_target")
  assert(
      defined(invoker.image_assembler_target),
      "extract_assembled_structured_config() must specify image_assembler_target")
  assert(
      defined(invoker.assembly_image_name),
      "extract_assembled_structured_config() must specify assembly_image_name")
  assert(defined(invoker.output),
         "extract_assembled_structured_config() must specify an output")

  update_package_target_out_dir =
      get_label_info(invoker.update_package_target, "target_out_dir")
  update_package_target_name =
      get_label_info(invoker.update_package_target, "name")
  update_package_dir =
      "$update_package_target_out_dir/$update_package_target_name"

  image_assembler_target_out_dir =
      get_label_info(invoker.image_assembler_target, "target_out_dir")
  assembly_image_name = invoker.assembly_image_name
  image_assembler_dir = "$image_assembler_target_out_dir/$assembly_image_name"

  files = {
    update_package = "$update_package_dir/update.far"
    blobfs = [
      "$image_assembler_dir/blob.blk",
      "$update_package_dir/gen/update.blob.blk",
    ]
  }

  ffx_action(target_name) {
    forward_variables_from(invoker,
                           [
                             "testonly",
                             "deps",
                             "public_deps",
                             "data_deps",
                             "visibility",
                           ])
    depfile = "$target_gen_dir/$target_name.d"

    inputs = [ files.update_package ] + files.blobfs

    outputs = [ invoker.output ]

    args = [
      "scrutiny",
      "extract",
      "structured-config",
      "--depfile",
      rebase_path(depfile, root_build_dir),
      "--build-path",
      rebase_path(root_build_dir, root_build_dir),
      "--update",
      rebase_path(files.update_package, root_build_dir),
      "--output",
      rebase_path(invoker.output, root_build_dir),
    ]
    foreach(blobfs, files.blobfs) {
      args += [
        "--blobfs",
        rebase_path(blobfs, root_build_dir),
      ]
    }

    if (!defined(invoker.deps)) {
      deps = []
    }
    deps += [
      invoker.update_package_target,
      invoker.image_assembler_target,
    ]
  }
}

# Check structured configuration values in a system image, asserting they match
# the provided policy file.
#
# Parameters
#
#   update_package_target (required)
#     [string] The target that builds the update package, including the update
#     package blobfs archive file.
#
#   image_assembler_target (required)
#     [string] The target that assembles system images, including the system
#     blobfs archive file.
#
#   assembly_image_name (required)
#     [string] The image_name designated in the system assembly associated with
#     image_assembler_target.
#
#   policy (required)
#     [path] The JSON policy file containing allowed configuration values for the build.
#
#   deps, public_deps, data_deps (optional)
#     Usual GN meaning.
template("verify_assembled_structured_config") {
  assert(
      defined(invoker.update_package_target),
      "verify_assembled_structured_config() must specify update_package_target")
  assert(
      defined(invoker.image_assembler_target),
      "verify_assembled_structured_config() must specify image_assembler_target")
  assert(
      defined(invoker.assembly_image_name),
      "verify_assembled_structured_config() must specify assembly_image_name")
  assert(defined(invoker.policy),
         "verify_assembled_structured_config() must specify a policy file")

  update_package_target_out_dir =
      get_label_info(invoker.update_package_target, "target_out_dir")
  update_package_target_name =
      get_label_info(invoker.update_package_target, "name")
  update_package_dir =
      "$update_package_target_out_dir/$update_package_target_name"

  image_assembler_target_out_dir =
      get_label_info(invoker.image_assembler_target, "target_out_dir")
  assembly_image_name = invoker.assembly_image_name
  image_assembler_dir = "$image_assembler_target_out_dir/$assembly_image_name"

  files = {
    update_package = "$update_package_dir/update.far"
    blobfs = [
      "$image_assembler_dir/blob.blk",
      "$update_package_dir/gen/update.blob.blk",
    ]
  }

  ffx_action(target_name) {
    no_output_dir_leaks = false

    forward_variables_from(invoker,
                           [
                             "testonly",
                             "deps",
                             "public_deps",
                             "data_deps",
                             "visibility",
                           ])
    stamp_file = "$target_gen_dir/$target_name.verified"
    depfile = "$target_gen_dir/$target_name.d"
    tmp_dir = "$target_out_dir/$target_name/tmp"

    hermetic_action_ignored_prefixes = [ tmp_dir ]

    inputs = [
               invoker.policy,
               files.update_package,
             ] + files.blobfs

    outputs = [ stamp_file ]

    args = [
      "scrutiny",
      "verify",
      "--depfile",
      rebase_path(depfile, root_build_dir),
      "--stamp",
      rebase_path(stamp_file, root_build_dir),
      "--tmp-dir",
      rebase_path(tmp_dir, root_build_dir),
      "structured-config",
      "--policy",
      rebase_path(invoker.policy, root_build_dir),
      "--build-path",
      rebase_path(root_build_dir, root_build_dir),
      "--update",
      rebase_path(files.update_package, root_build_dir),
    ]
    foreach(blobfs, files.blobfs) {
      args += [
        "--blobfs",
        rebase_path(blobfs, root_build_dir),
      ]
    }

    if (!defined(invoker.deps)) {
      deps = []
    }
    deps += [
      invoker.update_package_target,
      invoker.image_assembler_target,
    ]
  }
}
