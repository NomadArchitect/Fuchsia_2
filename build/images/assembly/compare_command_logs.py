#!/usr/bin/env python3.8
# Copyright 2022 The Fuchsia Authors. All rights reserved.
# Use of this source code is governed by a BSD-style license that can be
# found in the LICENSE file.

import argparse
import json
import sys


# Remove |prefix| from |line|.
# A removeprefix() function is not available until 3.9.
def removeprefix(line, prefix):
    if line.startswith(prefix):
        return line[len(prefix):]
    return line


# Return a modified |cmd| where the |outdirs| is stripped
# from the prefix of any arguments. This is useful for
# comparing two commands that use files in different |outdirs|.
def strip_outdirs_from_cmd(cmd, outdirs):
    if 'args' not in cmd:
        return cmd
    newcmd = {}
    newcmd['tool'] = cmd['tool']
    newcmd['args'] = []
    for arg in cmd['args']:
        for outdir in outdirs:
            arg = removeprefix(arg, outdir)
        newcmd['args'].append(arg)
    return newcmd


# Load a command from a file, and strip the |outdirs| in the arguments.
def load_command_log(log, outdirs):
    log = json.load(log)
    commands = []
    for cmd in log.get('commands', []):
        commands.append(strip_outdirs_from_cmd(cmd, outdirs))
    return commands


def main():
    parser = argparse.ArgumentParser(
        description=
        'Compare two command logs generated by different assembly invocations'
        'and assert that they are functionally equivalent')
    parser.add_argument(
        '--reference', type=argparse.FileType('r'), required=True)
    parser.add_argument(
        '--comparison', type=argparse.FileType('r'), required=True)
    parser.add_argument('--reference-outdir', required=True)
    parser.add_argument('--comparison-outdir', required=True)
    parser.add_argument('--stamp', type=argparse.FileType('w'), required=True)
    args = parser.parse_args()

    # The comparison must be stripped first, because it is a longer path.
    # This is hacky... a better fix in coming up for review.
    outdirs = [args.comparison_outdir, args.reference_outdir]
    reference = load_command_log(args.reference, outdirs)
    comparison = load_command_log(args.comparison, outdirs)

    # Only compare commands that use these tools.
    # This allows us to incrementally add support for more commands.
    tools_to_compare = [
        './host_x64/minfs',
        './host_x64/blobfs',
        './host_x64/fvm',
        './host_x64/zbi',
    ]

    # Check for missing commands.
    # We only care that all the commands in reference are also in comparison,
    # but we do not care if comparison has additional commands.
    # We also do not care about order.
    missing_cmds = []
    for cmd in reference:
        if 'tool' in cmd and cmd[
                'tool'] in tools_to_compare and cmd not in comparison:
            missing_cmds.append(cmd)
    if missing_cmds:
        print('Commands in the reference were missing from the comparison')
        for cmd in missing_cmds:
            print('Missing cmd: ' + str(cmd))
        sys.exit(1)

    # Write an empty file because GN requires targets to have an output.
    args.stamp.write("")


if __name__ == '__main__':
    sys.exit(main())
