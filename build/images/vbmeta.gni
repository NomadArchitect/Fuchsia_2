# Copyright 2019 The Fuchsia Authors. All rights reserved.
# Use of this source code is governed by a BSD-style license that can be
# found in the LICENSE file.

# Build arguments used in the context of verified boot.
# See [this document](https://android.googlesource.com/platform/external/avb/+/HEAD/README.md)
# for more information.

import("//build/testing/verify_files_match.gni")
import("//build/zircon/tools.gni")
import("//src/developer/ffx/build/ffx_action.gni")

declare_args() {
  # If true, then a vbmeta image will be generated for provided ZBI
  # and the paving script will pave vbmeta images to the target device.
  use_vbmeta = false

  # If true, /config/devmgr config will be included into a vbmeta image
  # instead of bootfs.
  include_devmgr_config_in_vbmeta = false

  # a key which will be used to sign VBMETA and images for AVB
  avb_key = ""

  # AVB metadata which will be used to validate public key
  avb_atx_metadata = ""

  # AVB algorithm type.Supported options:
  #   SHA256_RSA2048
  #   SHA256_RSA4096
  #   SHA256_RSA8192
  #   SHA512_RSA2048
  #   SHA512_RSA4096
  #   SHA512_RSA8192
  avb_algorithm = "SHA512_RSA4096"

  # Partition name from where image will be verified
  zvb_partition_name = "zircon"

  # Board level extra vbmeta images to be combined into the top-level vbmeta
  # struct.
  board_extra_vbmeta_images = []

  # Board level extra vbmeta descriptors to be combined into the top-level
  # vbmeta struct (these are in json format)
  #
  # see //build/images/vbmeta/README.md for more information about these.
  board_extra_vbmeta_descriptors = []
}

# Template for producing VBMETA image for AVB
#
# Parameters
#
#   output_name (optional, default: target_name)
#
#   zbi (required)
#       [list-of-strings] path to a ZBI image to be included in AVB chain.
#       Must only contain a single entry.
#
#   prop_from_file (required)
#       [list of type/file] a list of pairs |type| and |file|.
#       |type| is one of ZBI item types (w/o ZBI_TYPE_ prefix);
#       |file| is a path to file to be stored in a vbmeta image
#       as ZBI_TYPE_|type| items in 'zbi' property.
#
#   deps (usually required)
#   testonly, metadata
#       Usual GN meaning.
template("vbmeta") {
  if (defined(invoker.output_name)) {
    output_file = invoker.output_name
  } else {
    output_file = target_name
  }

  output_file += ".vbmeta"

  zbi = invoker.zbi
  assert([ zbi[0] ] == zbi, "zbi parameter must contain a single entry")
  assert(avb_key != "", "avb_key must be specified")
  assert(avb_atx_metadata != "", "avb metadata must be specified")
  output_file = "$root_out_dir/$output_file"
  additional_descriptor_labels = []

  # TODO: Remove this set of actions when additional descriptors are moved to
  # JSON files instead of vbmeta files that the descriptors need to be extracted
  # from.
  foreach(entry, board_extra_vbmeta_images) {
    extra_vbmeta_filename = get_path_info(entry, "file")
    descriptor_output_filename =
        "${target_name}.additional_descriptor.${extra_vbmeta_filename}.json"
    descriptor_output_file = "${target_out_dir}/${descriptor_output_filename}"
    additional_descriptor_labels += [ ":$descriptor_output_filename" ]

    action(descriptor_output_filename) {
      script = "//build/images/assembly/extract_descriptor_fields.py"
      forward_variables_from(invoker,
                             [
                               "testonly",
                               "visibility",
                             ])

      avbtool = "//third_party/android/platform/external/avb/avbtool.py"
      args = [
        "--avbtool",
        rebase_path(avbtool, root_build_dir),
        "--vbmeta",
        rebase_path(entry, root_build_dir),
        "--output",
        rebase_path(descriptor_output_file, root_build_dir),
      ]
      inputs = [
        avbtool,
        entry,
      ]
      outputs = [ descriptor_output_file ]
    }
  }

  # TODO(fxbug.dev/75889): Remove these build_args in a separate cleanup pass
  assert(include_devmgr_config_in_vbmeta == false,
         "placing the devmgr config in vbmeta is not supported at this time")
  assert(avb_algorithm == "SHA512_RSA4096",
         "setting 'avb_algorithm' is not supported at this time")

  ffx_action(target_name) {
    forward_variables_from(invoker,
                           [
                             "testonly",
                             "visibility",
                             "deps",
                             "metadata",
                           ])

    args = [
      "--config",
      "assembly_enabled=true",
      "assembly",
      "vbmeta",
      "sign",
      "--key",
      rebase_path(avb_key, root_build_dir),
      "--key-metadata",
      rebase_path(avb_atx_metadata, root_build_dir),
      "--name",
      zvb_partition_name,
      "--image-path",
      rebase_path(zbi[0], root_build_dir),
      "--output",
      rebase_path(output_file, root_build_dir),
    ]
    inputs = [
      avb_key,
      avb_atx_metadata,
      zbi[0],
    ]

    # Add any json-format descriptors to the arguments list directly.
    foreach(descriptor_file, board_extra_vbmeta_descriptors) {
      args += [
        "--additional-descriptor",
        rebase_path(descriptor_file, root_build_dir),
      ]
      inputs += [ descriptor_file ]
    }

    if (board_extra_vbmeta_descriptors == []) {
      # TODO: Remove this set of actions when additional descriptors are moved to
      # JSON files instead of vbmeta files that the descriptors need to be extracted
      # from.
      foreach(descriptor_target, additional_descriptor_labels) {
        descriptor_outputs = get_target_outputs(descriptor_target)
        descriptor_file = descriptor_outputs[0]
        args += [
          "--additional-descriptor",
          rebase_path(descriptor_file, root_build_dir),
        ]
        inputs += [ descriptor_file ]
        deps += [ descriptor_target ]
      }
    } else {
      not_needed(additional_descriptor_labels)
    }

    outputs = [ output_file ]
  }
}
