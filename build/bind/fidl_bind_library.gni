# Copyright 2022 The Fuchsia Authors. All rights reserved.
# Use of this source code is governed by a BSD-style license that can be
# found in the LICENSE file.

import("//build/bind/bind.gni")

# Generates a driver bind library for a FIDL library.
#
# Parameters
#
#  * library_name
#    - Required: The name of the FIDL library.
#    - Type: string
#
#  * fidl_target
#    - Required: The name of the associated fidl() target.
#    - Type: string
#
#  * fidl_ir_json
#    - Required: The path to the associated FIDL IR JSON file.
#    - Type: path
#
#  * fidl_ir_target
#    - Required: The label of the target that generates the FIDL IR JSON file.
#    - Type: label
#
#  * testonly, visibility
#    - Optional: Usual GN meanings.
#
template("fidl_bind_library") {
  assert(defined(invoker.library_name),
         "fidl_bind_library(\"$target_name\") must define `library_name`")
  assert(defined(invoker.fidl_target),
         "fidl_bind_library(\"$target_name\") must define `fidl_target`")
  assert(defined(invoker.fidl_ir_json),
         "fidl_bind_library(\"$target_name\") must define `fidl_ir_json`")
  assert(defined(invoker.fidl_ir_target),
         "fidl_bind_library(\"$target_name\") must define `fidl_ir_target`")

  main_target = target_name
  generation_target = "${target_name}_generate"

  fidl_target_gen_dir =
      get_label_info(":bogus($fidl_toolchain)", "target_gen_dir")

  forward_variables_from(invoker,
                         [
                           "fidl_target",
                           "library_name",
                         ])
  bind_library_file_name = "${library_name}.bind"
  generated_bind_library =
      "$fidl_target_gen_dir/$fidl_target/fidl_bindlibs/$bind_library_file_name"

  if (current_toolchain == fidl_toolchain) {
    compiled_action(generation_target) {
      forward_variables_from(invoker,
                             [
                               "testonly",
                               "fidl_ir_json",
                               "fidl_ir_target",
                             ])
      visibility = [ ":*" ]

      tool = "//tools/bindc:bin"
      tool_output_name = "bindc"

      inputs = [ fidl_ir_json ]

      outputs = [ generated_bind_library ]

      deps = [ fidl_ir_target ]

      args = [
        "generate-bind",
        "--output",
        rebase_path("${generated_bind_library}", root_build_dir),
        rebase_path(fidl_ir_json, root_build_dir),
      ]

      metadata = {
        generated_sources = rebase_path(outputs, root_build_dir)
      }
    }
  } else {
    not_needed(invoker,
               [
                 "fidl_ir_json",
                 "fidl_ir_target",
               ])
  }

  bind_library(main_target) {
    forward_variables_from(invoker,
                           [
                             "testonly",
                             "visibility",
                           ])

    source_dep = ":$generation_target($fidl_toolchain)"
    source = generated_bind_library
    name = library_name
  }
}
