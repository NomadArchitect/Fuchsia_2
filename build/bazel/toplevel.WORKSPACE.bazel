# Copyright 2022 The Fuchsia Authors. All rights reserved.
# Use of this source code is governed by a BSD-style license that can be
# found in the LICENSE file.

"""
IMPORTANT: This file is only used when BzlMod is NOT enabled when generating
the Bazel workspace used by the Fuchsia platform build. Keep its content in
sync with toplevel.MODULE.bazel whenever possible!!
"""

workspace(name = "main")

local_repository(
    name = "bazel_skylib",
    path = "third_party/bazel_skylib",
)

local_repository(
    name = "bazel_rules_cc",
    path = "third_party/bazel_rules_cc",
)

local_repository(
    name = "io_bazel_rules_go",
    path = "third_party/bazel_rules_go",
)

local_repository(
    name = "rules_rust",
    path = "third_party/bazel_rules_rust",
)

# buildifier: disable=load-on-top
load(
    "@rules_rust//rust:repositories.bzl",
    "rules_rust_dependencies",
    "rust_register_toolchains",
)

rules_rust_dependencies()
rust_register_toolchains()

# buildifier: disable=load-on-top
load(
    "@io_bazel_rules_go//go:deps.bzl",
    "go_register_toolchains",
    "go_rules_dependencies",
    "go_wrap_sdk",
)

go_wrap_sdk(
    name = "go_sdk",
    root_file = "//:prebuilt/third_party/go/linux-x64/README.md",
)

go_rules_dependencies()
go_register_toolchains()

# Create @rules_fuchsia and @rules_fuchsia_experimental
local_repository(
    name = "rules_fuchsia",
    path = "third_party/sdk-integration/bazel_rules_fuchsia",
)

local_repository(
    name = "rules_fuchsia_experimental",
    path = "third_party/sdk-integration/bazel_rules_fuchsia_experimental",
)

# buildifier: disable=load-on-top
load(
    "@rules_fuchsia//fuchsia:deps.bzl",
    "fuchsia_clang_repository",
    "fuchsia_sdk_repository",
    "rules_fuchsia_deps",
)

rules_fuchsia_deps()

# buildifier: disable=load-on-top
load(
    "@rules_fuchsia_experimental//fuchsia/private:python_runtime_repository.bzl",
    "python_runtime_repository",
)

python_runtime_repository(
    name = "python_runtime",
    version = "2@3.9.13.chromium.22",
)

fuchsia_sdk_repository(
    name = "fuchsia_sdk",
    local_path = "../../../../sdk/exported/core",
)

register_toolchains("@fuchsia_sdk//:fuchsia_toolchain_sdk")

fuchsia_clang_repository(
    name = "fuchsia_clang",
    local_path = "prebuilt/third_party/clang/linux-x64",
)

# buildifier: disable=load-on-top
load("//:build/bazel/repository_rules.bzl", "bazel_inputs_repository")

bazel_inputs_repository(
    name = "legacy_ninja_build_outputs",
    inputs_manifest = "//:bazel_inputs_manifest.json",
)

# buildifier: disable=load-on-top
load(
    "//:build/bazel/toolchains/clang/repository_rules.bzl",
    "generate_prebuilt_toolchain_repository",
)

generate_prebuilt_toolchain_repository(
    name = "prebuilt_clang",
    clang_install_dir = "prebuilt/third_party/clang/linux-x64",
)
register_toolchains("@prebuilt_clang//:host_clang_linux_x64_cc_toolchain")
register_toolchains("@prebuilt_clang//:host_clang_linux_arm64_cc_toolchain")
