# Copyright 2022 The Fuchsia Authors. All rights reserved.
# Use of this source code is governed by a BSD-style license that can be
# found in the LICENSE file.

assert(current_toolchain == default_toolchain,
       "This BUILD.gn file should only be parsed in the default toolchain!")

# Location of the Bazel workspace, relative to the source root.
import("//build/bazel/bazel_workspace.gni")

# Used by bazel_build_action() to only allow one concurrent `bazel build`
# action at a time during the build, since doing so modifies the workspace,
# in particular the `bazel-bin` symlink that is used to copy the Bazel outputs
# to the Ninja output directory.
pool("build_action_pool") {
  depth = 1
}

group("bazel_workspace") {
  deps = [
    ":generate_main_workspace",
    ":legacy_ninja_build_outputs",
  ]
}

action("generate_main_workspace") {
  assert(
      bazel_top_dir == target_gen_dir,
      "Bazel workspace generation action was moved, please update " +
          "//build/bazel/bazel_workspace.gni$0x0aOld bazel_top_dir location " +
          "[${bazel_top_dir}] new location [${target_gen_dir}")

  script = "//build/bazel/scripts/generate-workspace.py"
  inputs = []

  # Location of the Bazel prebuilt binary to invoke.
  _bazel_bin = "//prebuilt/third_party/bazel/${host_os}-${host_cpu}/bazel"

  # This only lists the wrapper script as an output for this script,
  # but it also generates the `workspace` directory, whose content
  # depends on the top-level file and directory entries that appear
  # in the Fuchsia checkout directory and is thus not predictable.
  outputs = [
    "$target_gen_dir/bazel",
    "$target_gen_dir/workspace/WORKSPACE.bazel",
  ]
  args = [
    "--bazel-bin",
    rebase_path(_bazel_bin, root_build_dir),
    "--fuchsia-dir",
    rebase_path("//", root_build_dir),
    rebase_path(target_gen_dir, root_build_dir),
  ]

  # This cannot be hermetic since it creates a collection of
  # symlinks that depends on the state of the source tree.
  #
  # TODO(fxbug.dev/107967): Ensure that the workspace is always
  # re-generated if a top-level directory or file is added to or
  # removed from $FUCHSIA_DIR.
  hermetic_deps = false
}

import("//build/bazel/bazel_inputs.gni")

# This target is used to populate a Bazel workspace that exposes
# Ninja output files as input sources for the Bazel build.
#
# Each entry in the `inputs_deps` list must be a bazel_input_xxx()
# target, and its GN label name will be used to create a filegroup()
# in the generated BUILD.bazel file inside the workspace.
#
# These targets can also be listed in the `bazel_inputs` argument
# of the `bazel_build_command()` template.
#
bazel_inputs_workspace("legacy_ninja_build_outputs") {
  # IMPORTANT: This target's directory and name are
  # hard-coded in //build/bazel/toplevel.MODULE.bazel, keep this
  # file in sync with this one!
  input_deps = [
    ":host_tools",
    "examples/bazel_input_resource_directory:bazel_inputs",
    "examples/build_action:bazel_inputs",
  ]
}

# The `host_tools` filegroup() is used to access the host
# tools generated by the Ninja build, so they can be used
# directly in Bazel-generated actions.
bazel_input_resource_tree("host_tools") {
  sources_root = host_out_dir
  sources = [
    "ffx_unversioned",
    "zbi",
  ]

  # Store everything under `@legacy_ninja_build_outputs//:host_tools/<name>`
  dest_dir = "host_tools"

  deps = [
    "//src/developer/ffx:ffx_bin_unversioned($host_toolchain)",
    "//zircon/tools/zbi:zbi($host_toolchain)",
  ]
}
