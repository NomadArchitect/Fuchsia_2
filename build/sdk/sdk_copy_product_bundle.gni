# Copyright 2021 The Fuchsia Authors. All rights reserved.
# Use of this source code is governed by a BSD-style license that can be
# found in the LICENSE file.

import("//build/sdk/sdk_atom.gni")
import("//build/sdk/sdk_noop_atom.gni")
import("config.gni")

# Copies product bundle metadata files to an SDK.
#
# Parameters
#
#   category (required)
#     Publication level of the metadata set in SDK.
#     See //build/sdk/sdk_atom.gni.

template("sdk_copy_product_bundle") {
  assert(defined(invoker.category), "Must define an SDK category")

  file_base = "product_bundle"
  sdk_atom_id = "sdk://${file_base}/${target_name}"
  if (product_bundle_mapping_file_path == "") {
    # Don't generate a product bundle if product_bundle_mapping_file_path is empty.
    sdk_noop_atom(target_name) {
      id = sdk_atom_id
      category = invoker.category
      type = "product_bundle"
    }
  } else {
    # Used to make sure the product exists in the mapping file.
    occured = false

    product_bundle_files = []
    product_bundle_path = ""
    meta_dest = "${file_base}/${target_name}.json"

    product_bundle_mappings =
        read_file(product_bundle_mapping_file_path, "json")

    # Find the product in the mapping file. The value of 'Name' in the
    # mapping file must match the product name.
    foreach(mapping, product_bundle_mappings) {
      if (mapping.Name == target_name) {
        occured = true
        product_bundle_path = mapping.Path
        product_bundle_files += [
          {
            source = mapping.Path
            dest = meta_dest
          },
        ]
      }
    }
    assert(occured, "${target_name} is missing a product bundle")

    sdk_atom(target_name) {
      forward_variables_from(invoker, [ "category" ])

      id = sdk_atom_id
      meta = {
        schema = "product_bundle-6320eef1"
        dest = meta_dest
        source = product_bundle_path
        type = "product_bundle"
      }
      files = product_bundle_files
    }
  }
}
