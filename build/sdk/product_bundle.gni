# Copyright 2022 The Fuchsia Authors. All rights reserved.
# Use of this source code is governed by a BSD-style license that can be
# found in the LICENSE file.

import("//build/python/python_action.gni")
import("//src/developer/ffx/build/ffx_action.gni")

# Generate a product bundle that can be used to flash, emulate, or update a
# product onto a Fuchsia target.
#
# Arguments
#   partitions (required)
#     [path] The path to the partitions config.
#
#   system_a (optional)
#     [path] The path to the images manifest that describes images intended
#     for slot A.
#
#   system_b (optional)
#     [path] The path to the images manifest that describes images intended
#     for slot B.
#
#   system_r (optional)
#     [path] The path to the images manifest that describes images intended
#     for slot R.
#
#   partitions_contents (optional)
#     [list] A list of files referenced in the partitions config that will
#     be copied into the outputs.
#
#   system_a_contents (optional)
#     [list] A list of files referenced in the system_a config that will
#     be copied into the outputs.
#
#   system_b_contents (optional)
#     [list] A list of files referenced in the system_b config that will
#     be copied into the outputs.
#
#   system_r_contents (optional)
#     [list] A list of files referenced in the system_r config that will
#     be copied into the outputs.
#
template("product_bundle") {
  assert(defined(invoker.partitions), "Need to define partitions")

  labels = {
    hermetic_inputs = "${target_name}_hermetic_inputs"
  }

  files = {
    hermetic_inputs = "${target_out_dir}/${target_name}_hermetic_inputs"
    outdir = "$target_out_dir/$target_name"
  }

  python_action(labels.hermetic_inputs) {
    forward_variables_from(invoker,
                           [
                             "deps",
                             "testonly",
                             "visibility",
                           ])

    binary_label =
        "//build/assembly/scripts:hermetic_inputs_for_update_and_flash"

    inputs = [ invoker.partitions ]
    outputs = [ files.hermetic_inputs ]

    args = [
      "--partitions",
      rebase_path(invoker.partitions, root_build_dir),
      "--output",
      rebase_path(files.hermetic_inputs, root_build_dir),
    ]

    if (defined(invoker.system_a) || defined(invoker.system_b) ||
        defined(invoker.system_r)) {
      args += [ "--system" ]
      if (defined(invoker.system_a)) {
        args += [ rebase_path(invoker.system_a, root_build_dir) ]
        inputs += [ invoker.system_a ]
      }
      if (defined(invoker.system_b)) {
        args += [ rebase_path(invoker.system_b, root_build_dir) ]
        inputs += [ invoker.system_b ]
      }
      if (defined(invoker.system_r)) {
        args += [ rebase_path(invoker.system_r, root_build_dir) ]
        inputs += [ invoker.system_r ]
      }
    }
  }

  ffx_action(target_name) {
    no_output_dir_leaks = false
    forward_variables_from(invoker,
                           [
                             "deps",
                             "testonly",
                             "visibility",
                           ])
    if (!defined(deps)) {
      deps = []
    }

    outputs = []
    if (defined(invoker.partitions_contents)) {
      foreach(file, invoker.partitions_contents) {
        filename = get_path_info(file, "file")
        outputs += [ "${files.outdir}/partitions/${filename}" ]
      }
    }
    if (defined(invoker.system_a_contents)) {
      foreach(file, invoker.system_a_contents) {
        filename = get_path_info(file, "file")
        outputs += [ "${files.outdir}/system_a/${filename}" ]
      }
    }
    if (defined(invoker.system_b_contents)) {
      foreach(file, invoker.system_b_contents) {
        filename = get_path_info(file, "file")
        outputs += [ "${files.outdir}/system_b/${filename}" ]
      }
    }
    if (defined(invoker.system_r_contents)) {
      foreach(file, invoker.system_r_contents) {
        filename = get_path_info(file, "file")
        outputs += [ "${files.outdir}/system_r/${filename}" ]
      }
    }

    hermetic_inputs_target = ":${labels.hermetic_inputs}"
    hermetic_inputs_file = files.hermetic_inputs

    args = [
      "--config",
      "product.experimental=true",
      "product",
      "create",
      "--partitions",
      rebase_path(invoker.partitions, root_build_dir),
      "--out-dir",
      rebase_path(files.outdir, root_build_dir),
    ]

    outputs += [ "${files.outdir}/product_bundle.json" ]

    inputs = [ invoker.partitions ]

    if (defined(invoker.system_a)) {
      args += [
        "--system-a",
        rebase_path(invoker.system_a, root_build_dir),
      ]
      inputs += [ invoker.system_a ]
    }

    if (defined(invoker.system_b)) {
      args += [
        "--system-b",
        rebase_path(invoker.system_b, root_build_dir),
      ]
      inputs += [ invoker.system_b ]
    }

    if (defined(invoker.system_r)) {
      args += [
        "--system-r",
        rebase_path(invoker.system_r, root_build_dir),
      ]
      inputs += [ invoker.system_r ]
    }
  }
}
