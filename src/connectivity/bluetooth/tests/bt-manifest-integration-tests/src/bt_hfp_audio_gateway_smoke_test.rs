// Copyright 2021 The Fuchsia Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

use {
    anyhow::Error,
    fidl_fuchsia_bluetooth_bredr::{ProfileMarker, ProfileRequest},
    fidl_fuchsia_bluetooth_hfp::{HfpMarker, HfpProxy},
    fidl_fuchsia_bluetooth_hfp_test::{HfpTestMarker, HfpTestProxy},
    fidl_fuchsia_io2 as fio2,
    fidl_fuchsia_media::{AudioDeviceEnumeratorMarker, AudioDeviceEnumeratorRequestStream},
    fuchsia_audio_dai::test::mock_dai_dev_with_io_devices,
    fuchsia_component::server::ServiceFs,
    fuchsia_component_test::{
        mock::MockHandles, ChildProperties, RealmBuilder, RouteBuilder, RouteEndpoint,
    },
    futures::{channel::mpsc, SinkExt, StreamExt},
    realmbuilder_mock_helpers::{add_fidl_service_handler, mock_component, mock_dev},
    tracing::info,
};

/// HFP Audio Gateway component URL.
const HFP_AG_URL: &str =
    "fuchsia-pkg://fuchsia.com/bt-hfp-audio-gateway-smoke-test#meta/bt-hfp-audio-gateway.cm";

/// Local name of the HFP component under test.
const HFP_MONIKER: &str = "hfp";
/// Local name of the mock that is providing the `bredr.Profile` service.
const FAKE_PROFILE_MONIKER: &str = "fake-profile";
/// Local name of the mock that is providing the AudioDeviceEnumerator service.
const FAKE_AUDIO_DEVICE_MONIKER: &str = "fake-audio-device-provider";
const MOCK_DEV_MONIKER: &str = "mock-dev";
/// Local name of the fake HFP client that is connecting to `HFP_MONIKER`s services.
const HFP_CLIENT_MONIKER: &str = "fake-hfp-client";

/// The different events generated by this test.
/// Note: In order to prevent the component under test from terminating, any FIDL request or
/// Proxy is preserved.
enum Event {
    /// A BR/EDR Profile event.
    Profile(Option<ProfileRequest>),
    /// HFP service client connection.
    Hfp(Option<HfpProxy>),
    /// HFP Test service client connection.
    HfpTest(Option<HfpTestProxy>),
    /// AudioDeviceEnumerator service connection.
    AudioDevice(Option<AudioDeviceEnumeratorRequestStream>),
}

impl From<ProfileRequest> for Event {
    fn from(src: ProfileRequest) -> Self {
        Self::Profile(Some(src))
    }
}

impl From<AudioDeviceEnumeratorRequestStream> for Event {
    fn from(src: AudioDeviceEnumeratorRequestStream) -> Self {
        Self::AudioDevice(Some(src))
    }
}

async fn mock_audio_device_provider(
    sender: mpsc::Sender<Event>,
    handles: MockHandles,
) -> Result<(), Error> {
    let mut fs = ServiceFs::new();
    add_fidl_service_handler::<AudioDeviceEnumeratorMarker, _>(&mut fs, sender.clone());
    let _ = fs.serve_connection(handles.outgoing_dir.into_channel())?;
    fs.collect::<()>().await;
    Ok(())
}

/// Represents a fake HFP client that requests the `Hfp` and `HfpTest` services.
async fn mock_hfp_client(
    mut sender: mpsc::Sender<Event>,
    handles: MockHandles,
) -> Result<(), Error> {
    let hfp_svc = handles.connect_to_service::<HfpMarker>()?;
    sender.send(Event::Hfp(Some(hfp_svc))).await.expect("failed sending ack to test");

    let hfp_test_svc = handles.connect_to_service::<HfpTestMarker>()?;
    sender.send(Event::HfpTest(Some(hfp_test_svc))).await.expect("failed sending ack to test");
    Ok(())
}

/// Tests that the v2 HFP Audio Gateway component has the correct topology and verifies that
/// it provides and connects to the expected services.
#[fuchsia::test]
async fn hfp_audio_gateway_v2_capability_routing() {
    info!("Starting HFP Audio Gateway v2 smoke test...");

    let (sender, mut receiver) = mpsc::channel(4);

    let builder = RealmBuilder::new().await.expect("Failed to create test realm builder");
    // The v2 component under test.
    let _ = builder
        .add_child(HFP_MONIKER, HFP_AG_URL.to_string(), ChildProperties::new().eager())
        .await
        .expect("Failed adding HFP-AG to topology");
    // Mock Profile component to receive `bredr.Profile` requests.
    let sender_clone = sender.clone();
    let _ = builder
        .add_mock_child(
            FAKE_PROFILE_MONIKER,
            move |mock_handles: MockHandles| {
                Box::pin(mock_component::<ProfileMarker, _>(sender_clone.clone(), mock_handles))
            },
            ChildProperties::new(),
        )
        .await
        .expect("Failed adding profile mock to topology");
    // Mock AudioDeviceEnumerator component to receiver requests.
    let sender_clone = sender.clone();
    let _ = builder
        .add_mock_child(
            FAKE_AUDIO_DEVICE_MONIKER,
            move |mock_handles: MockHandles| {
                Box::pin(mock_audio_device_provider(sender_clone.clone(), mock_handles))
            },
            ChildProperties::new(),
        )
        .await
        .expect("Failed adding AudioDevice mock to topology");

    let _ = builder
        .add_mock_child(
            MOCK_DEV_MONIKER,
            move |mock_handles: MockHandles| {
                Box::pin(mock_dev(
                    mock_handles,
                    mock_dai_dev_with_io_devices("input1".to_string(), "output1".to_string()),
                ))
            },
            ChildProperties::new().eager(),
        )
        .await
        .expect("Failed adding mock /dev provider to topology");
    // Mock HFP-AG client that will request the `Hfp` and `HfpTest` services
    // which are provided by `bt-hfp-audio-gateway.cml`.
    let sender_clone = sender.clone();
    let _ = builder
        .add_mock_child(
            HFP_CLIENT_MONIKER,
            move |mock_handles: MockHandles| {
                Box::pin(mock_hfp_client(sender_clone.clone(), mock_handles))
            },
            ChildProperties::new().eager(),
        )
        .await
        .expect("Failed adding hfp client mock to topology");

    // Set up capabilities.
    let _ = builder
        .add_route(
            RouteBuilder::protocol_marker::<HfpMarker>()
                .source(RouteEndpoint::component(HFP_MONIKER))
                .targets(vec![RouteEndpoint::component(HFP_CLIENT_MONIKER)]),
        )
        .await
        .expect("Failed adding route for Hfp service")
        .add_route(
            RouteBuilder::protocol_marker::<HfpTestMarker>()
                .source(RouteEndpoint::component(HFP_MONIKER))
                .targets(vec![RouteEndpoint::component(HFP_CLIENT_MONIKER)]),
        )
        .await
        .expect("Failed adding route for HfpTest service")
        .add_route(
            RouteBuilder::protocol_marker::<ProfileMarker>()
                .source(RouteEndpoint::component(FAKE_PROFILE_MONIKER))
                .targets(vec![RouteEndpoint::component(HFP_MONIKER)]),
        )
        .await
        .expect("Failed adding route for Profile service")
        .add_route(
            RouteBuilder::protocol_marker::<AudioDeviceEnumeratorMarker>()
                .source(RouteEndpoint::component(FAKE_AUDIO_DEVICE_MONIKER))
                .targets(vec![RouteEndpoint::component(HFP_MONIKER)]),
        )
        .await
        .expect("Failed adding route for AudioDeviceEnumerator service")
        .add_route(
            RouteBuilder::directory("dev-dai", "/dev/class/dai", fio2::RW_STAR_DIR)
                .source(RouteEndpoint::component(MOCK_DEV_MONIKER))
                .targets(vec![RouteEndpoint::component(HFP_MONIKER)]),
        )
        .await
        .expect("Failed adding route for bt-host device directory")
        .add_route(
            RouteBuilder::protocol_marker::<fidl_fuchsia_logger::LogSinkMarker>()
                .source(RouteEndpoint::AboveRoot)
                .targets(vec![
                    RouteEndpoint::component(HFP_MONIKER),
                    RouteEndpoint::component(FAKE_PROFILE_MONIKER),
                    RouteEndpoint::component(FAKE_AUDIO_DEVICE_MONIKER),
                    RouteEndpoint::component(HFP_CLIENT_MONIKER),
                ]),
        )
        .await
        .expect("Failed adding LogSink route to test components");
    let mut test_topology = builder.build().await.unwrap();
    let realm_destroyed = test_topology.root.take_destroy_waiter();

    // If the routing is correctly configured, we expect 5 events:
    //   1. `hfp-audio-gateway` connecting to the Profile service.
    //     a. Making a request to Advertise.
    //     b. Making a request to Search.
    //   2. `hfp-audio-gateway` connecting to the AudioDeviceEnumerator service.
    //   3/4. `fake-hfp-client` connecting to the Hfp & HfpTest services which are provided by
    //      `hfp-audio-gateway`.
    let mut events = Vec::new();
    let expected_number_of_events = 5;
    for i in 0..expected_number_of_events {
        let msg = format!("Unexpected error waiting for {:?} event", i);
        events.push(receiver.next().await.expect(&msg));
    }
    assert_eq!(events.len(), expected_number_of_events);

    assert_eq!(
        events
            .iter()
            .filter(|&d| std::mem::discriminant(d) == std::mem::discriminant(&Event::Profile(None)))
            .count(),
        2
    );
    assert_eq!(
        events
            .iter()
            .filter(|&d| std::mem::discriminant(d) == std::mem::discriminant(&Event::Hfp(None)))
            .count(),
        1
    );
    assert_eq!(
        events
            .iter()
            .filter(|&d| std::mem::discriminant(d) == std::mem::discriminant(&Event::HfpTest(None)))
            .count(),
        1
    );
    assert_eq!(
        events
            .iter()
            .filter(
                |&d| std::mem::discriminant(d) == std::mem::discriminant(&Event::AudioDevice(None))
            )
            .count(),
        1
    );

    // Ensure realm components terminate before the local executor stops mocked components. Prevents
    // issues with mocked dependencies disappearing before termination.
    drop(test_topology);
    let _ = realm_destroyed.await.expect("realm destruction wait failed");
    info!("Finished HFP Audio Gateway smoke test");
}
