// Copyright 2018 The Fuchsia Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

//! Data for testing parsing/serialization of ICMP.
//!
//! This data was obtained by capturing live network traffic.

pub(crate) mod ndp_neighbor {
    pub(crate) const SOLICITATION_IP_PACKET_BYTES: &[u8] = &[
        0x68, 0x00, 0x00, 0x00, 0x00, 0x20, 0x3a, 0xff, 0xfe, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x56, 0xe0, 0x32, 0x09, 0xc4, 0x74, 0x77, 0xf0, 0xfe, 0x80, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x4f, 0xe7, 0x1a, 0x69, 0x86, 0x4b, 0x85, 0xc2, 0x87, 0x00, 0xca, 0xd0, 0x00,
        0x00, 0x00, 0x00, 0xfe, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4f, 0xe7, 0x1a, 0x69,
        0x86, 0x4b, 0x85, 0xc2, 0x01, 0x01, 0x54, 0xe0, 0x32, 0x74, 0x77, 0xf0,
    ];

    pub(crate) const SOURCE_LINK_LAYER_ADDRESS: &[u8] = &[0x54, 0xe0, 0x32, 0x74, 0x77, 0xf0];

    pub(crate) const TARGET_ADDRESS: &[u8] = &[
        0xfe, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4f, 0xe7, 0x1a, 0x69, 0x86, 0x4b, 0x85,
        0xc2,
    ];

    pub(crate) const ADVERTISEMENT_IP_PACKET_BYTES: &[u8] = &[
        0x60, 0x00, 0x00, 0x00, 0x00, 0x18, 0x3a, 0xff, 0xfe, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x4f, 0xe7, 0x1a, 0x69, 0x86, 0x4b, 0x85, 0xc2, 0xfe, 0x80, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x56, 0xe0, 0x32, 0x09, 0xc4, 0x74, 0x77, 0xf0, 0x88, 0x00, 0x8a, 0x1e, 0x40,
        0x00, 0x00, 0x00, 0xfe, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4f, 0xe7, 0x1a, 0x69,
        0x86, 0x4b, 0x85, 0xc2,
    ];
}

pub(crate) mod ndp_router {
    use core::num::NonZeroU8;
    use core::time::Duration;

    use crate::utils::NonZeroDuration;

    pub(crate) const ADVERTISEMENT_IP_PACKET_BYTES: &[u8] = &[
        0x68, 0x00, 0x00, 0x00, 0x00, 0x38, 0x3a, 0xff, 0xfe, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x02, 0x00, 0x5e, 0xff, 0xfe, 0x00, 0x02, 0x65, 0xff, 0x02, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x86, 0x00, 0xd9, 0x96, 0x40,
        0x00, 0x0e, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x00, 0x00,
        0x5e, 0x00, 0x02, 0x65, 0x03, 0x04, 0x40, 0xc0, 0x00, 0x27, 0x8d, 0x00, 0x00, 0x09, 0x3a,
        0x80, 0x00, 0x00, 0x00, 0x00, 0x26, 0x20, 0x00, 0x00, 0x10, 0x00, 0x50, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    ];

    /// Options in the Advertisement packet.
    // We know this is safe because we provide a non-zero `u8` value.
    pub(crate) const HOP_LIMIT: Option<NonZeroU8> = Some(unsafe { NonZeroU8::new_unchecked(64) });
    // We know this is safe because we provide a non-zero `Duration` value.
    pub(crate) const LIFETIME: Option<NonZeroDuration> =
        Some(unsafe { NonZeroDuration::new_unchecked(Duration::from_secs(3600)) });
    pub(crate) const REACHABLE_TIME: Option<NonZeroDuration> = None;
    pub(crate) const RETRANS_TIMER: Option<NonZeroDuration> = None;

    /// Data from the SourceLinkLayerAddress option.
    pub(crate) const SOURCE_LINK_LAYER_ADDRESS: &[u8] = &[0x00, 0x00, 0x5e, 0x00, 0x02, 0x65];

    /// Data from the Prefix Info option.
    // We know this is safe because we provide a non-zero `Duration` value.
    pub(crate) const PREFIX_INFO_VALID_LIFETIME: Option<NonZeroDuration> =
        Some(unsafe { NonZeroDuration::new_unchecked(Duration::from_secs(2_592_000)) });
    // We know this is safe because we provide a non-zero `Duration` value.
    pub(crate) const PREFIX_INFO_PREFERRED_LIFETIME: Option<NonZeroDuration> =
        Some(unsafe { NonZeroDuration::new_unchecked(Duration::from_secs(604_800)) });
    pub(crate) const PREFIX_ADDRESS: &[u8] = &[
        0x26, 0x20, 0x00, 0x00, 0x10, 0x00, 0x50, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00,
    ];
}
