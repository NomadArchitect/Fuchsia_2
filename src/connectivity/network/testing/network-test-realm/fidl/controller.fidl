// Copyright 2021 The Fuchsia Authors.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
library fuchsia.net.test.realm;

using fuchsia.net;
using fuchsia.net.interfaces;
using fuchsia.url;

/// Standard error codes for the `Controller` protocol.
type Error = strict enum {
    /// The controller encountered an unspecified error while performing the
    /// desired operation.
    INTERNAL = 1;
    /// A hermetic network realm was expected to exist, but no such realm was
    /// found to be running.
    HERMETIC_NETWORK_REALM_NOT_RUNNING = 2;
    /// A network interface was expected to exist, but was not found.
    INTERFACE_NOT_FOUND = 3;
    /// A stub was expected to exist, but was not found.
    STUB_NOT_RUNNING = 4;
    /// At least one argument was not valid.
    INVALID_ARGUMENTS = 5;
    /// The relevant component was not found.
    COMPONENT_NOT_FOUND = 6;
};

/// A controller for creating and manipulating the Network Test Realm.
///
/// The Network Test Realm corresponds to a hermetic network realm with a
/// Netstack under test. The `Controller` protocol is responsible for:
///
///  * Configuring the Network Test Realm and its child components. This
///    includes the Netstack under test and the other relevant network
///    components (e.g. a DHCP server).
///  * Coordinating interactions with the system's Netstack. This includes
///    temporarily taking over and mutating system interfaces.
@discoverable
protocol Controller {
    /// Starts a hermetic network realm corresponding to `netstack`.
    ///
    /// Any previously running hermetic network realm will be terminated before
    /// the new realm is started. The configured realm will contain a subset of
    /// the components in the standard network realm. In particular, it will
    /// contain:
    ///
    ///  * A Netstack instance that corresponds to the provided `netstack`
    ///  * A DHCP server
    ///  * A DHCPv6 client
    ///  * A DNS resolver
    ///
    /// + request `netstack` the type of Netstack that will be run.
    /// * error `INTERNAL` for internal errors, including failure to start the
    ///     specified `netstack`.
    StartHermeticNetworkRealm(struct {
        netstack strict enum {
            /// Netstack2.
            V2 = 1;
        };
    }) -> (struct {}) error Error;

    /// Stops any running hermetic network realm.
    ///
    /// All components in the hermetic network realm will be stopped. Similarly,
    /// any interfaces that were previously disabled on the system's Netstack
    /// will be re-enabled on a best-effort basis. That is, a failure to
    /// re-enable an interface will not result in this method returning an
    /// error.
    ///
    /// * error `HERMETIC_NETWORK_REALM_NOT_RUNNING` if a hermetic network realm
    ///     was not running.
    /// * error `INTERNAL` for internal errors, including failure to destroy the
    ///     realm.
    StopHermeticNetworkRealm() -> (struct {}) error Error;

    /// Attaches an interface to the hermetic Netsack.
    ///
    /// The interface that corresponds to `mac_address` will disabled on the
    /// system's Netstack, but enabled on the hermetic Netstack.
    ///
    /// + request `mac_address` address of the interface to be added to the
    ///     hermetic Netstack.
    /// + request `name` the name to assign to the new interface.
    /// * error `HERMETIC_NETWORK_REALM_NOT_RUNNING` if there is no running
    ///     hermetic network realm.
    /// * error `INTERFACE_NOT_FOUND` if an interface with `mac_address` could
    ///     not be found on the system.
    /// * error `INTERNAL` for internal errors, including failure to read the
    ///     system's interfaces or configure an interface.
    AddInterface(struct {
        mac_address fuchsia.net.MacAddress;
        name fuchsia.net.interfaces.name;
    }) -> (struct {}) error Error;

    /// Starts a test stub.
    ///
    /// Any previously running stub will be terminated before the provided
    /// stub corresponding to `component_url` is started.
    ///
    /// + request `component_url` the URL of the component to run.
    /// * error `COMPONENT_NOT_FOUND` if a component correspodning to
    ///     `component_url` could not be resolved.
    /// * error `HERMETIC_NETWORK_REALM_NOT_RUNNING` if there is no running
    ///     hermetic network realm.
    /// * error `INTERNAL` for internal errors, including failure to add the
    ///     desired stub within the hermetic network realm.
    /// * error `INVALID_ARGUMENTS` if the `component_url` is malformed.
    StartStub(struct {
        component_url fuchsia.url.Url;
    }) -> (struct {}) error Error;

    /// Stops the currently running stub.
    ///
    /// Other existing hermetic network realm components will continue to be run
    /// after this is invoked.
    ///
    /// * error `HERMETIC_NETWORK_REALM_NOT_RUNNING` if there is no running
    ///     hermetic network realm.
    /// * error `STUB_NOT_RUNNING` if there is no running stub.
    /// * error `INTERNAL` for internal errors, including failure to destroy the
    ///     stub component.
    StopStub() -> (struct {}) error Error;
};
