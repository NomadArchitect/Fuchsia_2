// Copyright 2021 The Fuchsia Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
library fuchsia.netemul.test;

using fuchsia.component;
using zx;

/// Sample interface that keeps a stateful integer counter starting at zero.
@discoverable
protocol Counter {
    /// Increments internal counter by one and returns new counter value.
    Increment() -> (struct {
        value uint32;
    });
    /// Connects `request` to a protocol in the `/svc` directory named
    /// `protocol_name`.
    ConnectToProtocol(resource struct {
        protocol_name fuchsia.component.name;
        request zx.handle:CHANNEL;
    });
    /// Connects `request` to a protocol found at `path`.
    ///
    /// + request `path` is the absolute path from the server's namespace.
    /// + request `request` is the server end channel to the protocol.
    ConnectToProtocolAt(resource struct {
        path string:fuchsia.component.MAX_PATH_LENGTH;
        request zx.handle:CHANNEL;
    });
    /// Opens the directory found at `path`.
    ///
    /// + request `path` is the absolute path from the server's namespace.
    /// * error `ZX_ERR_NOT_FOUND` if the directory at `path` is not in the server's namespace.
    /// * error `ZX_ERR_IO` if there is some other unspecified error during I/O.
    OpenStorageAt(struct {
        path string:fuchsia.component.MAX_PATH_LENGTH;
    }) -> (struct {}) error zx.status;
};
