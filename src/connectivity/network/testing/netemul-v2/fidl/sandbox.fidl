// Copyright 2021 The Fuchsia Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
library fuchsia.netemul;

using fuchsia.netemul.network;
using fuchsia.netemul.sync;

/// `Sandbox` is a hermetic container for network emulation testing.
///
/// Every connection to `Sandbox` represents a self-contained context where
/// [`fuchsia.netemul/ManagedRealm`]s can be created. The
/// [`fuchsia.netemul.network/NetworkContext`] and
/// [`fuchsia.netemul.sync/SyncManager`] instances offered by it are the same
/// that are exposed to any `ManagedRealm`s created by the `Sandbox`.
///
/// The lifetime of the created realms (and the context services) is bound to
/// the connection to the `Sandbox` protocol. If the channel is closed, all the
/// realms and the components created within them will be terminated.
@discoverable
protocol Sandbox {
    /// Creates a new realm configured by `options`.
    ///
    /// + request `realm` request handle to the newly created managed realm.
    /// + request `options` configures the setup and child components of
    ///     `realm`. If `options` is invalid, `realm` will be closed.
    ///
    /// Errors are presented as an epitaph on the `realm` channel.
    /// * error `ZX_ERR_INVALID_ARGS` if `options` was invalid.
    /// * error `ZX_ERR_INTERNAL` for internal errors, including failures to
    ///     build the requested component topology.
    CreateRealm(resource struct {
        realm server_end:ManagedRealm;
        options RealmOptions;
    });
    /// Gets this sandbox's network context.
    ///
    /// + request `network_context` request handle to the network context.
    GetNetworkContext(resource struct {
        network_context server_end:fuchsia.netemul.network.NetworkContext;
    });
    /// Gets this sandbox's synchronization manager.
    ///
    /// + request `sync_manager` request handle to the synchronization manager.
    GetSyncManager(resource struct {
        sync_manager server_end:fuchsia.netemul.sync.SyncManager;
    });
};
