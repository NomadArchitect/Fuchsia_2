// Copyright 2021 The Fuchsia Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
library fuchsia.netemul;

using fuchsia.component;
using fuchsia.io;
using fuchsia.netemul.network;
using fuchsia.url;
using zx;

type Empty = struct {};

/// A capability exposed by a component in a [`ManagedRealm`].
type ExposedCapability = strict union {
    /// The name of the exposed protocol.
    1: protocol fuchsia.component.name;
};

/// A dependency of one child component on a capability exposed by another in
/// the same realm.
type ChildDep = table {
    /// The name of the child exposing the needed capability.
    ///
    /// Required.
    1: name fuchsia.component.name;
    /// The exposed capability.
    ///
    /// Required.
    2: capability ExposedCapability;
};

/// A storage capability variant specifying the type of storage the component
/// has access to.
type StorageVariant = strict enum: uint8 {
    /// The `data` storage capability variant.
    DATA = 0;
};

/// A dependency of one child component on a storage capability offered by
/// netemul.
type StorageDep = table {
    /// The variant of the storage capability.
    ///
    /// Required.
    1: variant StorageVariant;
    /// The path at which the storage capability will be offered.
    ///
    /// Required.
    2: path string:fuchsia.component.MAX_PATH_LENGTH;
};

/// A capability to be offered to a child component in a [`ManagedRealm`].
type Capability = strict union {
    /// The `devfs` instance offered by netemul, where virtual devices are
    /// mounted.
    1: netemul_devfs Empty;
    /// The synchronization manager offered by netemul, shared between all the
    /// managed realms in a given sandbox.
    2: netemul_sync_manager Empty;
    /// The network context offered by netemul, shared between all the managed
    /// realms in a given sandbox.
    3: netemul_network_context Empty;
    /// The [`fuchsia.logger/LogSink`] offered by netemul.
    ///
    /// Decorates logs produced by components in the managed realm and forwards
    /// them to syslog.
    4: log_sink Empty;
    /// A dependency on a capability exposed by another child component in the
    /// same test realm.
    5: child_dep ChildDep;
    /// A dependency on a storage capability offered by netemul.
    6: storage_dep StorageDep;
};

/// The capabilities used by a child component in a [`ManagedRealm`].
type ChildUses = strict union {
    /// The child will be offered all the capabilities available in the realm,
    /// including all built-in capabilities offered by netemul as well as all
    /// capabilities offered by other child components in the same realm.
    1: all Empty;
    /// The child will be offered each of the specified capabilities.
    ///
    /// `capabilities` must be unique.
    2: capabilities vector<Capability>:MAX;
};

/// The definition of a child component to be added to a [`ManagedRealm`].
type ChildDef = table {
    /// The component URL of this child.
    ///
    /// Required.
    1: url fuchsia.url.Url;
    /// The name of this child local to its containing realm.
    ///
    /// Required.
    2: name fuchsia.component.name;
    /// Protocols that this child exposes to the realm.
    ///
    /// If not set, interpreted as an empty vector.
    3: exposes vector<fuchsia.component.name>:MAX;
    /// Capabilities that this child uses.
    ///
    /// If not set, interpreted as [`ChildUses.all`].
    4: uses ChildUses;
    /// Arguments to be passed to the child at runtime. If specified, overrides
    /// any arguments specified in the manifest.
    ///
    /// If not set, the original arguments from the manifest are used.
    5: program_args vector<string:MAX>:MAX;
    /// Whether the component should be started eagerly once the realm is
    /// created.
    ///
    /// If not set, interpreted as false.
    6: eager bool;
};

/// Options used to create a [`ManagedRealm`].
type RealmOptions = resource table {
    /// Realm name.
    ///
    /// The realm name is used for attribution and debugging purposes. It is
    /// used to decorate logs that come from its constituent child components.
    ///
    /// If not set, an automatically-generated name will be used.
    1: name string:MAX;
    /// Child components to dynamically create in this realm.
    ///
    /// If not set, interpreted as an empty vector.
    2: children vector<ChildDef>:MAX;
};

/// `ManagedRealm` is a netemul-managed realm.
///
/// A `ManagedRealm` is hermetic with respect to capabilities except for
///  * netemul-provided capabilities to allow networking and synchronization
///  * logging
///
/// `ManagedRealm` also provides a `devfs` instance: a directory standing for a
/// virtual device filesystem that can be controlled through the [`AddDevice`]
/// and [`RemoveDevice`] methods.
///
/// The lifetime of a `ManagedRealm` and all its children are tied to its
/// channel. Upon closure, all children of the realm will be destroyed.
protocol ManagedRealm {
    /// Returns the relative moniker of the root of the managed realm.
    ///
    /// - response `moniker` the relative moniker of the root of the generated
    ///     topology that contains this realm's child components.
    GetMoniker() -> (struct {
        moniker string:fuchsia.component.MAX_MONIKER_LENGTH;
    });
    /// Connects to a protocol named `protocol_name` provided by a child in this
    /// realm.
    ///
    /// If `child_name` is not provided, connects to the first child offering
    /// `protocol_name`.
    ///
    /// + request `protocol_name` the name of the protocol to connect to.
    /// + request `child_name` the name of the child component that is exposing
    ///     the requested protocol.
    /// + request `req` a channel to be bound to an implementation of the
    ///     protocol.
    ConnectToProtocol(resource struct {
        protocol_name fuchsia.component.name;
        child_name fuchsia.component.name:optional;
        req zx.handle:CHANNEL;
    });
    /// Mounts new virtual device `device` on netemul's `devfs` instance within
    /// this realm.
    ///
    /// This `devfs` instance is available to components that have the
    /// [`Capability.netemul_devfs`] capability.
    ///
    /// + request `path` relative path from `devfs` root to the virtual device
    ///     to be added to the realm.
    /// + request `device` virtual device server.
    /// * error `ZX_ERR_ALREADY_EXISTS` if `device.path` is already in use.
    /// * error `ZX_ERR_INVALID_ARGS` if an element of `path` exceeds [`fuchsia.io/MAX_FILENAME`]
    //      bytes in length.
    AddDevice(resource struct {
        path string:MAX;
        device client_end:fuchsia.netemul.network.DeviceProxy;
    }) -> (struct {}) error zx.status;
    /// Removes virtual device mounted at `path`.
    ///
    /// + request `path` the path to virtual device to be removed from the
    ///     realm, relative to `devfs` root.
    /// * error `ZX_ERR_NOT_FOUND` if `path` is not currently bound to a device.
    /// * error `ZX_ERR_INVALID_ARGS` if an element of `path` exceeds [`fuchsia.io/MAX_FILENAME`]
    //      bytes in length.
    RemoveDevice(struct {
        path string:MAX;
    }) -> (struct {}) error zx.status;
    /// Connects to netemul's `devfs` instance for this realm.
    ///
    /// + request `devfs` request handle to the `devfs` directory.
    GetDevfs(resource struct {
        devfs server_end:fuchsia.io.Directory;
    });
    /// Stops the specified child component in this realm. Stopping an already
    /// stopped child component is a no-op and returns success.
    ///
    /// + request `child_name` the name of the child component to be stopped.
    /// * error `ZX_ERR_NOT_FOUND` if `child_name` is not a child component in
    ///     this realm.
    /// * error `ZX_ERR_INVALID_ARGS` if `child_name` cannot be composed into a
    ///     well-formed moniker.
    /// * error `ZX_ERR_INTERNAL` if the call to the service dependency fails.
    StopChildComponent(struct {
        child_name fuchsia.component.name;
    }) -> (struct {}) error zx.status;
};
