# Copyright 2021 The Fuchsia Authors. All rights reserved.
# Use of this source code is governed by a BSD-style license that can be
# found in the LICENSE file.

import("//build/components.gni")
import("//build/rust/rustc_library.gni")
import("//build/rust/rustc_test.gni")
import("//src/storage/fshost/fshost.gni")
import("//src/storage/fshost/generated_fshost_config.gni")
import("//src/storage/testing/driver_test_realm.gni")
import("//tools/cmc/build/cmc.gni")

rustc_library("fshost_test_fixture") {
  edition = "2021"
  testonly = true
  sources = [
    "src/lib.rs",
    "src/mocks.rs",
  ]
  deps = [
    "//sdk/fidl/fuchsia.boot:fuchsia.boot_rust",
    "//sdk/fidl/fuchsia.fshost:fuchsia.fshost_rust",
    "//sdk/fidl/fuchsia.io:fuchsia.io_rust",
    "//sdk/fidl/fuchsia.logger:fuchsia.logger_rust",
    "//sdk/fidl/fuchsia.process:fuchsia.process_rust",
    "//sdk/lib/device-watcher/rust",
    "//src/lib/fdio/rust:fdio",
    "//src/lib/fidl/rust/fidl",
    "//src/lib/fuchsia-component-test",
    "//src/lib/storage/fs_management/rust:fs_management",
    "//src/lib/storage/key-bag",
    "//src/lib/storage/ramdevice_client/rust",
    "//src/lib/storage/vfs/rust:vfs",
    "//src/lib/zircon/rust:fuchsia-zircon",
    "//src/storage/bin/blobfs:blobfs-component",
    "//src/storage/fxfs:fuchsia.fxfs_rust",
    "//src/storage/fxfs:fxfs_component",
    "//src/storage/fxfs-crypt",
    "//src/storage/testing/rust:storage-isolated-driver-manager",
    "//third_party/rust_crates:anyhow",
    "//third_party/rust_crates:futures",
    "//third_party/rust_crates:uuid",
  ]
}

# Generates an fshost integration test component.
#
#   deps(optional)
#
#   source_root(required)
#     [string] The path to the binary which defines the test cases to run.
#
#   fshost_target (required)
#     [string] The build target of the component to test against. The name of this target is also
#     used to determine the component manifest path in the resulting package, so make sure the
#     target doesn't rename the component.
#
#   data_filesystem_format (required)
#     [string] The format of the data partition fshost exports. One of "fxfs", "minfs", or "f2fs".
#
template("fshost_integration_test") {
  assert(defined(invoker.fshost_target),
         "fshost component target not specified")
  assert(defined(invoker.data_filesystem_format),
         "data filesystem format not specified")

  _fshost_component_name = get_label_info(invoker.fshost_target, "name")
  _test_bin = string_replace(target_name, "-", "_")
  _test_bin = "${_test_bin}_bin"
  rustc_test(_test_bin) {
    edition = "2021"
    source_root = invoker.source_root
    rustenv = [
      "FSHOST_COMPONENT_NAME=${_fshost_component_name}",
      "DATA_FILESYSTEM_FORMAT=${invoker.data_filesystem_format}",
    ]
    sources = [ invoker.source_root ]
    deps = [
      ":fshost_test_fixture",
      "//sdk/fidl/fuchsia.io:fuchsia.io_rust",
      "//src/lib/fidl/rust/fidl",
      "//src/lib/fuchsia",
    ]
    if (defined(invoker.deps)) {
      deps += invoker.deps
    }
  }

  _shard_target = "${target_name}-shard"
  generated_file(_shard_target) {
    testonly = true
    contents = {
      program = {
        binary = "bin/${_test_bin}"
      }
    }
    outputs = [ "${target_out_dir}/${_shard_target}.json" ]
    output_conversion = "json"
    visibility = [ ":*" ]
  }
  _shard = get_target_outputs(":$_shard_target")
  _shard = _shard[0]

  _manifest_target = "${target_name}-manifest.cml"
  cmc_merge("$_manifest_target") {
    testonly = true
    sources = [
      "meta/fshost_integration_test.cml",
      _shard,
    ]
    deps = [ ":$_shard_target" ]
  }
  _manifest = get_target_outputs(":$_manifest_target")
  _manifest = _manifest[0]

  fuchsia_test_component(target_name) {
    manifest = _manifest
    deps = [
      ":$_manifest_target",
      ":$_test_bin",
      invoker.fshost_target,
    ]
  }
}

fshost_component_and_config("test-fshost-rust-minfs") {
  testonly = true
  options = default_integration_test_options
  options.data_filesystem_format = "minfs"
  options.use_rust_port = true
}

fshost_component_and_config("test-fshost-rust-fxfs") {
  testonly = true
  options = default_integration_test_options
  options.data_filesystem_format = "fxfs"
  options.use_rust_port = true
}

fshost_integration_test("fshost-cpp-integration-test-fxfs") {
  fshost_target = "//src/storage/fshost/testing:test-fshost-fxfs"
  source_root = "tests/fshost_integration_test.rs"
  data_filesystem_format = "fxfs"
}

fshost_integration_test("fshost-cpp-integration-test-minfs") {
  fshost_target = "//src/storage/fshost/testing:test-fshost"
  source_root = "tests/fshost_integration_test.rs"
  data_filesystem_format = "minfs"
}

# TODO(fxbug.dev/87511): Port this test to fshost-rust.
fshost_integration_test("fshost-cpp-integration-test-fxfs-recovery") {
  fshost_target = "//src/storage/fshost/testing:test-fshost-fxfs-recovery"
  source_root = "tests/fshost_recovery_integration_test.rs"
  deps = [
    "//sdk/fidl/fuchsia.device:fuchsia.device_rust",
    "//sdk/fidl/fuchsia.fshost:fuchsia.fshost_rust",
    "//sdk/fidl/fuchsia.hardware.block.volume:fuchsia.hardware.block.volume_rust",
    "//sdk/lib/device-watcher/rust",
    "//src/lib/fuchsia-component",
    "//src/lib/fuchsia-fs",
    "//src/lib/storage/fs_management/rust:fs_management",
    "//src/lib/storage/key-bag",
    "//src/lib/storage/ramdevice_client/rust",
    "//src/lib/zircon/rust:fuchsia-zircon",
    "//src/storage/fxfs:fuchsia.fxfs_rust",
    "//src/storage/testing/rust:storage-isolated-driver-manager",
    "//third_party/rust_crates:either",
  ]
  data_filesystem_format = "fxfs"
}

# TODO(fxbug.dev/87511): Port this test to fshost-rust.
fshost_integration_test("fshost-cpp-integration-test-minfs-recovery") {
  fshost_target = "//src/storage/fshost/testing:test-fshost-recovery"
  source_root = "tests/fshost_recovery_integration_test.rs"
  deps = [
    "//sdk/fidl/fuchsia.device:fuchsia.device_rust",
    "//sdk/fidl/fuchsia.fshost:fuchsia.fshost_rust",
    "//sdk/fidl/fuchsia.hardware.block.volume:fuchsia.hardware.block.volume_rust",
    "//sdk/lib/device-watcher/rust",
    "//src/lib/fuchsia-component",
    "//src/lib/fuchsia-fs",
    "//src/lib/storage/fs_management/rust:fs_management",
    "//src/lib/storage/key-bag",
    "//src/lib/storage/ramdevice_client/rust",
    "//src/lib/zircon/rust:fuchsia-zircon",
    "//src/storage/fxfs:fuchsia.fxfs_rust",
    "//src/storage/testing/rust:storage-isolated-driver-manager",
    "//third_party/rust_crates:either",
  ]
  data_filesystem_format = "minfs"
}

fshost_integration_test("fshost-rust-integration-test-minfs") {
  fshost_target = ":test-fshost-rust-minfs"
  source_root = "tests/fshost_integration_test.rs"
  data_filesystem_format = "minfs"
}

fshost_integration_test("fshost-rust-integration-test-fxfs") {
  fshost_target = ":test-fshost-rust-fxfs"
  source_root = "tests/fshost_integration_test.rs"
  data_filesystem_format = "fxfs"
}

fuchsia_test_package("fshost_integration_tests") {
  # Currently required because the data_formatted test causes Fxfs to log:
  #   ERROR: ... handle_start failed error=Journal replay failed
  test_specs = {
    log_settings = {
      max_severity = "ERROR"
    }
  }
  test_components = [
    ":fshost-cpp-integration-test-fxfs",
    ":fshost-cpp-integration-test-minfs",
    ":fshost-cpp-integration-test-fxfs-recovery",
    ":fshost-cpp-integration-test-minfs-recovery",
    ":fshost-rust-integration-test-fxfs",
    ":fshost-rust-integration-test-minfs",
  ]
  deps = [ "//src/storage/testing:storage_driver_test_realm" ]
}

group("tests") {
  testonly = true
  deps = [ ":fshost_integration_tests" ]
}
