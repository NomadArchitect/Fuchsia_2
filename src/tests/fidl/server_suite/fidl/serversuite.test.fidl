// Copyright 2022 The Fuchsia Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

library fidl.serversuite;

using zx;

// The Runner coordinates test activity and is shared by multiple tests.
@discoverable
closed protocol Runner {
    // Check if a test with a given name is enabled before running it.
    strict IsTestEnabled(struct {
        test Test;
    }) -> (struct {
        is_enabled bool;
    });

    // Create a Target to run tests against.
    strict Start(resource struct {
        // Reporter to send events to.
        reporter client_end:Reporter;
        // Target server end to bind for this test.
        target AnyTarget;
    }) -> ();

    // A two-way function to test that the Runner is still responding.
    strict CheckAlive() -> ();
};

// Type which can hold the server end of any target type. The test case will
// create the channel and pass it to the runner in Start.
type AnyTarget = strict resource union {
    1: closed_target server_end:ClosedTarget;
    2: ajar_target server_end:AjarTarget;
    3: open_target server_end:OpenTarget;
};

// Empty type used for valid but empty union variants.
type Empty = struct {};

// The Target is the server under test. This target is used for tests which use
// a closed protocol, or which don't care whether the protocol is open or
// closed.
closed protocol ClosedTarget {
    strict OneWayNoPayload();

    strict TwoWayNoPayload() -> ();

    strict TwoWayStructPayload(struct {
        v int8;
    }) -> (struct {
        v int8;
    });

    strict TwoWayTablePayload(table {
        1: v int8;
    }) -> (table {
        1: v int8;
    });

    strict TwoWayUnionPayload(union {
        1: v int8;
    }) -> (union {
        1: v int8;
    });

    strict TwoWayResult(strict union {
        1: payload string:MAX;
        2: error uint32;
    }) -> (struct {
        payload string:MAX;
    }) error uint32;

    strict GetHandleRights(resource struct {
        // Plain handle, there should be no rights or type checking.
        handle zx.handle;
    }) -> (struct {
            // Rights should be obtained by calling zx_object_get_info on |handle|
            // with topic ZX_INFO_HANDLE_BASIC.
        rights zx.rights;
    });

    strict GetSignalableEventRights(resource struct {
        handle zx.handle:<EVENT, zx.rights.SIGNAL>;
    }) -> (struct {
        // Rights should be obtained by calling zx_object_get_info on |handle|
        // with topic ZX_INFO_HANDLE_BASIC.
        rights zx.rights;
    });

    strict EchoAsTransferableSignalableEvent(resource struct {
        handle zx.handle;
    }) -> (resource struct {
        // The response handle should be the same as the request handle.
        handle zx.handle:<EVENT, zx.rights.TRANSFER | zx.rights.SIGNAL>;
    });

    strict CloseWithEpitaph(struct {
        epitaph_status int32;
    });

    strict ByteVectorSize(struct {
        vec vector<uint8>;
    }) -> (struct {
        n uint32;
    });

    strict HandleVectorSize(resource struct {
        vec vector<zx.handle:EVENT>;
    }) -> (struct {
        n uint32;
    });

    strict CreateNByteVector(struct {
        n uint32;
    }) -> (struct {
        vec vector<uint8>;
    });

    strict CreateNHandleVector(resource struct {
        n uint32;
    }) -> (resource struct {
        vec vector<zx.handle:EVENT>;
    });
};

// This is a version of Target only used for tests which care about having an
// ajar protocol. This is mostly used for Unknown Interaction testing.
ajar protocol AjarTarget {};

// This is a version of Target only used for tests which care about having an
// open protocol. This is mostly used for Unknown Interaction testing.
open protocol OpenTarget {
    // Ask the server to send either StrictEvent or FlexibleEvent.
    strict SendEvent(struct {
        event_type strict enum {
            STRICT = 1;
            FLEXIBLE = 2;
        };
    });

    strict -> StrictEvent();
    flexible -> FlexibleEvent();

    strict StrictOneWay();
    flexible FlexibleOneWay();

    strict StrictTwoWay() -> ();
    strict StrictTwoWayFields(struct {
        reply_with int32;
    }) -> (struct {
        some_field int32;
    });
    strict StrictTwoWayErr(strict union {
        1: reply_success Empty;
        2: reply_error int32;
    }) -> (struct {}) error int32;
    strict StrictTwoWayFieldsErr(strict union {
        1: reply_success int32;
        2: reply_error int32;
    }) -> (struct {
        some_field int32;
    }) error int32;

    flexible FlexibleTwoWay() -> (struct {});
    flexible FlexibleTwoWayFields(struct {
        reply_with int32;
    }) -> (struct {
        some_field int32;
    });
    flexible FlexibleTwoWayErr(strict union {
        1: reply_success Empty;
        2: reply_error int32;
    }) -> (struct {}) error int32;
    flexible FlexibleTwoWayFieldsErr(strict union {
        1: reply_success int32;
        2: reply_error int32;
    }) -> (struct {
        some_field int32;
    }) error int32;
};

// Identifies which type of unknown method was received in the unknown
// interaction handler.
type UnknownMethodType = strict enum {
    // Unknown method was a one-way method, like "SomeMethod(...);"
    ONE_WAY = 1;
    // Unknown method was a two-way method, like "SomeMethod(...) -> (...);"
    TWO_WAY = 2;
};

type UnknownMethodInfo = struct {
    // Ordinal that was received in the interaction handler.
    ordinal uint64;
    // Whether the unknown method is one-way or two-way.
    unknown_method_type UnknownMethodType;
};

// The Reporter sends results of the test to the test harness.
closed protocol Reporter {
    strict ReceivedOneWayNoPayload();

    // Report that the unknown interaction handler ran.
    strict ReceivedUnknownMethod(UnknownMethodInfo);

    strict ReceivedStrictOneWay();
    strict ReceivedFlexibleOneWay();
};

type Test = flexible enum : uint32 {
    // basic_tests.cc
    SETUP = 1001;
    ONE_WAY_NO_PAYLOAD = 1002;
    TWO_WAY_NO_PAYLOAD = 1003;
    TWO_WAY_RESULT_WITH_PAYLOAD = 1004;
    TWO_WAY_RESULT_WITH_ERROR = 1005;
    TWO_WAY_STRUCT_PAYLOAD = 1006;
    TWO_WAY_TABLE_PAYLOAD = 1007;
    TWO_WAY_UNION_PAYLOAD = 1008;

    // message_header_tests.cc
    ONE_WAY_WITH_NON_ZERO_TXID = 2001;
    TWO_WAY_NO_PAYLOAD_WITH_ZERO_TXID = 2002;
    UNKNOWN_ORDINAL_CAUSES_CLOSE = 2003;
    BAD_MAGIC_NUMBER_CAUSES_CLOSE = 2004;
    BAD_AT_REST_FLAGS_CAUSES_CLOSE = 2005;
    BAD_DYNAMIC_FLAGS_CAUSES_CLOSE = 2006;

    // coding_tests.cc
    BAD_PAYLOAD_ENCODING = 3001;

    // handle_rights_tests.cc
    CLIENT_SENDS_TOO_FEW_HANDLES = 4001;
    CLIENT_SENDS_WRONG_HANDLE_TYPE = 4002;
    CLIENT_SENDS_TOO_MANY_RIGHTS = 4003;
    CLIENT_SENDS_TOO_FEW_RIGHTS = 4004;
    CLIENT_SENDS_OBJECT_OVER_PLAIN_HANDLE = 4005;
    SERVER_SENDS_WRONG_HANDLE_TYPE = 4006;
    SERVER_SENDS_TOO_MANY_RIGHTS = 4007;
    SERVER_SENDS_TOO_FEW_RIGHTS = 4008;

    // epitaph_tests.cc
    SERVER_SENDS_EPITAPH = 5001;
    SERVER_RECEIVES_EPITAPH_INVALID = 5002;

    // limit_tests.cc
    REQUEST_MATCHES_BYTE_LIMIT = 6001;
    REQUEST_MATCHES_HANDLE_LIMIT = 6002;
    RESPONSE_MATCHES_BYTE_LIMIT = 6003;
    RESPONSE_MATCHES_HANDLE_LIMIT = 6004;
    RESPONSE_EXCEEDS_BYTE_LIMIT = 6005;
    RESPONSE_EXCEEDS_HANDLE_LIMIT = 6006;

    // unknown_interactions_tests.cc
    SEND_STRICT_EVENT = 7001;
    SEND_FLEXIBLE_EVENT = 7002;

    RECEIVE_STRICT_ONE_WAY = 7101;
    RECEIVE_STRICT_ONE_WAY_MISMATCHED_STRICTNESS = 7102;
    RECEIVE_FLEXIBLE_ONE_WAY = 7103;
    RECEIVE_FLEXIBLE_ONE_WAY_MISMATCHED_STRICTNESS = 7104;

    STRICT_TWO_WAY_RESPONSE = 7201;
    STRICT_TWO_WAY_RESPONSE_MISMATCHED_STRICTNESS = 7202;
    STRICT_TWO_WAY_ERROR_SYNTAX_RESPONSE = 7203;
    STRICT_TWO_WAY_ERROR_SYNTAX_RESPONSE_MISMATCHED_STRICTNESS = 7204;
    FLEXIBLE_TWO_WAY_RESPONSE = 7205;
    FLEXIBLE_TWO_WAY_RESPONSE_MISMATCHED_STRICTNESS = 7206;
    FLEXIBLE_TWO_WAY_NON_EMPTY_RESPONSE = 7207;
    FLEXIBLE_TWO_WAY_ERROR_SYNTAX_RESPONSE_SUCCESS_RESULT = 7208;
    FLEXIBLE_TWO_WAY_ERROR_SYNTAX_RESPONSE_ERROR_RESULT = 7209;
    FLEXIBLE_TWO_WAY_ERROR_SYNTAX_NON_EMPTY_RESPONSE_SUCCESS_RESULT = 7210;
    FLEXIBLE_TWO_WAY_ERROR_SYNTAX_NON_EMPTY_RESPONSE_ERROR_RESULT = 7211;

    UNKNOWN_STRICT_ONE_WAY_OPEN_PROTOCOL = 7301;
    UNKNOWN_FLEXIBLE_ONE_WAY_OPEN_PROTOCOL = 7302;
    UNKNOWN_FLEXIBLE_ONE_WAY_HANDLE_OPEN_PROTOCOL = 7303;
    UNKNOWN_STRICT_TWO_WAY_OPEN_PROTOCOL = 7304;
    UNKNOWN_FLEXIBLE_TWO_WAY_OPEN_PROTOCOL = 7305;
    UNKNOWN_FLEXIBLE_TWO_WAY_HANDLE_OPEN_PROTOCOL = 7306;
    UNKNOWN_STRICT_ONE_WAY_AJAR_PROTOCOL = 7307;
    UNKNOWN_FLEXIBLE_ONE_WAY_AJAR_PROTOCOL = 7308;
    UNKNOWN_STRICT_TWO_WAY_AJAR_PROTOCOL = 7309;
    UNKNOWN_FLEXIBLE_TWO_WAY_AJAR_PROTOCOL = 7310;
    UNKNOWN_STRICT_ONE_WAY_CLOSED_PROTOCOL = 7311;
    UNKNOWN_FLEXIBLE_ONE_WAY_CLOSED_PROTOCOL = 7312;
    UNKNOWN_STRICT_TWO_WAY_CLOSED_PROTOCOL = 7313;
    UNKNOWN_FLEXIBLE_TWO_WAY_CLOSED_PROTOCOL = 7314;
};
