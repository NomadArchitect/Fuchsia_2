// Copyright 2022 The Fuchsia Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

library fidl.serversuite;

using zx;

// The Runner coordinates test activity and is shared by multiple tests.
@discoverable
protocol Runner {
    // Check if a test with a given name is enabled before running it.
    IsTestEnabled(struct {
        test Test;
    }) -> (struct {
        is_enabled bool;
    });

    // Create a Target to run tests against.
    Start(resource struct {
        reporter client_end:Reporter;
    }) -> (resource struct {
        target client_end:Target;
    });

    // A two-way function to test that the Runner is still responding.
    CheckAlive() -> ();
};

// The Target is the server under test.
protocol Target {
    OneWayNoPayload();

    TwoWayNoPayload() -> ();

    TwoWayStructPayload(struct {
        v int8;
    }) -> (struct {
        v int8;
    });

    TwoWayTablePayload(table {
        1: v int8;
    }) -> (table {
        1: v int8;
    });

    TwoWayUnionPayload(union {
        1: v int8;
    }) -> (union {
        1: v int8;
    });

    TwoWayResult(strict union {
        1: payload string:MAX;
        2: error uint32;
    }) -> (struct {
        payload string:MAX;
    }) error uint32;

    GetHandleRights(resource struct {
        // Plain handle, there should be no rights or type checking.
        handle zx.handle;
    }) -> (struct {
            // Rights should be obtained by calling zx_object_get_info on |handle|
            // with topic ZX_INFO_HANDLE_BASIC.
        rights zx.rights;
    });

    GetSignalableEventRights(resource struct {
        handle zx.handle:<EVENT, zx.rights.SIGNAL>;
    }) -> (struct {
        // Rights should be obtained by calling zx_object_get_info on |handle|
        // with topic ZX_INFO_HANDLE_BASIC.
        rights zx.rights;
    });

    EchoAsTransferableSignalableEvent(resource struct {
        handle zx.handle;
    }) -> (resource struct {
        // The response handle should be the same as the request handle.
        handle zx.handle:<EVENT, zx.rights.TRANSFER | zx.rights.SIGNAL>;
    });

    CloseWithEpitaph(struct {
        epitaph_status int32;
    });
};

// The Reporter sends results of the test to the test harness.
protocol Reporter {
    ReceivedOneWayNoPayload();
};

type Test = flexible enum : uint32 {
    // basic_tests.cc
    SETUP = 1001;
    ONE_WAY_NO_PAYLOAD = 1002;
    TWO_WAY_NO_PAYLOAD = 1003;
    TWO_WAY_RESULT_WITH_PAYLOAD = 1004;
    TWO_WAY_RESULT_WITH_ERROR = 1005;
    TWO_WAY_STRUCT_PAYLOAD = 1006;
    TWO_WAY_TABLE_PAYLOAD = 1007;
    TWO_WAY_UNION_PAYLOAD = 1008;

    // message_header_tests.cc
    ONE_WAY_WITH_NON_ZERO_TXID = 2001;
    TWO_WAY_NO_PAYLOAD_WITH_ZERO_TXID = 2002;
    UNKNOWN_ORDINAL_CAUSES_CLOSE = 2003;
    BAD_MAGIC_NUMBER_CAUSES_CLOSE = 2004;
    BAD_AT_REST_FLAGS_CAUSES_CLOSE = 2005;
    BAD_DYNAMIC_FLAGS_CAUSES_CLOSE = 2006;

    // coding_tests.cc
    BAD_PAYLOAD_ENCODING = 3001;

    // handle_rights_tests.cc
    CLIENT_SENDS_WRONG_HANDLE_TYPE = 4001;
    CLIENT_SENDS_TOO_MANY_RIGHTS = 4002;
    CLIENT_SENDS_TOO_FEW_RIGHTS = 4003;
    CLIENT_SENDS_OBJECT_OVER_PLAIN_HANDLE = 4004;
    SERVER_SENDS_WRONG_HANDLE_TYPE = 4005;
    SERVER_SENDS_TOO_MANY_RIGHTS = 4006;
    SERVER_SENDS_TOO_FEW_RIGHTS = 4007;

    // epitaph_tests.cc
    SERVER_SENDS_EPITAPH = 5001;
    SERVER_RECEIVES_EPITAPH_INVALID = 5002;
};
