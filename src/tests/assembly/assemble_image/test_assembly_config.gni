# Copyright 2022 The Fuchsia Authors. All rights reserved.
# Use of this source code is governed by a BSD-style license that can be
# found in the LICENSE file.

import("//build/assembly/generated_image_assembly_config.gni")
import("//build/assembly/legacy_assembly_input_bundle.gni")
import("//build/python/python_action.gni")
import("//build/python/python_binary.gni")
import("//build/testing/host_test.gni")

# Runs ffx assembly with the given parameters as an integration test
#
# Arguments
#   config_json (required)
#     contents of the assembly config.json as a scope
#
#   base_packages (optional)
#     [list of labels] The packages to include in the base package set.
#
#   additional_args (optional)
#     [list of string arguments] Additional arguments to pass to the test runner
#
#   additional_deps (optional)
#     [list of labels] config files or other generated inputs to be used by assembly
template("test_assembly_config") {
  base_packages_param = []
  if (defined(invoker.base_packages)) {
    base_packages_param += invoker.base_packages
  }

  additional_args_param = []
  if (defined(invoker.additional_args)) {
    additional_args_param += invoker.additional_args
  }

  additional_deps_param = []
  if (defined(invoker.additional_deps)) {
    additional_deps_param += invoker.additional_deps
  }

  config_json_param = invoker.config_json

  labels = {
    ffx = "//src/developer/ffx:host"
  }

  files = {
    # ffx itself is always found here
    ffx = "$root_build_dir/host-tools/ffx"
  }

  if (is_host) {
    # These are all evaluated only in the host toolchain

    group("${target_name}") {
      testonly = true
      deps = [
        # Assembly should only be performed in the default toolchain, so depend on
        # that task in the default toolchain.
        ":${target_name}($default_toolchain)",
      ]
    }

    # The binary needs to be in the host toolchain.
    python_binary("bin") {
      testonly = true
      main_source =
          "//src/tests/assembly/assemble_image/test_assembled_config.py"
      sources = []
      deps = [ "//src/tests/assembly/lib/run_assembly" ]
    }

    not_needed(
        [
          # When this test is moved to a host_test(), these will then be used.
          "files",
          "labels",

          # Args which are used in the is_fuchsia section
          "base_packages_param",
          "additional_deps_param",
          "additional_args_param",
          "config_json_param",
        ])
  }

  if (is_fuchsia) {
    fuchsia_files = {
      assembly_config = "${target_out_dir}/config.json"
    }

    generated_file("config") {
      testonly = true
      outputs = [ fuchsia_files.assembly_config ]
      output_conversion = "json"
      contents = config_json_param
    }

    # NOTE: target named this way for legacy_assembly_input_bundle's label inference
    #
    # NOTE: This action should only be performed in the target toolchain
    outdir = "$target_out_dir/outdir"
    generated_image_assembly_config("image.image_assembly_config") {
      testonly = true

      # NOTE: legacy_assembly_input_bundle assumes this file path
      output_path = "$target_out_dir/image.image_assembly_config.json"
      kernel_image = "//zircon/kernel"
      base_packages = base_packages_param
    }

    # NOTE: This action should only be performed in the target toolchain
    legacy_assembly_input_bundle("input_bundle") {
      testonly = true

      # NOTE: this internally generates the above target name and path
      image_assembly_label = ":image"
      bundles_dir = outdir
      include_config_data = false
    }

    # This is an action rather than a host test because enumerating all the inputs to assembly
    # for the host_test_data() template is very difficult right now.
    # TODO(https://fxbug.dev/96877) archive the AIB into a tgz for host_test_data()
    #
    # NOTE:  This action should only occur in the target toolchain, not in the
    # host toolchain.
    stamp = "$target_out_dir/test_assembled_config.stamp"
    platform_bundles_target = "//bundles/assembly($default_toolchain)"
    platform_bundles_dir =
        get_label_info(platform_bundles_target, "target_out_dir")
    outdir = "$target_out_dir/outdir"
    python_action("${target_name}") {
      testonly = true

      # TODO(fxbug.dev/77290) - Add depfile support and then remove the following
      hermetic_deps = false
      binary_label = ":bin"
      args = [
               "--ffx-bin",
               rebase_path(files.ffx, root_build_dir),
               "--product-assembly-config",
               rebase_path(fuchsia_files.assembly_config, root_build_dir),
               "--legacy-bundle-dir",
               rebase_path(outdir, root_build_dir),
               "--input-bundles-dir",
               rebase_path(platform_bundles_dir, root_build_dir),
               "--outdir",
               rebase_path(outdir, root_build_dir),
               "--stamp",
               rebase_path(stamp, root_build_dir),
             ] + additional_args_param
      deps = [
               ":input_bundle",
               labels.ffx,
               platform_bundles_target,
             ] + additional_deps_param
      outputs = [ stamp ]

      not_needed(invoker, [ "test_runner_source" ])
    }
  }
}
