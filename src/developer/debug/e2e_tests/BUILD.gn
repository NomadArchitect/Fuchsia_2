# Copyright 2022 The Fuchsia Authors. All rights reserved.
# Use of this source code is governed by a BSD-style license that can be
# found in the LICENSE file.

import("//build/host.gni")
import("//build/test.gni")
import("//build/testing/environments.gni")
import("//build/testing/host_test_data.gni")
import("//build/zircon/c_utils.gni")

if (is_host) {
  test("zxdb_e2e_tests") {
    sources = [
      "e2e_test.cc",
      "e2e_test.h",
      "ffx_debug_agent_bridge.cc",
      "ffx_debug_agent_bridge.h",
      "main_e2e_test.cc",
      "main_e2e_test.h",
      "test_run_and_kill_process.cc",
      "test_run_failing_test_component.cc",
      "test_status.cc",
    ]

    # TODO: Enable the test on ASan builder after fxbug.dev/112674 is fixed.
    if (!is_asan) {
      sources += [ "test_step_plt.cc" ]
    }

    deps = [
      # In variant builds the variant version of the test executable will be run. However, the test
      # will expect it can still run the host_x64 default variant of ffx, which is still built
      # regardless of build variant. But a simple dependency here would try to build an ASAN variant
      # of ffx, which creates a conflict because then there are two ffx binaries in the path of the
      # existing tooling, which causes the infra builds (and local attempts to invoke ffx) to fail
      # horribly. ${toolchain_variant.base} specifies specifically to depend on the normal
      # non-variant version of ffx that's built all the time so we don't create a second copy, and
      # can expect the path to be consistent and predictable.
      ":zxdb_e2e_test_data(${toolchain_variant.base})",
      "//src/developer/debug/shared",
      "//src/developer/debug/zxdb/client",
      "//src/developer/debug/zxdb/common:test_support",
      "//src/developer/debug/zxdb/console:test_support",
      "//src/developer/debug/zxdb/symbols:test_support",
      "//src/lib/fxl/test:test_settings",
      "//third_party/googletest:gtest",
    ]

    environments = all_fuchsia_envs

    # TODO(fxbug.dev/108369): Disable this test for sherlock and vim3 because we're seeing higher
    # flake rates than in any other environments due to the FFX bug.
    environments -= [
      sherlock_env,
      vim3_env,
    ]

    # TODO(fxbug.dev/64897): The arm64 emulator is run from an arm64 host but we only support
    # running tests on x64 hosts.
    if (target_cpu == "arm64") {
      environments -= [ emu_env ]
    }
  }

  host_test_data("zxdb_e2e_test_data") {
    sources = [
      # The "copy_unstripped_binaries" target below ensures that these files are always present in
      # this location, regardless of whether or not this is a variant build. Additional inferior
      # programs that are to be used in these tests should be added both in this list and to the
      # deps of the unstripped_binaries_list target below.
      "$root_build_dir/exe.unstripped/crasher",
      "$root_build_dir/exe.unstripped/crasher_test",
      "$root_build_dir/exe.unstripped/step_plt",
      "$root_out_dir/ffx",
    ]

    deps = [
      ":copy_unstripped_binaries",
      "//src/developer/ffx:ffx_bin",
    ]
  }

  unstripped_binaries_list_file =
      "$target_gen_dir/zxdb_e2e_test_unstripped_binaries.list"

  # This action takes the output of the link_output_rspfile target and copies them into a well known
  # location. This is necessary in variant builds where an extra directory is created in
  # root_build_dir and we cannot know from the host toolchain which variant is being built. In
  # default toolchain builds, this action does nothing.
  action("copy_unstripped_binaries") {
    testonly = true

    stamp_file = "$target_gen_dir/copy_unstripped_binaries.stamp"
    inputs = [ unstripped_binaries_list_file ]
    outputs = [ stamp_file ]

    script = "copy_unstripped_binaries.py"
    args = [
      rebase_path(unstripped_binaries_list_file, root_build_dir),
      rebase_path(stamp_file, root_build_dir),
      "exe.unstripped",
    ]

    deps = [ ":unstripped_binaries_list" ]
  }

  # This is the magic that will point to the output directory for target binaries. This is
  # particularly helpful in variant builds where the host toolchain doesn't know the toolchain
  # variant that built the target binaries. The action copy_unstripped_binaries will then process
  # this file and put the unstripped binaries in a common location to be consumed by the tests.
  link_output_rspfile("unstripped_binaries_list") {
    testonly = true
    outputs = [ unstripped_binaries_list_file ]

    deps = [
      "inferiors:zxdb_e2e_inferiors($target_toolchain)",
      "//src/developer/forensics/crasher:crasher($target_toolchain)",
      "//src/developer/forensics/crasher:crasher_test($target_toolchain)",
    ]
  }
}

group("tests") {
  testonly = true
  deps = [ ":zxdb_e2e_tests($host_toolchain)" ]
}
