# Copyright 2022 The Fuchsia Authors. All rights reserved.
# Use of this source code is governed by a BSD-style license that can be
# found in the LICENSE file.

import("//build/components.gni")

executable("bin") {
  testonly = true
  output_name = "test-ui-stack"

  sources = [ "main.cc" ]

  deps = [
    ":test_ui_stack_config_lib",
    "//sdk/fidl/fuchsia.accessibility.semantics",
    "//sdk/fidl/fuchsia.element",
    "//sdk/fidl/fuchsia.input.interaction",
    "//sdk/fidl/fuchsia.ui.composition",
    "//sdk/fidl/fuchsia.ui.input",
    "//sdk/fidl/fuchsia.ui.input3",
    "//sdk/fidl/fuchsia.ui.pointerinjector",
    "//sdk/fidl/fuchsia.ui.scenic",
    "//sdk/fidl/fuchsia.ui.shortcut",
    "//sdk/fidl/fuchsia.ui.test.input",
    "//sdk/fidl/fuchsia.ui.test.scene",
    "//sdk/lib/sys/cpp",
    "//sdk/lib/syslog/cpp",
    "//src/lib/ui/input-synthesis:test.inputsynthesis",
    "//src/ui/testing/ui_test_realm",
    "//zircon/system/ulib/async-loop:async-loop-cpp",
    "//zircon/system/ulib/async-loop:async-loop-default",
  ]
}

fuchsia_component("test-ui-stack-component") {
  testonly = true
  component_name = "test-ui-stack"
  manifest = "meta/test-ui-stack.cml"
  deps = [ ":bin" ]
}

fuchsia_component("test-ui-stack-realm") {
  testonly = true
  component_name = "test-ui-stack-realm"
  manifest = "meta/test-ui-stack-realm.cml"
  deps = [ ":test-ui-stack-component" ]
}

# Required for structured config.
fuchsia_component_manifest("test_ui_stack_manifest") {
  testonly = true
  component_name = "test-ui-stack"
  manifest = "meta/test-ui-stack.cml"
}

fuchsia_structured_config_cpp_elf_lib("test_ui_stack_config_lib") {
  testonly = true
  cm_label = ":test_ui_stack_manifest"
}

fuchsia_structured_config_values("gfx_root_presenter_config") {
  testonly = true
  cm_label = ":test_ui_stack_manifest"
  values = {
    use_scene_manager = false
    use_flatland = false
  }
}

fuchsia_structured_config_values("gfx_scene_manager_config") {
  testonly = true
  cm_label = ":test_ui_stack_manifest"
  values = {
    use_scene_manager = true
    use_flatland = false
  }
}

fuchsia_structured_config_values("flatland_scene_manager_config") {
  testonly = true
  cm_label = ":test_ui_stack_manifest"
  values = {
    use_scene_manager = true
    use_flatland = true
  }
}

# This package is identical to :gfx-root-presenter-test-ui-stack below.
#
# I chose to preserve a separate generic "test-ui-stack" package to
# encourage clients to use this package moniker when they intend to
# override the configuration.
fuchsia_package("test-ui-stack") {
  testonly = true
  deps = [
    ":gfx_root_presenter_config",
    ":test-ui-stack-component",
  ]
}

# *** Begin pre-packaged UI stack permutations ***
#
# The packages below contain specific configurations of the UI stack.
#
# Please ONLY use them if:
#  (1) Your test needs to include a specific flavor of the UI stack
#  statically, i.e. in the test's .cml as oppposed to RealmBuilder,
#
#  AND
#
#  (2) You cannot build your own test ui stack package with an override
#  config file.
fuchsia_package("gfx-root-presenter-test-ui-stack") {
  testonly = true
  deps = [
    ":gfx_root_presenter_config",
    ":test-ui-stack-component",
  ]
}

fuchsia_package("gfx-scene-manager-test-ui-stack") {
  testonly = true
  deps = [
    ":gfx_scene_manager_config",
    ":test-ui-stack-component",
  ]
}

fuchsia_package("flatland-scene-manager-test-ui-stack") {
  testonly = true
  deps = [
    ":flatland_scene_manager_config",
    ":test-ui-stack-component",
  ]
}

# *** End pre-packaged UI stack permutations ***

group("test-ui-stack-flavors") {
  testonly = true
  deps = [
    ":flatland-scene-manager-test-ui-stack",
    ":gfx-root-presenter-test-ui-stack",
    ":gfx-scene-manager-test-ui-stack",
    ":test-ui-stack",
  ]
}
