# Copyright 2020 The Fuchsia Authors. All rights reserved.
# Use of this source code is governed by a BSD-style license that can be
# found in the LICENSE file.

import("//build/components.gni")
import("//build/fidl/fidl.gni")
import("//build/flutter/config.gni")

fidl("test.touch") {
  sdk_category = "internal"
  sources = [ "test_app_launcher.test.fidl" ]
  public_deps = [ "//zircon/vdso/zx" ]
}

executable("touch-input-test-ip-bin") {
  testonly = true
  sources = [ "touch-input-test-ip.cc" ]
  output_name = "touch-input-test-ip"
  deps = [
    ":test.touch",
    "//sdk/fidl/fuchsia.accessibility.semantics",
    "//sdk/fidl/fuchsia.buildinfo",
    "//sdk/fidl/fuchsia.cobalt",
    "//sdk/fidl/fuchsia.component",
    "//sdk/fidl/fuchsia.fonts",
    "//sdk/fidl/fuchsia.hardware.display",
    "//sdk/fidl/fuchsia.input.injection",
    "//sdk/fidl/fuchsia.intl",
    "//sdk/fidl/fuchsia.kernel",
    "//sdk/fidl/fuchsia.memorypressure",
    "//sdk/fidl/fuchsia.net.interfaces",
    "//sdk/fidl/fuchsia.netstack",
    "//sdk/fidl/fuchsia.posix.socket",
    "//sdk/fidl/fuchsia.scheduler",
    "//sdk/fidl/fuchsia.tracing.provider",
    "//sdk/fidl/fuchsia.ui.app",
    "//sdk/fidl/fuchsia.ui.input",
    "//sdk/fidl/fuchsia.ui.pointer",
    "//sdk/fidl/fuchsia.ui.pointerinjector",
    "//sdk/fidl/fuchsia.ui.pointerinjector.configuration",
    "//sdk/fidl/fuchsia.ui.policy",
    "//sdk/fidl/fuchsia.ui.scenic",
    "//sdk/fidl/fuchsia.ui.test.input",
    "//sdk/fidl/fuchsia.vulkan.loader",
    "//sdk/fidl/fuchsia.web",
    "//sdk/lib/fdio",
    "//sdk/lib/fit",
    "//sdk/lib/sys/component/cpp/testing:cpp",
    "//sdk/lib/sys/cpp",
    "//sdk/lib/sys/cpp/testing:integration_fixture",
    "//sdk/lib/ui/scenic/cpp",
    "//src/lib/fostr/fidl/fuchsia.ui.gfx",
    "//src/lib/fostr/fidl/fuchsia.ui.input",
    "//src/lib/fxl",
    "//src/lib/fxl/test:gtest_main",
    "//src/lib/testing/loop_fixture",
    "//src/ui/input/testing/fake_input_report_device",
    "//src/ui/testing/ui_test_manager",
    "//third_party/googletest:gtest",
    "//zircon/system/ulib/async-loop:async-loop-cpp",
    "//zircon/system/ulib/async-loop:async-loop-default",
    "//zircon/system/ulib/zx",
  ]
}

fuchsia_test_component("touch-input-test-ip-component") {
  testonly = true
  manifest = "meta/touch-input-test-ip.cml"
  deps = [ ":touch-input-test-ip-bin" ]
}

fuchsia_test_package("touch-input-test-ip") {
  test_components = [ ":touch-input-test-ip-component" ]
  deps = [
    "//src/cobalt/bin/testing/mock_cobalt",
    "//src/connectivity/network/netstack:component",
    "//src/developer/build_info/testing:fake-build-info-component",
    "//src/developer/memory/monitor:component",
    "//src/fonts:font_provider_cm",
    "//src/testing/fidl/intl_property_manager:intl_property_manager_component",
    "//src/ui/bin/text:text_manager_comp_v2",
    "//src/ui/tests/integration_input_tests/touch/embedding-flutter:realm",
    "//src/ui/tests/integration_input_tests/touch/one-chromium:component",
    "//src/ui/tests/integration_input_tests/touch/one-flutter:realm",
    "//src/ui/tests/integration_input_tests/touch/touch-gfx-client:component",
  ]
  test_specs = {
    log_settings = {
      # TODO(fxbug.dev/93081): Investigate flakes and remove allowing ERROR severity.
      max_severity = "ERROR"
    }
    environments = [
      {
        dimensions = {
          # Ensure the device has Vulkan.
          device_type = "AEMU"
        }
      },
    ]
  }
}

executable("pointerinjector-config-test-bin") {
  testonly = true
  sources = [ "pointerinjector-config-test.cc" ]
  output_name = "pointerinjector-config-test"
  deps = [
    ":test.touch",
    "//sdk/fidl/fuchsia.hardware.display",
    "//sdk/fidl/fuchsia.input.injection",
    "//sdk/fidl/fuchsia.ui.scenic",
    "//sdk/fidl/fuchsia.ui.test.input",
    "//sdk/lib/fdio",
    "//sdk/lib/fit",
    "//sdk/lib/sys/component/cpp/testing:cpp",
    "//sdk/lib/sys/cpp",
    "//sdk/lib/sys/cpp/testing:integration_fixture",
    "//src/lib/fxl",
    "//src/lib/fxl/test:gtest_main",
    "//src/lib/testing/loop_fixture",
    "//src/ui/input/testing/fake_input_report_device",
    "//src/ui/testing/ui_test_manager",
    "//third_party/googletest:gtest",
    "//zircon/system/ulib/async-loop:async-loop-cpp",
    "//zircon/system/ulib/async-loop:async-loop-default",
    "//zircon/system/ulib/zx",
  ]
}

fuchsia_test_component("pointerinjector-config-test-component") {
  testonly = true
  manifest = "meta/pointerinjector-config-test.cml"
  deps = [ ":pointerinjector-config-test-bin" ]
}

fuchsia_test_package("pointerinjector-config-test") {
  test_components = [ ":pointerinjector-config-test-component" ]
  deps = [
    "//src/ui/tests/integration_input_tests/touch/touch-gfx-client:component",
  ]
  test_specs = {
    log_settings = {
      # TODO(fxbug.dev/93081): Investigate flakes and remove allowing ERROR severity.
      max_severity = "ERROR"
    }
    environments = [
      {
        dimensions = {
          # Ensure the device has Vulkan.
          device_type = "AEMU"
        }
      },
    ]
  }
}

group("tests") {
  testonly = true
  deps = [
    ":pointerinjector-config-test",
    ":touch-input-test-ip",

    # The deps below are necessary on minimal product configs.
    "//src/chromium:web_engine",
    "//src/cobalt/bin/testing/mock_cobalt",
    "//src/flutter",
    "//src/graphics/bin/vulkan_loader",
    "//src/testing/fidl/intl_property_manager",
    "//src/ui/bin/hardware_display_controller_provider:fake-hardware-display-controller-provider",
    "//src/ui/bin/text:text_manager",
    "//src/ui/tests/integration_input_tests/touch/embedding-flutter",
    "//src/ui/tests/integration_input_tests/touch/one-chromium",
    "//src/ui/tests/integration_input_tests/touch/one-flutter",
    "//src/ui/tests/integration_input_tests/touch/touch-gfx-client",
  ]
}
