digraph {
  rankdir="LR"
  label="ONE-FINGER DRAG RECOGNIZER" labelloc="t"

  // The gesture arena, which invokes methods on the various states of the recognizer.
  arena [shape="doublecircle"]

  // Definition of `InitialContender`.
  //
  // This state does _not_ require the button to be pressed, to allow
  // the user some time between initial touchpad contact, and depressing
  // the button.
  arena -> examine_at_initial_contender [label="examine\nevent()"]
  examine_at_initial_contender [shape="diamond" label="exactly\none\nfinger?"]
  examine_at_initial_contender -> return_finger_down_contender_at_initial_contender [label="yes"]
  examine_at_initial_contender -> return_mismatch_at_initial_contender [label="no"]
  return_finger_down_contender_at_initial_contender [shape="rectangle" label="return\nFingerDownContender"]
  return_mismatch_at_initial_contender [shape="rectangle" label="return\nMismatch"]
  subgraph cluster_initial_contender {
    label="InitialContender\n`impl Contender`"
    examine_at_initial_contender
    return_finger_down_contender_at_initial_contender
    return_mismatch_at_initial_contender
  }

  // Definition of `FingerDownContender`.
  arena -> examine_at_finger_down_contender [label="examine\nevent()"]
  examine_at_finger_down_contender [shape="diamond" label="elapsed\n<\nthreshold?"]
  examine_at_finger_down_contender -> return_mismatch_at_finger_down_contender [label="no"]
  examine_at_finger_down_contender -> examine2_at_finger_down_contender [label="yes"]
  examine2_at_finger_down_contender [shape="diamond" label="exactly\none\nfinger?"]
  examine2_at_finger_down_contender -> return_mismatch_at_finger_down_contender [label="no"]
  examine2_at_finger_down_contender -> examine3_at_finger_down_contender [label="yes"]
  examine3_at_finger_down_contender [shape="diamond" label="button\npressed?"]
  examine3_at_finger_down_contender -> return_button_down_contender_at_finger_down_contender [label="yes"]
  examine3_at_finger_down_contender -> return_self_at_finger_down_contender [label="no"]
  return_mismatch_at_finger_down_contender [shape="rectangle" label="return\nMismatch"]
  return_button_down_contender_at_finger_down_contender [shape="rectangle" label="return\nButtonDownContender"]
  return_self_at_finger_down_contender [shape="rectangle" label="return\n`self`"]
  subgraph cluster_finger_down_contender {
    label="FingerDownContender\n`impl Contender`"
    examine_at_finger_down_contender
    examine2_at_finger_down_contender
    examine3_at_finger_down_contender
    return_mismatch_at_finger_down_contender
    return_button_down_contender_at_finger_down_contender
    return_self_at_finger_down_contender
  }

  // Definition of `ButtonDownContender`.
  arena -> examine_at_button_down_contender [label="examine\nevent()"]
  examine_at_button_down_contender [shape="diamond" label="elapsed\n<\nthreshold?"]
  examine_at_button_down_contender -> return_mismatch_at_button_down_contender [label="no"]
  examine_at_button_down_contender -> examine2_at_button_down_contender [label="yes"]
  examine2_at_button_down_contender [shape="diamond" label="exactly\none\nfinger?"]
  examine2_at_button_down_contender -> return_mismatch_at_button_down_contender [label="no"]
  examine2_at_button_down_contender -> examine3_at_button_down_contender [label="yes"]
  examine3_at_button_down_contender [shape="diamond" label="button\npressed?"]
  examine3_at_button_down_contender -> return_mismatch_at_button_down_contender [label="no"]
  examine3_at_button_down_contender -> examine4_at_button_down_contender [label="yes"]
  examine4_at_button_down_contender [shape="diamond" label="displacement\n>\nthreshold?"]
  examine4_at_button_down_contender -> return_matched_contender_at_button_down_contender [label="yes"]
  examine4_at_button_down_contender -> return_self_at_button_down_contender [label="no"]
  return_mismatch_at_button_down_contender [shape="rectangle" label="return\nMismatch"]
  return_matched_contender_at_button_down_contender [shape="rectangle" label="return\nMatchedContender"]
  return_self_at_button_down_contender [shape="rectangle" label="return\n`self`"]
  subgraph cluster_button_down_contender {
    label="ButtonDownContender\n`impl Contender`"
    examine_at_button_down_contender
    examine2_at_button_down_contender
    examine3_at_button_down_contender
    examine4_at_button_down_contender
    return_mismatch_at_button_down_contender
    return_matched_contender_at_button_down_contender
    return_self_at_button_down_contender
  }

  // Definition of `MatchedContender`.
  arena -> verify_at_matched_contender [label="verify\nevent()"]
  verify_at_matched_contender [shape="diamond" label="exactly\none\nfinger?"]
  verify_at_matched_contender -> return_mismatch_at_matched_contender [label="no"]
  verify_at_matched_contender -> verify2_at_matched_contender [label="yes"]
  verify2_at_matched_contender [shape="diamond" label="button\npressed?"]
  verify2_at_matched_contender -> return_mismatch_at_matched_contender [label="no"]
  verify2_at_matched_contender -> return_self_at_matched_contender [label="yes"]
  return_mismatch_at_matched_contender [shape="rectangle" label="return\nMismatch"]
  return_self_at_matched_contender [shape="rectangle" label="return\n`self`"]
  arena -> return_winner_at_matched_contender [label="process\nbuffered\nevents()"]
  return_winner_at_matched_contender [shape="rectangle" label="return\nvec![events], Winner, Drag"]
  subgraph cluster_matched_contender {
    label="MatchedContender"
    verify_at_matched_contender
    verify2_at_matched_contender
    return_mismatch_at_matched_contender
    return_self_at_matched_contender
    return_winner_at_matched_contender
  }

  arena -> process_at_winner [label="process\nnew\nevent()"]
  process_at_winner [shape="diamond" label="button\npressed?"]
  process_at_winner -> return_end_with_event_at_winner [label="no"]
  process_at_winner -> process2_at_winner [label="yes"]
  process2_at_winner [shape="diamond" label="num\nfingers\npresent"]
  // Zero fingers should never happen, since it's not possible for
  // the button to be pressed without any fingers being in contact
  // with the touchpad. Continue the gesture, and hope that the
  // button state catches up with the contact state soon.
  process2_at_winner -> return_continue_with_event_at_winner [label="0"]
  process2_at_winner -> return_continue_with_event_at_winner [label="1"]
  process2_at_winner -> return_end_with_event_at_winner [label=">=2"]
  return_continue_with_event_at_winner [shape="rectangle" label="return\nContinueGesture(\nSome, self)"]
  return_end_with_event_at_winner [shape="rectangle" label="return\nEndGesture(Some)"]
  subgraph cluster_forward_motion {
    label="Winner"
    process_at_winner
    process2_at_winner
    return_continue_with_event_at_winner
    return_end_with_event_at_winner
  }
}
