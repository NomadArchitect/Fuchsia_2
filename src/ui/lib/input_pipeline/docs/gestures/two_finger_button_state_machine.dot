digraph {
  rankdir="LR"
  label="TWO-FINGER BUTTON DOWN RECOGNIZER" labelloc="t"

  // The gesture arena, which invokes methods on the various states of the recognizer.
  arena [shape="doublecircle"]

  // Definition of `InitialContender`.
  //
  // This state does _not_ require the button to be pressed, to allow
  // the user some time between initial touchpad contact, and depressing
  // the button.
  arena -> examine_at_initial_contender [label="examine\nevent()"]
  examine_at_initial_contender [shape="diamond" label="finger\ncount"]
  examine_at_initial_contender -> return_1_finger_contact_contender_at_initial_contender [label="1"]
  examine_at_initial_contender -> return_2_finger_contact_contender_at_initial_contender [label="2"]
  examine_at_initial_contender -> return_mismatch_at_initial_contender [label="other"]
  return_1_finger_contact_contender_at_initial_contender [shape="rectangle" label="return\nOneFingerContactContender"]
  return_2_finger_contact_contender_at_initial_contender [shape="rectangle" label="return\nTwoFingerContactContender"]
  return_mismatch_at_initial_contender [shape="rectangle" label="return\nMismatch"]
  subgraph cluster_initial_contender {
    label="InitialContender\n`impl Contender`"
    examine_at_initial_contender
    return_1_finger_contact_contender_at_initial_contender
    return_2_finger_contact_contender_at_initial_contender
    return_mismatch_at_initial_contender
  }

  // Definition of `OneFingerContactContender`.
  arena -> examine_at_1_finger_contact_contender [label="examine\nevent()"]
  examine_at_1_finger_contact_contender [shape="diamond" label="movement\n<\nthreshold?"]
  examine_at_1_finger_contact_contender -> return_mismatch_at_1_finger_contact_contender [label="no"]
  examine_at_1_finger_contact_contender -> examine2_at_1_finger_contact_contender [label="yes"]
  examine2_at_1_finger_contact_contender [shape="diamond" label="button\npressed?"]
  examine2_at_1_finger_contact_contender -> return_mismatch_at_1_finger_contact_contender [label="yes"]
  examine2_at_1_finger_contact_contender -> examine3_at_1_finger_contact_contender [label="no"]
  examine3_at_1_finger_contact_contender [shape="diamond" label="finger\ncount"]
  examine3_at_1_finger_contact_contender -> return_mismatch_at_1_finger_contact_contender [label="other"]
  examine3_at_1_finger_contact_contender -> return_self_at_1_finger_contact_contender [label="1"]
  examine3_at_1_finger_contact_contender -> return_2_finger_contact_contender_at_1_finger_contact_contender [label="2"]
  return_mismatch_at_1_finger_contact_contender [shape="rectangle" label="return\nMismatch"]
  return_self_at_1_finger_contact_contender [shape="rectangle" label="return\n`self`"]
  return_2_finger_contact_contender_at_1_finger_contact_contender [shape="rectangle" label="return\nTwoFingerContactContender"]
  subgraph cluster_1_finger_contact_contender {
    label="OneFingerContactContender\n`impl Contender`"
    examine_at_1_finger_contact_contender
    examine2_at_1_finger_contact_contender
    examine3_at_1_finger_contact_contender
    return_mismatch_at_1_finger_contact_contender
    return_self_at_1_finger_contact_contender
    return_2_finger_contact_contender_at_1_finger_contact_contender
  }

  // Definition of `TwoFingerContactContender`.
  arena -> examine_at_2_finger_contact_contender [label="examine\nevent()"]
  examine_at_2_finger_contact_contender [shape="diamond" label="movement\n<\nthreshold?"]
  examine_at_2_finger_contact_contender -> return_mismatch_at_2_finger_contact_contender [label="no"]
  examine_at_2_finger_contact_contender -> examine2_at_2_finger_contact_contender [label="yes"]
  examine2_at_2_finger_contact_contender [shape="diamond" label="exactly\n2\nfinger?"]
  examine2_at_2_finger_contact_contender -> return_mismatch_at_2_finger_contact_contender [label="no"]
  examine2_at_2_finger_contact_contender -> examine3_at_2_finger_contact_contender [label="yes"]
  examine3_at_2_finger_contact_contender [shape="diamond" label="button\npressed?"]
  examine3_at_2_finger_contact_contender -> return_matched_at_2_finger_contact_contender [label="yes"]
  examine3_at_2_finger_contact_contender -> return_self_at_2_finger_contact_contender [label="no"]
  return_mismatch_at_2_finger_contact_contender [shape="rectangle" label="return\nMismatch"]
  return_self_at_2_finger_contact_contender [shape="rectangle" label="return\n`self`"]
  return_matched_at_2_finger_contact_contender [shape="rectangle" label="return\nMatchedContender"]
  subgraph cluster_2_finger_contact_contender {
    label="TwoFingerContactContender\n`impl Contender`"
    examine_at_2_finger_contact_contender
    examine2_at_2_finger_contact_contender
    examine3_at_2_finger_contact_contender
    return_mismatch_at_2_finger_contact_contender
    return_self_at_2_finger_contact_contender
    return_matched_at_2_finger_contact_contender
  }

  // Definition of `MatchedContender`.
  arena -> verify_at_matched_contender [label="verify\nevent()"]
  verify_at_matched_contender [shape="rectangle" label="nothing\nshould never call"]
  arena -> return_button_down_winner_at_matched_contender [label="process\nbuffered\nevents()"]
  return_button_down_winner_at_matched_contender [shape="rectangle" label="return\nvec![events], Winner, ButtonDownWinner"]
  subgraph cluster_matched_contender {
    label="MatchedContender"
    verify_at_matched_contender
    return_button_down_winner_at_matched_contender
  }

  arena -> process_at_button_down_winner [label="process\nnew\nevent()"]
  // if button release, end the gesture and send button up.
  process_at_button_down_winner [shape="diamond" label="button\npressed?"]
  process_at_button_down_winner -> return_button_up_winner_at_button_down_winner [label="no"]
  process_at_button_down_winner -> process2_at_button_down_winner [label="yes"]
  return_button_up_winner_at_button_down_winner [shape="rectangle" label="return\nContinueGesture(\nSome(ButtonUp),\nButtonUpWinner)"]

  // if button for certain time, it is likely a drag gesture, use smaller
  // threshold for detect as drag.
  process2_at_button_down_winner [shape="diamond" label="button\ndown\ntimeout"]
  process2_at_button_down_winner -> process3_at_button_down_winner[label="no"]
  process2_at_button_down_winner -> process4_at_button_down_winner[label="yes"]

  // if movement more than threshold, it is a drag gesture. otherwise we don't
  // need to send any event as no state change (no button change and no movement).
  process3_at_button_down_winner [shape="diamond" label="movement\n>\nlarger_threshold"]
  process3_at_button_down_winner -> return_continue_with_no_event_at_winner[label="no"]
  process3_at_button_down_winner -> return_drag_winner[label="yes"]
  return_continue_with_no_event_at_winner [shape="rectangle" label="return\nContinueGesture(\nNone, self)"]
  return_drag_winner [shape="rectangle" label="return\nContinueGesture(\nSome(move_with_button_down),\nDragWinner)"]

  process4_at_button_down_winner [shape="diamond" label="movement\n>\nsmaller_threshold"]
  process4_at_button_down_winner -> return_continue_with_no_event_at_winner[label="no"]
  process4_at_button_down_winner -> return_drag_winner[label="yes"]

  subgraph cluster_forward_button_down {
    label="ButtonDownWinner"
    process_at_button_down_winner
    return_button_up_winner_at_button_down_winner
    process2_at_button_down_winner
    process3_at_button_down_winner
    process4_at_button_down_winner
    return_drag_winner
    return_continue_with_no_event_at_winner
  }

  arena -> process_at_drag_winner [label="process\nnew\nevent()"]
  // if button release, end the gesture and send button up.
  // otherwise, translate the 1st finger movement to mouse event.
  process_at_drag_winner [shape="diamond" label="button\npressed?"]
  process_at_drag_winner -> return_button_up_winner_at_drag_winner_winner [label="no"]
  process_at_drag_winner -> return_continue_with_event_at_winner [label="yes"]
  return_button_up_winner_at_drag_winner_winner [shape="rectangle" label="return\nContinueGesture(\nSome(ButtonUp),\nButtonUpWinner)"]
  return_continue_with_event_at_winner [shape="rectangle" label="return\nContinueGesture(\nSome, self)"]

  subgraph cluster_forward_motion {
    label="DragWinner"
    process_at_drag_winner
    return_button_up_winner_at_drag_winner_winner
    return_continue_with_event_at_winner
  }

  arena -> process_at_button_up_winner [label="process\nnew\nevent()"]
  process_at_button_up_winner [shape="diamond" label="button\nup\ntimeout"]
  process_at_button_up_winner -> process2_at_button_up_winner[label="no"]
  process_at_button_up_winner -> return_end_at_button_up_winner[label="yes"]

  process2_at_button_up_winner [shape="diamond" label="movement\n>\nlarger_threshold"]
  process2_at_button_up_winner -> return_self_at_button_up_winner[label="no"]
  process2_at_button_up_winner -> return_end_at_button_up_winner[label="yes"]

  return_self_at_button_up_winner [shape="rectangle" label="return\n`self`"]
  return_end_at_button_up_winner [shape="rectangle" label="return EndGesutre(None)"]

  subgraph cluster_ignore_motion_after_button_up {
    label="ButtonUpWinner"
    process_at_button_up_winner
    process2_at_button_up_winner
    return_self_at_button_up_winner
    return_end_at_button_up_winner
  }
}
