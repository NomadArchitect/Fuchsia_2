# Copyright 2021 The Fuchsia Authors. All rights reserved.
# Use of this source code is governed by a BSD-style license that can be
# found in the LICENSE file.

import("//build/components.gni")
import("//build/rust/rustc_binary.gni")

group("tests") {
  testonly = true
  deps = [ ":input-pipeline-tests" ]
}

rustc_binary("input-pipeline-bin") {
  output_name = "input-pipeline"
  with_unit_tests = true
  edition = "2021"

  deps = [
    ":input_config_lib",
    "//sdk/fidl/fuchsia.input.injection:fuchsia.input.injection_rust",
    "//sdk/fidl/fuchsia.input.interaction:fuchsia.input.interaction_rust",
    "//sdk/fidl/fuchsia.input.interaction.observation:fuchsia.input.interaction.observation_rust",
    "//sdk/fidl/fuchsia.recovery.policy:fuchsia.recovery.policy_rust",
    "//sdk/fidl/fuchsia.recovery.ui:fuchsia.recovery.ui_rust",
    "//sdk/fidl/fuchsia.ui.policy:fuchsia.ui.policy_rust",
    "//sdk/fidl/fuchsia.ui.scenic:fuchsia.ui.scenic_rust",
    "//src/lib/fuchsia-async",
    "//src/lib/fuchsia-component",
    "//src/lib/syslog/rust:syslog",
    "//src/lib/trace/rust:trace-provider",
    "//src/lib/zircon/rust:fuchsia-zircon",
    "//src/ui/lib/input_pipeline",
    "//third_party/rust_crates:anyhow",
    "//third_party/rust_crates:futures",
  ]

  sources = [ "src/main.rs" ]
}

# Declare the component manifest separately for shared
# reference in component and configuration definitions.
fuchsia_component_manifest("manifest") {
  component_name = "input-pipeline"
  manifest = "meta/input-pipeline.cml"
}

# TODO(fxbug.dev/113335): Remove -v2 suffix.
fuchsia_component("component-v2") {
  cm_label = ":manifest"
  deps = [ ":input-pipeline-bin" ]
}

# TODO(fxbug.dev/106573): Remove test-only target when
# default config values are available.
group("component-v2-for-test") {
  testonly = true
  deps = [
    ":component-v2",
    ":config_for_test",
  ]
}

fuchsia_package("input-pipeline") {
  deps = [ ":component-v2" ]
}

fuchsia_unittest_package("input-pipeline-tests") {
  deps = [ ":input-pipeline-bin_test" ]
}

# Define library used to read runtime configuration
# values from structured configuration, for inclusion
# as a dependency in :input-pipeline-bin.
fuchsia_structured_config_rust_lib("input_config_lib") {
  cm_label = ":manifest"
}

# Define structured configuration values for testing.
fuchsia_structured_config_values("config_for_test") {
  testonly = true
  cm_label = ":manifest"
  values = {
    idle_threshold_minutes = 15
  }
}

# Define an empty config as the default for the
# light sensor configuration.
resource("default-input-pipeline-config") {
  outputs = [ "data/config/empty.json" ]
  sources = [ "empty.json" ]
}

# A non-executable component that provides configuration files to input-pipeline.
fuchsia_component("product-config-component") {
  component_name = "input-pipeline-product-config"
  manifest = "meta/input-pipeline-product-config.cml"
}

# Define a configuration data package which routes the
# /input-config/ directory to input-pipeline for
# light sensor configuration.
fuchsia_package("default-config-pkg") {
  package_name = "input-pipeline-product-config"
  deps = [
    ":default-input-pipeline-config",
    ":product-config-component",
  ]
}
