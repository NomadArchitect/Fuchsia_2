// Copyright 2021 The Fuchsia Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
deprecated_syntax;

library fuchsia.mem2;

using zx;

alias BufferId = uint32;

const uint32 MAX_BUFFERS = 64;
const uint32 MAX_VMO_NAME_LENGTH = 64;
const uint32 MAX_PARTICIPANT_NAME_LENGTH = 64;

/// Provides buffers (VMOs) to groups of participants.
[Discoverable]
protocol BufferProvider {
    /// Creates a new logical buffer collection identified by `provider_token`. The reply is sent
    /// when all participant tokens have been submitted or the operation fails for some reason.
    ///
    /// + request `provider_token` the token used to identify the collection. Peers of this eventpair
    ///   are used by participants to identify the logical collection in `GetBuffers`.
    /// + request `vmo_name` the name to be applied to VMOs.
    /// + request `buffer_collection_request` optional client end of a channel to be used to
    ///   communicate with the collection.
    /// - response `collection_info` a description of the resulting buffer collection.
    /// * error reason for failure to create the collection. This method will never return
    ///   `BufferProviderError.TIMED_OUT_WAITING_FOR_CREATION`.
    CreateBufferCollection(zx.handle:EVENTPAIR provider_token,
                           string:MAX_VMO_NAME_LENGTH vmo_name,
                           request<BufferCollection>? buffer_collection_request)
        -> (CollectionInfo collection_info) error BufferProviderError;

    /// Gets buffers for the logical buffer collection identified by |participant_token|, which must
    /// be a peer of the provider token used in a `CreateBufferCollection` call. This operation
    /// completes when all copies of the participant token have been destroyed or passed in a
    /// `GetBuffers` call.
    ///
    /// + request `participant_token` one of the peers of a provider token submitted via
    ///   `CreateBufferCollection`.
    /// + request `constraints constraints` required by the participant in order for the collection
    ///   to be fit for purpose.
    /// + request `buffer_collection_request` optional client end of a channel to be used to
    ///   communicate with the collection.
    /// + request `name` the name of the participant for debugging purposes. The process name is
    ///   typically used here.
    /// + request `id` the id of the participant for debugging purposes. The process id is typically
    ///   used here.
    /// - response `buffers `the VMOs that make up the collection, meeting all constraints from all
    ///   participants.
    /// * error reason for failiure to create the collection.
    GetBuffers(zx.handle:EVENTPAIR participant_token,
               Constraints constraints,
               request<BufferCollection>? buffer_collection_request,
               string:MAX_PARTICIPANT_NAME_LENGTH name,
               uint64 id)
        -> (vector<zx.handle:VMO>:MAX_BUFFERS buffers) error BufferProviderError;
};

protocol BufferCollection {
    /// Indicates that the logical buffer collection represented by `participant_token` should be
    /// identified as this collection. This method may be used by a participant that needs to use
    /// an existing collection.
    ///
    /// + request `participant_token` one of the peers of a provider token submitted via
    ///    `CreateBufferCollection` to create a new collection (not this collection).
    /// * error reason for failiure.
    ///
    /// This method may be used to expand the scope of an existing buffer collection. For example,
    /// if a participant in a new buffer collection wants to use an existing buffer collection
    /// instead, it calls this method on the existing buffer collection, passing the participant
    /// token for the new collection. The existing buffer collection must meet the constraints
    /// submitted by other participants in the new (now merged) collection, or their `GetBuffers`
    /// calls will fail. In that case, existing participants in the old collection are undisturbed.
    ///
    /// In another example, a client wants to add a new participant to an existing collection. First
    /// the client creates new tokens: one provider token and two peer participant tokens. The client
    /// calls `BufferProvider.CreateBufferCollection` passing the provider token, then it calls
    /// this method on the existing collection, passing one of the participant tokens. The other
    /// participant token is passed to the new participant so it may join the collection.
    ReferNewCollection(zx.handle:EVENTPAIR participant_token) -> () error BufferProviderError;
};

table CollectionInfo {
    /// The size of the buffers in the collection.
    1: uint32 buffer_size;

    /// The size of the collection.
    2: uint32 buffer_count;
};

/// Describes constraints applied to a buffer collection by a participant via
/// `BufferProvider.GetBuffers`.
// TODO: Define this for real.
// TODO: More specific name? BufferConstraints?
table Constraints {
    /// Minimum buffer size. The participant requires that each buffer in the collection be at
    /// least this size (in bytes). The size of the buffers in the buffer collection will be at
    /// least the maximum of these values across all participants. If this value is not provided,
    /// a default value of 0 is presumed.
    1: uint32 min_buffer_size;

    /// Buffer count. The participant may, at any given time, maintain possession of this many
    /// buffers. The number of buffers in the buffer collection will be at least the sum of these
    /// values across all participants. If this value is not provided, a default value of 0 is
    /// presumed.
    2: uint32 buffer_count;

    /// Minimum aggregate buffer size. The participant requires that the sum (in bytes) of the sizes
    /// of all the buffers in the collection be at least this large. The sum of the sizes of all the
    /// buffers in the buffer collection will be at least the sum of these values across all
    /// participants. If this value is not provided, a default value of 0 is presumed.
    3: uint64 min_aggregate_buffer_size;
};

/// Errors that may be returned by `BufferProvider.CreateBufferCollection` or
/// `BufferProvider.GetBuffers`.
enum BufferProviderError {
    /// Participants have submitted constraints that cannot be collectively satisfied.
    OVERCONSTRAINED = 1;

    /// Participants have submitted constraints that don't collectively provide enough information
    /// to create a buffer collection.
    UNDERCONSTRAINED = 2;

    /// Insufficient free memory of the required type was available.
    INSUFFICIENT_MEMORY = 3;

    /// All provider tokens were destroyed without `GetBuffers` being called.
    NO_PARTICIPANTS = 4;

    /// Timed out waiting for a `CreateBufferCollection` call with a matching provider token.
    TIMED_OUT_WAITING_FOR_CREATION = 5;

    /// Timed out waiting for one or more participants in the logical connection to call
    /// `GetBuffers` with a matching participant token.
    TIMED_OUT_WAITING_FOR_PARTICPANT = 6;
};
