// Copyright 2021 The Fuchsia Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

library fuchsia.audio;

using fuchsia.media2;
using fuchsia.mediastreams;
using zx;

/// Represents an audio renderer.
protocol Renderer {
    /// Connects a stream sink for the renderer with the indicated properties.
    ///
    /// + request `buffer_collection_token` a participant token for the buffer collection to be
    ///   used for this connection.
    /// + request `format` the format to be used for the is connection.
    /// + request `compression` the compression applied to packets in the stream. If this parameter
    ///   is not supplied, the stream is uncompressed (LPCM). If this parameter is supplied, its
    ///   value must be amoung the compression types listed in the `supported_compression_types`
    ///   field of the current renderer status. If the specified compression type used for a
    ///   connection ceases to be supported, the connection is closed, and the
    ///   `OnInputStreamDisconnected` event is signaled.
    /// + request `timestamp_units` the units used for timestamps on packets in this stream. If
    ///   this parameter is not supplied, packets may not have `specified` timestamps.
    /// + request `stream_timeline` the relationship between the timeline represented by the
    ///   timestamps on packets in this stream. If omitted, a timestamp of zero corresponds to
    ///   a presentation time of zero.
    /// + request `request` the server end of the `StreamSink` channel for this connection.
    /// * error reason for connection failiure.
    ///
    /// Multiple stream sinks may be used sequentially for a given renderer. This method responds
    /// when the connection is ready or the connect attempt fails.
    ConnectInputStream(
        zx.handle:EVENTPAIR buffer_collection_token,
        fuchsia.mediastreams.AudioFormat format,
        fuchsia.mediastreams.Compression? compression,
        fuchsia.media2.TimestampUnits? timestamp_units,
        fuchsia.media2.StreamTimeline? stream_timeline,
        request<fuchsia.media2.StreamSink> request)
        -> () error fuchsia.media2.ConnectionError;

    /// Indicates that the current input stream has been disconnected unexpectedly.
    -> OnInputStreamDisconnected();

    /// Indicates that the last packet prior to the end of the stream
    /// has been rendered.
    -> OnEndOfStream();

    /// Indicates that the stream sink previously created is invalid,
    /// and the client should create another one if it wishes to
    /// continue sending packets.
    -> OnInputStreamSinkInvalid();

    /// Starts the renderer's presentation timeline.
    ///
    /// + request `reference_time` the reference time at which the presentation timeline should
    ///   start. A value less than the current reference time (such as 0) indicates presentation
    ///   should start as soon as possible.
    /// + request `presentation_time` the value of the renderer's presentation clock when
    ///   presentation timeline starts. To resume after stop, pass the presentation time
    ///   returned by the previous `Stop` call.
    /// - response `reference_time` the reference time at which the presentation timeline actually
    ///   started.
    ///
    /// If the renderer is currently started, this method does nothing except return the same values
    /// returned by the previous `Start` call. If a start or stop transition is currently scheduled
    /// when this method is called, that scheduled transition is first cancelled.
    Start(zx.time reference_time, zx.duration presentation_time)
        -> (zx.time reference_time);

    /// Stops the renderer's presentation timeline.
    ///
    /// + request `stop_time` the time when the presentation timeline should stop as a reference
    ///   or presentation time.
    /// - response `reference_time` the reference time at which the presentation timeline actually
    ///   stopped.
    /// - response `presentation_time` the value of the renderer's presentation clock when the
    ///   presentation timeline actually stopped. This is the current presentation time until
    ///   a subsequent call to `Start`.
    ///
    /// If the renderer is currently stopped, this method does nothing except return the same values
    /// returned by the previous `Stop` call or 0,0 if this renderer has never started. If a start
    /// or stop transition is currently scheduled when this method is called, that scheduled
    /// transition is first cancelled.
    Stop(ConsumerStopTime stop_time) -> (zx.time reference_time, zx.duration presentation_time);

    /// Requests to change the playback rate of the renderer. 1.0 means normal playback.
    ///
    /// + request `rate` the requested rate. Negative rates are not supported.
    ///
    /// The new rate will be reflected in the updated status. The `rate_supported` field of
    /// `RendererStatus` indicates whether this method is supported. If not, calls to this method
    /// are ignored.
    SetRate(float32 rate);

    /// Gets the current status of the renderer using the long get pattern.
    ///
    /// - response `status` the current renderer status.
    ///
    /// The renderer replies immediately to this method when it is first called. The renderer
    /// replies to subsequent calls when the status has changed since the last call.
    WatchStatus() -> (RendererStatus status);

    /// Sets the reference clock to use for this renderer.
    ///
    /// All ‘reference time’ values for this renderer are interpreted with respect to this clock.
    /// If this method is never called, the reference clock is the system’s monotonic clock.
    // TODO: Does this belong in the factory method?
    SetReferenceClock(zx.handle:CLOCK reference_clock);

    // Binds the volume control for the renderer.
    // TODO: Does this belong in the factory method?
    //BindVolumeControl(request<VolumeControl> request);

    // Binds the gain control for the renderer.
    // TODO: Does this belong in the factory method?
    //BindGainControl(request<GainControl> request);
};

const uint32 MAX_COMPRESSION_TYPES = 16;

/// Represents the status of the renderer.
table RendererStatus {
    /// If present, indicates an error condition currently in effect.
    /// Absent if no error.
    1: RendererError error;

    /// If present, indicates the current relationship between the
    /// presentation timeline and reference clock. Absent initially.
    2: fuchsia.media2.PresentationTimeline presentation_timeline;

    /// Indicates the minimum lead time supported by this `Renderer`,
    /// that is, the minimum interval ahead of a packet’s effective
    /// presentation time that the packet must be submitted to prevent
    /// underflow.
    3: zx.duration min_lead_time;

    /// Indicates the maximum lead time supported by this `Renderer`,
    /// that is, the maximum interval ahead of a packet’s effective
    /// presentation time that the packet may be submitted to prevent
    /// overflow.
    4: zx.duration max_lead_time;

    /// Indicates whether rates other than 1.0 are supported.
    5: bool rate_supported;

    /// The currently-supported compression types. If this value is absent, no compression types
    /// are currently supported.
    6: vector<fuchsia.mediastreams.CompressionType>:MAX_COMPRESSION_TYPES
           supported_compression_types;
};

/// Represents an `Renderer` error condition.
// TODO: Define
enum RendererError {
    INTERNAL = 1;
};

/// Time at which a consumer should stop given as a reference time or a presentation time.
union ConsumerStopTime {
    /// The reference time at which a consumer should stop. Values less than the current reference
    /// time (such as 0) indicate the consumer should stop as soon as possible.
    1: zx.time reference_time;

    /// The presenation time at which a consumer should stop. Values less that the current
    /// presentation time indicate the consumer should stop as soon as possible
    2: zx.duration presentation_time;
};
