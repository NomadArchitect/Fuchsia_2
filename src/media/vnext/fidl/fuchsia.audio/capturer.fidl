// Copyright 2021 The Fuchsia Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
deprecated_syntax;

library fuchsia.audio;

using fuchsia.media2;
using fuchsia.mediastreams;
using zx;

/// Represents an audio capturer.
protocol Capturer {
    /// Connects a stream sink for the capturer with the indicate properties.
    ///
    /// + request `buffer_collection_token` a participant token for the buffer collection to be
    ///   used for this connection.
    /// + request `format` the format to be used for the is connection.
    /// + request `timestamp_units` the units used for timestamps on packets in this stream.
    /// + request `stream_sink` the client end of the `StreamSink` channel for this connection.
    /// * error reason for connection failiure.
    ///
    /// Multiple stream sinks may be used sequentially for a given capturer. This method responds
    /// when the connection is ready or the connect attempt fails.
    ConnectOutputStream(
        zx.handle:EVENTPAIR buffer_collection_token,
        fuchsia.mediastreams.AudioFormat format,
        fuchsia.media2.TimestampUnits timestamp_units,
        fuchsia.media2.StreamSink stream_sink)
        -> () error fuchsia.media2.ConnectionError;

    /// Disconnects the output stream.
    DisconnectOutputStream();

    /// Indicates that the current output stream has been disconnected unexpectedly.
    -> OnOutputStreamDisconnected(zx.status status);

    /// Indicates that the stream sink previously created is invalid,
    /// and the client should create another one if it wishes to
    /// continue sending packets.
    -> OnOutputStreamSinkInvalid();

    /// Starts the capturer.
    ///
    /// + request `reference_time` the reference time at which capture should start. A value less
    ///   than the current reference time (such as 0) indicates capture should start as soon
    ///   as possible.
    /// - response `reference_time` the reference time at which capture actually started.
    ///
    /// If the capturer is currently running, this method does nothing except return the same value
    /// returned by the previous `Start` call. If a start or stop transition is currently scheduled
    /// when this method is called, that scheduled transition is first cancelled.
    Start(zx.time reference_time) -> (zx.time reference_time);

    /// Stops the capturer.
    ///
    /// + request `reference_time` the reference time at which capture should stop. A value less
    ///   than the current reference time (such as 0) indicates capture should stop as soon
    ///   as possible.
    /// - response `reference_time` the reference time at which capture actually stopped.
    ///
    /// If the capturer is currently stopped, this method does nothing except return the same values
    /// returned by the previous `Stop` call or 0,0 if this capturer has never been started. If a
    /// start or stop transition is currently scheduled when this method is called, that scheduled
    /// transition is first cancelled.
    Stop(zx.time reference_time) -> (zx.time reference_time);

    /// Sets the reference clock to use for this capturer. All ‘reference time’ values for this
    /// capturer are interprete with respect to this clock. If this method is never called, the
    /// reference clock is the system’s monotonic clock.
    // TODO: Does this belong in the factory method?
    SetReferenceClock(zx.handle:CLOCK reference_clock);

    // Binds the volume control for the capturer.
    // TODO: Does this belong in the factory method?
    //BindVolumeControl(request<VolumeControl> request);

    // Binds the gain control for the capturer.
    // TODO: Does this belong in the factory method?
    //BindGainControl(request<GainControl> request);
};
