# Copyright 2020 The Fuchsia Authors. All rights reserved.
# Use of this source code is governed by a BSD-style license that can be
# found in the LICENSE file.

import("//build/host.gni")
import("//build/rust/rustc_library.gni")
import("//build/testing/host_test_data.gni")

if (is_host) {
  rustc_library("utils") {
    name = "scrutiny_utils"
    with_unit_tests = true

    edition = "2018"
    visibility = [ "//src/security/scrutiny/*" ]
    deps = [
      "//third_party/rust_crates:anyhow",
      "//third_party/rust_crates:bincode",
      "//third_party/rust_crates:byteorder",
      "//third_party/rust_crates:hex",
      "//third_party/rust_crates:libc",
      "//third_party/rust_crates:log",
      "//third_party/rust_crates:pathdiff",
      "//third_party/rust_crates:serde",
      "//third_party/rust_crates:tempfile",
      "//third_party/rust_crates:thiserror",
    ]

    test_deps = [
      ":test_tools",
      "//third_party/rust_crates:maplit",
      "//third_party/rust_crates:tempfile",
    ]

    # The library launches the blobfs binary at runtime, so list it
    # as a data dependency.
    data_deps = [ "//zircon/tools/blobfs($host_toolchain)" ]

    non_rust_deps = [
      "//src/lib/chunked-compression",
      "//src/security/scrutiny/lib/utils/ffi-bridge",
      "//third_party/zstd",
    ]

    sources = [
      "src/artifact.rs",
      "src/blobfs.rs",
      "src/bootfs.rs",
      "src/env.rs",
      "src/fvm.rs",
      "src/golden.rs",
      "src/key_value.rs",
      "src/lib.rs",
      "src/usage.rs",
      "src/zbi.rs",
      "src/zstd.rs",
    ]
  }
}

if (is_host) {
  # As a special case, the blobfs tool refuses to be built in asan variants
  # (and other profiling ones), see its definition's usage of exclude_toolchain_tags.
  #
  # In practice, this means that the only reliable path to the executable will
  # be the root_out_dir of the _base_ host toolchain. For historical reasons,
  # host_toolchain always contains a variant suffix, so compute the value here.
  #
  # To understand why, read the 'Output locations of variant binaries' section in
  # //docs/concepts/build_system/internals/toolchains/build_variants.md
  #
  base_host_toolchain = toolchain_variant.base
  base_host_out_dir =
      get_label_info("//:any($base_host_toolchain)", "root_out_dir")

  # Used to ensure that the blobfs host binary is available when running the test
  # on infra bots.
  host_test_data("test_tools") {
    sources = [ "$base_host_out_dir/blobfs" ]
    deps = [ "//zircon/tools/blobfs($base_host_toolchain)" ]
  }
}

group("tests") {
  testonly = true
  public_deps = [ ":utils_test($host_toolchain)" ]
}
