// Copyright 2022 The Fuchsia Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
// EDIT WITH CAUTION. This file is autogenerated using 'fx testgen', and will be overwritten with each run.
use anyhow::Error;
use fuchsia_component_test::{Capability, ChildOptions, RealmBuilder, RealmInstance, Ref, Route};

const COMPONENT_URL: &str = "#meta/log-stats.cm";
const METRIC_EVENT_LOGGER_FACTORY_URL: &str = "#meta/mock_cobalt.cm";
const PROVIDER_URL: &str = "#meta/activity.cm";

pub struct LogStatsTest;

impl LogStatsTest {
    pub async fn create_realm() -> Result<RealmInstance, Error> {
        let builder = RealmBuilder::new().await?;
        let log_stats = builder.add_child("log-stats", COMPONENT_URL, ChildOptions::new()).await?;
        builder
            .add_route(
                Route::new()
                    .capability(Capability::protocol_by_name("fuchsia.diagnostics.ArchiveAccessor"))
                    .from(Ref::parent())
                    .to(&log_stats),
            )
            .await?;
        let metric_event_logger_factory = builder
            .add_child(
                "metric_event_logger_factory",
                METRIC_EVENT_LOGGER_FACTORY_URL,
                ChildOptions::new(),
            )
            .await?;
        builder
            .add_route(
                Route::new()
                    .capability(Capability::protocol_by_name(
                        "fuchsia.metrics.MetricEventLoggerFactory",
                    ))
                    .from(&metric_event_logger_factory)
                    .to(Ref::parent())
                    .to(&log_stats),
            )
            .await?;
        let provider = builder.add_child("provider", PROVIDER_URL, ChildOptions::new()).await?;
        builder
            .add_route(
                Route::new()
                    .capability(Capability::protocol_by_name("fuchsia.ui.activity.Provider"))
                    .from(&provider)
                    .to(Ref::parent())
                    .to(&log_stats),
            )
            .await?;
        builder
            .add_route(
                Route::new()
                    .capability(Capability::protocol_by_name("fuchsia.logger.LogSink"))
                    .from(Ref::parent())
                    .to(&log_stats),
            )
            .await?;
        builder
            .add_route(
                Route::new()
                    .capability(
                        Capability::protocol_by_name("fuchsia.component.Binder")
                            .as_("fuchsia.component.LogStatsBinder"),
                    )
                    .from(&log_stats)
                    .to(Ref::parent()),
            )
            .await?;
        let instance = builder.build().await?;
        Ok(instance)
    }
}
