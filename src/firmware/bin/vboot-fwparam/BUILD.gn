# Copyright 2021 The Fuchsia Authors. All rights reserved.
# Use of this source code is governed by a BSD-style license that can be
# found in the LICENSE file.

import("//build/components.gni")
import("//build/dist/component_manifest_resources.gni")
import("//build/rust/rustc_binary.gni")

group("tests") {
  testonly = true
  deps = [ ":vboot-fwparam-unittests" ]
}

rustc_binary("bin") {
  output_name = "vboot-fwparam"
  force_opt = "z"
  with_unit_tests = true

  # TODO(fxbug.dev/64097): extract to a template
  # This must always be small (even in debug builds) since it is part of bootfs.
  #
  # The add/remove/add ensures we get the configuration without producing errors for builds which
  # enable ThinLTO themselves.
  configs += [ "//build/config/lto:thinlto" ]
  configs -= [ "//build/config/lto:thinlto" ]
  configs += [ "//build/config/lto:thinlto" ]

  # we can't dynamically link std when we're in the zbi
  configs -= [ "//build/config/fuchsia:dynamic_rust_standard_library" ]
  configs -= [ "//build/config/rust:allow_unused_results" ]

  deps = [
    "//garnet/lib/rust/files_async",
    "//garnet/lib/rust/io_util",
    "//sdk/fidl/fuchsia.acpi.chromeos:fuchsia.acpi.chromeos-rustc",
    "//sdk/fidl/fuchsia.hardware.nvram:fuchsia.hardware.nvram-rustc",
    "//sdk/fidl/fuchsia.nand.flashmap:fuchsia.nand.flashmap-rustc",
    "//sdk/fidl/fuchsia.vboot.fwparam:fuchsia.vboot.fwparam-rustc",
    "//src/lib/diagnostics/inspect/runtime/rust",
    "//src/lib/diagnostics/inspect/rust",
    "//src/lib/fidl/rust/fidl",
    "//src/lib/fuchsia",
    "//src/lib/fuchsia-async",
    "//src/lib/fuchsia-component",
    "//src/lib/fuchsia-runtime",
    "//src/lib/syslog/rust:syslog",
    "//src/lib/zircon/rust:fuchsia-zircon",
    "//third_party/rust_crates:anyhow",
    "//third_party/rust_crates:bitfield",
    "//third_party/rust_crates:futures",
    "//third_party/rust_crates:thiserror",
    "//third_party/rust_crates:tracing",
  ]

  sources = [
    "src/error.rs",
    "src/main.rs",
    "src/nvdata.rs",
    "src/nvdata/fields.rs",
  ]
}

component_manifest_resources("manifest") {
  sources = [ "meta/vboot-fwparam.cml" ]
}

fuchsia_component("component") {
  component_name = "vboot-fwparam"
  manifest = "meta/vboot-fwparam.cml"
  deps = [ ":bin" ]
}

fuchsia_package("vboot-fwparam") {
  deps = [ ":component" ]
}

group("bootfs") {
  deps = [
    ":bin",
    ":manifest",
  ]
}

fuchsia_unittest_package("vboot-fwparam-unittests") {
  deps = [ ":bin_test" ]

  test_specs = {
    log_settings = {
      max_severity = "ERROR"
    }
  }
}
