# Copyright 2021 The Fuchsia Authors. All rights reserved.
# Use of this source code is governed by a BSD-style license that can be
# found in the LICENSE file.

import("//src/graphics/lib/compute/tools/target_archive/gn/target_archive.gni")

#
# Declare Radix Sort Vulkan target.
#
template("radix_sort_vk_target") {
  #
  # Where is the radix sort library?
  #
  _radix_sort_vk_dir = "//src/graphics/lib/compute/radix_sort/platforms/vk"

  #
  # data_sources
  #
  data_sources = [
    "${_radix_sort_vk_dir}/targets/radix_sort_vk_target.h",
    "${_radix_sort_vk_dir}/targets/radix_sort_vk_target_requirements.h",
    "config.h",
    "header.c",
  ]

  if (defined(invoker.data_sources)) {
    data_sources += invoker.data_sources
  }

  #
  # data_include_dirs
  #
  data_include_dirs = [ _radix_sort_vk_dir ]

  if (defined(invoker.data_include_dirs)) {
    data_include_dirs += invoker.data_include_dirs
  }

  #
  # shader_sources
  #
  # ***********************************************
  # *** shaders must remain in the listed order ***
  # ***********************************************
  #
  # NOSORT
  shader_sources = [
    "${_radix_sort_vk_dir}/shaders/init.comp",
    "${_radix_sort_vk_dir}/shaders/fill.comp",
    "${_radix_sort_vk_dir}/shaders/histogram.comp",
    "${_radix_sort_vk_dir}/shaders/prefix.comp",
    "${_radix_sort_vk_dir}/shaders/scatter_0_even.comp",
    "${_radix_sort_vk_dir}/shaders/scatter_0_odd.comp",
  ]

  assert(defined(invoker.keyval_dwords), "Define invoker.keyval_dwords")

  if (invoker.keyval_dwords == 2) {
    shader_sources += [
      "${_radix_sort_vk_dir}/shaders/scatter_1_even.comp",
      "${_radix_sort_vk_dir}/shaders/scatter_1_odd.comp",
    ]
  } else if (invoker.keyval_dwords > 2) {
    assert(false, "invoker.keyval_dwords value not supported")
  }

  if (defined(invoker.shader_sources)) {
    shader_sources += invoker.shader_sources
  }

  #
  # shader_inputs
  #
  shader_inputs = [
    "config.h",
    "${_radix_sort_vk_dir}/shaders/bufref.h",
    "${_radix_sort_vk_dir}/shaders/prefix.h",
    "${_radix_sort_vk_dir}/shaders/prefix_limits.h",
    "${_radix_sort_vk_dir}/shaders/push.h",
    "${_radix_sort_vk_dir}/shaders/scatter.glsl",
  ]

  if (defined(invoker.shader_inputs)) {
    shader_inputs += invoker.shader_inputs
  }

  #
  # shader_include_dirs
  #
  shader_include_dirs = [
    ".",
    "${_radix_sort_vk_dir}/shaders",
  ]

  if (defined(invoker.shader_include_dirs)) {
    shader_include_dirs += invoker.shader_include_dirs
  }

  #
  # defines
  #
  if (defined(invoker.defines)) {
    defines = invoker.defines
  }

  #
  # invoke customized target archive template
  #
  forward_variables_from(invoker,
                         [
                           "is_loadable",
                           "is_linkable",
                         ])

  assert((defined(is_loadable) && !defined(is_linkable)) ||
             (defined(is_linkable) && !defined(is_loadable)),
         "Define either `is_loadable` or `is_linkable` boolean")

  if (defined(is_loadable) && is_loadable) {
    target_archive_loadable(target_name) {
      forward_variables_from(invoker,
                             [
                               "data_sources",
                               "data_include_dirs",
                               "defines",
                               "shader_sources",
                               "shader_inputs",
                               "shader_include_dirs",
                               "skip_spirv_opt",
                             ])
      if (!defined(skip_spirv_opt)) {
        skip_spirv_opt = false
      }
      gen_debug_shaders = true
    }
  } else if (defined(is_linkable) && is_linkable) {
    target_archive_linkable(target_name) {
      forward_variables_from(invoker,
                             [
                               "data_sources",
                               "data_include_dirs",
                               "defines",
                               "shader_sources",
                               "shader_inputs",
                               "shader_include_dirs",
                               "skip_spirv_opt",
                             ])
      if (!defined(skip_spirv_opt)) {
        skip_spirv_opt = false
      }
      gen_debug_shaders = true
    }
  }
}

#
# Loadable 32-bit keyval target
#
template("radix_sort_vk_target_u32_loadable") {
  radix_sort_vk_target(target_name) {
    is_loadable = true
    keyval_dwords = 1
    forward_variables_from(invoker,
                           [
                             "data_sources",
                             "data_include_dirs",
                             "defines",
                             "shader_sources",
                             "shader_inputs",
                             "shader_include_dirs",
                             "skip_spirv_opt",
                           ])
  }
}

#
# Linkable 32-bit keyval target
#
template("radix_sort_vk_target_u32_linkable") {
  radix_sort_vk_target(target_name) {
    is_linkable = true
    keyval_dwords = 1
    forward_variables_from(invoker,
                           [
                             "data_sources",
                             "data_include_dirs",
                             "defines",
                             "shader_sources",
                             "shader_inputs",
                             "shader_include_dirs",
                             "skip_spirv_opt",
                           ])
  }
}

#
# Loadable 64-bit keyval target
#
template("radix_sort_vk_target_u64_loadable") {
  radix_sort_vk_target(target_name) {
    is_loadable = true
    keyval_dwords = 2
    forward_variables_from(invoker,
                           [
                             "data_sources",
                             "data_include_dirs",
                             "defines",
                             "shader_sources",
                             "shader_inputs",
                             "shader_include_dirs",
                             "skip_spirv_opt",
                           ])
  }
}

#
# Linkable 64-bit keyval target
#
template("radix_sort_vk_target_u64_linkable") {
  radix_sort_vk_target(target_name) {
    is_linkable = true
    keyval_dwords = 2
    forward_variables_from(invoker,
                           [
                             "data_sources",
                             "data_include_dirs",
                             "defines",
                             "shader_sources",
                             "shader_inputs",
                             "shader_include_dirs",
                             "skip_spirv_opt",
                           ])
  }
}
