# Copyright 2022 The Fuchsia Authors. All rights reserved.
# Use of this source code is governed by a BSD-style license that can be
# found in the LICENSE file.

import("//build/components.gni")
import("//build/test.gni")

source_set("expectations") {
  sources = [
    "expects/expectations.cc",
    "expects/expectations.h",
  ]
  deps = [
    "//third_party/abseil-cpp/absl/container:flat_hash_set",
    "//third_party/abseil-cpp/absl/status:statusor",
    "//third_party/abseil-cpp/absl/strings",
    "//third_party/abseil-cpp/absl/strings:str_format",
    "//third_party/abseil-cpp/absl/types:variant",
    "//third_party/googletest:gtest",
    "//third_party/re2",
  ]
  public_deps = [
    ":gvisor_test_util",
    "//third_party/abseil-cpp/absl/container:flat_hash_map",
  ]
  testonly = true
}

config("gvisor_test_util_config") {
  include_dirs = [ "gvisor" ]
}

static_library("gvisor_test_util") {
  testonly = true
  public = [
    "gvisor/test/util/capability_util.h",
    "gvisor/test/util/cleanup.h",
    "gvisor/test/util/file_descriptor.h",
    "gvisor/test/util/fs_util.h",
    "gvisor/test/util/logging.h",
    "gvisor/test/util/posix_error.h",
    "gvisor/test/util/save_util.h",
    "gvisor/test/util/socket_util.h",
    "gvisor/test/util/temp_path.h",
    "gvisor/test/util/test_util.h",
    "gvisor/test/util/thread_util.h",
    "gvisor/test/util/timer_util.h",
  ]
  sources = [
    "gvisor/test/util/capability_util.h",
    "gvisor/test/util/cleanup.h",
    "gvisor/test/util/file_descriptor.h",
    "gvisor/test/util/fs_util.cc",
    "gvisor/test/util/fs_util.h",
    "gvisor/test/util/fuchsia_capability_util.cc",
    "gvisor/test/util/logging.cc",
    "gvisor/test/util/logging.h",
    "gvisor/test/util/posix_error.cc",
    "gvisor/test/util/posix_error.h",
    "gvisor/test/util/save_util.cc",
    "gvisor/test/util/save_util.h",
    "gvisor/test/util/save_util_other.cc",
    "gvisor/test/util/socket_util.cc",
    "gvisor/test/util/socket_util.h",
    "gvisor/test/util/socket_util_impl.cc",
    "gvisor/test/util/temp_path.cc",
    "gvisor/test/util/temp_path.h",
    "gvisor/test/util/test_util.cc",
    "gvisor/test/util/test_util.h",
    "gvisor/test/util/thread_util.h",
    "gvisor/test/util/timer_util.cc",
    "gvisor/test/util/timer_util.h",
  ]
  deps = [
    "//third_party/abseil-cpp/absl/base:core_headers",
    "//third_party/abseil-cpp/absl/flags:flag",
    "//third_party/abseil-cpp/absl/flags:parse",
    "//third_party/abseil-cpp/absl/memory",
    "//third_party/abseil-cpp/absl/strings",
    "//third_party/abseil-cpp/absl/strings:str_format",
    "//third_party/abseil-cpp/absl/time",
    "//third_party/abseil-cpp/absl/types:optional",
    "//third_party/abseil-cpp/absl/types:variant",
  ]
  public_deps = [
    "//third_party/googletest:gmock",
    "//third_party/googletest:gtest",
  ]
  public_configs = [ ":gvisor_test_util_config" ]
}

raw_packet_test_label = "raw_packet"
udp_test_label = "udp"
udp_unbound_test_label = "udp_unbound"
generic_test_label = "generic"
tcp_test_label = "tcp"
tcp_blocking_test_label = "tcp_blocking"

source_set("${raw_packet_test_label}_socket_tests") {
  sources = [
    "gvisor/test/syscalls/linux/ip_socket_test_util.cc",
    "gvisor/test/syscalls/linux/ip_socket_test_util.h",
    "gvisor/test/syscalls/linux/packet_socket.cc",
    "gvisor/test/syscalls/linux/packet_socket_dgram.cc",
    "gvisor/test/syscalls/linux/packet_socket_raw.cc",
    "gvisor/test/syscalls/linux/raw_socket.cc",
    "gvisor/test/syscalls/linux/raw_socket_hdrincl.cc",
    "gvisor/test/syscalls/linux/raw_socket_icmp.cc",
    "gvisor/test/syscalls/linux/unix_domain_socket_test_util.cc",
    "gvisor/test/syscalls/linux/unix_domain_socket_test_util.h",
  ]

  deps = [
    ":gvisor_test_util",
    "//third_party/abseil-cpp/absl/base:endian",
    "//third_party/abseil-cpp/absl/strings",
  ]

  testonly = true
}

source_set("${udp_unbound_test_label}_socket_tests") {
  sources = [
    "gvisor/test/syscalls/linux/ip_socket_test_util.cc",
    "gvisor/test/syscalls/linux/ip_socket_test_util.h",
    "gvisor/test/syscalls/linux/socket_ipv4_datagram_based_socket_unbound.cc",
    "gvisor/test/syscalls/linux/socket_ipv4_datagram_based_socket_unbound.h",
    "gvisor/test/syscalls/linux/socket_ipv4_datagram_based_socket_unbound_loopback.cc",
    "gvisor/test/syscalls/linux/socket_ipv4_udp_unbound.cc",
    "gvisor/test/syscalls/linux/socket_ipv4_udp_unbound.h",
    "gvisor/test/syscalls/linux/socket_ipv4_udp_unbound_external_networking.cc",
    "gvisor/test/syscalls/linux/socket_ipv4_udp_unbound_external_networking_test.cc",
    "gvisor/test/syscalls/linux/socket_ipv4_udp_unbound_loopback.cc",
    "gvisor/test/syscalls/linux/socket_ipv4_udp_unbound_loopback_nogotsan.cc",
    "gvisor/test/syscalls/linux/socket_ipv6_udp_unbound.cc",
    "gvisor/test/syscalls/linux/socket_ipv6_udp_unbound.h",
    "gvisor/test/syscalls/linux/socket_ipv6_udp_unbound_external_networking.cc",
    "gvisor/test/syscalls/linux/socket_ipv6_udp_unbound_external_networking_test.cc",
    "gvisor/test/syscalls/linux/socket_ipv6_udp_unbound_loopback.cc",
  ]

  deps = [
    ":gvisor_test_util",
    "//third_party/abseil-cpp/absl/memory",
    "//third_party/abseil-cpp/absl/strings",
    "//third_party/abseil-cpp/absl/strings:str_format",
  ]

  testonly = true
}

source_set("${udp_test_label}_socket_tests") {
  sources = [
    "gvisor/test/syscalls/linux/ip_socket_test_util.cc",
    "gvisor/test/syscalls/linux/ip_socket_test_util.h",
    "gvisor/test/syscalls/linux/socket_generic.h",
    "gvisor/test/syscalls/linux/socket_generic.h",
    "gvisor/test/syscalls/linux/socket_generic_test_cases.cc",
    "gvisor/test/syscalls/linux/socket_ip_udp_generic.cc",
    "gvisor/test/syscalls/linux/socket_ip_udp_generic.h",
    "gvisor/test/syscalls/linux/socket_ip_udp_loopback.cc",
    "gvisor/test/syscalls/linux/socket_ip_udp_loopback_blocking.cc",
    "gvisor/test/syscalls/linux/socket_ip_udp_loopback_nonblock.cc",
    "gvisor/test/syscalls/linux/socket_non_blocking.cc",
    "gvisor/test/syscalls/linux/socket_non_blocking.h",
    "gvisor/test/syscalls/linux/socket_non_stream.cc",
    "gvisor/test/syscalls/linux/socket_non_stream.h",
    "gvisor/test/syscalls/linux/socket_non_stream_blocking.cc",
    "gvisor/test/syscalls/linux/socket_non_stream_blocking.h",
    "gvisor/test/syscalls/linux/udp_bind.cc",
    "gvisor/test/syscalls/linux/udp_socket.cc",
    "gvisor/test/syscalls/linux/unix_domain_socket_test_util.cc",
    "gvisor/test/syscalls/linux/unix_domain_socket_test_util.h",
  ]

  deps = [
    ":gvisor_test_util",
    "//third_party/abseil-cpp/absl/memory",
    "//third_party/abseil-cpp/absl/strings",
    "//third_party/abseil-cpp/absl/strings:str_format",
  ]

  testonly = true
}

source_set("${tcp_test_label}_socket_tests") {
  sources = [
    "gvisor/test/syscalls/linux/ip_socket_test_util.cc",
    "gvisor/test/syscalls/linux/ip_socket_test_util.h",
    "gvisor/test/syscalls/linux/socket_generic.h",
    "gvisor/test/syscalls/linux/socket_generic_test_cases.cc",
    "gvisor/test/syscalls/linux/socket_ip_tcp_generic.cc",
    "gvisor/test/syscalls/linux/socket_ip_tcp_generic.h",
    "gvisor/test/syscalls/linux/socket_ip_tcp_generic_loopback.cc",
    "gvisor/test/syscalls/linux/socket_ip_tcp_loopback.cc",
    "gvisor/test/syscalls/linux/socket_ip_tcp_loopback_nonblock.cc",
    "gvisor/test/syscalls/linux/socket_non_blocking.cc",
    "gvisor/test/syscalls/linux/socket_non_blocking.h",
    "gvisor/test/syscalls/linux/tcp_socket.cc",
    "gvisor/test/syscalls/linux/unix_domain_socket_test_util.cc",
    "gvisor/test/syscalls/linux/unix_domain_socket_test_util.h",
  ]
  deps = [
    ":gvisor_test_util",
    "//third_party/abseil-cpp/absl/strings:str_format",
    "//third_party/abseil-cpp/absl/time",
  ]

  testonly = true
}

source_set("${tcp_blocking_test_label}_socket_tests") {
  sources = [
    "gvisor/test/syscalls/linux/ip_socket_test_util.cc",
    "gvisor/test/syscalls/linux/ip_socket_test_util.h",
    "gvisor/test/syscalls/linux/socket_ip_tcp_loopback_blocking.cc",
    "gvisor/test/syscalls/linux/socket_stream_blocking.cc",
    "gvisor/test/syscalls/linux/socket_stream_blocking.h",
  ]
  deps = [
    ":gvisor_test_util",
    "//third_party/abseil-cpp/absl/strings:str_format",
  ]

  testonly = true
}

source_set("${generic_test_label}_socket_tests") {
  sources = [
    "gvisor/test/syscalls/linux/ip_socket_test_util.cc",
    "gvisor/test/syscalls/linux/ip_socket_test_util.h",
    "gvisor/test/syscalls/linux/socket.cc",
    "gvisor/test/syscalls/linux/socket_blocking.cc",
    "gvisor/test/syscalls/linux/socket_blocking.h",
    "gvisor/test/syscalls/linux/socket_inet_loopback.cc",
    "gvisor/test/syscalls/linux/socket_inet_loopback_isolated.cc",
    "gvisor/test/syscalls/linux/socket_ip_loopback_blocking.cc",
    "gvisor/test/syscalls/linux/socket_ip_tcp_udp_generic.cc",
    "gvisor/test/syscalls/linux/socket_ip_unbound.cc",
    "gvisor/test/syscalls/linux/unix_domain_socket_test_util.cc",
    "gvisor/test/syscalls/linux/unix_domain_socket_test_util.h",
  ]
  deps = [
    ":gvisor_test_util",
    "//third_party/abseil-cpp/absl/memory",
    "//third_party/abseil-cpp/absl/strings",
    "//third_party/abseil-cpp/absl/strings:str_format",
    "//third_party/abseil-cpp/absl/time",
  ]

  testonly = true
}

source_set("gtest_main") {
  sources = [ "gtest_main.cc" ]
  include_dirs = [ "gvisor" ]
  deps = [
    ":expectations",
    ":gvisor_test_util",
    "//third_party/abseil-cpp/absl/container:flat_hash_set",
    "//third_party/abseil-cpp/absl/flags:flag",
    "//third_party/abseil-cpp/absl/flags:parse",
    "//third_party/abseil-cpp/absl/strings",
    "//third_party/googletest:gmock",
    "//third_party/googletest:gtest",
  ]
  testonly = true
}

local_testing_suffix = "local_testing"

# Defines test targets and unittest packages based on the
# provided suite name for all versions of the Netstack under
# test.
#
# Parameters
#
#   run_with_fast_udp (optional)
#     Identifies whether or not the suite should be run against Netstack2
#     with Fast UDP enabled.
#     Type: bool
#     Default: true
#
#   run_in_cq_with_ns3 (optional)
#     Identifies whether or not the suite should be run against Netstack3
#     in CQ.
#     Type: bool
#     Default: false
template("syscall_test_suite") {
  not_needed([ "invoker" ])
  suite_label = target_name

  netstack3_expectations_target = "${suite_label}_netstack3_expectations"
  source_set(netstack3_expectations_target) {
    sources = [ "expects/netstack3/${suite_label}_expectations.cc" ]
    deps = [
      ":expectations",
      ":gvisor_test_util",
      "//third_party/abseil-cpp/absl/strings",
    ]
    testonly = true
  }

  netstack2_expectations_target = "${suite_label}_netstack2_expectations"
  source_set(netstack2_expectations_target) {
    sources = [ "expects/netstack2/${suite_label}_expectations.cc" ]
    deps = [
      ":expectations",
      ":gvisor_test_util",
      "//third_party/abseil-cpp/absl/strings",
    ]
    testonly = true
  }

  ns3_label = "netstack3"

  stacks = [
    {
      label = "netstack2_syncudp"
      component = "//src/connectivity/network/netstack:component-debug"
      expectations = ":${netstack2_expectations_target}"
      manifest = "meta/netstack2/syncudp/${suite_label}_syscall_tests.cml"
    },
    {
      label = ns3_label
      component = "//src/connectivity/network/netstack3:component"
      expectations = ":${netstack3_expectations_target}"
      manifest = "meta/netstack3/${suite_label}_syscall_tests.cml"
    },
  ]

  run_with_fast_udp = true
  if (defined(invoker.run_with_fast_udp)) {
    run_with_fast_udp = invoker.run_with_fast_udp
  }

  if (run_with_fast_udp) {
    stacks += [
      {
        label = "netstack2_fastudp"
        component =
            "//src/connectivity/network/netstack:component-with-fast-udp-debug"
        expectations = ":${netstack2_expectations_target}"
        manifest = "meta/netstack2/fastudp/${suite_label}_syscall_tests.cml"
      },
    ]
  }

  run_in_cq_with_ns3 = false
  if (defined(invoker.run_in_cq_with_ns3)) {
    run_in_cq_with_ns3 = invoker.run_in_cq_with_ns3
  }

  test_deps = []
  local_test_deps = []
  foreach(stack, stacks) {
    combined_label = "${stack.label}_${suite_label}"

    test_target_label = "${combined_label}_socket_tests"
    test(test_target_label) {
      deps = [
        ":${suite_label}_socket_tests",
        ":gtest_main",
        stack.expectations,
      ]

      # In-tree executables automatically get a logging backend dep unless we opt
      # out.
      disable_syslog_backend = true
    }

    test_package_label = "${combined_label}_syscall_tests"
    fuchsia_unittest_package(test_package_label) {
      package_name = test_package_label
      manifest = stack.manifest
      deps = [
        ":${test_target_label}",
        stack.component,
      ]
    }

    local_test_deps += [ ":${test_package_label}" ]

    if (run_in_cq_with_ns3 || stack.label != ns3_label) {
      test_deps += [ ":${test_package_label}" ]
    }
  }

  group(suite_label) {
    testonly = true
    public_deps = test_deps
  }

  group("${suite_label}_${local_testing_suffix}") {
    testonly = true
    public_deps = test_deps
  }
}

syscall_test_suite(generic_test_label) {
}
syscall_test_suite(raw_packet_test_label) {
  run_in_cq_with_ns3 = true
}
syscall_test_suite(udp_test_label) {
}
syscall_test_suite(udp_unbound_test_label) {
}
syscall_test_suite(tcp_test_label) {
  run_with_fast_udp = false
}
syscall_test_suite(tcp_blocking_test_label) {
  run_with_fast_udp = false
}

group("tests") {
  testonly = true
  public_deps = [
    ":${raw_packet_test_label}",
    ":${tcp_blocking_test_label}",
    ":${tcp_test_label}",
    ":${udp_test_label}",
    ":${udp_unbound_test_label}",
  ]
}

# This target contains all tests, including those currently too long
# to run in CQ, and is provided for the benefit of developers iterating
# locally.
#
# TODO(https://fxbug.dev/110881): Remove once all tests run in CQ.
group("local-testing") {
  testonly = true
  public_deps = [
    ":${generic_test_label}_${local_testing_suffix}",
    ":${raw_packet_test_label}_${local_testing_suffix}",
    ":${tcp_blocking_test_label}_${local_testing_suffix}",
    ":${tcp_test_label}_${local_testing_suffix}",
    ":${udp_test_label}_${local_testing_suffix}",
    ":${udp_unbound_test_label}_${local_testing_suffix}",
  ]
}
