# Copyright 2022 The Fuchsia Authors. All rights reserved.
# Use of this source code is governed by a BSD-style license that can be
# found in the LICENSE file.

import("//build/components.gni")
import("//build/test.gni")

source_set("expectations") {
  sources = [
    "expects/expectations.cc",
    "expects/expectations.h",
  ]
  deps = [
    "//third_party/abseil-cpp/absl/container:flat_hash_set",
    "//third_party/abseil-cpp/absl/status:statusor",
    "//third_party/abseil-cpp/absl/strings",
    "//third_party/abseil-cpp/absl/strings:str_format",
    "//third_party/abseil-cpp/absl/types:variant",
    "//third_party/googletest:gtest",
    "//third_party/re2",
  ]
  public_deps = [
    ":gvisor_test_util",
    "//third_party/abseil-cpp/absl/container:flat_hash_map",
  ]
  testonly = true
}

config("gvisor_test_util_config") {
  include_dirs = [ "gvisor" ]
}

static_library("gvisor_test_util") {
  testonly = true
  public = [
    "gvisor/test/util/capability_util.h",
    "gvisor/test/util/cleanup.h",
    "gvisor/test/util/file_descriptor.h",
    "gvisor/test/util/fs_util.h",
    "gvisor/test/util/logging.h",
    "gvisor/test/util/posix_error.h",
    "gvisor/test/util/save_util.h",
    "gvisor/test/util/socket_util.h",
    "gvisor/test/util/temp_path.h",
    "gvisor/test/util/test_util.h",
    "gvisor/test/util/thread_util.h",
    "gvisor/test/util/timer_util.h",
  ]
  sources = [
    "gvisor/test/util/capability_util.h",
    "gvisor/test/util/cleanup.h",
    "gvisor/test/util/file_descriptor.h",
    "gvisor/test/util/fs_util.cc",
    "gvisor/test/util/fs_util.h",
    "gvisor/test/util/fuchsia_capability_util.cc",
    "gvisor/test/util/logging.cc",
    "gvisor/test/util/logging.h",
    "gvisor/test/util/posix_error.cc",
    "gvisor/test/util/posix_error.h",
    "gvisor/test/util/save_util.cc",
    "gvisor/test/util/save_util.h",
    "gvisor/test/util/save_util_other.cc",
    "gvisor/test/util/socket_util.cc",
    "gvisor/test/util/socket_util.h",
    "gvisor/test/util/socket_util_impl.cc",
    "gvisor/test/util/temp_path.cc",
    "gvisor/test/util/temp_path.h",
    "gvisor/test/util/test_util.cc",
    "gvisor/test/util/test_util.h",
    "gvisor/test/util/thread_util.h",
    "gvisor/test/util/timer_util.cc",
    "gvisor/test/util/timer_util.h",
  ]
  deps = [
    "//third_party/abseil-cpp/absl/base:core_headers",
    "//third_party/abseil-cpp/absl/flags:flag",
    "//third_party/abseil-cpp/absl/flags:parse",
    "//third_party/abseil-cpp/absl/memory",
    "//third_party/abseil-cpp/absl/strings",
    "//third_party/abseil-cpp/absl/strings:str_format",
    "//third_party/abseil-cpp/absl/time",
    "//third_party/abseil-cpp/absl/types:optional",
    "//third_party/abseil-cpp/absl/types:variant",
  ]
  public_deps = [
    "//third_party/googletest:gmock",
    "//third_party/googletest:gtest",
  ]
  public_configs = [ ":gvisor_test_util_config" ]
}

raw_packet_test_label = "raw_packet"
udp_test_label = "udp"
udp_unbound_test_label = "udp_unbound"
generic_test_label = "generic"
tcp_test_label = "tcp"

source_set("${raw_packet_test_label}_socket_tests") {
  sources = [
    "gvisor/test/syscalls/linux/ip_socket_test_util.cc",
    "gvisor/test/syscalls/linux/ip_socket_test_util.h",
    "gvisor/test/syscalls/linux/packet_socket.cc",
    "gvisor/test/syscalls/linux/packet_socket_dgram.cc",
    "gvisor/test/syscalls/linux/packet_socket_raw.cc",
    "gvisor/test/syscalls/linux/raw_socket.cc",
    "gvisor/test/syscalls/linux/raw_socket_hdrincl.cc",
    "gvisor/test/syscalls/linux/raw_socket_icmp.cc",
    "gvisor/test/syscalls/linux/unix_domain_socket_test_util.cc",
    "gvisor/test/syscalls/linux/unix_domain_socket_test_util.h",
  ]

  deps = [
    ":gvisor_test_util",
    "//third_party/abseil-cpp/absl/base:endian",
    "//third_party/abseil-cpp/absl/strings",
  ]

  testonly = true
}

source_set("${udp_unbound_test_label}_socket_tests") {
  sources = [
    "gvisor/test/syscalls/linux/ip_socket_test_util.cc",
    "gvisor/test/syscalls/linux/ip_socket_test_util.h",
    "gvisor/test/syscalls/linux/socket_ipv4_datagram_based_socket_unbound.cc",
    "gvisor/test/syscalls/linux/socket_ipv4_datagram_based_socket_unbound.h",
    "gvisor/test/syscalls/linux/socket_ipv4_datagram_based_socket_unbound_loopback.cc",
    "gvisor/test/syscalls/linux/socket_ipv4_udp_unbound.cc",
    "gvisor/test/syscalls/linux/socket_ipv4_udp_unbound.h",
    "gvisor/test/syscalls/linux/socket_ipv4_udp_unbound_external_networking.cc",
    "gvisor/test/syscalls/linux/socket_ipv4_udp_unbound_external_networking_test.cc",
    "gvisor/test/syscalls/linux/socket_ipv4_udp_unbound_loopback.cc",
    "gvisor/test/syscalls/linux/socket_ipv4_udp_unbound_loopback_nogotsan.cc",
    "gvisor/test/syscalls/linux/socket_ipv6_udp_unbound.cc",
    "gvisor/test/syscalls/linux/socket_ipv6_udp_unbound.h",
    "gvisor/test/syscalls/linux/socket_ipv6_udp_unbound_external_networking.cc",
    "gvisor/test/syscalls/linux/socket_ipv6_udp_unbound_external_networking_test.cc",
    "gvisor/test/syscalls/linux/socket_ipv6_udp_unbound_loopback.cc",
  ]

  deps = [
    ":gvisor_test_util",
    "//third_party/abseil-cpp/absl/memory",
    "//third_party/abseil-cpp/absl/strings",
    "//third_party/abseil-cpp/absl/strings:str_format",
  ]

  testonly = true
}

source_set("${udp_test_label}_socket_tests") {
  sources = [
    "gvisor/test/syscalls/linux/ip_socket_test_util.cc",
    "gvisor/test/syscalls/linux/ip_socket_test_util.h",
    "gvisor/test/syscalls/linux/socket_generic.h",
    "gvisor/test/syscalls/linux/socket_generic.h",
    "gvisor/test/syscalls/linux/socket_generic_test_cases.cc",
    "gvisor/test/syscalls/linux/socket_ip_udp_generic.cc",
    "gvisor/test/syscalls/linux/socket_ip_udp_generic.h",
    "gvisor/test/syscalls/linux/socket_ip_udp_loopback.cc",
    "gvisor/test/syscalls/linux/socket_ip_udp_loopback_blocking.cc",
    "gvisor/test/syscalls/linux/socket_ip_udp_loopback_nonblock.cc",
    "gvisor/test/syscalls/linux/socket_non_blocking.cc",
    "gvisor/test/syscalls/linux/socket_non_blocking.h",
    "gvisor/test/syscalls/linux/socket_non_stream.cc",
    "gvisor/test/syscalls/linux/socket_non_stream.h",
    "gvisor/test/syscalls/linux/socket_non_stream_blocking.cc",
    "gvisor/test/syscalls/linux/socket_non_stream_blocking.h",
    "gvisor/test/syscalls/linux/udp_bind.cc",
    "gvisor/test/syscalls/linux/udp_socket.cc",
    "gvisor/test/syscalls/linux/unix_domain_socket_test_util.cc",
    "gvisor/test/syscalls/linux/unix_domain_socket_test_util.h",
  ]

  deps = [
    ":gvisor_test_util",
    "//third_party/abseil-cpp/absl/memory",
    "//third_party/abseil-cpp/absl/strings",
    "//third_party/abseil-cpp/absl/strings:str_format",
  ]

  testonly = true
}

source_set("${tcp_test_label}_socket_tests") {
  sources = [
    "gvisor/test/syscalls/linux/ip_socket_test_util.cc",
    "gvisor/test/syscalls/linux/ip_socket_test_util.h",
    "gvisor/test/syscalls/linux/socket_generic.h",
    "gvisor/test/syscalls/linux/socket_generic_test_cases.cc",
    "gvisor/test/syscalls/linux/socket_ip_tcp_generic.cc",
    "gvisor/test/syscalls/linux/socket_ip_tcp_generic.h",
    "gvisor/test/syscalls/linux/socket_ip_tcp_generic_loopback.cc",
    "gvisor/test/syscalls/linux/socket_ip_tcp_loopback.cc",
    "gvisor/test/syscalls/linux/socket_ip_tcp_loopback_blocking.cc",
    "gvisor/test/syscalls/linux/socket_ip_tcp_loopback_nonblock.cc",
    "gvisor/test/syscalls/linux/socket_non_blocking.cc",
    "gvisor/test/syscalls/linux/socket_non_blocking.h",
    "gvisor/test/syscalls/linux/socket_stream_blocking.cc",
    "gvisor/test/syscalls/linux/socket_stream_blocking.h",
    "gvisor/test/syscalls/linux/tcp_socket.cc",
    "gvisor/test/syscalls/linux/unix_domain_socket_test_util.cc",
    "gvisor/test/syscalls/linux/unix_domain_socket_test_util.h",
  ]
  deps = [
    ":gvisor_test_util",
    "//third_party/abseil-cpp/absl/strings:str_format",
    "//third_party/abseil-cpp/absl/time",
  ]

  testonly = true
}

source_set("${generic_test_label}_socket_tests") {
  sources = [
    "gvisor/test/syscalls/linux/ip_socket_test_util.cc",
    "gvisor/test/syscalls/linux/ip_socket_test_util.h",
    "gvisor/test/syscalls/linux/socket.cc",
    "gvisor/test/syscalls/linux/socket_blocking.cc",
    "gvisor/test/syscalls/linux/socket_blocking.h",
    "gvisor/test/syscalls/linux/socket_inet_loopback.cc",
    "gvisor/test/syscalls/linux/socket_inet_loopback_isolated.cc",
    "gvisor/test/syscalls/linux/socket_ip_loopback_blocking.cc",
    "gvisor/test/syscalls/linux/socket_ip_tcp_udp_generic.cc",
    "gvisor/test/syscalls/linux/socket_ip_unbound.cc",
    "gvisor/test/syscalls/linux/unix_domain_socket_test_util.cc",
    "gvisor/test/syscalls/linux/unix_domain_socket_test_util.h",
  ]
  deps = [
    ":gvisor_test_util",
    "//third_party/abseil-cpp/absl/memory",
    "//third_party/abseil-cpp/absl/strings",
    "//third_party/abseil-cpp/absl/strings:str_format",
    "//third_party/abseil-cpp/absl/time",
  ]

  testonly = true
}

source_set("gtest_main") {
  sources = [ "gtest_main.cc" ]
  include_dirs = [ "gvisor" ]
  deps = [
    ":expectations",
    ":gvisor_test_util",
    "//third_party/abseil-cpp/absl/container:flat_hash_set",
    "//third_party/abseil-cpp/absl/flags:flag",
    "//third_party/abseil-cpp/absl/flags:parse",
    "//third_party/abseil-cpp/absl/strings",
    "//third_party/googletest:gmock",
    "//third_party/googletest:gtest",
  ]
  testonly = true
}

tests = [
  {
    label = generic_test_label
    cq = false
  },
  {
    label = raw_packet_test_label
    cq = true
  },
  {
    label = udp_test_label
    cq = false
  },
  {
    label = udp_unbound_test_label
    cq = false
  },
  {
    label = tcp_test_label
    cq = false
  },
]

test_deps = []
local_test_deps = []

foreach(test, tests) {
  source_set("netstack3_${test.label}_expectations") {
    sources = [ "expects/netstack3/${test.label}_expectations.cc" ]
    deps = [
      ":expectations",
      ":gvisor_test_util",
      "//third_party/abseil-cpp/absl/strings",
    ]
    testonly = true
  }

  source_set("netstack2_${test.label}_expectations") {
    sources = [ "expects/netstack2/${test.label}_expectations.cc" ]
    deps = [
      ":expectations",
      ":gvisor_test_util",
      "//third_party/abseil-cpp/absl/strings",
    ]
    testonly = true
  }

  # Clear the list before overwriting it to satisfy GN.
  stacks = []
  stacks = [
    {
      label = "netstack2_fastudp"
      component =
          "//src/connectivity/network/netstack:component-with-fast-udp-debug"
      expectations = ":netstack2_${test.label}_expectations"
      manifest = "meta/netstack2/fastudp/${test.label}_syscall_tests.cml"
    },
    {
      label = "netstack2_syncudp"
      component = "//src/connectivity/network/netstack:component-debug"
      expectations = ":netstack2_${test.label}_expectations"
      manifest = "meta/netstack2/syncudp/${test.label}_syscall_tests.cml"
    },
    {
      label = "netstack3"
      component = "//src/connectivity/network/netstack3:component"
      expectations = ":netstack3_${test.label}_expectations"
      manifest = "meta/netstack3/${test.label}_syscall_tests.cml"
    },
  ]

  foreach(stack, stacks) {
    combined_label = "${stack.label}_${test.label}"

    socket_tests_label = "${combined_label}_socket_tests"
    test(socket_tests_label) {
      deps = [
        ":${test.label}_socket_tests",
        ":gtest_main",
        stack.expectations,
      ]

      # In-tree executables automatically get a logging backend dep unless we opt
      # out.
      disable_syslog_backend = true
    }

    syscall_tests_label = "${combined_label}_syscall_tests"
    fuchsia_unittest_package(syscall_tests_label) {
      package_name = syscall_tests_label
      manifest = stack.manifest
      deps = [
        ":${socket_tests_label}",
        stack.component,
      ]
    }

    local_test_deps += [ ":${syscall_tests_label}" ]
    if (test.cq) {
      test_deps += [ ":${syscall_tests_label}" ]
    }
  }
}

group("tests") {
  testonly = true
  public_deps = test_deps
}

# This target contains all tests, including those currently too long
# to run in CQ, and is provided for the benefit of developers iterating
# locally.
#
# TODO(https://fxbug.dev/110881): Remove once all tests run in CQ.
group("local-testing") {
  testonly = true
  public_deps = local_test_deps
}
